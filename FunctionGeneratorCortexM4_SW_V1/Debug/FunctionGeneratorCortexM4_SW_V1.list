
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008908  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee0  08008ae8  08008ae8  00018ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c8  080099c8  00020444  2**0
                  CONTENTS
  4 .ARM          00000000  080099c8  080099c8  00020444  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099c8  080099c8  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099cc  080099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  080099d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000444  08009e14  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08009e14  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021154  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043e8  00000000  00000000  000415c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a98  00000000  00000000  000459b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001858  00000000  00000000  00047448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e6cc  00000000  00000000  00048ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000199f0  00000000  00000000  0007736c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00122df1  00000000  00000000  00090d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b3b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000759c  00000000  00000000  001b3bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000444 	.word	0x20000444
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008ad0 	.word	0x08008ad0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000448 	.word	0x20000448
 800021c:	08008ad0 	.word	0x08008ad0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <dm_update_display>:
//uint16_t button_x_positions[1] = { (BUTTON_WIDTH) };



void dm_update_display()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af04      	add	r7, sp, #16




	//ILI9341_Draw_Filled_Circle(50, 50, 50, BLUE);
	ILI9341_WriteString(30, 210, "ONE", Font_11x18, BLACK, DARKCYAN);
 80002c6:	4b2f      	ldr	r3, [pc, #188]	; (8000384 <dm_update_display+0xc4>)
 80002c8:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80002cc:	9202      	str	r2, [sp, #8]
 80002ce:	2200      	movs	r2, #0
 80002d0:	9201      	str	r2, [sp, #4]
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	9200      	str	r2, [sp, #0]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a2b      	ldr	r2, [pc, #172]	; (8000388 <dm_update_display+0xc8>)
 80002da:	21d2      	movs	r1, #210	; 0xd2
 80002dc:	201e      	movs	r0, #30
 80002de:	f007 fbaf 	bl	8007a40 <ILI9341_WriteString>

	ILI9341_FillRectangle(	button_x_positions[0],
 80002e2:	4b2a      	ldr	r3, [pc, #168]	; (800038c <dm_update_display+0xcc>)
 80002e4:	8818      	ldrh	r0, [r3, #0]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2332      	movs	r3, #50	; 0x32
 80002ec:	2250      	movs	r2, #80	; 0x50
 80002ee:	21be      	movs	r1, #190	; 0xbe
 80002f0:	f007 fbf2 	bl	8007ad8 <ILI9341_FillRectangle>
							BUTTON_WIDTH,
							50,
							BLACK);


	ILI9341_WriteString(110, 210, "TWO", Font_11x18, BLACK, DARKGREEN);
 80002f4:	4b23      	ldr	r3, [pc, #140]	; (8000384 <dm_update_display+0xc4>)
 80002f6:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80002fa:	9202      	str	r2, [sp, #8]
 80002fc:	2200      	movs	r2, #0
 80002fe:	9201      	str	r2, [sp, #4]
 8000300:	685a      	ldr	r2, [r3, #4]
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a22      	ldr	r2, [pc, #136]	; (8000390 <dm_update_display+0xd0>)
 8000308:	21d2      	movs	r1, #210	; 0xd2
 800030a:	206e      	movs	r0, #110	; 0x6e
 800030c:	f007 fb98 	bl	8007a40 <ILI9341_WriteString>

	ILI9341_FillRectangle(	button_x_positions[1],
 8000310:	4b1e      	ldr	r3, [pc, #120]	; (800038c <dm_update_display+0xcc>)
 8000312:	8858      	ldrh	r0, [r3, #2]
 8000314:	2300      	movs	r3, #0
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2332      	movs	r3, #50	; 0x32
 800031a:	2250      	movs	r2, #80	; 0x50
 800031c:	21be      	movs	r1, #190	; 0xbe
 800031e:	f007 fbdb 	bl	8007ad8 <ILI9341_FillRectangle>
							BUTTON_Y_POSITION,
							BUTTON_WIDTH,
							50,
							BLACK);

	ILI9341_WriteString(170, 210, "THREE", Font_11x18, BLACK, YELLOW);
 8000322:	4b18      	ldr	r3, [pc, #96]	; (8000384 <dm_update_display+0xc4>)
 8000324:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000328:	9202      	str	r2, [sp, #8]
 800032a:	2200      	movs	r2, #0
 800032c:	9201      	str	r2, [sp, #4]
 800032e:	685a      	ldr	r2, [r3, #4]
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a17      	ldr	r2, [pc, #92]	; (8000394 <dm_update_display+0xd4>)
 8000336:	21d2      	movs	r1, #210	; 0xd2
 8000338:	20aa      	movs	r0, #170	; 0xaa
 800033a:	f007 fb81 	bl	8007a40 <ILI9341_WriteString>

	ILI9341_FillRectangle(	button_x_positions[2],
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <dm_update_display+0xcc>)
 8000340:	8898      	ldrh	r0, [r3, #4]
 8000342:	2300      	movs	r3, #0
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2332      	movs	r3, #50	; 0x32
 8000348:	2250      	movs	r2, #80	; 0x50
 800034a:	21be      	movs	r1, #190	; 0xbe
 800034c:	f007 fbc4 	bl	8007ad8 <ILI9341_FillRectangle>
							BUTTON_Y_POSITION,
							BUTTON_WIDTH,
							50,
							BLACK);

	ILI9341_WriteString(250, 210, "FOUR", Font_11x18, BLACK, RED);
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <dm_update_display+0xc4>)
 8000352:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000356:	9202      	str	r2, [sp, #8]
 8000358:	2200      	movs	r2, #0
 800035a:	9201      	str	r2, [sp, #4]
 800035c:	685a      	ldr	r2, [r3, #4]
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <dm_update_display+0xd8>)
 8000364:	21d2      	movs	r1, #210	; 0xd2
 8000366:	20fa      	movs	r0, #250	; 0xfa
 8000368:	f007 fb6a 	bl	8007a40 <ILI9341_WriteString>

	ILI9341_FillRectangle(	button_x_positions[3],
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <dm_update_display+0xcc>)
 800036e:	88d8      	ldrh	r0, [r3, #6]
 8000370:	2300      	movs	r3, #0
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	2332      	movs	r3, #50	; 0x32
 8000376:	2250      	movs	r2, #80	; 0x50
 8000378:	21be      	movs	r1, #190	; 0xbe
 800037a:	f007 fbad 	bl	8007ad8 <ILI9341_FillRectangle>
							BLACK);



	//dm_test_screen();
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	200003d8 	.word	0x200003d8
 8000388:	08008ae8 	.word	0x08008ae8
 800038c:	20000000 	.word	0x20000000
 8000390:	08008aec 	.word	0x08008aec
 8000394:	08008af0 	.word	0x08008af0
 8000398:	08008af8 	.word	0x08008af8

0800039c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08c      	sub	sp, #48	; 0x30
 80003a0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80003a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2220      	movs	r2, #32
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f007 fc3b 	bl	8007c30 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80003ba:	4b32      	ldr	r3, [pc, #200]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c2:	4b30      	ldr	r3, [pc, #192]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80003d4:	4b2b      	ldr	r3, [pc, #172]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003da:	4b2a      	ldr	r3, [pc, #168]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e0:	4b28      	ldr	r3, [pc, #160]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003e6:	4b27      	ldr	r3, [pc, #156]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003f2:	4b24      	ldr	r3, [pc, #144]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <MX_ADC1_Init+0xe8>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000400:	4b20      	ldr	r3, [pc, #128]	; (8000484 <MX_ADC1_Init+0xe8>)
 8000402:	2200      	movs	r2, #0
 8000404:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <MX_ADC1_Init+0xe8>)
 8000408:	2200      	movs	r2, #0
 800040a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800040c:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <MX_ADC1_Init+0xe8>)
 800040e:	2201      	movs	r2, #1
 8000410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <MX_ADC1_Init+0xe8>)
 8000416:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800041a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <MX_ADC1_Init+0xe8>)
 800041e:	2200      	movs	r2, #0
 8000420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000424:	4817      	ldr	r0, [pc, #92]	; (8000484 <MX_ADC1_Init+0xe8>)
 8000426:	f001 ffcd 	bl	80023c4 <HAL_ADC_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000430:	f000 ff2c 	bl	800128c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000434:	2300      	movs	r3, #0
 8000436:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043c:	4619      	mov	r1, r3
 800043e:	4811      	ldr	r0, [pc, #68]	; (8000484 <MX_ADC1_Init+0xe8>)
 8000440:	f002 fd56 	bl	8002ef0 <HAL_ADCEx_MultiModeConfigChannel>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800044a:	f000 ff1f 	bl	800128c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_ADC1_Init+0xec>)
 8000450:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000452:	2306      	movs	r3, #6
 8000454:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800045a:	237f      	movs	r3, #127	; 0x7f
 800045c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800045e:	2304      	movs	r3, #4
 8000460:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4619      	mov	r1, r3
 800046a:	4806      	ldr	r0, [pc, #24]	; (8000484 <MX_ADC1_Init+0xe8>)
 800046c:	f002 f96a 	bl	8002744 <HAL_ADC_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000476:	f000 ff09 	bl	800128c <Error_Handler>
  }

}
 800047a:	bf00      	nop
 800047c:	3730      	adds	r7, #48	; 0x30
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000484 	.word	0x20000484
 8000488:	0c900008 	.word	0x0c900008

0800048c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
 80004a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004ac:	d14f      	bne.n	800054e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004ae:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <HAL_ADC_MspInit+0xcc>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a29      	ldr	r2, [pc, #164]	; (8000558 <HAL_ADC_MspInit+0xcc>)
 80004b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b27      	ldr	r3, [pc, #156]	; (8000558 <HAL_ADC_MspInit+0xcc>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b24      	ldr	r3, [pc, #144]	; (8000558 <HAL_ADC_MspInit+0xcc>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	4a23      	ldr	r2, [pc, #140]	; (8000558 <HAL_ADC_MspInit+0xcc>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d2:	4b21      	ldr	r3, [pc, #132]	; (8000558 <HAL_ADC_MspInit+0xcc>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004de:	2304      	movs	r3, #4
 80004e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e2:	2303      	movs	r3, #3
 80004e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f4:	f004 f818 	bl	8004528 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <HAL_ADC_MspInit+0xd0>)
 80004fa:	4a19      	ldr	r2, [pc, #100]	; (8000560 <HAL_ADC_MspInit+0xd4>)
 80004fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <HAL_ADC_MspInit+0xd0>)
 8000500:	2205      	movs	r2, #5
 8000502:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_ADC_MspInit+0xd0>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <HAL_ADC_MspInit+0xd0>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_ADC_MspInit+0xd0>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_ADC_MspInit+0xd0>)
 8000518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800051c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_ADC_MspInit+0xd0>)
 8000520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000524:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <HAL_ADC_MspInit+0xd0>)
 8000528:	2220      	movs	r2, #32
 800052a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_ADC_MspInit+0xd0>)
 800052e:	2200      	movs	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000532:	480a      	ldr	r0, [pc, #40]	; (800055c <HAL_ADC_MspInit+0xd0>)
 8000534:	f003 fd86 	bl	8004044 <HAL_DMA_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800053e:	f000 fea5 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <HAL_ADC_MspInit+0xd0>)
 8000546:	655a      	str	r2, [r3, #84]	; 0x54
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <HAL_ADC_MspInit+0xd0>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800054e:	bf00      	nop
 8000550:	3728      	adds	r7, #40	; 0x28
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	200004f0 	.word	0x200004f0
 8000560:	40020008 	.word	0x40020008

08000564 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_COMP1_Init+0x44>)
 800056a:	4a10      	ldr	r2, [pc, #64]	; (80005ac <MX_COMP1_Init+0x48>)
 800056c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_COMP1_Init+0x44>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_COMP1_Init+0x44>)
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <MX_COMP1_Init+0x4c>)
 8000578:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_COMP1_Init+0x44>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_COMP1_Init+0x44>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_COMP1_Init+0x44>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_COMP1_Init+0x44>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_COMP1_Init+0x44>)
 8000594:	f002 ff00 	bl	8003398 <HAL_COMP_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800059e:	f000 fe75 	bl	800128c <Error_Handler>
  }

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000550 	.word	0x20000550
 80005ac:	40010200 	.word	0x40010200
 80005b0:	00800030 	.word	0x00800030

080005b4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <HAL_COMP_MspInit+0x5c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d118      	bne.n	8000608 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_COMP_MspInit+0x60>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_COMP_MspInit+0x60>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_COMP_MspInit+0x60>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f2:	2303      	movs	r3, #3
 80005f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f003 ff90 	bl	8004528 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40010200 	.word	0x40010200
 8000614:	40021000 	.word	0x40021000

08000618 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2230      	movs	r2, #48	; 0x30
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f007 fb03 	bl	8007c30 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_DAC1_Init+0x8c>)
 800062c:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <MX_DAC1_Init+0x90>)
 800062e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000630:	481c      	ldr	r0, [pc, #112]	; (80006a4 <MX_DAC1_Init+0x8c>)
 8000632:	f003 f954 	bl	80038de <HAL_DAC_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800063c:	f000 fe26 	bl	800128c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000644:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000652:	2306      	movs	r3, #6
 8000654:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800065e:	2301      	movs	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_DAC1_Init+0x8c>)
 800066e:	f003 fab3 	bl	8003bd8 <HAL_DAC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8000678:	f000 fe08 	bl	800128c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	2210      	movs	r2, #16
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_DAC1_Init+0x8c>)
 800068c:	f003 faa4 	bl	8003bd8 <HAL_DAC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8000696:	f000 fdf9 	bl	800128c <Error_Handler>
  }

}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	; 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000588 	.word	0x20000588
 80006a8:	50000800 	.word	0x50000800

080006ac <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2230      	movs	r2, #48	; 0x30
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f007 fab9 	bl	8007c30 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_DAC2_Init+0x6c>)
 80006c0:	4a16      	ldr	r2, [pc, #88]	; (800071c <MX_DAC2_Init+0x70>)
 80006c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80006c4:	4814      	ldr	r0, [pc, #80]	; (8000718 <MX_DAC2_Init+0x6c>)
 80006c6:	f003 f90a 	bl	80038de <HAL_DAC_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80006d0:	f000 fddc 	bl	800128c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80006d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006d8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006e6:	2306      	movs	r3, #6
 80006e8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_DAC2_Init+0x6c>)
 8000702:	f003 fa69 	bl	8003bd8 <HAL_DAC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 800070c:	f000 fdbe 	bl	800128c <Error_Handler>
  }

}
 8000710:	bf00      	nop
 8000712:	3730      	adds	r7, #48	; 0x30
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000574 	.word	0x20000574
 800071c:	50000c00 	.word	0x50000c00

08000720 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a56      	ldr	r2, [pc, #344]	; (8000898 <HAL_DAC_MspInit+0x178>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d150      	bne.n	80007e4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000742:	4b56      	ldr	r3, [pc, #344]	; (800089c <HAL_DAC_MspInit+0x17c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a55      	ldr	r2, [pc, #340]	; (800089c <HAL_DAC_MspInit+0x17c>)
 8000748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b53      	ldr	r3, [pc, #332]	; (800089c <HAL_DAC_MspInit+0x17c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b50      	ldr	r3, [pc, #320]	; (800089c <HAL_DAC_MspInit+0x17c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a4f      	ldr	r2, [pc, #316]	; (800089c <HAL_DAC_MspInit+0x17c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b4d      	ldr	r3, [pc, #308]	; (800089c <HAL_DAC_MspInit+0x17c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000772:	2330      	movs	r3, #48	; 0x30
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000788:	f003 fece 	bl	8004528 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800078c:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 800078e:	4a45      	ldr	r2, [pc, #276]	; (80008a4 <HAL_DAC_MspInit+0x184>)
 8000790:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000792:	4b43      	ldr	r3, [pc, #268]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 8000794:	2206      	movs	r2, #6
 8000796:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000798:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 800079a:	2210      	movs	r2, #16
 800079c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800079e:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007aa:	4b3d      	ldr	r3, [pc, #244]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007b2:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 80007b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007b8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 80007bc:	2220      	movs	r2, #32
 80007be:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007c0:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80007c6:	4836      	ldr	r0, [pc, #216]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 80007c8:	f003 fc3c 	bl	8004044 <HAL_DMA_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80007d2:	f000 fd5b 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a31      	ldr	r2, [pc, #196]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	4a30      	ldr	r2, [pc, #192]	; (80008a0 <HAL_DAC_MspInit+0x180>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80007e2:	e054      	b.n	800088e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <HAL_DAC_MspInit+0x188>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d14f      	bne.n	800088e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <HAL_DAC_MspInit+0x17c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a2a      	ldr	r2, [pc, #168]	; (800089c <HAL_DAC_MspInit+0x17c>)
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <HAL_DAC_MspInit+0x17c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <HAL_DAC_MspInit+0x17c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a24      	ldr	r2, [pc, #144]	; (800089c <HAL_DAC_MspInit+0x17c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <HAL_DAC_MspInit+0x17c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000822:	2303      	movs	r3, #3
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f003 fe78 	bl	8004528 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <HAL_DAC_MspInit+0x190>)
 800083c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 8000840:	2229      	movs	r2, #41	; 0x29
 8000842:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 8000846:	2210      	movs	r2, #16
 8000848:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 8000858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800085c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 8000860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000864:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 8000868:	2220      	movs	r2, #32
 800086a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 8000874:	f003 fbe6 	bl	8004044 <HAL_DMA_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800087e:	f000 fd05 	bl	800128c <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_DAC_MspInit+0x18c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800088e:	bf00      	nop
 8000890:	3730      	adds	r7, #48	; 0x30
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	50000800 	.word	0x50000800
 800089c:	40021000 	.word	0x40021000
 80008a0:	2000059c 	.word	0x2000059c
 80008a4:	4002001c 	.word	0x4002001c
 80008a8:	50000c00 	.word	0x50000c00
 80008ac:	200005fc 	.word	0x200005fc
 80008b0:	40020030 	.word	0x40020030

080008b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_DMA_Init+0x80>)
 80008bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008be:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <MX_DMA_Init+0x80>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6493      	str	r3, [r2, #72]	; 0x48
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_DMA_Init+0x80>)
 80008c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_DMA_Init+0x80>)
 80008d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <MX_DMA_Init+0x80>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6493      	str	r3, [r2, #72]	; 0x48
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_DMA_Init+0x80>)
 80008e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2101      	movs	r1, #1
 80008ee:	200b      	movs	r0, #11
 80008f0:	f002 ffc1 	bl	8003876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f4:	200b      	movs	r0, #11
 80008f6:	f002 ffd8 	bl	80038aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	200c      	movs	r0, #12
 8000900:	f002 ffb9 	bl	8003876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000904:	200c      	movs	r0, #12
 8000906:	f002 ffd0 	bl	80038aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	200d      	movs	r0, #13
 8000910:	f002 ffb1 	bl	8003876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000914:	200d      	movs	r0, #13
 8000916:	f002 ffc8 	bl	80038aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	200e      	movs	r0, #14
 8000920:	f002 ffa9 	bl	8003876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000924:	200e      	movs	r0, #14
 8000926:	f002 ffc0 	bl	80038aa <HAL_NVIC_EnableIRQ>

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <update_dc_bias_sweep+0x88>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d006      	beq.n	8000952 <update_dc_bias_sweep+0x1a>
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <update_dc_bias_sweep+0x8c>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <update_dc_bias_sweep+0x8c>)
 800094e:	801a      	strh	r2, [r3, #0]
 8000950:	e005      	b.n	800095e <update_dc_bias_sweep+0x26>
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <update_dc_bias_sweep+0x8c>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	3b01      	subs	r3, #1
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <update_dc_bias_sweep+0x8c>)
 800095c:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <update_dc_bias_sweep+0x8c>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d10a      	bne.n	800097c <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <update_dc_bias_sweep+0x90>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <update_dc_bias_sweep+0x3e>
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <update_dc_bias_sweep+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	e002      	b.n	800097c <update_dc_bias_sweep+0x44>
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <update_dc_bias_sweep+0x90>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <update_dc_bias_sweep+0x8c>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <update_dc_bias_sweep+0x52>
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <update_dc_bias_sweep+0x88>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <update_dc_bias_sweep+0x8c>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000992:	d302      	bcc.n	800099a <update_dc_bias_sweep+0x62>
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <update_dc_bias_sweep+0x88>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <update_dc_bias_sweep+0x90>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	2108      	movs	r1, #8
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f003 ff58 	bl	800485c <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <update_dc_bias_sweep+0x8c>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	2110      	movs	r1, #16
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <update_dc_bias_sweep+0x94>)
 80009b6:	f003 f8c9 	bl	8003b4c <HAL_DAC_SetValue>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000460 	.word	0x20000460
 80009c8:	20000464 	.word	0x20000464
 80009cc:	20000588 	.word	0x20000588

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db0b      	blt.n	8000a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 021f 	and.w	r2, r3, #31
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <__NVIC_EnableIRQ+0x38>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	43db      	mvns	r3, r3
 8000b02:	ea02 0103 	and.w	r1, r2, r3
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	fa93 f3a3 	rbit	r3, r3
 8000b12:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	fab3 f383 	clz	r3, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f003 031f 	and.w	r3, r3, #31
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	409a      	lsls	r2, r3
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	3302      	adds	r3, #2
 8000b30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40010000 	.word	0x40010000

08000b44 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa93 f3a3 	rbit	r3, r3
 8000b5e:	613b      	str	r3, [r7, #16]
  return result;
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	fab3 f383 	clz	r3, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	401a      	ands	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	fa93 f3a3 	rbit	r3, r3
 8000b7e:	61bb      	str	r3, [r7, #24]
  return result;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fab3 f383 	clz	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	431a      	orrs	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	601a      	str	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b089      	sub	sp, #36	; 0x24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa93 f3a3 	rbit	r3, r3
 8000bbc:	613b      	str	r3, [r7, #16]
  return result;
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	fab3 f383 	clz	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	2103      	movs	r1, #3
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa93 f3a3 	rbit	r3, r3
 8000bdc:	61bb      	str	r3, [r7, #24]
  return result;
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	fab3 f383 	clz	r3, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	60da      	str	r2, [r3, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3724      	adds	r7, #36	; 0x24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4013      	ands	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000

08000c4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c6e:	2004      	movs	r0, #4
 8000c70:	f7ff ffd4 	bl	8000c1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000c74:	2020      	movs	r0, #32
 8000c76:	f7ff ffd1 	bl	8000c1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff ffce 	bl	8000c1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c80:	2002      	movs	r0, #2
 8000c82:	f7ff ffcb 	bl	8000c1c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8000c86:	2108      	movs	r1, #8
 8000c88:	48d3      	ldr	r0, [pc, #844]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000c8a:	f7ff ffb9 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8000c8e:	2108      	movs	r1, #8
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f7ff ffb4 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8000c98:	2110      	movs	r1, #16
 8000c9a:	48cf      	ldr	r0, [pc, #828]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000c9c:	f7ff ffb0 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	48cd      	ldr	r0, [pc, #820]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000ca4:	f7ff ffac 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8000ca8:	2101      	movs	r1, #1
 8000caa:	48cc      	ldr	r0, [pc, #816]	; (8000fdc <MX_GPIO_Init+0x390>)
 8000cac:	f7ff ffa8 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8000cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb4:	48c8      	ldr	r0, [pc, #800]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000cb6:	f7ff ffa3 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8000cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbe:	48c6      	ldr	r0, [pc, #792]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000cc0:	f7ff ff9e 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	48c5      	ldr	r0, [pc, #788]	; (8000fdc <MX_GPIO_Init+0x390>)
 8000cc8:	f7ff ff9a 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	48c3      	ldr	r0, [pc, #780]	; (8000fdc <MX_GPIO_Init+0x390>)
 8000cd0:	f7ff ff96 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8000cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd8:	48c0      	ldr	r0, [pc, #768]	; (8000fdc <MX_GPIO_Init+0x390>)
 8000cda:	f7ff ff91 	bl	8000c00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8000cde:	49c0      	ldr	r1, [pc, #768]	; (8000fe0 <MX_GPIO_Init+0x394>)
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f7ff feff 	bl	8000ae4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8000ce6:	49bf      	ldr	r1, [pc, #764]	; (8000fe4 <MX_GPIO_Init+0x398>)
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fefb 	bl	8000ae4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8000cee:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000cf2:	2005      	movs	r0, #5
 8000cf4:	f7ff fef6 	bl	8000ae4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8000cf8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000cfc:	2005      	movs	r0, #5
 8000cfe:	f7ff fef1 	bl	8000ae4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8000d02:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff feec 	bl	8000ae4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000d0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d10:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d12:	2301      	movs	r3, #1
 8000d14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 f9bf 	bl	80070ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d32:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d40:	2302      	movs	r3, #2
 8000d42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f006 f9ae 	bl	80070ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f006 f99e 	bl	80070ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d74:	2301      	movs	r3, #1
 8000d76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f006 f98e 	bl	80070ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000d90:	2304      	movs	r3, #4
 8000d92:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4618      	mov	r0, r3
 8000dac:	f006 f97e 	bl	80070ac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db6:	4888      	ldr	r0, [pc, #544]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000db8:	f7ff fef3 	bl	8000ba2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc2:	4885      	ldr	r0, [pc, #532]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000dc4:	f7ff feed 	bl	8000ba2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4886      	ldr	r0, [pc, #536]	; (8000fe8 <MX_GPIO_Init+0x39c>)
 8000dce:	f7ff fee8 	bl	8000ba2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4884      	ldr	r0, [pc, #528]	; (8000fe8 <MX_GPIO_Init+0x39c>)
 8000dd8:	f7ff fee3 	bl	8000ba2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2104      	movs	r1, #4
 8000de0:	487d      	ldr	r0, [pc, #500]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000de2:	f7ff fede 	bl	8000ba2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dec:	487a      	ldr	r0, [pc, #488]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000dee:	f7ff fea9 	bl	8000b44 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	4877      	ldr	r0, [pc, #476]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000dfa:	f7ff fea3 	bl	8000b44 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2101      	movs	r1, #1
 8000e02:	4879      	ldr	r0, [pc, #484]	; (8000fe8 <MX_GPIO_Init+0x39c>)
 8000e04:	f7ff fe9e 	bl	8000b44 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4876      	ldr	r0, [pc, #472]	; (8000fe8 <MX_GPIO_Init+0x39c>)
 8000e0e:	f7ff fe99 	bl	8000b44 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2104      	movs	r1, #4
 8000e16:	4870      	ldr	r0, [pc, #448]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000e18:	f7ff fe94 	bl	8000b44 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4868      	ldr	r0, [pc, #416]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000e36:	f006 fb2c 	bl	8007492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f006 fb1c 	bl	8007492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4859      	ldr	r0, [pc, #356]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000e74:	f006 fb0d 	bl	8007492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8000e78:	2320      	movs	r3, #32
 8000e7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4851      	ldr	r0, [pc, #324]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000e92:	f006 fafe 	bl	8007492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8000e96:	2301      	movs	r3, #1
 8000e98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	484b      	ldr	r0, [pc, #300]	; (8000fdc <MX_GPIO_Init+0x390>)
 8000eb0:	f006 faef 	bl	8007492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8000eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4842      	ldr	r0, [pc, #264]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000ed0:	f006 fadf 	bl	8007492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8000ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eda:	2301      	movs	r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	483a      	ldr	r0, [pc, #232]	; (8000fd8 <MX_GPIO_Init+0x38c>)
 8000ef0:	f006 facf 	bl	8007492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8000ef4:	2340      	movs	r3, #64	; 0x40
 8000ef6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4833      	ldr	r0, [pc, #204]	; (8000fdc <MX_GPIO_Init+0x390>)
 8000f0e:	f006 fac0 	bl	8007492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	482c      	ldr	r0, [pc, #176]	; (8000fdc <MX_GPIO_Init+0x390>)
 8000f2c:	f006 fab1 	bl	8007492 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8000f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f36:	2301      	movs	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <MX_GPIO_Init+0x390>)
 8000f4c:	f006 faa1 	bl	8007492 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f50:	f7ff fd3e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fd8e 	bl	8000a7c <NVIC_EncodePriority>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4619      	mov	r1, r3
 8000f64:	2006      	movs	r0, #6
 8000f66:	f7ff fd5f 	bl	8000a28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f7ff fd3e 	bl	80009ec <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f70:	f7ff fd2e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fd7e 	bl	8000a7c <NVIC_EncodePriority>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4619      	mov	r1, r3
 8000f84:	2007      	movs	r0, #7
 8000f86:	f7ff fd4f 	bl	8000a28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8000f8a:	2007      	movs	r0, #7
 8000f8c:	f7ff fd2e 	bl	80009ec <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f90:	f7ff fd1e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fd6e 	bl	8000a7c <NVIC_EncodePriority>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	2008      	movs	r0, #8
 8000fa6:	f7ff fd3f 	bl	8000a28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8000faa:	2008      	movs	r0, #8
 8000fac:	f7ff fd1e 	bl	80009ec <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fb0:	f7ff fd0e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fd5e 	bl	8000a7c <NVIC_EncodePriority>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2028      	movs	r0, #40	; 0x28
 8000fc6:	f7ff fd2f 	bl	8000a28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fca:	2028      	movs	r0, #40	; 0x28
 8000fcc:	f7ff fd0e 	bl	80009ec <__NVIC_EnableIRQ>

}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	e009      	b.n	8000fec <MX_GPIO_Init+0x3a0>
 8000fd8:	48000800 	.word	0x48000800
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	0f000003 	.word	0x0f000003
 8000fe4:	f0000003 	.word	0xf0000003
 8000fe8:	48001400 	.word	0x48001400
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop

08000ff0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ffc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001010:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	e000      	b.n	800101c <ITM_SendChar+0x2c>
    {
      __NOP();
 800101a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800101c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f9      	beq.n	800101a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001026:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e009      	b.n	8001068 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ffc7 	bl	8000ff0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf1      	blt.n	8001054 <_write+0x16>
  return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f000 ff4a 	bl	8001f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 f893 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f7ff fddf 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 800108e:	f7ff fc11 	bl	80008b4 <MX_DMA_Init>
  MX_DAC1_Init();
 8001092:	f7ff fac1 	bl	8000618 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001096:	f7ff fb09 	bl	80006ac <MX_DAC2_Init>
  MX_ADC1_Init();
 800109a:	f7ff f97f 	bl	800039c <MX_ADC1_Init>
  MX_COMP1_Init();
 800109e:	f7ff fa61 	bl	8000564 <MX_COMP1_Init>
  MX_TIM2_Init();
 80010a2:	f000 fc95 	bl	80019d0 <MX_TIM2_Init>
  MX_TIM17_Init();
 80010a6:	f000 fddd 	bl	8001c64 <MX_TIM17_Init>
  MX_SPI3_Init();
 80010aa:	f000 f92d 	bl	8001308 <MX_SPI3_Init>
  MX_RNG_Init();
 80010ae:	f000 f91d 	bl	80012ec <MX_RNG_Init>
  MX_TIM1_Init();
 80010b2:	f000 fc1d 	bl	80018f0 <MX_TIM1_Init>
  MX_TIM8_Init();
 80010b6:	f000 fcf5 	bl	8001aa4 <MX_TIM8_Init>
  MX_TIM16_Init();
 80010ba:	f000 fdad 	bl	8001c18 <MX_TIM16_Init>
  MX_TIM15_Init();
 80010be:	f000 fd59 	bl	8001b74 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010c2:	2300      	movs	r3, #0
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2378      	movs	r3, #120	; 0x78
 80010c8:	4a2e      	ldr	r2, [pc, #184]	; (8001184 <main+0x108>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	482e      	ldr	r0, [pc, #184]	; (8001188 <main+0x10c>)
 80010ce:	f002 fc7b 	bl	80039c8 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80010d2:	2110      	movs	r1, #16
 80010d4:	482c      	ldr	r0, [pc, #176]	; (8001188 <main+0x10c>)
 80010d6:	f002 fc24 	bl	8003922 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010da:	2300      	movs	r3, #0
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2378      	movs	r3, #120	; 0x78
 80010e0:	4a2a      	ldr	r2, [pc, #168]	; (800118c <main+0x110>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	482a      	ldr	r0, [pc, #168]	; (8001190 <main+0x114>)
 80010e6:	f002 fc6f 	bl	80039c8 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 80010ea:	482a      	ldr	r0, [pc, #168]	; (8001194 <main+0x118>)
 80010ec:	f004 ff32 	bl	8005f54 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2108      	movs	r1, #8
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f003 fbb0 	bl	800485c <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2101      	movs	r1, #1
 8001100:	4825      	ldr	r0, [pc, #148]	; (8001198 <main+0x11c>)
 8001102:	f003 fbab 	bl	800485c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	4824      	ldr	r0, [pc, #144]	; (800119c <main+0x120>)
 800110c:	f003 fba6 	bl	800485c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2110      	movs	r1, #16
 8001114:	4821      	ldr	r0, [pc, #132]	; (800119c <main+0x120>)
 8001116:	f003 fba1 	bl	800485c <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 800111a:	4821      	ldr	r0, [pc, #132]	; (80011a0 <main+0x124>)
 800111c:	f004 ff48 	bl	8005fb0 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001126:	481d      	ldr	r0, [pc, #116]	; (800119c <main+0x120>)
 8001128:	f003 fb98 	bl	800485c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	481a      	ldr	r0, [pc, #104]	; (800119c <main+0x120>)
 8001134:	f003 fb92 	bl	800485c <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2108      	movs	r1, #8
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <main+0x120>)
 800113e:	f003 fb8d 	bl	800485c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8001142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114c:	f023 0307 	bic.w	r3, r3, #7
 8001150:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115c:	f043 0305 	orr.w	r3, r3, #5
 8001160:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <main+0x128>)
 8001164:	f004 ff24 	bl	8005fb0 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8001168:	480f      	ldr	r0, [pc, #60]	; (80011a8 <main+0x12c>)
 800116a:	f004 fef3 	bl	8005f54 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim16);
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  //ILI9341_Init();
  ILI9341_2_Init();
 800116e:	f006 fabb 	bl	80076e8 <ILI9341_2_Init>
  ILI9341_FillScreen(WHITE);
 8001172:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001176:	f006 fd1f 	bl	8007bb8 <ILI9341_FillScreen>
	ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
	HAL_Delay(2000);
*/
	//ILI9341_Fill_Screen(WHITE);
	//ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
	HAL_TIM_Base_Start_IT(&htim15);
 800117a:	480c      	ldr	r0, [pc, #48]	; (80011ac <main+0x130>)
 800117c:	f004 ff18 	bl	8005fb0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001180:	e7fe      	b.n	8001180 <main+0x104>
 8001182:	bf00      	nop
 8001184:	2000000c 	.word	0x2000000c
 8001188:	20000588 	.word	0x20000588
 800118c:	200001ec 	.word	0x200001ec
 8001190:	20000574 	.word	0x20000574
 8001194:	20000720 	.word	0x20000720
 8001198:	48000400 	.word	0x48000400
 800119c:	48000800 	.word	0x48000800
 80011a0:	200007b8 	.word	0x200007b8
 80011a4:	20000850 	.word	0x20000850
 80011a8:	20000804 	.word	0x20000804
 80011ac:	2000076c 	.word	0x2000076c

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0a8      	sub	sp, #160	; 0xa0
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011ba:	2238      	movs	r2, #56	; 0x38
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f006 fd36 	bl	8007c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2254      	movs	r2, #84	; 0x54
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 fd28 	bl	8007c30 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f003 fb53 	bl	800488c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80011e6:	2322      	movs	r3, #34	; 0x22
 80011e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f0:	2340      	movs	r3, #64	; 0x40
 80011f2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 800120c:	232a      	movs	r3, #42	; 0x2a
 800120e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001218:	2304      	movs	r3, #4
 800121a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fbd3 	bl	80049d4 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001234:	f000 f82a 	bl	800128c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2303      	movs	r3, #3
 800123e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800124c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001250:	2108      	movs	r1, #8
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fed6 	bl	8005004 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800125e:	f000 f815 	bl	800128c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8001262:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001266:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001268:	2300      	movs	r3, #0
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800126c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f8b5 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001280:	f000 f804 	bl	800128c <Error_Handler>
  }
}
 8001284:	bf00      	nop
 8001286:	37a0      	adds	r7, #160	; 0xa0
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f043 0204 	orr.w	r2, r3, #4
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <LL_AHB2_GRP1_EnableClock>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000

080012ec <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80012f0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80012f4:	f7ff ffe2 	bl	80012bc <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <MX_RNG_Init+0x18>)
 80012fa:	f7ff ffce 	bl	800129a <LL_RNG_Enable>

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	50060800 	.word	0x50060800

08001308 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <MX_SPI3_Init+0x74>)
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <MX_SPI3_Init+0x78>)
 8001310:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_SPI3_Init+0x74>)
 8001314:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001318:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_SPI3_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_SPI3_Init+0x74>)
 8001322:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001326:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_SPI3_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_SPI3_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_SPI3_Init+0x74>)
 8001336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_SPI3_Init+0x74>)
 800133e:	2210      	movs	r2, #16
 8001340:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_SPI3_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_SPI3_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_SPI3_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_SPI3_Init+0x74>)
 8001356:	2207      	movs	r2, #7
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_SPI3_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_SPI3_Init+0x74>)
 8001362:	2208      	movs	r2, #8
 8001364:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_SPI3_Init+0x74>)
 8001368:	f004 fa88 	bl	800587c <HAL_SPI_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001372:	f7ff ff8b 	bl	800128c <Error_Handler>
  }

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000065c 	.word	0x2000065c
 8001380:	40003c00 	.word	0x40003c00

08001384 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2c      	ldr	r2, [pc, #176]	; (8001454 <HAL_SPI_MspInit+0xd0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d151      	bne.n	800144a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_SPI_MspInit+0xd4>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <HAL_SPI_MspInit+0xd4>)
 80013ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b0:	6593      	str	r3, [r2, #88]	; 0x58
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_SPI_MspInit+0xd4>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_SPI_MspInit+0xd4>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	4a25      	ldr	r2, [pc, #148]	; (8001458 <HAL_SPI_MspInit+0xd4>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <HAL_SPI_MspInit+0xd4>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e8:	2306      	movs	r3, #6
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	481a      	ldr	r0, [pc, #104]	; (800145c <HAL_SPI_MspInit+0xd8>)
 80013f4:	f003 f898 	bl	8004528 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel4;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_SPI_MspInit+0xe0>)
 80013fc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 8001400:	220f      	movs	r2, #15
 8001402:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 8001406:	2210      	movs	r2, #16
 8001408:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800142e:	480c      	ldr	r0, [pc, #48]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 8001430:	f002 fe08 	bl	8004044 <HAL_DMA_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800143a:	f7ff ff27 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_SPI_MspInit+0xdc>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40003c00 	.word	0x40003c00
 8001458:	40021000 	.word	0x40021000
 800145c:	48000800 	.word	0x48000800
 8001460:	200006c0 	.word	0x200006c0
 8001464:	40020044 	.word	0x40020044

08001468 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001476:	6093      	str	r3, [r2, #8]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40007000 	.word	0x40007000

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_MspInit+0x44>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_MspInit+0x44>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6613      	str	r3, [r2, #96]	; 0x60
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_MspInit+0x44>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_MspInit+0x44>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x44>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6593      	str	r3, [r2, #88]	; 0x58
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x44>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80014be:	f7ff ffd3 	bl	8001468 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4013      	ands	r3, r2
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d101      	bne.n	80014ea <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40010400 	.word	0x40010400

080014fc <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6153      	str	r3, [r2, #20]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40010400 	.word	0x40010400

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 fd26 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <EXTI0_IRQHandler+0x2c>)
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <EXTI0_IRQHandler+0x30>)
 8001580:	6810      	ldr	r0, [r2, #0]
 8001582:	6018      	str	r0, [r3, #0]
 8001584:	7912      	ldrb	r2, [r2, #4]
 8001586:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 8001588:	4808      	ldr	r0, [pc, #32]	; (80015ac <EXTI0_IRQHandler+0x34>)
 800158a:	f006 fbcd 	bl	8007d28 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800158e:	2001      	movs	r0, #1
 8001590:	f7ff ff9e 	bl	80014d0 <LL_EXTI_IsActiveFlag_0_31>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <EXTI0_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff ffae 	bl	80014fc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000478 	.word	0x20000478
 80015a8:	08008b04 	.word	0x08008b04
 80015ac:	08008b0c 	.word	0x08008b0c

080015b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <EXTI1_IRQHandler+0x2c>)
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <EXTI1_IRQHandler+0x30>)
 80015b8:	6810      	ldr	r0, [r2, #0]
 80015ba:	6018      	str	r0, [r3, #0]
 80015bc:	7912      	ldrb	r2, [r2, #4]
 80015be:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <EXTI1_IRQHandler+0x34>)
 80015c2:	f006 fbb1 	bl	8007d28 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80015c6:	2002      	movs	r0, #2
 80015c8:	f7ff ff82 	bl	80014d0 <LL_EXTI_IsActiveFlag_0_31>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <EXTI1_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff ff92 	bl	80014fc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000478 	.word	0x20000478
 80015e0:	08008b1c 	.word	0x08008b1c
 80015e4:	08008b24 	.word	0x08008b24

080015e8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 80015ec:	4a09      	ldr	r2, [pc, #36]	; (8001614 <EXTI2_IRQHandler+0x2c>)
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <EXTI2_IRQHandler+0x30>)
 80015f0:	cb03      	ldmia	r3!, {r0, r1}
 80015f2:	6010      	str	r0, [r2, #0]
 80015f4:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <EXTI2_IRQHandler+0x34>)
 80015f8:	f006 fb96 	bl	8007d28 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80015fc:	2004      	movs	r0, #4
 80015fe:	f7ff ff67 	bl	80014d0 <LL_EXTI_IsActiveFlag_0_31>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <EXTI2_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8001608:	2004      	movs	r0, #4
 800160a:	f7ff ff77 	bl	80014fc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000478 	.word	0x20000478
 8001618:	08008b34 	.word	0x08008b34
 800161c:	08008b3c 	.word	0x08008b3c

08001620 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA1_Channel1_IRQHandler+0x10>)
 8001626:	f002 fe30 	bl	800428a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200004f0 	.word	0x200004f0

08001634 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <DMA1_Channel2_IRQHandler+0x10>)
 800163a:	f002 fe26 	bl	800428a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000059c 	.word	0x2000059c

08001648 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <DMA1_Channel3_IRQHandler+0x10>)
 800164e:	f002 fe1c 	bl	800428a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200005fc 	.word	0x200005fc

0800165c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <DMA1_Channel4_IRQHandler+0x10>)
 8001662:	f002 fe12 	bl	800428a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200006c0 	.word	0x200006c0

08001670 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	dm_update_display();
 8001674:	f7fe fe24 	bl	80002c0 <dm_update_display>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800167a:	f004 fd75 	bl	8006168 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8001680:	f004 fd72 	bl	8006168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000804 	.word	0x20000804
 800168c:	2000076c 	.word	0x2000076c

08001690 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8001694:	4a05      	ldr	r2, [pc, #20]	; (80016ac <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800169e:	f004 fd63 	bl	8006168 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80016a4:	f004 fd60 	bl	8006168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000478 	.word	0x20000478
 80016b0:	08008b4c 	.word	0x08008b4c
 80016b4:	20000804 	.word	0x20000804
 80016b8:	2000089c 	.word	0x2000089c

080016bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80016c0:	f7ff f93a 	bl	8000938 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	4a11      	ldr	r2, [pc, #68]	; (8001710 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80016ca:	8812      	ldrh	r2, [r2, #0]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d305      	bcc.n	80016dc <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80016d6:	8812      	ldrh	r2, [r2, #0]
 80016d8:	4293      	cmp	r3, r2
 80016da:	d90a      	bls.n	80016f2 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	480c      	ldr	r0, [pc, #48]	; (8001714 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 80016e4:	f006 faac 	bl	8007c40 <iprintf>
		new_enc_value = TIM1->CNT;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 80016f0:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80016fa:	801a      	strh	r2, [r3, #0]


  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 80016fe:	f004 fd33 	bl	8006168 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 8001704:	f004 fd30 	bl	8006168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40012c00 	.word	0x40012c00
 8001710:	20000468 	.word	0x20000468
 8001714:	08008b50 	.word	0x08008b50
 8001718:	2000046a 	.word	0x2000046a
 800171c:	20000804 	.word	0x20000804
 8001720:	200007b8 	.word	0x200007b8

08001724 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <TIM2_IRQHandler+0x10>)
 800172a:	f004 fd1d 	bl	8006168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000850 	.word	0x20000850

08001738 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 800173c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001740:	481b      	ldr	r0, [pc, #108]	; (80017b0 <EXTI15_10_IRQHandler+0x78>)
 8001742:	f003 f873 	bl	800482c <HAL_GPIO_ReadPin>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <EXTI15_10_IRQHandler+0x7c>)
 800174e:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <EXTI15_10_IRQHandler+0x80>)
 8001750:	6810      	ldr	r0, [r2, #0]
 8001752:	6018      	str	r0, [r3, #0]
 8001754:	7912      	ldrb	r2, [r2, #4]
 8001756:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 8001758:	4818      	ldr	r0, [pc, #96]	; (80017bc <EXTI15_10_IRQHandler+0x84>)
 800175a:	f006 fae5 	bl	8007d28 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 800175e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001762:	4813      	ldr	r0, [pc, #76]	; (80017b0 <EXTI15_10_IRQHandler+0x78>)
 8001764:	f003 f862 	bl	800482c <HAL_GPIO_ReadPin>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <EXTI15_10_IRQHandler+0x7c>)
 8001770:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <EXTI15_10_IRQHandler+0x88>)
 8001772:	6810      	ldr	r0, [r2, #0]
 8001774:	6018      	str	r0, [r3, #0]
 8001776:	7912      	ldrb	r2, [r2, #4]
 8001778:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <EXTI15_10_IRQHandler+0x8c>)
 800177c:	f006 fad4 	bl	8007d28 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001780:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001784:	f7ff fea4 	bl	80014d0 <LL_EXTI_IsActiveFlag_0_31>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <EXTI15_10_IRQHandler+0x5e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800178e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001792:	f7ff feb3 	bl	80014fc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001796:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800179a:	f7ff fe99 	bl	80014d0 <LL_EXTI_IsActiveFlag_0_31>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <EXTI15_10_IRQHandler+0x74>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80017a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017a8:	f7ff fea8 	bl	80014fc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	48000800 	.word	0x48000800
 80017b4:	20000478 	.word	0x20000478
 80017b8:	08008b58 	.word	0x08008b58
 80017bc:	08008b60 	.word	0x08008b60
 80017c0:	08008b70 	.word	0x08008b70
 80017c4:	08008b78 	.word	0x08008b78

080017c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e00a      	b.n	80017f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017da:	f3af 8000 	nop.w
 80017de:	4601      	mov	r1, r0
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60ba      	str	r2, [r7, #8]
 80017e6:	b2ca      	uxtb	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf0      	blt.n	80017da <_read+0x12>
	}

return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182a:	605a      	str	r2, [r3, #4]
	return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_isatty>:

int _isatty(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
	return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x50>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x16>
		heap_end = &end;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <_sbrk+0x50>)
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <_sbrk+0x54>)
 8001880:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <_sbrk+0x50>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <_sbrk+0x50>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	466a      	mov	r2, sp
 8001892:	4293      	cmp	r3, r2
 8001894:	d907      	bls.n	80018a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001896:	f006 f9a1 	bl	8007bdc <__errno>
 800189a:	4602      	mov	r2, r0
 800189c:	230c      	movs	r3, #12
 800189e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a4:	e006      	b.n	80018b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <_sbrk+0x50>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a03      	ldr	r2, [pc, #12]	; (80018bc <_sbrk+0x50>)
 80018b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000046c 	.word	0x2000046c
 80018c0:	200008f0 	.word	0x200008f0

080018c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <SystemInit+0x28>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <SystemInit+0x28>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SystemInit+0x28>)
 80018da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018de:	609a      	str	r2, [r3, #8]
#endif
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b09a      	sub	sp, #104	; 0x68
 80018f4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80018f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018fa:	2224      	movs	r2, #36	; 0x24
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f006 f996 	bl	8007c30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2234      	movs	r2, #52	; 0x34
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f006 f98a 	bl	8007c30 <memset>

  htim1.Instance = TIM1;
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <MX_TIM1_Init+0xd8>)
 800191e:	4a2b      	ldr	r2, [pc, #172]	; (80019cc <MX_TIM1_Init+0xdc>)
 8001920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <MX_TIM1_Init+0xd8>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <MX_TIM1_Init+0xd8>)
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <MX_TIM1_Init+0xd8>)
 8001930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <MX_TIM1_Init+0xd8>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <MX_TIM1_Init+0xd8>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <MX_TIM1_Init+0xd8>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001948:	2303      	movs	r3, #3
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800194c:	2300      	movs	r3, #0
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001950:	2301      	movs	r3, #1
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800195c:	2300      	movs	r3, #0
 800195e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001960:	2301      	movs	r3, #1
 8001962:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800196c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001970:	4619      	mov	r1, r3
 8001972:	4815      	ldr	r0, [pc, #84]	; (80019c8 <MX_TIM1_Init+0xd8>)
 8001974:	f004 fb52 	bl	800601c <HAL_TIM_Encoder_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800197e:	f7ff fc85 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800198e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001992:	4619      	mov	r1, r3
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <MX_TIM1_Init+0xd8>)
 8001996:	f005 f8cb 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80019a0:	f7ff fc74 	bl	800128c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_TIM1_Init+0xd8>)
 80019b2:	f005 f953 	bl	8006c5c <HAL_TIMEx_ConfigBreakDeadTime>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80019bc:	f7ff fc66 	bl	800128c <Error_Handler>
  }

}
 80019c0:	bf00      	nop
 80019c2:	3768      	adds	r7, #104	; 0x68
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000804 	.word	0x20000804
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1c:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a28:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a2a:	f004 fa3c 	bl	8005ea6 <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a34:	f7ff fc2a 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	4619      	mov	r1, r3
 8001a44:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a46:	f004 fd0f 	bl	8006468 <HAL_TIM_ConfigClockSource>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a50:	f7ff fc1c 	bl	800128c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001a54:	2305      	movs	r3, #5
 8001a56:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a58:	2350      	movs	r3, #80	; 0x50
 8001a5a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a6c:	f004 fdec 	bl	8006648 <HAL_TIM_SlaveConfigSynchro>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001a76:	f7ff fc09 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a82:	463b      	mov	r3, r7
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_TIM2_Init+0xd0>)
 8001a88:	f005 f852 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001a92:	f7ff fbfb 	bl	800128c <Error_Handler>
  }

}
 8001a96:	bf00      	nop
 8001a98:	3730      	adds	r7, #48	; 0x30
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000850 	.word	0x20000850

08001aa4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b094      	sub	sp, #80	; 0x50
 8001aa8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2234      	movs	r2, #52	; 0x34
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f006 f8b0 	bl	8007c30 <memset>

  htim8.Instance = TIM8;
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001ad2:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <MX_TIM8_Init+0xcc>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001afa:	481c      	ldr	r0, [pc, #112]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001afc:	f004 f9d3 	bl	8005ea6 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001b06:	f7ff fbc1 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b14:	4619      	mov	r1, r3
 8001b16:	4815      	ldr	r0, [pc, #84]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001b18:	f004 fca6 	bl	8006468 <HAL_TIM_ConfigClockSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001b22:	f7ff fbb3 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b26:	2320      	movs	r3, #32
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001b3a:	f004 fff9 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001b44:	f7ff fba2 	bl	800128c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_TIM8_Init+0xc8>)
 8001b56:	f005 f881 	bl	8006c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001b60:	f7ff fb94 	bl	800128c <Error_Handler>
  }

}
 8001b64:	bf00      	nop
 8001b66:	3750      	adds	r7, #80	; 0x50
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000720 	.word	0x20000720
 8001b70:	40013400 	.word	0x40013400

08001b74 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001b94:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <MX_TIM15_Init+0xa0>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001bc0:	4813      	ldr	r0, [pc, #76]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001bc2:	f004 f970 	bl	8005ea6 <HAL_TIM_Base_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001bcc:	f7ff fb5e 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001bde:	f004 fc43 	bl	8006468 <HAL_TIM_ConfigClockSource>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001be8:	f7ff fb50 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_TIM15_Init+0x9c>)
 8001bfa:	f004 ff99 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001c04:	f7ff fb42 	bl	800128c <Error_Handler>
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000076c 	.word	0x2000076c
 8001c14:	40014000 	.word	0x40014000

08001c18 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_TIM16_Init+0x44>)
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <MX_TIM16_Init+0x48>)
 8001c20:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_TIM16_Init+0x44>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_TIM16_Init+0x44>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <MX_TIM16_Init+0x44>)
 8001c30:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001c34:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_TIM16_Init+0x44>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_TIM16_Init+0x44>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_TIM16_Init+0x44>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_TIM16_Init+0x44>)
 8001c4a:	f004 f92c 	bl	8005ea6 <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001c54:	f7ff fb1a 	bl	800128c <Error_Handler>
  }

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000089c 	.word	0x2000089c
 8001c60:	40014400 	.word	0x40014400

08001c64 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <MX_TIM17_Init+0x48>)
 8001c6c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c70:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c74:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c7e:	2240      	movs	r2, #64	; 0x40
 8001c80:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c94:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c96:	f004 f906 	bl	8005ea6 <HAL_TIM_Base_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001ca0:	f7ff faf4 	bl	800128c <Error_Handler>
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200007b8 	.word	0x200007b8
 8001cac:	40014800 	.word	0x40014800

08001cb0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <HAL_TIM_Encoder_MspInit+0xac>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d13f      	bne.n	8001d52 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d02:	2303      	movs	r3, #3
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d12:	2302      	movs	r3, #2
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4811      	ldr	r0, [pc, #68]	; (8001d64 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001d1e:	f002 fc03 	bl	8004528 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2101      	movs	r1, #1
 8001d26:	2018      	movs	r0, #24
 8001d28:	f001 fda5 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001d2c:	2018      	movs	r0, #24
 8001d2e:	f001 fdbc 	bl	80038aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2101      	movs	r1, #1
 8001d36:	2019      	movs	r0, #25
 8001d38:	f001 fd9d 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d3c:	2019      	movs	r0, #25
 8001d3e:	f001 fdb4 	bl	80038aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201a      	movs	r0, #26
 8001d48:	f001 fd95 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d4c:	201a      	movs	r0, #26
 8001d4e:	f001 fdac 	bl	80038aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000800 	.word	0x48000800

08001d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08e      	sub	sp, #56	; 0x38
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d88:	d131      	bne.n	8001dee <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6593      	str	r3, [r2, #88]	; 0x58
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a43      	ldr	r2, [pc, #268]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd8:	f002 fba6 	bl	8004528 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2101      	movs	r1, #1
 8001de0:	201c      	movs	r0, #28
 8001de2:	f001 fd48 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001de6:	201c      	movs	r0, #28
 8001de8:	f001 fd5f 	bl	80038aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001dec:	e05e      	b.n	8001eac <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM8)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a31      	ldr	r2, [pc, #196]	; (8001eb8 <HAL_TIM_Base_MspInit+0x150>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d10c      	bne.n	8001e12 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001df8:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001dfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e02:	6613      	str	r3, [r2, #96]	; 0x60
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
}
 8001e10:	e04c      	b.n	8001eac <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM15)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <HAL_TIM_Base_MspInit+0x154>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d114      	bne.n	8001e46 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e20:	4a24      	ldr	r2, [pc, #144]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e26:	6613      	str	r3, [r2, #96]	; 0x60
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2101      	movs	r1, #1
 8001e38:	2018      	movs	r0, #24
 8001e3a:	f001 fd1c 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e3e:	2018      	movs	r0, #24
 8001e40:	f001 fd33 	bl	80038aa <HAL_NVIC_EnableIRQ>
}
 8001e44:	e032      	b.n	8001eac <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM16)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_TIM_Base_MspInit+0x158>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d114      	bne.n	8001e7a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2019      	movs	r0, #25
 8001e6e:	f001 fd02 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e72:	2019      	movs	r0, #25
 8001e74:	f001 fd19 	bl	80038aa <HAL_NVIC_EnableIRQ>
}
 8001e78:	e018      	b.n	8001eac <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM17)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_TIM_Base_MspInit+0x15c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d113      	bne.n	8001eac <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_TIM_Base_MspInit+0x14c>)
 8001e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	201a      	movs	r0, #26
 8001ea2:	f001 fce8 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001ea6:	201a      	movs	r0, #26
 8001ea8:	f001 fcff 	bl	80038aa <HAL_NVIC_EnableIRQ>
}
 8001eac:	bf00      	nop
 8001eae:	3738      	adds	r7, #56	; 0x38
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40013400 	.word	0x40013400
 8001ebc:	40014000 	.word	0x40014000
 8001ec0:	40014400 	.word	0x40014400
 8001ec4:	40014800 	.word	0x40014800

08001ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ec8:	480d      	ldr	r0, [pc, #52]	; (8001f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <LoopForever+0xe>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	; (8001f14 <LoopForever+0x16>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ef2:	f7ff fce7 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f005 fe77 	bl	8007be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001efa:	f7ff f8bf 	bl	800107c <main>

08001efe <LoopForever>:

LoopForever:
    b LoopForever
 8001efe:	e7fe      	b.n	8001efe <LoopForever>
  ldr   r0, =_estack
 8001f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8001f0c:	080099d0 	.word	0x080099d0
  ldr r2, =_sbss
 8001f10:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 8001f14:	200008f0 	.word	0x200008f0

08001f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC1_2_IRQHandler>

08001f1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f001 fc9b 	bl	8003860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f000 f80e 	bl	8001f4c <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	e001      	b.n	8001f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f3c:	f7ff faa4 	bl	8001488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f40:	79fb      	ldrb	r3, [r7, #7]

}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_InitTick+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d022      	beq.n	8001fa6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_InitTick+0x6c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <HAL_InitTick+0x68>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 fca6 	bl	80038c6 <HAL_SYSTICK_Config>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	d809      	bhi.n	8001f9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f86:	2200      	movs	r2, #0
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f8e:	f001 fc72 	bl	8003876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_InitTick+0x70>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	e007      	b.n	8001faa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	e004      	b.n	8001faa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e001      	b.n	8001faa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200003d4 	.word	0x200003d4
 8001fb8:	200003cc 	.word	0x200003cc
 8001fbc:	200003d0 	.word	0x200003d0

08001fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_IncTick+0x1c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_IncTick+0x1c>)
 8001fd0:	6013      	str	r3, [r2, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	200008e8 	.word	0x200008e8
 8001fe0:	200003d4 	.word	0x200003d4

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	200008e8 	.word	0x200008e8

08001ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff ffee 	bl	8001fe4 <HAL_GetTick>
 8002008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002014:	d004      	beq.n	8002020 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_Delay+0x40>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4413      	add	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002020:	bf00      	nop
 8002022:	f7ff ffdf 	bl	8001fe4 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	429a      	cmp	r2, r3
 8002030:	d8f7      	bhi.n	8002022 <HAL_Delay+0x26>
  {
  }
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200003d4 	.word	0x200003d4

08002040 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	609a      	str	r2, [r3, #8]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020a8:	b490      	push	{r4, r7}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3360      	adds	r3, #96	; 0x60
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020c4:	6822      	ldr	r2, [r4, #0]
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <LL_ADC_SetOffset+0x40>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020da:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc90      	pop	{r4, r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	03fff000 	.word	0x03fff000

080020ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020ec:	b490      	push	{r4, r7}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3360      	adds	r3, #96	; 0x60
 80020fa:	461a      	mov	r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bc90      	pop	{r4, r7}
 8002112:	4770      	bx	lr

08002114 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002114:	b490      	push	{r4, r7}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3360      	adds	r3, #96	; 0x60
 8002124:	461a      	mov	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4313      	orrs	r3, r2
 8002138:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bc90      	pop	{r4, r7}
 8002142:	4770      	bx	lr

08002144 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002144:	b490      	push	{r4, r7}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3360      	adds	r3, #96	; 0x60
 8002154:	461a      	mov	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4313      	orrs	r3, r2
 8002168:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bc90      	pop	{r4, r7}
 8002172:	4770      	bx	lr

08002174 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002174:	b490      	push	{r4, r7}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3360      	adds	r3, #96	; 0x60
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4313      	orrs	r3, r2
 8002198:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc90      	pop	{r4, r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	615a      	str	r2, [r3, #20]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021ca:	b490      	push	{r4, r7}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3330      	adds	r3, #48	; 0x30
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	4413      	add	r3, r2
 80021e8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021ea:	6822      	ldr	r2, [r4, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	211f      	movs	r1, #31
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 011f 	and.w	r1, r3, #31
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bc90      	pop	{r4, r7}
 800221a:	4770      	bx	lr

0800221c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800221c:	b490      	push	{r4, r7}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3314      	adds	r3, #20
 800222c:	461a      	mov	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	0e5b      	lsrs	r3, r3, #25
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	4413      	add	r3, r2
 800223a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800223c:	6822      	ldr	r2, [r4, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	0d1b      	lsrs	r3, r3, #20
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2107      	movs	r1, #7
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	401a      	ands	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	0d1b      	lsrs	r3, r3, #20
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bc90      	pop	{r4, r7}
 800226a:	4770      	bx	lr

0800226c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0318 	and.w	r3, r3, #24
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002290:	40d9      	lsrs	r1, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	400b      	ands	r3, r1
 8002296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229a:	431a      	orrs	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	0007ffff 	.word	0x0007ffff

080022b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6093      	str	r3, [r2, #8]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ec:	d101      	bne.n	80022f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002314:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800233c:	d101      	bne.n	8002342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <LL_ADC_IsEnabled+0x18>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <LL_ADC_IsEnabled+0x1a>
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d101      	bne.n	800238e <LL_ADC_REG_IsConversionOngoing+0x18>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d101      	bne.n	80023b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e1ad      	b.n	800273a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fe f84d 	bl	800048c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff67 	bl	80022d8 <LL_ADC_IsDeepPowerDownEnabled>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff4d 	bl	80022b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff82 	bl	8002328 <LL_ADC_IsInternalRegulatorEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d113      	bne.n	8002452 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff66 	bl	8002300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002434:	4b9e      	ldr	r3, [pc, #632]	; (80026b0 <HAL_ADC_Init+0x2ec>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	4a9e      	ldr	r2, [pc, #632]	; (80026b4 <HAL_ADC_Init+0x2f0>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002444:	e002      	b.n	800244c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3b01      	subs	r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f9      	bne.n	8002446 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff66 	bl	8002328 <LL_ADC_IsInternalRegulatorEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	f043 0210 	orr.w	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff77 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 8002488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 8148 	bne.w	8002728 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 8144 	bne.w	8002728 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024a8:	f043 0202 	orr.w	r2, r3, #2
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff4b 	bl	8002350 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d141      	bne.n	8002544 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_Init+0x110>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7a      	ldr	r2, [pc, #488]	; (80026b8 <HAL_ADC_Init+0x2f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d10f      	bne.n	80024f4 <HAL_ADC_Init+0x130>
 80024d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024d8:	f7ff ff3a 	bl	8002350 <LL_ADC_IsEnabled>
 80024dc:	4604      	mov	r4, r0
 80024de:	4876      	ldr	r0, [pc, #472]	; (80026b8 <HAL_ADC_Init+0x2f4>)
 80024e0:	f7ff ff36 	bl	8002350 <LL_ADC_IsEnabled>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4323      	orrs	r3, r4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e012      	b.n	800251a <HAL_ADC_Init+0x156>
 80024f4:	4871      	ldr	r0, [pc, #452]	; (80026bc <HAL_ADC_Init+0x2f8>)
 80024f6:	f7ff ff2b 	bl	8002350 <LL_ADC_IsEnabled>
 80024fa:	4604      	mov	r4, r0
 80024fc:	4870      	ldr	r0, [pc, #448]	; (80026c0 <HAL_ADC_Init+0x2fc>)
 80024fe:	f7ff ff27 	bl	8002350 <LL_ADC_IsEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	431c      	orrs	r4, r3
 8002506:	486f      	ldr	r0, [pc, #444]	; (80026c4 <HAL_ADC_Init+0x300>)
 8002508:	f7ff ff22 	bl	8002350 <LL_ADC_IsEnabled>
 800250c:	4603      	mov	r3, r0
 800250e:	4323      	orrs	r3, r4
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d012      	beq.n	8002544 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002526:	d004      	beq.n	8002532 <HAL_ADC_Init+0x16e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a62      	ldr	r2, [pc, #392]	; (80026b8 <HAL_ADC_Init+0x2f4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Init+0x172>
 8002532:	4a65      	ldr	r2, [pc, #404]	; (80026c8 <HAL_ADC_Init+0x304>)
 8002534:	e000      	b.n	8002538 <HAL_ADC_Init+0x174>
 8002536:	4a65      	ldr	r2, [pc, #404]	; (80026cc <HAL_ADC_Init+0x308>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f7ff fd7e 	bl	8002040 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7f5b      	ldrb	r3, [r3, #29]
 8002548:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800254e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002554:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800255a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002562:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256e:	2b01      	cmp	r3, #1
 8002570:	d106      	bne.n	8002580 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	045b      	lsls	r3, r3, #17
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_ADC_Init+0x30c>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fed3 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 80025d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fee0 	bl	800239c <LL_ADC_INJ_IsConversionOngoing>
 80025dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d17f      	bne.n	80026e4 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d17c      	bne.n	80026e4 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002606:	f023 0302 	bic.w	r3, r3, #2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	430b      	orrs	r3, r1
 8002612:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d017      	beq.n	800264c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800262a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002634:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6911      	ldr	r1, [r2, #16]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	430b      	orrs	r3, r1
 8002646:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800264a:	e013      	b.n	8002674 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800265a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800266c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002670:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267a:	2b01      	cmp	r3, #1
 800267c:	d12a      	bne.n	80026d4 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002694:	4311      	orrs	r1, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800269a:	4311      	orrs	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026a0:	430a      	orrs	r2, r1
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
 80026ae:	e019      	b.n	80026e4 <HAL_ADC_Init+0x320>
 80026b0:	200003cc 	.word	0x200003cc
 80026b4:	053e2d63 	.word	0x053e2d63
 80026b8:	50000100 	.word	0x50000100
 80026bc:	50000400 	.word	0x50000400
 80026c0:	50000500 	.word	0x50000500
 80026c4:	50000600 	.word	0x50000600
 80026c8:	50000300 	.word	0x50000300
 80026cc:	50000700 	.word	0x50000700
 80026d0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10c      	bne.n	8002706 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f023 010f 	bic.w	r1, r3, #15
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	1e5a      	subs	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
 8002704:	e007      	b.n	8002716 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 020f 	bic.w	r2, r2, #15
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
 8002726:	e007      	b.n	8002738 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	f043 0210 	orr.w	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002738:	7ffb      	ldrb	r3, [r7, #31]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd90      	pop	{r4, r7, pc}
 8002742:	bf00      	nop

08002744 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b0a6      	sub	sp, #152	; 0x98
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x22>
 8002762:	2302      	movs	r3, #2
 8002764:	e38e      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x740>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fdff 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 836f 	bne.w	8002e5e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	f7ff fd1c 	bl	80021ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fded 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 800279c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fdf9 	bl	800239c <LL_ADC_INJ_IsConversionOngoing>
 80027aa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 817b 	bne.w	8002aae <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 8176 	bne.w	8002aae <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ca:	d10f      	bne.n	80027ec <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2200      	movs	r2, #0
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7ff fd20 	bl	800221c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fcdd 	bl	80021a4 <LL_ADC_SetSamplingTimeCommonConfig>
 80027ea:	e00e      	b.n	800280a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	461a      	mov	r2, r3
 80027fa:	f7ff fd0f 	bl	800221c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fccd 	bl	80021a4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d022      	beq.n	8002872 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6919      	ldr	r1, [r3, #16]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800283c:	f7ff fc34 	bl	80020a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6919      	ldr	r1, [r3, #16]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	461a      	mov	r2, r3
 800284e:	f7ff fc79 	bl	8002144 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6919      	ldr	r1, [r3, #16]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	7f1b      	ldrb	r3, [r3, #28]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d102      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x124>
 8002862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002866:	e000      	b.n	800286a <HAL_ADC_ConfigChannel+0x126>
 8002868:	2300      	movs	r3, #0
 800286a:	461a      	mov	r2, r3
 800286c:	f7ff fc82 	bl	8002174 <LL_ADC_SetOffsetSaturation>
 8002870:	e11d      	b.n	8002aae <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fc37 	bl	80020ec <LL_ADC_GetOffsetChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <HAL_ADC_ConfigChannel+0x15a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fc2c 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002894:	4603      	mov	r3, r0
 8002896:	0e9b      	lsrs	r3, r3, #26
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	e012      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x180>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fc21 	bl	80020ec <LL_ADC_GetOffsetChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x198>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0e9b      	lsrs	r3, r3, #26
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	e00a      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x1ae>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80028ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d106      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fc08 	bl	8002114 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fbee 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10a      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1ec>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2101      	movs	r1, #1
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fbe3 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	e010      	b.n	8002952 <HAL_ADC_ConfigChannel+0x20e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fbd8 	bl	80020ec <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_ADC_ConfigChannel+0x226>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	e00a      	b.n	8002980 <HAL_ADC_ConfigChannel+0x23c>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	2101      	movs	r1, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fbc1 	bl	8002114 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fba7 	bl	80020ec <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <HAL_ADC_ConfigChannel+0x27a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2102      	movs	r1, #2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fb9c 	bl	80020ec <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	e010      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x29c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fb91 	bl	80020ec <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80029d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x2b4>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	e00a      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x2ca>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d106      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	2102      	movs	r1, #2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fb7a 	bl	8002114 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2103      	movs	r1, #3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fb60 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x308>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2103      	movs	r1, #3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fb55 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 021f 	and.w	r2, r3, #31
 8002a4a:	e010      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x32a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2103      	movs	r1, #3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fb4a 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x342>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	0e9b      	lsrs	r3, r3, #26
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	e00a      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x358>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d106      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fb33 	bl	8002114 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fc4c 	bl	8002350 <LL_ADC_IsEnabled>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 810c 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6819      	ldr	r1, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f7ff fbcd 	bl	800226c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4aaf      	ldr	r2, [pc, #700]	; (8002d94 <HAL_ADC_ConfigChannel+0x650>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	f040 80fd 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x3c2>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	bf94      	ite	ls
 8002afe:	2301      	movls	r3, #1
 8002b00:	2300      	movhi	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	e012      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x3e8>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	2b09      	cmp	r3, #9
 8002b24:	bf94      	ite	ls
 8002b26:	2301      	movls	r3, #1
 8002b28:	2300      	movhi	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d064      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x408>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	069b      	lsls	r3, r3, #26
 8002b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4a:	e00e      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x426>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	069b      	lsls	r3, r3, #26
 8002b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x446>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	e010      	b.n	8002bac <HAL_ADC_ConfigChannel+0x468>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	ea42 0103 	orr.w	r1, r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x48e>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	051b      	lsls	r3, r3, #20
 8002bd0:	e011      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x4b2>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	e069      	b.n	8002cce <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x4d2>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c14:	e00e      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x4f0>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	61fb      	str	r3, [r7, #28]
  return result;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	069b      	lsls	r3, r3, #26
 8002c30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x510>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	3301      	adds	r3, #1
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	e010      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x532>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	617b      	str	r3, [r7, #20]
  return result;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	ea42 0103 	orr.w	r1, r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x55e>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f003 021f 	and.w	r2, r3, #31
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	3b1e      	subs	r3, #30
 8002c9a:	051b      	lsls	r3, r3, #20
 8002c9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	e014      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x588>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	60fb      	str	r3, [r7, #12]
  return result;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b1e      	subs	r3, #30
 8002cc6:	051b      	lsls	r3, r3, #20
 8002cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	6892      	ldr	r2, [r2, #8]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f7ff faa2 	bl	800221c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <HAL_ADC_ConfigChannel+0x654>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80c9 	beq.w	8002e78 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cee:	d004      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x5b6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <HAL_ADC_ConfigChannel+0x658>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x5ba>
 8002cfa:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_ADC_ConfigChannel+0x65c>)
 8002cfc:	e000      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x5bc>
 8002cfe:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <HAL_ADC_ConfigChannel+0x660>)
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f9c3 	bl	800208c <LL_ADC_GetCommonPathInternalCh>
 8002d06:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <HAL_ADC_ConfigChannel+0x664>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x5da>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a24      	ldr	r2, [pc, #144]	; (8002dac <HAL_ADC_ConfigChannel+0x668>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d14e      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d148      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d32:	d005      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x5fc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <HAL_ADC_ConfigChannel+0x66c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	f040 8099 	bne.w	8002e72 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d48:	d004      	beq.n	8002d54 <HAL_ADC_ConfigChannel+0x610>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <HAL_ADC_ConfigChannel+0x658>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x614>
 8002d54:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <HAL_ADC_ConfigChannel+0x65c>)
 8002d56:	e000      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x616>
 8002d58:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <HAL_ADC_ConfigChannel+0x660>)
 8002d5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f7ff f97e 	bl	8002066 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_ADC_ConfigChannel+0x670>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	099b      	lsrs	r3, r3, #6
 8002d70:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <HAL_ADC_ConfigChannel+0x674>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	099a      	lsrs	r2, r3, #6
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d82:	e002      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f9      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d90:	e06f      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x72e>
 8002d92:	bf00      	nop
 8002d94:	407f0000 	.word	0x407f0000
 8002d98:	80080000 	.word	0x80080000
 8002d9c:	50000100 	.word	0x50000100
 8002da0:	50000300 	.word	0x50000300
 8002da4:	50000700 	.word	0x50000700
 8002da8:	c3210000 	.word	0xc3210000
 8002dac:	90c00010 	.word	0x90c00010
 8002db0:	50000600 	.word	0x50000600
 8002db4:	200003cc 	.word	0x200003cc
 8002db8:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <HAL_ADC_ConfigChannel+0x748>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d125      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x6ce>
 8002dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11f      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2e      	ldr	r2, [pc, #184]	; (8002e90 <HAL_ADC_ConfigChannel+0x74c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d104      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x6a2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2c      	ldr	r2, [pc, #176]	; (8002e94 <HAL_ADC_ConfigChannel+0x750>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d047      	beq.n	8002e76 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x6b6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <HAL_ADC_ConfigChannel+0x74c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x6ba>
 8002dfa:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_ADC_ConfigChannel+0x754>)
 8002dfc:	e000      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x6bc>
 8002dfe:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <HAL_ADC_ConfigChannel+0x758>)
 8002e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7ff f92b 	bl	8002066 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e10:	e031      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <HAL_ADC_ConfigChannel+0x75c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d12d      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d127      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <HAL_ADC_ConfigChannel+0x74c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d022      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e3a:	d004      	beq.n	8002e46 <HAL_ADC_ConfigChannel+0x702>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <HAL_ADC_ConfigChannel+0x74c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x706>
 8002e46:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <HAL_ADC_ConfigChannel+0x754>)
 8002e48:	e000      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x708>
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_ADC_ConfigChannel+0x758>)
 8002e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f7ff f905 	bl	8002066 <LL_ADC_SetCommonPathInternalCh>
 8002e5c:	e00c      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002e70:	e002      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3798      	adds	r7, #152	; 0x98
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	c7520000 	.word	0xc7520000
 8002e90:	50000100 	.word	0x50000100
 8002e94:	50000500 	.word	0x50000500
 8002e98:	50000300 	.word	0x50000300
 8002e9c:	50000700 	.word	0x50000700
 8002ea0:	cb840000 	.word	0xcb840000

08002ea4 <LL_ADC_IsEnabled>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <LL_ADC_IsEnabled+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_ADC_IsEnabled+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_REG_IsConversionOngoing>:
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d101      	bne.n	8002ee2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b0a1      	sub	sp, #132	; 0x84
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0e3      	b.n	80030d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f1e:	d102      	bne.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	e009      	b.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d102      	bne.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002f30:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	e001      	b.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0be      	b.n	80030d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ffb5 	bl	8002eca <LL_ADC_REG_IsConversionOngoing>
 8002f60:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ffaf 	bl	8002eca <LL_ADC_REG_IsConversionOngoing>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 80a0 	bne.w	80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 809c 	bne.w	80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f84:	d004      	beq.n	8002f90 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a55      	ldr	r2, [pc, #340]	; (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002f90:	4b56      	ldr	r3, [pc, #344]	; (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f92:	e000      	b.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002f94:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f96:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d04b      	beq.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb2:	035b      	lsls	r3, r3, #13
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a45      	ldr	r2, [pc, #276]	; (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d10f      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002fd0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fd4:	f7ff ff66 	bl	8002ea4 <LL_ADC_IsEnabled>
 8002fd8:	4604      	mov	r4, r0
 8002fda:	4841      	ldr	r0, [pc, #260]	; (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002fdc:	f7ff ff62 	bl	8002ea4 <LL_ADC_IsEnabled>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4323      	orrs	r3, r4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e012      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002ff0:	483c      	ldr	r0, [pc, #240]	; (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002ff2:	f7ff ff57 	bl	8002ea4 <LL_ADC_IsEnabled>
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	483b      	ldr	r0, [pc, #236]	; (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ffa:	f7ff ff53 	bl	8002ea4 <LL_ADC_IsEnabled>
 8002ffe:	4603      	mov	r3, r0
 8003000:	431c      	orrs	r4, r3
 8003002:	483c      	ldr	r0, [pc, #240]	; (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003004:	f7ff ff4e 	bl	8002ea4 <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	4323      	orrs	r3, r4
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d056      	beq.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800301a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003022:	f023 030f 	bic.w	r3, r3, #15
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	6811      	ldr	r1, [r2, #0]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	6892      	ldr	r2, [r2, #8]
 800302e:	430a      	orrs	r2, r1
 8003030:	431a      	orrs	r2, r3
 8003032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003034:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003036:	e047      	b.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003042:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800304c:	d004      	beq.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10f      	bne.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003058:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800305c:	f7ff ff22 	bl	8002ea4 <LL_ADC_IsEnabled>
 8003060:	4604      	mov	r4, r0
 8003062:	481f      	ldr	r0, [pc, #124]	; (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003064:	f7ff ff1e 	bl	8002ea4 <LL_ADC_IsEnabled>
 8003068:	4603      	mov	r3, r0
 800306a:	4323      	orrs	r3, r4
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e012      	b.n	800309e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003078:	481a      	ldr	r0, [pc, #104]	; (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800307a:	f7ff ff13 	bl	8002ea4 <LL_ADC_IsEnabled>
 800307e:	4604      	mov	r4, r0
 8003080:	4819      	ldr	r0, [pc, #100]	; (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003082:	f7ff ff0f 	bl	8002ea4 <LL_ADC_IsEnabled>
 8003086:	4603      	mov	r3, r0
 8003088:	431c      	orrs	r4, r3
 800308a:	481a      	ldr	r0, [pc, #104]	; (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800308c:	f7ff ff0a 	bl	8002ea4 <LL_ADC_IsEnabled>
 8003090:	4603      	mov	r3, r0
 8003092:	4323      	orrs	r3, r4
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030aa:	f023 030f 	bic.w	r3, r3, #15
 80030ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b2:	e009      	b.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030c6:	e000      	b.n	80030ca <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3784      	adds	r7, #132	; 0x84
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd90      	pop	{r4, r7, pc}
 80030de:	bf00      	nop
 80030e0:	50000100 	.word	0x50000100
 80030e4:	50000400 	.word	0x50000400
 80030e8:	50000500 	.word	0x50000500
 80030ec:	50000300 	.word	0x50000300
 80030f0:	50000700 	.word	0x50000700
 80030f4:	50000600 	.word	0x50000600

080030f8 <LL_EXTI_EnableIT_0_31>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <LL_EXTI_EnableIT_0_31+0x20>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4904      	ldr	r1, [pc, #16]	; (8003118 <LL_EXTI_EnableIT_0_31+0x20>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40010400 	.word	0x40010400

0800311c <LL_EXTI_EnableIT_32_63>:
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <LL_EXTI_EnableIT_32_63+0x20>)
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	4904      	ldr	r1, [pc, #16]	; (800313c <LL_EXTI_EnableIT_32_63+0x20>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4313      	orrs	r3, r2
 800312e:	620b      	str	r3, [r1, #32]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40010400 	.word	0x40010400

08003140 <LL_EXTI_DisableIT_0_31>:
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <LL_EXTI_DisableIT_0_31+0x24>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	43db      	mvns	r3, r3
 8003150:	4904      	ldr	r1, [pc, #16]	; (8003164 <LL_EXTI_DisableIT_0_31+0x24>)
 8003152:	4013      	ands	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40010400 	.word	0x40010400

08003168 <LL_EXTI_DisableIT_32_63>:
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <LL_EXTI_DisableIT_32_63+0x24>)
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	43db      	mvns	r3, r3
 8003178:	4904      	ldr	r1, [pc, #16]	; (800318c <LL_EXTI_DisableIT_32_63+0x24>)
 800317a:	4013      	ands	r3, r2
 800317c:	620b      	str	r3, [r1, #32]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40010400 	.word	0x40010400

08003190 <LL_EXTI_EnableEvent_0_31>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4904      	ldr	r1, [pc, #16]	; (80031b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40010400 	.word	0x40010400

080031b4 <LL_EXTI_EnableEvent_32_63>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80031be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c0:	4904      	ldr	r1, [pc, #16]	; (80031d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40010400 	.word	0x40010400

080031d8 <LL_EXTI_DisableEvent_0_31>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	4904      	ldr	r1, [pc, #16]	; (80031fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010400 	.word	0x40010400

08003200 <LL_EXTI_DisableEvent_32_63>:
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <LL_EXTI_DisableEvent_32_63+0x24>)
 800320a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	43db      	mvns	r3, r3
 8003210:	4904      	ldr	r1, [pc, #16]	; (8003224 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003212:	4013      	ands	r3, r2
 8003214:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010400 	.word	0x40010400

08003228 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4904      	ldr	r1, [pc, #16]	; (8003248 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40010400 	.word	0x40010400

0800324c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003258:	4904      	ldr	r1, [pc, #16]	; (800326c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4313      	orrs	r3, r2
 800325e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40010400 	.word	0x40010400

08003270 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	43db      	mvns	r3, r3
 8003280:	4904      	ldr	r1, [pc, #16]	; (8003294 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003282:	4013      	ands	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40010400 	.word	0x40010400

08003298 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80032a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	4904      	ldr	r1, [pc, #16]	; (80032bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	628b      	str	r3, [r1, #40]	; 0x28
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40010400 	.word	0x40010400

080032c0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	4904      	ldr	r1, [pc, #16]	; (80032e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60cb      	str	r3, [r1, #12]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40010400 	.word	0x40010400

080032e4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80032ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f0:	4904      	ldr	r1, [pc, #16]	; (8003304 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40010400 	.word	0x40010400

08003308 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	43db      	mvns	r3, r3
 8003318:	4904      	ldr	r1, [pc, #16]	; (800332c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800331a:	4013      	ands	r3, r2
 800331c:	60cb      	str	r3, [r1, #12]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40010400 	.word	0x40010400

08003330 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	43db      	mvns	r3, r3
 8003340:	4904      	ldr	r1, [pc, #16]	; (8003354 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003342:	4013      	ands	r3, r2
 8003344:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010400 	.word	0x40010400

08003358 <LL_EXTI_ClearFlag_0_31>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6153      	str	r3, [r2, #20]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010400 	.word	0x40010400

08003378 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40010400 	.word	0x40010400

08003398 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e180      	b.n	80036b6 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033c2:	d102      	bne.n	80033ca <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e175      	b.n	80036b6 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7f5b      	ldrb	r3, [r3, #29]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d108      	bne.n	80033e6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fd f8e7 	bl	80005b4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b98      	ldr	r3, [pc, #608]	; (8003678 <HAL_COMP_Init+0x2e0>)
 8003418:	4013      	ands	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	6979      	ldr	r1, [r7, #20]
 8003420:	430b      	orrs	r3, r1
 8003422:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d015      	beq.n	800345e <HAL_COMP_Init+0xc6>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d112      	bne.n	800345e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003438:	4b90      	ldr	r3, [pc, #576]	; (800367c <HAL_COMP_Init+0x2e4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	4a90      	ldr	r2, [pc, #576]	; (8003680 <HAL_COMP_Init+0x2e8>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	099a      	lsrs	r2, r3, #6
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003450:	e002      	b.n	8003458 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b01      	subs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f9      	bne.n	8003452 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a88      	ldr	r2, [pc, #544]	; (8003684 <HAL_COMP_Init+0x2ec>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d028      	beq.n	80034ba <HAL_COMP_Init+0x122>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a86      	ldr	r2, [pc, #536]	; (8003688 <HAL_COMP_Init+0x2f0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d020      	beq.n	80034b4 <HAL_COMP_Init+0x11c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a85      	ldr	r2, [pc, #532]	; (800368c <HAL_COMP_Init+0x2f4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d018      	beq.n	80034ae <HAL_COMP_Init+0x116>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a83      	ldr	r2, [pc, #524]	; (8003690 <HAL_COMP_Init+0x2f8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d010      	beq.n	80034a8 <HAL_COMP_Init+0x110>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a82      	ldr	r2, [pc, #520]	; (8003694 <HAL_COMP_Init+0x2fc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d008      	beq.n	80034a2 <HAL_COMP_Init+0x10a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a80      	ldr	r2, [pc, #512]	; (8003698 <HAL_COMP_Init+0x300>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_COMP_Init+0x106>
 800349a:	2301      	movs	r3, #1
 800349c:	e00f      	b.n	80034be <HAL_COMP_Init+0x126>
 800349e:	2302      	movs	r3, #2
 80034a0:	e00d      	b.n	80034be <HAL_COMP_Init+0x126>
 80034a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034a6:	e00a      	b.n	80034be <HAL_COMP_Init+0x126>
 80034a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ac:	e007      	b.n	80034be <HAL_COMP_Init+0x126>
 80034ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80034b2:	e004      	b.n	80034be <HAL_COMP_Init+0x126>
 80034b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034b8:	e001      	b.n	80034be <HAL_COMP_Init+0x126>
 80034ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034be:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80b6 	beq.w	800363a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d011      	beq.n	80034fe <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6e      	ldr	r2, [pc, #440]	; (8003698 <HAL_COMP_Init+0x300>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_COMP_Init+0x156>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6c      	ldr	r2, [pc, #432]	; (800369c <HAL_COMP_Init+0x304>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d103      	bne.n	80034f6 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80034ee:	6938      	ldr	r0, [r7, #16]
 80034f0:	f7ff feac 	bl	800324c <LL_EXTI_EnableRisingTrig_32_63>
 80034f4:	e014      	b.n	8003520 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80034f6:	6938      	ldr	r0, [r7, #16]
 80034f8:	f7ff fe96 	bl	8003228 <LL_EXTI_EnableRisingTrig_0_31>
 80034fc:	e010      	b.n	8003520 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a65      	ldr	r2, [pc, #404]	; (8003698 <HAL_COMP_Init+0x300>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_COMP_Init+0x17a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a63      	ldr	r2, [pc, #396]	; (800369c <HAL_COMP_Init+0x304>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d103      	bne.n	800351a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003512:	6938      	ldr	r0, [r7, #16]
 8003514:	f7ff fec0 	bl	8003298 <LL_EXTI_DisableRisingTrig_32_63>
 8003518:	e002      	b.n	8003520 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800351a:	6938      	ldr	r0, [r7, #16]
 800351c:	f7ff fea8 	bl	8003270 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d011      	beq.n	8003550 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a59      	ldr	r2, [pc, #356]	; (8003698 <HAL_COMP_Init+0x300>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_COMP_Init+0x1a8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a58      	ldr	r2, [pc, #352]	; (800369c <HAL_COMP_Init+0x304>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d103      	bne.n	8003548 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003540:	6938      	ldr	r0, [r7, #16]
 8003542:	f7ff fecf 	bl	80032e4 <LL_EXTI_EnableFallingTrig_32_63>
 8003546:	e014      	b.n	8003572 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003548:	6938      	ldr	r0, [r7, #16]
 800354a:	f7ff feb9 	bl	80032c0 <LL_EXTI_EnableFallingTrig_0_31>
 800354e:	e010      	b.n	8003572 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a50      	ldr	r2, [pc, #320]	; (8003698 <HAL_COMP_Init+0x300>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_COMP_Init+0x1cc>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4f      	ldr	r2, [pc, #316]	; (800369c <HAL_COMP_Init+0x304>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d103      	bne.n	800356c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8003564:	6938      	ldr	r0, [r7, #16]
 8003566:	f7ff fee3 	bl	8003330 <LL_EXTI_DisableFallingTrig_32_63>
 800356a:	e002      	b.n	8003572 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800356c:	6938      	ldr	r0, [r7, #16]
 800356e:	f7ff fecb 	bl	8003308 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a48      	ldr	r2, [pc, #288]	; (8003698 <HAL_COMP_Init+0x300>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_COMP_Init+0x1ee>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a46      	ldr	r2, [pc, #280]	; (800369c <HAL_COMP_Init+0x304>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d103      	bne.n	800358e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8003586:	6938      	ldr	r0, [r7, #16]
 8003588:	f7ff fef6 	bl	8003378 <LL_EXTI_ClearFlag_32_63>
 800358c:	e002      	b.n	8003594 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800358e:	6938      	ldr	r0, [r7, #16]
 8003590:	f7ff fee2 	bl	8003358 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d011      	beq.n	80035c4 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <HAL_COMP_Init+0x300>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_COMP_Init+0x21c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3b      	ldr	r2, [pc, #236]	; (800369c <HAL_COMP_Init+0x304>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d103      	bne.n	80035bc <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80035b4:	6938      	ldr	r0, [r7, #16]
 80035b6:	f7ff fdfd 	bl	80031b4 <LL_EXTI_EnableEvent_32_63>
 80035ba:	e014      	b.n	80035e6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80035bc:	6938      	ldr	r0, [r7, #16]
 80035be:	f7ff fde7 	bl	8003190 <LL_EXTI_EnableEvent_0_31>
 80035c2:	e010      	b.n	80035e6 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a33      	ldr	r2, [pc, #204]	; (8003698 <HAL_COMP_Init+0x300>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_COMP_Init+0x240>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a32      	ldr	r2, [pc, #200]	; (800369c <HAL_COMP_Init+0x304>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d103      	bne.n	80035e0 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80035d8:	6938      	ldr	r0, [r7, #16]
 80035da:	f7ff fe11 	bl	8003200 <LL_EXTI_DisableEvent_32_63>
 80035de:	e002      	b.n	80035e6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80035e0:	6938      	ldr	r0, [r7, #16]
 80035e2:	f7ff fdf9 	bl	80031d8 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d011      	beq.n	8003616 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a28      	ldr	r2, [pc, #160]	; (8003698 <HAL_COMP_Init+0x300>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d004      	beq.n	8003606 <HAL_COMP_Init+0x26e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a26      	ldr	r2, [pc, #152]	; (800369c <HAL_COMP_Init+0x304>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d103      	bne.n	800360e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003606:	6938      	ldr	r0, [r7, #16]
 8003608:	f7ff fd88 	bl	800311c <LL_EXTI_EnableIT_32_63>
 800360c:	e04b      	b.n	80036a6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800360e:	6938      	ldr	r0, [r7, #16]
 8003610:	f7ff fd72 	bl	80030f8 <LL_EXTI_EnableIT_0_31>
 8003614:	e047      	b.n	80036a6 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1f      	ldr	r2, [pc, #124]	; (8003698 <HAL_COMP_Init+0x300>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_COMP_Init+0x292>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_COMP_Init+0x304>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d103      	bne.n	8003632 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800362a:	6938      	ldr	r0, [r7, #16]
 800362c:	f7ff fd9c 	bl	8003168 <LL_EXTI_DisableIT_32_63>
 8003630:	e039      	b.n	80036a6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8003632:	6938      	ldr	r0, [r7, #16]
 8003634:	f7ff fd84 	bl	8003140 <LL_EXTI_DisableIT_0_31>
 8003638:	e035      	b.n	80036a6 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a16      	ldr	r2, [pc, #88]	; (8003698 <HAL_COMP_Init+0x300>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_COMP_Init+0x2b6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <HAL_COMP_Init+0x304>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d103      	bne.n	8003656 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800364e:	6938      	ldr	r0, [r7, #16]
 8003650:	f7ff fdd6 	bl	8003200 <LL_EXTI_DisableEvent_32_63>
 8003654:	e002      	b.n	800365c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003656:	6938      	ldr	r0, [r7, #16]
 8003658:	f7ff fdbe 	bl	80031d8 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0d      	ldr	r2, [pc, #52]	; (8003698 <HAL_COMP_Init+0x300>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_COMP_Init+0x2d8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a0c      	ldr	r2, [pc, #48]	; (800369c <HAL_COMP_Init+0x304>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d117      	bne.n	80036a0 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8003670:	6938      	ldr	r0, [r7, #16]
 8003672:	f7ff fd79 	bl	8003168 <LL_EXTI_DisableIT_32_63>
 8003676:	e016      	b.n	80036a6 <HAL_COMP_Init+0x30e>
 8003678:	ff007e0f 	.word	0xff007e0f
 800367c:	200003cc 	.word	0x200003cc
 8003680:	053e2d63 	.word	0x053e2d63
 8003684:	40010200 	.word	0x40010200
 8003688:	40010204 	.word	0x40010204
 800368c:	40010208 	.word	0x40010208
 8003690:	4001020c 	.word	0x4001020c
 8003694:	40010210 	.word	0x40010210
 8003698:	40010214 	.word	0x40010214
 800369c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80036a0:	6938      	ldr	r0, [r7, #16]
 80036a2:	f7ff fd4d 	bl	8003140 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7f5b      	ldrb	r3, [r3, #29]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80036b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <__NVIC_SetPriorityGrouping>:
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036dc:	4013      	ands	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036f2:	4a04      	ldr	r2, [pc, #16]	; (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	60d3      	str	r3, [r2, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <__NVIC_GetPriorityGrouping>:
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <__NVIC_GetPriorityGrouping+0x18>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f003 0307 	and.w	r3, r3, #7
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_EnableIRQ>:
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	2b00      	cmp	r3, #0
 8003734:	db0b      	blt.n	800374e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	f003 021f 	and.w	r2, r3, #31
 800373c:	4907      	ldr	r1, [pc, #28]	; (800375c <__NVIC_EnableIRQ+0x38>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2001      	movs	r0, #1
 8003746:	fa00 f202 	lsl.w	r2, r0, r2
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e100 	.word	0xe000e100

08003760 <__NVIC_SetPriority>:
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	6039      	str	r1, [r7, #0]
 800376a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003770:	2b00      	cmp	r3, #0
 8003772:	db0a      	blt.n	800378a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	490c      	ldr	r1, [pc, #48]	; (80037ac <__NVIC_SetPriority+0x4c>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	0112      	lsls	r2, r2, #4
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	440b      	add	r3, r1
 8003784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003788:	e00a      	b.n	80037a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4908      	ldr	r1, [pc, #32]	; (80037b0 <__NVIC_SetPriority+0x50>)
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	3b04      	subs	r3, #4
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	440b      	add	r3, r1
 800379e:	761a      	strb	r2, [r3, #24]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000e100 	.word	0xe000e100
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <NVIC_EncodePriority>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f1c3 0307 	rsb	r3, r3, #7
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	bf28      	it	cs
 80037d2:	2304      	movcs	r3, #4
 80037d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3304      	adds	r3, #4
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d902      	bls.n	80037e4 <NVIC_EncodePriority+0x30>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3b03      	subs	r3, #3
 80037e2:	e000      	b.n	80037e6 <NVIC_EncodePriority+0x32>
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	401a      	ands	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	43d9      	mvns	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800380c:	4313      	orrs	r3, r2
}
 800380e:	4618      	mov	r0, r3
 8003810:	3724      	adds	r7, #36	; 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <SysTick_Config>:
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800382c:	d301      	bcc.n	8003832 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800382e:	2301      	movs	r3, #1
 8003830:	e00f      	b.n	8003852 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <SysTick_Config+0x40>)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3b01      	subs	r3, #1
 8003838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800383a:	210f      	movs	r1, #15
 800383c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003840:	f7ff ff8e 	bl	8003760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <SysTick_Config+0x40>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <SysTick_Config+0x40>)
 800384c:	2207      	movs	r2, #7
 800384e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	e000e010 	.word	0xe000e010

08003860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff29 	bl	80036c0 <__NVIC_SetPriorityGrouping>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	4603      	mov	r3, r0
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003884:	f7ff ff40 	bl	8003708 <__NVIC_GetPriorityGrouping>
 8003888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	6978      	ldr	r0, [r7, #20]
 8003890:	f7ff ff90 	bl	80037b4 <NVIC_EncodePriority>
 8003894:	4602      	mov	r2, r0
 8003896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff ff5f 	bl	8003760 <__NVIC_SetPriority>
}
 80038a2:	bf00      	nop
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff33 	bl	8003724 <__NVIC_EnableIRQ>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff ffa4 	bl	800381c <SysTick_Config>
 80038d4:	4603      	mov	r3, r0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e014      	b.n	800391a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	791b      	ldrb	r3, [r3, #4]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d105      	bne.n	8003906 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fc ff0d 	bl	8000720 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	795b      	ldrb	r3, [r3, #5]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_DAC_Start+0x16>
 8003934:	2302      	movs	r3, #2
 8003936:	e043      	b.n	80039c0 <HAL_DAC_Start+0x9e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2201      	movs	r2, #1
 8003952:	409a      	lsls	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800395c:	2001      	movs	r0, #1
 800395e:	f7fe fb4d 	bl	8001ffc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10f      	bne.n	8003988 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003972:	2b02      	cmp	r3, #2
 8003974:	d11d      	bne.n	80039b2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	e014      	b.n	80039b2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2102      	movs	r1, #2
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	429a      	cmp	r2, r3
 80039a0:	d107      	bne.n	80039b2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0202 	orr.w	r2, r2, #2
 80039b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	795b      	ldrb	r3, [r3, #5]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_DAC_Start_DMA+0x1e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e0a1      	b.n	8003b2a <HAL_DAC_Start_DMA+0x162>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2202      	movs	r2, #2
 80039f0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d12a      	bne.n	8003a4e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a4d      	ldr	r2, [pc, #308]	; (8003b34 <HAL_DAC_Start_DMA+0x16c>)
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a4c      	ldr	r2, [pc, #304]	; (8003b38 <HAL_DAC_Start_DMA+0x170>)
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a4b      	ldr	r2, [pc, #300]	; (8003b3c <HAL_DAC_Start_DMA+0x174>)
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d009      	beq.n	8003a3a <HAL_DAC_Start_DMA+0x72>
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d00c      	beq.n	8003a44 <HAL_DAC_Start_DMA+0x7c>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d000      	beq.n	8003a30 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003a2e:	e039      	b.n	8003aa4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3308      	adds	r3, #8
 8003a36:	613b      	str	r3, [r7, #16]
        break;
 8003a38:	e034      	b.n	8003aa4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	330c      	adds	r3, #12
 8003a40:	613b      	str	r3, [r7, #16]
        break;
 8003a42:	e02f      	b.n	8003aa4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3310      	adds	r3, #16
 8003a4a:	613b      	str	r3, [r7, #16]
        break;
 8003a4c:	e02a      	b.n	8003aa4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <HAL_DAC_Start_DMA+0x178>)
 8003a54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4a3a      	ldr	r2, [pc, #232]	; (8003b44 <HAL_DAC_Start_DMA+0x17c>)
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4a39      	ldr	r2, [pc, #228]	; (8003b48 <HAL_DAC_Start_DMA+0x180>)
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a74:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d009      	beq.n	8003a90 <HAL_DAC_Start_DMA+0xc8>
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d00c      	beq.n	8003a9a <HAL_DAC_Start_DMA+0xd2>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d000      	beq.n	8003a86 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003a84:	e00e      	b.n	8003aa4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	613b      	str	r3, [r7, #16]
        break;
 8003a8e:	e009      	b.n	8003aa4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3318      	adds	r3, #24
 8003a96:	613b      	str	r3, [r7, #16]
        break;
 8003a98:	e004      	b.n	8003aa4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	331c      	adds	r3, #28
 8003aa0:	613b      	str	r3, [r7, #16]
        break;
 8003aa2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d111      	bne.n	8003ace <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6898      	ldr	r0, [r3, #8]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	f000 fb66 	bl	8004194 <HAL_DMA_Start_IT>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	75fb      	strb	r3, [r7, #23]
 8003acc:	e010      	b.n	8003af0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003adc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	68d8      	ldr	r0, [r3, #12]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	f000 fb54 	bl	8004194 <HAL_DMA_Start_IT>
 8003aec:	4603      	mov	r3, r0
 8003aee:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10f      	bne.n	8003b1c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2201      	movs	r2, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003b14:	2001      	movs	r0, #1
 8003b16:	f7fe fa71 	bl	8001ffc <HAL_Delay>
 8003b1a:	e005      	b.n	8003b28 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f043 0204 	orr.w	r2, r3, #4
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	08003f31 	.word	0x08003f31
 8003b38:	08003f53 	.word	0x08003f53
 8003b3c:	08003f6f 	.word	0x08003f6f
 8003b40:	08003fd9 	.word	0x08003fd9
 8003b44:	08003ffb 	.word	0x08003ffb
 8003b48:	08004017 	.word	0x08004017

08003b4c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	3308      	adds	r3, #8
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e004      	b.n	8003b86 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	3314      	adds	r3, #20
 8003b84:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	795b      	ldrb	r3, [r3, #5]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_DAC_ConfigChannel+0x1c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e194      	b.n	8003f1e <HAL_DAC_ConfigChannel+0x346>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d174      	bne.n	8003cf2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d137      	bne.n	8003c7e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f9e9 	bl	8001fe4 <HAL_GetTick>
 8003c12:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c14:	e011      	b.n	8003c3a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c16:	f7fe f9e5 	bl	8001fe4 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d90a      	bls.n	8003c3a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f043 0208 	orr.w	r2, r3, #8
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2203      	movs	r2, #3
 8003c34:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e171      	b.n	8003f1e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e6      	bne.n	8003c16 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f7fe f9d7 	bl	8001ffc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
 8003c58:	e01e      	b.n	8003c98 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c5a:	f7fe f9c3 	bl	8001fe4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d90a      	bls.n	8003c7e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f043 0208 	orr.w	r2, r3, #8
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2203      	movs	r2, #3
 8003c78:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e14f      	b.n	8003f1e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	dbe8      	blt.n	8003c5a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f7fe f9b7 	bl	8001ffc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	ea02 0103 	and.w	r1, r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	21ff      	movs	r1, #255	; 0xff
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	ea02 0103 	and.w	r1, r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d11d      	bne.n	8003d36 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	221f      	movs	r2, #31
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d12:	4013      	ands	r3, r2
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2207      	movs	r2, #7
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	4013      	ands	r3, r2
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	623b      	str	r3, [r7, #32]
 8003d62:	e011      	b.n	8003d88 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003d70:	2301      	movs	r3, #1
 8003d72:	623b      	str	r3, [r7, #32]
 8003d74:	e008      	b.n	8003d88 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	623b      	str	r3, [r7, #32]
 8003d82:	e001      	b.n	8003d88 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	6a3a      	ldr	r2, [r7, #32]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	4013      	ands	r3, r2
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	791b      	ldrb	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d102      	bne.n	8003dbc <HAL_DAC_ConfigChannel+0x1e4>
 8003db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dba:	e000      	b.n	8003dbe <HAL_DAC_ConfigChannel+0x1e6>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	795b      	ldrb	r3, [r3, #5]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d102      	bne.n	8003de8 <HAL_DAC_ConfigChannel+0x210>
 8003de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003de6:	e000      	b.n	8003dea <HAL_DAC_ConfigChannel+0x212>
 8003de8:	2300      	movs	r3, #0
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d114      	bne.n	8003e2a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003e00:	f001 fa9e 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 8003e04:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4a47      	ldr	r2, [pc, #284]	; (8003f28 <HAL_DAC_ConfigChannel+0x350>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d904      	bls.n	8003e18 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e00d      	b.n	8003e34 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	4a44      	ldr	r2, [pc, #272]	; (8003f2c <HAL_DAC_ConfigChannel+0x354>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d909      	bls.n	8003e34 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	e004      	b.n	8003e34 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	4313      	orrs	r3, r2
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e42:	4313      	orrs	r3, r2
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43da      	mvns	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	400a      	ands	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	4013      	ands	r3, r2
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6819      	ldr	r1, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	22c0      	movs	r2, #192	; 0xc0
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	ea02 0103 	and.w	r1, r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	409a      	lsls	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3728      	adds	r7, #40	; 0x28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	09896800 	.word	0x09896800
 8003f2c:	04c4b400 	.word	0x04c4b400

08003f30 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff fe2c 	bl	8003b9c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	711a      	strb	r2, [r3, #4]
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff fe25 	bl	8003bb0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f043 0204 	orr.w	r2, r3, #4
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff fe1b 	bl	8003bc4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	711a      	strb	r2, [r3, #4]
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff ffd8 	bl	8003f9c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	711a      	strb	r2, [r3, #4]
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff ffd1 	bl	8003fb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f043 0204 	orr.w	r2, r3, #4
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7ff ffc7 	bl	8003fc4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	711a      	strb	r2, [r3, #4]
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e08d      	b.n	8004172 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	4b47      	ldr	r3, [pc, #284]	; (800417c <HAL_DMA_Init+0x138>)
 800405e:	429a      	cmp	r2, r3
 8004060:	d80f      	bhi.n	8004082 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	4b45      	ldr	r3, [pc, #276]	; (8004180 <HAL_DMA_Init+0x13c>)
 800406a:	4413      	add	r3, r2
 800406c:	4a45      	ldr	r2, [pc, #276]	; (8004184 <HAL_DMA_Init+0x140>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	009a      	lsls	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a42      	ldr	r2, [pc, #264]	; (8004188 <HAL_DMA_Init+0x144>)
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
 8004080:	e00e      	b.n	80040a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	4b40      	ldr	r3, [pc, #256]	; (800418c <HAL_DMA_Init+0x148>)
 800408a:	4413      	add	r3, r2
 800408c:	4a3d      	ldr	r2, [pc, #244]	; (8004184 <HAL_DMA_Init+0x140>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	009a      	lsls	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a3c      	ldr	r2, [pc, #240]	; (8004190 <HAL_DMA_Init+0x14c>)
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f9b6 	bl	8004464 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004100:	d102      	bne.n	8004108 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800411c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d010      	beq.n	8004148 <HAL_DMA_Init+0x104>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b04      	cmp	r3, #4
 800412c:	d80c      	bhi.n	8004148 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f9d6 	bl	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e008      	b.n	800415a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40020407 	.word	0x40020407
 8004180:	bffdfff8 	.word	0xbffdfff8
 8004184:	cccccccd 	.word	0xcccccccd
 8004188:	40020000 	.word	0x40020000
 800418c:	bffdfbf8 	.word	0xbffdfbf8
 8004190:	40020400 	.word	0x40020400

08004194 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_DMA_Start_IT+0x20>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e066      	b.n	8004282 <HAL_DMA_Start_IT+0xee>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d155      	bne.n	8004274 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f8fb 	bl	80043e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 020e 	orr.w	r2, r2, #14
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e00f      	b.n	800422c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0204 	bic.w	r2, r2, #4
 800421a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 020a 	orr.w	r2, r2, #10
 800422a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004248:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004260:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e005      	b.n	8004280 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800427c:	2302      	movs	r3, #2
 800427e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004280:	7dfb      	ldrb	r3, [r7, #23]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2204      	movs	r2, #4
 80042ac:	409a      	lsls	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d026      	beq.n	8004304 <HAL_DMA_IRQHandler+0x7a>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d021      	beq.n	8004304 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0204 	bic.w	r2, r2, #4
 80042dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f003 021f 	and.w	r2, r3, #31
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	2104      	movs	r1, #4
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d071      	beq.n	80043de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004302:	e06c      	b.n	80043de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2202      	movs	r2, #2
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d02e      	beq.n	8004376 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d029      	beq.n	8004376 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 020a 	bic.w	r2, r2, #10
 800433e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	2102      	movs	r1, #2
 8004356:	fa01 f202 	lsl.w	r2, r1, r2
 800435a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d038      	beq.n	80043de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004374:	e033      	b.n	80043de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	2208      	movs	r2, #8
 8004380:	409a      	lsls	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d02a      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d025      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 020e 	bic.w	r2, r2, #14
 80043a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	f003 021f 	and.w	r2, r3, #31
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f202 	lsl.w	r2, r1, r2
 80043b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
}
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004410:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	f003 021f 	and.w	r2, r3, #31
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2101      	movs	r1, #1
 8004420:	fa01 f202 	lsl.w	r2, r1, r2
 8004424:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b10      	cmp	r3, #16
 8004434:	d108      	bne.n	8004448 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004446:	e007      	b.n	8004458 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	60da      	str	r2, [r3, #12]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	4b16      	ldr	r3, [pc, #88]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d802      	bhi.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e001      	b.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004480:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3b08      	subs	r3, #8
 800448e:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	089b      	lsrs	r3, r3, #2
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a0b      	ldr	r2, [pc, #44]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2201      	movs	r2, #1
 80044b8:	409a      	lsls	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40020407 	.word	0x40020407
 80044d0:	40020800 	.word	0x40020800
 80044d4:	40020820 	.word	0x40020820
 80044d8:	cccccccd 	.word	0xcccccccd
 80044dc:	40020880 	.word	0x40020880

080044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	461a      	mov	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004502:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3b01      	subs	r3, #1
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2201      	movs	r2, #1
 800450e:	409a      	lsls	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	1000823f 	.word	0x1000823f
 8004524:	40020940 	.word	0x40020940

08004528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004536:	e15a      	b.n	80047ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2101      	movs	r1, #1
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	4013      	ands	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 814c 	beq.w	80047e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d00b      	beq.n	8004570 <HAL_GPIO_Init+0x48>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d007      	beq.n	8004570 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004564:	2b11      	cmp	r3, #17
 8004566:	d003      	beq.n	8004570 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b12      	cmp	r3, #18
 800456e:	d130      	bne.n	80045d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	2203      	movs	r2, #3
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045a6:	2201      	movs	r2, #1
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 0201 	and.w	r2, r3, #1
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0xea>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b12      	cmp	r3, #18
 8004610:	d123      	bne.n	800465a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	08da      	lsrs	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3208      	adds	r2, #8
 800461a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	220f      	movs	r2, #15
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	08da      	lsrs	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3208      	adds	r2, #8
 8004654:	6939      	ldr	r1, [r7, #16]
 8004656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0203 	and.w	r2, r3, #3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80a6 	beq.w	80047e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800469c:	4b5b      	ldr	r3, [pc, #364]	; (800480c <HAL_GPIO_Init+0x2e4>)
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	4a5a      	ldr	r2, [pc, #360]	; (800480c <HAL_GPIO_Init+0x2e4>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6613      	str	r3, [r2, #96]	; 0x60
 80046a8:	4b58      	ldr	r3, [pc, #352]	; (800480c <HAL_GPIO_Init+0x2e4>)
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b4:	4a56      	ldr	r2, [pc, #344]	; (8004810 <HAL_GPIO_Init+0x2e8>)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	3302      	adds	r3, #2
 80046bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	220f      	movs	r2, #15
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046de:	d01f      	beq.n	8004720 <HAL_GPIO_Init+0x1f8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a4c      	ldr	r2, [pc, #304]	; (8004814 <HAL_GPIO_Init+0x2ec>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d019      	beq.n	800471c <HAL_GPIO_Init+0x1f4>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a4b      	ldr	r2, [pc, #300]	; (8004818 <HAL_GPIO_Init+0x2f0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_GPIO_Init+0x1f0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a4a      	ldr	r2, [pc, #296]	; (800481c <HAL_GPIO_Init+0x2f4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00d      	beq.n	8004714 <HAL_GPIO_Init+0x1ec>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a49      	ldr	r2, [pc, #292]	; (8004820 <HAL_GPIO_Init+0x2f8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d007      	beq.n	8004710 <HAL_GPIO_Init+0x1e8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a48      	ldr	r2, [pc, #288]	; (8004824 <HAL_GPIO_Init+0x2fc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <HAL_GPIO_Init+0x1e4>
 8004708:	2305      	movs	r3, #5
 800470a:	e00a      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 800470c:	2306      	movs	r3, #6
 800470e:	e008      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 8004710:	2304      	movs	r3, #4
 8004712:	e006      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 8004714:	2303      	movs	r3, #3
 8004716:	e004      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 8004718:	2302      	movs	r3, #2
 800471a:	e002      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 8004720:	2300      	movs	r3, #0
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	f002 0203 	and.w	r2, r2, #3
 8004728:	0092      	lsls	r2, r2, #2
 800472a:	4093      	lsls	r3, r2
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004732:	4937      	ldr	r1, [pc, #220]	; (8004810 <HAL_GPIO_Init+0x2e8>)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	3302      	adds	r3, #2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004740:	4b39      	ldr	r3, [pc, #228]	; (8004828 <HAL_GPIO_Init+0x300>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	43db      	mvns	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004764:	4a30      	ldr	r2, [pc, #192]	; (8004828 <HAL_GPIO_Init+0x300>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800476a:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <HAL_GPIO_Init+0x300>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800478e:	4a26      	ldr	r2, [pc, #152]	; (8004828 <HAL_GPIO_Init+0x300>)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004794:	4b24      	ldr	r3, [pc, #144]	; (8004828 <HAL_GPIO_Init+0x300>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	43db      	mvns	r3, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047b8:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <HAL_GPIO_Init+0x300>)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047be:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <HAL_GPIO_Init+0x300>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4013      	ands	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047e2:	4a11      	ldr	r2, [pc, #68]	; (8004828 <HAL_GPIO_Init+0x300>)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3301      	adds	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f47f ae9d 	bne.w	8004538 <HAL_GPIO_Init+0x10>
  }
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
 8004810:	40010000 	.word	0x40010000
 8004814:	48000400 	.word	0x48000400
 8004818:	48000800 	.word	0x48000800
 800481c:	48000c00 	.word	0x48000c00
 8004820:	48001000 	.word	0x48001000
 8004824:	48001400 	.word	0x48001400
 8004828:	40010400 	.word	0x40010400

0800482c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	887b      	ldrh	r3, [r7, #2]
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
 8004848:	e001      	b.n	800484e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]
 8004868:	4613      	mov	r3, r2
 800486a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800486c:	787b      	ldrb	r3, [r7, #1]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004878:	e002      	b.n	8004880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d141      	bne.n	800491e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800489a:	4b4b      	ldr	r3, [pc, #300]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a6:	d131      	bne.n	800490c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048a8:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ae:	4a46      	ldr	r2, [pc, #280]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048b8:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048c0:	4a41      	ldr	r2, [pc, #260]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048c8:	4b40      	ldr	r3, [pc, #256]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2232      	movs	r2, #50	; 0x32
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	4a3f      	ldr	r2, [pc, #252]	; (80049d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	0c9b      	lsrs	r3, r3, #18
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048de:	e002      	b.n	80048e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e6:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f2:	d102      	bne.n	80048fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f2      	bne.n	80048e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048fa:	4b33      	ldr	r3, [pc, #204]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004906:	d158      	bne.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e057      	b.n	80049bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800490c:	4b2e      	ldr	r3, [pc, #184]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004912:	4a2d      	ldr	r2, [pc, #180]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004918:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800491c:	e04d      	b.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004924:	d141      	bne.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004926:	4b28      	ldr	r3, [pc, #160]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004932:	d131      	bne.n	8004998 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493a:	4a23      	ldr	r2, [pc, #140]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004944:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800494c:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004954:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2232      	movs	r2, #50	; 0x32
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	0c9b      	lsrs	r3, r3, #18
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800496a:	e002      	b.n	8004972 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b01      	subs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497e:	d102      	bne.n	8004986 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f2      	bne.n	800496c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004992:	d112      	bne.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e011      	b.n	80049bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800499e:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049a8:	e007      	b.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049b2:	4a05      	ldr	r2, [pc, #20]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40007000 	.word	0x40007000
 80049cc:	200003cc 	.word	0x200003cc
 80049d0:	431bde83 	.word	0x431bde83

080049d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e308      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d075      	beq.n	8004ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f2:	4ba3      	ldr	r3, [pc, #652]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049fc:	4ba0      	ldr	r3, [pc, #640]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3e>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_OscConfig+0x44>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	4b99      	ldr	r3, [pc, #612]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d05b      	beq.n	8004adc <HAL_RCC_OscConfig+0x108>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d157      	bne.n	8004adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e2e3      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d106      	bne.n	8004a48 <HAL_RCC_OscConfig+0x74>
 8004a3a:	4b91      	ldr	r3, [pc, #580]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a90      	ldr	r2, [pc, #576]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e01d      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x98>
 8004a52:	4b8b      	ldr	r3, [pc, #556]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a8a      	ldr	r2, [pc, #552]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b88      	ldr	r3, [pc, #544]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a87      	ldr	r2, [pc, #540]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a6c:	4b84      	ldr	r3, [pc, #528]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a83      	ldr	r2, [pc, #524]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b81      	ldr	r3, [pc, #516]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a80      	ldr	r2, [pc, #512]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd faaa 	bl	8001fe4 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fd faa6 	bl	8001fe4 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e2a8      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa6:	4b76      	ldr	r3, [pc, #472]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xc0>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fa96 	bl	8001fe4 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fd fa92 	bl	8001fe4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e294      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ace:	4b6c      	ldr	r3, [pc, #432]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0xe8>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d075      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aea:	4b65      	ldr	r3, [pc, #404]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af4:	4b62      	ldr	r3, [pc, #392]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	d102      	bne.n	8004b0a <HAL_RCC_OscConfig+0x136>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d002      	beq.n	8004b10 <HAL_RCC_OscConfig+0x13c>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d11f      	bne.n	8004b50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b10:	4b5b      	ldr	r3, [pc, #364]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_OscConfig+0x154>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e267      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b28:	4b55      	ldr	r3, [pc, #340]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	4952      	ldr	r1, [pc, #328]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b3c:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <HAL_RCC_OscConfig+0x2b0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd fa03 	bl	8001f4c <HAL_InitTick>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d043      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e253      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d023      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b58:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a48      	ldr	r2, [pc, #288]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fd fa3e 	bl	8001fe4 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6c:	f7fd fa3a 	bl	8001fe4 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e23c      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7e:	4b40      	ldr	r3, [pc, #256]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	4939      	ldr	r1, [pc, #228]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]
 8004b9e:	e01a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba0:	4b37      	ldr	r3, [pc, #220]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a36      	ldr	r2, [pc, #216]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fd fa1a 	bl	8001fe4 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7fd fa16 	bl	8001fe4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e218      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc6:	4b2e      	ldr	r3, [pc, #184]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x1e0>
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d03c      	beq.n	8004c5c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01c      	beq.n	8004c24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bea:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf0:	4a23      	ldr	r2, [pc, #140]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfa:	f7fd f9f3 	bl	8001fe4 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c02:	f7fd f9ef 	bl	8001fe4 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e1f1      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c14:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ef      	beq.n	8004c02 <HAL_RCC_OscConfig+0x22e>
 8004c22:	e01b      	b.n	8004c5c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c24:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fd f9d6 	bl	8001fe4 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c3c:	f7fd f9d2 	bl	8001fe4 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e1d4      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ef      	bne.n	8004c3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80ab 	beq.w	8004dc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c6e:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_RCC_OscConfig+0x2b4>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e005      	b.n	8004c8a <HAL_RCC_OscConfig+0x2b6>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	200003d0 	.word	0x200003d0
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8e:	4baf      	ldr	r3, [pc, #700]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c92:	4aae      	ldr	r2, [pc, #696]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c98:	6593      	str	r3, [r2, #88]	; 0x58
 8004c9a:	4bac      	ldr	r3, [pc, #688]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004caa:	4ba9      	ldr	r3, [pc, #676]	; (8004f50 <HAL_RCC_OscConfig+0x57c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb6:	4ba6      	ldr	r3, [pc, #664]	; (8004f50 <HAL_RCC_OscConfig+0x57c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4aa5      	ldr	r2, [pc, #660]	; (8004f50 <HAL_RCC_OscConfig+0x57c>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc2:	f7fd f98f 	bl	8001fe4 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fd f98b 	bl	8001fe4 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e18d      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cdc:	4b9c      	ldr	r3, [pc, #624]	; (8004f50 <HAL_RCC_OscConfig+0x57c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d108      	bne.n	8004d02 <HAL_RCC_OscConfig+0x32e>
 8004cf0:	4b96      	ldr	r3, [pc, #600]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	4a95      	ldr	r2, [pc, #596]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d00:	e024      	b.n	8004d4c <HAL_RCC_OscConfig+0x378>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d110      	bne.n	8004d2c <HAL_RCC_OscConfig+0x358>
 8004d0a:	4b90      	ldr	r3, [pc, #576]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	4a8e      	ldr	r2, [pc, #568]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004d12:	f043 0304 	orr.w	r3, r3, #4
 8004d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d1a:	4b8c      	ldr	r3, [pc, #560]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	4a8a      	ldr	r2, [pc, #552]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d2a:	e00f      	b.n	8004d4c <HAL_RCC_OscConfig+0x378>
 8004d2c:	4b87      	ldr	r3, [pc, #540]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	4a86      	ldr	r2, [pc, #536]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d3c:	4b83      	ldr	r3, [pc, #524]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	4a82      	ldr	r2, [pc, #520]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d016      	beq.n	8004d82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fd f946 	bl	8001fe4 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fd f942 	bl	8001fe4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e142      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d72:	4b76      	ldr	r3, [pc, #472]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ed      	beq.n	8004d5c <HAL_RCC_OscConfig+0x388>
 8004d80:	e015      	b.n	8004dae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fd f92f 	bl	8001fe4 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fd f92b 	bl	8001fe4 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e12b      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da0:	4b6a      	ldr	r3, [pc, #424]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1ed      	bne.n	8004d8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db4:	4b65      	ldr	r3, [pc, #404]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	4a64      	ldr	r2, [pc, #400]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d03c      	beq.n	8004e46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dd4:	4b5d      	ldr	r3, [pc, #372]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dda:	4a5c      	ldr	r2, [pc, #368]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de4:	f7fd f8fe 	bl	8001fe4 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dec:	f7fd f8fa 	bl	8001fe4 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0fc      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dfe:	4b53      	ldr	r3, [pc, #332]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ef      	beq.n	8004dec <HAL_RCC_OscConfig+0x418>
 8004e0c:	e01b      	b.n	8004e46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e0e:	4b4f      	ldr	r3, [pc, #316]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e14:	4a4d      	ldr	r2, [pc, #308]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fd f8e1 	bl	8001fe4 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e26:	f7fd f8dd 	bl	8001fe4 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0df      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e38:	4b44      	ldr	r3, [pc, #272]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ef      	bne.n	8004e26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80d3 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e50:	4b3e      	ldr	r3, [pc, #248]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	f000 808d 	beq.w	8004f78 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d15a      	bne.n	8004f1c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e66:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e72:	f7fd f8b7 	bl	8001fe4 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fd f8b3 	bl	8001fe4 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0b5      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e8c:	4b2f      	ldr	r3, [pc, #188]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e98:	4b2c      	ldr	r3, [pc, #176]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	4b2d      	ldr	r3, [pc, #180]	; (8004f54 <HAL_RCC_OscConfig+0x580>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6a11      	ldr	r1, [r2, #32]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	0112      	lsls	r2, r2, #4
 8004eac:	4311      	orrs	r1, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004eb2:	0212      	lsls	r2, r2, #8
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004eba:	0852      	lsrs	r2, r2, #1
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0552      	lsls	r2, r2, #21
 8004ec0:	4311      	orrs	r1, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ec6:	0852      	lsrs	r2, r2, #1
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	0652      	lsls	r2, r2, #25
 8004ecc:	4311      	orrs	r1, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ed2:	06d2      	lsls	r2, r2, #27
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	491d      	ldr	r1, [pc, #116]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ee8:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a17      	ldr	r2, [pc, #92]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ef2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fd f876 	bl	8001fe4 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fd f872 	bl	8001fe4 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e074      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0x528>
 8004f1a:	e06c      	b.n	8004ff6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f26:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <HAL_RCC_OscConfig+0x578>)
 8004f3a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fd f84e 	bl	8001fe4 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f4a:	e00e      	b.n	8004f6a <HAL_RCC_OscConfig+0x596>
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40007000 	.word	0x40007000
 8004f54:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fd f844 	bl	8001fe4 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e046      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f6a:	4b25      	ldr	r3, [pc, #148]	; (8005000 <HAL_RCC_OscConfig+0x62c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x584>
 8004f76:	e03e      	b.n	8004ff6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e039      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f84:	4b1e      	ldr	r3, [pc, #120]	; (8005000 <HAL_RCC_OscConfig+0x62c>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f003 0203 	and.w	r2, r3, #3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d12c      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d123      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d11b      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d113      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d109      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	3b01      	subs	r3, #1
 8004fec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000

08005004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e11e      	b.n	800525a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800501c:	4b91      	ldr	r3, [pc, #580]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d910      	bls.n	800504c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b8e      	ldr	r3, [pc, #568]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 020f 	bic.w	r2, r3, #15
 8005032:	498c      	ldr	r1, [pc, #560]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b8a      	ldr	r3, [pc, #552]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e106      	b.n	800525a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d073      	beq.n	8005140 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b03      	cmp	r3, #3
 800505e:	d129      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005060:	4b81      	ldr	r3, [pc, #516]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0f4      	b.n	800525a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005070:	f000 f972 	bl	8005358 <RCC_GetSysClockFreqFromPLLSource>
 8005074:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4a7c      	ldr	r2, [pc, #496]	; (800526c <HAL_RCC_ClockConfig+0x268>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d93f      	bls.n	80050fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800507e:	4b7a      	ldr	r3, [pc, #488]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005092:	2b00      	cmp	r3, #0
 8005094:	d033      	beq.n	80050fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800509a:	2b00      	cmp	r3, #0
 800509c:	d12f      	bne.n	80050fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800509e:	4b72      	ldr	r3, [pc, #456]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050a6:	4a70      	ldr	r2, [pc, #448]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 80050a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e024      	b.n	80050fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d107      	bne.n	80050cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050bc:	4b6a      	ldr	r3, [pc, #424]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0c6      	b.n	800525a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050cc:	4b66      	ldr	r3, [pc, #408]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0be      	b.n	800525a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050dc:	f000 f8ce 	bl	800527c <HAL_RCC_GetSysClockFreq>
 80050e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4a61      	ldr	r2, [pc, #388]	; (800526c <HAL_RCC_ClockConfig+0x268>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d909      	bls.n	80050fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050ea:	4b5f      	ldr	r3, [pc, #380]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050f2:	4a5d      	ldr	r2, [pc, #372]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050fa:	2380      	movs	r3, #128	; 0x80
 80050fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050fe:	4b5a      	ldr	r3, [pc, #360]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 0203 	bic.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4957      	ldr	r1, [pc, #348]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fc ff68 	bl	8001fe4 <HAL_GetTick>
 8005114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	e00a      	b.n	800512e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7fc ff64 	bl	8001fe4 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	; 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e095      	b.n	800525a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	4b4e      	ldr	r3, [pc, #312]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 020c 	and.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	429a      	cmp	r2, r3
 800513e:	d1eb      	bne.n	8005118 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d023      	beq.n	8005194 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005158:	4b43      	ldr	r3, [pc, #268]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4a42      	ldr	r2, [pc, #264]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 800515e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005162:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005170:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005178:	4a3b      	ldr	r2, [pc, #236]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 800517a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800517e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005180:	4b39      	ldr	r3, [pc, #228]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4936      	ldr	r1, [pc, #216]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
 8005192:	e008      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b80      	cmp	r3, #128	; 0x80
 8005198:	d105      	bne.n	80051a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800519a:	4b33      	ldr	r3, [pc, #204]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	4a32      	ldr	r2, [pc, #200]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 80051a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a6:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d21d      	bcs.n	80051f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b4:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 020f 	bic.w	r2, r3, #15
 80051bc:	4929      	ldr	r1, [pc, #164]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051c4:	f7fc ff0e 	bl	8001fe4 <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051cc:	f7fc ff0a 	bl	8001fe4 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e03b      	b.n	800525a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	4b20      	ldr	r3, [pc, #128]	; (8005264 <HAL_RCC_ClockConfig+0x260>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d1ed      	bne.n	80051cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051fc:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4917      	ldr	r1, [pc, #92]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	490f      	ldr	r1, [pc, #60]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800522e:	f000 f825 	bl	800527c <HAL_RCC_GetSysClockFreq>
 8005232:	4601      	mov	r1, r0
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <HAL_RCC_ClockConfig+0x264>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	4a0c      	ldr	r2, [pc, #48]	; (8005270 <HAL_RCC_ClockConfig+0x26c>)
 8005240:	5cd3      	ldrb	r3, [r2, r3]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	fa21 f303 	lsr.w	r3, r1, r3
 800524a:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <HAL_RCC_ClockConfig+0x270>)
 800524c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <HAL_RCC_ClockConfig+0x274>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fc fe7a 	bl	8001f4c <HAL_InitTick>
 8005258:	4603      	mov	r3, r0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40022000 	.word	0x40022000
 8005268:	40021000 	.word	0x40021000
 800526c:	04c4b400 	.word	0x04c4b400
 8005270:	08008bc4 	.word	0x08008bc4
 8005274:	200003cc 	.word	0x200003cc
 8005278:	200003d0 	.word	0x200003d0

0800527c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005282:	4b2c      	ldr	r3, [pc, #176]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b04      	cmp	r3, #4
 800528c:	d102      	bne.n	8005294 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800528e:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	e047      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005294:	4b27      	ldr	r3, [pc, #156]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 030c 	and.w	r3, r3, #12
 800529c:	2b08      	cmp	r3, #8
 800529e:	d102      	bne.n	80052a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052a0:	4b26      	ldr	r3, [pc, #152]	; (800533c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	e03e      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052a6:	4b23      	ldr	r3, [pc, #140]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b0c      	cmp	r3, #12
 80052b0:	d136      	bne.n	8005320 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	3301      	adds	r3, #1
 80052c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d10c      	bne.n	80052ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d0:	4a1a      	ldr	r2, [pc, #104]	; (800533c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	4a16      	ldr	r2, [pc, #88]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052da:	68d2      	ldr	r2, [r2, #12]
 80052dc:	0a12      	lsrs	r2, r2, #8
 80052de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	617b      	str	r3, [r7, #20]
      break;
 80052e8:	e00c      	b.n	8005304 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ea:	4a13      	ldr	r2, [pc, #76]	; (8005338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f2:	4a10      	ldr	r2, [pc, #64]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052f4:	68d2      	ldr	r2, [r2, #12]
 80052f6:	0a12      	lsrs	r2, r2, #8
 80052f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	617b      	str	r3, [r7, #20]
      break;
 8005302:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	0e5b      	lsrs	r3, r3, #25
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	3301      	adds	r3, #1
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	e001      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005324:	693b      	ldr	r3, [r7, #16]
}
 8005326:	4618      	mov	r0, r3
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40021000 	.word	0x40021000
 8005338:	00f42400 	.word	0x00f42400
 800533c:	007a1200 	.word	0x007a1200

08005340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005344:	4b03      	ldr	r3, [pc, #12]	; (8005354 <HAL_RCC_GetHCLKFreq+0x14>)
 8005346:	681b      	ldr	r3, [r3, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	200003cc 	.word	0x200003cc

08005358 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800535e:	4b1e      	ldr	r3, [pc, #120]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	091b      	lsrs	r3, r3, #4
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d10c      	bne.n	8005396 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005386:	68d2      	ldr	r2, [r2, #12]
 8005388:	0a12      	lsrs	r2, r2, #8
 800538a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	617b      	str	r3, [r7, #20]
    break;
 8005394:	e00c      	b.n	80053b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005396:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4a0e      	ldr	r2, [pc, #56]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053a0:	68d2      	ldr	r2, [r2, #12]
 80053a2:	0a12      	lsrs	r2, r2, #8
 80053a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
 80053ac:	617b      	str	r3, [r7, #20]
    break;
 80053ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	0e5b      	lsrs	r3, r3, #25
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	3301      	adds	r3, #1
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053ca:	687b      	ldr	r3, [r7, #4]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40021000 	.word	0x40021000
 80053dc:	007a1200 	.word	0x007a1200
 80053e0:	00f42400 	.word	0x00f42400

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053ec:	2300      	movs	r3, #0
 80053ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f0:	2300      	movs	r3, #0
 80053f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8098 	beq.w	8005532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005402:	2300      	movs	r3, #0
 8005404:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005406:	4b43      	ldr	r3, [pc, #268]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10d      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005412:	4b40      	ldr	r3, [pc, #256]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005416:	4a3f      	ldr	r2, [pc, #252]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541c:	6593      	str	r3, [r2, #88]	; 0x58
 800541e:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800542a:	2301      	movs	r3, #1
 800542c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800542e:	4b3a      	ldr	r3, [pc, #232]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a39      	ldr	r2, [pc, #228]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005438:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800543a:	f7fc fdd3 	bl	8001fe4 <HAL_GetTick>
 800543e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005440:	e009      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005442:	f7fc fdcf 	bl	8001fe4 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d902      	bls.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	74fb      	strb	r3, [r7, #19]
        break;
 8005454:	e005      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005456:	4b30      	ldr	r3, [pc, #192]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0ef      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005462:	7cfb      	ldrb	r3, [r7, #19]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d159      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005468:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005472:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01e      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	d019      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005484:	4b23      	ldr	r3, [pc, #140]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005490:	4b20      	ldr	r3, [pc, #128]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005496:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a0:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054b0:	4a18      	ldr	r2, [pc, #96]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fc fd8f 	bl	8001fe4 <HAL_GetTick>
 80054c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c8:	e00b      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fc fd8b 	bl	8001fe4 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d902      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	74fb      	strb	r3, [r7, #19]
            break;
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e2:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0ec      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f6:	4b07      	ldr	r3, [pc, #28]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	4903      	ldr	r1, [pc, #12]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800550c:	e008      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	74bb      	strb	r3, [r7, #18]
 8005512:	e005      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005514:	40021000 	.word	0x40021000
 8005518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005520:	7c7b      	ldrb	r3, [r7, #17]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d105      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005526:	4baf      	ldr	r3, [pc, #700]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	4aae      	ldr	r2, [pc, #696]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800552c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005530:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800553e:	4ba9      	ldr	r3, [pc, #676]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	f023 0203 	bic.w	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	49a5      	ldr	r1, [pc, #660]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005560:	4ba0      	ldr	r3, [pc, #640]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	f023 020c 	bic.w	r2, r3, #12
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	499d      	ldr	r1, [pc, #628]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005582:	4b98      	ldr	r3, [pc, #608]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4994      	ldr	r1, [pc, #592]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055a4:	4b8f      	ldr	r3, [pc, #572]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	498c      	ldr	r1, [pc, #560]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055c6:	4b87      	ldr	r3, [pc, #540]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	4983      	ldr	r1, [pc, #524]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055e8:	4b7e      	ldr	r3, [pc, #504]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	497b      	ldr	r1, [pc, #492]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800560a:	4b76      	ldr	r3, [pc, #472]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	4972      	ldr	r1, [pc, #456]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800562c:	4b6d      	ldr	r3, [pc, #436]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	496a      	ldr	r1, [pc, #424]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800564e:	4b65      	ldr	r3, [pc, #404]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	4961      	ldr	r1, [pc, #388]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005670:	4b5c      	ldr	r3, [pc, #368]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005676:	f023 0203 	bic.w	r2, r3, #3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	4959      	ldr	r1, [pc, #356]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005692:	4b54      	ldr	r3, [pc, #336]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	4950      	ldr	r1, [pc, #320]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056b4:	4b4b      	ldr	r3, [pc, #300]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	4948      	ldr	r1, [pc, #288]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d2:	d105      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d4:	4b43      	ldr	r3, [pc, #268]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a42      	ldr	r2, [pc, #264]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d015      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056ec:	4b3d      	ldr	r3, [pc, #244]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	493a      	ldr	r1, [pc, #232]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800570a:	d105      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800570c:	4b35      	ldr	r3, [pc, #212]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a34      	ldr	r2, [pc, #208]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005716:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d015      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005724:	4b2f      	ldr	r3, [pc, #188]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	492c      	ldr	r1, [pc, #176]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005742:	d105      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005744:	4b27      	ldr	r3, [pc, #156]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a26      	ldr	r2, [pc, #152]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800574a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800574e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800575c:	4b21      	ldr	r3, [pc, #132]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	491e      	ldr	r1, [pc, #120]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800577a:	d105      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800577c:	4b19      	ldr	r3, [pc, #100]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005786:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d015      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005794:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	4910      	ldr	r1, [pc, #64]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b2:	d105      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d018      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	4902      	ldr	r1, [pc, #8]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057e2:	e001      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80057e4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057f0:	d105      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057f2:	4b21      	ldr	r3, [pc, #132]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4a20      	ldr	r2, [pc, #128]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d015      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800580a:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005810:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005818:	4917      	ldr	r1, [pc, #92]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d105      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800582a:	4b13      	ldr	r3, [pc, #76]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005834:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d015      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005844:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005850:	4909      	ldr	r1, [pc, #36]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005860:	d105      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	4a04      	ldr	r2, [pc, #16]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800586c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800586e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40021000 	.word	0x40021000

0800587c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e084      	b.n	8005998 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7fb fd6b 	bl	8001384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ce:	d902      	bls.n	80058d6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e002      	b.n	80058dc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058e4:	d007      	beq.n	80058f6 <HAL_SPI_Init+0x7a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ee:	d002      	beq.n	80058f6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005906:	d903      	bls.n	8005910 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	631a      	str	r2, [r3, #48]	; 0x30
 800590e:	e002      	b.n	8005916 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	ea42 0103 	orr.w	r1, r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	f003 0204 	and.w	r2, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	ea42 0103 	orr.w	r1, r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69da      	ldr	r2, [r3, #28]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005986:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_SPI_Transmit+0x22>
 80059be:	2302      	movs	r3, #2
 80059c0:	e150      	b.n	8005c64 <HAL_SPI_Transmit+0x2c4>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ca:	f7fc fb0b 	bl	8001fe4 <HAL_GetTick>
 80059ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d002      	beq.n	80059e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
 80059e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059e4:	e135      	b.n	8005c52 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_SPI_Transmit+0x52>
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059f6:	e12c      	b.n	8005c52 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2203      	movs	r2, #3
 80059fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a42:	d107      	bne.n	8005a54 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b40      	cmp	r3, #64	; 0x40
 8005a60:	d007      	beq.n	8005a72 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a7a:	d94b      	bls.n	8005b14 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_SPI_Transmit+0xea>
 8005a84:	8afb      	ldrh	r3, [r7, #22]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d13e      	bne.n	8005b08 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aae:	e02b      	b.n	8005b08 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d112      	bne.n	8005ae4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	1c9a      	adds	r2, r3, #2
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ae2:	e011      	b.n	8005b08 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae4:	f7fc fa7e 	bl	8001fe4 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d803      	bhi.n	8005afc <HAL_SPI_Transmit+0x15c>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afa:	d102      	bne.n	8005b02 <HAL_SPI_Transmit+0x162>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b06:	e0a4      	b.n	8005c52 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1ce      	bne.n	8005ab0 <HAL_SPI_Transmit+0x110>
 8005b12:	e07c      	b.n	8005c0e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_SPI_Transmit+0x182>
 8005b1c:	8afb      	ldrh	r3, [r7, #22]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d170      	bne.n	8005c04 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d912      	bls.n	8005b52 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	881a      	ldrh	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3c:	1c9a      	adds	r2, r3, #2
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b02      	subs	r3, #2
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b50:	e058      	b.n	8005c04 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b78:	e044      	b.n	8005c04 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d12b      	bne.n	8005be0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d912      	bls.n	8005bb8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	881a      	ldrh	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b02      	subs	r3, #2
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bb6:	e025      	b.n	8005c04 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	7812      	ldrb	r2, [r2, #0]
 8005bc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bde:	e011      	b.n	8005c04 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005be0:	f7fc fa00 	bl	8001fe4 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d803      	bhi.n	8005bf8 <HAL_SPI_Transmit+0x258>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bf6:	d102      	bne.n	8005bfe <HAL_SPI_Transmit+0x25e>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c02:	e026      	b.n	8005c52 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1b5      	bne.n	8005b7a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f901 	bl	8005e1a <SPI_EndRxTxTransaction>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e000      	b.n	8005c52 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005c50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c7c:	e04c      	b.n	8005d18 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c84:	d048      	beq.n	8005d18 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c86:	f7fc f9ad 	bl	8001fe4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d902      	bls.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d13d      	bne.n	8005d18 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005caa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb4:	d111      	bne.n	8005cda <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cbe:	d004      	beq.n	8005cca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc8:	d107      	bne.n	8005cda <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce2:	d10f      	bne.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e00f      	b.n	8005d38 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4013      	ands	r3, r2
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	bf0c      	ite	eq
 8005d28:	2301      	moveq	r3, #1
 8005d2a:	2300      	movne	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d1a3      	bne.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d4e:	e057      	b.n	8005e00 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d56:	d106      	bne.n	8005d66 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	330c      	adds	r3, #12
 8005d64:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d6c:	d048      	beq.n	8005e00 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d6e:	f7fc f939 	bl	8001fe4 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d902      	bls.n	8005d84 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d13d      	bne.n	8005e00 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9c:	d111      	bne.n	8005dc2 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da6:	d004      	beq.n	8005db2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db0:	d107      	bne.n	8005dc2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dca:	d10f      	bne.n	8005dec <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e008      	b.n	8005e12 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d19f      	bne.n	8005d50 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af02      	add	r7, sp, #8
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff ff84 	bl	8005d40 <SPI_WaitFifoStateUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	f043 0220 	orr.w	r2, r3, #32
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e027      	b.n	8005e9e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2200      	movs	r2, #0
 8005e56:	2180      	movs	r1, #128	; 0x80
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff ff07 	bl	8005c6c <SPI_WaitFlagStateUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e68:	f043 0220 	orr.w	r2, r3, #32
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e014      	b.n	8005e9e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff ff5d 	bl	8005d40 <SPI_WaitFifoStateUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e000      	b.n	8005e9e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e049      	b.n	8005f4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7fb ff4b 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f000 fc23 	bl	8006730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d001      	beq.n	8005f6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e019      	b.n	8005fa0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <HAL_TIM_Base_Start+0x58>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d00b      	beq.n	8005f9e <HAL_TIM_Base_Start+0x4a>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8c:	d007      	beq.n	8005f9e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	00010007 	.word	0x00010007

08005fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d001      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e021      	b.n	800600c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <HAL_TIM_Base_Start_IT+0x68>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b06      	cmp	r3, #6
 8005ff0:	d00b      	beq.n	800600a <HAL_TIM_Base_Start_IT+0x5a>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff8:	d007      	beq.n	800600a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0201 	orr.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	00010007 	.word	0x00010007

0800601c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e097      	b.n	8006160 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7fb fe33 	bl	8001cb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2202      	movs	r2, #2
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006060:	f023 0307 	bic.w	r3, r3, #7
 8006064:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3304      	adds	r3, #4
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f000 fb5d 	bl	8006730 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	4313      	orrs	r3, r2
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80060bc:	f023 030c 	bic.w	r3, r3, #12
 80060c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	4313      	orrs	r3, r2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	011a      	lsls	r2, r3, #4
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	031b      	lsls	r3, r3, #12
 80060ec:	4313      	orrs	r3, r2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80060fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006102:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	4313      	orrs	r3, r2
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b02      	cmp	r3, #2
 800617c:	d122      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b02      	cmp	r3, #2
 800618a:	d11b      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0202 	mvn.w	r2, #2
 8006194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 faa2 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 80061b0:	e005      	b.n	80061be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa94 	bl	80066e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 faa5 	bl	8006708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d122      	bne.n	8006218 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d11b      	bne.n	8006218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0204 	mvn.w	r2, #4
 80061e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa78 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 8006204:	e005      	b.n	8006212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa6a 	bl	80066e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fa7b 	bl	8006708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b08      	cmp	r3, #8
 8006224:	d122      	bne.n	800626c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b08      	cmp	r3, #8
 8006232:	d11b      	bne.n	800626c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0208 	mvn.w	r2, #8
 800623c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2204      	movs	r2, #4
 8006242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa4e 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa40 	bl	80066e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fa51 	bl	8006708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2b10      	cmp	r3, #16
 8006278:	d122      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b10      	cmp	r3, #16
 8006286:	d11b      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0210 	mvn.w	r2, #16
 8006290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2208      	movs	r2, #8
 8006296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa24 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa16 	bl	80066e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fa27 	bl	8006708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d10e      	bne.n	80062ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d107      	bne.n	80062ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0201 	mvn.w	r2, #1
 80062e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f9f0 	bl	80066cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f6:	2b80      	cmp	r3, #128	; 0x80
 80062f8:	d10e      	bne.n	8006318 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006304:	2b80      	cmp	r3, #128	; 0x80
 8006306:	d107      	bne.n	8006318 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fd5e 	bl	8006dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006326:	d10e      	bne.n	8006346 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b80      	cmp	r3, #128	; 0x80
 8006334:	d107      	bne.n	8006346 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800633e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fd51 	bl	8006de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006350:	2b40      	cmp	r3, #64	; 0x40
 8006352:	d10e      	bne.n	8006372 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d107      	bne.n	8006372 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800636a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f9d5 	bl	800671c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b20      	cmp	r3, #32
 800637e:	d10e      	bne.n	800639e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b20      	cmp	r3, #32
 800638c:	d107      	bne.n	800639e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f06f 0220 	mvn.w	r2, #32
 8006396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fd11 	bl	8006dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ac:	d10f      	bne.n	80063ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063bc:	d107      	bne.n	80063ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80063c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fd17 	bl	8006dfc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063dc:	d10f      	bne.n	80063fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063ec:	d107      	bne.n	80063fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80063f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fd09 	bl	8006e10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800640c:	d10f      	bne.n	800642e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641c:	d107      	bne.n	800642e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fcfb 	bl	8006e24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800643c:	d10f      	bne.n	800645e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006448:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800644c:	d107      	bne.n	800645e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fced 	bl	8006e38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIM_ConfigClockSource+0x18>
 800647c:	2302      	movs	r3, #2
 800647e:	e0d2      	b.n	8006626 <HAL_TIM_ConfigClockSource+0x1be>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800649e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064bc:	f000 80a9 	beq.w	8006612 <HAL_TIM_ConfigClockSource+0x1aa>
 80064c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c4:	d81a      	bhi.n	80064fc <HAL_TIM_ConfigClockSource+0x94>
 80064c6:	2b30      	cmp	r3, #48	; 0x30
 80064c8:	f000 809a 	beq.w	8006600 <HAL_TIM_ConfigClockSource+0x198>
 80064cc:	2b30      	cmp	r3, #48	; 0x30
 80064ce:	d809      	bhi.n	80064e4 <HAL_TIM_ConfigClockSource+0x7c>
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	f000 8095 	beq.w	8006600 <HAL_TIM_ConfigClockSource+0x198>
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	f000 8092 	beq.w	8006600 <HAL_TIM_ConfigClockSource+0x198>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 808f 	beq.w	8006600 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80064e2:	e097      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80064e4:	2b50      	cmp	r3, #80	; 0x50
 80064e6:	d05b      	beq.n	80065a0 <HAL_TIM_ConfigClockSource+0x138>
 80064e8:	2b50      	cmp	r3, #80	; 0x50
 80064ea:	d802      	bhi.n	80064f2 <HAL_TIM_ConfigClockSource+0x8a>
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d077      	beq.n	80065e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80064f0:	e090      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80064f2:	2b60      	cmp	r3, #96	; 0x60
 80064f4:	d064      	beq.n	80065c0 <HAL_TIM_ConfigClockSource+0x158>
 80064f6:	2b70      	cmp	r3, #112	; 0x70
 80064f8:	d028      	beq.n	800654c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80064fa:	e08b      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80064fc:	4a4c      	ldr	r2, [pc, #304]	; (8006630 <HAL_TIM_ConfigClockSource+0x1c8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d07e      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x198>
 8006502:	4a4b      	ldr	r2, [pc, #300]	; (8006630 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d810      	bhi.n	800652a <HAL_TIM_ConfigClockSource+0xc2>
 8006508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650c:	d078      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x198>
 800650e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006512:	d803      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0xb4>
 8006514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006518:	d02f      	beq.n	800657a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800651a:	e07b      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800651c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006520:	d06e      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x198>
 8006522:	4a44      	ldr	r2, [pc, #272]	; (8006634 <HAL_TIM_ConfigClockSource+0x1cc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d06b      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006528:	e074      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800652a:	4a43      	ldr	r2, [pc, #268]	; (8006638 <HAL_TIM_ConfigClockSource+0x1d0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d067      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x198>
 8006530:	4a41      	ldr	r2, [pc, #260]	; (8006638 <HAL_TIM_ConfigClockSource+0x1d0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d803      	bhi.n	800653e <HAL_TIM_ConfigClockSource+0xd6>
 8006536:	4a41      	ldr	r2, [pc, #260]	; (800663c <HAL_TIM_ConfigClockSource+0x1d4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d061      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800653c:	e06a      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800653e:	4a40      	ldr	r2, [pc, #256]	; (8006640 <HAL_TIM_ConfigClockSource+0x1d8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d05d      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x198>
 8006544:	4a3f      	ldr	r2, [pc, #252]	; (8006644 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d05a      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800654a:	e063      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	6899      	ldr	r1, [r3, #8]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f000 fac8 	bl	8006af0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800656e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	609a      	str	r2, [r3, #8]
      break;
 8006578:	e04c      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6899      	ldr	r1, [r3, #8]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f000 fab1 	bl	8006af0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800659c:	609a      	str	r2, [r3, #8]
      break;
 800659e:	e039      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	6859      	ldr	r1, [r3, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	461a      	mov	r2, r3
 80065ae:	f000 fa23 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2150      	movs	r1, #80	; 0x50
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fa7c 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 80065be:	e029      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f000 fa42 	bl	8006a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2160      	movs	r1, #96	; 0x60
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fa6c 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 80065de:	e019      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	6859      	ldr	r1, [r3, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	461a      	mov	r2, r3
 80065ee:	f000 fa03 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2140      	movs	r1, #64	; 0x40
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fa5c 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 80065fe:	e009      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f000 fa53 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8006610:	e000      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8006612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	00100030 	.word	0x00100030
 8006634:	00100020 	.word	0x00100020
 8006638:	00100050 	.word	0x00100050
 800663c:	00100040 	.word	0x00100040
 8006640:	00100060 	.word	0x00100060
 8006644:	00100070 	.word	0x00100070

08006648 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_TIM_SlaveConfigSynchro+0x18>
 800665c:	2302      	movs	r3, #2
 800665e:	e031      	b.n	80066c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f904 	bl	8006880 <TIM_SlaveTimer_SetConfig>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e018      	b.n	80066c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a46      	ldr	r2, [pc, #280]	; (800685c <TIM_Base_SetConfig+0x12c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d017      	beq.n	8006778 <TIM_Base_SetConfig+0x48>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800674e:	d013      	beq.n	8006778 <TIM_Base_SetConfig+0x48>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a43      	ldr	r2, [pc, #268]	; (8006860 <TIM_Base_SetConfig+0x130>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00f      	beq.n	8006778 <TIM_Base_SetConfig+0x48>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a42      	ldr	r2, [pc, #264]	; (8006864 <TIM_Base_SetConfig+0x134>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00b      	beq.n	8006778 <TIM_Base_SetConfig+0x48>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a41      	ldr	r2, [pc, #260]	; (8006868 <TIM_Base_SetConfig+0x138>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d007      	beq.n	8006778 <TIM_Base_SetConfig+0x48>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a40      	ldr	r2, [pc, #256]	; (800686c <TIM_Base_SetConfig+0x13c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_Base_SetConfig+0x48>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a3f      	ldr	r2, [pc, #252]	; (8006870 <TIM_Base_SetConfig+0x140>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d108      	bne.n	800678a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a33      	ldr	r2, [pc, #204]	; (800685c <TIM_Base_SetConfig+0x12c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d023      	beq.n	80067da <TIM_Base_SetConfig+0xaa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d01f      	beq.n	80067da <TIM_Base_SetConfig+0xaa>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a30      	ldr	r2, [pc, #192]	; (8006860 <TIM_Base_SetConfig+0x130>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01b      	beq.n	80067da <TIM_Base_SetConfig+0xaa>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a2f      	ldr	r2, [pc, #188]	; (8006864 <TIM_Base_SetConfig+0x134>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d017      	beq.n	80067da <TIM_Base_SetConfig+0xaa>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a2e      	ldr	r2, [pc, #184]	; (8006868 <TIM_Base_SetConfig+0x138>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <TIM_Base_SetConfig+0xaa>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a2d      	ldr	r2, [pc, #180]	; (800686c <TIM_Base_SetConfig+0x13c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00f      	beq.n	80067da <TIM_Base_SetConfig+0xaa>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a2d      	ldr	r2, [pc, #180]	; (8006874 <TIM_Base_SetConfig+0x144>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_Base_SetConfig+0xaa>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a2c      	ldr	r2, [pc, #176]	; (8006878 <TIM_Base_SetConfig+0x148>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <TIM_Base_SetConfig+0xaa>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2b      	ldr	r2, [pc, #172]	; (800687c <TIM_Base_SetConfig+0x14c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_Base_SetConfig+0xaa>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a26      	ldr	r2, [pc, #152]	; (8006870 <TIM_Base_SetConfig+0x140>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a12      	ldr	r2, [pc, #72]	; (800685c <TIM_Base_SetConfig+0x12c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <TIM_Base_SetConfig+0x110>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a14      	ldr	r2, [pc, #80]	; (800686c <TIM_Base_SetConfig+0x13c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00f      	beq.n	8006840 <TIM_Base_SetConfig+0x110>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a14      	ldr	r2, [pc, #80]	; (8006874 <TIM_Base_SetConfig+0x144>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00b      	beq.n	8006840 <TIM_Base_SetConfig+0x110>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a13      	ldr	r2, [pc, #76]	; (8006878 <TIM_Base_SetConfig+0x148>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d007      	beq.n	8006840 <TIM_Base_SetConfig+0x110>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a12      	ldr	r2, [pc, #72]	; (800687c <TIM_Base_SetConfig+0x14c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d003      	beq.n	8006840 <TIM_Base_SetConfig+0x110>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a0d      	ldr	r2, [pc, #52]	; (8006870 <TIM_Base_SetConfig+0x140>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d103      	bne.n	8006848 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	615a      	str	r2, [r3, #20]
}
 800684e:	bf00      	nop
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40000400 	.word	0x40000400
 8006864:	40000800 	.word	0x40000800
 8006868:	40000c00 	.word	0x40000c00
 800686c:	40013400 	.word	0x40013400
 8006870:	40015000 	.word	0x40015000
 8006874:	40014000 	.word	0x40014000
 8006878:	40014400 	.word	0x40014400
 800687c:	40014800 	.word	0x40014800

08006880 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ae:	f023 0307 	bic.w	r3, r3, #7
 80068b2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b70      	cmp	r3, #112	; 0x70
 80068cc:	d034      	beq.n	8006938 <TIM_SlaveTimer_SetConfig+0xb8>
 80068ce:	2b70      	cmp	r3, #112	; 0x70
 80068d0:	d811      	bhi.n	80068f6 <TIM_SlaveTimer_SetConfig+0x76>
 80068d2:	2b30      	cmp	r3, #48	; 0x30
 80068d4:	d07d      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
 80068d6:	2b30      	cmp	r3, #48	; 0x30
 80068d8:	d806      	bhi.n	80068e8 <TIM_SlaveTimer_SetConfig+0x68>
 80068da:	2b10      	cmp	r3, #16
 80068dc:	d079      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d077      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d075      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 80068e6:	e075      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80068e8:	2b50      	cmp	r3, #80	; 0x50
 80068ea:	d05e      	beq.n	80069aa <TIM_SlaveTimer_SetConfig+0x12a>
 80068ec:	2b60      	cmp	r3, #96	; 0x60
 80068ee:	d066      	beq.n	80069be <TIM_SlaveTimer_SetConfig+0x13e>
 80068f0:	2b40      	cmp	r3, #64	; 0x40
 80068f2:	d02c      	beq.n	800694e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 80068f4:	e06e      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80068f6:	4a3a      	ldr	r2, [pc, #232]	; (80069e0 <TIM_SlaveTimer_SetConfig+0x160>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d06a      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
 80068fc:	4a38      	ldr	r2, [pc, #224]	; (80069e0 <TIM_SlaveTimer_SetConfig+0x160>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d809      	bhi.n	8006916 <TIM_SlaveTimer_SetConfig+0x96>
 8006902:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006906:	d064      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
 8006908:	4a36      	ldr	r2, [pc, #216]	; (80069e4 <TIM_SlaveTimer_SetConfig+0x164>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d061      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
 800690e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006912:	d05e      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006914:	e05e      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006916:	4a34      	ldr	r2, [pc, #208]	; (80069e8 <TIM_SlaveTimer_SetConfig+0x168>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d05a      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
 800691c:	4a32      	ldr	r2, [pc, #200]	; (80069e8 <TIM_SlaveTimer_SetConfig+0x168>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d803      	bhi.n	800692a <TIM_SlaveTimer_SetConfig+0xaa>
 8006922:	4a32      	ldr	r2, [pc, #200]	; (80069ec <TIM_SlaveTimer_SetConfig+0x16c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d054      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006928:	e054      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800692a:	4a31      	ldr	r2, [pc, #196]	; (80069f0 <TIM_SlaveTimer_SetConfig+0x170>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d050      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
 8006930:	4a30      	ldr	r2, [pc, #192]	; (80069f4 <TIM_SlaveTimer_SetConfig+0x174>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d04d      	beq.n	80069d2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006936:	e04d      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68d9      	ldr	r1, [r3, #12]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f000 f8d2 	bl	8006af0 <TIM_ETR_SetConfig>
      break;
 800694c:	e042      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b05      	cmp	r3, #5
 8006954:	d004      	beq.n	8006960 <TIM_SlaveTimer_SetConfig+0xe0>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800695e:	d101      	bne.n	8006964 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e038      	b.n	80069d6 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6a1a      	ldr	r2, [r3, #32]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0201 	bic.w	r2, r2, #1
 800697a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800698a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	621a      	str	r2, [r3, #32]
      break;
 80069a8:	e014      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6899      	ldr	r1, [r3, #8]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	461a      	mov	r2, r3
 80069b8:	f000 f81e 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      break;
 80069bc:	e00a      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	6899      	ldr	r1, [r3, #8]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f000 f843 	bl	8006a56 <TIM_TI2_ConfigInputStage>
      break;
 80069d0:	e000      	b.n	80069d4 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 80069d2:	bf00      	nop
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	00100030 	.word	0x00100030
 80069e4:	00100020 	.word	0x00100020
 80069e8:	00100050 	.word	0x00100050
 80069ec:	00100040 	.word	0x00100040
 80069f0:	00100060 	.word	0x00100060
 80069f4:	00100070 	.word	0x00100070

080069f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f023 030a 	bic.w	r3, r3, #10
 8006a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f023 0210 	bic.w	r2, r3, #16
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	031b      	lsls	r3, r3, #12
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f043 0307 	orr.w	r3, r3, #7
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	021a      	lsls	r2, r3, #8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	609a      	str	r2, [r3, #8]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e074      	b.n	8006c32 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a34      	ldr	r2, [pc, #208]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d009      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a33      	ldr	r2, [pc, #204]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a31      	ldr	r2, [pc, #196]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d108      	bne.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d022      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc8:	d01d      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d018      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a11      	ldr	r2, [pc, #68]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d10c      	bne.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	40015000 	.word	0x40015000
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40000c00 	.word	0x40000c00
 8006c58:	40014000 	.word	0x40014000

08006c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e096      	b.n	8006da6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	041b      	lsls	r3, r3, #16
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2f      	ldr	r2, [pc, #188]	; (8006db4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a2d      	ldr	r2, [pc, #180]	; (8006db8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2c      	ldr	r2, [pc, #176]	; (8006dbc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d106      	bne.n	8006d1e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a24      	ldr	r2, [pc, #144]	; (8006db4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d009      	beq.n	8006d3c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a22      	ldr	r2, [pc, #136]	; (8006db8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a21      	ldr	r2, [pc, #132]	; (8006dbc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d12b      	bne.n	8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	051b      	lsls	r3, r3, #20
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a11      	ldr	r2, [pc, #68]	; (8006db4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d009      	beq.n	8006d86 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a0e      	ldr	r2, [pc, #56]	; (8006dbc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d106      	bne.n	8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	4313      	orrs	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40013400 	.word	0x40013400
 8006dbc:	40015000 	.word	0x40015000

08006dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <LL_EXTI_EnableIT_0_31>:
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006e54:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <LL_EXTI_EnableIT_0_31+0x20>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4904      	ldr	r1, [pc, #16]	; (8006e6c <LL_EXTI_EnableIT_0_31+0x20>)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	600b      	str	r3, [r1, #0]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	40010400 	.word	0x40010400

08006e70 <LL_EXTI_EnableIT_32_63>:
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <LL_EXTI_EnableIT_32_63+0x20>)
 8006e7a:	6a1a      	ldr	r2, [r3, #32]
 8006e7c:	4904      	ldr	r1, [pc, #16]	; (8006e90 <LL_EXTI_EnableIT_32_63+0x20>)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	620b      	str	r3, [r1, #32]
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40010400 	.word	0x40010400

08006e94 <LL_EXTI_DisableIT_0_31>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <LL_EXTI_DisableIT_0_31+0x24>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	4904      	ldr	r1, [pc, #16]	; (8006eb8 <LL_EXTI_DisableIT_0_31+0x24>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	600b      	str	r3, [r1, #0]
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40010400 	.word	0x40010400

08006ebc <LL_EXTI_DisableIT_32_63>:
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006ec4:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <LL_EXTI_DisableIT_32_63+0x24>)
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	4904      	ldr	r1, [pc, #16]	; (8006ee0 <LL_EXTI_DisableIT_32_63+0x24>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	620b      	str	r3, [r1, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40010400 	.word	0x40010400

08006ee4 <LL_EXTI_EnableEvent_0_31>:
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	4904      	ldr	r1, [pc, #16]	; (8006f04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	604b      	str	r3, [r1, #4]
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	40010400 	.word	0x40010400

08006f08 <LL_EXTI_EnableEvent_32_63>:
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006f10:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f14:	4904      	ldr	r1, [pc, #16]	; (8006f28 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	40010400 	.word	0x40010400

08006f2c <LL_EXTI_DisableEvent_0_31>:
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006f34:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	43db      	mvns	r3, r3
 8006f3c:	4904      	ldr	r1, [pc, #16]	; (8006f50 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	604b      	str	r3, [r1, #4]
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40010400 	.word	0x40010400

08006f54 <LL_EXTI_DisableEvent_32_63>:
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	43db      	mvns	r3, r3
 8006f64:	4904      	ldr	r1, [pc, #16]	; (8006f78 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40010400 	.word	0x40010400

08006f7c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	4904      	ldr	r1, [pc, #16]	; (8006f9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	608b      	str	r3, [r1, #8]
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	40010400 	.word	0x40010400

08006fa0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fac:	4904      	ldr	r1, [pc, #16]	; (8006fc0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	40010400 	.word	0x40010400

08006fc4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006fcc:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	4904      	ldr	r1, [pc, #16]	; (8006fe8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	608b      	str	r3, [r1, #8]
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40010400 	.word	0x40010400

08006fec <LL_EXTI_DisableRisingTrig_32_63>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006ff4:	4b06      	ldr	r3, [pc, #24]	; (8007010 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	43db      	mvns	r3, r3
 8006ffc:	4904      	ldr	r1, [pc, #16]	; (8007010 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006ffe:	4013      	ands	r3, r2
 8007000:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40010400 	.word	0x40010400

08007014 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	4904      	ldr	r1, [pc, #16]	; (8007034 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4313      	orrs	r3, r2
 8007026:	60cb      	str	r3, [r1, #12]
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	40010400 	.word	0x40010400

08007038 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007044:	4904      	ldr	r1, [pc, #16]	; (8007058 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4313      	orrs	r3, r2
 800704a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	40010400 	.word	0x40010400

0800705c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007064:	4b06      	ldr	r3, [pc, #24]	; (8007080 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	43db      	mvns	r3, r3
 800706c:	4904      	ldr	r1, [pc, #16]	; (8007080 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800706e:	4013      	ands	r3, r2
 8007070:	60cb      	str	r3, [r1, #12]
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40010400 	.word	0x40010400

08007084 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	43db      	mvns	r3, r3
 8007094:	4904      	ldr	r1, [pc, #16]	; (80070a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007096:	4013      	ands	r3, r2
 8007098:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40010400 	.word	0x40010400

080070ac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	7a1b      	ldrb	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80c8 	beq.w	8007252 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d05d      	beq.n	8007186 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7a5b      	ldrb	r3, [r3, #9]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d00e      	beq.n	80070f0 <LL_EXTI_Init+0x44>
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d017      	beq.n	8007106 <LL_EXTI_Init+0x5a>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d120      	bne.n	800711c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ff24 	bl	8006f2c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff feaf 	bl	8006e4c <LL_EXTI_EnableIT_0_31>
          break;
 80070ee:	e018      	b.n	8007122 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fecd 	bl	8006e94 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff fef0 	bl	8006ee4 <LL_EXTI_EnableEvent_0_31>
          break;
 8007104:	e00d      	b.n	8007122 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff fe9e 	bl	8006e4c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff fee5 	bl	8006ee4 <LL_EXTI_EnableEvent_0_31>
          break;
 800711a:	e002      	b.n	8007122 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800711c:	2301      	movs	r3, #1
 800711e:	60fb      	str	r3, [r7, #12]
          break;
 8007120:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7a9b      	ldrb	r3, [r3, #10]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d02d      	beq.n	8007186 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7a9b      	ldrb	r3, [r3, #10]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d00e      	beq.n	8007150 <LL_EXTI_Init+0xa4>
 8007132:	2b03      	cmp	r3, #3
 8007134:	d017      	beq.n	8007166 <LL_EXTI_Init+0xba>
 8007136:	2b01      	cmp	r3, #1
 8007138:	d120      	bne.n	800717c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff ff8c 	bl	800705c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff ff17 	bl	8006f7c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800714e:	e01b      	b.n	8007188 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff ff35 	bl	8006fc4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff ff58 	bl	8007014 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007164:	e010      	b.n	8007188 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff ff06 	bl	8006f7c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff ff4d 	bl	8007014 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800717a:	e005      	b.n	8007188 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f043 0302 	orr.w	r3, r3, #2
 8007182:	60fb      	str	r3, [r7, #12]
            break;
 8007184:	e000      	b.n	8007188 <LL_EXTI_Init+0xdc>
        }
      }
 8007186:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d075      	beq.n	800727c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	7a5b      	ldrb	r3, [r3, #9]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d00e      	beq.n	80071b6 <LL_EXTI_Init+0x10a>
 8007198:	2b02      	cmp	r3, #2
 800719a:	d017      	beq.n	80071cc <LL_EXTI_Init+0x120>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d120      	bne.n	80071e2 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff fed5 	bl	8006f54 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff fe5e 	bl	8006e70 <LL_EXTI_EnableIT_32_63>
          break;
 80071b4:	e01a      	b.n	80071ec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fe7e 	bl	8006ebc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff fe9f 	bl	8006f08 <LL_EXTI_EnableEvent_32_63>
          break;
 80071ca:	e00f      	b.n	80071ec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff fe4d 	bl	8006e70 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fe94 	bl	8006f08 <LL_EXTI_EnableEvent_32_63>
          break;
 80071e0:	e004      	b.n	80071ec <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f043 0304 	orr.w	r3, r3, #4
 80071e8:	60fb      	str	r3, [r7, #12]
          break;
 80071ea:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	7a9b      	ldrb	r3, [r3, #10]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d043      	beq.n	800727c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7a9b      	ldrb	r3, [r3, #10]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d00e      	beq.n	800721a <LL_EXTI_Init+0x16e>
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d017      	beq.n	8007230 <LL_EXTI_Init+0x184>
 8007200:	2b01      	cmp	r3, #1
 8007202:	d120      	bne.n	8007246 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff ff3b 	bl	8007084 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff fec4 	bl	8006fa0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007218:	e031      	b.n	800727e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff fee4 	bl	8006fec <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff ff05 	bl	8007038 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800722e:	e026      	b.n	800727e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff feb3 	bl	8006fa0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fefa 	bl	8007038 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007244:	e01b      	b.n	800727e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f043 0305 	orr.w	r3, r3, #5
 800724c:	60fb      	str	r3, [r7, #12]
            break;
 800724e:	bf00      	nop
 8007250:	e015      	b.n	800727e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fe1c 	bl	8006e94 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff fe63 	bl	8006f2c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fe26 	bl	8006ebc <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff fe6d 	bl	8006f54 <LL_EXTI_DisableEvent_32_63>
 800727a:	e000      	b.n	800727e <LL_EXTI_Init+0x1d2>
      }
 800727c:	bf00      	nop
  }

  return status;
 800727e:	68fb      	ldr	r3, [r7, #12]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <LL_GPIO_SetPinMode>:
{
 8007288:	b480      	push	{r7}
 800728a:	b089      	sub	sp, #36	; 0x24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	fa93 f3a3 	rbit	r3, r3
 80072a2:	613b      	str	r3, [r7, #16]
  return result;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	fab3 f383 	clz	r3, r3
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	2103      	movs	r1, #3
 80072b0:	fa01 f303 	lsl.w	r3, r1, r3
 80072b4:	43db      	mvns	r3, r3
 80072b6:	401a      	ands	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	fa93 f3a3 	rbit	r3, r3
 80072c2:	61bb      	str	r3, [r7, #24]
  return result;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	fab3 f383 	clz	r3, r3
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	fa01 f303 	lsl.w	r3, r1, r3
 80072d4:	431a      	orrs	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	3724      	adds	r7, #36	; 0x24
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <LL_GPIO_SetPinOutputType>:
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	43db      	mvns	r3, r3
 80072fa:	401a      	ands	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	fb01 f303 	mul.w	r3, r1, r3
 8007304:	431a      	orrs	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	605a      	str	r2, [r3, #4]
}
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <LL_GPIO_SetPinSpeed>:
{
 8007316:	b480      	push	{r7}
 8007318:	b089      	sub	sp, #36	; 0x24
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	fa93 f3a3 	rbit	r3, r3
 8007330:	613b      	str	r3, [r7, #16]
  return result;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	fab3 f383 	clz	r3, r3
 8007338:	b2db      	uxtb	r3, r3
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	2103      	movs	r1, #3
 800733e:	fa01 f303 	lsl.w	r3, r1, r3
 8007342:	43db      	mvns	r3, r3
 8007344:	401a      	ands	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	fa93 f3a3 	rbit	r3, r3
 8007350:	61bb      	str	r3, [r7, #24]
  return result;
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	fab3 f383 	clz	r3, r3
 8007358:	b2db      	uxtb	r3, r3
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	fa01 f303 	lsl.w	r3, r1, r3
 8007362:	431a      	orrs	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	609a      	str	r2, [r3, #8]
}
 8007368:	bf00      	nop
 800736a:	3724      	adds	r7, #36	; 0x24
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <LL_GPIO_SetPinPull>:
{
 8007374:	b480      	push	{r7}
 8007376:	b089      	sub	sp, #36	; 0x24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	fa93 f3a3 	rbit	r3, r3
 800738e:	613b      	str	r3, [r7, #16]
  return result;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	fab3 f383 	clz	r3, r3
 8007396:	b2db      	uxtb	r3, r3
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	2103      	movs	r1, #3
 800739c:	fa01 f303 	lsl.w	r3, r1, r3
 80073a0:	43db      	mvns	r3, r3
 80073a2:	401a      	ands	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	fa93 f3a3 	rbit	r3, r3
 80073ae:	61bb      	str	r3, [r7, #24]
  return result;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	fab3 f383 	clz	r3, r3
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	fa01 f303 	lsl.w	r3, r1, r3
 80073c0:	431a      	orrs	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	60da      	str	r2, [r3, #12]
}
 80073c6:	bf00      	nop
 80073c8:	3724      	adds	r7, #36	; 0x24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <LL_GPIO_SetAFPin_0_7>:
{
 80073d2:	b480      	push	{r7}
 80073d4:	b089      	sub	sp, #36	; 0x24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1a      	ldr	r2, [r3, #32]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	fa93 f3a3 	rbit	r3, r3
 80073ec:	613b      	str	r3, [r7, #16]
  return result;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	fab3 f383 	clz	r3, r3
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	210f      	movs	r1, #15
 80073fa:	fa01 f303 	lsl.w	r3, r1, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	401a      	ands	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	fa93 f3a3 	rbit	r3, r3
 800740c:	61bb      	str	r3, [r7, #24]
  return result;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	fab3 f383 	clz	r3, r3
 8007414:	b2db      	uxtb	r3, r3
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	fa01 f303 	lsl.w	r3, r1, r3
 800741e:	431a      	orrs	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	621a      	str	r2, [r3, #32]
}
 8007424:	bf00      	nop
 8007426:	3724      	adds	r7, #36	; 0x24
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <LL_GPIO_SetAFPin_8_15>:
{
 8007430:	b480      	push	{r7}
 8007432:	b089      	sub	sp, #36	; 0x24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	0a1b      	lsrs	r3, r3, #8
 8007444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	fa93 f3a3 	rbit	r3, r3
 800744c:	613b      	str	r3, [r7, #16]
  return result;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	fab3 f383 	clz	r3, r3
 8007454:	b2db      	uxtb	r3, r3
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	210f      	movs	r1, #15
 800745a:	fa01 f303 	lsl.w	r3, r1, r3
 800745e:	43db      	mvns	r3, r3
 8007460:	401a      	ands	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	0a1b      	lsrs	r3, r3, #8
 8007466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	fa93 f3a3 	rbit	r3, r3
 800746e:	61bb      	str	r3, [r7, #24]
  return result;
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	fab3 f383 	clz	r3, r3
 8007476:	b2db      	uxtb	r3, r3
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	6879      	ldr	r1, [r7, #4]
 800747c:	fa01 f303 	lsl.w	r3, r1, r3
 8007480:	431a      	orrs	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007486:	bf00      	nop
 8007488:	3724      	adds	r7, #36	; 0x24
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	fa93 f3a3 	rbit	r3, r3
 80074a8:	60bb      	str	r3, [r7, #8]
  return result;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	fab3 f383 	clz	r3, r3
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80074b4:	e040      	b.n	8007538 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	2101      	movs	r1, #1
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	fa01 f303 	lsl.w	r3, r1, r3
 80074c2:	4013      	ands	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d032      	beq.n	8007532 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	461a      	mov	r2, r3
 80074d2:	6939      	ldr	r1, [r7, #16]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff fed7 	bl	8007288 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d003      	beq.n	80074ea <LL_GPIO_Init+0x58>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d106      	bne.n	80074f8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6939      	ldr	r1, [r7, #16]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff ff0f 	bl	8007316 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6939      	ldr	r1, [r7, #16]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff ff37 	bl	8007374 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2b02      	cmp	r3, #2
 800750c:	d111      	bne.n	8007532 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2bff      	cmp	r3, #255	; 0xff
 8007512:	d807      	bhi.n	8007524 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	461a      	mov	r2, r3
 800751a:	6939      	ldr	r1, [r7, #16]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff ff58 	bl	80073d2 <LL_GPIO_SetAFPin_0_7>
 8007522:	e006      	b.n	8007532 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	461a      	mov	r2, r3
 800752a:	6939      	ldr	r1, [r7, #16]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff ff7f 	bl	8007430 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	3301      	adds	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	fa22 f303 	lsr.w	r3, r2, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1b7      	bne.n	80074b6 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d003      	beq.n	8007556 <LL_GPIO_Init+0xc4>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b02      	cmp	r3, #2
 8007554:	d107      	bne.n	8007566 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6819      	ldr	r1, [r3, #0]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	461a      	mov	r2, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff fec0 	bl	80072e6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32g4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8007574:	2200      	movs	r2, #0
 8007576:	2180      	movs	r1, #128	; 0x80
 8007578:	4802      	ldr	r0, [pc, #8]	; (8007584 <ILI9341_Select+0x14>)
 800757a:	f7fd f96f 	bl	800485c <HAL_GPIO_WritePin>
}
 800757e:	bf00      	nop
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	48000400 	.word	0x48000400

08007588 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 800758c:	2201      	movs	r2, #1
 800758e:	2180      	movs	r1, #128	; 0x80
 8007590:	4802      	ldr	r0, [pc, #8]	; (800759c <ILI9341_Unselect+0x14>)
 8007592:	f7fd f963 	bl	800485c <HAL_GPIO_WritePin>
}
 8007596:	bf00      	nop
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	48000400 	.word	0x48000400

080075a0 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80075a4:	2200      	movs	r2, #0
 80075a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075aa:	4807      	ldr	r0, [pc, #28]	; (80075c8 <ILI9341_Reset+0x28>)
 80075ac:	f7fd f956 	bl	800485c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80075b0:	2005      	movs	r0, #5
 80075b2:	f7fa fd23 	bl	8001ffc <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80075b6:	2201      	movs	r2, #1
 80075b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075bc:	4802      	ldr	r0, [pc, #8]	; (80075c8 <ILI9341_Reset+0x28>)
 80075be:	f7fd f94d 	bl	800485c <HAL_GPIO_WritePin>
}
 80075c2:	bf00      	nop
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	48000400 	.word	0x48000400

080075cc <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80075d6:	2200      	movs	r2, #0
 80075d8:	2140      	movs	r1, #64	; 0x40
 80075da:	4807      	ldr	r0, [pc, #28]	; (80075f8 <ILI9341_WriteCommand+0x2c>)
 80075dc:	f7fd f93e 	bl	800485c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80075e0:	1df9      	adds	r1, r7, #7
 80075e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075e6:	2201      	movs	r2, #1
 80075e8:	4804      	ldr	r0, [pc, #16]	; (80075fc <ILI9341_WriteCommand+0x30>)
 80075ea:	f7fe f9d9 	bl	80059a0 <HAL_SPI_Transmit>
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	48000400 	.word	0x48000400
 80075fc:	2000065c 	.word	0x2000065c

08007600 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800760a:	2201      	movs	r2, #1
 800760c:	2140      	movs	r1, #64	; 0x40
 800760e:	4810      	ldr	r0, [pc, #64]	; (8007650 <ILI9341_WriteData+0x50>)
 8007610:	f7fd f924 	bl	800485c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8007614:	e015      	b.n	8007642 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800761c:	bf28      	it	cs
 800761e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8007622:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8007624:	89fa      	ldrh	r2, [r7, #14]
 8007626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4809      	ldr	r0, [pc, #36]	; (8007654 <ILI9341_WriteData+0x54>)
 800762e:	f7fe f9b7 	bl	80059a0 <HAL_SPI_Transmit>
        buff += chunk_size;
 8007632:	89fb      	ldrh	r3, [r7, #14]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	4413      	add	r3, r2
 8007638:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800763a:	89fb      	ldrh	r3, [r7, #14]
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <ILI9341_WriteData+0x16>
    }
}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	48000400 	.word	0x48000400
 8007654:	2000065c 	.word	0x2000065c

08007658 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8007658:	b590      	push	{r4, r7, lr}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	4611      	mov	r1, r2
 8007664:	461a      	mov	r2, r3
 8007666:	4623      	mov	r3, r4
 8007668:	80fb      	strh	r3, [r7, #6]
 800766a:	4603      	mov	r3, r0
 800766c:	80bb      	strh	r3, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	807b      	strh	r3, [r7, #2]
 8007672:	4613      	mov	r3, r2
 8007674:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8007676:	202a      	movs	r0, #42	; 0x2a
 8007678:	f7ff ffa8 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 800767c:	88fb      	ldrh	r3, [r7, #6]
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	b29b      	uxth	r3, r3
 8007682:	b2db      	uxtb	r3, r3
 8007684:	733b      	strb	r3, [r7, #12]
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	b2db      	uxtb	r3, r3
 800768a:	737b      	strb	r3, [r7, #13]
 800768c:	887b      	ldrh	r3, [r7, #2]
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	b29b      	uxth	r3, r3
 8007692:	b2db      	uxtb	r3, r3
 8007694:	73bb      	strb	r3, [r7, #14]
 8007696:	887b      	ldrh	r3, [r7, #2]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800769c:	f107 030c 	add.w	r3, r7, #12
 80076a0:	2104      	movs	r1, #4
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff ffac 	bl	8007600 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80076a8:	202b      	movs	r0, #43	; 0x2b
 80076aa:	f7ff ff8f 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80076ae:	88bb      	ldrh	r3, [r7, #4]
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	723b      	strb	r3, [r7, #8]
 80076b8:	88bb      	ldrh	r3, [r7, #4]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	727b      	strb	r3, [r7, #9]
 80076be:	883b      	ldrh	r3, [r7, #0]
 80076c0:	0a1b      	lsrs	r3, r3, #8
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	72bb      	strb	r3, [r7, #10]
 80076c8:	883b      	ldrh	r3, [r7, #0]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80076ce:	f107 0308 	add.w	r3, r7, #8
 80076d2:	2104      	movs	r1, #4
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff ff93 	bl	8007600 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80076da:	202c      	movs	r0, #44	; 0x2c
 80076dc:	f7ff ff76 	bl	80075cc <ILI9341_WriteCommand>
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd90      	pop	{r4, r7, pc}

080076e8 <ILI9341_2_Init>:

void ILI9341_2_Init() {
 80076e8:	b590      	push	{r4, r7, lr}
 80076ea:	b09b      	sub	sp, #108	; 0x6c
 80076ec:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80076ee:	f7ff ff3f 	bl	8007570 <ILI9341_Select>
    ILI9341_Reset();
 80076f2:	f7ff ff55 	bl	80075a0 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80076f6:	2001      	movs	r0, #1
 80076f8:	f7ff ff68 	bl	80075cc <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80076fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007700:	f7fa fc7c 	bl	8001ffc <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8007704:	20cb      	movs	r0, #203	; 0xcb
 8007706:	f7ff ff61 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800770a:	4a8b      	ldr	r2, [pc, #556]	; (8007938 <ILI9341_2_Init+0x250>)
 800770c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007714:	6018      	str	r0, [r3, #0]
 8007716:	3304      	adds	r3, #4
 8007718:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800771a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800771e:	2105      	movs	r1, #5
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff ff6d 	bl	8007600 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8007726:	20cf      	movs	r0, #207	; 0xcf
 8007728:	f7ff ff50 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800772c:	4a83      	ldr	r2, [pc, #524]	; (800793c <ILI9341_2_Init+0x254>)
 800772e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	4611      	mov	r1, r2
 8007736:	8019      	strh	r1, [r3, #0]
 8007738:	3302      	adds	r3, #2
 800773a:	0c12      	lsrs	r2, r2, #16
 800773c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800773e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007742:	2103      	movs	r1, #3
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff ff5b 	bl	8007600 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800774a:	20e8      	movs	r0, #232	; 0xe8
 800774c:	f7ff ff3e 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8007750:	4a7b      	ldr	r2, [pc, #492]	; (8007940 <ILI9341_2_Init+0x258>)
 8007752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	4611      	mov	r1, r2
 800775a:	8019      	strh	r1, [r3, #0]
 800775c:	3302      	adds	r3, #2
 800775e:	0c12      	lsrs	r2, r2, #16
 8007760:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8007762:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007766:	2103      	movs	r1, #3
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff ff49 	bl	8007600 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800776e:	20ea      	movs	r0, #234	; 0xea
 8007770:	f7ff ff2c 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8007774:	2300      	movs	r3, #0
 8007776:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800777a:	2300      	movs	r3, #0
 800777c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        ILI9341_WriteData(data, sizeof(data));
 8007780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007784:	2102      	movs	r1, #2
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff ff3a 	bl	8007600 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800778c:	20ed      	movs	r0, #237	; 0xed
 800778e:	f7ff ff1d 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8007792:	4b6c      	ldr	r3, [pc, #432]	; (8007944 <ILI9341_2_Init+0x25c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8007798:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800779c:	2104      	movs	r1, #4
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff ff2e 	bl	8007600 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80077a4:	20f7      	movs	r0, #247	; 0xf7
 80077a6:	f7ff ff11 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80077aa:	2320      	movs	r3, #32
 80077ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80077b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80077b4:	2101      	movs	r1, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff ff22 	bl	8007600 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80077bc:	20c0      	movs	r0, #192	; 0xc0
 80077be:	f7ff ff05 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80077c2:	2323      	movs	r3, #35	; 0x23
 80077c4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 80077c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80077cc:	2101      	movs	r1, #1
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff ff16 	bl	8007600 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80077d4:	20c1      	movs	r0, #193	; 0xc1
 80077d6:	f7ff fef9 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80077da:	2310      	movs	r3, #16
 80077dc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 80077e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80077e4:	2101      	movs	r1, #1
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff ff0a 	bl	8007600 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80077ec:	20c5      	movs	r0, #197	; 0xc5
 80077ee:	f7ff feed 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80077f2:	4b55      	ldr	r3, [pc, #340]	; (8007948 <ILI9341_2_Init+0x260>)
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 80077fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077fe:	2102      	movs	r1, #2
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff fefd 	bl	8007600 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8007806:	20c7      	movs	r0, #199	; 0xc7
 8007808:	f7ff fee0 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 800780c:	2386      	movs	r3, #134	; 0x86
 800780e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8007812:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007816:	2101      	movs	r1, #1
 8007818:	4618      	mov	r0, r3
 800781a:	f7ff fef1 	bl	8007600 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800781e:	2036      	movs	r0, #54	; 0x36
 8007820:	f7ff fed4 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8007824:	2348      	movs	r3, #72	; 0x48
 8007826:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 800782a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800782e:	2101      	movs	r1, #1
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fee5 	bl	8007600 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8007836:	203a      	movs	r0, #58	; 0x3a
 8007838:	f7ff fec8 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 800783c:	2355      	movs	r3, #85	; 0x55
 800783e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 8007842:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007846:	2101      	movs	r1, #1
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff fed9 	bl	8007600 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800784e:	20b1      	movs	r0, #177	; 0xb1
 8007850:	f7ff febc 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800785a:	2318      	movs	r3, #24
 800785c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        ILI9341_WriteData(data, sizeof(data));
 8007860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007864:	2102      	movs	r1, #2
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff feca 	bl	8007600 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800786c:	20b6      	movs	r0, #182	; 0xb6
 800786e:	f7ff fead 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8007872:	4a36      	ldr	r2, [pc, #216]	; (800794c <ILI9341_2_Init+0x264>)
 8007874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007878:	6812      	ldr	r2, [r2, #0]
 800787a:	4611      	mov	r1, r2
 800787c:	8019      	strh	r1, [r3, #0]
 800787e:	3302      	adds	r3, #2
 8007880:	0c12      	lsrs	r2, r2, #16
 8007882:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8007884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007888:	2103      	movs	r1, #3
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff feb8 	bl	8007600 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8007890:	20f2      	movs	r0, #242	; 0xf2
 8007892:	f7ff fe9b 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8007896:	2300      	movs	r3, #0
 8007898:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800789c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff feac 	bl	8007600 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80078a8:	2026      	movs	r0, #38	; 0x26
 80078aa:	f7ff fe8f 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80078b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b8:	2101      	movs	r1, #1
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff fea0 	bl	8007600 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80078c0:	20e0      	movs	r0, #224	; 0xe0
 80078c2:	f7ff fe83 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80078c6:	4b22      	ldr	r3, [pc, #136]	; (8007950 <ILI9341_2_Init+0x268>)
 80078c8:	f107 0414 	add.w	r4, r7, #20
 80078cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078ce:	c407      	stmia	r4!, {r0, r1, r2}
 80078d0:	8023      	strh	r3, [r4, #0]
 80078d2:	3402      	adds	r4, #2
 80078d4:	0c1b      	lsrs	r3, r3, #16
 80078d6:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80078d8:	f107 0314 	add.w	r3, r7, #20
 80078dc:	210f      	movs	r1, #15
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fe8e 	bl	8007600 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80078e4:	20e1      	movs	r0, #225	; 0xe1
 80078e6:	f7ff fe71 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80078ea:	4b1a      	ldr	r3, [pc, #104]	; (8007954 <ILI9341_2_Init+0x26c>)
 80078ec:	1d3c      	adds	r4, r7, #4
 80078ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078f0:	c407      	stmia	r4!, {r0, r1, r2}
 80078f2:	8023      	strh	r3, [r4, #0]
 80078f4:	3402      	adds	r4, #2
 80078f6:	0c1b      	lsrs	r3, r3, #16
 80078f8:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80078fa:	1d3b      	adds	r3, r7, #4
 80078fc:	210f      	movs	r1, #15
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fe7e 	bl	8007600 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8007904:	2011      	movs	r0, #17
 8007906:	f7ff fe61 	bl	80075cc <ILI9341_WriteCommand>
    HAL_Delay(120);
 800790a:	2078      	movs	r0, #120	; 0x78
 800790c:	f7fa fb76 	bl	8001ffc <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8007910:	2029      	movs	r0, #41	; 0x29
 8007912:	f7ff fe5b 	bl	80075cc <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8007916:	2036      	movs	r0, #54	; 0x36
 8007918:	f7ff fe58 	bl	80075cc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800791c:	23e8      	movs	r3, #232	; 0xe8
 800791e:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8007920:	463b      	mov	r3, r7
 8007922:	2101      	movs	r1, #1
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fe6b 	bl	8007600 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800792a:	f7ff fe2d 	bl	8007588 <ILI9341_Unselect>
}
 800792e:	bf00      	nop
 8007930:	376c      	adds	r7, #108	; 0x6c
 8007932:	46bd      	mov	sp, r7
 8007934:	bd90      	pop	{r4, r7, pc}
 8007936:	bf00      	nop
 8007938:	08008b88 	.word	0x08008b88
 800793c:	08008b90 	.word	0x08008b90
 8007940:	08008b94 	.word	0x08008b94
 8007944:	08008b98 	.word	0x08008b98
 8007948:	08008b9c 	.word	0x08008b9c
 800794c:	08008ba0 	.word	0x08008ba0
 8007950:	08008ba4 	.word	0x08008ba4
 8007954:	08008bb4 	.word	0x08008bb4

08007958 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8007958:	b082      	sub	sp, #8
 800795a:	b590      	push	{r4, r7, lr}
 800795c:	b089      	sub	sp, #36	; 0x24
 800795e:	af00      	add	r7, sp, #0
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
 8007962:	4603      	mov	r3, r0
 8007964:	80fb      	strh	r3, [r7, #6]
 8007966:	460b      	mov	r3, r1
 8007968:	80bb      	strh	r3, [r7, #4]
 800796a:	4613      	mov	r3, r2
 800796c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800796e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007972:	b29a      	uxth	r2, r3
 8007974:	88fb      	ldrh	r3, [r7, #6]
 8007976:	4413      	add	r3, r2
 8007978:	b29b      	uxth	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	b29c      	uxth	r4, r3
 800797e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007982:	b29a      	uxth	r2, r3
 8007984:	88bb      	ldrh	r3, [r7, #4]
 8007986:	4413      	add	r3, r2
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	88b9      	ldrh	r1, [r7, #4]
 8007990:	88f8      	ldrh	r0, [r7, #6]
 8007992:	4622      	mov	r2, r4
 8007994:	f7ff fe60 	bl	8007658 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8007998:	2300      	movs	r3, #0
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	e043      	b.n	8007a26 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 800799e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	3b20      	subs	r3, #32
 80079a4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80079a8:	fb01 f303 	mul.w	r3, r1, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	440b      	add	r3, r1
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	4413      	add	r3, r2
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80079ba:	2300      	movs	r3, #0
 80079bc:	61bb      	str	r3, [r7, #24]
 80079be:	e029      	b.n	8007a14 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00e      	beq.n	80079ee <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80079d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	743b      	strb	r3, [r7, #16]
 80079da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80079e0:	f107 0310 	add.w	r3, r7, #16
 80079e4:	2102      	movs	r1, #2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fe0a 	bl	8007600 <ILI9341_WriteData>
 80079ec:	e00f      	b.n	8007a0e <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80079ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	733b      	strb	r3, [r7, #12]
 80079fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8007a02:	f107 030c 	add.w	r3, r7, #12
 8007a06:	2102      	movs	r1, #2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff fdf9 	bl	8007600 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61bb      	str	r3, [r7, #24]
 8007a14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007a18:	461a      	mov	r2, r3
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d3cf      	bcc.n	80079c0 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d3b5      	bcc.n	800799e <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8007a32:	bf00      	nop
 8007a34:	3724      	adds	r7, #36	; 0x24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007a3c:	b002      	add	sp, #8
 8007a3e:	4770      	bx	lr

08007a40 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8007a40:	b082      	sub	sp, #8
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b086      	sub	sp, #24
 8007a46:	af04      	add	r7, sp, #16
 8007a48:	603a      	str	r2, [r7, #0]
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	80fb      	strh	r3, [r7, #6]
 8007a50:	460b      	mov	r3, r1
 8007a52:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8007a54:	f7ff fd8c 	bl	8007570 <ILI9341_Select>

    while(*str) {
 8007a58:	e02e      	b.n	8007ab8 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8007a5a:	88fb      	ldrh	r3, [r7, #6]
 8007a5c:	7d3a      	ldrb	r2, [r7, #20]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007a64:	db13      	blt.n	8007a8e <ILI9341_WriteString+0x4e>
            x = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8007a6a:	7d7b      	ldrb	r3, [r7, #21]
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	88bb      	ldrh	r3, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8007a74:	88bb      	ldrh	r3, [r7, #4]
 8007a76:	7d7a      	ldrb	r2, [r7, #21]
 8007a78:	4413      	add	r3, r2
 8007a7a:	2bef      	cmp	r3, #239	; 0xef
 8007a7c:	dc21      	bgt.n	8007ac2 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d103      	bne.n	8007a8e <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	603b      	str	r3, [r7, #0]
                continue;
 8007a8c:	e014      	b.n	8007ab8 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	88b9      	ldrh	r1, [r7, #4]
 8007a94:	88f8      	ldrh	r0, [r7, #6]
 8007a96:	8c3b      	ldrh	r3, [r7, #32]
 8007a98:	9302      	str	r3, [sp, #8]
 8007a9a:	8bbb      	ldrh	r3, [r7, #28]
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f7ff ff58 	bl	8007958 <ILI9341_WriteChar>
        x += font.width;
 8007aa8:	7d3b      	ldrb	r3, [r7, #20]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	4413      	add	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
        str++;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1cc      	bne.n	8007a5a <ILI9341_WriteString+0x1a>
 8007ac0:	e000      	b.n	8007ac4 <ILI9341_WriteString+0x84>
                break;
 8007ac2:	bf00      	nop
    }

    ILI9341_Unselect();
 8007ac4:	f7ff fd60 	bl	8007588 <ILI9341_Unselect>
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ad2:	b002      	add	sp, #8
 8007ad4:	4770      	bx	lr
	...

08007ad8 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4623      	mov	r3, r4
 8007ae8:	80fb      	strh	r3, [r7, #6]
 8007aea:	4603      	mov	r3, r0
 8007aec:	80bb      	strh	r3, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	807b      	strh	r3, [r7, #2]
 8007af2:	4613      	mov	r3, r2
 8007af4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007afc:	d254      	bcs.n	8007ba8 <ILI9341_FillRectangle+0xd0>
 8007afe:	88bb      	ldrh	r3, [r7, #4]
 8007b00:	2bef      	cmp	r3, #239	; 0xef
 8007b02:	d851      	bhi.n	8007ba8 <ILI9341_FillRectangle+0xd0>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8007b04:	88fa      	ldrh	r2, [r7, #6]
 8007b06:	887b      	ldrh	r3, [r7, #2]
 8007b08:	4413      	add	r3, r2
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007b10:	db03      	blt.n	8007b1a <ILI9341_FillRectangle+0x42>
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8007b18:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8007b1a:	88ba      	ldrh	r2, [r7, #4]
 8007b1c:	883b      	ldrh	r3, [r7, #0]
 8007b1e:	4413      	add	r3, r2
 8007b20:	3b01      	subs	r3, #1
 8007b22:	2bef      	cmp	r3, #239	; 0xef
 8007b24:	dd03      	ble.n	8007b2e <ILI9341_FillRectangle+0x56>
 8007b26:	88bb      	ldrh	r3, [r7, #4]
 8007b28:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8007b2c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8007b2e:	f7ff fd1f 	bl	8007570 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8007b32:	88fa      	ldrh	r2, [r7, #6]
 8007b34:	887b      	ldrh	r3, [r7, #2]
 8007b36:	4413      	add	r3, r2
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29c      	uxth	r4, r3
 8007b3e:	88ba      	ldrh	r2, [r7, #4]
 8007b40:	883b      	ldrh	r3, [r7, #0]
 8007b42:	4413      	add	r3, r2
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	88b9      	ldrh	r1, [r7, #4]
 8007b4c:	88f8      	ldrh	r0, [r7, #6]
 8007b4e:	4622      	mov	r2, r4
 8007b50:	f7ff fd82 	bl	8007658 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8007b54:	8c3b      	ldrh	r3, [r7, #32]
 8007b56:	0a1b      	lsrs	r3, r3, #8
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	733b      	strb	r3, [r7, #12]
 8007b5e:	8c3b      	ldrh	r3, [r7, #32]
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8007b64:	2201      	movs	r2, #1
 8007b66:	2140      	movs	r1, #64	; 0x40
 8007b68:	4811      	ldr	r0, [pc, #68]	; (8007bb0 <ILI9341_FillRectangle+0xd8>)
 8007b6a:	f7fc fe77 	bl	800485c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8007b6e:	883b      	ldrh	r3, [r7, #0]
 8007b70:	80bb      	strh	r3, [r7, #4]
 8007b72:	e013      	b.n	8007b9c <ILI9341_FillRectangle+0xc4>
        for(x = w; x > 0; x--) {
 8007b74:	887b      	ldrh	r3, [r7, #2]
 8007b76:	80fb      	strh	r3, [r7, #6]
 8007b78:	e00a      	b.n	8007b90 <ILI9341_FillRectangle+0xb8>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8007b7a:	f107 010c 	add.w	r1, r7, #12
 8007b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b82:	2202      	movs	r2, #2
 8007b84:	480b      	ldr	r0, [pc, #44]	; (8007bb4 <ILI9341_FillRectangle+0xdc>)
 8007b86:	f7fd ff0b 	bl	80059a0 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8007b8a:	88fb      	ldrh	r3, [r7, #6]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	80fb      	strh	r3, [r7, #6]
 8007b90:	88fb      	ldrh	r3, [r7, #6]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1f1      	bne.n	8007b7a <ILI9341_FillRectangle+0xa2>
    for(y = h; y > 0; y--) {
 8007b96:	88bb      	ldrh	r3, [r7, #4]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	80bb      	strh	r3, [r7, #4]
 8007b9c:	88bb      	ldrh	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e8      	bne.n	8007b74 <ILI9341_FillRectangle+0x9c>
        }
    }

    ILI9341_Unselect();
 8007ba2:	f7ff fcf1 	bl	8007588 <ILI9341_Unselect>
 8007ba6:	e000      	b.n	8007baa <ILI9341_FillRectangle+0xd2>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8007ba8:	bf00      	nop
}
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd90      	pop	{r4, r7, pc}
 8007bb0:	48000400 	.word	0x48000400
 8007bb4:	2000065c 	.word	0x2000065c

08007bb8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	23f0      	movs	r3, #240	; 0xf0
 8007bc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007bcc:	2100      	movs	r1, #0
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f7ff ff82 	bl	8007ad8 <ILI9341_FillRectangle>
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <__errno>:
 8007bdc:	4b01      	ldr	r3, [pc, #4]	; (8007be4 <__errno+0x8>)
 8007bde:	6818      	ldr	r0, [r3, #0]
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	200003e0 	.word	0x200003e0

08007be8 <__libc_init_array>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	4e0d      	ldr	r6, [pc, #52]	; (8007c20 <__libc_init_array+0x38>)
 8007bec:	4c0d      	ldr	r4, [pc, #52]	; (8007c24 <__libc_init_array+0x3c>)
 8007bee:	1ba4      	subs	r4, r4, r6
 8007bf0:	10a4      	asrs	r4, r4, #2
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	42a5      	cmp	r5, r4
 8007bf6:	d109      	bne.n	8007c0c <__libc_init_array+0x24>
 8007bf8:	4e0b      	ldr	r6, [pc, #44]	; (8007c28 <__libc_init_array+0x40>)
 8007bfa:	4c0c      	ldr	r4, [pc, #48]	; (8007c2c <__libc_init_array+0x44>)
 8007bfc:	f000 ff68 	bl	8008ad0 <_init>
 8007c00:	1ba4      	subs	r4, r4, r6
 8007c02:	10a4      	asrs	r4, r4, #2
 8007c04:	2500      	movs	r5, #0
 8007c06:	42a5      	cmp	r5, r4
 8007c08:	d105      	bne.n	8007c16 <__libc_init_array+0x2e>
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}
 8007c0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c10:	4798      	blx	r3
 8007c12:	3501      	adds	r5, #1
 8007c14:	e7ee      	b.n	8007bf4 <__libc_init_array+0xc>
 8007c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c1a:	4798      	blx	r3
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	e7f2      	b.n	8007c06 <__libc_init_array+0x1e>
 8007c20:	080099c8 	.word	0x080099c8
 8007c24:	080099c8 	.word	0x080099c8
 8007c28:	080099c8 	.word	0x080099c8
 8007c2c:	080099cc 	.word	0x080099cc

08007c30 <memset>:
 8007c30:	4402      	add	r2, r0
 8007c32:	4603      	mov	r3, r0
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d100      	bne.n	8007c3a <memset+0xa>
 8007c38:	4770      	bx	lr
 8007c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3e:	e7f9      	b.n	8007c34 <memset+0x4>

08007c40 <iprintf>:
 8007c40:	b40f      	push	{r0, r1, r2, r3}
 8007c42:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <iprintf+0x2c>)
 8007c44:	b513      	push	{r0, r1, r4, lr}
 8007c46:	681c      	ldr	r4, [r3, #0]
 8007c48:	b124      	cbz	r4, 8007c54 <iprintf+0x14>
 8007c4a:	69a3      	ldr	r3, [r4, #24]
 8007c4c:	b913      	cbnz	r3, 8007c54 <iprintf+0x14>
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 fa22 	bl	8008098 <__sinit>
 8007c54:	ab05      	add	r3, sp, #20
 8007c56:	9a04      	ldr	r2, [sp, #16]
 8007c58:	68a1      	ldr	r1, [r4, #8]
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 fbdb 	bl	8008418 <_vfiprintf_r>
 8007c62:	b002      	add	sp, #8
 8007c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c68:	b004      	add	sp, #16
 8007c6a:	4770      	bx	lr
 8007c6c:	200003e0 	.word	0x200003e0

08007c70 <_puts_r>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	460e      	mov	r6, r1
 8007c74:	4605      	mov	r5, r0
 8007c76:	b118      	cbz	r0, 8007c80 <_puts_r+0x10>
 8007c78:	6983      	ldr	r3, [r0, #24]
 8007c7a:	b90b      	cbnz	r3, 8007c80 <_puts_r+0x10>
 8007c7c:	f000 fa0c 	bl	8008098 <__sinit>
 8007c80:	69ab      	ldr	r3, [r5, #24]
 8007c82:	68ac      	ldr	r4, [r5, #8]
 8007c84:	b913      	cbnz	r3, 8007c8c <_puts_r+0x1c>
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 fa06 	bl	8008098 <__sinit>
 8007c8c:	4b23      	ldr	r3, [pc, #140]	; (8007d1c <_puts_r+0xac>)
 8007c8e:	429c      	cmp	r4, r3
 8007c90:	d117      	bne.n	8007cc2 <_puts_r+0x52>
 8007c92:	686c      	ldr	r4, [r5, #4]
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	071b      	lsls	r3, r3, #28
 8007c98:	d51d      	bpl.n	8007cd6 <_puts_r+0x66>
 8007c9a:	6923      	ldr	r3, [r4, #16]
 8007c9c:	b1db      	cbz	r3, 8007cd6 <_puts_r+0x66>
 8007c9e:	3e01      	subs	r6, #1
 8007ca0:	68a3      	ldr	r3, [r4, #8]
 8007ca2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	60a3      	str	r3, [r4, #8]
 8007caa:	b9e9      	cbnz	r1, 8007ce8 <_puts_r+0x78>
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da2e      	bge.n	8007d0e <_puts_r+0x9e>
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	210a      	movs	r1, #10
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f000 f83f 	bl	8007d38 <__swbuf_r>
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d011      	beq.n	8007ce2 <_puts_r+0x72>
 8007cbe:	200a      	movs	r0, #10
 8007cc0:	e011      	b.n	8007ce6 <_puts_r+0x76>
 8007cc2:	4b17      	ldr	r3, [pc, #92]	; (8007d20 <_puts_r+0xb0>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d101      	bne.n	8007ccc <_puts_r+0x5c>
 8007cc8:	68ac      	ldr	r4, [r5, #8]
 8007cca:	e7e3      	b.n	8007c94 <_puts_r+0x24>
 8007ccc:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <_puts_r+0xb4>)
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	bf08      	it	eq
 8007cd2:	68ec      	ldreq	r4, [r5, #12]
 8007cd4:	e7de      	b.n	8007c94 <_puts_r+0x24>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 f87f 	bl	8007ddc <__swsetup_r>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0dd      	beq.n	8007c9e <_puts_r+0x2e>
 8007ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	da04      	bge.n	8007cf6 <_puts_r+0x86>
 8007cec:	69a2      	ldr	r2, [r4, #24]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	dc06      	bgt.n	8007d00 <_puts_r+0x90>
 8007cf2:	290a      	cmp	r1, #10
 8007cf4:	d004      	beq.n	8007d00 <_puts_r+0x90>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	6022      	str	r2, [r4, #0]
 8007cfc:	7019      	strb	r1, [r3, #0]
 8007cfe:	e7cf      	b.n	8007ca0 <_puts_r+0x30>
 8007d00:	4622      	mov	r2, r4
 8007d02:	4628      	mov	r0, r5
 8007d04:	f000 f818 	bl	8007d38 <__swbuf_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d1c9      	bne.n	8007ca0 <_puts_r+0x30>
 8007d0c:	e7e9      	b.n	8007ce2 <_puts_r+0x72>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	200a      	movs	r0, #10
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	6022      	str	r2, [r4, #0]
 8007d16:	7018      	strb	r0, [r3, #0]
 8007d18:	e7e5      	b.n	8007ce6 <_puts_r+0x76>
 8007d1a:	bf00      	nop
 8007d1c:	08009954 	.word	0x08009954
 8007d20:	08009974 	.word	0x08009974
 8007d24:	08009934 	.word	0x08009934

08007d28 <puts>:
 8007d28:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <puts+0xc>)
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	f7ff bf9f 	b.w	8007c70 <_puts_r>
 8007d32:	bf00      	nop
 8007d34:	200003e0 	.word	0x200003e0

08007d38 <__swbuf_r>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	460e      	mov	r6, r1
 8007d3c:	4614      	mov	r4, r2
 8007d3e:	4605      	mov	r5, r0
 8007d40:	b118      	cbz	r0, 8007d4a <__swbuf_r+0x12>
 8007d42:	6983      	ldr	r3, [r0, #24]
 8007d44:	b90b      	cbnz	r3, 8007d4a <__swbuf_r+0x12>
 8007d46:	f000 f9a7 	bl	8008098 <__sinit>
 8007d4a:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <__swbuf_r+0x98>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d12a      	bne.n	8007da6 <__swbuf_r+0x6e>
 8007d50:	686c      	ldr	r4, [r5, #4]
 8007d52:	69a3      	ldr	r3, [r4, #24]
 8007d54:	60a3      	str	r3, [r4, #8]
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	071a      	lsls	r2, r3, #28
 8007d5a:	d52e      	bpl.n	8007dba <__swbuf_r+0x82>
 8007d5c:	6923      	ldr	r3, [r4, #16]
 8007d5e:	b363      	cbz	r3, 8007dba <__swbuf_r+0x82>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	6820      	ldr	r0, [r4, #0]
 8007d64:	1ac0      	subs	r0, r0, r3
 8007d66:	6963      	ldr	r3, [r4, #20]
 8007d68:	b2f6      	uxtb	r6, r6
 8007d6a:	4283      	cmp	r3, r0
 8007d6c:	4637      	mov	r7, r6
 8007d6e:	dc04      	bgt.n	8007d7a <__swbuf_r+0x42>
 8007d70:	4621      	mov	r1, r4
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 f926 	bl	8007fc4 <_fflush_r>
 8007d78:	bb28      	cbnz	r0, 8007dc6 <__swbuf_r+0x8e>
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	60a3      	str	r3, [r4, #8]
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	6022      	str	r2, [r4, #0]
 8007d86:	701e      	strb	r6, [r3, #0]
 8007d88:	6963      	ldr	r3, [r4, #20]
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	4283      	cmp	r3, r0
 8007d8e:	d004      	beq.n	8007d9a <__swbuf_r+0x62>
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	07db      	lsls	r3, r3, #31
 8007d94:	d519      	bpl.n	8007dca <__swbuf_r+0x92>
 8007d96:	2e0a      	cmp	r6, #10
 8007d98:	d117      	bne.n	8007dca <__swbuf_r+0x92>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f000 f911 	bl	8007fc4 <_fflush_r>
 8007da2:	b190      	cbz	r0, 8007dca <__swbuf_r+0x92>
 8007da4:	e00f      	b.n	8007dc6 <__swbuf_r+0x8e>
 8007da6:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <__swbuf_r+0x9c>)
 8007da8:	429c      	cmp	r4, r3
 8007daa:	d101      	bne.n	8007db0 <__swbuf_r+0x78>
 8007dac:	68ac      	ldr	r4, [r5, #8]
 8007dae:	e7d0      	b.n	8007d52 <__swbuf_r+0x1a>
 8007db0:	4b09      	ldr	r3, [pc, #36]	; (8007dd8 <__swbuf_r+0xa0>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	bf08      	it	eq
 8007db6:	68ec      	ldreq	r4, [r5, #12]
 8007db8:	e7cb      	b.n	8007d52 <__swbuf_r+0x1a>
 8007dba:	4621      	mov	r1, r4
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f000 f80d 	bl	8007ddc <__swsetup_r>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d0cc      	beq.n	8007d60 <__swbuf_r+0x28>
 8007dc6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007dca:	4638      	mov	r0, r7
 8007dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	08009954 	.word	0x08009954
 8007dd4:	08009974 	.word	0x08009974
 8007dd8:	08009934 	.word	0x08009934

08007ddc <__swsetup_r>:
 8007ddc:	4b32      	ldr	r3, [pc, #200]	; (8007ea8 <__swsetup_r+0xcc>)
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	681d      	ldr	r5, [r3, #0]
 8007de2:	4606      	mov	r6, r0
 8007de4:	460c      	mov	r4, r1
 8007de6:	b125      	cbz	r5, 8007df2 <__swsetup_r+0x16>
 8007de8:	69ab      	ldr	r3, [r5, #24]
 8007dea:	b913      	cbnz	r3, 8007df2 <__swsetup_r+0x16>
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 f953 	bl	8008098 <__sinit>
 8007df2:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <__swsetup_r+0xd0>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	d10f      	bne.n	8007e18 <__swsetup_r+0x3c>
 8007df8:	686c      	ldr	r4, [r5, #4]
 8007dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	0715      	lsls	r5, r2, #28
 8007e02:	d42c      	bmi.n	8007e5e <__swsetup_r+0x82>
 8007e04:	06d0      	lsls	r0, r2, #27
 8007e06:	d411      	bmi.n	8007e2c <__swsetup_r+0x50>
 8007e08:	2209      	movs	r2, #9
 8007e0a:	6032      	str	r2, [r6, #0]
 8007e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e16:	e03e      	b.n	8007e96 <__swsetup_r+0xba>
 8007e18:	4b25      	ldr	r3, [pc, #148]	; (8007eb0 <__swsetup_r+0xd4>)
 8007e1a:	429c      	cmp	r4, r3
 8007e1c:	d101      	bne.n	8007e22 <__swsetup_r+0x46>
 8007e1e:	68ac      	ldr	r4, [r5, #8]
 8007e20:	e7eb      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e22:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <__swsetup_r+0xd8>)
 8007e24:	429c      	cmp	r4, r3
 8007e26:	bf08      	it	eq
 8007e28:	68ec      	ldreq	r4, [r5, #12]
 8007e2a:	e7e6      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e2c:	0751      	lsls	r1, r2, #29
 8007e2e:	d512      	bpl.n	8007e56 <__swsetup_r+0x7a>
 8007e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e32:	b141      	cbz	r1, 8007e46 <__swsetup_r+0x6a>
 8007e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d002      	beq.n	8007e42 <__swsetup_r+0x66>
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f000 fa19 	bl	8008274 <_free_r>
 8007e42:	2300      	movs	r3, #0
 8007e44:	6363      	str	r3, [r4, #52]	; 0x34
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f043 0308 	orr.w	r3, r3, #8
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	b94b      	cbnz	r3, 8007e76 <__swsetup_r+0x9a>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6c:	d003      	beq.n	8007e76 <__swsetup_r+0x9a>
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4630      	mov	r0, r6
 8007e72:	f000 f9bf 	bl	80081f4 <__smakebuf_r>
 8007e76:	89a2      	ldrh	r2, [r4, #12]
 8007e78:	f012 0301 	ands.w	r3, r2, #1
 8007e7c:	d00c      	beq.n	8007e98 <__swsetup_r+0xbc>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60a3      	str	r3, [r4, #8]
 8007e82:	6963      	ldr	r3, [r4, #20]
 8007e84:	425b      	negs	r3, r3
 8007e86:	61a3      	str	r3, [r4, #24]
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	b953      	cbnz	r3, 8007ea2 <__swsetup_r+0xc6>
 8007e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007e94:	d1ba      	bne.n	8007e0c <__swsetup_r+0x30>
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	0792      	lsls	r2, r2, #30
 8007e9a:	bf58      	it	pl
 8007e9c:	6963      	ldrpl	r3, [r4, #20]
 8007e9e:	60a3      	str	r3, [r4, #8]
 8007ea0:	e7f2      	b.n	8007e88 <__swsetup_r+0xac>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7f7      	b.n	8007e96 <__swsetup_r+0xba>
 8007ea6:	bf00      	nop
 8007ea8:	200003e0 	.word	0x200003e0
 8007eac:	08009954 	.word	0x08009954
 8007eb0:	08009974 	.word	0x08009974
 8007eb4:	08009934 	.word	0x08009934

08007eb8 <__sflush_r>:
 8007eb8:	898a      	ldrh	r2, [r1, #12]
 8007eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	0710      	lsls	r0, r2, #28
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	d458      	bmi.n	8007f78 <__sflush_r+0xc0>
 8007ec6:	684b      	ldr	r3, [r1, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dc05      	bgt.n	8007ed8 <__sflush_r+0x20>
 8007ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dc02      	bgt.n	8007ed8 <__sflush_r+0x20>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eda:	2e00      	cmp	r6, #0
 8007edc:	d0f9      	beq.n	8007ed2 <__sflush_r+0x1a>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ee4:	682f      	ldr	r7, [r5, #0]
 8007ee6:	6a21      	ldr	r1, [r4, #32]
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	d032      	beq.n	8007f52 <__sflush_r+0x9a>
 8007eec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	075a      	lsls	r2, r3, #29
 8007ef2:	d505      	bpl.n	8007f00 <__sflush_r+0x48>
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	1ac0      	subs	r0, r0, r3
 8007ef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007efa:	b10b      	cbz	r3, 8007f00 <__sflush_r+0x48>
 8007efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007efe:	1ac0      	subs	r0, r0, r3
 8007f00:	2300      	movs	r3, #0
 8007f02:	4602      	mov	r2, r0
 8007f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f06:	6a21      	ldr	r1, [r4, #32]
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b0      	blx	r6
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	d106      	bne.n	8007f20 <__sflush_r+0x68>
 8007f12:	6829      	ldr	r1, [r5, #0]
 8007f14:	291d      	cmp	r1, #29
 8007f16:	d848      	bhi.n	8007faa <__sflush_r+0xf2>
 8007f18:	4a29      	ldr	r2, [pc, #164]	; (8007fc0 <__sflush_r+0x108>)
 8007f1a:	40ca      	lsrs	r2, r1
 8007f1c:	07d6      	lsls	r6, r2, #31
 8007f1e:	d544      	bpl.n	8007faa <__sflush_r+0xf2>
 8007f20:	2200      	movs	r2, #0
 8007f22:	6062      	str	r2, [r4, #4]
 8007f24:	04d9      	lsls	r1, r3, #19
 8007f26:	6922      	ldr	r2, [r4, #16]
 8007f28:	6022      	str	r2, [r4, #0]
 8007f2a:	d504      	bpl.n	8007f36 <__sflush_r+0x7e>
 8007f2c:	1c42      	adds	r2, r0, #1
 8007f2e:	d101      	bne.n	8007f34 <__sflush_r+0x7c>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	b903      	cbnz	r3, 8007f36 <__sflush_r+0x7e>
 8007f34:	6560      	str	r0, [r4, #84]	; 0x54
 8007f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f38:	602f      	str	r7, [r5, #0]
 8007f3a:	2900      	cmp	r1, #0
 8007f3c:	d0c9      	beq.n	8007ed2 <__sflush_r+0x1a>
 8007f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f42:	4299      	cmp	r1, r3
 8007f44:	d002      	beq.n	8007f4c <__sflush_r+0x94>
 8007f46:	4628      	mov	r0, r5
 8007f48:	f000 f994 	bl	8008274 <_free_r>
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	6360      	str	r0, [r4, #52]	; 0x34
 8007f50:	e7c0      	b.n	8007ed4 <__sflush_r+0x1c>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b0      	blx	r6
 8007f58:	1c41      	adds	r1, r0, #1
 8007f5a:	d1c8      	bne.n	8007eee <__sflush_r+0x36>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0c5      	beq.n	8007eee <__sflush_r+0x36>
 8007f62:	2b1d      	cmp	r3, #29
 8007f64:	d001      	beq.n	8007f6a <__sflush_r+0xb2>
 8007f66:	2b16      	cmp	r3, #22
 8007f68:	d101      	bne.n	8007f6e <__sflush_r+0xb6>
 8007f6a:	602f      	str	r7, [r5, #0]
 8007f6c:	e7b1      	b.n	8007ed2 <__sflush_r+0x1a>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f74:	81a3      	strh	r3, [r4, #12]
 8007f76:	e7ad      	b.n	8007ed4 <__sflush_r+0x1c>
 8007f78:	690f      	ldr	r7, [r1, #16]
 8007f7a:	2f00      	cmp	r7, #0
 8007f7c:	d0a9      	beq.n	8007ed2 <__sflush_r+0x1a>
 8007f7e:	0793      	lsls	r3, r2, #30
 8007f80:	680e      	ldr	r6, [r1, #0]
 8007f82:	bf08      	it	eq
 8007f84:	694b      	ldreq	r3, [r1, #20]
 8007f86:	600f      	str	r7, [r1, #0]
 8007f88:	bf18      	it	ne
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	eba6 0807 	sub.w	r8, r6, r7
 8007f90:	608b      	str	r3, [r1, #8]
 8007f92:	f1b8 0f00 	cmp.w	r8, #0
 8007f96:	dd9c      	ble.n	8007ed2 <__sflush_r+0x1a>
 8007f98:	4643      	mov	r3, r8
 8007f9a:	463a      	mov	r2, r7
 8007f9c:	6a21      	ldr	r1, [r4, #32]
 8007f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b0      	blx	r6
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	dc06      	bgt.n	8007fb6 <__sflush_r+0xfe>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fae:	81a3      	strh	r3, [r4, #12]
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fb4:	e78e      	b.n	8007ed4 <__sflush_r+0x1c>
 8007fb6:	4407      	add	r7, r0
 8007fb8:	eba8 0800 	sub.w	r8, r8, r0
 8007fbc:	e7e9      	b.n	8007f92 <__sflush_r+0xda>
 8007fbe:	bf00      	nop
 8007fc0:	20400001 	.word	0x20400001

08007fc4 <_fflush_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	690b      	ldr	r3, [r1, #16]
 8007fc8:	4605      	mov	r5, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	b1db      	cbz	r3, 8008006 <_fflush_r+0x42>
 8007fce:	b118      	cbz	r0, 8007fd8 <_fflush_r+0x14>
 8007fd0:	6983      	ldr	r3, [r0, #24]
 8007fd2:	b90b      	cbnz	r3, 8007fd8 <_fflush_r+0x14>
 8007fd4:	f000 f860 	bl	8008098 <__sinit>
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	; (800800c <_fflush_r+0x48>)
 8007fda:	429c      	cmp	r4, r3
 8007fdc:	d109      	bne.n	8007ff2 <_fflush_r+0x2e>
 8007fde:	686c      	ldr	r4, [r5, #4]
 8007fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe4:	b17b      	cbz	r3, 8008006 <_fflush_r+0x42>
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4628      	mov	r0, r5
 8007fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fee:	f7ff bf63 	b.w	8007eb8 <__sflush_r>
 8007ff2:	4b07      	ldr	r3, [pc, #28]	; (8008010 <_fflush_r+0x4c>)
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	d101      	bne.n	8007ffc <_fflush_r+0x38>
 8007ff8:	68ac      	ldr	r4, [r5, #8]
 8007ffa:	e7f1      	b.n	8007fe0 <_fflush_r+0x1c>
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <_fflush_r+0x50>)
 8007ffe:	429c      	cmp	r4, r3
 8008000:	bf08      	it	eq
 8008002:	68ec      	ldreq	r4, [r5, #12]
 8008004:	e7ec      	b.n	8007fe0 <_fflush_r+0x1c>
 8008006:	2000      	movs	r0, #0
 8008008:	bd38      	pop	{r3, r4, r5, pc}
 800800a:	bf00      	nop
 800800c:	08009954 	.word	0x08009954
 8008010:	08009974 	.word	0x08009974
 8008014:	08009934 	.word	0x08009934

08008018 <std>:
 8008018:	2300      	movs	r3, #0
 800801a:	b510      	push	{r4, lr}
 800801c:	4604      	mov	r4, r0
 800801e:	e9c0 3300 	strd	r3, r3, [r0]
 8008022:	6083      	str	r3, [r0, #8]
 8008024:	8181      	strh	r1, [r0, #12]
 8008026:	6643      	str	r3, [r0, #100]	; 0x64
 8008028:	81c2      	strh	r2, [r0, #14]
 800802a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800802e:	6183      	str	r3, [r0, #24]
 8008030:	4619      	mov	r1, r3
 8008032:	2208      	movs	r2, #8
 8008034:	305c      	adds	r0, #92	; 0x5c
 8008036:	f7ff fdfb 	bl	8007c30 <memset>
 800803a:	4b05      	ldr	r3, [pc, #20]	; (8008050 <std+0x38>)
 800803c:	6263      	str	r3, [r4, #36]	; 0x24
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <std+0x3c>)
 8008040:	62a3      	str	r3, [r4, #40]	; 0x28
 8008042:	4b05      	ldr	r3, [pc, #20]	; (8008058 <std+0x40>)
 8008044:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008046:	4b05      	ldr	r3, [pc, #20]	; (800805c <std+0x44>)
 8008048:	6224      	str	r4, [r4, #32]
 800804a:	6323      	str	r3, [r4, #48]	; 0x30
 800804c:	bd10      	pop	{r4, pc}
 800804e:	bf00      	nop
 8008050:	08008975 	.word	0x08008975
 8008054:	08008997 	.word	0x08008997
 8008058:	080089cf 	.word	0x080089cf
 800805c:	080089f3 	.word	0x080089f3

08008060 <_cleanup_r>:
 8008060:	4901      	ldr	r1, [pc, #4]	; (8008068 <_cleanup_r+0x8>)
 8008062:	f000 b885 	b.w	8008170 <_fwalk_reent>
 8008066:	bf00      	nop
 8008068:	08007fc5 	.word	0x08007fc5

0800806c <__sfmoreglue>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	1e4a      	subs	r2, r1, #1
 8008070:	2568      	movs	r5, #104	; 0x68
 8008072:	4355      	muls	r5, r2
 8008074:	460e      	mov	r6, r1
 8008076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800807a:	f000 f949 	bl	8008310 <_malloc_r>
 800807e:	4604      	mov	r4, r0
 8008080:	b140      	cbz	r0, 8008094 <__sfmoreglue+0x28>
 8008082:	2100      	movs	r1, #0
 8008084:	e9c0 1600 	strd	r1, r6, [r0]
 8008088:	300c      	adds	r0, #12
 800808a:	60a0      	str	r0, [r4, #8]
 800808c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008090:	f7ff fdce 	bl	8007c30 <memset>
 8008094:	4620      	mov	r0, r4
 8008096:	bd70      	pop	{r4, r5, r6, pc}

08008098 <__sinit>:
 8008098:	6983      	ldr	r3, [r0, #24]
 800809a:	b510      	push	{r4, lr}
 800809c:	4604      	mov	r4, r0
 800809e:	bb33      	cbnz	r3, 80080ee <__sinit+0x56>
 80080a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80080a4:	6503      	str	r3, [r0, #80]	; 0x50
 80080a6:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <__sinit+0x58>)
 80080a8:	4a12      	ldr	r2, [pc, #72]	; (80080f4 <__sinit+0x5c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6282      	str	r2, [r0, #40]	; 0x28
 80080ae:	4298      	cmp	r0, r3
 80080b0:	bf04      	itt	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	6183      	streq	r3, [r0, #24]
 80080b6:	f000 f81f 	bl	80080f8 <__sfp>
 80080ba:	6060      	str	r0, [r4, #4]
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 f81b 	bl	80080f8 <__sfp>
 80080c2:	60a0      	str	r0, [r4, #8]
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 f817 	bl	80080f8 <__sfp>
 80080ca:	2200      	movs	r2, #0
 80080cc:	60e0      	str	r0, [r4, #12]
 80080ce:	2104      	movs	r1, #4
 80080d0:	6860      	ldr	r0, [r4, #4]
 80080d2:	f7ff ffa1 	bl	8008018 <std>
 80080d6:	2201      	movs	r2, #1
 80080d8:	2109      	movs	r1, #9
 80080da:	68a0      	ldr	r0, [r4, #8]
 80080dc:	f7ff ff9c 	bl	8008018 <std>
 80080e0:	2202      	movs	r2, #2
 80080e2:	2112      	movs	r1, #18
 80080e4:	68e0      	ldr	r0, [r4, #12]
 80080e6:	f7ff ff97 	bl	8008018 <std>
 80080ea:	2301      	movs	r3, #1
 80080ec:	61a3      	str	r3, [r4, #24]
 80080ee:	bd10      	pop	{r4, pc}
 80080f0:	08009930 	.word	0x08009930
 80080f4:	08008061 	.word	0x08008061

080080f8 <__sfp>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <__sfp+0x70>)
 80080fc:	681e      	ldr	r6, [r3, #0]
 80080fe:	69b3      	ldr	r3, [r6, #24]
 8008100:	4607      	mov	r7, r0
 8008102:	b913      	cbnz	r3, 800810a <__sfp+0x12>
 8008104:	4630      	mov	r0, r6
 8008106:	f7ff ffc7 	bl	8008098 <__sinit>
 800810a:	3648      	adds	r6, #72	; 0x48
 800810c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008110:	3b01      	subs	r3, #1
 8008112:	d503      	bpl.n	800811c <__sfp+0x24>
 8008114:	6833      	ldr	r3, [r6, #0]
 8008116:	b133      	cbz	r3, 8008126 <__sfp+0x2e>
 8008118:	6836      	ldr	r6, [r6, #0]
 800811a:	e7f7      	b.n	800810c <__sfp+0x14>
 800811c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008120:	b16d      	cbz	r5, 800813e <__sfp+0x46>
 8008122:	3468      	adds	r4, #104	; 0x68
 8008124:	e7f4      	b.n	8008110 <__sfp+0x18>
 8008126:	2104      	movs	r1, #4
 8008128:	4638      	mov	r0, r7
 800812a:	f7ff ff9f 	bl	800806c <__sfmoreglue>
 800812e:	6030      	str	r0, [r6, #0]
 8008130:	2800      	cmp	r0, #0
 8008132:	d1f1      	bne.n	8008118 <__sfp+0x20>
 8008134:	230c      	movs	r3, #12
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4604      	mov	r4, r0
 800813a:	4620      	mov	r0, r4
 800813c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800813e:	4b0b      	ldr	r3, [pc, #44]	; (800816c <__sfp+0x74>)
 8008140:	6665      	str	r5, [r4, #100]	; 0x64
 8008142:	e9c4 5500 	strd	r5, r5, [r4]
 8008146:	60a5      	str	r5, [r4, #8]
 8008148:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800814c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008150:	2208      	movs	r2, #8
 8008152:	4629      	mov	r1, r5
 8008154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008158:	f7ff fd6a 	bl	8007c30 <memset>
 800815c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008164:	e7e9      	b.n	800813a <__sfp+0x42>
 8008166:	bf00      	nop
 8008168:	08009930 	.word	0x08009930
 800816c:	ffff0001 	.word	0xffff0001

08008170 <_fwalk_reent>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4680      	mov	r8, r0
 8008176:	4689      	mov	r9, r1
 8008178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800817c:	2600      	movs	r6, #0
 800817e:	b914      	cbnz	r4, 8008186 <_fwalk_reent+0x16>
 8008180:	4630      	mov	r0, r6
 8008182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008186:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800818a:	3f01      	subs	r7, #1
 800818c:	d501      	bpl.n	8008192 <_fwalk_reent+0x22>
 800818e:	6824      	ldr	r4, [r4, #0]
 8008190:	e7f5      	b.n	800817e <_fwalk_reent+0xe>
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d907      	bls.n	80081a8 <_fwalk_reent+0x38>
 8008198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800819c:	3301      	adds	r3, #1
 800819e:	d003      	beq.n	80081a8 <_fwalk_reent+0x38>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4640      	mov	r0, r8
 80081a4:	47c8      	blx	r9
 80081a6:	4306      	orrs	r6, r0
 80081a8:	3568      	adds	r5, #104	; 0x68
 80081aa:	e7ee      	b.n	800818a <_fwalk_reent+0x1a>

080081ac <__swhatbuf_r>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	460e      	mov	r6, r1
 80081b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b4:	2900      	cmp	r1, #0
 80081b6:	b096      	sub	sp, #88	; 0x58
 80081b8:	4614      	mov	r4, r2
 80081ba:	461d      	mov	r5, r3
 80081bc:	da07      	bge.n	80081ce <__swhatbuf_r+0x22>
 80081be:	2300      	movs	r3, #0
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	89b3      	ldrh	r3, [r6, #12]
 80081c4:	061a      	lsls	r2, r3, #24
 80081c6:	d410      	bmi.n	80081ea <__swhatbuf_r+0x3e>
 80081c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081cc:	e00e      	b.n	80081ec <__swhatbuf_r+0x40>
 80081ce:	466a      	mov	r2, sp
 80081d0:	f000 fc36 	bl	8008a40 <_fstat_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	dbf2      	blt.n	80081be <__swhatbuf_r+0x12>
 80081d8:	9a01      	ldr	r2, [sp, #4]
 80081da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081e2:	425a      	negs	r2, r3
 80081e4:	415a      	adcs	r2, r3
 80081e6:	602a      	str	r2, [r5, #0]
 80081e8:	e7ee      	b.n	80081c8 <__swhatbuf_r+0x1c>
 80081ea:	2340      	movs	r3, #64	; 0x40
 80081ec:	2000      	movs	r0, #0
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	b016      	add	sp, #88	; 0x58
 80081f2:	bd70      	pop	{r4, r5, r6, pc}

080081f4 <__smakebuf_r>:
 80081f4:	898b      	ldrh	r3, [r1, #12]
 80081f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081f8:	079d      	lsls	r5, r3, #30
 80081fa:	4606      	mov	r6, r0
 80081fc:	460c      	mov	r4, r1
 80081fe:	d507      	bpl.n	8008210 <__smakebuf_r+0x1c>
 8008200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	6123      	str	r3, [r4, #16]
 8008208:	2301      	movs	r3, #1
 800820a:	6163      	str	r3, [r4, #20]
 800820c:	b002      	add	sp, #8
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	ab01      	add	r3, sp, #4
 8008212:	466a      	mov	r2, sp
 8008214:	f7ff ffca 	bl	80081ac <__swhatbuf_r>
 8008218:	9900      	ldr	r1, [sp, #0]
 800821a:	4605      	mov	r5, r0
 800821c:	4630      	mov	r0, r6
 800821e:	f000 f877 	bl	8008310 <_malloc_r>
 8008222:	b948      	cbnz	r0, 8008238 <__smakebuf_r+0x44>
 8008224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008228:	059a      	lsls	r2, r3, #22
 800822a:	d4ef      	bmi.n	800820c <__smakebuf_r+0x18>
 800822c:	f023 0303 	bic.w	r3, r3, #3
 8008230:	f043 0302 	orr.w	r3, r3, #2
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	e7e3      	b.n	8008200 <__smakebuf_r+0xc>
 8008238:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <__smakebuf_r+0x7c>)
 800823a:	62b3      	str	r3, [r6, #40]	; 0x28
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	6020      	str	r0, [r4, #0]
 8008240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	9b00      	ldr	r3, [sp, #0]
 8008248:	6163      	str	r3, [r4, #20]
 800824a:	9b01      	ldr	r3, [sp, #4]
 800824c:	6120      	str	r0, [r4, #16]
 800824e:	b15b      	cbz	r3, 8008268 <__smakebuf_r+0x74>
 8008250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008254:	4630      	mov	r0, r6
 8008256:	f000 fc05 	bl	8008a64 <_isatty_r>
 800825a:	b128      	cbz	r0, 8008268 <__smakebuf_r+0x74>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	f043 0301 	orr.w	r3, r3, #1
 8008266:	81a3      	strh	r3, [r4, #12]
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	431d      	orrs	r5, r3
 800826c:	81a5      	strh	r5, [r4, #12]
 800826e:	e7cd      	b.n	800820c <__smakebuf_r+0x18>
 8008270:	08008061 	.word	0x08008061

08008274 <_free_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4605      	mov	r5, r0
 8008278:	2900      	cmp	r1, #0
 800827a:	d045      	beq.n	8008308 <_free_r+0x94>
 800827c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008280:	1f0c      	subs	r4, r1, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	bfb8      	it	lt
 8008286:	18e4      	addlt	r4, r4, r3
 8008288:	f000 fc0e 	bl	8008aa8 <__malloc_lock>
 800828c:	4a1f      	ldr	r2, [pc, #124]	; (800830c <_free_r+0x98>)
 800828e:	6813      	ldr	r3, [r2, #0]
 8008290:	4610      	mov	r0, r2
 8008292:	b933      	cbnz	r3, 80082a2 <_free_r+0x2e>
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	6014      	str	r4, [r2, #0]
 8008298:	4628      	mov	r0, r5
 800829a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800829e:	f000 bc04 	b.w	8008aaa <__malloc_unlock>
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	d90c      	bls.n	80082c0 <_free_r+0x4c>
 80082a6:	6821      	ldr	r1, [r4, #0]
 80082a8:	1862      	adds	r2, r4, r1
 80082aa:	4293      	cmp	r3, r2
 80082ac:	bf04      	itt	eq
 80082ae:	681a      	ldreq	r2, [r3, #0]
 80082b0:	685b      	ldreq	r3, [r3, #4]
 80082b2:	6063      	str	r3, [r4, #4]
 80082b4:	bf04      	itt	eq
 80082b6:	1852      	addeq	r2, r2, r1
 80082b8:	6022      	streq	r2, [r4, #0]
 80082ba:	6004      	str	r4, [r0, #0]
 80082bc:	e7ec      	b.n	8008298 <_free_r+0x24>
 80082be:	4613      	mov	r3, r2
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	b10a      	cbz	r2, 80082c8 <_free_r+0x54>
 80082c4:	42a2      	cmp	r2, r4
 80082c6:	d9fa      	bls.n	80082be <_free_r+0x4a>
 80082c8:	6819      	ldr	r1, [r3, #0]
 80082ca:	1858      	adds	r0, r3, r1
 80082cc:	42a0      	cmp	r0, r4
 80082ce:	d10b      	bne.n	80082e8 <_free_r+0x74>
 80082d0:	6820      	ldr	r0, [r4, #0]
 80082d2:	4401      	add	r1, r0
 80082d4:	1858      	adds	r0, r3, r1
 80082d6:	4282      	cmp	r2, r0
 80082d8:	6019      	str	r1, [r3, #0]
 80082da:	d1dd      	bne.n	8008298 <_free_r+0x24>
 80082dc:	6810      	ldr	r0, [r2, #0]
 80082de:	6852      	ldr	r2, [r2, #4]
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	4401      	add	r1, r0
 80082e4:	6019      	str	r1, [r3, #0]
 80082e6:	e7d7      	b.n	8008298 <_free_r+0x24>
 80082e8:	d902      	bls.n	80082f0 <_free_r+0x7c>
 80082ea:	230c      	movs	r3, #12
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	e7d3      	b.n	8008298 <_free_r+0x24>
 80082f0:	6820      	ldr	r0, [r4, #0]
 80082f2:	1821      	adds	r1, r4, r0
 80082f4:	428a      	cmp	r2, r1
 80082f6:	bf04      	itt	eq
 80082f8:	6811      	ldreq	r1, [r2, #0]
 80082fa:	6852      	ldreq	r2, [r2, #4]
 80082fc:	6062      	str	r2, [r4, #4]
 80082fe:	bf04      	itt	eq
 8008300:	1809      	addeq	r1, r1, r0
 8008302:	6021      	streq	r1, [r4, #0]
 8008304:	605c      	str	r4, [r3, #4]
 8008306:	e7c7      	b.n	8008298 <_free_r+0x24>
 8008308:	bd38      	pop	{r3, r4, r5, pc}
 800830a:	bf00      	nop
 800830c:	20000470 	.word	0x20000470

08008310 <_malloc_r>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	1ccd      	adds	r5, r1, #3
 8008314:	f025 0503 	bic.w	r5, r5, #3
 8008318:	3508      	adds	r5, #8
 800831a:	2d0c      	cmp	r5, #12
 800831c:	bf38      	it	cc
 800831e:	250c      	movcc	r5, #12
 8008320:	2d00      	cmp	r5, #0
 8008322:	4606      	mov	r6, r0
 8008324:	db01      	blt.n	800832a <_malloc_r+0x1a>
 8008326:	42a9      	cmp	r1, r5
 8008328:	d903      	bls.n	8008332 <_malloc_r+0x22>
 800832a:	230c      	movs	r3, #12
 800832c:	6033      	str	r3, [r6, #0]
 800832e:	2000      	movs	r0, #0
 8008330:	bd70      	pop	{r4, r5, r6, pc}
 8008332:	f000 fbb9 	bl	8008aa8 <__malloc_lock>
 8008336:	4a21      	ldr	r2, [pc, #132]	; (80083bc <_malloc_r+0xac>)
 8008338:	6814      	ldr	r4, [r2, #0]
 800833a:	4621      	mov	r1, r4
 800833c:	b991      	cbnz	r1, 8008364 <_malloc_r+0x54>
 800833e:	4c20      	ldr	r4, [pc, #128]	; (80083c0 <_malloc_r+0xb0>)
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	b91b      	cbnz	r3, 800834c <_malloc_r+0x3c>
 8008344:	4630      	mov	r0, r6
 8008346:	f000 fb05 	bl	8008954 <_sbrk_r>
 800834a:	6020      	str	r0, [r4, #0]
 800834c:	4629      	mov	r1, r5
 800834e:	4630      	mov	r0, r6
 8008350:	f000 fb00 	bl	8008954 <_sbrk_r>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d124      	bne.n	80083a2 <_malloc_r+0x92>
 8008358:	230c      	movs	r3, #12
 800835a:	6033      	str	r3, [r6, #0]
 800835c:	4630      	mov	r0, r6
 800835e:	f000 fba4 	bl	8008aaa <__malloc_unlock>
 8008362:	e7e4      	b.n	800832e <_malloc_r+0x1e>
 8008364:	680b      	ldr	r3, [r1, #0]
 8008366:	1b5b      	subs	r3, r3, r5
 8008368:	d418      	bmi.n	800839c <_malloc_r+0x8c>
 800836a:	2b0b      	cmp	r3, #11
 800836c:	d90f      	bls.n	800838e <_malloc_r+0x7e>
 800836e:	600b      	str	r3, [r1, #0]
 8008370:	50cd      	str	r5, [r1, r3]
 8008372:	18cc      	adds	r4, r1, r3
 8008374:	4630      	mov	r0, r6
 8008376:	f000 fb98 	bl	8008aaa <__malloc_unlock>
 800837a:	f104 000b 	add.w	r0, r4, #11
 800837e:	1d23      	adds	r3, r4, #4
 8008380:	f020 0007 	bic.w	r0, r0, #7
 8008384:	1ac3      	subs	r3, r0, r3
 8008386:	d0d3      	beq.n	8008330 <_malloc_r+0x20>
 8008388:	425a      	negs	r2, r3
 800838a:	50e2      	str	r2, [r4, r3]
 800838c:	e7d0      	b.n	8008330 <_malloc_r+0x20>
 800838e:	428c      	cmp	r4, r1
 8008390:	684b      	ldr	r3, [r1, #4]
 8008392:	bf16      	itet	ne
 8008394:	6063      	strne	r3, [r4, #4]
 8008396:	6013      	streq	r3, [r2, #0]
 8008398:	460c      	movne	r4, r1
 800839a:	e7eb      	b.n	8008374 <_malloc_r+0x64>
 800839c:	460c      	mov	r4, r1
 800839e:	6849      	ldr	r1, [r1, #4]
 80083a0:	e7cc      	b.n	800833c <_malloc_r+0x2c>
 80083a2:	1cc4      	adds	r4, r0, #3
 80083a4:	f024 0403 	bic.w	r4, r4, #3
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d005      	beq.n	80083b8 <_malloc_r+0xa8>
 80083ac:	1a21      	subs	r1, r4, r0
 80083ae:	4630      	mov	r0, r6
 80083b0:	f000 fad0 	bl	8008954 <_sbrk_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d0cf      	beq.n	8008358 <_malloc_r+0x48>
 80083b8:	6025      	str	r5, [r4, #0]
 80083ba:	e7db      	b.n	8008374 <_malloc_r+0x64>
 80083bc:	20000470 	.word	0x20000470
 80083c0:	20000474 	.word	0x20000474

080083c4 <__sfputc_r>:
 80083c4:	6893      	ldr	r3, [r2, #8]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	b410      	push	{r4}
 80083cc:	6093      	str	r3, [r2, #8]
 80083ce:	da08      	bge.n	80083e2 <__sfputc_r+0x1e>
 80083d0:	6994      	ldr	r4, [r2, #24]
 80083d2:	42a3      	cmp	r3, r4
 80083d4:	db01      	blt.n	80083da <__sfputc_r+0x16>
 80083d6:	290a      	cmp	r1, #10
 80083d8:	d103      	bne.n	80083e2 <__sfputc_r+0x1e>
 80083da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083de:	f7ff bcab 	b.w	8007d38 <__swbuf_r>
 80083e2:	6813      	ldr	r3, [r2, #0]
 80083e4:	1c58      	adds	r0, r3, #1
 80083e6:	6010      	str	r0, [r2, #0]
 80083e8:	7019      	strb	r1, [r3, #0]
 80083ea:	4608      	mov	r0, r1
 80083ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <__sfputs_r>:
 80083f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f4:	4606      	mov	r6, r0
 80083f6:	460f      	mov	r7, r1
 80083f8:	4614      	mov	r4, r2
 80083fa:	18d5      	adds	r5, r2, r3
 80083fc:	42ac      	cmp	r4, r5
 80083fe:	d101      	bne.n	8008404 <__sfputs_r+0x12>
 8008400:	2000      	movs	r0, #0
 8008402:	e007      	b.n	8008414 <__sfputs_r+0x22>
 8008404:	463a      	mov	r2, r7
 8008406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840a:	4630      	mov	r0, r6
 800840c:	f7ff ffda 	bl	80083c4 <__sfputc_r>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d1f3      	bne.n	80083fc <__sfputs_r+0xa>
 8008414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008418 <_vfiprintf_r>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	460c      	mov	r4, r1
 800841e:	b09d      	sub	sp, #116	; 0x74
 8008420:	4617      	mov	r7, r2
 8008422:	461d      	mov	r5, r3
 8008424:	4606      	mov	r6, r0
 8008426:	b118      	cbz	r0, 8008430 <_vfiprintf_r+0x18>
 8008428:	6983      	ldr	r3, [r0, #24]
 800842a:	b90b      	cbnz	r3, 8008430 <_vfiprintf_r+0x18>
 800842c:	f7ff fe34 	bl	8008098 <__sinit>
 8008430:	4b7c      	ldr	r3, [pc, #496]	; (8008624 <_vfiprintf_r+0x20c>)
 8008432:	429c      	cmp	r4, r3
 8008434:	d158      	bne.n	80084e8 <_vfiprintf_r+0xd0>
 8008436:	6874      	ldr	r4, [r6, #4]
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	0718      	lsls	r0, r3, #28
 800843c:	d55e      	bpl.n	80084fc <_vfiprintf_r+0xe4>
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d05b      	beq.n	80084fc <_vfiprintf_r+0xe4>
 8008444:	2300      	movs	r3, #0
 8008446:	9309      	str	r3, [sp, #36]	; 0x24
 8008448:	2320      	movs	r3, #32
 800844a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800844e:	2330      	movs	r3, #48	; 0x30
 8008450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008454:	9503      	str	r5, [sp, #12]
 8008456:	f04f 0b01 	mov.w	fp, #1
 800845a:	46b8      	mov	r8, r7
 800845c:	4645      	mov	r5, r8
 800845e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008462:	b10b      	cbz	r3, 8008468 <_vfiprintf_r+0x50>
 8008464:	2b25      	cmp	r3, #37	; 0x25
 8008466:	d154      	bne.n	8008512 <_vfiprintf_r+0xfa>
 8008468:	ebb8 0a07 	subs.w	sl, r8, r7
 800846c:	d00b      	beq.n	8008486 <_vfiprintf_r+0x6e>
 800846e:	4653      	mov	r3, sl
 8008470:	463a      	mov	r2, r7
 8008472:	4621      	mov	r1, r4
 8008474:	4630      	mov	r0, r6
 8008476:	f7ff ffbc 	bl	80083f2 <__sfputs_r>
 800847a:	3001      	adds	r0, #1
 800847c:	f000 80c2 	beq.w	8008604 <_vfiprintf_r+0x1ec>
 8008480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008482:	4453      	add	r3, sl
 8008484:	9309      	str	r3, [sp, #36]	; 0x24
 8008486:	f898 3000 	ldrb.w	r3, [r8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 80ba 	beq.w	8008604 <_vfiprintf_r+0x1ec>
 8008490:	2300      	movs	r3, #0
 8008492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	9307      	str	r3, [sp, #28]
 800849e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084a2:	931a      	str	r3, [sp, #104]	; 0x68
 80084a4:	46a8      	mov	r8, r5
 80084a6:	2205      	movs	r2, #5
 80084a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80084ac:	485e      	ldr	r0, [pc, #376]	; (8008628 <_vfiprintf_r+0x210>)
 80084ae:	f7f7 feb7 	bl	8000220 <memchr>
 80084b2:	9b04      	ldr	r3, [sp, #16]
 80084b4:	bb78      	cbnz	r0, 8008516 <_vfiprintf_r+0xfe>
 80084b6:	06d9      	lsls	r1, r3, #27
 80084b8:	bf44      	itt	mi
 80084ba:	2220      	movmi	r2, #32
 80084bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084c0:	071a      	lsls	r2, r3, #28
 80084c2:	bf44      	itt	mi
 80084c4:	222b      	movmi	r2, #43	; 0x2b
 80084c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084ca:	782a      	ldrb	r2, [r5, #0]
 80084cc:	2a2a      	cmp	r2, #42	; 0x2a
 80084ce:	d02a      	beq.n	8008526 <_vfiprintf_r+0x10e>
 80084d0:	9a07      	ldr	r2, [sp, #28]
 80084d2:	46a8      	mov	r8, r5
 80084d4:	2000      	movs	r0, #0
 80084d6:	250a      	movs	r5, #10
 80084d8:	4641      	mov	r1, r8
 80084da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084de:	3b30      	subs	r3, #48	; 0x30
 80084e0:	2b09      	cmp	r3, #9
 80084e2:	d969      	bls.n	80085b8 <_vfiprintf_r+0x1a0>
 80084e4:	b360      	cbz	r0, 8008540 <_vfiprintf_r+0x128>
 80084e6:	e024      	b.n	8008532 <_vfiprintf_r+0x11a>
 80084e8:	4b50      	ldr	r3, [pc, #320]	; (800862c <_vfiprintf_r+0x214>)
 80084ea:	429c      	cmp	r4, r3
 80084ec:	d101      	bne.n	80084f2 <_vfiprintf_r+0xda>
 80084ee:	68b4      	ldr	r4, [r6, #8]
 80084f0:	e7a2      	b.n	8008438 <_vfiprintf_r+0x20>
 80084f2:	4b4f      	ldr	r3, [pc, #316]	; (8008630 <_vfiprintf_r+0x218>)
 80084f4:	429c      	cmp	r4, r3
 80084f6:	bf08      	it	eq
 80084f8:	68f4      	ldreq	r4, [r6, #12]
 80084fa:	e79d      	b.n	8008438 <_vfiprintf_r+0x20>
 80084fc:	4621      	mov	r1, r4
 80084fe:	4630      	mov	r0, r6
 8008500:	f7ff fc6c 	bl	8007ddc <__swsetup_r>
 8008504:	2800      	cmp	r0, #0
 8008506:	d09d      	beq.n	8008444 <_vfiprintf_r+0x2c>
 8008508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800850c:	b01d      	add	sp, #116	; 0x74
 800850e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008512:	46a8      	mov	r8, r5
 8008514:	e7a2      	b.n	800845c <_vfiprintf_r+0x44>
 8008516:	4a44      	ldr	r2, [pc, #272]	; (8008628 <_vfiprintf_r+0x210>)
 8008518:	1a80      	subs	r0, r0, r2
 800851a:	fa0b f000 	lsl.w	r0, fp, r0
 800851e:	4318      	orrs	r0, r3
 8008520:	9004      	str	r0, [sp, #16]
 8008522:	4645      	mov	r5, r8
 8008524:	e7be      	b.n	80084a4 <_vfiprintf_r+0x8c>
 8008526:	9a03      	ldr	r2, [sp, #12]
 8008528:	1d11      	adds	r1, r2, #4
 800852a:	6812      	ldr	r2, [r2, #0]
 800852c:	9103      	str	r1, [sp, #12]
 800852e:	2a00      	cmp	r2, #0
 8008530:	db01      	blt.n	8008536 <_vfiprintf_r+0x11e>
 8008532:	9207      	str	r2, [sp, #28]
 8008534:	e004      	b.n	8008540 <_vfiprintf_r+0x128>
 8008536:	4252      	negs	r2, r2
 8008538:	f043 0302 	orr.w	r3, r3, #2
 800853c:	9207      	str	r2, [sp, #28]
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	f898 3000 	ldrb.w	r3, [r8]
 8008544:	2b2e      	cmp	r3, #46	; 0x2e
 8008546:	d10e      	bne.n	8008566 <_vfiprintf_r+0x14e>
 8008548:	f898 3001 	ldrb.w	r3, [r8, #1]
 800854c:	2b2a      	cmp	r3, #42	; 0x2a
 800854e:	d138      	bne.n	80085c2 <_vfiprintf_r+0x1aa>
 8008550:	9b03      	ldr	r3, [sp, #12]
 8008552:	1d1a      	adds	r2, r3, #4
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	9203      	str	r2, [sp, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	bfb8      	it	lt
 800855c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008560:	f108 0802 	add.w	r8, r8, #2
 8008564:	9305      	str	r3, [sp, #20]
 8008566:	4d33      	ldr	r5, [pc, #204]	; (8008634 <_vfiprintf_r+0x21c>)
 8008568:	f898 1000 	ldrb.w	r1, [r8]
 800856c:	2203      	movs	r2, #3
 800856e:	4628      	mov	r0, r5
 8008570:	f7f7 fe56 	bl	8000220 <memchr>
 8008574:	b140      	cbz	r0, 8008588 <_vfiprintf_r+0x170>
 8008576:	2340      	movs	r3, #64	; 0x40
 8008578:	1b40      	subs	r0, r0, r5
 800857a:	fa03 f000 	lsl.w	r0, r3, r0
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	4303      	orrs	r3, r0
 8008582:	f108 0801 	add.w	r8, r8, #1
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	f898 1000 	ldrb.w	r1, [r8]
 800858c:	482a      	ldr	r0, [pc, #168]	; (8008638 <_vfiprintf_r+0x220>)
 800858e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008592:	2206      	movs	r2, #6
 8008594:	f108 0701 	add.w	r7, r8, #1
 8008598:	f7f7 fe42 	bl	8000220 <memchr>
 800859c:	2800      	cmp	r0, #0
 800859e:	d037      	beq.n	8008610 <_vfiprintf_r+0x1f8>
 80085a0:	4b26      	ldr	r3, [pc, #152]	; (800863c <_vfiprintf_r+0x224>)
 80085a2:	bb1b      	cbnz	r3, 80085ec <_vfiprintf_r+0x1d4>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	3307      	adds	r3, #7
 80085a8:	f023 0307 	bic.w	r3, r3, #7
 80085ac:	3308      	adds	r3, #8
 80085ae:	9303      	str	r3, [sp, #12]
 80085b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b2:	444b      	add	r3, r9
 80085b4:	9309      	str	r3, [sp, #36]	; 0x24
 80085b6:	e750      	b.n	800845a <_vfiprintf_r+0x42>
 80085b8:	fb05 3202 	mla	r2, r5, r2, r3
 80085bc:	2001      	movs	r0, #1
 80085be:	4688      	mov	r8, r1
 80085c0:	e78a      	b.n	80084d8 <_vfiprintf_r+0xc0>
 80085c2:	2300      	movs	r3, #0
 80085c4:	f108 0801 	add.w	r8, r8, #1
 80085c8:	9305      	str	r3, [sp, #20]
 80085ca:	4619      	mov	r1, r3
 80085cc:	250a      	movs	r5, #10
 80085ce:	4640      	mov	r0, r8
 80085d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d4:	3a30      	subs	r2, #48	; 0x30
 80085d6:	2a09      	cmp	r2, #9
 80085d8:	d903      	bls.n	80085e2 <_vfiprintf_r+0x1ca>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0c3      	beq.n	8008566 <_vfiprintf_r+0x14e>
 80085de:	9105      	str	r1, [sp, #20]
 80085e0:	e7c1      	b.n	8008566 <_vfiprintf_r+0x14e>
 80085e2:	fb05 2101 	mla	r1, r5, r1, r2
 80085e6:	2301      	movs	r3, #1
 80085e8:	4680      	mov	r8, r0
 80085ea:	e7f0      	b.n	80085ce <_vfiprintf_r+0x1b6>
 80085ec:	ab03      	add	r3, sp, #12
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	4622      	mov	r2, r4
 80085f2:	4b13      	ldr	r3, [pc, #76]	; (8008640 <_vfiprintf_r+0x228>)
 80085f4:	a904      	add	r1, sp, #16
 80085f6:	4630      	mov	r0, r6
 80085f8:	f3af 8000 	nop.w
 80085fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008600:	4681      	mov	r9, r0
 8008602:	d1d5      	bne.n	80085b0 <_vfiprintf_r+0x198>
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	065b      	lsls	r3, r3, #25
 8008608:	f53f af7e 	bmi.w	8008508 <_vfiprintf_r+0xf0>
 800860c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800860e:	e77d      	b.n	800850c <_vfiprintf_r+0xf4>
 8008610:	ab03      	add	r3, sp, #12
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	4622      	mov	r2, r4
 8008616:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <_vfiprintf_r+0x228>)
 8008618:	a904      	add	r1, sp, #16
 800861a:	4630      	mov	r0, r6
 800861c:	f000 f888 	bl	8008730 <_printf_i>
 8008620:	e7ec      	b.n	80085fc <_vfiprintf_r+0x1e4>
 8008622:	bf00      	nop
 8008624:	08009954 	.word	0x08009954
 8008628:	08009994 	.word	0x08009994
 800862c:	08009974 	.word	0x08009974
 8008630:	08009934 	.word	0x08009934
 8008634:	0800999a 	.word	0x0800999a
 8008638:	0800999e 	.word	0x0800999e
 800863c:	00000000 	.word	0x00000000
 8008640:	080083f3 	.word	0x080083f3

08008644 <_printf_common>:
 8008644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	4691      	mov	r9, r2
 800864a:	461f      	mov	r7, r3
 800864c:	688a      	ldr	r2, [r1, #8]
 800864e:	690b      	ldr	r3, [r1, #16]
 8008650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008654:	4293      	cmp	r3, r2
 8008656:	bfb8      	it	lt
 8008658:	4613      	movlt	r3, r2
 800865a:	f8c9 3000 	str.w	r3, [r9]
 800865e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008662:	4606      	mov	r6, r0
 8008664:	460c      	mov	r4, r1
 8008666:	b112      	cbz	r2, 800866e <_printf_common+0x2a>
 8008668:	3301      	adds	r3, #1
 800866a:	f8c9 3000 	str.w	r3, [r9]
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	0699      	lsls	r1, r3, #26
 8008672:	bf42      	ittt	mi
 8008674:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008678:	3302      	addmi	r3, #2
 800867a:	f8c9 3000 	strmi.w	r3, [r9]
 800867e:	6825      	ldr	r5, [r4, #0]
 8008680:	f015 0506 	ands.w	r5, r5, #6
 8008684:	d107      	bne.n	8008696 <_printf_common+0x52>
 8008686:	f104 0a19 	add.w	sl, r4, #25
 800868a:	68e3      	ldr	r3, [r4, #12]
 800868c:	f8d9 2000 	ldr.w	r2, [r9]
 8008690:	1a9b      	subs	r3, r3, r2
 8008692:	42ab      	cmp	r3, r5
 8008694:	dc28      	bgt.n	80086e8 <_printf_common+0xa4>
 8008696:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	3300      	adds	r3, #0
 800869e:	bf18      	it	ne
 80086a0:	2301      	movne	r3, #1
 80086a2:	0692      	lsls	r2, r2, #26
 80086a4:	d42d      	bmi.n	8008702 <_printf_common+0xbe>
 80086a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086aa:	4639      	mov	r1, r7
 80086ac:	4630      	mov	r0, r6
 80086ae:	47c0      	blx	r8
 80086b0:	3001      	adds	r0, #1
 80086b2:	d020      	beq.n	80086f6 <_printf_common+0xb2>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	68e5      	ldr	r5, [r4, #12]
 80086b8:	f8d9 2000 	ldr.w	r2, [r9]
 80086bc:	f003 0306 	and.w	r3, r3, #6
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	bf08      	it	eq
 80086c4:	1aad      	subeq	r5, r5, r2
 80086c6:	68a3      	ldr	r3, [r4, #8]
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	bf0c      	ite	eq
 80086cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086d0:	2500      	movne	r5, #0
 80086d2:	4293      	cmp	r3, r2
 80086d4:	bfc4      	itt	gt
 80086d6:	1a9b      	subgt	r3, r3, r2
 80086d8:	18ed      	addgt	r5, r5, r3
 80086da:	f04f 0900 	mov.w	r9, #0
 80086de:	341a      	adds	r4, #26
 80086e0:	454d      	cmp	r5, r9
 80086e2:	d11a      	bne.n	800871a <_printf_common+0xd6>
 80086e4:	2000      	movs	r0, #0
 80086e6:	e008      	b.n	80086fa <_printf_common+0xb6>
 80086e8:	2301      	movs	r3, #1
 80086ea:	4652      	mov	r2, sl
 80086ec:	4639      	mov	r1, r7
 80086ee:	4630      	mov	r0, r6
 80086f0:	47c0      	blx	r8
 80086f2:	3001      	adds	r0, #1
 80086f4:	d103      	bne.n	80086fe <_printf_common+0xba>
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fe:	3501      	adds	r5, #1
 8008700:	e7c3      	b.n	800868a <_printf_common+0x46>
 8008702:	18e1      	adds	r1, r4, r3
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	2030      	movs	r0, #48	; 0x30
 8008708:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800870c:	4422      	add	r2, r4
 800870e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008712:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008716:	3302      	adds	r3, #2
 8008718:	e7c5      	b.n	80086a6 <_printf_common+0x62>
 800871a:	2301      	movs	r3, #1
 800871c:	4622      	mov	r2, r4
 800871e:	4639      	mov	r1, r7
 8008720:	4630      	mov	r0, r6
 8008722:	47c0      	blx	r8
 8008724:	3001      	adds	r0, #1
 8008726:	d0e6      	beq.n	80086f6 <_printf_common+0xb2>
 8008728:	f109 0901 	add.w	r9, r9, #1
 800872c:	e7d8      	b.n	80086e0 <_printf_common+0x9c>
	...

08008730 <_printf_i>:
 8008730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008734:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008738:	460c      	mov	r4, r1
 800873a:	7e09      	ldrb	r1, [r1, #24]
 800873c:	b085      	sub	sp, #20
 800873e:	296e      	cmp	r1, #110	; 0x6e
 8008740:	4617      	mov	r7, r2
 8008742:	4606      	mov	r6, r0
 8008744:	4698      	mov	r8, r3
 8008746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008748:	f000 80b3 	beq.w	80088b2 <_printf_i+0x182>
 800874c:	d822      	bhi.n	8008794 <_printf_i+0x64>
 800874e:	2963      	cmp	r1, #99	; 0x63
 8008750:	d036      	beq.n	80087c0 <_printf_i+0x90>
 8008752:	d80a      	bhi.n	800876a <_printf_i+0x3a>
 8008754:	2900      	cmp	r1, #0
 8008756:	f000 80b9 	beq.w	80088cc <_printf_i+0x19c>
 800875a:	2958      	cmp	r1, #88	; 0x58
 800875c:	f000 8083 	beq.w	8008866 <_printf_i+0x136>
 8008760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008764:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008768:	e032      	b.n	80087d0 <_printf_i+0xa0>
 800876a:	2964      	cmp	r1, #100	; 0x64
 800876c:	d001      	beq.n	8008772 <_printf_i+0x42>
 800876e:	2969      	cmp	r1, #105	; 0x69
 8008770:	d1f6      	bne.n	8008760 <_printf_i+0x30>
 8008772:	6820      	ldr	r0, [r4, #0]
 8008774:	6813      	ldr	r3, [r2, #0]
 8008776:	0605      	lsls	r5, r0, #24
 8008778:	f103 0104 	add.w	r1, r3, #4
 800877c:	d52a      	bpl.n	80087d4 <_printf_i+0xa4>
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6011      	str	r1, [r2, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	da03      	bge.n	800878e <_printf_i+0x5e>
 8008786:	222d      	movs	r2, #45	; 0x2d
 8008788:	425b      	negs	r3, r3
 800878a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800878e:	486f      	ldr	r0, [pc, #444]	; (800894c <_printf_i+0x21c>)
 8008790:	220a      	movs	r2, #10
 8008792:	e039      	b.n	8008808 <_printf_i+0xd8>
 8008794:	2973      	cmp	r1, #115	; 0x73
 8008796:	f000 809d 	beq.w	80088d4 <_printf_i+0x1a4>
 800879a:	d808      	bhi.n	80087ae <_printf_i+0x7e>
 800879c:	296f      	cmp	r1, #111	; 0x6f
 800879e:	d020      	beq.n	80087e2 <_printf_i+0xb2>
 80087a0:	2970      	cmp	r1, #112	; 0x70
 80087a2:	d1dd      	bne.n	8008760 <_printf_i+0x30>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	f043 0320 	orr.w	r3, r3, #32
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	e003      	b.n	80087b6 <_printf_i+0x86>
 80087ae:	2975      	cmp	r1, #117	; 0x75
 80087b0:	d017      	beq.n	80087e2 <_printf_i+0xb2>
 80087b2:	2978      	cmp	r1, #120	; 0x78
 80087b4:	d1d4      	bne.n	8008760 <_printf_i+0x30>
 80087b6:	2378      	movs	r3, #120	; 0x78
 80087b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087bc:	4864      	ldr	r0, [pc, #400]	; (8008950 <_printf_i+0x220>)
 80087be:	e055      	b.n	800886c <_printf_i+0x13c>
 80087c0:	6813      	ldr	r3, [r2, #0]
 80087c2:	1d19      	adds	r1, r3, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6011      	str	r1, [r2, #0]
 80087c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087d0:	2301      	movs	r3, #1
 80087d2:	e08c      	b.n	80088ee <_printf_i+0x1be>
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6011      	str	r1, [r2, #0]
 80087d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087dc:	bf18      	it	ne
 80087de:	b21b      	sxthne	r3, r3
 80087e0:	e7cf      	b.n	8008782 <_printf_i+0x52>
 80087e2:	6813      	ldr	r3, [r2, #0]
 80087e4:	6825      	ldr	r5, [r4, #0]
 80087e6:	1d18      	adds	r0, r3, #4
 80087e8:	6010      	str	r0, [r2, #0]
 80087ea:	0628      	lsls	r0, r5, #24
 80087ec:	d501      	bpl.n	80087f2 <_printf_i+0xc2>
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	e002      	b.n	80087f8 <_printf_i+0xc8>
 80087f2:	0668      	lsls	r0, r5, #25
 80087f4:	d5fb      	bpl.n	80087ee <_printf_i+0xbe>
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	4854      	ldr	r0, [pc, #336]	; (800894c <_printf_i+0x21c>)
 80087fa:	296f      	cmp	r1, #111	; 0x6f
 80087fc:	bf14      	ite	ne
 80087fe:	220a      	movne	r2, #10
 8008800:	2208      	moveq	r2, #8
 8008802:	2100      	movs	r1, #0
 8008804:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008808:	6865      	ldr	r5, [r4, #4]
 800880a:	60a5      	str	r5, [r4, #8]
 800880c:	2d00      	cmp	r5, #0
 800880e:	f2c0 8095 	blt.w	800893c <_printf_i+0x20c>
 8008812:	6821      	ldr	r1, [r4, #0]
 8008814:	f021 0104 	bic.w	r1, r1, #4
 8008818:	6021      	str	r1, [r4, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d13d      	bne.n	800889a <_printf_i+0x16a>
 800881e:	2d00      	cmp	r5, #0
 8008820:	f040 808e 	bne.w	8008940 <_printf_i+0x210>
 8008824:	4665      	mov	r5, ip
 8008826:	2a08      	cmp	r2, #8
 8008828:	d10b      	bne.n	8008842 <_printf_i+0x112>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	07db      	lsls	r3, r3, #31
 800882e:	d508      	bpl.n	8008842 <_printf_i+0x112>
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	6862      	ldr	r2, [r4, #4]
 8008834:	429a      	cmp	r2, r3
 8008836:	bfde      	ittt	le
 8008838:	2330      	movle	r3, #48	; 0x30
 800883a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800883e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008842:	ebac 0305 	sub.w	r3, ip, r5
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	f8cd 8000 	str.w	r8, [sp]
 800884c:	463b      	mov	r3, r7
 800884e:	aa03      	add	r2, sp, #12
 8008850:	4621      	mov	r1, r4
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff fef6 	bl	8008644 <_printf_common>
 8008858:	3001      	adds	r0, #1
 800885a:	d14d      	bne.n	80088f8 <_printf_i+0x1c8>
 800885c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008860:	b005      	add	sp, #20
 8008862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008866:	4839      	ldr	r0, [pc, #228]	; (800894c <_printf_i+0x21c>)
 8008868:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800886c:	6813      	ldr	r3, [r2, #0]
 800886e:	6821      	ldr	r1, [r4, #0]
 8008870:	1d1d      	adds	r5, r3, #4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6015      	str	r5, [r2, #0]
 8008876:	060a      	lsls	r2, r1, #24
 8008878:	d50b      	bpl.n	8008892 <_printf_i+0x162>
 800887a:	07ca      	lsls	r2, r1, #31
 800887c:	bf44      	itt	mi
 800887e:	f041 0120 	orrmi.w	r1, r1, #32
 8008882:	6021      	strmi	r1, [r4, #0]
 8008884:	b91b      	cbnz	r3, 800888e <_printf_i+0x15e>
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	f022 0220 	bic.w	r2, r2, #32
 800888c:	6022      	str	r2, [r4, #0]
 800888e:	2210      	movs	r2, #16
 8008890:	e7b7      	b.n	8008802 <_printf_i+0xd2>
 8008892:	064d      	lsls	r5, r1, #25
 8008894:	bf48      	it	mi
 8008896:	b29b      	uxthmi	r3, r3
 8008898:	e7ef      	b.n	800887a <_printf_i+0x14a>
 800889a:	4665      	mov	r5, ip
 800889c:	fbb3 f1f2 	udiv	r1, r3, r2
 80088a0:	fb02 3311 	mls	r3, r2, r1, r3
 80088a4:	5cc3      	ldrb	r3, [r0, r3]
 80088a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80088aa:	460b      	mov	r3, r1
 80088ac:	2900      	cmp	r1, #0
 80088ae:	d1f5      	bne.n	800889c <_printf_i+0x16c>
 80088b0:	e7b9      	b.n	8008826 <_printf_i+0xf6>
 80088b2:	6813      	ldr	r3, [r2, #0]
 80088b4:	6825      	ldr	r5, [r4, #0]
 80088b6:	6961      	ldr	r1, [r4, #20]
 80088b8:	1d18      	adds	r0, r3, #4
 80088ba:	6010      	str	r0, [r2, #0]
 80088bc:	0628      	lsls	r0, r5, #24
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	d501      	bpl.n	80088c6 <_printf_i+0x196>
 80088c2:	6019      	str	r1, [r3, #0]
 80088c4:	e002      	b.n	80088cc <_printf_i+0x19c>
 80088c6:	066a      	lsls	r2, r5, #25
 80088c8:	d5fb      	bpl.n	80088c2 <_printf_i+0x192>
 80088ca:	8019      	strh	r1, [r3, #0]
 80088cc:	2300      	movs	r3, #0
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	4665      	mov	r5, ip
 80088d2:	e7b9      	b.n	8008848 <_printf_i+0x118>
 80088d4:	6813      	ldr	r3, [r2, #0]
 80088d6:	1d19      	adds	r1, r3, #4
 80088d8:	6011      	str	r1, [r2, #0]
 80088da:	681d      	ldr	r5, [r3, #0]
 80088dc:	6862      	ldr	r2, [r4, #4]
 80088de:	2100      	movs	r1, #0
 80088e0:	4628      	mov	r0, r5
 80088e2:	f7f7 fc9d 	bl	8000220 <memchr>
 80088e6:	b108      	cbz	r0, 80088ec <_printf_i+0x1bc>
 80088e8:	1b40      	subs	r0, r0, r5
 80088ea:	6060      	str	r0, [r4, #4]
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	6123      	str	r3, [r4, #16]
 80088f0:	2300      	movs	r3, #0
 80088f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f6:	e7a7      	b.n	8008848 <_printf_i+0x118>
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	462a      	mov	r2, r5
 80088fc:	4639      	mov	r1, r7
 80088fe:	4630      	mov	r0, r6
 8008900:	47c0      	blx	r8
 8008902:	3001      	adds	r0, #1
 8008904:	d0aa      	beq.n	800885c <_printf_i+0x12c>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	079b      	lsls	r3, r3, #30
 800890a:	d413      	bmi.n	8008934 <_printf_i+0x204>
 800890c:	68e0      	ldr	r0, [r4, #12]
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	4298      	cmp	r0, r3
 8008912:	bfb8      	it	lt
 8008914:	4618      	movlt	r0, r3
 8008916:	e7a3      	b.n	8008860 <_printf_i+0x130>
 8008918:	2301      	movs	r3, #1
 800891a:	464a      	mov	r2, r9
 800891c:	4639      	mov	r1, r7
 800891e:	4630      	mov	r0, r6
 8008920:	47c0      	blx	r8
 8008922:	3001      	adds	r0, #1
 8008924:	d09a      	beq.n	800885c <_printf_i+0x12c>
 8008926:	3501      	adds	r5, #1
 8008928:	68e3      	ldr	r3, [r4, #12]
 800892a:	9a03      	ldr	r2, [sp, #12]
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	42ab      	cmp	r3, r5
 8008930:	dcf2      	bgt.n	8008918 <_printf_i+0x1e8>
 8008932:	e7eb      	b.n	800890c <_printf_i+0x1dc>
 8008934:	2500      	movs	r5, #0
 8008936:	f104 0919 	add.w	r9, r4, #25
 800893a:	e7f5      	b.n	8008928 <_printf_i+0x1f8>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1ac      	bne.n	800889a <_printf_i+0x16a>
 8008940:	7803      	ldrb	r3, [r0, #0]
 8008942:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008946:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800894a:	e76c      	b.n	8008826 <_printf_i+0xf6>
 800894c:	080099a5 	.word	0x080099a5
 8008950:	080099b6 	.word	0x080099b6

08008954 <_sbrk_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4c06      	ldr	r4, [pc, #24]	; (8008970 <_sbrk_r+0x1c>)
 8008958:	2300      	movs	r3, #0
 800895a:	4605      	mov	r5, r0
 800895c:	4608      	mov	r0, r1
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	f7f8 ff84 	bl	800186c <_sbrk>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_sbrk_r+0x1a>
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	b103      	cbz	r3, 800896e <_sbrk_r+0x1a>
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	200008ec 	.word	0x200008ec

08008974 <__sread>:
 8008974:	b510      	push	{r4, lr}
 8008976:	460c      	mov	r4, r1
 8008978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897c:	f000 f896 	bl	8008aac <_read_r>
 8008980:	2800      	cmp	r0, #0
 8008982:	bfab      	itete	ge
 8008984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008986:	89a3      	ldrhlt	r3, [r4, #12]
 8008988:	181b      	addge	r3, r3, r0
 800898a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800898e:	bfac      	ite	ge
 8008990:	6563      	strge	r3, [r4, #84]	; 0x54
 8008992:	81a3      	strhlt	r3, [r4, #12]
 8008994:	bd10      	pop	{r4, pc}

08008996 <__swrite>:
 8008996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	461f      	mov	r7, r3
 800899c:	898b      	ldrh	r3, [r1, #12]
 800899e:	05db      	lsls	r3, r3, #23
 80089a0:	4605      	mov	r5, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	4616      	mov	r6, r2
 80089a6:	d505      	bpl.n	80089b4 <__swrite+0x1e>
 80089a8:	2302      	movs	r3, #2
 80089aa:	2200      	movs	r2, #0
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	f000 f868 	bl	8008a84 <_lseek_r>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	4632      	mov	r2, r6
 80089c2:	463b      	mov	r3, r7
 80089c4:	4628      	mov	r0, r5
 80089c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ca:	f000 b817 	b.w	80089fc <_write_r>

080089ce <__sseek>:
 80089ce:	b510      	push	{r4, lr}
 80089d0:	460c      	mov	r4, r1
 80089d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d6:	f000 f855 	bl	8008a84 <_lseek_r>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	bf15      	itete	ne
 80089e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089ea:	81a3      	strheq	r3, [r4, #12]
 80089ec:	bf18      	it	ne
 80089ee:	81a3      	strhne	r3, [r4, #12]
 80089f0:	bd10      	pop	{r4, pc}

080089f2 <__sclose>:
 80089f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f6:	f000 b813 	b.w	8008a20 <_close_r>
	...

080089fc <_write_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4c07      	ldr	r4, [pc, #28]	; (8008a1c <_write_r+0x20>)
 8008a00:	4605      	mov	r5, r0
 8008a02:	4608      	mov	r0, r1
 8008a04:	4611      	mov	r1, r2
 8008a06:	2200      	movs	r2, #0
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f7f8 fb17 	bl	800103e <_write>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_write_r+0x1e>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_write_r+0x1e>
 8008a18:	602b      	str	r3, [r5, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	200008ec 	.word	0x200008ec

08008a20 <_close_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4c06      	ldr	r4, [pc, #24]	; (8008a3c <_close_r+0x1c>)
 8008a24:	2300      	movs	r3, #0
 8008a26:	4605      	mov	r5, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	f7f8 fee9 	bl	8001802 <_close>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_close_r+0x1a>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_close_r+0x1a>
 8008a38:	602b      	str	r3, [r5, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	200008ec 	.word	0x200008ec

08008a40 <_fstat_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4c07      	ldr	r4, [pc, #28]	; (8008a60 <_fstat_r+0x20>)
 8008a44:	2300      	movs	r3, #0
 8008a46:	4605      	mov	r5, r0
 8008a48:	4608      	mov	r0, r1
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	f7f8 fee4 	bl	800181a <_fstat>
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	d102      	bne.n	8008a5c <_fstat_r+0x1c>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	b103      	cbz	r3, 8008a5c <_fstat_r+0x1c>
 8008a5a:	602b      	str	r3, [r5, #0]
 8008a5c:	bd38      	pop	{r3, r4, r5, pc}
 8008a5e:	bf00      	nop
 8008a60:	200008ec 	.word	0x200008ec

08008a64 <_isatty_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4c06      	ldr	r4, [pc, #24]	; (8008a80 <_isatty_r+0x1c>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	6023      	str	r3, [r4, #0]
 8008a70:	f7f8 fee3 	bl	800183a <_isatty>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_isatty_r+0x1a>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_isatty_r+0x1a>
 8008a7c:	602b      	str	r3, [r5, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	200008ec 	.word	0x200008ec

08008a84 <_lseek_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4c07      	ldr	r4, [pc, #28]	; (8008aa4 <_lseek_r+0x20>)
 8008a88:	4605      	mov	r5, r0
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	2200      	movs	r2, #0
 8008a90:	6022      	str	r2, [r4, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	f7f8 fedc 	bl	8001850 <_lseek>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_lseek_r+0x1e>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_lseek_r+0x1e>
 8008aa0:	602b      	str	r3, [r5, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	200008ec 	.word	0x200008ec

08008aa8 <__malloc_lock>:
 8008aa8:	4770      	bx	lr

08008aaa <__malloc_unlock>:
 8008aaa:	4770      	bx	lr

08008aac <_read_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4c07      	ldr	r4, [pc, #28]	; (8008acc <_read_r+0x20>)
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	6022      	str	r2, [r4, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f7f8 fe84 	bl	80017c8 <_read>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_read_r+0x1e>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_read_r+0x1e>
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	200008ec 	.word	0x200008ec

08008ad0 <_init>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	bf00      	nop
 8008ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad6:	bc08      	pop	{r3}
 8008ad8:	469e      	mov	lr, r3
 8008ada:	4770      	bx	lr

08008adc <_fini>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr
