
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008790  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d0c  08008d0c  00021fb8  2**0
                  CONTENTS
  4 .ARM          00000000  08008d0c  08008d0c  00021fb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d0c  08008d0c  00021fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d0c  08008d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d10  08008d10  00018d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001fb8  20000000  08008d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20001fb8  0800accc  00021fb8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002418  0800accc  00022418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021fb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f3dd  00000000  00000000  00021fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ea2  00000000  00000000  000413c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001940  00000000  00000000  00045268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  00046ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002da04  00000000  00000000  000482e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000181e0  00000000  00000000  00075ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012227e  00000000  00000000  0008dec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b0142  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e8  00000000  00000000  001b01c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001fb8 	.word	0x20001fb8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008958 	.word	0x08008958

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001fbc 	.word	0x20001fbc
 800021c:	08008958 	.word	0x08008958

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2220      	movs	r2, #32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f007 fa15 	bl	8007708 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002de:	4b32      	ldr	r3, [pc, #200]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ec:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000306:	2204      	movs	r2, #4
 8000308:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000312:	2201      	movs	r2, #1
 8000314:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000318:	2201      	movs	r2, #1
 800031a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000332:	2201      	movs	r2, #1
 8000334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800034a:	f001 fd5f 	bl	8001e0c <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 fd8b 	bl	8000e6e <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000364:	f002 fae8 	bl	8002938 <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 fd7e 	bl	8000e6e <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_ADC1_Init+0xec>)
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2306      	movs	r3, #6
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	237f      	movs	r3, #127	; 0x7f
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2304      	movs	r3, #4
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000390:	f001 fefc 	bl	800218c <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800039a:	f000 fd68 	bl	8000e6e <Error_Handler>
  }

}
 800039e:	bf00      	nop
 80003a0:	3730      	adds	r7, #48	; 0x30
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20001ff8 	.word	0x20001ff8
 80003ac:	0c900008 	.word	0x0c900008

080003b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003d0:	d14f      	bne.n	8000472 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a29      	ldr	r2, [pc, #164]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
 80003e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b21      	ldr	r3, [pc, #132]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000402:	2304      	movs	r3, #4
 8000404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000406:	2303      	movs	r3, #3
 8000408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f003 fdaa 	bl	8003f70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800041e:	4a19      	ldr	r2, [pc, #100]	; (8000484 <HAL_ADC_MspInit+0xd4>)
 8000420:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000424:	2205      	movs	r2, #5
 8000426:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800044c:	2220      	movs	r2, #32
 800044e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000458:	f003 fb18 	bl	8003a8c <HAL_DMA_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000462:	f000 fd04 	bl	8000e6e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046a:	655a      	str	r2, [r3, #84]	; 0x54
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	20002064 	.word	0x20002064
 8000484:	40020008 	.word	0x40020008

08000488 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_COMP1_Init+0x44>)
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <MX_COMP1_Init+0x48>)
 8000490:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_COMP1_Init+0x44>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_COMP1_Init+0x44>)
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <MX_COMP1_Init+0x4c>)
 800049c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_COMP1_Init+0x44>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b8:	f002 fc92 	bl	8002de0 <HAL_COMP_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80004c2:	f000 fcd4 	bl	8000e6e <Error_Handler>
  }

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200020c4 	.word	0x200020c4
 80004d0:	40010200 	.word	0x40010200
 80004d4:	00800030 	.word	0x00800030

080004d8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <HAL_COMP_MspInit+0x5c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d118      	bne.n	800052c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_COMP_MspInit+0x60>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000512:	2302      	movs	r3, #2
 8000514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000516:	2303      	movs	r3, #3
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f003 fd22 	bl	8003f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010200 	.word	0x40010200
 8000538:	40021000 	.word	0x40021000

0800053c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f007 f8dd 	bl	8007708 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <MX_DAC1_Init+0x8c>)
 8000552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000556:	f002 fee6 	bl	8003326 <HAL_DAC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000560:	f000 fc85 	bl	8000e6e <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000564:	2302      	movs	r3, #2
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000574:	2306      	movs	r3, #6
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000590:	f003 f846 	bl	8003620 <HAL_DAC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fc68 	bl	8000e6e <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	2210      	movs	r2, #16
 80005aa:	4619      	mov	r1, r3
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_DAC1_Init+0x88>)
 80005ae:	f003 f837 	bl	8003620 <HAL_DAC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 80005b8:	f000 fc59 	bl	8000e6e <Error_Handler>
  }

}
 80005bc:	bf00      	nop
 80005be:	3730      	adds	r7, #48	; 0x30
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200020fc 	.word	0x200020fc
 80005c8:	50000800 	.word	0x50000800

080005cc <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2230      	movs	r2, #48	; 0x30
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f007 f895 	bl	8007708 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_DAC2_Init+0x6c>)
 80005e0:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_DAC2_Init+0x70>)
 80005e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80005e4:	4814      	ldr	r0, [pc, #80]	; (8000638 <MX_DAC2_Init+0x6c>)
 80005e6:	f002 fe9e 	bl	8003326 <HAL_DAC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80005f0:	f000 fc3d 	bl	8000e6e <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80005f4:	2302      	movs	r3, #2
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000604:	2306      	movs	r3, #6
 8000606:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000610:	2301      	movs	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_DAC2_Init+0x6c>)
 8000620:	f002 fffe 	bl	8003620 <HAL_DAC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800062a:	f000 fc20 	bl	8000e6e <Error_Handler>
  }

}
 800062e:	bf00      	nop
 8000630:	3730      	adds	r7, #48	; 0x30
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200020e8 	.word	0x200020e8
 800063c:	50000c00 	.word	0x50000c00

08000640 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a56      	ldr	r2, [pc, #344]	; (80007b8 <HAL_DAC_MspInit+0x178>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d150      	bne.n	8000704 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000662:	4b56      	ldr	r3, [pc, #344]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a55      	ldr	r2, [pc, #340]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b53      	ldr	r3, [pc, #332]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b50      	ldr	r3, [pc, #320]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a4f      	ldr	r2, [pc, #316]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000692:	2330      	movs	r3, #48	; 0x30
 8000694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f003 fc62 	bl	8003f70 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80006ac:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006ae:	4a45      	ldr	r2, [pc, #276]	; (80007c4 <HAL_DAC_MspInit+0x184>)
 80006b0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80006b2:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006b4:	2206      	movs	r2, #6
 80006b6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006b8:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006ba:	2210      	movs	r2, #16
 80006bc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80006c4:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006dc:	2220      	movs	r2, #32
 80006de:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80006e6:	4836      	ldr	r0, [pc, #216]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006e8:	f003 f9d0 	bl	8003a8c <HAL_DMA_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80006f2:	f000 fbbc 	bl	8000e6e <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000702:	e054      	b.n	80007ae <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <HAL_DAC_MspInit+0x188>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d14f      	bne.n	80007ae <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f003 fc0c 	bl	8003f70 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <HAL_DAC_MspInit+0x190>)
 800075c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000760:	2229      	movs	r2, #41	; 0x29
 8000762:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000766:	2210      	movs	r2, #16
 8000768:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000784:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000788:	2220      	movs	r2, #32
 800078a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000794:	f003 f97a 	bl	8003a8c <HAL_DMA_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800079e:	f000 fb66 	bl	8000e6e <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6293      	str	r3, [r2, #40]	; 0x28
}
 80007ae:	bf00      	nop
 80007b0:	3730      	adds	r7, #48	; 0x30
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	50000800 	.word	0x50000800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	20002110 	.word	0x20002110
 80007c4:	4002001c 	.word	0x4002001c
 80007c8:	50000c00 	.word	0x50000c00
 80007cc:	20002170 	.word	0x20002170
 80007d0:	40020030 	.word	0x40020030

080007d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_DMA_Init+0x80>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <MX_DMA_Init+0x80>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6493      	str	r3, [r2, #72]	; 0x48
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_DMA_Init+0x80>)
 80007e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_DMA_Init+0x80>)
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_DMA_Init+0x80>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6493      	str	r3, [r2, #72]	; 0x48
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_DMA_Init+0x80>)
 8000800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	200b      	movs	r0, #11
 8000810:	f002 fd55 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000814:	200b      	movs	r0, #11
 8000816:	f002 fd6c 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200c      	movs	r0, #12
 8000820:	f002 fd4d 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000824:	200c      	movs	r0, #12
 8000826:	f002 fd64 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	200d      	movs	r0, #13
 8000830:	f002 fd45 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000834:	200d      	movs	r0, #13
 8000836:	f002 fd5c 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	200e      	movs	r0, #14
 8000840:	f002 fd3d 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000844:	200e      	movs	r0, #14
 8000846:	f002 fd54 	bl	80032f2 <HAL_NVIC_EnableIRQ>

}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <update_dc_bias_sweep+0x88>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d006      	beq.n	8000872 <update_dc_bias_sweep+0x1a>
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 800086e:	801a      	strh	r2, [r3, #0]
 8000870:	e005      	b.n	800087e <update_dc_bias_sweep+0x26>
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	3b01      	subs	r3, #1
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 800087c:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10a      	bne.n	800089c <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <update_dc_bias_sweep+0x90>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <update_dc_bias_sweep+0x3e>
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <update_dc_bias_sweep+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e002      	b.n	800089c <update_dc_bias_sweep+0x44>
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <update_dc_bias_sweep+0x90>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <update_dc_bias_sweep+0x52>
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <update_dc_bias_sweep+0x88>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b2:	d302      	bcc.n	80008ba <update_dc_bias_sweep+0x62>
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <update_dc_bias_sweep+0x88>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <update_dc_bias_sweep+0x90>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	2108      	movs	r1, #8
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f003 fcec 	bl	80042a4 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	2200      	movs	r2, #0
 80008d2:	2110      	movs	r1, #16
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <update_dc_bias_sweep+0x94>)
 80008d6:	f002 fe5d 	bl	8003594 <HAL_DAC_SetValue>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20001fd4 	.word	0x20001fd4
 80008e8:	20001fd8 	.word	0x20001fd8
 80008ec:	200020fc 	.word	0x200020fc

080008f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b64      	ldr	r3, [pc, #400]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a63      	ldr	r2, [pc, #396]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	4b5e      	ldr	r3, [pc, #376]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a5d      	ldr	r2, [pc, #372]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000924:	f043 0320 	orr.w	r3, r3, #32
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b5b      	ldr	r3, [pc, #364]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b58      	ldr	r3, [pc, #352]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a57      	ldr	r2, [pc, #348]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b55      	ldr	r3, [pc, #340]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b52      	ldr	r3, [pc, #328]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a51      	ldr	r2, [pc, #324]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b4f      	ldr	r3, [pc, #316]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGMODE_Pin|SG2_Pin|SG1_Pin|TRIGMUX1_Pin 
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 714e 	mov.w	r1, #824	; 0x338
 800096c:	484b      	ldr	r0, [pc, #300]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 800096e:	f003 fc99 	bl	80042a4 <HAL_GPIO_WritePin>
                          |TRIGMUX2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f003 fc93 	bl	80042a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SG0_Pin|DC_Pin|CS_Pin|RST_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f240 21c1 	movw	r1, #705	; 0x2c1
 8000984:	4846      	ldr	r0, [pc, #280]	; (8000aa0 <MX_GPIO_Init+0x1b0>)
 8000986:	f003 fc8d 	bl	80042a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN1_EXTI14_Pin|BTN2_EXTI15_Pin|ENC_EXTI2_Pin;
 800098a:	f24c 0304 	movw	r3, #49156	; 0xc004
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000990:	4b44      	ldr	r3, [pc, #272]	; (8000aa4 <MX_GPIO_Init+0x1b4>)
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	483f      	ldr	r0, [pc, #252]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 80009a0:	f003 fae6 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BTN3_EXTI0_Pin|BTN4_EXTI1_Pin;
 80009a4:	2303      	movs	r3, #3
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a8:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <MX_GPIO_Init+0x1b4>)
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	483c      	ldr	r0, [pc, #240]	; (8000aa8 <MX_GPIO_Init+0x1b8>)
 80009b8:	f003 fada 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80009bc:	2308      	movs	r3, #8
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4832      	ldr	r0, [pc, #200]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 80009d4:	f003 facc 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80009d8:	2308      	movs	r3, #8
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f003 fabd 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SG2_Pin|SG1_Pin|TRIGMUX1_Pin|TRIGMUX2_Pin;
 80009f6:	f44f 734c 	mov.w	r3, #816	; 0x330
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4823      	ldr	r0, [pc, #140]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 8000a10:	f003 faae 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SG0_Pin;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0x1b0>)
 8000a2c:	f003 faa0 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin|RST_Pin;
 8000a30:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <MX_GPIO_Init+0x1b0>)
 8000a4a:	f003 fa91 	bl	8003f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2006      	movs	r0, #6
 8000a54:	f002 fc33 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a58:	2006      	movs	r0, #6
 8000a5a:	f002 fc4a 	bl	80032f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2007      	movs	r0, #7
 8000a64:	f002 fc2b 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a68:	2007      	movs	r0, #7
 8000a6a:	f002 fc42 	bl	80032f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2008      	movs	r0, #8
 8000a74:	f002 fc23 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a78:	2008      	movs	r0, #8
 8000a7a:	f002 fc3a 	bl	80032f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2028      	movs	r0, #40	; 0x28
 8000a84:	f002 fc1b 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a88:	2028      	movs	r0, #40	; 0x28
 8000a8a:	f002 fc32 	bl	80032f2 <HAL_NVIC_EnableIRQ>

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48000800 	.word	0x48000800
 8000aa0:	48000400 	.word	0x48000400
 8000aa4:	10210000 	.word	0x10210000
 8000aa8:	48001400 	.word	0x48001400

08000aac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ab8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d013      	beq.n	8000aec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ac8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000acc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00b      	beq.n	8000aec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ad4:	e000      	b.n	8000ad8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ad6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ad8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f9      	beq.n	8000ad6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ae2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <LL_RNG_ReadRandData32>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData32
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RNGx->DR));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e009      	b.n	8000b3c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60ba      	str	r2, [r7, #8]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ffbb 	bl	8000aac <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbf1      	blt.n	8000b28 <_write+0x16>
  return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <update_tft>:

void update_tft()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af02      	add	r7, sp, #8
	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE

	  			uint16_t xr = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
	  			uint16_t yr = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	82bb      	strh	r3, [r7, #20]
	  			uint16_t radiusr = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
	  			uint16_t colourr = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
	  			xr = LL_RNG_ReadRandData32(RNG);
 8000b66:	4828      	ldr	r0, [pc, #160]	; (8000c08 <update_tft+0xb8>)
 8000b68:	f7ff ffc7 	bl	8000afa <LL_RNG_ReadRandData32>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	82fb      	strh	r3, [r7, #22]
	  			yr = LL_RNG_ReadRandData32(RNG);
 8000b70:	4825      	ldr	r0, [pc, #148]	; (8000c08 <update_tft+0xb8>)
 8000b72:	f7ff ffc2 	bl	8000afa <LL_RNG_ReadRandData32>
 8000b76:	4603      	mov	r3, r0
 8000b78:	82bb      	strh	r3, [r7, #20]
	  			radiusr = LL_RNG_ReadRandData32(RNG);
 8000b7a:	4823      	ldr	r0, [pc, #140]	; (8000c08 <update_tft+0xb8>)
 8000b7c:	f7ff ffbd 	bl	8000afa <LL_RNG_ReadRandData32>
 8000b80:	4603      	mov	r3, r0
 8000b82:	827b      	strh	r3, [r7, #18]
	  			colourr = LL_RNG_ReadRandData32(RNG);
 8000b84:	4820      	ldr	r0, [pc, #128]	; (8000c08 <update_tft+0xb8>)
 8000b86:	f7ff ffb8 	bl	8000afa <LL_RNG_ReadRandData32>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	823b      	strh	r3, [r7, #16]

	  			xr &= 0x01FF;
 8000b8e:	8afb      	ldrh	r3, [r7, #22]
 8000b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b94:	82fb      	strh	r3, [r7, #22]
	  			yr &= 0x01FF;
 8000b96:	8abb      	ldrh	r3, [r7, #20]
 8000b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b9c:	82bb      	strh	r3, [r7, #20]
	  			radiusr &= 0x001F;
 8000b9e:	8a7b      	ldrh	r3, [r7, #18]
 8000ba0:	f003 031f 	and.w	r3, r3, #31
 8000ba4:	827b      	strh	r3, [r7, #18]

	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 8000ba6:	8a7b      	ldrh	r3, [r7, #18]
 8000ba8:	085b      	lsrs	r3, r3, #1
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	8a3b      	ldrh	r3, [r7, #16]
 8000bae:	8ab9      	ldrh	r1, [r7, #20]
 8000bb0:	8af8      	ldrh	r0, [r7, #22]
 8000bb2:	f006 f81f 	bl	8006bf4 <ILI9341_Draw_Filled_Circle>

	  			char enc_buff[13] = "";
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	721a      	strb	r2, [r3, #8]
	  			snprintf(enc_buff, sizeof(enc_buff), "%d\n", new_enc_value);
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <update_tft+0xbc>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4638      	mov	r0, r7
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <update_tft+0xc0>)
 8000bcc:	210d      	movs	r1, #13
 8000bce:	f006 fe1f 	bl	8007810 <sniprintf>
	  			ILI9341_Draw_Text(enc_buff, 10, 20, BLACK, 5, WHITE);
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	2305      	movs	r3, #5
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2300      	movs	r3, #0
 8000be0:	2214      	movs	r2, #20
 8000be2:	210a      	movs	r1, #10
 8000be4:	f006 f928 	bl	8006e38 <ILI9341_Draw_Text>

	  			ILI9341_Draw_Text(control_pressed, 10, 60, BLACK, 5, WHITE);
 8000be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	2305      	movs	r3, #5
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	223c      	movs	r2, #60	; 0x3c
 8000bf6:	210a      	movs	r1, #10
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <update_tft+0xc4>)
 8000bfa:	f006 f91d 	bl	8006e38 <ILI9341_Draw_Text>
	  		//HAL_Delay(1);
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	50060800 	.word	0x50060800
 8000c0c:	20001fde 	.word	0x20001fde
 8000c10:	08008970 	.word	0x08008970
 8000c14:	20001fec 	.word	0x20001fec

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1e:	f000 fea0 	bl	8001962 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c22:	f000 f8b5 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c26:	f7ff fe63 	bl	80008f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2a:	f7ff fdd3 	bl	80007d4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000c2e:	f7ff fc85 	bl	800053c <MX_DAC1_Init>
  MX_DAC2_Init();
 8000c32:	f7ff fccb 	bl	80005cc <MX_DAC2_Init>
  MX_ADC1_Init();
 8000c36:	f7ff fb43 	bl	80002c0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000c3a:	f7ff fc25 	bl	8000488 <MX_COMP1_Init>
  MX_TIM2_Init();
 8000c3e:	f000 fc61 	bl	8001504 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000c42:	f000 fd57 	bl	80016f4 <MX_TIM17_Init>
  MX_SPI3_Init();
 8000c46:	f000 f94f 	bl	8000ee8 <MX_SPI3_Init>
  MX_RNG_Init();
 8000c4a:	f000 f93f 	bl	8000ecc <MX_RNG_Init>
  MX_TIM1_Init();
 8000c4e:	f000 fbe9 	bl	8001424 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000c52:	f000 fcc1 	bl	80015d8 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000c56:	f000 fd27 	bl	80016a8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	4a3f      	ldr	r2, [pc, #252]	; (8000d60 <main+0x148>)
 8000c64:	2100      	movs	r1, #0
 8000c66:	483f      	ldr	r0, [pc, #252]	; (8000d64 <main+0x14c>)
 8000c68:	f002 fbd2 	bl	8003410 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	483d      	ldr	r0, [pc, #244]	; (8000d64 <main+0x14c>)
 8000c70:	f002 fb7b 	bl	800336a <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000c74:	2300      	movs	r3, #0
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7c:	4a3a      	ldr	r2, [pc, #232]	; (8000d68 <main+0x150>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	483a      	ldr	r0, [pc, #232]	; (8000d6c <main+0x154>)
 8000c82:	f002 fbc5 	bl	8003410 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8000c86:	483a      	ldr	r0, [pc, #232]	; (8000d70 <main+0x158>)
 8000c88:	f005 f838 	bl	8005cfc <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2108      	movs	r1, #8
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f003 fb06 	bl	80042a4 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4835      	ldr	r0, [pc, #212]	; (8000d74 <main+0x15c>)
 8000c9e:	f003 fb01 	bl	80042a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4834      	ldr	r0, [pc, #208]	; (8000d78 <main+0x160>)
 8000ca8:	f003 fafc 	bl	80042a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4831      	ldr	r0, [pc, #196]	; (8000d78 <main+0x160>)
 8000cb2:	f003 faf7 	bl	80042a4 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8000cb6:	4831      	ldr	r0, [pc, #196]	; (8000d7c <main+0x164>)
 8000cb8:	f005 f84e 	bl	8005d58 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc2:	482d      	ldr	r0, [pc, #180]	; (8000d78 <main+0x160>)
 8000cc4:	f003 faee 	bl	80042a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cce:	482a      	ldr	r0, [pc, #168]	; (8000d78 <main+0x160>)
 8000cd0:	f003 fae8 	bl	80042a4 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4827      	ldr	r0, [pc, #156]	; (8000d78 <main+0x160>)
 8000cda:	f003 fae3 	bl	80042a4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8000cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce8:	f023 0307 	bic.w	r3, r3, #7
 8000cec:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8000cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf8:	f043 0305 	orr.w	r3, r3, #5
 8000cfc:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8000cfe:	4820      	ldr	r0, [pc, #128]	; (8000d80 <main+0x168>)
 8000d00:	f005 f82a 	bl	8005d58 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8000d04:	481f      	ldr	r0, [pc, #124]	; (8000d84 <main+0x16c>)
 8000d06:	f004 fff9 	bl	8005cfc <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim16);
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  ILI9341_Init();
 8000d0a:	f006 f9e3 	bl	80070d4 <ILI9341_Init>


	ILI9341_Fill_Screen(WHITE);
 8000d0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d12:	f006 fb83 	bl	800741c <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f006 f982 	bl	8007020 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2301      	movs	r3, #1
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2300      	movs	r3, #0
 8000d28:	220a      	movs	r2, #10
 8000d2a:	210a      	movs	r1, #10
 8000d2c:	4816      	ldr	r0, [pc, #88]	; (8000d88 <main+0x170>)
 8000d2e:	f006 f883 	bl	8006e38 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8000d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2214      	movs	r2, #20
 8000d40:	210a      	movs	r1, #10
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <main+0x174>)
 8000d44:	f006 f878 	bl	8006e38 <ILI9341_Draw_Text>
	HAL_Delay(2000);
 8000d48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d4c:	f000 fe7a 	bl	8001a44 <HAL_Delay>
	ILI9341_Fill_Screen(WHITE);
 8000d50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d54:	f006 fb62 	bl	800741c <ILI9341_Fill_Screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//printf("TFT\n");
	update_tft();
 8000d58:	f7ff fefa 	bl	8000b50 <update_tft>
 8000d5c:	e7fc      	b.n	8000d58 <main+0x140>
 8000d5e:	bf00      	nop
 8000d60:	20000004 	.word	0x20000004
 8000d64:	200020fc 	.word	0x200020fc
 8000d68:	20000fa4 	.word	0x20000fa4
 8000d6c:	200020e8 	.word	0x200020e8
 8000d70:	20002294 	.word	0x20002294
 8000d74:	48000400 	.word	0x48000400
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	200022e0 	.word	0x200022e0
 8000d80:	20002378 	.word	0x20002378
 8000d84:	2000232c 	.word	0x2000232c
 8000d88:	08008974 	.word	0x08008974
 8000d8c:	08008990 	.word	0x08008990

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0a8      	sub	sp, #160	; 0xa0
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d9a:	2238      	movs	r2, #56	; 0x38
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f006 fcb2 	bl	8007708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2254      	movs	r2, #84	; 0x54
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 fca4 	bl	8007708 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f003 faab 	bl	800431c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000dc6:	2322      	movs	r3, #34	; 0x22
 8000dc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000dec:	232a      	movs	r3, #42	; 0x2a
 8000dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fb2b 	bl	8004464 <HAL_RCC_OscConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e14:	f000 f82b 	bl	8000e6e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e18:	230f      	movs	r3, #15
 8000e1a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e24:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000e2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e32:	2108      	movs	r1, #8
 8000e34:	4618      	mov	r0, r3
 8000e36:	f003 fe2d 	bl	8004a94 <HAL_RCC_ClockConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e40:	f000 f815 	bl	8000e6e <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8000e44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e48:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 f80c 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e62:	f000 f804 	bl	8000e6e <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	37a0      	adds	r7, #160	; 0xa0
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_RNG_Enable>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f043 0204 	orr.w	r2, r3, #4
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40021000 	.word	0x40021000

08000ecc <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8000ed0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ed4:	f7ff ffe2 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <MX_RNG_Init+0x18>)
 8000eda:	f7ff ffcf 	bl	8000e7c <LL_RNG_Enable>

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	50060800 	.word	0x50060800

08000ee8 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_SPI3_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f06:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f36:	2207      	movs	r2, #7
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f42:	2208      	movs	r2, #8
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_SPI3_Init+0x74>)
 8000f48:	f004 f9e0 	bl	800530c <HAL_SPI_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f52:	f7ff ff8c 	bl	8000e6e <Error_Handler>
  }

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200021d0 	.word	0x200021d0
 8000f60:	40003c00 	.word	0x40003c00

08000f64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a2c      	ldr	r2, [pc, #176]	; (8001034 <HAL_SPI_MspInit+0xd0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d151      	bne.n	800102a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <HAL_SPI_MspInit+0xd4>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	4a2b      	ldr	r2, [pc, #172]	; (8001038 <HAL_SPI_MspInit+0xd4>)
 8000f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f90:	6593      	str	r3, [r2, #88]	; 0x58
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <HAL_SPI_MspInit+0xd4>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_SPI_MspInit+0xd4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a25      	ldr	r2, [pc, #148]	; (8001038 <HAL_SPI_MspInit+0xd4>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <HAL_SPI_MspInit+0xd4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <HAL_SPI_MspInit+0xd8>)
 8000fd4:	f002 ffcc 	bl	8003f70 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel4;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8000fda:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <HAL_SPI_MspInit+0xe0>)
 8000fdc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8001010:	f002 fd3c 	bl	8003a8c <HAL_DMA_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800101a:	f7ff ff28 	bl	8000e6e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8001022:	655a      	str	r2, [r3, #84]	; 0x54
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_SPI_MspInit+0xdc>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40003c00 	.word	0x40003c00
 8001038:	40021000 	.word	0x40021000
 800103c:	48000800 	.word	0x48000800
 8001040:	20002234 	.word	0x20002234
 8001044:	40020044 	.word	0x40020044

08001048 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001056:	6093      	str	r3, [r2, #8]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40007000 	.word	0x40007000

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x44>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x44>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	; 0x60
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x44>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x44>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800109e:	f7ff ffd3 	bl	8001048 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 fc80 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <EXTI0_IRQHandler+0x20>)
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <EXTI0_IRQHandler+0x24>)
 8001114:	6810      	ldr	r0, [r2, #0]
 8001116:	6018      	str	r0, [r3, #0]
 8001118:	7912      	ldrb	r2, [r2, #4]
 800111a:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <EXTI0_IRQHandler+0x28>)
 800111e:	f006 fb6f 	bl	8007800 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001122:	2001      	movs	r0, #1
 8001124:	f003 f8d6 	bl	80042d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20001fec 	.word	0x20001fec
 8001130:	080089a0 	.word	0x080089a0
 8001134:	080089a8 	.word	0x080089a8

08001138 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <EXTI1_IRQHandler+0x20>)
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <EXTI1_IRQHandler+0x24>)
 8001140:	6810      	ldr	r0, [r2, #0]
 8001142:	6018      	str	r0, [r3, #0]
 8001144:	7912      	ldrb	r2, [r2, #4]
 8001146:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <EXTI1_IRQHandler+0x28>)
 800114a:	f006 fb59 	bl	8007800 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800114e:	2002      	movs	r0, #2
 8001150:	f003 f8c0 	bl	80042d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20001fec 	.word	0x20001fec
 800115c:	080089b8 	.word	0x080089b8
 8001160:	080089c0 	.word	0x080089c0

08001164 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <EXTI2_IRQHandler+0x20>)
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <EXTI2_IRQHandler+0x24>)
 800116c:	cb03      	ldmia	r3!, {r0, r1}
 800116e:	6010      	str	r0, [r2, #0]
 8001170:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <EXTI2_IRQHandler+0x28>)
 8001174:	f006 fb44 	bl	8007800 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001178:	2004      	movs	r0, #4
 800117a:	f003 f8ab 	bl	80042d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20001fec 	.word	0x20001fec
 8001188:	080089d0 	.word	0x080089d0
 800118c:	080089d8 	.word	0x080089d8

08001190 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001196:	f002 fd9c 	bl	8003cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20002064 	.word	0x20002064

080011a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <DMA1_Channel2_IRQHandler+0x10>)
 80011aa:	f002 fd92 	bl	8003cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20002110 	.word	0x20002110

080011b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA1_Channel3_IRQHandler+0x10>)
 80011be:	f002 fd88 	bl	8003cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20002170 	.word	0x20002170

080011cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <DMA1_Channel4_IRQHandler+0x10>)
 80011d2:	f002 fd7e 	bl	8003cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20002234 	.word	0x20002234

080011e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80011ee:	f004 fe8f 	bl	8005f10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80011f4:	f004 fe8c 	bl	8005f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20001fec 	.word	0x20001fec
 8001200:	080089e8 	.word	0x080089e8
 8001204:	2000232c 	.word	0x2000232c
 8001208:	200023c4 	.word	0x200023c4

0800120c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8001210:	f7ff fb22 	bl	8000858 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	4293      	cmp	r3, r2
 800121e:	d305      	bcc.n	800122c <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 8001226:	8812      	ldrh	r2, [r2, #0]
 8001228:	4293      	cmp	r3, r2
 800122a:	d90a      	bls.n	8001242 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8001234:	f006 fa70 	bl	8007718 <iprintf>
		new_enc_value = TIM1->CNT;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8001240:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800124a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 800124e:	f004 fe5f 	bl	8005f10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001252:	4807      	ldr	r0, [pc, #28]	; (8001270 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 8001254:	f004 fe5c 	bl	8005f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40012c00 	.word	0x40012c00
 8001260:	20001fdc 	.word	0x20001fdc
 8001264:	080089ec 	.word	0x080089ec
 8001268:	20001fde 	.word	0x20001fde
 800126c:	2000232c 	.word	0x2000232c
 8001270:	200022e0 	.word	0x200022e0

08001274 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM2_IRQHandler+0x10>)
 800127a:	f004 fe49 	bl	8005f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20002378 	.word	0x20002378

08001288 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 800128c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001290:	4814      	ldr	r0, [pc, #80]	; (80012e4 <EXTI15_10_IRQHandler+0x5c>)
 8001292:	f002 ffef 	bl	8004274 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <EXTI15_10_IRQHandler+0x60>)
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <EXTI15_10_IRQHandler+0x64>)
 80012a0:	6810      	ldr	r0, [r2, #0]
 80012a2:	6018      	str	r0, [r3, #0]
 80012a4:	7912      	ldrb	r2, [r2, #4]
 80012a6:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <EXTI15_10_IRQHandler+0x68>)
 80012aa:	f006 faa9 	bl	8007800 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 80012ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b2:	480c      	ldr	r0, [pc, #48]	; (80012e4 <EXTI15_10_IRQHandler+0x5c>)
 80012b4:	f002 ffde 	bl	8004274 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d008      	beq.n	80012d0 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <EXTI15_10_IRQHandler+0x60>)
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <EXTI15_10_IRQHandler+0x6c>)
 80012c2:	6810      	ldr	r0, [r2, #0]
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	7912      	ldrb	r2, [r2, #4]
 80012c8:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 80012ca:	480b      	ldr	r0, [pc, #44]	; (80012f8 <EXTI15_10_IRQHandler+0x70>)
 80012cc:	f006 fa98 	bl	8007800 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012d4:	f002 fffe 	bl	80042d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012dc:	f002 fffa 	bl	80042d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	48000800 	.word	0x48000800
 80012e8:	20001fec 	.word	0x20001fec
 80012ec:	080089f4 	.word	0x080089f4
 80012f0:	080089fc 	.word	0x080089fc
 80012f4:	08008a0c 	.word	0x08008a0c
 80012f8:	08008a14 	.word	0x08008a14

080012fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
	}

return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135e:	605a      	str	r2, [r3, #4]
	return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_isatty>:

int _isatty(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	return 1;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
	return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <_sbrk+0x50>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x16>
		heap_end = &end;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <_sbrk+0x50>)
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <_sbrk+0x54>)
 80013b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <_sbrk+0x50>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <_sbrk+0x50>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	466a      	mov	r2, sp
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d907      	bls.n	80013da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013ca:	f006 f973 	bl	80076b4 <__errno>
 80013ce:	4602      	mov	r2, r0
 80013d0:	230c      	movs	r3, #12
 80013d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d8:	e006      	b.n	80013e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <_sbrk+0x50>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <_sbrk+0x50>)
 80013e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20001fe0 	.word	0x20001fe0
 80013f4:	20002418 	.word	0x20002418

080013f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <SystemInit+0x28>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001402:	4a07      	ldr	r2, [pc, #28]	; (8001420 <SystemInit+0x28>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SystemInit+0x28>)
 800140e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001412:	609a      	str	r2, [r3, #8]
#endif
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09a      	sub	sp, #104	; 0x68
 8001428:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800142a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f006 f968 	bl	8007708 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2234      	movs	r2, #52	; 0x34
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f006 f95c 	bl	8007708 <memset>

  htim1.Instance = TIM1;
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <MX_TIM1_Init+0xd8>)
 8001452:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <MX_TIM1_Init+0xdc>)
 8001454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <MX_TIM1_Init+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <MX_TIM1_Init+0xd8>)
 800145e:	2240      	movs	r2, #64	; 0x40
 8001460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_TIM1_Init+0xd8>)
 8001464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001468:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <MX_TIM1_Init+0xd8>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_TIM1_Init+0xd8>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_TIM1_Init+0xd8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800147c:	2303      	movs	r3, #3
 800147e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001480:	2300      	movs	r3, #0
 8001482:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001484:	2301      	movs	r3, #1
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001490:	2300      	movs	r3, #0
 8001492:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001494:	2301      	movs	r3, #1
 8001496:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014a4:	4619      	mov	r1, r3
 80014a6:	4815      	ldr	r0, [pc, #84]	; (80014fc <MX_TIM1_Init+0xd8>)
 80014a8:	f004 fc8c 	bl	8005dc4 <HAL_TIM_Encoder_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80014b2:	f7ff fcdc 	bl	8000e6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014c6:	4619      	mov	r1, r3
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_TIM1_Init+0xd8>)
 80014ca:	f005 fa05 	bl	80068d8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80014d4:	f7ff fccb 	bl	8000e6e <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_TIM1_Init+0xd8>)
 80014e6:	f005 fa8d 	bl	8006a04 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80014f0:	f7ff fcbd 	bl	8000e6e <Error_Handler>
  }

}
 80014f4:	bf00      	nop
 80014f6:	3768      	adds	r7, #104	; 0x68
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2000232c 	.word	0x2000232c
 8001500:	40012c00 	.word	0x40012c00

08001504 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <MX_TIM2_Init+0xd0>)
 8001534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001538:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MX_TIM2_Init+0xd0>)
 800153c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001540:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <MX_TIM2_Init+0xd0>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_TIM2_Init+0xd0>)
 800154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <MX_TIM2_Init+0xd0>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_TIM2_Init+0xd0>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800155c:	481d      	ldr	r0, [pc, #116]	; (80015d4 <MX_TIM2_Init+0xd0>)
 800155e:	f004 fb75 	bl	8005c4c <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001568:	f7ff fc81 	bl	8000e6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	4619      	mov	r1, r3
 8001578:	4816      	ldr	r0, [pc, #88]	; (80015d4 <MX_TIM2_Init+0xd0>)
 800157a:	f004 fe49 	bl	8006210 <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001584:	f7ff fc73 	bl	8000e6e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001588:	2305      	movs	r3, #5
 800158a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800158c:	2350      	movs	r3, #80	; 0x50
 800158e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_TIM2_Init+0xd0>)
 80015a0:	f004 ff26 	bl	80063f0 <HAL_TIM_SlaveConfigSynchro>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80015aa:	f7ff fc60 	bl	8000e6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_TIM2_Init+0xd0>)
 80015bc:	f005 f98c 	bl	80068d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80015c6:	f7ff fc52 	bl	8000e6e <Error_Handler>
  }

}
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	; 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20002378 	.word	0x20002378

080015d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b094      	sub	sp, #80	; 0x50
 80015dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2234      	movs	r2, #52	; 0x34
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f006 f882 	bl	8007708 <memset>

  htim8.Instance = TIM8;
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <MX_TIM8_Init+0xc8>)
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <MX_TIM8_Init+0xcc>)
 8001608:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <MX_TIM8_Init+0xc8>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <MX_TIM8_Init+0xc8>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <MX_TIM8_Init+0xc8>)
 8001618:	2201      	movs	r2, #1
 800161a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <MX_TIM8_Init+0xc8>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_TIM8_Init+0xc8>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_TIM8_Init+0xc8>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800162e:	481c      	ldr	r0, [pc, #112]	; (80016a0 <MX_TIM8_Init+0xc8>)
 8001630:	f004 fb0c 	bl	8005c4c <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800163a:	f7ff fc18 	bl	8000e6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001648:	4619      	mov	r1, r3
 800164a:	4815      	ldr	r0, [pc, #84]	; (80016a0 <MX_TIM8_Init+0xc8>)
 800164c:	f004 fde0 	bl	8006210 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001656:	f7ff fc0a 	bl	8000e6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800165a:	2320      	movs	r3, #32
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001666:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_TIM8_Init+0xc8>)
 800166e:	f005 f933 	bl	80068d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001678:	f7ff fbf9 	bl	8000e6e <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_TIM8_Init+0xc8>)
 800168a:	f005 f9bb 	bl	8006a04 <HAL_TIMEx_ConfigBreakDeadTime>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001694:	f7ff fbeb 	bl	8000e6e <Error_Handler>
  }

}
 8001698:	bf00      	nop
 800169a:	3750      	adds	r7, #80	; 0x50
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20002294 	.word	0x20002294
 80016a4:	40013400 	.word	0x40013400

080016a8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_TIM16_Init+0x44>)
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <MX_TIM16_Init+0x48>)
 80016b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_TIM16_Init+0x44>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_TIM16_Init+0x44>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_TIM16_Init+0x44>)
 80016c0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80016c4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_TIM16_Init+0x44>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_TIM16_Init+0x44>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_TIM16_Init+0x44>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_TIM16_Init+0x44>)
 80016da:	f004 fab7 	bl	8005c4c <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80016e4:	f7ff fbc3 	bl	8000e6e <Error_Handler>
  }

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200023c4 	.word	0x200023c4
 80016f0:	40014400 	.word	0x40014400

080016f4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_TIM17_Init+0x44>)
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <MX_TIM17_Init+0x48>)
 80016fc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2047;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_TIM17_Init+0x44>)
 8001700:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001704:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_TIM17_Init+0x44>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <MX_TIM17_Init+0x44>)
 800170e:	2240      	movs	r2, #64	; 0x40
 8001710:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_TIM17_Init+0x44>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <MX_TIM17_Init+0x44>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_TIM17_Init+0x44>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	; (8001738 <MX_TIM17_Init+0x44>)
 8001726:	f004 fa91 	bl	8005c4c <HAL_TIM_Base_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001730:	f7ff fb9d 	bl	8000e6e <Error_Handler>
  }

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200022e0 	.word	0x200022e0
 800173c:	40014800 	.word	0x40014800

08001740 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <HAL_TIM_Encoder_MspInit+0x9c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d137      	bne.n	80017d2 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001766:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800176c:	6613      	str	r3, [r2, #96]	; 0x60
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xa0>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001792:	2303      	movs	r3, #3
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80017a2:	2302      	movs	r3, #2
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xa4>)
 80017ae:	f002 fbdf 	bl	8003f70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2101      	movs	r1, #1
 80017b6:	2019      	movs	r0, #25
 80017b8:	f001 fd81 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017bc:	2019      	movs	r0, #25
 80017be:	f001 fd98 	bl	80032f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2101      	movs	r1, #1
 80017c6:	201a      	movs	r0, #26
 80017c8:	f001 fd79 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80017cc:	201a      	movs	r0, #26
 80017ce:	f001 fd90 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40012c00 	.word	0x40012c00
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000800 	.word	0x48000800

080017e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	; 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001808:	d131      	bne.n	800186e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a36      	ldr	r2, [pc, #216]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800183a:	2301      	movs	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800184a:	2301      	movs	r3, #1
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f002 fb8a 	bl	8003f70 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2101      	movs	r1, #1
 8001860:	201c      	movs	r0, #28
 8001862:	f001 fd2c 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001866:	201c      	movs	r0, #28
 8001868:	f001 fd43 	bl	80032f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800186c:	e044      	b.n	80018f8 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM8)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a24      	ldr	r2, [pc, #144]	; (8001904 <HAL_TIM_Base_MspInit+0x11c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d10c      	bne.n	8001892 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 800187a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 800187e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001882:	6613      	str	r3, [r2, #96]	; 0x60
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 8001886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
}
 8001890:	e032      	b.n	80018f8 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM16)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_TIM_Base_MspInit+0x120>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d114      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 800189e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a6:	6613      	str	r3, [r2, #96]	; 0x60
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2101      	movs	r1, #1
 80018b8:	2019      	movs	r0, #25
 80018ba:	f001 fd00 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018be:	2019      	movs	r0, #25
 80018c0:	f001 fd17 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 80018c4:	e018      	b.n	80018f8 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM17)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_TIM_Base_MspInit+0x124>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d113      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018da:	6613      	str	r3, [r2, #96]	; 0x60
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2101      	movs	r1, #1
 80018ec:	201a      	movs	r0, #26
 80018ee:	f001 fce6 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80018f2:	201a      	movs	r0, #26
 80018f4:	f001 fcfd 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 80018f8:	bf00      	nop
 80018fa:	3730      	adds	r7, #48	; 0x30
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	40013400 	.word	0x40013400
 8001908:	40014400 	.word	0x40014400
 800190c:	40014800 	.word	0x40014800

08001910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001910:	480d      	ldr	r0, [pc, #52]	; (8001948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001912:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <LoopForever+0x6>)
  ldr r1, =_edata
 8001916:	490e      	ldr	r1, [pc, #56]	; (8001950 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <LoopForever+0xe>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <LoopForever+0x12>)
  ldr r4, =_ebss
 800192c:	4c0b      	ldr	r4, [pc, #44]	; (800195c <LoopForever+0x16>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800193a:	f7ff fd5d 	bl	80013f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f005 febf 	bl	80076c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001942:	f7ff f969 	bl	8000c18 <main>

08001946 <LoopForever>:

LoopForever:
    b LoopForever
 8001946:	e7fe      	b.n	8001946 <LoopForever>
  ldr   r0, =_estack
 8001948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001950:	20001fb8 	.word	0x20001fb8
  ldr r2, =_sidata
 8001954:	08008d14 	.word	0x08008d14
  ldr r2, =_sbss
 8001958:	20001fb8 	.word	0x20001fb8
  ldr r4, =_ebss
 800195c:	20002418 	.word	0x20002418

08001960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC1_2_IRQHandler>

08001962 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f001 fc9b 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f80e 	bl	8001994 <HAL_InitTick>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	e001      	b.n	8001988 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001984:	f7ff fb70 	bl	8001068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001988:	79fb      	ldrb	r3, [r7, #7]

}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_InitTick+0x68>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d022      	beq.n	80019ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_InitTick+0x6c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_InitTick+0x68>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	f001 fca6 	bl	800330e <HAL_SYSTICK_Config>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10f      	bne.n	80019e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	d809      	bhi.n	80019e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ce:	2200      	movs	r2, #0
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d6:	f001 fc72 	bl	80032be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_InitTick+0x70>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e007      	b.n	80019f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e004      	b.n	80019f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e001      	b.n	80019f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20001f4c 	.word	0x20001f4c
 8001a00:	20001f44 	.word	0x20001f44
 8001a04:	20001f48 	.word	0x20001f48

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_IncTick+0x1c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x20>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <HAL_IncTick+0x1c>)
 8001a18:	6013      	str	r3, [r2, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	20002410 	.word	0x20002410
 8001a28:	20001f4c 	.word	0x20001f4c

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20002410 	.word	0x20002410

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a5c:	d004      	beq.n	8001a68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_Delay+0x40>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a68:	bf00      	nop
 8001a6a:	f7ff ffdf 	bl	8001a2c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d8f7      	bhi.n	8001a6a <HAL_Delay+0x26>
  {
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20001f4c 	.word	0x20001f4c

08001a88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001af0:	b490      	push	{r4, r7}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3360      	adds	r3, #96	; 0x60
 8001b02:	461a      	mov	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <LL_ADC_SetOffset+0x40>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b22:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc90      	pop	{r4, r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	03fff000 	.word	0x03fff000

08001b34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b34:	b490      	push	{r4, r7}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3360      	adds	r3, #96	; 0x60
 8001b42:	461a      	mov	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc90      	pop	{r4, r7}
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b5c:	b490      	push	{r4, r7}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3360      	adds	r3, #96	; 0x60
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc90      	pop	{r4, r7}
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b8c:	b490      	push	{r4, r7}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3360      	adds	r3, #96	; 0x60
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc90      	pop	{r4, r7}
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001bbc:	b490      	push	{r4, r7}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3360      	adds	r3, #96	; 0x60
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc90      	pop	{r4, r7}
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	615a      	str	r2, [r3, #20]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c12:	b490      	push	{r4, r7}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3330      	adds	r3, #48	; 0x30
 8001c22:	461a      	mov	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	4413      	add	r3, r2
 8001c30:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c32:	6822      	ldr	r2, [r4, #0]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	211f      	movs	r1, #31
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0e9b      	lsrs	r3, r3, #26
 8001c48:	f003 011f 	and.w	r1, r3, #31
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc90      	pop	{r4, r7}
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c64:	b490      	push	{r4, r7}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3314      	adds	r3, #20
 8001c74:	461a      	mov	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	0e5b      	lsrs	r3, r3, #25
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	4413      	add	r3, r2
 8001c82:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c84:	6822      	ldr	r2, [r4, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	0d1b      	lsrs	r3, r3, #20
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	2107      	movs	r1, #7
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	401a      	ands	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0d1b      	lsrs	r3, r3, #20
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc90      	pop	{r4, r7}
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	401a      	ands	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0318 	and.w	r3, r3, #24
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cd8:	40d9      	lsrs	r1, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	400b      	ands	r3, r1
 8001cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	0007ffff 	.word	0x0007ffff

08001cfc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6093      	str	r3, [r2, #8]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d84:	d101      	bne.n	8001d8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <LL_ADC_IsEnabled+0x18>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <LL_ADC_IsEnabled+0x1a>
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d101      	bne.n	8001dd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d101      	bne.n	8001dfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e1ad      	b.n	8002182 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d109      	bne.n	8001e48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7fe fabb 	bl	80003b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff67 	bl	8001d20 <LL_ADC_IsDeepPowerDownEnabled>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff4d 	bl	8001cfc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff82 	bl	8001d70 <LL_ADC_IsInternalRegulatorEnabled>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d113      	bne.n	8001e9a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff66 	bl	8001d48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e7c:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <HAL_ADC_Init+0x2ec>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	4a9e      	ldr	r2, [pc, #632]	; (80020fc <HAL_ADC_Init+0x2f0>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f9      	bne.n	8001e8e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff66 	bl	8001d70 <LL_ADC_IsInternalRegulatorEnabled>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	f043 0210 	orr.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff77 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
 8001ed0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 8148 	bne.w	8002170 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 8144 	bne.w	8002170 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ef0:	f043 0202 	orr.w	r2, r3, #2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff4b 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d141      	bne.n	8001f8c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f10:	d004      	beq.n	8001f1c <HAL_ADC_Init+0x110>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7a      	ldr	r2, [pc, #488]	; (8002100 <HAL_ADC_Init+0x2f4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d10f      	bne.n	8001f3c <HAL_ADC_Init+0x130>
 8001f1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f20:	f7ff ff3a 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f24:	4604      	mov	r4, r0
 8001f26:	4876      	ldr	r0, [pc, #472]	; (8002100 <HAL_ADC_Init+0x2f4>)
 8001f28:	f7ff ff36 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	e012      	b.n	8001f62 <HAL_ADC_Init+0x156>
 8001f3c:	4871      	ldr	r0, [pc, #452]	; (8002104 <HAL_ADC_Init+0x2f8>)
 8001f3e:	f7ff ff2b 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f42:	4604      	mov	r4, r0
 8001f44:	4870      	ldr	r0, [pc, #448]	; (8002108 <HAL_ADC_Init+0x2fc>)
 8001f46:	f7ff ff27 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	431c      	orrs	r4, r3
 8001f4e:	486f      	ldr	r0, [pc, #444]	; (800210c <HAL_ADC_Init+0x300>)
 8001f50:	f7ff ff22 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4323      	orrs	r3, r4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d012      	beq.n	8001f8c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f6e:	d004      	beq.n	8001f7a <HAL_ADC_Init+0x16e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a62      	ldr	r2, [pc, #392]	; (8002100 <HAL_ADC_Init+0x2f4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Init+0x172>
 8001f7a:	4a65      	ldr	r2, [pc, #404]	; (8002110 <HAL_ADC_Init+0x304>)
 8001f7c:	e000      	b.n	8001f80 <HAL_ADC_Init+0x174>
 8001f7e:	4a65      	ldr	r2, [pc, #404]	; (8002114 <HAL_ADC_Init+0x308>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f7ff fd7e 	bl	8001a88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7f5b      	ldrb	r3, [r3, #29]
 8001f90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fa2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001faa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d106      	bne.n	8001fc8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	045b      	lsls	r3, r3, #17
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <HAL_ADC_Init+0x30c>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fed3 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
 8002018:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fee0 	bl	8001de4 <LL_ADC_INJ_IsConversionOngoing>
 8002024:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d17f      	bne.n	800212c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d17c      	bne.n	800212c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002036:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800203e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800204e:	f023 0302 	bic.w	r3, r3, #2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	430b      	orrs	r3, r1
 800205a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d017      	beq.n	8002094 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002072:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800207c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6911      	ldr	r1, [r2, #16]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002092:	e013      	b.n	80020bc <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d12a      	bne.n	800211c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020dc:	4311      	orrs	r1, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020e8:	430a      	orrs	r2, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	e019      	b.n	800212c <HAL_ADC_Init+0x320>
 80020f8:	20001f44 	.word	0x20001f44
 80020fc:	053e2d63 	.word	0x053e2d63
 8002100:	50000100 	.word	0x50000100
 8002104:	50000400 	.word	0x50000400
 8002108:	50000500 	.word	0x50000500
 800210c:	50000600 	.word	0x50000600
 8002110:	50000300 	.word	0x50000300
 8002114:	50000700 	.word	0x50000700
 8002118:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10c      	bne.n	800214e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f023 010f 	bic.w	r1, r3, #15
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	1e5a      	subs	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
 800214c:	e007      	b.n	800215e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 020f 	bic.w	r2, r2, #15
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	65da      	str	r2, [r3, #92]	; 0x5c
 800216e:	e007      	b.n	8002180 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	f043 0210 	orr.w	r2, r3, #16
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002180:	7ffb      	ldrb	r3, [r7, #31]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd90      	pop	{r4, r7, pc}
 800218a:	bf00      	nop

0800218c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0a6      	sub	sp, #152	; 0x98
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x22>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e38e      	b.n	80028cc <HAL_ADC_ConfigChannel+0x740>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fdff 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 836f 	bne.w	80028a6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	f7ff fd1c 	bl	8001c12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fded 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
 80021e4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fdf9 	bl	8001de4 <LL_ADC_INJ_IsConversionOngoing>
 80021f2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 817b 	bne.w	80024f6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 8176 	bne.w	80024f6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002212:	d10f      	bne.n	8002234 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	f7ff fd20 	bl	8001c64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fcdd 	bl	8001bec <LL_ADC_SetSamplingTimeCommonConfig>
 8002232:	e00e      	b.n	8002252 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	461a      	mov	r2, r3
 8002242:	f7ff fd0f 	bl	8001c64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fccd 	bl	8001bec <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d022      	beq.n	80022ba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6919      	ldr	r1, [r3, #16]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002284:	f7ff fc34 	bl	8001af0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6919      	ldr	r1, [r3, #16]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	461a      	mov	r2, r3
 8002296:	f7ff fc79 	bl	8001b8c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6919      	ldr	r1, [r3, #16]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7f1b      	ldrb	r3, [r3, #28]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x124>
 80022aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ae:	e000      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x126>
 80022b0:	2300      	movs	r3, #0
 80022b2:	461a      	mov	r2, r3
 80022b4:	f7ff fc82 	bl	8001bbc <LL_ADC_SetOffsetSaturation>
 80022b8:	e11d      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fc37 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x15a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fc2c 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	0e9b      	lsrs	r3, r3, #26
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	e012      	b.n	800230c <HAL_ADC_ConfigChannel+0x180>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fc21 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x198>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	e00a      	b.n	800233a <HAL_ADC_ConfigChannel+0x1ae>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	429a      	cmp	r2, r3
 800233c:	d106      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fc08 	bl	8001b5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fbee 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1ec>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fbe3 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	0e9b      	lsrs	r3, r3, #26
 8002372:	f003 021f 	and.w	r2, r3, #31
 8002376:	e010      	b.n	800239a <HAL_ADC_ConfigChannel+0x20e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fbd8 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002384:	4603      	mov	r3, r0
 8002386:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x226>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	e00a      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x23c>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80023c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fbc1 	bl	8001b5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2102      	movs	r1, #2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fba7 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x27a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2102      	movs	r1, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fb9c 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	e010      	b.n	8002428 <HAL_ADC_ConfigChannel+0x29c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2102      	movs	r1, #2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fb91 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800241e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x2b4>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0e9b      	lsrs	r3, r3, #26
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	e00a      	b.n	8002456 <HAL_ADC_ConfigChannel+0x2ca>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800244e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	429a      	cmp	r2, r3
 8002458:	d106      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	2102      	movs	r1, #2
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fb7a 	bl	8001b5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2103      	movs	r1, #3
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fb60 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x308>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2103      	movs	r1, #3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb55 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	f003 021f 	and.w	r2, r3, #31
 8002492:	e010      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x32a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2103      	movs	r1, #3
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fb4a 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x342>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	e00a      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x358>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80024dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d106      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2103      	movs	r1, #3
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fb33 	bl	8001b5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fc4c 	bl	8001d98 <LL_ADC_IsEnabled>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 810c 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	461a      	mov	r2, r3
 8002516:	f7ff fbcd 	bl	8001cb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4aaf      	ldr	r2, [pc, #700]	; (80027dc <HAL_ADC_ConfigChannel+0x650>)
 8002520:	4293      	cmp	r3, r2
 8002522:	f040 80fd 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <HAL_ADC_ConfigChannel+0x3c2>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	3301      	adds	r3, #1
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2b09      	cmp	r3, #9
 8002544:	bf94      	ite	ls
 8002546:	2301      	movls	r3, #1
 8002548:	2300      	movhi	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e012      	b.n	8002574 <HAL_ADC_ConfigChannel+0x3e8>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800255c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2b09      	cmp	r3, #9
 800256c:	bf94      	ite	ls
 800256e:	2301      	movls	r3, #1
 8002570:	2300      	movhi	r3, #0
 8002572:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002574:	2b00      	cmp	r3, #0
 8002576:	d064      	beq.n	8002642 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002580:	2b00      	cmp	r3, #0
 8002582:	d107      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x408>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	3301      	adds	r3, #1
 800258c:	069b      	lsls	r3, r3, #26
 800258e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002592:	e00e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x426>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	069b      	lsls	r3, r3, #26
 80025ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x446>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	e010      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x468>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	ea42 0103 	orr.w	r1, r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_ADC_ConfigChannel+0x48e>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	3301      	adds	r3, #1
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	051b      	lsls	r3, r3, #20
 8002618:	e011      	b.n	800263e <HAL_ADC_ConfigChannel+0x4b2>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f003 021f 	and.w	r2, r3, #31
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800263e:	430b      	orrs	r3, r1
 8002640:	e069      	b.n	8002716 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264a:	2b00      	cmp	r3, #0
 800264c:	d107      	bne.n	800265e <HAL_ADC_ConfigChannel+0x4d2>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	3301      	adds	r3, #1
 8002656:	069b      	lsls	r3, r3, #26
 8002658:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800265c:	e00e      	b.n	800267c <HAL_ADC_ConfigChannel+0x4f0>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	61fb      	str	r3, [r7, #28]
  return result;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	069b      	lsls	r3, r3, #26
 8002678:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_ADC_ConfigChannel+0x510>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	3301      	adds	r3, #1
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	e010      	b.n	80026be <HAL_ADC_ConfigChannel+0x532>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	617b      	str	r3, [r7, #20]
  return result;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2101      	movs	r1, #1
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	ea42 0103 	orr.w	r1, r2, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10d      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x55e>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	3301      	adds	r3, #1
 80026d6:	f003 021f 	and.w	r2, r3, #31
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	3b1e      	subs	r3, #30
 80026e2:	051b      	lsls	r3, r3, #20
 80026e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e8:	e014      	b.n	8002714 <HAL_ADC_ConfigChannel+0x588>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	60fb      	str	r3, [r7, #12]
  return result;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3301      	adds	r3, #1
 8002702:	f003 021f 	and.w	r2, r3, #31
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	3b1e      	subs	r3, #30
 800270e:	051b      	lsls	r3, r3, #20
 8002710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002714:	430b      	orrs	r3, r1
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	6892      	ldr	r2, [r2, #8]
 800271a:	4619      	mov	r1, r3
 800271c:	f7ff faa2 	bl	8001c64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <HAL_ADC_ConfigChannel+0x654>)
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80c9 	beq.w	80028c0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002736:	d004      	beq.n	8002742 <HAL_ADC_ConfigChannel+0x5b6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <HAL_ADC_ConfigChannel+0x658>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x5ba>
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_ADC_ConfigChannel+0x65c>)
 8002744:	e000      	b.n	8002748 <HAL_ADC_ConfigChannel+0x5bc>
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_ADC_ConfigChannel+0x660>)
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f9c3 	bl	8001ad4 <LL_ADC_GetCommonPathInternalCh>
 800274e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <HAL_ADC_ConfigChannel+0x664>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_ADC_ConfigChannel+0x5da>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <HAL_ADC_ConfigChannel+0x668>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d14e      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800276a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d148      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800277a:	d005      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x5fc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1d      	ldr	r2, [pc, #116]	; (80027f8 <HAL_ADC_ConfigChannel+0x66c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	f040 8099 	bne.w	80028ba <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002790:	d004      	beq.n	800279c <HAL_ADC_ConfigChannel+0x610>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <HAL_ADC_ConfigChannel+0x658>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x614>
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <HAL_ADC_ConfigChannel+0x65c>)
 800279e:	e000      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x616>
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_ADC_ConfigChannel+0x660>)
 80027a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027aa:	4619      	mov	r1, r3
 80027ac:	4610      	mov	r0, r2
 80027ae:	f7ff f97e 	bl	8001aae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_ADC_ConfigChannel+0x670>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	099b      	lsrs	r3, r3, #6
 80027b8:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_ADC_ConfigChannel+0x674>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	099a      	lsrs	r2, r3, #6
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027ca:	e002      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f9      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d8:	e06f      	b.n	80028ba <HAL_ADC_ConfigChannel+0x72e>
 80027da:	bf00      	nop
 80027dc:	407f0000 	.word	0x407f0000
 80027e0:	80080000 	.word	0x80080000
 80027e4:	50000100 	.word	0x50000100
 80027e8:	50000300 	.word	0x50000300
 80027ec:	50000700 	.word	0x50000700
 80027f0:	c3210000 	.word	0xc3210000
 80027f4:	90c00010 	.word	0x90c00010
 80027f8:	50000600 	.word	0x50000600
 80027fc:	20001f44 	.word	0x20001f44
 8002800:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a32      	ldr	r2, [pc, #200]	; (80028d4 <HAL_ADC_ConfigChannel+0x748>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d125      	bne.n	800285a <HAL_ADC_ConfigChannel+0x6ce>
 800280e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11f      	bne.n	800285a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_ADC_ConfigChannel+0x74c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d104      	bne.n	800282e <HAL_ADC_ConfigChannel+0x6a2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2c      	ldr	r2, [pc, #176]	; (80028dc <HAL_ADC_ConfigChannel+0x750>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d047      	beq.n	80028be <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002836:	d004      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x6b6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <HAL_ADC_ConfigChannel+0x74c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x6ba>
 8002842:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <HAL_ADC_ConfigChannel+0x754>)
 8002844:	e000      	b.n	8002848 <HAL_ADC_ConfigChannel+0x6bc>
 8002846:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <HAL_ADC_ConfigChannel+0x758>)
 8002848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f7ff f92b 	bl	8001aae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002858:	e031      	b.n	80028be <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <HAL_ADC_ConfigChannel+0x75c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d12d      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d127      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_ADC_ConfigChannel+0x74c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d022      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002882:	d004      	beq.n	800288e <HAL_ADC_ConfigChannel+0x702>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <HAL_ADC_ConfigChannel+0x74c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x706>
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_ADC_ConfigChannel+0x754>)
 8002890:	e000      	b.n	8002894 <HAL_ADC_ConfigChannel+0x708>
 8002892:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_ADC_ConfigChannel+0x758>)
 8002894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f7ff f905 	bl	8001aae <LL_ADC_SetCommonPathInternalCh>
 80028a4:	e00c      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	f043 0220 	orr.w	r2, r3, #32
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3798      	adds	r7, #152	; 0x98
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	c7520000 	.word	0xc7520000
 80028d8:	50000100 	.word	0x50000100
 80028dc:	50000500 	.word	0x50000500
 80028e0:	50000300 	.word	0x50000300
 80028e4:	50000700 	.word	0x50000700
 80028e8:	cb840000 	.word	0xcb840000

080028ec <LL_ADC_IsEnabled>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <LL_ADC_IsEnabled+0x18>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <LL_ADC_IsEnabled+0x1a>
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_ADC_REG_IsConversionOngoing>:
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d101      	bne.n	800292a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b0a1      	sub	sp, #132	; 0x84
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002952:	2302      	movs	r3, #2
 8002954:	e0e3      	b.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002966:	d102      	bne.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002968:	4b6f      	ldr	r3, [pc, #444]	; (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	e009      	b.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6e      	ldr	r2, [pc, #440]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d102      	bne.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002978:	4b6d      	ldr	r3, [pc, #436]	; (8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	e001      	b.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0be      	b.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ffb5 	bl	8002912 <LL_ADC_REG_IsConversionOngoing>
 80029a8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ffaf 	bl	8002912 <LL_ADC_REG_IsConversionOngoing>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 80a0 	bne.w	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 809c 	bne.w	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029cc:	d004      	beq.n	80029d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a55      	ldr	r2, [pc, #340]	; (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80029d8:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029da:	e000      	b.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80029dc:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029de:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d04b      	beq.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029fa:	035b      	lsls	r3, r3, #13
 80029fc:	430b      	orrs	r3, r1
 80029fe:	431a      	orrs	r2, r3
 8002a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a0c:	d004      	beq.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a45      	ldr	r2, [pc, #276]	; (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10f      	bne.n	8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002a18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a1c:	f7ff ff66 	bl	80028ec <LL_ADC_IsEnabled>
 8002a20:	4604      	mov	r4, r0
 8002a22:	4841      	ldr	r0, [pc, #260]	; (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002a24:	f7ff ff62 	bl	80028ec <LL_ADC_IsEnabled>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4323      	orrs	r3, r4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e012      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002a38:	483c      	ldr	r0, [pc, #240]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002a3a:	f7ff ff57 	bl	80028ec <LL_ADC_IsEnabled>
 8002a3e:	4604      	mov	r4, r0
 8002a40:	483b      	ldr	r0, [pc, #236]	; (8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a42:	f7ff ff53 	bl	80028ec <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	431c      	orrs	r4, r3
 8002a4a:	483c      	ldr	r0, [pc, #240]	; (8002b3c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a4c:	f7ff ff4e 	bl	80028ec <LL_ADC_IsEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4323      	orrs	r3, r4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d056      	beq.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a6a:	f023 030f 	bic.w	r3, r3, #15
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	6811      	ldr	r1, [r2, #0]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	6892      	ldr	r2, [r2, #8]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a7e:	e047      	b.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a94:	d004      	beq.n	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002aa0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002aa4:	f7ff ff22 	bl	80028ec <LL_ADC_IsEnabled>
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	481f      	ldr	r0, [pc, #124]	; (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002aac:	f7ff ff1e 	bl	80028ec <LL_ADC_IsEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4323      	orrs	r3, r4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e012      	b.n	8002ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002ac0:	481a      	ldr	r0, [pc, #104]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002ac2:	f7ff ff13 	bl	80028ec <LL_ADC_IsEnabled>
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	4819      	ldr	r0, [pc, #100]	; (8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002aca:	f7ff ff0f 	bl	80028ec <LL_ADC_IsEnabled>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	431c      	orrs	r4, r3
 8002ad2:	481a      	ldr	r0, [pc, #104]	; (8002b3c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002ad4:	f7ff ff0a 	bl	80028ec <LL_ADC_IsEnabled>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4323      	orrs	r3, r4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d012      	beq.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002af2:	f023 030f 	bic.w	r3, r3, #15
 8002af6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002af8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002afa:	e009      	b.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b0e:	e000      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3784      	adds	r7, #132	; 0x84
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}
 8002b26:	bf00      	nop
 8002b28:	50000100 	.word	0x50000100
 8002b2c:	50000400 	.word	0x50000400
 8002b30:	50000500 	.word	0x50000500
 8002b34:	50000300 	.word	0x50000300
 8002b38:	50000700 	.word	0x50000700
 8002b3c:	50000600 	.word	0x50000600

08002b40 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <LL_EXTI_EnableIT_0_31+0x20>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4904      	ldr	r1, [pc, #16]	; (8002b60 <LL_EXTI_EnableIT_0_31+0x20>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40010400 	.word	0x40010400

08002b64 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <LL_EXTI_EnableIT_32_63+0x20>)
 8002b6e:	6a1a      	ldr	r2, [r3, #32]
 8002b70:	4904      	ldr	r1, [pc, #16]	; (8002b84 <LL_EXTI_EnableIT_32_63+0x20>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	620b      	str	r3, [r1, #32]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40010400 	.word	0x40010400

08002b88 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <LL_EXTI_DisableIT_0_31+0x24>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	4904      	ldr	r1, [pc, #16]	; (8002bac <LL_EXTI_DisableIT_0_31+0x24>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40010400 	.word	0x40010400

08002bb0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	620b      	str	r3, [r1, #32]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	4904      	ldr	r1, [pc, #16]	; (8002bf8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]

}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40010400 	.word	0x40010400

08002bfc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c08:	4904      	ldr	r1, [pc, #16]	; (8002c1c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40010400 	.word	0x40010400

08002c20 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	4904      	ldr	r1, [pc, #16]	; (8002c44 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40010400 	.word	0x40010400

08002c48 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	4904      	ldr	r1, [pc, #16]	; (8002c6c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40010400 	.word	0x40010400

08002c70 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	4904      	ldr	r1, [pc, #16]	; (8002c90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	608b      	str	r3, [r1, #8]

}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40010400 	.word	0x40010400

08002c94 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca0:	4904      	ldr	r1, [pc, #16]	; (8002cb4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	4904      	ldr	r1, [pc, #16]	; (8002cdc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]

}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	4904      	ldr	r1, [pc, #16]	; (8002d04 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40010400 	.word	0x40010400

08002d08 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	4904      	ldr	r1, [pc, #16]	; (8002d28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40010400 	.word	0x40010400

08002d2c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	4904      	ldr	r1, [pc, #16]	; (8002d4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	40010400 	.word	0x40010400

08002d50 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	4904      	ldr	r1, [pc, #16]	; (8002d74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	60cb      	str	r3, [r1, #12]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010400 	.word	0x40010400

08002d78 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	4904      	ldr	r1, [pc, #16]	; (8002d9c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010400 	.word	0x40010400

08002da0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002da8:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6153      	str	r3, [r2, #20]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <LL_EXTI_ClearFlag_32_63+0x1c>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	77fb      	strb	r3, [r7, #31]
 8002dfa:	e180      	b.n	80030fe <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e0a:	d102      	bne.n	8002e12 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	77fb      	strb	r3, [r7, #31]
 8002e10:	e175      	b.n	80030fe <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7f5b      	ldrb	r3, [r3, #29]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d108      	bne.n	8002e2e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7fd fb55 	bl	80004d8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e38:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b98      	ldr	r3, [pc, #608]	; (80030c0 <HAL_COMP_Init+0x2e0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	6979      	ldr	r1, [r7, #20]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d015      	beq.n	8002ea6 <HAL_COMP_Init+0xc6>
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d112      	bne.n	8002ea6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e80:	4b90      	ldr	r3, [pc, #576]	; (80030c4 <HAL_COMP_Init+0x2e4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	4a90      	ldr	r2, [pc, #576]	; (80030c8 <HAL_COMP_Init+0x2e8>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	099a      	lsrs	r2, r3, #6
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002e98:	e002      	b.n	8002ea0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a88      	ldr	r2, [pc, #544]	; (80030cc <HAL_COMP_Init+0x2ec>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d028      	beq.n	8002f02 <HAL_COMP_Init+0x122>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a86      	ldr	r2, [pc, #536]	; (80030d0 <HAL_COMP_Init+0x2f0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d020      	beq.n	8002efc <HAL_COMP_Init+0x11c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a85      	ldr	r2, [pc, #532]	; (80030d4 <HAL_COMP_Init+0x2f4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_COMP_Init+0x116>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a83      	ldr	r2, [pc, #524]	; (80030d8 <HAL_COMP_Init+0x2f8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d010      	beq.n	8002ef0 <HAL_COMP_Init+0x110>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a82      	ldr	r2, [pc, #520]	; (80030dc <HAL_COMP_Init+0x2fc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d008      	beq.n	8002eea <HAL_COMP_Init+0x10a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a80      	ldr	r2, [pc, #512]	; (80030e0 <HAL_COMP_Init+0x300>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_COMP_Init+0x106>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <HAL_COMP_Init+0x126>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e00d      	b.n	8002f06 <HAL_COMP_Init+0x126>
 8002eea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002eee:	e00a      	b.n	8002f06 <HAL_COMP_Init+0x126>
 8002ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ef4:	e007      	b.n	8002f06 <HAL_COMP_Init+0x126>
 8002ef6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002efa:	e004      	b.n	8002f06 <HAL_COMP_Init+0x126>
 8002efc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f00:	e001      	b.n	8002f06 <HAL_COMP_Init+0x126>
 8002f02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f06:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80b6 	beq.w	8003082 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d011      	beq.n	8002f46 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_COMP_Init+0x300>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d004      	beq.n	8002f36 <HAL_COMP_Init+0x156>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6c      	ldr	r2, [pc, #432]	; (80030e4 <HAL_COMP_Init+0x304>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d103      	bne.n	8002f3e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8002f36:	6938      	ldr	r0, [r7, #16]
 8002f38:	f7ff feac 	bl	8002c94 <LL_EXTI_EnableRisingTrig_32_63>
 8002f3c:	e014      	b.n	8002f68 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002f3e:	6938      	ldr	r0, [r7, #16]
 8002f40:	f7ff fe96 	bl	8002c70 <LL_EXTI_EnableRisingTrig_0_31>
 8002f44:	e010      	b.n	8002f68 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a65      	ldr	r2, [pc, #404]	; (80030e0 <HAL_COMP_Init+0x300>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_COMP_Init+0x17a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a63      	ldr	r2, [pc, #396]	; (80030e4 <HAL_COMP_Init+0x304>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d103      	bne.n	8002f62 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8002f5a:	6938      	ldr	r0, [r7, #16]
 8002f5c:	f7ff fec0 	bl	8002ce0 <LL_EXTI_DisableRisingTrig_32_63>
 8002f60:	e002      	b.n	8002f68 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002f62:	6938      	ldr	r0, [r7, #16]
 8002f64:	f7ff fea8 	bl	8002cb8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d011      	beq.n	8002f98 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a59      	ldr	r2, [pc, #356]	; (80030e0 <HAL_COMP_Init+0x300>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_COMP_Init+0x1a8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <HAL_COMP_Init+0x304>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d103      	bne.n	8002f90 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8002f88:	6938      	ldr	r0, [r7, #16]
 8002f8a:	f7ff fecf 	bl	8002d2c <LL_EXTI_EnableFallingTrig_32_63>
 8002f8e:	e014      	b.n	8002fba <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002f90:	6938      	ldr	r0, [r7, #16]
 8002f92:	f7ff feb9 	bl	8002d08 <LL_EXTI_EnableFallingTrig_0_31>
 8002f96:	e010      	b.n	8002fba <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a50      	ldr	r2, [pc, #320]	; (80030e0 <HAL_COMP_Init+0x300>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_COMP_Init+0x1cc>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a4f      	ldr	r2, [pc, #316]	; (80030e4 <HAL_COMP_Init+0x304>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d103      	bne.n	8002fb4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8002fac:	6938      	ldr	r0, [r7, #16]
 8002fae:	f7ff fee3 	bl	8002d78 <LL_EXTI_DisableFallingTrig_32_63>
 8002fb2:	e002      	b.n	8002fba <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002fb4:	6938      	ldr	r0, [r7, #16]
 8002fb6:	f7ff fecb 	bl	8002d50 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a48      	ldr	r2, [pc, #288]	; (80030e0 <HAL_COMP_Init+0x300>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_COMP_Init+0x1ee>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a46      	ldr	r2, [pc, #280]	; (80030e4 <HAL_COMP_Init+0x304>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d103      	bne.n	8002fd6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8002fce:	6938      	ldr	r0, [r7, #16]
 8002fd0:	f7ff fef6 	bl	8002dc0 <LL_EXTI_ClearFlag_32_63>
 8002fd4:	e002      	b.n	8002fdc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8002fd6:	6938      	ldr	r0, [r7, #16]
 8002fd8:	f7ff fee2 	bl	8002da0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d011      	beq.n	800300c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <HAL_COMP_Init+0x300>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_COMP_Init+0x21c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	; (80030e4 <HAL_COMP_Init+0x304>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8002ffc:	6938      	ldr	r0, [r7, #16]
 8002ffe:	f7ff fdfd 	bl	8002bfc <LL_EXTI_EnableEvent_32_63>
 8003002:	e014      	b.n	800302e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8003004:	6938      	ldr	r0, [r7, #16]
 8003006:	f7ff fde7 	bl	8002bd8 <LL_EXTI_EnableEvent_0_31>
 800300a:	e010      	b.n	800302e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a33      	ldr	r2, [pc, #204]	; (80030e0 <HAL_COMP_Init+0x300>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_COMP_Init+0x240>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a32      	ldr	r2, [pc, #200]	; (80030e4 <HAL_COMP_Init+0x304>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d103      	bne.n	8003028 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003020:	6938      	ldr	r0, [r7, #16]
 8003022:	f7ff fe11 	bl	8002c48 <LL_EXTI_DisableEvent_32_63>
 8003026:	e002      	b.n	800302e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003028:	6938      	ldr	r0, [r7, #16]
 800302a:	f7ff fdf9 	bl	8002c20 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d011      	beq.n	800305e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <HAL_COMP_Init+0x300>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_COMP_Init+0x26e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <HAL_COMP_Init+0x304>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d103      	bne.n	8003056 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800304e:	6938      	ldr	r0, [r7, #16]
 8003050:	f7ff fd88 	bl	8002b64 <LL_EXTI_EnableIT_32_63>
 8003054:	e04b      	b.n	80030ee <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003056:	6938      	ldr	r0, [r7, #16]
 8003058:	f7ff fd72 	bl	8002b40 <LL_EXTI_EnableIT_0_31>
 800305c:	e047      	b.n	80030ee <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <HAL_COMP_Init+0x300>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_COMP_Init+0x292>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_COMP_Init+0x304>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d103      	bne.n	800307a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003072:	6938      	ldr	r0, [r7, #16]
 8003074:	f7ff fd9c 	bl	8002bb0 <LL_EXTI_DisableIT_32_63>
 8003078:	e039      	b.n	80030ee <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800307a:	6938      	ldr	r0, [r7, #16]
 800307c:	f7ff fd84 	bl	8002b88 <LL_EXTI_DisableIT_0_31>
 8003080:	e035      	b.n	80030ee <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_COMP_Init+0x300>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_COMP_Init+0x2b6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_COMP_Init+0x304>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d103      	bne.n	800309e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003096:	6938      	ldr	r0, [r7, #16]
 8003098:	f7ff fdd6 	bl	8002c48 <LL_EXTI_DisableEvent_32_63>
 800309c:	e002      	b.n	80030a4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800309e:	6938      	ldr	r0, [r7, #16]
 80030a0:	f7ff fdbe 	bl	8002c20 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0d      	ldr	r2, [pc, #52]	; (80030e0 <HAL_COMP_Init+0x300>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_COMP_Init+0x2d8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <HAL_COMP_Init+0x304>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d117      	bne.n	80030e8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80030b8:	6938      	ldr	r0, [r7, #16]
 80030ba:	f7ff fd79 	bl	8002bb0 <LL_EXTI_DisableIT_32_63>
 80030be:	e016      	b.n	80030ee <HAL_COMP_Init+0x30e>
 80030c0:	ff007e0f 	.word	0xff007e0f
 80030c4:	20001f44 	.word	0x20001f44
 80030c8:	053e2d63 	.word	0x053e2d63
 80030cc:	40010200 	.word	0x40010200
 80030d0:	40010204 	.word	0x40010204
 80030d4:	40010208 	.word	0x40010208
 80030d8:	4001020c 	.word	0x4001020c
 80030dc:	40010210 	.word	0x40010210
 80030e0:	40010214 	.word	0x40010214
 80030e4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80030e8:	6938      	ldr	r0, [r7, #16]
 80030ea:	f7ff fd4d 	bl	8002b88 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7f5b      	ldrb	r3, [r3, #29]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <__NVIC_SetPriorityGrouping>:
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	; (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	; (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	; (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	; 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <SysTick_Config>:
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003274:	d301      	bcc.n	800327a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003276:	2301      	movs	r3, #1
 8003278:	e00f      	b.n	800329a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <SysTick_Config+0x40>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003282:	210f      	movs	r1, #15
 8003284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003288:	f7ff ff8e 	bl	80031a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <SysTick_Config+0x40>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <SysTick_Config+0x40>)
 8003294:	2207      	movs	r2, #7
 8003296:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000e010 	.word	0xe000e010

080032a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff29 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032cc:	f7ff ff40 	bl	8003150 <__NVIC_GetPriorityGrouping>
 80032d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f7ff ff90 	bl	80031fc <NVIC_EncodePriority>
 80032dc:	4602      	mov	r2, r0
 80032de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff5f 	bl	80031a8 <__NVIC_SetPriority>
}
 80032ea:	bf00      	nop
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff33 	bl	800316c <__NVIC_EnableIRQ>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffa4 	bl	8003264 <SysTick_Config>
 800331c:	4603      	mov	r3, r0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e014      	b.n	8003362 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	791b      	ldrb	r3, [r3, #4]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fd f979 	bl	8000640 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	795b      	ldrb	r3, [r3, #5]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_DAC_Start+0x16>
 800337c:	2302      	movs	r3, #2
 800337e:	e043      	b.n	8003408 <HAL_DAC_Start+0x9e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2201      	movs	r2, #1
 800339a:	409a      	lsls	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80033a4:	2001      	movs	r0, #1
 80033a6:	f7fe fb4d 	bl	8001a44 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10f      	bne.n	80033d0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d11d      	bne.n	80033fa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	e014      	b.n	80033fa <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2102      	movs	r1, #2
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d107      	bne.n	80033fa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0202 	orr.w	r2, r2, #2
 80033f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	795b      	ldrb	r3, [r3, #5]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_DAC_Start_DMA+0x1e>
 800342a:	2302      	movs	r3, #2
 800342c:	e0a1      	b.n	8003572 <HAL_DAC_Start_DMA+0x162>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2202      	movs	r2, #2
 8003438:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d12a      	bne.n	8003496 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a4d      	ldr	r2, [pc, #308]	; (800357c <HAL_DAC_Start_DMA+0x16c>)
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_DAC_Start_DMA+0x170>)
 800344e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a4b      	ldr	r2, [pc, #300]	; (8003584 <HAL_DAC_Start_DMA+0x174>)
 8003456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003466:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	2b04      	cmp	r3, #4
 800346c:	d009      	beq.n	8003482 <HAL_DAC_Start_DMA+0x72>
 800346e:	2b08      	cmp	r3, #8
 8003470:	d00c      	beq.n	800348c <HAL_DAC_Start_DMA+0x7c>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d000      	beq.n	8003478 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003476:	e039      	b.n	80034ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3308      	adds	r3, #8
 800347e:	613b      	str	r3, [r7, #16]
        break;
 8003480:	e034      	b.n	80034ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	613b      	str	r3, [r7, #16]
        break;
 800348a:	e02f      	b.n	80034ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3310      	adds	r3, #16
 8003492:	613b      	str	r3, [r7, #16]
        break;
 8003494:	e02a      	b.n	80034ec <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	4a3b      	ldr	r2, [pc, #236]	; (8003588 <HAL_DAC_Start_DMA+0x178>)
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4a3a      	ldr	r2, [pc, #232]	; (800358c <HAL_DAC_Start_DMA+0x17c>)
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <HAL_DAC_Start_DMA+0x180>)
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034bc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d009      	beq.n	80034d8 <HAL_DAC_Start_DMA+0xc8>
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d00c      	beq.n	80034e2 <HAL_DAC_Start_DMA+0xd2>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d000      	beq.n	80034ce <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80034cc:	e00e      	b.n	80034ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3314      	adds	r3, #20
 80034d4:	613b      	str	r3, [r7, #16]
        break;
 80034d6:	e009      	b.n	80034ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3318      	adds	r3, #24
 80034de:	613b      	str	r3, [r7, #16]
        break;
 80034e0:	e004      	b.n	80034ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	331c      	adds	r3, #28
 80034e8:	613b      	str	r3, [r7, #16]
        break;
 80034ea:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d111      	bne.n	8003516 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003500:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6898      	ldr	r0, [r3, #8]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	f000 fb66 	bl	8003bdc <HAL_DMA_Start_IT>
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]
 8003514:	e010      	b.n	8003538 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003524:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68d8      	ldr	r0, [r3, #12]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	f000 fb54 	bl	8003bdc <HAL_DMA_Start_IT>
 8003534:	4603      	mov	r3, r0
 8003536:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10f      	bne.n	8003564 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2201      	movs	r2, #1
 8003552:	409a      	lsls	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800355c:	2001      	movs	r0, #1
 800355e:	f7fe fa71 	bl	8001a44 <HAL_Delay>
 8003562:	e005      	b.n	8003570 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	08003979 	.word	0x08003979
 8003580:	0800399b 	.word	0x0800399b
 8003584:	080039b7 	.word	0x080039b7
 8003588:	08003a21 	.word	0x08003a21
 800358c:	08003a43 	.word	0x08003a43
 8003590:	08003a5f 	.word	0x08003a5f

08003594 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	3308      	adds	r3, #8
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	e004      	b.n	80035ce <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	3314      	adds	r3, #20
 80035cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	461a      	mov	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	795b      	ldrb	r3, [r3, #5]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_DAC_ConfigChannel+0x1c>
 8003638:	2302      	movs	r3, #2
 800363a:	e194      	b.n	8003966 <HAL_DAC_ConfigChannel+0x346>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2202      	movs	r2, #2
 8003646:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d174      	bne.n	800373a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d137      	bne.n	80036c6 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003656:	f7fe f9e9 	bl	8001a2c <HAL_GetTick>
 800365a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800365c:	e011      	b.n	8003682 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800365e:	f7fe f9e5 	bl	8001a2c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d90a      	bls.n	8003682 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f043 0208 	orr.w	r2, r3, #8
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2203      	movs	r2, #3
 800367c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e171      	b.n	8003966 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e6      	bne.n	800365e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003690:	2001      	movs	r0, #1
 8003692:	f7fe f9d7 	bl	8001a44 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
 80036a0:	e01e      	b.n	80036e0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036a2:	f7fe f9c3 	bl	8001a2c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d90a      	bls.n	80036c6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f043 0208 	orr.w	r2, r3, #8
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2203      	movs	r2, #3
 80036c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e14f      	b.n	8003966 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	dbe8      	blt.n	80036a2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80036d0:	2001      	movs	r0, #1
 80036d2:	f7fe f9b7 	bl	8001a44 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	ea02 0103 	and.w	r1, r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	409a      	lsls	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	21ff      	movs	r1, #255	; 0xff
 800371c:	fa01 f303 	lsl.w	r3, r1, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	ea02 0103 	and.w	r1, r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d11d      	bne.n	800377e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	221f      	movs	r2, #31
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375a:	4013      	ands	r3, r2
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003772:	4313      	orrs	r3, r2
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2207      	movs	r2, #7
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003796:	4013      	ands	r3, r2
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	e011      	b.n	80037d0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80037b8:	2301      	movs	r3, #1
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	e008      	b.n	80037d0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80037c6:	2301      	movs	r3, #1
 80037c8:	623b      	str	r3, [r7, #32]
 80037ca:	e001      	b.n	80037d0 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	6a3a      	ldr	r2, [r7, #32]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f2:	4013      	ands	r3, r2
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	791b      	ldrb	r3, [r3, #4]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HAL_DAC_ConfigChannel+0x1e4>
 80037fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003802:	e000      	b.n	8003806 <HAL_DAC_ConfigChannel+0x1e6>
 8003804:	2300      	movs	r3, #0
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	4013      	ands	r3, r2
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	795b      	ldrb	r3, [r3, #5]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d102      	bne.n	8003830 <HAL_DAC_ConfigChannel+0x210>
 800382a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800382e:	e000      	b.n	8003832 <HAL_DAC_ConfigChannel+0x212>
 8003830:	2300      	movs	r3, #0
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d114      	bne.n	8003872 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003848:	f001 fac2 	bl	8004dd0 <HAL_RCC_GetHCLKFreq>
 800384c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4a47      	ldr	r2, [pc, #284]	; (8003970 <HAL_DAC_ConfigChannel+0x350>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d904      	bls.n	8003860 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
 800385e:	e00d      	b.n	800387c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4a44      	ldr	r2, [pc, #272]	; (8003974 <HAL_DAC_ConfigChannel+0x354>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d909      	bls.n	800387c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
 8003870:	e004      	b.n	800387c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003878:	4313      	orrs	r3, r2
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	4313      	orrs	r3, r2
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6819      	ldr	r1, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	400a      	ands	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	4013      	ands	r3, r2
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	4313      	orrs	r3, r2
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	22c0      	movs	r2, #192	; 0xc0
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43da      	mvns	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	400a      	ands	r2, r1
 800390c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	f640 710f 	movw	r1, #3855	; 0xf0f
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	ea02 0103 	and.w	r1, r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3728      	adds	r7, #40	; 0x28
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	09896800 	.word	0x09896800
 8003974:	04c4b400 	.word	0x04c4b400

08003978 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7ff fe2c 	bl	80035e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	711a      	strb	r2, [r3, #4]
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff fe25 	bl	80035f8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7ff fe1b 	bl	800360c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	711a      	strb	r2, [r3, #4]
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7ff ffd8 	bl	80039e4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	711a      	strb	r2, [r3, #4]
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff ffd1 	bl	80039f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f043 0204 	orr.w	r2, r3, #4
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7ff ffc7 	bl	8003a0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	711a      	strb	r2, [r3, #4]
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e08d      	b.n	8003bba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_DMA_Init+0x138>)
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d80f      	bhi.n	8003aca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b45      	ldr	r3, [pc, #276]	; (8003bc8 <HAL_DMA_Init+0x13c>)
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a45      	ldr	r2, [pc, #276]	; (8003bcc <HAL_DMA_Init+0x140>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	009a      	lsls	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a42      	ldr	r2, [pc, #264]	; (8003bd0 <HAL_DMA_Init+0x144>)
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ac8:	e00e      	b.n	8003ae8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b40      	ldr	r3, [pc, #256]	; (8003bd4 <HAL_DMA_Init+0x148>)
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a3d      	ldr	r2, [pc, #244]	; (8003bcc <HAL_DMA_Init+0x140>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	009a      	lsls	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a3c      	ldr	r2, [pc, #240]	; (8003bd8 <HAL_DMA_Init+0x14c>)
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9b6 	bl	8003eac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b48:	d102      	bne.n	8003b50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d010      	beq.n	8003b90 <HAL_DMA_Init+0x104>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d80c      	bhi.n	8003b90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f9d6 	bl	8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e008      	b.n	8003ba2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40020407 	.word	0x40020407
 8003bc8:	bffdfff8 	.word	0xbffdfff8
 8003bcc:	cccccccd 	.word	0xcccccccd
 8003bd0:	40020000 	.word	0x40020000
 8003bd4:	bffdfbf8 	.word	0xbffdfbf8
 8003bd8:	40020400 	.word	0x40020400

08003bdc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_DMA_Start_IT+0x20>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e066      	b.n	8003cca <HAL_DMA_Start_IT+0xee>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d155      	bne.n	8003cbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f8fb 	bl	8003e30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 020e 	orr.w	r2, r2, #14
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e00f      	b.n	8003c74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 020a 	orr.w	r2, r2, #10
 8003c72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e005      	b.n	8003cc8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d026      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x7a>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d021      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0204 	bic.w	r2, r2, #4
 8003d24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f003 021f 	and.w	r2, r3, #31
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2104      	movs	r1, #4
 8003d34:	fa01 f202 	lsl.w	r2, r1, r2
 8003d38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d071      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d4a:	e06c      	b.n	8003e26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	2202      	movs	r2, #2
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02e      	beq.n	8003dbe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d029      	beq.n	8003dbe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 020a 	bic.w	r2, r2, #10
 8003d86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003da2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d038      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003dbc:	e033      	b.n	8003e26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d02a      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d025      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 020e 	bic.w	r2, r2, #14
 8003dea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f003 021f 	and.w	r2, r3, #31
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
}
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f003 021f 	and.w	r2, r3, #31
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d108      	bne.n	8003e90 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e8e:	e007      	b.n	8003ea0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	60da      	str	r2, [r3, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d802      	bhi.n	8003ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e001      	b.n	8003eca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ec8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	3b08      	subs	r3, #8
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ef6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2201      	movs	r2, #1
 8003f00:	409a      	lsls	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40020407 	.word	0x40020407
 8003f18:	40020800 	.word	0x40020800
 8003f1c:	40020820 	.word	0x40020820
 8003f20:	cccccccd 	.word	0xcccccccd
 8003f24:	40020880 	.word	0x40020880

08003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f4a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	2201      	movs	r2, #1
 8003f56:	409a      	lsls	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	1000823f 	.word	0x1000823f
 8003f6c:	40020940 	.word	0x40020940

08003f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f7e:	e15a      	b.n	8004236 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 814c 	beq.w	8004230 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_GPIO_Init+0x48>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d007      	beq.n	8003fb8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fac:	2b11      	cmp	r3, #17
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b12      	cmp	r3, #18
 8003fb6:	d130      	bne.n	800401a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fee:	2201      	movs	r2, #1
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	f003 0201 	and.w	r2, r3, #1
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2203      	movs	r2, #3
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0xea>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b12      	cmp	r3, #18
 8004058:	d123      	bne.n	80040a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	08da      	lsrs	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3208      	adds	r2, #8
 8004062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	220f      	movs	r2, #15
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	08da      	lsrs	r2, r3, #3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3208      	adds	r2, #8
 800409c:	6939      	ldr	r1, [r7, #16]
 800409e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	2203      	movs	r2, #3
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4013      	ands	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0203 	and.w	r2, r3, #3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80a6 	beq.w	8004230 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e4:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <HAL_GPIO_Init+0x2e4>)
 80040e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e8:	4a5a      	ldr	r2, [pc, #360]	; (8004254 <HAL_GPIO_Init+0x2e4>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6613      	str	r3, [r2, #96]	; 0x60
 80040f0:	4b58      	ldr	r3, [pc, #352]	; (8004254 <HAL_GPIO_Init+0x2e4>)
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040fc:	4a56      	ldr	r2, [pc, #344]	; (8004258 <HAL_GPIO_Init+0x2e8>)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	089b      	lsrs	r3, r3, #2
 8004102:	3302      	adds	r3, #2
 8004104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	220f      	movs	r2, #15
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4013      	ands	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004126:	d01f      	beq.n	8004168 <HAL_GPIO_Init+0x1f8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a4c      	ldr	r2, [pc, #304]	; (800425c <HAL_GPIO_Init+0x2ec>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d019      	beq.n	8004164 <HAL_GPIO_Init+0x1f4>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a4b      	ldr	r2, [pc, #300]	; (8004260 <HAL_GPIO_Init+0x2f0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <HAL_GPIO_Init+0x1f0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_GPIO_Init+0x2f4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00d      	beq.n	800415c <HAL_GPIO_Init+0x1ec>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a49      	ldr	r2, [pc, #292]	; (8004268 <HAL_GPIO_Init+0x2f8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d007      	beq.n	8004158 <HAL_GPIO_Init+0x1e8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a48      	ldr	r2, [pc, #288]	; (800426c <HAL_GPIO_Init+0x2fc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d101      	bne.n	8004154 <HAL_GPIO_Init+0x1e4>
 8004150:	2305      	movs	r3, #5
 8004152:	e00a      	b.n	800416a <HAL_GPIO_Init+0x1fa>
 8004154:	2306      	movs	r3, #6
 8004156:	e008      	b.n	800416a <HAL_GPIO_Init+0x1fa>
 8004158:	2304      	movs	r3, #4
 800415a:	e006      	b.n	800416a <HAL_GPIO_Init+0x1fa>
 800415c:	2303      	movs	r3, #3
 800415e:	e004      	b.n	800416a <HAL_GPIO_Init+0x1fa>
 8004160:	2302      	movs	r3, #2
 8004162:	e002      	b.n	800416a <HAL_GPIO_Init+0x1fa>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_GPIO_Init+0x1fa>
 8004168:	2300      	movs	r3, #0
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	f002 0203 	and.w	r2, r2, #3
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	4093      	lsls	r3, r2
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800417a:	4937      	ldr	r1, [pc, #220]	; (8004258 <HAL_GPIO_Init+0x2e8>)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	3302      	adds	r3, #2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004188:	4b39      	ldr	r3, [pc, #228]	; (8004270 <HAL_GPIO_Init+0x300>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43db      	mvns	r3, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041ac:	4a30      	ldr	r2, [pc, #192]	; (8004270 <HAL_GPIO_Init+0x300>)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80041b2:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <HAL_GPIO_Init+0x300>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041d6:	4a26      	ldr	r2, [pc, #152]	; (8004270 <HAL_GPIO_Init+0x300>)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041dc:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_GPIO_Init+0x300>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004200:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_GPIO_Init+0x300>)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004206:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <HAL_GPIO_Init+0x300>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	43db      	mvns	r3, r3
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4013      	ands	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800422a:	4a11      	ldr	r2, [pc, #68]	; (8004270 <HAL_GPIO_Init+0x300>)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3301      	adds	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f ae9d 	bne.w	8003f80 <HAL_GPIO_Init+0x10>
  }
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	40010000 	.word	0x40010000
 800425c:	48000400 	.word	0x48000400
 8004260:	48000800 	.word	0x48000800
 8004264:	48000c00 	.word	0x48000c00
 8004268:	48001000 	.word	0x48001000
 800426c:	48001400 	.word	0x48001400
 8004270:	40010400 	.word	0x40010400

08004274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	887b      	ldrh	r3, [r7, #2]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	e001      	b.n	8004296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	807b      	strh	r3, [r7, #2]
 80042b0:	4613      	mov	r3, r2
 80042b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b4:	787b      	ldrb	r3, [r7, #1]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042ba:	887a      	ldrh	r2, [r7, #2]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042c0:	e002      	b.n	80042c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042c2:	887a      	ldrh	r2, [r7, #2]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d006      	beq.n	80042f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ea:	4a05      	ldr	r2, [pc, #20]	; (8004300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f806 	bl	8004304 <HAL_GPIO_EXTI_Callback>
  }
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40010400 	.word	0x40010400

08004304 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d141      	bne.n	80043ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800432a:	4b4b      	ldr	r3, [pc, #300]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004336:	d131      	bne.n	800439c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004338:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433e:	4a46      	ldr	r2, [pc, #280]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004344:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004348:	4b43      	ldr	r3, [pc, #268]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004350:	4a41      	ldr	r2, [pc, #260]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004356:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004358:	4b40      	ldr	r3, [pc, #256]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2232      	movs	r2, #50	; 0x32
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	4a3f      	ldr	r2, [pc, #252]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	0c9b      	lsrs	r3, r3, #18
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800436e:	e002      	b.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b01      	subs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004376:	4b38      	ldr	r3, [pc, #224]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004382:	d102      	bne.n	800438a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f2      	bne.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800438a:	4b33      	ldr	r3, [pc, #204]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004396:	d158      	bne.n	800444a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e057      	b.n	800444c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800439c:	4b2e      	ldr	r3, [pc, #184]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a2:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043ac:	e04d      	b.n	800444a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b4:	d141      	bne.n	800443a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043b6:	4b28      	ldr	r3, [pc, #160]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c2:	d131      	bne.n	8004428 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ca:	4a23      	ldr	r2, [pc, #140]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d4:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043dc:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2232      	movs	r2, #50	; 0x32
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	0c9b      	lsrs	r3, r3, #18
 80043f6:	3301      	adds	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fa:	e002      	b.n	8004402 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3b01      	subs	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	d102      	bne.n	8004416 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f2      	bne.n	80043fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d112      	bne.n	800444a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e011      	b.n	800444c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004438:	e007      	b.n	800444a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004442:	4a05      	ldr	r2, [pc, #20]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004448:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40007000 	.word	0x40007000
 800445c:	20001f44 	.word	0x20001f44
 8004460:	431bde83 	.word	0x431bde83

08004464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e308      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d075      	beq.n	800456e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004482:	4ba3      	ldr	r3, [pc, #652]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800448c:	4ba0      	ldr	r3, [pc, #640]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d102      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3e>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d002      	beq.n	80044a8 <HAL_RCC_OscConfig+0x44>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d10b      	bne.n	80044c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	4b99      	ldr	r3, [pc, #612]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05b      	beq.n	800456c <HAL_RCC_OscConfig+0x108>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d157      	bne.n	800456c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e2e3      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c8:	d106      	bne.n	80044d8 <HAL_RCC_OscConfig+0x74>
 80044ca:	4b91      	ldr	r3, [pc, #580]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a90      	ldr	r2, [pc, #576]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e01d      	b.n	8004514 <HAL_RCC_OscConfig+0xb0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x98>
 80044e2:	4b8b      	ldr	r3, [pc, #556]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a8a      	ldr	r2, [pc, #552]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b88      	ldr	r3, [pc, #544]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a87      	ldr	r2, [pc, #540]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_OscConfig+0xb0>
 80044fc:	4b84      	ldr	r3, [pc, #528]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a83      	ldr	r2, [pc, #524]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4b81      	ldr	r3, [pc, #516]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a80      	ldr	r2, [pc, #512]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 800450e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fa86 	bl	8001a2c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fd fa82 	bl	8001a2c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e2a8      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004536:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0xc0>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fd fa72 	bl	8001a2c <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fd fa6e 	bl	8001a2c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e294      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800455e:	4b6c      	ldr	r3, [pc, #432]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0xe8>
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d075      	beq.n	8004666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800457a:	4b65      	ldr	r3, [pc, #404]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004584:	4b62      	ldr	r3, [pc, #392]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d102      	bne.n	800459a <HAL_RCC_OscConfig+0x136>
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d002      	beq.n	80045a0 <HAL_RCC_OscConfig+0x13c>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b04      	cmp	r3, #4
 800459e:	d11f      	bne.n	80045e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a0:	4b5b      	ldr	r3, [pc, #364]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_OscConfig+0x154>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e267      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b8:	4b55      	ldr	r3, [pc, #340]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	061b      	lsls	r3, r3, #24
 80045c6:	4952      	ldr	r1, [pc, #328]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045cc:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCC_OscConfig+0x2b0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fd f9df 	bl	8001994 <HAL_InitTick>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d043      	beq.n	8004664 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e253      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d023      	beq.n	8004630 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e8:	4b49      	ldr	r3, [pc, #292]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a48      	ldr	r2, [pc, #288]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80045ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd fa1a 	bl	8001a2c <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fd fa16 	bl	8001a2c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e23c      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800460e:	4b40      	ldr	r3, [pc, #256]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b3d      	ldr	r3, [pc, #244]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	4939      	ldr	r1, [pc, #228]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 800462a:	4313      	orrs	r3, r2
 800462c:	604b      	str	r3, [r1, #4]
 800462e:	e01a      	b.n	8004666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004630:	4b37      	ldr	r3, [pc, #220]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a36      	ldr	r2, [pc, #216]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd f9f6 	bl	8001a2c <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004644:	f7fd f9f2 	bl	8001a2c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e218      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004656:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x1e0>
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004664:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d03c      	beq.n	80046ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467a:	4b25      	ldr	r3, [pc, #148]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004680:	4a23      	ldr	r2, [pc, #140]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468a:	f7fd f9cf 	bl	8001a2c <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004692:	f7fd f9cb 	bl	8001a2c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1f1      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a4:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80046a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0ef      	beq.n	8004692 <HAL_RCC_OscConfig+0x22e>
 80046b2:	e01b      	b.n	80046ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b4:	4b16      	ldr	r3, [pc, #88]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80046b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ba:	4a15      	ldr	r2, [pc, #84]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fd f9b2 	bl	8001a2c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fd f9ae 	bl	8001a2c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e1d4      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 80046e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1ef      	bne.n	80046cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80ab 	beq.w	8004850 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_RCC_OscConfig+0x2b4>
 800470a:	2301      	movs	r3, #1
 800470c:	e005      	b.n	800471a <HAL_RCC_OscConfig+0x2b6>
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	20001f48 	.word	0x20001f48
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471e:	4baf      	ldr	r3, [pc, #700]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	4aae      	ldr	r2, [pc, #696]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6593      	str	r3, [r2, #88]	; 0x58
 800472a:	4bac      	ldr	r3, [pc, #688]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004736:	2301      	movs	r3, #1
 8004738:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473a:	4ba9      	ldr	r3, [pc, #676]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d118      	bne.n	8004778 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004746:	4ba6      	ldr	r3, [pc, #664]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4aa5      	ldr	r2, [pc, #660]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004752:	f7fd f96b 	bl	8001a2c <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475a:	f7fd f967 	bl	8001a2c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e18d      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476c:	4b9c      	ldr	r3, [pc, #624]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d108      	bne.n	8004792 <HAL_RCC_OscConfig+0x32e>
 8004780:	4b96      	ldr	r3, [pc, #600]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	4a95      	ldr	r2, [pc, #596]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004790:	e024      	b.n	80047dc <HAL_RCC_OscConfig+0x378>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b05      	cmp	r3, #5
 8004798:	d110      	bne.n	80047bc <HAL_RCC_OscConfig+0x358>
 800479a:	4b90      	ldr	r3, [pc, #576]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	4a8e      	ldr	r2, [pc, #568]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047aa:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	4a8a      	ldr	r2, [pc, #552]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ba:	e00f      	b.n	80047dc <HAL_RCC_OscConfig+0x378>
 80047bc:	4b87      	ldr	r3, [pc, #540]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	4a86      	ldr	r2, [pc, #536]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047cc:	4b83      	ldr	r3, [pc, #524]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	4a82      	ldr	r2, [pc, #520]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047d4:	f023 0304 	bic.w	r3, r3, #4
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d016      	beq.n	8004812 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e4:	f7fd f922 	bl	8001a2c <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fd f91e 	bl	8001a2c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e142      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004802:	4b76      	ldr	r3, [pc, #472]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ed      	beq.n	80047ec <HAL_RCC_OscConfig+0x388>
 8004810:	e015      	b.n	800483e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fd f90b 	bl	8001a2c <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fd f907 	bl	8001a2c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e12b      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004830:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1ed      	bne.n	800481a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800483e:	7ffb      	ldrb	r3, [r7, #31]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d105      	bne.n	8004850 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004844:	4b65      	ldr	r3, [pc, #404]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	4a64      	ldr	r2, [pc, #400]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800484a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d03c      	beq.n	80048d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01c      	beq.n	800489e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004864:	4b5d      	ldr	r3, [pc, #372]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486a:	4a5c      	ldr	r2, [pc, #368]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fd f8da 	bl	8001a2c <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800487c:	f7fd f8d6 	bl	8001a2c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0fc      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800488e:	4b53      	ldr	r3, [pc, #332]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0ef      	beq.n	800487c <HAL_RCC_OscConfig+0x418>
 800489c:	e01b      	b.n	80048d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800489e:	4b4f      	ldr	r3, [pc, #316]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a4:	4a4d      	ldr	r2, [pc, #308]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fd f8bd 	bl	8001a2c <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b6:	f7fd f8b9 	bl	8001a2c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e0df      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048c8:	4b44      	ldr	r3, [pc, #272]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ef      	bne.n	80048b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80d3 	beq.w	8004a86 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048e0:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	f000 808d 	beq.w	8004a08 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d15a      	bne.n	80049ac <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b39      	ldr	r3, [pc, #228]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a38      	ldr	r2, [pc, #224]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7fd f893 	bl	8001a2c <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490a:	f7fd f88f 	bl	8001a2c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0b5      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491c:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004928:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	4b2d      	ldr	r3, [pc, #180]	; (80049e4 <HAL_RCC_OscConfig+0x580>)
 800492e:	4013      	ands	r3, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6a11      	ldr	r1, [r2, #32]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004938:	3a01      	subs	r2, #1
 800493a:	0112      	lsls	r2, r2, #4
 800493c:	4311      	orrs	r1, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004942:	0212      	lsls	r2, r2, #8
 8004944:	4311      	orrs	r1, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800494a:	0852      	lsrs	r2, r2, #1
 800494c:	3a01      	subs	r2, #1
 800494e:	0552      	lsls	r2, r2, #21
 8004950:	4311      	orrs	r1, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004956:	0852      	lsrs	r2, r2, #1
 8004958:	3a01      	subs	r2, #1
 800495a:	0652      	lsls	r2, r2, #25
 800495c:	4311      	orrs	r1, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004962:	06d2      	lsls	r2, r2, #27
 8004964:	430a      	orrs	r2, r1
 8004966:	491d      	ldr	r1, [pc, #116]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004968:	4313      	orrs	r3, r2
 800496a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004976:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800497e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004982:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fd f852 	bl	8001a2c <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498c:	f7fd f84e 	bl	8001a2c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e074      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499e:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x528>
 80049aa:	e06c      	b.n	8004a86 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80049b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a07      	ldr	r2, [pc, #28]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80049ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fd f82a 	bl	8001a2c <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049da:	e00e      	b.n	80049fa <HAL_RCC_OscConfig+0x596>
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
 80049e4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fd f820 	bl	8001a2c <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e046      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <HAL_RCC_OscConfig+0x62c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x584>
 8004a06:	e03e      	b.n	8004a86 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e039      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a14:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <HAL_RCC_OscConfig+0x62c>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0203 	and.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d12c      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	3b01      	subs	r3, #1
 8004a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d123      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d11b      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d113      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	3b01      	subs	r3, #1
 8004a68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000

08004a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e11e      	b.n	8004cea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aac:	4b91      	ldr	r3, [pc, #580]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d910      	bls.n	8004adc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b8e      	ldr	r3, [pc, #568]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 020f 	bic.w	r2, r3, #15
 8004ac2:	498c      	ldr	r1, [pc, #560]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b8a      	ldr	r3, [pc, #552]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e106      	b.n	8004cea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d073      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d129      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af0:	4b81      	ldr	r3, [pc, #516]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0f4      	b.n	8004cea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b00:	f000 f972 	bl	8004de8 <RCC_GetSysClockFreqFromPLLSource>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4a7c      	ldr	r2, [pc, #496]	; (8004cfc <HAL_RCC_ClockConfig+0x268>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d93f      	bls.n	8004b8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b0e:	4b7a      	ldr	r3, [pc, #488]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d033      	beq.n	8004b8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d12f      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b2e:	4b72      	ldr	r3, [pc, #456]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b36:	4a70      	ldr	r2, [pc, #448]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e024      	b.n	8004b8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b4c:	4b6a      	ldr	r3, [pc, #424]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0c6      	b.n	8004cea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5c:	4b66      	ldr	r3, [pc, #408]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0be      	b.n	8004cea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b6c:	f000 f8ce 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4a61      	ldr	r2, [pc, #388]	; (8004cfc <HAL_RCC_ClockConfig+0x268>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d909      	bls.n	8004b8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b7a:	4b5f      	ldr	r3, [pc, #380]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b82:	4a5d      	ldr	r2, [pc, #372]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b8e:	4b5a      	ldr	r3, [pc, #360]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f023 0203 	bic.w	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4957      	ldr	r1, [pc, #348]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba0:	f7fc ff44 	bl	8001a2c <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba8:	f7fc ff40 	bl	8001a2c <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e095      	b.n	8004cea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbe:	4b4e      	ldr	r3, [pc, #312]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 020c 	and.w	r2, r3, #12
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d1eb      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d023      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be8:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a42      	ldr	r2, [pc, #264]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004bee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bf2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c00:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c08:	4a3b      	ldr	r2, [pc, #236]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c10:	4b39      	ldr	r3, [pc, #228]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4936      	ldr	r1, [pc, #216]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b80      	cmp	r3, #128	; 0x80
 8004c28:	d105      	bne.n	8004c36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c2a:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	4a32      	ldr	r2, [pc, #200]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c36:	4b2f      	ldr	r3, [pc, #188]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d21d      	bcs.n	8004c80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c44:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 020f 	bic.w	r2, r3, #15
 8004c4c:	4929      	ldr	r1, [pc, #164]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c54:	f7fc feea 	bl	8001a2c <HAL_GetTick>
 8004c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5c:	f7fc fee6 	bl	8001a2c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e03b      	b.n	8004cea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_RCC_ClockConfig+0x260>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d1ed      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4917      	ldr	r1, [pc, #92]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004caa:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	490f      	ldr	r1, [pc, #60]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cbe:	f000 f825 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <HAL_RCC_ClockConfig+0x264>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <HAL_RCC_ClockConfig+0x26c>)
 8004cd0:	5cd3      	ldrb	r3, [r2, r3]
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	fa21 f303 	lsr.w	r3, r1, r3
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <HAL_RCC_ClockConfig+0x270>)
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cde:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <HAL_RCC_ClockConfig+0x274>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fc fe56 	bl	8001994 <HAL_InitTick>
 8004ce8:	4603      	mov	r3, r0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40022000 	.word	0x40022000
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	04c4b400 	.word	0x04c4b400
 8004d00:	08008a24 	.word	0x08008a24
 8004d04:	20001f44 	.word	0x20001f44
 8004d08:	20001f48 	.word	0x20001f48

08004d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d12:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d102      	bne.n	8004d24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e047      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d24:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 030c 	and.w	r3, r3, #12
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d102      	bne.n	8004d36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d30:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	e03e      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d36:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d136      	bne.n	8004db0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	3301      	adds	r3, #1
 8004d58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d10c      	bne.n	8004d7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d60:	4a1a      	ldr	r2, [pc, #104]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6a:	68d2      	ldr	r2, [r2, #12]
 8004d6c:	0a12      	lsrs	r2, r2, #8
 8004d6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	617b      	str	r3, [r7, #20]
      break;
 8004d78:	e00c      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d7a:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d84:	68d2      	ldr	r2, [r2, #12]
 8004d86:	0a12      	lsrs	r2, r2, #8
 8004d88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]
      break;
 8004d92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	0e5b      	lsrs	r3, r3, #25
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e001      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004db4:	693b      	ldr	r3, [r7, #16]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	00f42400 	.word	0x00f42400
 8004dcc:	007a1200 	.word	0x007a1200

08004dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20001f44 	.word	0x20001f44

08004de8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dee:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df8:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d10c      	bne.n	8004e26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e0c:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e16:	68d2      	ldr	r2, [r2, #12]
 8004e18:	0a12      	lsrs	r2, r2, #8
 8004e1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	617b      	str	r3, [r7, #20]
    break;
 8004e24:	e00c      	b.n	8004e40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e26:	4a12      	ldr	r2, [pc, #72]	; (8004e70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	4a0e      	ldr	r2, [pc, #56]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e30:	68d2      	ldr	r2, [r2, #12]
 8004e32:	0a12      	lsrs	r2, r2, #8
 8004e34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e38:	fb02 f303 	mul.w	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
    break;
 8004e3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	0e5b      	lsrs	r3, r3, #25
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e5a:	687b      	ldr	r3, [r7, #4]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	007a1200 	.word	0x007a1200
 8004e70:	00f42400 	.word	0x00f42400

08004e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e80:	2300      	movs	r3, #0
 8004e82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8098 	beq.w	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e92:	2300      	movs	r3, #0
 8004e94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10d      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	4b40      	ldr	r3, [pc, #256]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	4a3f      	ldr	r2, [pc, #252]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eac:	6593      	str	r3, [r2, #88]	; 0x58
 8004eae:	4b3d      	ldr	r3, [pc, #244]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ebe:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a39      	ldr	r2, [pc, #228]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eca:	f7fc fdaf 	bl	8001a2c <HAL_GetTick>
 8004ece:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed0:	e009      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed2:	f7fc fdab 	bl	8001a2c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d902      	bls.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	74fb      	strb	r3, [r7, #19]
        break;
 8004ee4:	e005      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee6:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ef      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ef2:	7cfb      	ldrb	r3, [r7, #19]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d159      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01e      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d019      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f14:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f20:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f30:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	4a1b      	ldr	r2, [pc, #108]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fc fd6b 	bl	8001a2c <HAL_GetTick>
 8004f56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f58:	e00b      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5a:	f7fc fd67 	bl	8001a2c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d902      	bls.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f70:	e006      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ec      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f9e:	7cfb      	ldrb	r3, [r7, #19]
 8004fa0:	74bb      	strb	r3, [r7, #18]
 8004fa2:	e005      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb0:	7c7b      	ldrb	r3, [r7, #17]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4baf      	ldr	r3, [pc, #700]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	4aae      	ldr	r2, [pc, #696]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fce:	4ba9      	ldr	r3, [pc, #676]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	f023 0203 	bic.w	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	49a5      	ldr	r1, [pc, #660]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff0:	4ba0      	ldr	r3, [pc, #640]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f023 020c 	bic.w	r2, r3, #12
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	499d      	ldr	r1, [pc, #628]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005012:	4b98      	ldr	r3, [pc, #608]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4994      	ldr	r1, [pc, #592]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005034:	4b8f      	ldr	r3, [pc, #572]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	498c      	ldr	r1, [pc, #560]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005056:	4b87      	ldr	r3, [pc, #540]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	4983      	ldr	r1, [pc, #524]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005078:	4b7e      	ldr	r3, [pc, #504]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	497b      	ldr	r1, [pc, #492]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509a:	4b76      	ldr	r3, [pc, #472]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	4972      	ldr	r1, [pc, #456]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050bc:	4b6d      	ldr	r3, [pc, #436]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	496a      	ldr	r1, [pc, #424]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050de:	4b65      	ldr	r3, [pc, #404]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	4961      	ldr	r1, [pc, #388]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005100:	4b5c      	ldr	r3, [pc, #368]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005106:	f023 0203 	bic.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	4959      	ldr	r1, [pc, #356]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005122:	4b54      	ldr	r3, [pc, #336]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	4950      	ldr	r1, [pc, #320]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005140:	2b00      	cmp	r3, #0
 8005142:	d015      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005144:	4b4b      	ldr	r3, [pc, #300]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4948      	ldr	r1, [pc, #288]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005162:	d105      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005164:	4b43      	ldr	r3, [pc, #268]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4a42      	ldr	r2, [pc, #264]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800516a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800516e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005178:	2b00      	cmp	r3, #0
 800517a:	d015      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800517c:	4b3d      	ldr	r3, [pc, #244]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	493a      	ldr	r1, [pc, #232]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800519a:	d105      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800519c:	4b35      	ldr	r3, [pc, #212]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a34      	ldr	r2, [pc, #208]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d015      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051b4:	4b2f      	ldr	r3, [pc, #188]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	492c      	ldr	r1, [pc, #176]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051d2:	d105      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d4:	4b27      	ldr	r3, [pc, #156]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4a26      	ldr	r2, [pc, #152]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d015      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ec:	4b21      	ldr	r3, [pc, #132]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	491e      	ldr	r1, [pc, #120]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520a:	d105      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a18      	ldr	r2, [pc, #96]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005216:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d015      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005224:	4b13      	ldr	r3, [pc, #76]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	4910      	ldr	r1, [pc, #64]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005242:	d105      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800524a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800524e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d018      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	4902      	ldr	r1, [pc, #8]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005272:	e001      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005274:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005280:	d105      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005282:	4b21      	ldr	r3, [pc, #132]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4a20      	ldr	r2, [pc, #128]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d015      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800529a:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a8:	4917      	ldr	r1, [pc, #92]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d105      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	4a12      	ldr	r2, [pc, #72]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d015      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052d2:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e0:	4909      	ldr	r1, [pc, #36]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052f0:	d105      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	4a04      	ldr	r2, [pc, #16]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021000 	.word	0x40021000

0800530c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e084      	b.n	8005428 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fb fe13 	bl	8000f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005354:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800535e:	d902      	bls.n	8005366 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e002      	b.n	800536c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005374:	d007      	beq.n	8005386 <HAL_SPI_Init+0x7a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800537e:	d002      	beq.n	8005386 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005396:	d903      	bls.n	80053a0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
 800539e:	e002      	b.n	80053a6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	ea42 0103 	orr.w	r1, r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	0c1b      	lsrs	r3, r3, #16
 80053e6:	f003 0204 	and.w	r2, r3, #4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	ea42 0103 	orr.w	r1, r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005416:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_SPI_Transmit+0x22>
 800544e:	2302      	movs	r3, #2
 8005450:	e150      	b.n	80056f4 <HAL_SPI_Transmit+0x2c4>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800545a:	f7fc fae7 	bl	8001a2c <HAL_GetTick>
 800545e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005460:	88fb      	ldrh	r3, [r7, #6]
 8005462:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d002      	beq.n	8005476 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005470:	2302      	movs	r3, #2
 8005472:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005474:	e135      	b.n	80056e2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_SPI_Transmit+0x52>
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005486:	e12c      	b.n	80056e2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2203      	movs	r2, #3
 800548c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	88fa      	ldrh	r2, [r7, #6]
 80054a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d2:	d107      	bne.n	80054e4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d007      	beq.n	8005502 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800550a:	d94b      	bls.n	80055a4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_SPI_Transmit+0xea>
 8005514:	8afb      	ldrh	r3, [r7, #22]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d13e      	bne.n	8005598 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	881a      	ldrh	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	1c9a      	adds	r2, r3, #2
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800553e:	e02b      	b.n	8005598 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	d112      	bne.n	8005574 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	1c9a      	adds	r2, r3, #2
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005572:	e011      	b.n	8005598 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005574:	f7fc fa5a 	bl	8001a2c <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d803      	bhi.n	800558c <HAL_SPI_Transmit+0x15c>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800558a:	d102      	bne.n	8005592 <HAL_SPI_Transmit+0x162>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005596:	e0a4      	b.n	80056e2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1ce      	bne.n	8005540 <HAL_SPI_Transmit+0x110>
 80055a2:	e07c      	b.n	800569e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_Transmit+0x182>
 80055ac:	8afb      	ldrh	r3, [r7, #22]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d170      	bne.n	8005694 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d912      	bls.n	80055e2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b02      	subs	r3, #2
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e0:	e058      	b.n	8005694 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	7812      	ldrb	r2, [r2, #0]
 80055ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005608:	e044      	b.n	8005694 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b02      	cmp	r3, #2
 8005616:	d12b      	bne.n	8005670 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d912      	bls.n	8005648 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	881a      	ldrh	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	1c9a      	adds	r2, r3, #2
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b02      	subs	r3, #2
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005646:	e025      	b.n	8005694 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	7812      	ldrb	r2, [r2, #0]
 8005654:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800566e:	e011      	b.n	8005694 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005670:	f7fc f9dc 	bl	8001a2c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d803      	bhi.n	8005688 <HAL_SPI_Transmit+0x258>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005686:	d102      	bne.n	800568e <HAL_SPI_Transmit+0x25e>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d102      	bne.n	8005694 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005692:	e026      	b.n	80056e2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1b5      	bne.n	800560a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fa8c 	bl	8005bc0 <SPI_EndRxTxTransaction>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2220      	movs	r2, #32
 80056b2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e000      	b.n	80056e2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80056e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_SPI_Transmit_DMA+0x20>
 8005718:	2302      	movs	r3, #2
 800571a:	e0d0      	b.n	80058be <HAL_SPI_Transmit_DMA+0x1c2>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d002      	beq.n	8005736 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005730:	2302      	movs	r3, #2
 8005732:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005734:	e0be      	b.n	80058b4 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_SPI_Transmit_DMA+0x46>
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005746:	e0b5      	b.n	80058b4 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2203      	movs	r2, #3
 800574c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	88fa      	ldrh	r2, [r7, #6]
 8005766:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005792:	d107      	bne.n	80057a4 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	4a47      	ldr	r2, [pc, #284]	; (80058c8 <HAL_SPI_Transmit_DMA+0x1cc>)
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	4a46      	ldr	r2, [pc, #280]	; (80058cc <HAL_SPI_Transmit_DMA+0x1d0>)
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b8:	4a45      	ldr	r2, [pc, #276]	; (80058d0 <HAL_SPI_Transmit_DMA+0x1d4>)
 80057ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	2200      	movs	r2, #0
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057d2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057dc:	d82d      	bhi.n	800583a <HAL_SPI_Transmit_DMA+0x13e>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e8:	d127      	bne.n	800583a <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10f      	bne.n	8005818 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005806:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580c:	b29b      	uxth	r3, r3
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005816:	e010      	b.n	800583a <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005826:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582c:	b29b      	uxth	r3, r3
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	b29b      	uxth	r3, r3
 8005832:	3301      	adds	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	4619      	mov	r1, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005850:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005852:	f7fe f9c3 	bl	8003bdc <HAL_DMA_Start_IT>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00c      	beq.n	8005876 <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005860:	f043 0210 	orr.w	r2, r3, #16
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005874:	e01e      	b.n	80058b4 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d007      	beq.n	8005894 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005892:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0220 	orr.w	r2, r2, #32
 80058a2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0202 	orr.w	r2, r2, #2
 80058b2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	080059b7 	.word	0x080059b7
 80058cc:	08005911 	.word	0x08005911
 80058d0:	080059d3 	.word	0x080059d3

080058d4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800591e:	f7fc f885 	bl	8001a2c <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b20      	cmp	r3, #32
 8005930:	d03b      	beq.n	80059aa <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0220 	bic.w	r2, r2, #32
 8005940:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0202 	bic.w	r2, r2, #2
 8005950:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	2164      	movs	r1, #100	; 0x64
 8005956:	6978      	ldr	r0, [r7, #20]
 8005958:	f000 f932 	bl	8005bc0 <SPI_EndRxTxTransaction>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005966:	f043 0220 	orr.w	r2, r3, #32
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2200      	movs	r2, #0
 8005990:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f7ff ffaa 	bl	80058fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80059a8:	e002      	b.n	80059b0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80059aa:	6978      	ldr	r0, [r7, #20]
 80059ac:	f7ff ff92 	bl	80058d4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff ff8f 	bl	80058e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0203 	bic.w	r2, r2, #3
 80059ee:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f4:	f043 0210 	orr.w	r2, r3, #16
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff ff79 	bl	80058fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	603b      	str	r3, [r7, #0]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a22:	e04c      	b.n	8005abe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a2a:	d048      	beq.n	8005abe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a2c:	f7fb fffe 	bl	8001a2c <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d902      	bls.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d13d      	bne.n	8005abe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a5a:	d111      	bne.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a64:	d004      	beq.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6e:	d107      	bne.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a88:	d10f      	bne.n	8005aaa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e00f      	b.n	8005ade <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	bf0c      	ite	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	2300      	movne	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d1a3      	bne.n	8005a24 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005af4:	e057      	b.n	8005ba6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005afc:	d106      	bne.n	8005b0c <SPI_WaitFifoStateUntilTimeout+0x26>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d103      	bne.n	8005b0c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b12:	d048      	beq.n	8005ba6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005b14:	f7fb ff8a 	bl	8001a2c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d902      	bls.n	8005b2a <SPI_WaitFifoStateUntilTimeout+0x44>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d13d      	bne.n	8005ba6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b42:	d111      	bne.n	8005b68 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4c:	d004      	beq.n	8005b58 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b56:	d107      	bne.n	8005b68 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b70:	d10f      	bne.n	8005b92 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e008      	b.n	8005bb8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d19f      	bne.n	8005af6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff ff84 	bl	8005ae6 <SPI_WaitFifoStateUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e027      	b.n	8005c44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff ff07 	bl	8005a12 <SPI_WaitFlagStateUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0e:	f043 0220 	orr.w	r2, r3, #32
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e014      	b.n	8005c44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7ff ff5d 	bl	8005ae6 <SPI_WaitFifoStateUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c36:	f043 0220 	orr.w	r2, r3, #32
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e000      	b.n	8005c44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e049      	b.n	8005cf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fb fdb8 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f000 fc24 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d001      	beq.n	8005d14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e019      	b.n	8005d48 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <HAL_TIM_Base_Start+0x58>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b06      	cmp	r3, #6
 8005d2c:	d00b      	beq.n	8005d46 <HAL_TIM_Base_Start+0x4a>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d34:	d007      	beq.n	8005d46 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0201 	orr.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	00010007 	.word	0x00010007

08005d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d001      	beq.n	8005d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e021      	b.n	8005db4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <HAL_TIM_Base_Start_IT+0x68>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d00b      	beq.n	8005db2 <HAL_TIM_Base_Start_IT+0x5a>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da0:	d007      	beq.n	8005db2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	00010007 	.word	0x00010007

08005dc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e097      	b.n	8005f08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d106      	bne.n	8005df2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7fb fca7 	bl	8001740 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005e08:	f023 0307 	bic.w	r3, r3, #7
 8005e0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f000 fb5d 	bl	80064d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	4313      	orrs	r3, r2
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e64:	f023 030c 	bic.w	r3, r3, #12
 8005e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	4313      	orrs	r3, r2
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	011a      	lsls	r2, r3, #4
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	031b      	lsls	r3, r3, #12
 8005e94:	4313      	orrs	r3, r2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005ea2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d122      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0202 	mvn.w	r2, #2
 8005f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 faa2 	bl	800649c <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa94 	bl	8006488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 faa5 	bl	80064b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0204 	mvn.w	r2, #4
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fa78 	bl	800649c <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa6a 	bl	8006488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa7b 	bl	80064b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0208 	mvn.w	r2, #8
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2204      	movs	r2, #4
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa4e 	bl	800649c <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa40 	bl	8006488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fa51 	bl	80064b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b10      	cmp	r3, #16
 8006020:	d122      	bne.n	8006068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b10      	cmp	r3, #16
 800602e:	d11b      	bne.n	8006068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0210 	mvn.w	r2, #16
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2208      	movs	r2, #8
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa24 	bl	800649c <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fa16 	bl	8006488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa27 	bl	80064b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b01      	cmp	r3, #1
 8006074:	d10e      	bne.n	8006094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d107      	bne.n	8006094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0201 	mvn.w	r2, #1
 800608c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f9f0 	bl	8006474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b80      	cmp	r3, #128	; 0x80
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fd5e 	bl	8006b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ce:	d10e      	bne.n	80060ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b80      	cmp	r3, #128	; 0x80
 80060dc:	d107      	bne.n	80060ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fd51 	bl	8006b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d10e      	bne.n	800611a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d107      	bne.n	800611a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f9d5 	bl	80064c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b20      	cmp	r3, #32
 8006126:	d10e      	bne.n	8006146 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b20      	cmp	r3, #32
 8006134:	d107      	bne.n	8006146 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0220 	mvn.w	r2, #32
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fd11 	bl	8006b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006154:	d10f      	bne.n	8006176 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006164:	d107      	bne.n	8006176 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800616e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fd17 	bl	8006ba4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006180:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006184:	d10f      	bne.n	80061a6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006194:	d107      	bne.n	80061a6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800619e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fd09 	bl	8006bb8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061b4:	d10f      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c4:	d107      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80061ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fcfb 	bl	8006bcc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061e4:	d10f      	bne.n	8006206 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061f4:	d107      	bne.n	8006206 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80061fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fced 	bl	8006be0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_TIM_ConfigClockSource+0x18>
 8006224:	2302      	movs	r3, #2
 8006226:	e0d2      	b.n	80063ce <HAL_TIM_ConfigClockSource+0x1be>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800624a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006252:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006264:	f000 80a9 	beq.w	80063ba <HAL_TIM_ConfigClockSource+0x1aa>
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626c:	d81a      	bhi.n	80062a4 <HAL_TIM_ConfigClockSource+0x94>
 800626e:	2b30      	cmp	r3, #48	; 0x30
 8006270:	f000 809a 	beq.w	80063a8 <HAL_TIM_ConfigClockSource+0x198>
 8006274:	2b30      	cmp	r3, #48	; 0x30
 8006276:	d809      	bhi.n	800628c <HAL_TIM_ConfigClockSource+0x7c>
 8006278:	2b10      	cmp	r3, #16
 800627a:	f000 8095 	beq.w	80063a8 <HAL_TIM_ConfigClockSource+0x198>
 800627e:	2b20      	cmp	r3, #32
 8006280:	f000 8092 	beq.w	80063a8 <HAL_TIM_ConfigClockSource+0x198>
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 808f 	beq.w	80063a8 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800628a:	e097      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800628c:	2b50      	cmp	r3, #80	; 0x50
 800628e:	d05b      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0x138>
 8006290:	2b50      	cmp	r3, #80	; 0x50
 8006292:	d802      	bhi.n	800629a <HAL_TIM_ConfigClockSource+0x8a>
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d077      	beq.n	8006388 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006298:	e090      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800629a:	2b60      	cmp	r3, #96	; 0x60
 800629c:	d064      	beq.n	8006368 <HAL_TIM_ConfigClockSource+0x158>
 800629e:	2b70      	cmp	r3, #112	; 0x70
 80062a0:	d028      	beq.n	80062f4 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80062a2:	e08b      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80062a4:	4a4c      	ldr	r2, [pc, #304]	; (80063d8 <HAL_TIM_ConfigClockSource+0x1c8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d07e      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0x198>
 80062aa:	4a4b      	ldr	r2, [pc, #300]	; (80063d8 <HAL_TIM_ConfigClockSource+0x1c8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d810      	bhi.n	80062d2 <HAL_TIM_ConfigClockSource+0xc2>
 80062b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b4:	d078      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0x198>
 80062b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ba:	d803      	bhi.n	80062c4 <HAL_TIM_ConfigClockSource+0xb4>
 80062bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c0:	d02f      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x112>
      break;
 80062c2:	e07b      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80062c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062c8:	d06e      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0x198>
 80062ca:	4a44      	ldr	r2, [pc, #272]	; (80063dc <HAL_TIM_ConfigClockSource+0x1cc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d06b      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80062d0:	e074      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80062d2:	4a43      	ldr	r2, [pc, #268]	; (80063e0 <HAL_TIM_ConfigClockSource+0x1d0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d067      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0x198>
 80062d8:	4a41      	ldr	r2, [pc, #260]	; (80063e0 <HAL_TIM_ConfigClockSource+0x1d0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d803      	bhi.n	80062e6 <HAL_TIM_ConfigClockSource+0xd6>
 80062de:	4a41      	ldr	r2, [pc, #260]	; (80063e4 <HAL_TIM_ConfigClockSource+0x1d4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d061      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80062e4:	e06a      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80062e6:	4a40      	ldr	r2, [pc, #256]	; (80063e8 <HAL_TIM_ConfigClockSource+0x1d8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d05d      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0x198>
 80062ec:	4a3f      	ldr	r2, [pc, #252]	; (80063ec <HAL_TIM_ConfigClockSource+0x1dc>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d05a      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80062f2:	e063      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6899      	ldr	r1, [r3, #8]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f000 fac8 	bl	8006898 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006316:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	609a      	str	r2, [r3, #8]
      break;
 8006320:	e04c      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6899      	ldr	r1, [r3, #8]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f000 fab1 	bl	8006898 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006344:	609a      	str	r2, [r3, #8]
      break;
 8006346:	e039      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6859      	ldr	r1, [r3, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	461a      	mov	r2, r3
 8006356:	f000 fa23 	bl	80067a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2150      	movs	r1, #80	; 0x50
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fa7c 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 8006366:	e029      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	6859      	ldr	r1, [r3, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	461a      	mov	r2, r3
 8006376:	f000 fa42 	bl	80067fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2160      	movs	r1, #96	; 0x60
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fa6c 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 8006386:	e019      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	6859      	ldr	r1, [r3, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	461a      	mov	r2, r3
 8006396:	f000 fa03 	bl	80067a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2140      	movs	r1, #64	; 0x40
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fa5c 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 80063a6:	e009      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f000 fa53 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 80063b8:	e000      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80063ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	00100030 	.word	0x00100030
 80063dc:	00100020 	.word	0x00100020
 80063e0:	00100050 	.word	0x00100050
 80063e4:	00100040 	.word	0x00100040
 80063e8:	00100060 	.word	0x00100060
 80063ec:	00100070 	.word	0x00100070

080063f0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006404:	2302      	movs	r3, #2
 8006406:	e031      	b.n	800646c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f904 	bl	8006628 <TIM_SlaveTimer_SetConfig>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e018      	b.n	800646c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006448:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006458:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a46      	ldr	r2, [pc, #280]	; (8006604 <TIM_Base_SetConfig+0x12c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d017      	beq.n	8006520 <TIM_Base_SetConfig+0x48>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f6:	d013      	beq.n	8006520 <TIM_Base_SetConfig+0x48>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a43      	ldr	r2, [pc, #268]	; (8006608 <TIM_Base_SetConfig+0x130>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00f      	beq.n	8006520 <TIM_Base_SetConfig+0x48>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a42      	ldr	r2, [pc, #264]	; (800660c <TIM_Base_SetConfig+0x134>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00b      	beq.n	8006520 <TIM_Base_SetConfig+0x48>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a41      	ldr	r2, [pc, #260]	; (8006610 <TIM_Base_SetConfig+0x138>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d007      	beq.n	8006520 <TIM_Base_SetConfig+0x48>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a40      	ldr	r2, [pc, #256]	; (8006614 <TIM_Base_SetConfig+0x13c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d003      	beq.n	8006520 <TIM_Base_SetConfig+0x48>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a3f      	ldr	r2, [pc, #252]	; (8006618 <TIM_Base_SetConfig+0x140>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d108      	bne.n	8006532 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a33      	ldr	r2, [pc, #204]	; (8006604 <TIM_Base_SetConfig+0x12c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d023      	beq.n	8006582 <TIM_Base_SetConfig+0xaa>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006540:	d01f      	beq.n	8006582 <TIM_Base_SetConfig+0xaa>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a30      	ldr	r2, [pc, #192]	; (8006608 <TIM_Base_SetConfig+0x130>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01b      	beq.n	8006582 <TIM_Base_SetConfig+0xaa>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a2f      	ldr	r2, [pc, #188]	; (800660c <TIM_Base_SetConfig+0x134>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d017      	beq.n	8006582 <TIM_Base_SetConfig+0xaa>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a2e      	ldr	r2, [pc, #184]	; (8006610 <TIM_Base_SetConfig+0x138>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d013      	beq.n	8006582 <TIM_Base_SetConfig+0xaa>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a2d      	ldr	r2, [pc, #180]	; (8006614 <TIM_Base_SetConfig+0x13c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00f      	beq.n	8006582 <TIM_Base_SetConfig+0xaa>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2d      	ldr	r2, [pc, #180]	; (800661c <TIM_Base_SetConfig+0x144>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00b      	beq.n	8006582 <TIM_Base_SetConfig+0xaa>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2c      	ldr	r2, [pc, #176]	; (8006620 <TIM_Base_SetConfig+0x148>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d007      	beq.n	8006582 <TIM_Base_SetConfig+0xaa>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2b      	ldr	r2, [pc, #172]	; (8006624 <TIM_Base_SetConfig+0x14c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_Base_SetConfig+0xaa>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a26      	ldr	r2, [pc, #152]	; (8006618 <TIM_Base_SetConfig+0x140>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d108      	bne.n	8006594 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a12      	ldr	r2, [pc, #72]	; (8006604 <TIM_Base_SetConfig+0x12c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d013      	beq.n	80065e8 <TIM_Base_SetConfig+0x110>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a14      	ldr	r2, [pc, #80]	; (8006614 <TIM_Base_SetConfig+0x13c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00f      	beq.n	80065e8 <TIM_Base_SetConfig+0x110>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a14      	ldr	r2, [pc, #80]	; (800661c <TIM_Base_SetConfig+0x144>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00b      	beq.n	80065e8 <TIM_Base_SetConfig+0x110>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a13      	ldr	r2, [pc, #76]	; (8006620 <TIM_Base_SetConfig+0x148>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_Base_SetConfig+0x110>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a12      	ldr	r2, [pc, #72]	; (8006624 <TIM_Base_SetConfig+0x14c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_Base_SetConfig+0x110>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a0d      	ldr	r2, [pc, #52]	; (8006618 <TIM_Base_SetConfig+0x140>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d103      	bne.n	80065f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	615a      	str	r2, [r3, #20]
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00
 8006614:	40013400 	.word	0x40013400
 8006618:	40015000 	.word	0x40015000
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800

08006628 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006644:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	f023 0307 	bic.w	r3, r3, #7
 800665a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b70      	cmp	r3, #112	; 0x70
 8006674:	d034      	beq.n	80066e0 <TIM_SlaveTimer_SetConfig+0xb8>
 8006676:	2b70      	cmp	r3, #112	; 0x70
 8006678:	d811      	bhi.n	800669e <TIM_SlaveTimer_SetConfig+0x76>
 800667a:	2b30      	cmp	r3, #48	; 0x30
 800667c:	d07d      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
 800667e:	2b30      	cmp	r3, #48	; 0x30
 8006680:	d806      	bhi.n	8006690 <TIM_SlaveTimer_SetConfig+0x68>
 8006682:	2b10      	cmp	r3, #16
 8006684:	d079      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
 8006686:	2b20      	cmp	r3, #32
 8006688:	d077      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d075      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800668e:	e075      	b.n	800677c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006690:	2b50      	cmp	r3, #80	; 0x50
 8006692:	d05e      	beq.n	8006752 <TIM_SlaveTimer_SetConfig+0x12a>
 8006694:	2b60      	cmp	r3, #96	; 0x60
 8006696:	d066      	beq.n	8006766 <TIM_SlaveTimer_SetConfig+0x13e>
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	d02c      	beq.n	80066f6 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800669c:	e06e      	b.n	800677c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800669e:	4a3a      	ldr	r2, [pc, #232]	; (8006788 <TIM_SlaveTimer_SetConfig+0x160>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d06a      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
 80066a4:	4a38      	ldr	r2, [pc, #224]	; (8006788 <TIM_SlaveTimer_SetConfig+0x160>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d809      	bhi.n	80066be <TIM_SlaveTimer_SetConfig+0x96>
 80066aa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066ae:	d064      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
 80066b0:	4a36      	ldr	r2, [pc, #216]	; (800678c <TIM_SlaveTimer_SetConfig+0x164>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d061      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
 80066b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ba:	d05e      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80066bc:	e05e      	b.n	800677c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80066be:	4a34      	ldr	r2, [pc, #208]	; (8006790 <TIM_SlaveTimer_SetConfig+0x168>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d05a      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
 80066c4:	4a32      	ldr	r2, [pc, #200]	; (8006790 <TIM_SlaveTimer_SetConfig+0x168>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d803      	bhi.n	80066d2 <TIM_SlaveTimer_SetConfig+0xaa>
 80066ca:	4a32      	ldr	r2, [pc, #200]	; (8006794 <TIM_SlaveTimer_SetConfig+0x16c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d054      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80066d0:	e054      	b.n	800677c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80066d2:	4a31      	ldr	r2, [pc, #196]	; (8006798 <TIM_SlaveTimer_SetConfig+0x170>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d050      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
 80066d8:	4a30      	ldr	r2, [pc, #192]	; (800679c <TIM_SlaveTimer_SetConfig+0x174>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d04d      	beq.n	800677a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80066de:	e04d      	b.n	800677c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	68d9      	ldr	r1, [r3, #12]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f000 f8d2 	bl	8006898 <TIM_ETR_SetConfig>
      break;
 80066f4:	e042      	b.n	800677c <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b05      	cmp	r3, #5
 80066fc:	d004      	beq.n	8006708 <TIM_SlaveTimer_SetConfig+0xe0>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006706:	d101      	bne.n	800670c <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e038      	b.n	800677e <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6a1a      	ldr	r2, [r3, #32]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006732:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	621a      	str	r2, [r3, #32]
      break;
 8006750:	e014      	b.n	800677c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6899      	ldr	r1, [r3, #8]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	461a      	mov	r2, r3
 8006760:	f000 f81e 	bl	80067a0 <TIM_TI1_ConfigInputStage>
      break;
 8006764:	e00a      	b.n	800677c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6899      	ldr	r1, [r3, #8]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	461a      	mov	r2, r3
 8006774:	f000 f843 	bl	80067fe <TIM_TI2_ConfigInputStage>
      break;
 8006778:	e000      	b.n	800677c <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800677a:	bf00      	nop
  }
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	00100030 	.word	0x00100030
 800678c:	00100020 	.word	0x00100020
 8006790:	00100050 	.word	0x00100050
 8006794:	00100040 	.word	0x00100040
 8006798:	00100060 	.word	0x00100060
 800679c:	00100070 	.word	0x00100070

080067a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f023 0201 	bic.w	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 030a 	bic.w	r3, r3, #10
 80067dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067fe:	b480      	push	{r7}
 8006800:	b087      	sub	sp, #28
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	f023 0210 	bic.w	r2, r3, #16
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	031b      	lsls	r3, r3, #12
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800683a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	f043 0307 	orr.w	r3, r3, #7
 8006884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	021a      	lsls	r2, r3, #8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4313      	orrs	r3, r2
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	609a      	str	r2, [r3, #8]
}
 80068cc:	bf00      	nop
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e074      	b.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a34      	ldr	r2, [pc, #208]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d009      	beq.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a33      	ldr	r2, [pc, #204]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d004      	beq.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a31      	ldr	r2, [pc, #196]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d108      	bne.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006934:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a21      	ldr	r2, [pc, #132]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d022      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d01d      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1f      	ldr	r2, [pc, #124]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d018      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1d      	ldr	r2, [pc, #116]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00e      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a15      	ldr	r2, [pc, #84]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d009      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a18      	ldr	r2, [pc, #96]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d004      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a11      	ldr	r2, [pc, #68]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d10c      	bne.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40013400 	.word	0x40013400
 80069f0:	40015000 	.word	0x40015000
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	40014000 	.word	0x40014000

08006a04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d101      	bne.n	8006a20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e096      	b.n	8006b4e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	041b      	lsls	r3, r3, #16
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a2f      	ldr	r2, [pc, #188]	; (8006b5c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a2d      	ldr	r2, [pc, #180]	; (8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d004      	beq.n	8006ab8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a2c      	ldr	r2, [pc, #176]	; (8006b64 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d106      	bne.n	8006ac6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d12b      	bne.n	8006b3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	051b      	lsls	r3, r3, #20
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a10      	ldr	r2, [pc, #64]	; (8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a0e      	ldr	r2, [pc, #56]	; (8006b64 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d106      	bne.n	8006b3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40013400 	.word	0x40013400
 8006b64:	40015000 	.word	0x40015000

08006b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8006bf4:	b590      	push	{r4, r7, lr}
 8006bf6:	b08b      	sub	sp, #44	; 0x2c
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4611      	mov	r1, r2
 8006c00:	461a      	mov	r2, r3
 8006c02:	4623      	mov	r3, r4
 8006c04:	80fb      	strh	r3, [r7, #6]
 8006c06:	4603      	mov	r3, r0
 8006c08:	80bb      	strh	r3, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	807b      	strh	r3, [r7, #2]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8006c12:	887b      	ldrh	r3, [r7, #2]
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8006c1a:	887b      	ldrh	r3, [r7, #2]
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	f1c3 0301 	rsb	r3, r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8006c2c:	e061      	b.n	8006cf2 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8006c2e:	88fa      	ldrh	r2, [r7, #6]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	e018      	b.n	8006c6a <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	b298      	uxth	r0, r3
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	88bb      	ldrh	r3, [r7, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	883a      	ldrh	r2, [r7, #0]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f000 fc0d 	bl	8007468 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	b298      	uxth	r0, r3
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	88ba      	ldrh	r2, [r7, #4]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	883a      	ldrh	r2, [r7, #0]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	f000 fc02 	bl	8007468 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3301      	adds	r3, #1
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	4413      	add	r3, r2
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	dde0      	ble.n	8006c38 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8006c76:	88fa      	ldrh	r2, [r7, #6]
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	e018      	b.n	8006cb2 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	b298      	uxth	r0, r3
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	88bb      	ldrh	r3, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	883a      	ldrh	r2, [r7, #0]
 8006c90:	4619      	mov	r1, r3
 8006c92:	f000 fbe9 	bl	8007468 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	b298      	uxth	r0, r3
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	88ba      	ldrh	r2, [r7, #4]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	883a      	ldrh	r2, [r7, #0]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f000 fbde 	bl	8007468 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	dde0      	ble.n	8006c80 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	4413      	add	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	3302      	adds	r3, #2
 8006cd0:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	005a      	lsls	r2, r3, #1
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	4413      	add	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dd09      	ble.n	8006cf2 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	3302      	adds	r3, #2
 8006cf0:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8006cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	da99      	bge.n	8006c2e <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8006cfa:	bf00      	nop
 8006cfc:	372c      	adds	r7, #44	; 0x2c
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd90      	pop	{r4, r7, pc}
	...

08006d04 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8006d04:	b590      	push	{r4, r7, lr}
 8006d06:	b089      	sub	sp, #36	; 0x24
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	4611      	mov	r1, r2
 8006d10:	461a      	mov	r2, r3
 8006d12:	4623      	mov	r3, r4
 8006d14:	71fb      	strb	r3, [r7, #7]
 8006d16:	4603      	mov	r3, r0
 8006d18:	71bb      	strb	r3, [r7, #6]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	717b      	strb	r3, [r7, #5]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b1f      	cmp	r3, #31
 8006d2a:	d802      	bhi.n	8006d32 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	71fb      	strb	r3, [r7, #7]
 8006d30:	e002      	b.n	8006d38 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	3b20      	subs	r3, #32
 8006d36:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	753b      	strb	r3, [r7, #20]
 8006d3c:	e012      	b.n	8006d64 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8006d3e:	7dfa      	ldrb	r2, [r7, #23]
 8006d40:	7d38      	ldrb	r0, [r7, #20]
 8006d42:	7d39      	ldrb	r1, [r7, #20]
 8006d44:	4c3b      	ldr	r4, [pc, #236]	; (8006e34 <ILI9341_Draw_Char+0x130>)
 8006d46:	4613      	mov	r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	4423      	add	r3, r4
 8006d50:	4403      	add	r3, r0
 8006d52:	781a      	ldrb	r2, [r3, #0]
 8006d54:	f107 0318 	add.w	r3, r7, #24
 8006d58:	440b      	add	r3, r1
 8006d5a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006d5e:	7d3b      	ldrb	r3, [r7, #20]
 8006d60:	3301      	adds	r3, #1
 8006d62:	753b      	strb	r3, [r7, #20]
 8006d64:	7d3b      	ldrb	r3, [r7, #20]
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d9e9      	bls.n	8006d3e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8006d6a:	79bb      	ldrb	r3, [r7, #6]
 8006d6c:	b298      	uxth	r0, r3
 8006d6e:	797b      	ldrb	r3, [r7, #5]
 8006d70:	b299      	uxth	r1, r3
 8006d72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d74:	461a      	mov	r2, r3
 8006d76:	0052      	lsls	r2, r2, #1
 8006d78:	4413      	add	r3, r2
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	b29c      	uxth	r4, r3
 8006d84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4623      	mov	r3, r4
 8006d8a:	f000 fc35 	bl	80075f8 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006d8e:	2300      	movs	r3, #0
 8006d90:	757b      	strb	r3, [r7, #21]
 8006d92:	e048      	b.n	8006e26 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8006d94:	2300      	movs	r3, #0
 8006d96:	75bb      	strb	r3, [r7, #22]
 8006d98:	e03f      	b.n	8006e1a <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8006d9a:	7d7b      	ldrb	r3, [r7, #21]
 8006d9c:	f107 0218 	add.w	r2, r7, #24
 8006da0:	4413      	add	r3, r2
 8006da2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006da6:	461a      	mov	r2, r3
 8006da8:	7dbb      	ldrb	r3, [r7, #22]
 8006daa:	fa42 f303 	asr.w	r3, r2, r3
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d02e      	beq.n	8006e14 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8006db6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d110      	bne.n	8006dde <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8006dbc:	79bb      	ldrb	r3, [r7, #6]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	7d7b      	ldrb	r3, [r7, #21]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	4413      	add	r3, r2
 8006dc6:	b298      	uxth	r0, r3
 8006dc8:	797b      	ldrb	r3, [r7, #5]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	7dbb      	ldrb	r3, [r7, #22]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	887a      	ldrh	r2, [r7, #2]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f000 fb46 	bl	8007468 <ILI9341_Draw_Pixel>
 8006ddc:	e01a      	b.n	8006e14 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8006dde:	79bb      	ldrb	r3, [r7, #6]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	7d7b      	ldrb	r3, [r7, #21]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006de8:	fb11 f303 	smulbb	r3, r1, r3
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	4413      	add	r3, r2
 8006df0:	b298      	uxth	r0, r3
 8006df2:	797b      	ldrb	r3, [r7, #5]
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	7dbb      	ldrb	r3, [r7, #22]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006dfc:	fb11 f303 	smulbb	r3, r1, r3
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	4413      	add	r3, r2
 8006e04:	b299      	uxth	r1, r3
 8006e06:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8006e08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006e0a:	887b      	ldrh	r3, [r7, #2]
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	4623      	mov	r3, r4
 8006e10:	f000 fbf2 	bl	80075f8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8006e14:	7dbb      	ldrb	r3, [r7, #22]
 8006e16:	3301      	adds	r3, #1
 8006e18:	75bb      	strb	r3, [r7, #22]
 8006e1a:	7dbb      	ldrb	r3, [r7, #22]
 8006e1c:	2b07      	cmp	r3, #7
 8006e1e:	d9bc      	bls.n	8006d9a <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006e20:	7d7b      	ldrb	r3, [r7, #21]
 8006e22:	3301      	adds	r3, #1
 8006e24:	757b      	strb	r3, [r7, #21]
 8006e26:	7d7b      	ldrb	r3, [r7, #21]
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	d9b3      	bls.n	8006d94 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8006e2c:	bf00      	nop
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd90      	pop	{r4, r7, pc}
 8006e34:	08008a34 	.word	0x08008a34

08006e38 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	4608      	mov	r0, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	70fb      	strb	r3, [r7, #3]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	70bb      	strb	r3, [r7, #2]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8006e52:	e017      	b.n	8006e84 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	607a      	str	r2, [r7, #4]
 8006e5a:	7818      	ldrb	r0, [r3, #0]
 8006e5c:	883c      	ldrh	r4, [r7, #0]
 8006e5e:	78ba      	ldrb	r2, [r7, #2]
 8006e60:	78f9      	ldrb	r1, [r7, #3]
 8006e62:	8bbb      	ldrh	r3, [r7, #28]
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	8b3b      	ldrh	r3, [r7, #24]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	f7ff ff4a 	bl	8006d04 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8006e70:	8b3b      	ldrh	r3, [r7, #24]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	0052      	lsls	r2, r2, #1
 8006e78:	4413      	add	r3, r2
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	4413      	add	r3, r2
 8006e82:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e3      	bne.n	8006e54 <ILI9341_Draw_Text+0x1c>
    }
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd90      	pop	{r4, r7, pc}

08006e94 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0

	//GPIO INIT
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2180      	movs	r1, #128	; 0x80
 8006e9c:	4802      	ldr	r0, [pc, #8]	; (8006ea8 <ILI9341_SPI_Init+0x14>)
 8006e9e:	f7fd fa01 	bl	80042a4 <HAL_GPIO_WritePin>
}
 8006ea2:	bf00      	nop
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	48000400 	.word	0x48000400

08006eac <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;
	#ifdef USE_ILI9341_SPIDMA
		if( ((res = HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &SPI_Data, 1)) != HAL_OK) )
 8006eb6:	1dfb      	adds	r3, r7, #7
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4804      	ldr	r0, [pc, #16]	; (8006ed0 <ILI9341_SPI_Send+0x24>)
 8006ebe:	f7fe fc1d 	bl	80056fc <HAL_SPI_Transmit_DMA>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}
	#endif

}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	200021d0 	.word	0x200021d0

08006ed4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2180      	movs	r1, #128	; 0x80
 8006ee2:	480a      	ldr	r0, [pc, #40]	; (8006f0c <ILI9341_Write_Command+0x38>)
 8006ee4:	f7fd f9de 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2140      	movs	r1, #64	; 0x40
 8006eec:	4807      	ldr	r0, [pc, #28]	; (8006f0c <ILI9341_Write_Command+0x38>)
 8006eee:	f7fd f9d9 	bl	80042a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff ffd9 	bl	8006eac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8006efa:	2201      	movs	r2, #1
 8006efc:	2180      	movs	r1, #128	; 0x80
 8006efe:	4803      	ldr	r0, [pc, #12]	; (8006f0c <ILI9341_Write_Command+0x38>)
 8006f00:	f7fd f9d0 	bl	80042a4 <HAL_GPIO_WritePin>
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	48000400 	.word	0x48000400

08006f10 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	2140      	movs	r1, #64	; 0x40
 8006f1e:	480a      	ldr	r0, [pc, #40]	; (8006f48 <ILI9341_Write_Data+0x38>)
 8006f20:	f7fd f9c0 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006f24:	2200      	movs	r2, #0
 8006f26:	2180      	movs	r1, #128	; 0x80
 8006f28:	4807      	ldr	r0, [pc, #28]	; (8006f48 <ILI9341_Write_Data+0x38>)
 8006f2a:	f7fd f9bb 	bl	80042a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff ffbb 	bl	8006eac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006f36:	2201      	movs	r2, #1
 8006f38:	2180      	movs	r1, #128	; 0x80
 8006f3a:	4803      	ldr	r0, [pc, #12]	; (8006f48 <ILI9341_Write_Data+0x38>)
 8006f3c:	f7fd f9b2 	bl	80042a4 <HAL_GPIO_WritePin>
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	48000400 	.word	0x48000400

08006f4c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8006f4c:	b590      	push	{r4, r7, lr}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4623      	mov	r3, r4
 8006f5c:	80fb      	strh	r3, [r7, #6]
 8006f5e:	4603      	mov	r3, r0
 8006f60:	80bb      	strh	r3, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	807b      	strh	r3, [r7, #2]
 8006f66:	4613      	mov	r3, r2
 8006f68:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8006f6a:	202a      	movs	r0, #42	; 0x2a
 8006f6c:	f7ff ffb2 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ffc9 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8006f7e:	88fb      	ldrh	r3, [r7, #6]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff ffc4 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8006f88:	887b      	ldrh	r3, [r7, #2]
 8006f8a:	0a1b      	lsrs	r3, r3, #8
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ffbd 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8006f96:	887b      	ldrh	r3, [r7, #2]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff ffb8 	bl	8006f10 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8006fa0:	202b      	movs	r0, #43	; 0x2b
 8006fa2:	f7ff ff97 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8006fa6:	88bb      	ldrh	r3, [r7, #4]
 8006fa8:	0a1b      	lsrs	r3, r3, #8
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff ffae 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8006fb4:	88bb      	ldrh	r3, [r7, #4]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff ffa9 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8006fbe:	883b      	ldrh	r3, [r7, #0]
 8006fc0:	0a1b      	lsrs	r3, r3, #8
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff ffa2 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8006fcc:	883b      	ldrh	r3, [r7, #0]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff ff9d 	bl	8006f10 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8006fd6:	202c      	movs	r0, #44	; 0x2c
 8006fd8:	f7ff ff7c 	bl	8006ed4 <ILI9341_Write_Command>
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd90      	pop	{r4, r7, pc}

08006fe4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fee:	480b      	ldr	r0, [pc, #44]	; (800701c <ILI9341_Reset+0x38>)
 8006ff0:	f7fd f958 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8006ff4:	20c8      	movs	r0, #200	; 0xc8
 8006ff6:	f7fa fd25 	bl	8001a44 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2180      	movs	r1, #128	; 0x80
 8006ffe:	4807      	ldr	r0, [pc, #28]	; (800701c <ILI9341_Reset+0x38>)
 8007000:	f7fd f950 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8007004:	20c8      	movs	r0, #200	; 0xc8
 8007006:	f7fa fd1d 	bl	8001a44 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800700a:	2201      	movs	r2, #1
 800700c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007010:	4802      	ldr	r0, [pc, #8]	; (800701c <ILI9341_Reset+0x38>)
 8007012:	f7fd f947 	bl	80042a4 <HAL_GPIO_WritePin>
}
 8007016:	bf00      	nop
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	48000400 	.word	0x48000400

08007020 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800702e:	2036      	movs	r0, #54	; 0x36
 8007030:	f7ff ff50 	bl	8006ed4 <ILI9341_Write_Command>
//HAL_Delay(1);
	
switch(screen_rotation) 
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	2b03      	cmp	r3, #3
 8007038:	d836      	bhi.n	80070a8 <ILI9341_Set_Rotation+0x88>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <ILI9341_Set_Rotation+0x20>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007051 	.word	0x08007051
 8007044:	08007067 	.word	0x08007067
 8007048:	0800707d 	.word	0x0800707d
 800704c:	08007093 	.word	0x08007093
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8007050:	2048      	movs	r0, #72	; 0x48
 8007052:	f7ff ff5d 	bl	8006f10 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007056:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <ILI9341_Set_Rotation+0x94>)
 8007058:	22f0      	movs	r2, #240	; 0xf0
 800705a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800705c:	4b16      	ldr	r3, [pc, #88]	; (80070b8 <ILI9341_Set_Rotation+0x98>)
 800705e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007062:	801a      	strh	r2, [r3, #0]
			break;
 8007064:	e021      	b.n	80070aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007066:	2028      	movs	r0, #40	; 0x28
 8007068:	f7ff ff52 	bl	8006f10 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800706c:	4b11      	ldr	r3, [pc, #68]	; (80070b4 <ILI9341_Set_Rotation+0x94>)
 800706e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007072:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007074:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <ILI9341_Set_Rotation+0x98>)
 8007076:	22f0      	movs	r2, #240	; 0xf0
 8007078:	801a      	strh	r2, [r3, #0]
			break;
 800707a:	e016      	b.n	80070aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800707c:	2088      	movs	r0, #136	; 0x88
 800707e:	f7ff ff47 	bl	8006f10 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8007082:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <ILI9341_Set_Rotation+0x94>)
 8007084:	22f0      	movs	r2, #240	; 0xf0
 8007086:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <ILI9341_Set_Rotation+0x98>)
 800708a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800708e:	801a      	strh	r2, [r3, #0]
			break;
 8007090:	e00b      	b.n	80070aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8007092:	20e8      	movs	r0, #232	; 0xe8
 8007094:	f7ff ff3c 	bl	8006f10 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007098:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <ILI9341_Set_Rotation+0x94>)
 800709a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800709e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <ILI9341_Set_Rotation+0x98>)
 80070a2:	22f0      	movs	r2, #240	; 0xf0
 80070a4:	801a      	strh	r2, [r3, #0]
			break;
 80070a6:	e000      	b.n	80070aa <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80070a8:	bf00      	nop
	}
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20001f52 	.word	0x20001f52
 80070b8:	20001f50 	.word	0x20001f50

080070bc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80070c0:	2201      	movs	r2, #1
 80070c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070c6:	4802      	ldr	r0, [pc, #8]	; (80070d0 <ILI9341_Enable+0x14>)
 80070c8:	f7fd f8ec 	bl	80042a4 <HAL_GPIO_WritePin>
}
 80070cc:	bf00      	nop
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	48000400 	.word	0x48000400

080070d4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80070d8:	f7ff fff0 	bl	80070bc <ILI9341_Enable>
ILI9341_SPI_Init();
 80070dc:	f7ff feda 	bl	8006e94 <ILI9341_SPI_Init>
ILI9341_Reset();
 80070e0:	f7ff ff80 	bl	8006fe4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80070e4:	2001      	movs	r0, #1
 80070e6:	f7ff fef5 	bl	8006ed4 <ILI9341_Write_Command>
HAL_Delay(2000);
 80070ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80070ee:	f7fa fca9 	bl	8001a44 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80070f2:	20cb      	movs	r0, #203	; 0xcb
 80070f4:	f7ff feee 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80070f8:	2039      	movs	r0, #57	; 0x39
 80070fa:	f7ff ff09 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80070fe:	202c      	movs	r0, #44	; 0x2c
 8007100:	f7ff ff06 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8007104:	2000      	movs	r0, #0
 8007106:	f7ff ff03 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800710a:	2034      	movs	r0, #52	; 0x34
 800710c:	f7ff ff00 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8007110:	2002      	movs	r0, #2
 8007112:	f7ff fefd 	bl	8006f10 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8007116:	20cf      	movs	r0, #207	; 0xcf
 8007118:	f7ff fedc 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800711c:	2000      	movs	r0, #0
 800711e:	f7ff fef7 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8007122:	20c1      	movs	r0, #193	; 0xc1
 8007124:	f7ff fef4 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8007128:	2030      	movs	r0, #48	; 0x30
 800712a:	f7ff fef1 	bl	8006f10 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800712e:	20e8      	movs	r0, #232	; 0xe8
 8007130:	f7ff fed0 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8007134:	2085      	movs	r0, #133	; 0x85
 8007136:	f7ff feeb 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800713a:	2000      	movs	r0, #0
 800713c:	f7ff fee8 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8007140:	2078      	movs	r0, #120	; 0x78
 8007142:	f7ff fee5 	bl	8006f10 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8007146:	20ea      	movs	r0, #234	; 0xea
 8007148:	f7ff fec4 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800714c:	2000      	movs	r0, #0
 800714e:	f7ff fedf 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8007152:	2000      	movs	r0, #0
 8007154:	f7ff fedc 	bl	8006f10 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8007158:	20ed      	movs	r0, #237	; 0xed
 800715a:	f7ff febb 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800715e:	2064      	movs	r0, #100	; 0x64
 8007160:	f7ff fed6 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8007164:	2003      	movs	r0, #3
 8007166:	f7ff fed3 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800716a:	2012      	movs	r0, #18
 800716c:	f7ff fed0 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8007170:	2081      	movs	r0, #129	; 0x81
 8007172:	f7ff fecd 	bl	8006f10 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8007176:	20f7      	movs	r0, #247	; 0xf7
 8007178:	f7ff feac 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800717c:	2020      	movs	r0, #32
 800717e:	f7ff fec7 	bl	8006f10 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8007182:	20c0      	movs	r0, #192	; 0xc0
 8007184:	f7ff fea6 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8007188:	2023      	movs	r0, #35	; 0x23
 800718a:	f7ff fec1 	bl	8006f10 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800718e:	20c1      	movs	r0, #193	; 0xc1
 8007190:	f7ff fea0 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8007194:	2010      	movs	r0, #16
 8007196:	f7ff febb 	bl	8006f10 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800719a:	20c5      	movs	r0, #197	; 0xc5
 800719c:	f7ff fe9a 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80071a0:	203e      	movs	r0, #62	; 0x3e
 80071a2:	f7ff feb5 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80071a6:	2028      	movs	r0, #40	; 0x28
 80071a8:	f7ff feb2 	bl	8006f10 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80071ac:	20c7      	movs	r0, #199	; 0xc7
 80071ae:	f7ff fe91 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80071b2:	2086      	movs	r0, #134	; 0x86
 80071b4:	f7ff feac 	bl	8006f10 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80071b8:	2036      	movs	r0, #54	; 0x36
 80071ba:	f7ff fe8b 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80071be:	2048      	movs	r0, #72	; 0x48
 80071c0:	f7ff fea6 	bl	8006f10 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80071c4:	203a      	movs	r0, #58	; 0x3a
 80071c6:	f7ff fe85 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80071ca:	2055      	movs	r0, #85	; 0x55
 80071cc:	f7ff fea0 	bl	8006f10 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80071d0:	20b1      	movs	r0, #177	; 0xb1
 80071d2:	f7ff fe7f 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80071d6:	2000      	movs	r0, #0
 80071d8:	f7ff fe9a 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80071dc:	2018      	movs	r0, #24
 80071de:	f7ff fe97 	bl	8006f10 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80071e2:	20b6      	movs	r0, #182	; 0xb6
 80071e4:	f7ff fe76 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80071e8:	2008      	movs	r0, #8
 80071ea:	f7ff fe91 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80071ee:	2082      	movs	r0, #130	; 0x82
 80071f0:	f7ff fe8e 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80071f4:	2027      	movs	r0, #39	; 0x27
 80071f6:	f7ff fe8b 	bl	8006f10 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80071fa:	20f2      	movs	r0, #242	; 0xf2
 80071fc:	f7ff fe6a 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007200:	2000      	movs	r0, #0
 8007202:	f7ff fe85 	bl	8006f10 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8007206:	2026      	movs	r0, #38	; 0x26
 8007208:	f7ff fe64 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800720c:	2001      	movs	r0, #1
 800720e:	f7ff fe7f 	bl	8006f10 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8007212:	20e0      	movs	r0, #224	; 0xe0
 8007214:	f7ff fe5e 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8007218:	200f      	movs	r0, #15
 800721a:	f7ff fe79 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800721e:	2031      	movs	r0, #49	; 0x31
 8007220:	f7ff fe76 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8007224:	202b      	movs	r0, #43	; 0x2b
 8007226:	f7ff fe73 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800722a:	200c      	movs	r0, #12
 800722c:	f7ff fe70 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8007230:	200e      	movs	r0, #14
 8007232:	f7ff fe6d 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8007236:	2008      	movs	r0, #8
 8007238:	f7ff fe6a 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800723c:	204e      	movs	r0, #78	; 0x4e
 800723e:	f7ff fe67 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8007242:	20f1      	movs	r0, #241	; 0xf1
 8007244:	f7ff fe64 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8007248:	2037      	movs	r0, #55	; 0x37
 800724a:	f7ff fe61 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800724e:	2007      	movs	r0, #7
 8007250:	f7ff fe5e 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8007254:	2010      	movs	r0, #16
 8007256:	f7ff fe5b 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800725a:	2003      	movs	r0, #3
 800725c:	f7ff fe58 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8007260:	200e      	movs	r0, #14
 8007262:	f7ff fe55 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8007266:	2009      	movs	r0, #9
 8007268:	f7ff fe52 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800726c:	2000      	movs	r0, #0
 800726e:	f7ff fe4f 	bl	8006f10 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8007272:	20e1      	movs	r0, #225	; 0xe1
 8007274:	f7ff fe2e 	bl	8006ed4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007278:	2000      	movs	r0, #0
 800727a:	f7ff fe49 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800727e:	200e      	movs	r0, #14
 8007280:	f7ff fe46 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8007284:	2014      	movs	r0, #20
 8007286:	f7ff fe43 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800728a:	2003      	movs	r0, #3
 800728c:	f7ff fe40 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8007290:	2011      	movs	r0, #17
 8007292:	f7ff fe3d 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8007296:	2007      	movs	r0, #7
 8007298:	f7ff fe3a 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800729c:	2031      	movs	r0, #49	; 0x31
 800729e:	f7ff fe37 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80072a2:	20c1      	movs	r0, #193	; 0xc1
 80072a4:	f7ff fe34 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80072a8:	2048      	movs	r0, #72	; 0x48
 80072aa:	f7ff fe31 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80072ae:	2008      	movs	r0, #8
 80072b0:	f7ff fe2e 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80072b4:	200f      	movs	r0, #15
 80072b6:	f7ff fe2b 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80072ba:	200c      	movs	r0, #12
 80072bc:	f7ff fe28 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80072c0:	2031      	movs	r0, #49	; 0x31
 80072c2:	f7ff fe25 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80072c6:	2036      	movs	r0, #54	; 0x36
 80072c8:	f7ff fe22 	bl	8006f10 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80072cc:	200f      	movs	r0, #15
 80072ce:	f7ff fe1f 	bl	8006f10 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80072d2:	2011      	movs	r0, #17
 80072d4:	f7ff fdfe 	bl	8006ed4 <ILI9341_Write_Command>
HAL_Delay(240);
 80072d8:	20f0      	movs	r0, #240	; 0xf0
 80072da:	f7fa fbb3 	bl	8001a44 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80072de:	2029      	movs	r0, #41	; 0x29
 80072e0:	f7ff fdf8 	bl	8006ed4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80072e4:	2000      	movs	r0, #0
 80072e6:	f7ff fe9b 	bl	8007020 <ILI9341_Set_Rotation>
}
 80072ea:	bf00      	nop
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80072f0:	b5b0      	push	{r4, r5, r7, lr}
 80072f2:	b08c      	sub	sp, #48	; 0x30
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	80fb      	strh	r3, [r7, #6]
 80072fc:	466b      	mov	r3, sp
 80072fe:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800730c:	d202      	bcs.n	8007314 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
 8007312:	e002      	b.n	800731a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8007314:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800731a:	2201      	movs	r2, #1
 800731c:	2140      	movs	r1, #64	; 0x40
 800731e:	483d      	ldr	r0, [pc, #244]	; (8007414 <ILI9341_Draw_Colour_Burst+0x124>)
 8007320:	f7fc ffc0 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007324:	2200      	movs	r2, #0
 8007326:	2180      	movs	r1, #128	; 0x80
 8007328:	483a      	ldr	r0, [pc, #232]	; (8007414 <ILI9341_Draw_Colour_Burst+0x124>)
 800732a:	f7fc ffbb 	bl	80042a4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	0a1b      	lsrs	r3, r3, #8
 8007332:	b29b      	uxth	r3, r3
 8007334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8007338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800733a:	4603      	mov	r3, r0
 800733c:	3b01      	subs	r3, #1
 800733e:	61fb      	str	r3, [r7, #28]
 8007340:	4601      	mov	r1, r0
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	f04f 0400 	mov.w	r4, #0
 800734e:	00d4      	lsls	r4, r2, #3
 8007350:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007354:	00cb      	lsls	r3, r1, #3
 8007356:	4601      	mov	r1, r0
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	f04f 0400 	mov.w	r4, #0
 8007364:	00d4      	lsls	r4, r2, #3
 8007366:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800736a:	00cb      	lsls	r3, r1, #3
 800736c:	1dc3      	adds	r3, r0, #7
 800736e:	08db      	lsrs	r3, r3, #3
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	ebad 0d03 	sub.w	sp, sp, r3
 8007376:	466b      	mov	r3, sp
 8007378:	3300      	adds	r3, #0
 800737a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800737c:	2300      	movs	r3, #0
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007380:	e00e      	b.n	80073a0 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	4413      	add	r3, r2
 8007388:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800738c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	3301      	adds	r3, #1
 8007392:	88fa      	ldrh	r2, [r7, #6]
 8007394:	b2d1      	uxtb	r1, r2
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	3302      	adds	r3, #2
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d3ec      	bcc.n	8007382 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b6:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80073c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073c2:	fb01 f202 	mul.w	r2, r1, r2
 80073c6:	1a9b      	subs	r3, r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80073d0:	2300      	movs	r3, #0
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d4:	e009      	b.n	80073ea <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80073d6:	69b9      	ldr	r1, [r7, #24]
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	b29a      	uxth	r2, r3
 80073dc:	230a      	movs	r3, #10
 80073de:	480e      	ldr	r0, [pc, #56]	; (8007418 <ILI9341_Draw_Colour_Burst+0x128>)
 80073e0:	f7fe f826 	bl	8005430 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	3301      	adds	r3, #1
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d3f1      	bcc.n	80073d6 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80073f2:	69b9      	ldr	r1, [r7, #24]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	230a      	movs	r3, #10
 80073fa:	4807      	ldr	r0, [pc, #28]	; (8007418 <ILI9341_Draw_Colour_Burst+0x128>)
 80073fc:	f7fe f818 	bl	8005430 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007400:	2201      	movs	r2, #1
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	4803      	ldr	r0, [pc, #12]	; (8007414 <ILI9341_Draw_Colour_Burst+0x124>)
 8007406:	f7fc ff4d 	bl	80042a4 <HAL_GPIO_WritePin>
 800740a:	46ad      	mov	sp, r5
}
 800740c:	bf00      	nop
 800740e:	3730      	adds	r7, #48	; 0x30
 8007410:	46bd      	mov	sp, r7
 8007412:	bdb0      	pop	{r4, r5, r7, pc}
 8007414:	48000400 	.word	0x48000400
 8007418:	200021d0 	.word	0x200021d0

0800741c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8007426:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <ILI9341_Fill_Screen+0x44>)
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29a      	uxth	r2, r3
 800742c:	4b0d      	ldr	r3, [pc, #52]	; (8007464 <ILI9341_Fill_Screen+0x48>)
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	2100      	movs	r1, #0
 8007434:	2000      	movs	r0, #0
 8007436:	f7ff fd89 	bl	8006f4c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800743a:	4b09      	ldr	r3, [pc, #36]	; (8007460 <ILI9341_Fill_Screen+0x44>)
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	461a      	mov	r2, r3
 8007442:	4b08      	ldr	r3, [pc, #32]	; (8007464 <ILI9341_Fill_Screen+0x48>)
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	fb03 f302 	mul.w	r3, r3, r2
 800744c:	461a      	mov	r2, r3
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff ff4c 	bl	80072f0 <ILI9341_Draw_Colour_Burst>
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20001f52 	.word	0x20001f52
 8007464:	20001f50 	.word	0x20001f50

08007468 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	80fb      	strh	r3, [r7, #6]
 8007472:	460b      	mov	r3, r1
 8007474:	80bb      	strh	r3, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800747a:	4b5b      	ldr	r3, [pc, #364]	; (80075e8 <ILI9341_Draw_Pixel+0x180>)
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	429a      	cmp	r2, r3
 8007484:	f080 80ac 	bcs.w	80075e0 <ILI9341_Draw_Pixel+0x178>
 8007488:	4b58      	ldr	r3, [pc, #352]	; (80075ec <ILI9341_Draw_Pixel+0x184>)
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	88ba      	ldrh	r2, [r7, #4]
 8007490:	429a      	cmp	r2, r3
 8007492:	f080 80a5 	bcs.w	80075e0 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8007496:	2200      	movs	r2, #0
 8007498:	2140      	movs	r1, #64	; 0x40
 800749a:	4855      	ldr	r0, [pc, #340]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 800749c:	f7fc ff02 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80074a0:	2200      	movs	r2, #0
 80074a2:	2180      	movs	r1, #128	; 0x80
 80074a4:	4852      	ldr	r0, [pc, #328]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 80074a6:	f7fc fefd 	bl	80042a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80074aa:	202a      	movs	r0, #42	; 0x2a
 80074ac:	f7ff fcfe 	bl	8006eac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80074b0:	2201      	movs	r2, #1
 80074b2:	2140      	movs	r1, #64	; 0x40
 80074b4:	484e      	ldr	r0, [pc, #312]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 80074b6:	f7fc fef5 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80074ba:	2201      	movs	r2, #1
 80074bc:	2180      	movs	r1, #128	; 0x80
 80074be:	484c      	ldr	r0, [pc, #304]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 80074c0:	f7fc fef0 	bl	80042a4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80074c4:	2200      	movs	r2, #0
 80074c6:	2180      	movs	r1, #128	; 0x80
 80074c8:	4849      	ldr	r0, [pc, #292]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 80074ca:	f7fc feeb 	bl	80042a4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	0a1b      	lsrs	r3, r3, #8
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	753b      	strb	r3, [r7, #20]
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	757b      	strb	r3, [r7, #21]
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	3301      	adds	r3, #1
 80074e2:	121b      	asrs	r3, r3, #8
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	75bb      	strb	r3, [r7, #22]
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	3301      	adds	r3, #1
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80074f2:	f107 0114 	add.w	r1, r7, #20
 80074f6:	2301      	movs	r3, #1
 80074f8:	2204      	movs	r2, #4
 80074fa:	483e      	ldr	r0, [pc, #248]	; (80075f4 <ILI9341_Draw_Pixel+0x18c>)
 80074fc:	f7fd ff98 	bl	8005430 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007500:	2201      	movs	r2, #1
 8007502:	2180      	movs	r1, #128	; 0x80
 8007504:	483a      	ldr	r0, [pc, #232]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 8007506:	f7fc fecd 	bl	80042a4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800750a:	2200      	movs	r2, #0
 800750c:	2140      	movs	r1, #64	; 0x40
 800750e:	4838      	ldr	r0, [pc, #224]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 8007510:	f7fc fec8 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007514:	2200      	movs	r2, #0
 8007516:	2180      	movs	r1, #128	; 0x80
 8007518:	4835      	ldr	r0, [pc, #212]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 800751a:	f7fc fec3 	bl	80042a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800751e:	202b      	movs	r0, #43	; 0x2b
 8007520:	f7ff fcc4 	bl	8006eac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8007524:	2201      	movs	r2, #1
 8007526:	2140      	movs	r1, #64	; 0x40
 8007528:	4831      	ldr	r0, [pc, #196]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 800752a:	f7fc febb 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800752e:	2201      	movs	r2, #1
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	482f      	ldr	r0, [pc, #188]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 8007534:	f7fc feb6 	bl	80042a4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007538:	2200      	movs	r2, #0
 800753a:	2180      	movs	r1, #128	; 0x80
 800753c:	482c      	ldr	r0, [pc, #176]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 800753e:	f7fc feb1 	bl	80042a4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8007542:	88bb      	ldrh	r3, [r7, #4]
 8007544:	0a1b      	lsrs	r3, r3, #8
 8007546:	b29b      	uxth	r3, r3
 8007548:	b2db      	uxtb	r3, r3
 800754a:	743b      	strb	r3, [r7, #16]
 800754c:	88bb      	ldrh	r3, [r7, #4]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	747b      	strb	r3, [r7, #17]
 8007552:	88bb      	ldrh	r3, [r7, #4]
 8007554:	3301      	adds	r3, #1
 8007556:	121b      	asrs	r3, r3, #8
 8007558:	b2db      	uxtb	r3, r3
 800755a:	74bb      	strb	r3, [r7, #18]
 800755c:	88bb      	ldrh	r3, [r7, #4]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	3301      	adds	r3, #1
 8007562:	b2db      	uxtb	r3, r3
 8007564:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8007566:	f107 0110 	add.w	r1, r7, #16
 800756a:	2301      	movs	r3, #1
 800756c:	2204      	movs	r2, #4
 800756e:	4821      	ldr	r0, [pc, #132]	; (80075f4 <ILI9341_Draw_Pixel+0x18c>)
 8007570:	f7fd ff5e 	bl	8005430 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007574:	2201      	movs	r2, #1
 8007576:	2180      	movs	r1, #128	; 0x80
 8007578:	481d      	ldr	r0, [pc, #116]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 800757a:	f7fc fe93 	bl	80042a4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800757e:	2200      	movs	r2, #0
 8007580:	2140      	movs	r1, #64	; 0x40
 8007582:	481b      	ldr	r0, [pc, #108]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 8007584:	f7fc fe8e 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007588:	2200      	movs	r2, #0
 800758a:	2180      	movs	r1, #128	; 0x80
 800758c:	4818      	ldr	r0, [pc, #96]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 800758e:	f7fc fe89 	bl	80042a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8007592:	202c      	movs	r0, #44	; 0x2c
 8007594:	f7ff fc8a 	bl	8006eac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8007598:	2201      	movs	r2, #1
 800759a:	2140      	movs	r1, #64	; 0x40
 800759c:	4814      	ldr	r0, [pc, #80]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 800759e:	f7fc fe81 	bl	80042a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80075a2:	2201      	movs	r2, #1
 80075a4:	2180      	movs	r1, #128	; 0x80
 80075a6:	4812      	ldr	r0, [pc, #72]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 80075a8:	f7fc fe7c 	bl	80042a4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80075ac:	2200      	movs	r2, #0
 80075ae:	2180      	movs	r1, #128	; 0x80
 80075b0:	480f      	ldr	r0, [pc, #60]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 80075b2:	f7fc fe77 	bl	80042a4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80075b6:	887b      	ldrh	r3, [r7, #2]
 80075b8:	0a1b      	lsrs	r3, r3, #8
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	733b      	strb	r3, [r7, #12]
 80075c0:	887b      	ldrh	r3, [r7, #2]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80075c6:	f107 010c 	add.w	r1, r7, #12
 80075ca:	2301      	movs	r3, #1
 80075cc:	2202      	movs	r2, #2
 80075ce:	4809      	ldr	r0, [pc, #36]	; (80075f4 <ILI9341_Draw_Pixel+0x18c>)
 80075d0:	f7fd ff2e 	bl	8005430 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80075d4:	2201      	movs	r2, #1
 80075d6:	2180      	movs	r1, #128	; 0x80
 80075d8:	4805      	ldr	r0, [pc, #20]	; (80075f0 <ILI9341_Draw_Pixel+0x188>)
 80075da:	f7fc fe63 	bl	80042a4 <HAL_GPIO_WritePin>
 80075de:	e000      	b.n	80075e2 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80075e0:	bf00      	nop
	
}
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20001f52 	.word	0x20001f52
 80075ec:	20001f50 	.word	0x20001f50
 80075f0:	48000400 	.word	0x48000400
 80075f4:	200021d0 	.word	0x200021d0

080075f8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80075f8:	b590      	push	{r4, r7, lr}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	461a      	mov	r2, r3
 8007606:	4623      	mov	r3, r4
 8007608:	80fb      	strh	r3, [r7, #6]
 800760a:	4603      	mov	r3, r0
 800760c:	80bb      	strh	r3, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	807b      	strh	r3, [r7, #2]
 8007612:	4613      	mov	r3, r2
 8007614:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007616:	4b25      	ldr	r3, [pc, #148]	; (80076ac <ILI9341_Draw_Rectangle+0xb4>)
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	88fa      	ldrh	r2, [r7, #6]
 800761e:	429a      	cmp	r2, r3
 8007620:	d23f      	bcs.n	80076a2 <ILI9341_Draw_Rectangle+0xaa>
 8007622:	4b23      	ldr	r3, [pc, #140]	; (80076b0 <ILI9341_Draw_Rectangle+0xb8>)
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	88ba      	ldrh	r2, [r7, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d239      	bcs.n	80076a2 <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 800762e:	88fa      	ldrh	r2, [r7, #6]
 8007630:	887b      	ldrh	r3, [r7, #2]
 8007632:	4413      	add	r3, r2
 8007634:	3b01      	subs	r3, #1
 8007636:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <ILI9341_Draw_Rectangle+0xb4>)
 8007638:	8812      	ldrh	r2, [r2, #0]
 800763a:	b292      	uxth	r2, r2
 800763c:	4293      	cmp	r3, r2
 800763e:	db05      	blt.n	800764c <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 8007640:	4b1a      	ldr	r3, [pc, #104]	; (80076ac <ILI9341_Draw_Rectangle+0xb4>)
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29a      	uxth	r2, r3
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800764c:	88ba      	ldrh	r2, [r7, #4]
 800764e:	883b      	ldrh	r3, [r7, #0]
 8007650:	4413      	add	r3, r2
 8007652:	3b01      	subs	r3, #1
 8007654:	4a16      	ldr	r2, [pc, #88]	; (80076b0 <ILI9341_Draw_Rectangle+0xb8>)
 8007656:	8812      	ldrh	r2, [r2, #0]
 8007658:	b292      	uxth	r2, r2
 800765a:	4293      	cmp	r3, r2
 800765c:	db05      	blt.n	800766a <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 800765e:	4b14      	ldr	r3, [pc, #80]	; (80076b0 <ILI9341_Draw_Rectangle+0xb8>)
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29a      	uxth	r2, r3
 8007664:	88bb      	ldrh	r3, [r7, #4]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800766a:	88fa      	ldrh	r2, [r7, #6]
 800766c:	887b      	ldrh	r3, [r7, #2]
 800766e:	4413      	add	r3, r2
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29c      	uxth	r4, r3
 8007676:	88ba      	ldrh	r2, [r7, #4]
 8007678:	883b      	ldrh	r3, [r7, #0]
 800767a:	4413      	add	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29b      	uxth	r3, r3
 8007682:	88b9      	ldrh	r1, [r7, #4]
 8007684:	88f8      	ldrh	r0, [r7, #6]
 8007686:	4622      	mov	r2, r4
 8007688:	f7ff fc60 	bl	8006f4c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 800768c:	883b      	ldrh	r3, [r7, #0]
 800768e:	887a      	ldrh	r2, [r7, #2]
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	461a      	mov	r2, r3
 8007696:	8b3b      	ldrh	r3, [r7, #24]
 8007698:	4611      	mov	r1, r2
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff fe28 	bl	80072f0 <ILI9341_Draw_Colour_Burst>
 80076a0:	e000      	b.n	80076a4 <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80076a2:	bf00      	nop
}
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd90      	pop	{r4, r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20001f52 	.word	0x20001f52
 80076b0:	20001f50 	.word	0x20001f50

080076b4 <__errno>:
 80076b4:	4b01      	ldr	r3, [pc, #4]	; (80076bc <__errno+0x8>)
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20001f54 	.word	0x20001f54

080076c0 <__libc_init_array>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	4e0d      	ldr	r6, [pc, #52]	; (80076f8 <__libc_init_array+0x38>)
 80076c4:	4c0d      	ldr	r4, [pc, #52]	; (80076fc <__libc_init_array+0x3c>)
 80076c6:	1ba4      	subs	r4, r4, r6
 80076c8:	10a4      	asrs	r4, r4, #2
 80076ca:	2500      	movs	r5, #0
 80076cc:	42a5      	cmp	r5, r4
 80076ce:	d109      	bne.n	80076e4 <__libc_init_array+0x24>
 80076d0:	4e0b      	ldr	r6, [pc, #44]	; (8007700 <__libc_init_array+0x40>)
 80076d2:	4c0c      	ldr	r4, [pc, #48]	; (8007704 <__libc_init_array+0x44>)
 80076d4:	f001 f940 	bl	8008958 <_init>
 80076d8:	1ba4      	subs	r4, r4, r6
 80076da:	10a4      	asrs	r4, r4, #2
 80076dc:	2500      	movs	r5, #0
 80076de:	42a5      	cmp	r5, r4
 80076e0:	d105      	bne.n	80076ee <__libc_init_array+0x2e>
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076e8:	4798      	blx	r3
 80076ea:	3501      	adds	r5, #1
 80076ec:	e7ee      	b.n	80076cc <__libc_init_array+0xc>
 80076ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076f2:	4798      	blx	r3
 80076f4:	3501      	adds	r5, #1
 80076f6:	e7f2      	b.n	80076de <__libc_init_array+0x1e>
 80076f8:	08008d0c 	.word	0x08008d0c
 80076fc:	08008d0c 	.word	0x08008d0c
 8007700:	08008d0c 	.word	0x08008d0c
 8007704:	08008d10 	.word	0x08008d10

08007708 <memset>:
 8007708:	4402      	add	r2, r0
 800770a:	4603      	mov	r3, r0
 800770c:	4293      	cmp	r3, r2
 800770e:	d100      	bne.n	8007712 <memset+0xa>
 8007710:	4770      	bx	lr
 8007712:	f803 1b01 	strb.w	r1, [r3], #1
 8007716:	e7f9      	b.n	800770c <memset+0x4>

08007718 <iprintf>:
 8007718:	b40f      	push	{r0, r1, r2, r3}
 800771a:	4b0a      	ldr	r3, [pc, #40]	; (8007744 <iprintf+0x2c>)
 800771c:	b513      	push	{r0, r1, r4, lr}
 800771e:	681c      	ldr	r4, [r3, #0]
 8007720:	b124      	cbz	r4, 800772c <iprintf+0x14>
 8007722:	69a3      	ldr	r3, [r4, #24]
 8007724:	b913      	cbnz	r3, 800772c <iprintf+0x14>
 8007726:	4620      	mov	r0, r4
 8007728:	f000 fa56 	bl	8007bd8 <__sinit>
 800772c:	ab05      	add	r3, sp, #20
 800772e:	9a04      	ldr	r2, [sp, #16]
 8007730:	68a1      	ldr	r1, [r4, #8]
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	4620      	mov	r0, r4
 8007736:	f000 fd61 	bl	80081fc <_vfiprintf_r>
 800773a:	b002      	add	sp, #8
 800773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007740:	b004      	add	sp, #16
 8007742:	4770      	bx	lr
 8007744:	20001f54 	.word	0x20001f54

08007748 <_puts_r>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	460e      	mov	r6, r1
 800774c:	4605      	mov	r5, r0
 800774e:	b118      	cbz	r0, 8007758 <_puts_r+0x10>
 8007750:	6983      	ldr	r3, [r0, #24]
 8007752:	b90b      	cbnz	r3, 8007758 <_puts_r+0x10>
 8007754:	f000 fa40 	bl	8007bd8 <__sinit>
 8007758:	69ab      	ldr	r3, [r5, #24]
 800775a:	68ac      	ldr	r4, [r5, #8]
 800775c:	b913      	cbnz	r3, 8007764 <_puts_r+0x1c>
 800775e:	4628      	mov	r0, r5
 8007760:	f000 fa3a 	bl	8007bd8 <__sinit>
 8007764:	4b23      	ldr	r3, [pc, #140]	; (80077f4 <_puts_r+0xac>)
 8007766:	429c      	cmp	r4, r3
 8007768:	d117      	bne.n	800779a <_puts_r+0x52>
 800776a:	686c      	ldr	r4, [r5, #4]
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	071b      	lsls	r3, r3, #28
 8007770:	d51d      	bpl.n	80077ae <_puts_r+0x66>
 8007772:	6923      	ldr	r3, [r4, #16]
 8007774:	b1db      	cbz	r3, 80077ae <_puts_r+0x66>
 8007776:	3e01      	subs	r6, #1
 8007778:	68a3      	ldr	r3, [r4, #8]
 800777a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800777e:	3b01      	subs	r3, #1
 8007780:	60a3      	str	r3, [r4, #8]
 8007782:	b9e9      	cbnz	r1, 80077c0 <_puts_r+0x78>
 8007784:	2b00      	cmp	r3, #0
 8007786:	da2e      	bge.n	80077e6 <_puts_r+0x9e>
 8007788:	4622      	mov	r2, r4
 800778a:	210a      	movs	r1, #10
 800778c:	4628      	mov	r0, r5
 800778e:	f000 f873 	bl	8007878 <__swbuf_r>
 8007792:	3001      	adds	r0, #1
 8007794:	d011      	beq.n	80077ba <_puts_r+0x72>
 8007796:	200a      	movs	r0, #10
 8007798:	e011      	b.n	80077be <_puts_r+0x76>
 800779a:	4b17      	ldr	r3, [pc, #92]	; (80077f8 <_puts_r+0xb0>)
 800779c:	429c      	cmp	r4, r3
 800779e:	d101      	bne.n	80077a4 <_puts_r+0x5c>
 80077a0:	68ac      	ldr	r4, [r5, #8]
 80077a2:	e7e3      	b.n	800776c <_puts_r+0x24>
 80077a4:	4b15      	ldr	r3, [pc, #84]	; (80077fc <_puts_r+0xb4>)
 80077a6:	429c      	cmp	r4, r3
 80077a8:	bf08      	it	eq
 80077aa:	68ec      	ldreq	r4, [r5, #12]
 80077ac:	e7de      	b.n	800776c <_puts_r+0x24>
 80077ae:	4621      	mov	r1, r4
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f8b3 	bl	800791c <__swsetup_r>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d0dd      	beq.n	8007776 <_puts_r+0x2e>
 80077ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077be:	bd70      	pop	{r4, r5, r6, pc}
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da04      	bge.n	80077ce <_puts_r+0x86>
 80077c4:	69a2      	ldr	r2, [r4, #24]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	dc06      	bgt.n	80077d8 <_puts_r+0x90>
 80077ca:	290a      	cmp	r1, #10
 80077cc:	d004      	beq.n	80077d8 <_puts_r+0x90>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	6022      	str	r2, [r4, #0]
 80077d4:	7019      	strb	r1, [r3, #0]
 80077d6:	e7cf      	b.n	8007778 <_puts_r+0x30>
 80077d8:	4622      	mov	r2, r4
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f84c 	bl	8007878 <__swbuf_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d1c9      	bne.n	8007778 <_puts_r+0x30>
 80077e4:	e7e9      	b.n	80077ba <_puts_r+0x72>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	200a      	movs	r0, #10
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	6022      	str	r2, [r4, #0]
 80077ee:	7018      	strb	r0, [r3, #0]
 80077f0:	e7e5      	b.n	80077be <_puts_r+0x76>
 80077f2:	bf00      	nop
 80077f4:	08008c98 	.word	0x08008c98
 80077f8:	08008cb8 	.word	0x08008cb8
 80077fc:	08008c78 	.word	0x08008c78

08007800 <puts>:
 8007800:	4b02      	ldr	r3, [pc, #8]	; (800780c <puts+0xc>)
 8007802:	4601      	mov	r1, r0
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	f7ff bf9f 	b.w	8007748 <_puts_r>
 800780a:	bf00      	nop
 800780c:	20001f54 	.word	0x20001f54

08007810 <sniprintf>:
 8007810:	b40c      	push	{r2, r3}
 8007812:	b530      	push	{r4, r5, lr}
 8007814:	4b17      	ldr	r3, [pc, #92]	; (8007874 <sniprintf+0x64>)
 8007816:	1e0c      	subs	r4, r1, #0
 8007818:	b09d      	sub	sp, #116	; 0x74
 800781a:	681d      	ldr	r5, [r3, #0]
 800781c:	da08      	bge.n	8007830 <sniprintf+0x20>
 800781e:	238b      	movs	r3, #139	; 0x8b
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007826:	b01d      	add	sp, #116	; 0x74
 8007828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800782c:	b002      	add	sp, #8
 800782e:	4770      	bx	lr
 8007830:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007834:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007838:	bf14      	ite	ne
 800783a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800783e:	4623      	moveq	r3, r4
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	9307      	str	r3, [sp, #28]
 8007844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007848:	9002      	str	r0, [sp, #8]
 800784a:	9006      	str	r0, [sp, #24]
 800784c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007850:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007852:	ab21      	add	r3, sp, #132	; 0x84
 8007854:	a902      	add	r1, sp, #8
 8007856:	4628      	mov	r0, r5
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	f000 fbad 	bl	8007fb8 <_svfiprintf_r>
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	bfbc      	itt	lt
 8007862:	238b      	movlt	r3, #139	; 0x8b
 8007864:	602b      	strlt	r3, [r5, #0]
 8007866:	2c00      	cmp	r4, #0
 8007868:	d0dd      	beq.n	8007826 <sniprintf+0x16>
 800786a:	9b02      	ldr	r3, [sp, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
 8007870:	e7d9      	b.n	8007826 <sniprintf+0x16>
 8007872:	bf00      	nop
 8007874:	20001f54 	.word	0x20001f54

08007878 <__swbuf_r>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	460e      	mov	r6, r1
 800787c:	4614      	mov	r4, r2
 800787e:	4605      	mov	r5, r0
 8007880:	b118      	cbz	r0, 800788a <__swbuf_r+0x12>
 8007882:	6983      	ldr	r3, [r0, #24]
 8007884:	b90b      	cbnz	r3, 800788a <__swbuf_r+0x12>
 8007886:	f000 f9a7 	bl	8007bd8 <__sinit>
 800788a:	4b21      	ldr	r3, [pc, #132]	; (8007910 <__swbuf_r+0x98>)
 800788c:	429c      	cmp	r4, r3
 800788e:	d12a      	bne.n	80078e6 <__swbuf_r+0x6e>
 8007890:	686c      	ldr	r4, [r5, #4]
 8007892:	69a3      	ldr	r3, [r4, #24]
 8007894:	60a3      	str	r3, [r4, #8]
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	071a      	lsls	r2, r3, #28
 800789a:	d52e      	bpl.n	80078fa <__swbuf_r+0x82>
 800789c:	6923      	ldr	r3, [r4, #16]
 800789e:	b363      	cbz	r3, 80078fa <__swbuf_r+0x82>
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	6820      	ldr	r0, [r4, #0]
 80078a4:	1ac0      	subs	r0, r0, r3
 80078a6:	6963      	ldr	r3, [r4, #20]
 80078a8:	b2f6      	uxtb	r6, r6
 80078aa:	4283      	cmp	r3, r0
 80078ac:	4637      	mov	r7, r6
 80078ae:	dc04      	bgt.n	80078ba <__swbuf_r+0x42>
 80078b0:	4621      	mov	r1, r4
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 f926 	bl	8007b04 <_fflush_r>
 80078b8:	bb28      	cbnz	r0, 8007906 <__swbuf_r+0x8e>
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	3b01      	subs	r3, #1
 80078be:	60a3      	str	r3, [r4, #8]
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	6022      	str	r2, [r4, #0]
 80078c6:	701e      	strb	r6, [r3, #0]
 80078c8:	6963      	ldr	r3, [r4, #20]
 80078ca:	3001      	adds	r0, #1
 80078cc:	4283      	cmp	r3, r0
 80078ce:	d004      	beq.n	80078da <__swbuf_r+0x62>
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	07db      	lsls	r3, r3, #31
 80078d4:	d519      	bpl.n	800790a <__swbuf_r+0x92>
 80078d6:	2e0a      	cmp	r6, #10
 80078d8:	d117      	bne.n	800790a <__swbuf_r+0x92>
 80078da:	4621      	mov	r1, r4
 80078dc:	4628      	mov	r0, r5
 80078de:	f000 f911 	bl	8007b04 <_fflush_r>
 80078e2:	b190      	cbz	r0, 800790a <__swbuf_r+0x92>
 80078e4:	e00f      	b.n	8007906 <__swbuf_r+0x8e>
 80078e6:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <__swbuf_r+0x9c>)
 80078e8:	429c      	cmp	r4, r3
 80078ea:	d101      	bne.n	80078f0 <__swbuf_r+0x78>
 80078ec:	68ac      	ldr	r4, [r5, #8]
 80078ee:	e7d0      	b.n	8007892 <__swbuf_r+0x1a>
 80078f0:	4b09      	ldr	r3, [pc, #36]	; (8007918 <__swbuf_r+0xa0>)
 80078f2:	429c      	cmp	r4, r3
 80078f4:	bf08      	it	eq
 80078f6:	68ec      	ldreq	r4, [r5, #12]
 80078f8:	e7cb      	b.n	8007892 <__swbuf_r+0x1a>
 80078fa:	4621      	mov	r1, r4
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 f80d 	bl	800791c <__swsetup_r>
 8007902:	2800      	cmp	r0, #0
 8007904:	d0cc      	beq.n	80078a0 <__swbuf_r+0x28>
 8007906:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800790a:	4638      	mov	r0, r7
 800790c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790e:	bf00      	nop
 8007910:	08008c98 	.word	0x08008c98
 8007914:	08008cb8 	.word	0x08008cb8
 8007918:	08008c78 	.word	0x08008c78

0800791c <__swsetup_r>:
 800791c:	4b32      	ldr	r3, [pc, #200]	; (80079e8 <__swsetup_r+0xcc>)
 800791e:	b570      	push	{r4, r5, r6, lr}
 8007920:	681d      	ldr	r5, [r3, #0]
 8007922:	4606      	mov	r6, r0
 8007924:	460c      	mov	r4, r1
 8007926:	b125      	cbz	r5, 8007932 <__swsetup_r+0x16>
 8007928:	69ab      	ldr	r3, [r5, #24]
 800792a:	b913      	cbnz	r3, 8007932 <__swsetup_r+0x16>
 800792c:	4628      	mov	r0, r5
 800792e:	f000 f953 	bl	8007bd8 <__sinit>
 8007932:	4b2e      	ldr	r3, [pc, #184]	; (80079ec <__swsetup_r+0xd0>)
 8007934:	429c      	cmp	r4, r3
 8007936:	d10f      	bne.n	8007958 <__swsetup_r+0x3c>
 8007938:	686c      	ldr	r4, [r5, #4]
 800793a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800793e:	b29a      	uxth	r2, r3
 8007940:	0715      	lsls	r5, r2, #28
 8007942:	d42c      	bmi.n	800799e <__swsetup_r+0x82>
 8007944:	06d0      	lsls	r0, r2, #27
 8007946:	d411      	bmi.n	800796c <__swsetup_r+0x50>
 8007948:	2209      	movs	r2, #9
 800794a:	6032      	str	r2, [r6, #0]
 800794c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007956:	e03e      	b.n	80079d6 <__swsetup_r+0xba>
 8007958:	4b25      	ldr	r3, [pc, #148]	; (80079f0 <__swsetup_r+0xd4>)
 800795a:	429c      	cmp	r4, r3
 800795c:	d101      	bne.n	8007962 <__swsetup_r+0x46>
 800795e:	68ac      	ldr	r4, [r5, #8]
 8007960:	e7eb      	b.n	800793a <__swsetup_r+0x1e>
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <__swsetup_r+0xd8>)
 8007964:	429c      	cmp	r4, r3
 8007966:	bf08      	it	eq
 8007968:	68ec      	ldreq	r4, [r5, #12]
 800796a:	e7e6      	b.n	800793a <__swsetup_r+0x1e>
 800796c:	0751      	lsls	r1, r2, #29
 800796e:	d512      	bpl.n	8007996 <__swsetup_r+0x7a>
 8007970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007972:	b141      	cbz	r1, 8007986 <__swsetup_r+0x6a>
 8007974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007978:	4299      	cmp	r1, r3
 800797a:	d002      	beq.n	8007982 <__swsetup_r+0x66>
 800797c:	4630      	mov	r0, r6
 800797e:	f000 fa19 	bl	8007db4 <_free_r>
 8007982:	2300      	movs	r3, #0
 8007984:	6363      	str	r3, [r4, #52]	; 0x34
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800798c:	81a3      	strh	r3, [r4, #12]
 800798e:	2300      	movs	r3, #0
 8007990:	6063      	str	r3, [r4, #4]
 8007992:	6923      	ldr	r3, [r4, #16]
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	f043 0308 	orr.w	r3, r3, #8
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	b94b      	cbnz	r3, 80079b6 <__swsetup_r+0x9a>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ac:	d003      	beq.n	80079b6 <__swsetup_r+0x9a>
 80079ae:	4621      	mov	r1, r4
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 f9bf 	bl	8007d34 <__smakebuf_r>
 80079b6:	89a2      	ldrh	r2, [r4, #12]
 80079b8:	f012 0301 	ands.w	r3, r2, #1
 80079bc:	d00c      	beq.n	80079d8 <__swsetup_r+0xbc>
 80079be:	2300      	movs	r3, #0
 80079c0:	60a3      	str	r3, [r4, #8]
 80079c2:	6963      	ldr	r3, [r4, #20]
 80079c4:	425b      	negs	r3, r3
 80079c6:	61a3      	str	r3, [r4, #24]
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	b953      	cbnz	r3, 80079e2 <__swsetup_r+0xc6>
 80079cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80079d4:	d1ba      	bne.n	800794c <__swsetup_r+0x30>
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	0792      	lsls	r2, r2, #30
 80079da:	bf58      	it	pl
 80079dc:	6963      	ldrpl	r3, [r4, #20]
 80079de:	60a3      	str	r3, [r4, #8]
 80079e0:	e7f2      	b.n	80079c8 <__swsetup_r+0xac>
 80079e2:	2000      	movs	r0, #0
 80079e4:	e7f7      	b.n	80079d6 <__swsetup_r+0xba>
 80079e6:	bf00      	nop
 80079e8:	20001f54 	.word	0x20001f54
 80079ec:	08008c98 	.word	0x08008c98
 80079f0:	08008cb8 	.word	0x08008cb8
 80079f4:	08008c78 	.word	0x08008c78

080079f8 <__sflush_r>:
 80079f8:	898a      	ldrh	r2, [r1, #12]
 80079fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fe:	4605      	mov	r5, r0
 8007a00:	0710      	lsls	r0, r2, #28
 8007a02:	460c      	mov	r4, r1
 8007a04:	d458      	bmi.n	8007ab8 <__sflush_r+0xc0>
 8007a06:	684b      	ldr	r3, [r1, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dc05      	bgt.n	8007a18 <__sflush_r+0x20>
 8007a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dc02      	bgt.n	8007a18 <__sflush_r+0x20>
 8007a12:	2000      	movs	r0, #0
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a1a:	2e00      	cmp	r6, #0
 8007a1c:	d0f9      	beq.n	8007a12 <__sflush_r+0x1a>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a24:	682f      	ldr	r7, [r5, #0]
 8007a26:	6a21      	ldr	r1, [r4, #32]
 8007a28:	602b      	str	r3, [r5, #0]
 8007a2a:	d032      	beq.n	8007a92 <__sflush_r+0x9a>
 8007a2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	075a      	lsls	r2, r3, #29
 8007a32:	d505      	bpl.n	8007a40 <__sflush_r+0x48>
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	1ac0      	subs	r0, r0, r3
 8007a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a3a:	b10b      	cbz	r3, 8007a40 <__sflush_r+0x48>
 8007a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a3e:	1ac0      	subs	r0, r0, r3
 8007a40:	2300      	movs	r3, #0
 8007a42:	4602      	mov	r2, r0
 8007a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a46:	6a21      	ldr	r1, [r4, #32]
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b0      	blx	r6
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	d106      	bne.n	8007a60 <__sflush_r+0x68>
 8007a52:	6829      	ldr	r1, [r5, #0]
 8007a54:	291d      	cmp	r1, #29
 8007a56:	d848      	bhi.n	8007aea <__sflush_r+0xf2>
 8007a58:	4a29      	ldr	r2, [pc, #164]	; (8007b00 <__sflush_r+0x108>)
 8007a5a:	40ca      	lsrs	r2, r1
 8007a5c:	07d6      	lsls	r6, r2, #31
 8007a5e:	d544      	bpl.n	8007aea <__sflush_r+0xf2>
 8007a60:	2200      	movs	r2, #0
 8007a62:	6062      	str	r2, [r4, #4]
 8007a64:	04d9      	lsls	r1, r3, #19
 8007a66:	6922      	ldr	r2, [r4, #16]
 8007a68:	6022      	str	r2, [r4, #0]
 8007a6a:	d504      	bpl.n	8007a76 <__sflush_r+0x7e>
 8007a6c:	1c42      	adds	r2, r0, #1
 8007a6e:	d101      	bne.n	8007a74 <__sflush_r+0x7c>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b903      	cbnz	r3, 8007a76 <__sflush_r+0x7e>
 8007a74:	6560      	str	r0, [r4, #84]	; 0x54
 8007a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a78:	602f      	str	r7, [r5, #0]
 8007a7a:	2900      	cmp	r1, #0
 8007a7c:	d0c9      	beq.n	8007a12 <__sflush_r+0x1a>
 8007a7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a82:	4299      	cmp	r1, r3
 8007a84:	d002      	beq.n	8007a8c <__sflush_r+0x94>
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 f994 	bl	8007db4 <_free_r>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	6360      	str	r0, [r4, #52]	; 0x34
 8007a90:	e7c0      	b.n	8007a14 <__sflush_r+0x1c>
 8007a92:	2301      	movs	r3, #1
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b0      	blx	r6
 8007a98:	1c41      	adds	r1, r0, #1
 8007a9a:	d1c8      	bne.n	8007a2e <__sflush_r+0x36>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0c5      	beq.n	8007a2e <__sflush_r+0x36>
 8007aa2:	2b1d      	cmp	r3, #29
 8007aa4:	d001      	beq.n	8007aaa <__sflush_r+0xb2>
 8007aa6:	2b16      	cmp	r3, #22
 8007aa8:	d101      	bne.n	8007aae <__sflush_r+0xb6>
 8007aaa:	602f      	str	r7, [r5, #0]
 8007aac:	e7b1      	b.n	8007a12 <__sflush_r+0x1a>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	e7ad      	b.n	8007a14 <__sflush_r+0x1c>
 8007ab8:	690f      	ldr	r7, [r1, #16]
 8007aba:	2f00      	cmp	r7, #0
 8007abc:	d0a9      	beq.n	8007a12 <__sflush_r+0x1a>
 8007abe:	0793      	lsls	r3, r2, #30
 8007ac0:	680e      	ldr	r6, [r1, #0]
 8007ac2:	bf08      	it	eq
 8007ac4:	694b      	ldreq	r3, [r1, #20]
 8007ac6:	600f      	str	r7, [r1, #0]
 8007ac8:	bf18      	it	ne
 8007aca:	2300      	movne	r3, #0
 8007acc:	eba6 0807 	sub.w	r8, r6, r7
 8007ad0:	608b      	str	r3, [r1, #8]
 8007ad2:	f1b8 0f00 	cmp.w	r8, #0
 8007ad6:	dd9c      	ble.n	8007a12 <__sflush_r+0x1a>
 8007ad8:	4643      	mov	r3, r8
 8007ada:	463a      	mov	r2, r7
 8007adc:	6a21      	ldr	r1, [r4, #32]
 8007ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b0      	blx	r6
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	dc06      	bgt.n	8007af6 <__sflush_r+0xfe>
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007af4:	e78e      	b.n	8007a14 <__sflush_r+0x1c>
 8007af6:	4407      	add	r7, r0
 8007af8:	eba8 0800 	sub.w	r8, r8, r0
 8007afc:	e7e9      	b.n	8007ad2 <__sflush_r+0xda>
 8007afe:	bf00      	nop
 8007b00:	20400001 	.word	0x20400001

08007b04 <_fflush_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	690b      	ldr	r3, [r1, #16]
 8007b08:	4605      	mov	r5, r0
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	b1db      	cbz	r3, 8007b46 <_fflush_r+0x42>
 8007b0e:	b118      	cbz	r0, 8007b18 <_fflush_r+0x14>
 8007b10:	6983      	ldr	r3, [r0, #24]
 8007b12:	b90b      	cbnz	r3, 8007b18 <_fflush_r+0x14>
 8007b14:	f000 f860 	bl	8007bd8 <__sinit>
 8007b18:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <_fflush_r+0x48>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d109      	bne.n	8007b32 <_fflush_r+0x2e>
 8007b1e:	686c      	ldr	r4, [r5, #4]
 8007b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b24:	b17b      	cbz	r3, 8007b46 <_fflush_r+0x42>
 8007b26:	4621      	mov	r1, r4
 8007b28:	4628      	mov	r0, r5
 8007b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b2e:	f7ff bf63 	b.w	80079f8 <__sflush_r>
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <_fflush_r+0x4c>)
 8007b34:	429c      	cmp	r4, r3
 8007b36:	d101      	bne.n	8007b3c <_fflush_r+0x38>
 8007b38:	68ac      	ldr	r4, [r5, #8]
 8007b3a:	e7f1      	b.n	8007b20 <_fflush_r+0x1c>
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <_fflush_r+0x50>)
 8007b3e:	429c      	cmp	r4, r3
 8007b40:	bf08      	it	eq
 8007b42:	68ec      	ldreq	r4, [r5, #12]
 8007b44:	e7ec      	b.n	8007b20 <_fflush_r+0x1c>
 8007b46:	2000      	movs	r0, #0
 8007b48:	bd38      	pop	{r3, r4, r5, pc}
 8007b4a:	bf00      	nop
 8007b4c:	08008c98 	.word	0x08008c98
 8007b50:	08008cb8 	.word	0x08008cb8
 8007b54:	08008c78 	.word	0x08008c78

08007b58 <std>:
 8007b58:	2300      	movs	r3, #0
 8007b5a:	b510      	push	{r4, lr}
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b62:	6083      	str	r3, [r0, #8]
 8007b64:	8181      	strh	r1, [r0, #12]
 8007b66:	6643      	str	r3, [r0, #100]	; 0x64
 8007b68:	81c2      	strh	r2, [r0, #14]
 8007b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6e:	6183      	str	r3, [r0, #24]
 8007b70:	4619      	mov	r1, r3
 8007b72:	2208      	movs	r2, #8
 8007b74:	305c      	adds	r0, #92	; 0x5c
 8007b76:	f7ff fdc7 	bl	8007708 <memset>
 8007b7a:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <std+0x38>)
 8007b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <std+0x3c>)
 8007b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x40>)
 8007b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <std+0x44>)
 8007b88:	6224      	str	r4, [r4, #32]
 8007b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	bf00      	nop
 8007b90:	08008759 	.word	0x08008759
 8007b94:	0800877b 	.word	0x0800877b
 8007b98:	080087b3 	.word	0x080087b3
 8007b9c:	080087d7 	.word	0x080087d7

08007ba0 <_cleanup_r>:
 8007ba0:	4901      	ldr	r1, [pc, #4]	; (8007ba8 <_cleanup_r+0x8>)
 8007ba2:	f000 b885 	b.w	8007cb0 <_fwalk_reent>
 8007ba6:	bf00      	nop
 8007ba8:	08007b05 	.word	0x08007b05

08007bac <__sfmoreglue>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	1e4a      	subs	r2, r1, #1
 8007bb0:	2568      	movs	r5, #104	; 0x68
 8007bb2:	4355      	muls	r5, r2
 8007bb4:	460e      	mov	r6, r1
 8007bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bba:	f000 f949 	bl	8007e50 <_malloc_r>
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	b140      	cbz	r0, 8007bd4 <__sfmoreglue+0x28>
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8007bc8:	300c      	adds	r0, #12
 8007bca:	60a0      	str	r0, [r4, #8]
 8007bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bd0:	f7ff fd9a 	bl	8007708 <memset>
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}

08007bd8 <__sinit>:
 8007bd8:	6983      	ldr	r3, [r0, #24]
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	4604      	mov	r4, r0
 8007bde:	bb33      	cbnz	r3, 8007c2e <__sinit+0x56>
 8007be0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007be4:	6503      	str	r3, [r0, #80]	; 0x50
 8007be6:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <__sinit+0x58>)
 8007be8:	4a12      	ldr	r2, [pc, #72]	; (8007c34 <__sinit+0x5c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6282      	str	r2, [r0, #40]	; 0x28
 8007bee:	4298      	cmp	r0, r3
 8007bf0:	bf04      	itt	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	6183      	streq	r3, [r0, #24]
 8007bf6:	f000 f81f 	bl	8007c38 <__sfp>
 8007bfa:	6060      	str	r0, [r4, #4]
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 f81b 	bl	8007c38 <__sfp>
 8007c02:	60a0      	str	r0, [r4, #8]
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 f817 	bl	8007c38 <__sfp>
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	60e0      	str	r0, [r4, #12]
 8007c0e:	2104      	movs	r1, #4
 8007c10:	6860      	ldr	r0, [r4, #4]
 8007c12:	f7ff ffa1 	bl	8007b58 <std>
 8007c16:	2201      	movs	r2, #1
 8007c18:	2109      	movs	r1, #9
 8007c1a:	68a0      	ldr	r0, [r4, #8]
 8007c1c:	f7ff ff9c 	bl	8007b58 <std>
 8007c20:	2202      	movs	r2, #2
 8007c22:	2112      	movs	r1, #18
 8007c24:	68e0      	ldr	r0, [r4, #12]
 8007c26:	f7ff ff97 	bl	8007b58 <std>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	61a3      	str	r3, [r4, #24]
 8007c2e:	bd10      	pop	{r4, pc}
 8007c30:	08008c74 	.word	0x08008c74
 8007c34:	08007ba1 	.word	0x08007ba1

08007c38 <__sfp>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <__sfp+0x70>)
 8007c3c:	681e      	ldr	r6, [r3, #0]
 8007c3e:	69b3      	ldr	r3, [r6, #24]
 8007c40:	4607      	mov	r7, r0
 8007c42:	b913      	cbnz	r3, 8007c4a <__sfp+0x12>
 8007c44:	4630      	mov	r0, r6
 8007c46:	f7ff ffc7 	bl	8007bd8 <__sinit>
 8007c4a:	3648      	adds	r6, #72	; 0x48
 8007c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	d503      	bpl.n	8007c5c <__sfp+0x24>
 8007c54:	6833      	ldr	r3, [r6, #0]
 8007c56:	b133      	cbz	r3, 8007c66 <__sfp+0x2e>
 8007c58:	6836      	ldr	r6, [r6, #0]
 8007c5a:	e7f7      	b.n	8007c4c <__sfp+0x14>
 8007c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c60:	b16d      	cbz	r5, 8007c7e <__sfp+0x46>
 8007c62:	3468      	adds	r4, #104	; 0x68
 8007c64:	e7f4      	b.n	8007c50 <__sfp+0x18>
 8007c66:	2104      	movs	r1, #4
 8007c68:	4638      	mov	r0, r7
 8007c6a:	f7ff ff9f 	bl	8007bac <__sfmoreglue>
 8007c6e:	6030      	str	r0, [r6, #0]
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d1f1      	bne.n	8007c58 <__sfp+0x20>
 8007c74:	230c      	movs	r3, #12
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	4604      	mov	r4, r0
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c7e:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <__sfp+0x74>)
 8007c80:	6665      	str	r5, [r4, #100]	; 0x64
 8007c82:	e9c4 5500 	strd	r5, r5, [r4]
 8007c86:	60a5      	str	r5, [r4, #8]
 8007c88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007c8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007c90:	2208      	movs	r2, #8
 8007c92:	4629      	mov	r1, r5
 8007c94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c98:	f7ff fd36 	bl	8007708 <memset>
 8007c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ca4:	e7e9      	b.n	8007c7a <__sfp+0x42>
 8007ca6:	bf00      	nop
 8007ca8:	08008c74 	.word	0x08008c74
 8007cac:	ffff0001 	.word	0xffff0001

08007cb0 <_fwalk_reent>:
 8007cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	4689      	mov	r9, r1
 8007cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cbc:	2600      	movs	r6, #0
 8007cbe:	b914      	cbnz	r4, 8007cc6 <_fwalk_reent+0x16>
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007cca:	3f01      	subs	r7, #1
 8007ccc:	d501      	bpl.n	8007cd2 <_fwalk_reent+0x22>
 8007cce:	6824      	ldr	r4, [r4, #0]
 8007cd0:	e7f5      	b.n	8007cbe <_fwalk_reent+0xe>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d907      	bls.n	8007ce8 <_fwalk_reent+0x38>
 8007cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	d003      	beq.n	8007ce8 <_fwalk_reent+0x38>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	47c8      	blx	r9
 8007ce6:	4306      	orrs	r6, r0
 8007ce8:	3568      	adds	r5, #104	; 0x68
 8007cea:	e7ee      	b.n	8007cca <_fwalk_reent+0x1a>

08007cec <__swhatbuf_r>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	460e      	mov	r6, r1
 8007cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	b096      	sub	sp, #88	; 0x58
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	461d      	mov	r5, r3
 8007cfc:	da07      	bge.n	8007d0e <__swhatbuf_r+0x22>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	89b3      	ldrh	r3, [r6, #12]
 8007d04:	061a      	lsls	r2, r3, #24
 8007d06:	d410      	bmi.n	8007d2a <__swhatbuf_r+0x3e>
 8007d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d0c:	e00e      	b.n	8007d2c <__swhatbuf_r+0x40>
 8007d0e:	466a      	mov	r2, sp
 8007d10:	f000 fd88 	bl	8008824 <_fstat_r>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	dbf2      	blt.n	8007cfe <__swhatbuf_r+0x12>
 8007d18:	9a01      	ldr	r2, [sp, #4]
 8007d1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d22:	425a      	negs	r2, r3
 8007d24:	415a      	adcs	r2, r3
 8007d26:	602a      	str	r2, [r5, #0]
 8007d28:	e7ee      	b.n	8007d08 <__swhatbuf_r+0x1c>
 8007d2a:	2340      	movs	r3, #64	; 0x40
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	b016      	add	sp, #88	; 0x58
 8007d32:	bd70      	pop	{r4, r5, r6, pc}

08007d34 <__smakebuf_r>:
 8007d34:	898b      	ldrh	r3, [r1, #12]
 8007d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d38:	079d      	lsls	r5, r3, #30
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	d507      	bpl.n	8007d50 <__smakebuf_r+0x1c>
 8007d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	2301      	movs	r3, #1
 8007d4a:	6163      	str	r3, [r4, #20]
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	ab01      	add	r3, sp, #4
 8007d52:	466a      	mov	r2, sp
 8007d54:	f7ff ffca 	bl	8007cec <__swhatbuf_r>
 8007d58:	9900      	ldr	r1, [sp, #0]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f000 f877 	bl	8007e50 <_malloc_r>
 8007d62:	b948      	cbnz	r0, 8007d78 <__smakebuf_r+0x44>
 8007d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d68:	059a      	lsls	r2, r3, #22
 8007d6a:	d4ef      	bmi.n	8007d4c <__smakebuf_r+0x18>
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	f043 0302 	orr.w	r3, r3, #2
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	e7e3      	b.n	8007d40 <__smakebuf_r+0xc>
 8007d78:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <__smakebuf_r+0x7c>)
 8007d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	9b00      	ldr	r3, [sp, #0]
 8007d88:	6163      	str	r3, [r4, #20]
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	6120      	str	r0, [r4, #16]
 8007d8e:	b15b      	cbz	r3, 8007da8 <__smakebuf_r+0x74>
 8007d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 fd57 	bl	8008848 <_isatty_r>
 8007d9a:	b128      	cbz	r0, 8007da8 <__smakebuf_r+0x74>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	431d      	orrs	r5, r3
 8007dac:	81a5      	strh	r5, [r4, #12]
 8007dae:	e7cd      	b.n	8007d4c <__smakebuf_r+0x18>
 8007db0:	08007ba1 	.word	0x08007ba1

08007db4 <_free_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4605      	mov	r5, r0
 8007db8:	2900      	cmp	r1, #0
 8007dba:	d045      	beq.n	8007e48 <_free_r+0x94>
 8007dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc0:	1f0c      	subs	r4, r1, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bfb8      	it	lt
 8007dc6:	18e4      	addlt	r4, r4, r3
 8007dc8:	f000 fd84 	bl	80088d4 <__malloc_lock>
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <_free_r+0x98>)
 8007dce:	6813      	ldr	r3, [r2, #0]
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	b933      	cbnz	r3, 8007de2 <_free_r+0x2e>
 8007dd4:	6063      	str	r3, [r4, #4]
 8007dd6:	6014      	str	r4, [r2, #0]
 8007dd8:	4628      	mov	r0, r5
 8007dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dde:	f000 bd7a 	b.w	80088d6 <__malloc_unlock>
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	d90c      	bls.n	8007e00 <_free_r+0x4c>
 8007de6:	6821      	ldr	r1, [r4, #0]
 8007de8:	1862      	adds	r2, r4, r1
 8007dea:	4293      	cmp	r3, r2
 8007dec:	bf04      	itt	eq
 8007dee:	681a      	ldreq	r2, [r3, #0]
 8007df0:	685b      	ldreq	r3, [r3, #4]
 8007df2:	6063      	str	r3, [r4, #4]
 8007df4:	bf04      	itt	eq
 8007df6:	1852      	addeq	r2, r2, r1
 8007df8:	6022      	streq	r2, [r4, #0]
 8007dfa:	6004      	str	r4, [r0, #0]
 8007dfc:	e7ec      	b.n	8007dd8 <_free_r+0x24>
 8007dfe:	4613      	mov	r3, r2
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	b10a      	cbz	r2, 8007e08 <_free_r+0x54>
 8007e04:	42a2      	cmp	r2, r4
 8007e06:	d9fa      	bls.n	8007dfe <_free_r+0x4a>
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	1858      	adds	r0, r3, r1
 8007e0c:	42a0      	cmp	r0, r4
 8007e0e:	d10b      	bne.n	8007e28 <_free_r+0x74>
 8007e10:	6820      	ldr	r0, [r4, #0]
 8007e12:	4401      	add	r1, r0
 8007e14:	1858      	adds	r0, r3, r1
 8007e16:	4282      	cmp	r2, r0
 8007e18:	6019      	str	r1, [r3, #0]
 8007e1a:	d1dd      	bne.n	8007dd8 <_free_r+0x24>
 8007e1c:	6810      	ldr	r0, [r2, #0]
 8007e1e:	6852      	ldr	r2, [r2, #4]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	4401      	add	r1, r0
 8007e24:	6019      	str	r1, [r3, #0]
 8007e26:	e7d7      	b.n	8007dd8 <_free_r+0x24>
 8007e28:	d902      	bls.n	8007e30 <_free_r+0x7c>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	602b      	str	r3, [r5, #0]
 8007e2e:	e7d3      	b.n	8007dd8 <_free_r+0x24>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	1821      	adds	r1, r4, r0
 8007e34:	428a      	cmp	r2, r1
 8007e36:	bf04      	itt	eq
 8007e38:	6811      	ldreq	r1, [r2, #0]
 8007e3a:	6852      	ldreq	r2, [r2, #4]
 8007e3c:	6062      	str	r2, [r4, #4]
 8007e3e:	bf04      	itt	eq
 8007e40:	1809      	addeq	r1, r1, r0
 8007e42:	6021      	streq	r1, [r4, #0]
 8007e44:	605c      	str	r4, [r3, #4]
 8007e46:	e7c7      	b.n	8007dd8 <_free_r+0x24>
 8007e48:	bd38      	pop	{r3, r4, r5, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20001fe4 	.word	0x20001fe4

08007e50 <_malloc_r>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	1ccd      	adds	r5, r1, #3
 8007e54:	f025 0503 	bic.w	r5, r5, #3
 8007e58:	3508      	adds	r5, #8
 8007e5a:	2d0c      	cmp	r5, #12
 8007e5c:	bf38      	it	cc
 8007e5e:	250c      	movcc	r5, #12
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	4606      	mov	r6, r0
 8007e64:	db01      	blt.n	8007e6a <_malloc_r+0x1a>
 8007e66:	42a9      	cmp	r1, r5
 8007e68:	d903      	bls.n	8007e72 <_malloc_r+0x22>
 8007e6a:	230c      	movs	r3, #12
 8007e6c:	6033      	str	r3, [r6, #0]
 8007e6e:	2000      	movs	r0, #0
 8007e70:	bd70      	pop	{r4, r5, r6, pc}
 8007e72:	f000 fd2f 	bl	80088d4 <__malloc_lock>
 8007e76:	4a21      	ldr	r2, [pc, #132]	; (8007efc <_malloc_r+0xac>)
 8007e78:	6814      	ldr	r4, [r2, #0]
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	b991      	cbnz	r1, 8007ea4 <_malloc_r+0x54>
 8007e7e:	4c20      	ldr	r4, [pc, #128]	; (8007f00 <_malloc_r+0xb0>)
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	b91b      	cbnz	r3, 8007e8c <_malloc_r+0x3c>
 8007e84:	4630      	mov	r0, r6
 8007e86:	f000 fc57 	bl	8008738 <_sbrk_r>
 8007e8a:	6020      	str	r0, [r4, #0]
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 fc52 	bl	8008738 <_sbrk_r>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	d124      	bne.n	8007ee2 <_malloc_r+0x92>
 8007e98:	230c      	movs	r3, #12
 8007e9a:	6033      	str	r3, [r6, #0]
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f000 fd1a 	bl	80088d6 <__malloc_unlock>
 8007ea2:	e7e4      	b.n	8007e6e <_malloc_r+0x1e>
 8007ea4:	680b      	ldr	r3, [r1, #0]
 8007ea6:	1b5b      	subs	r3, r3, r5
 8007ea8:	d418      	bmi.n	8007edc <_malloc_r+0x8c>
 8007eaa:	2b0b      	cmp	r3, #11
 8007eac:	d90f      	bls.n	8007ece <_malloc_r+0x7e>
 8007eae:	600b      	str	r3, [r1, #0]
 8007eb0:	50cd      	str	r5, [r1, r3]
 8007eb2:	18cc      	adds	r4, r1, r3
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f000 fd0e 	bl	80088d6 <__malloc_unlock>
 8007eba:	f104 000b 	add.w	r0, r4, #11
 8007ebe:	1d23      	adds	r3, r4, #4
 8007ec0:	f020 0007 	bic.w	r0, r0, #7
 8007ec4:	1ac3      	subs	r3, r0, r3
 8007ec6:	d0d3      	beq.n	8007e70 <_malloc_r+0x20>
 8007ec8:	425a      	negs	r2, r3
 8007eca:	50e2      	str	r2, [r4, r3]
 8007ecc:	e7d0      	b.n	8007e70 <_malloc_r+0x20>
 8007ece:	428c      	cmp	r4, r1
 8007ed0:	684b      	ldr	r3, [r1, #4]
 8007ed2:	bf16      	itet	ne
 8007ed4:	6063      	strne	r3, [r4, #4]
 8007ed6:	6013      	streq	r3, [r2, #0]
 8007ed8:	460c      	movne	r4, r1
 8007eda:	e7eb      	b.n	8007eb4 <_malloc_r+0x64>
 8007edc:	460c      	mov	r4, r1
 8007ede:	6849      	ldr	r1, [r1, #4]
 8007ee0:	e7cc      	b.n	8007e7c <_malloc_r+0x2c>
 8007ee2:	1cc4      	adds	r4, r0, #3
 8007ee4:	f024 0403 	bic.w	r4, r4, #3
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d005      	beq.n	8007ef8 <_malloc_r+0xa8>
 8007eec:	1a21      	subs	r1, r4, r0
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f000 fc22 	bl	8008738 <_sbrk_r>
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d0cf      	beq.n	8007e98 <_malloc_r+0x48>
 8007ef8:	6025      	str	r5, [r4, #0]
 8007efa:	e7db      	b.n	8007eb4 <_malloc_r+0x64>
 8007efc:	20001fe4 	.word	0x20001fe4
 8007f00:	20001fe8 	.word	0x20001fe8

08007f04 <__ssputs_r>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	688e      	ldr	r6, [r1, #8]
 8007f0a:	429e      	cmp	r6, r3
 8007f0c:	4682      	mov	sl, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	4690      	mov	r8, r2
 8007f12:	4699      	mov	r9, r3
 8007f14:	d837      	bhi.n	8007f86 <__ssputs_r+0x82>
 8007f16:	898a      	ldrh	r2, [r1, #12]
 8007f18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f1c:	d031      	beq.n	8007f82 <__ssputs_r+0x7e>
 8007f1e:	6825      	ldr	r5, [r4, #0]
 8007f20:	6909      	ldr	r1, [r1, #16]
 8007f22:	1a6f      	subs	r7, r5, r1
 8007f24:	6965      	ldr	r5, [r4, #20]
 8007f26:	2302      	movs	r3, #2
 8007f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f30:	f109 0301 	add.w	r3, r9, #1
 8007f34:	443b      	add	r3, r7
 8007f36:	429d      	cmp	r5, r3
 8007f38:	bf38      	it	cc
 8007f3a:	461d      	movcc	r5, r3
 8007f3c:	0553      	lsls	r3, r2, #21
 8007f3e:	d530      	bpl.n	8007fa2 <__ssputs_r+0x9e>
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7ff ff85 	bl	8007e50 <_malloc_r>
 8007f46:	4606      	mov	r6, r0
 8007f48:	b950      	cbnz	r0, 8007f60 <__ssputs_r+0x5c>
 8007f4a:	230c      	movs	r3, #12
 8007f4c:	f8ca 3000 	str.w	r3, [sl]
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f56:	81a3      	strh	r3, [r4, #12]
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	463a      	mov	r2, r7
 8007f62:	6921      	ldr	r1, [r4, #16]
 8007f64:	f000 fc92 	bl	800888c <memcpy>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	6126      	str	r6, [r4, #16]
 8007f76:	6165      	str	r5, [r4, #20]
 8007f78:	443e      	add	r6, r7
 8007f7a:	1bed      	subs	r5, r5, r7
 8007f7c:	6026      	str	r6, [r4, #0]
 8007f7e:	60a5      	str	r5, [r4, #8]
 8007f80:	464e      	mov	r6, r9
 8007f82:	454e      	cmp	r6, r9
 8007f84:	d900      	bls.n	8007f88 <__ssputs_r+0x84>
 8007f86:	464e      	mov	r6, r9
 8007f88:	4632      	mov	r2, r6
 8007f8a:	4641      	mov	r1, r8
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	f000 fc88 	bl	80088a2 <memmove>
 8007f92:	68a3      	ldr	r3, [r4, #8]
 8007f94:	1b9b      	subs	r3, r3, r6
 8007f96:	60a3      	str	r3, [r4, #8]
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	441e      	add	r6, r3
 8007f9c:	6026      	str	r6, [r4, #0]
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	e7dc      	b.n	8007f5c <__ssputs_r+0x58>
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	f000 fc98 	bl	80088d8 <_realloc_r>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d1e2      	bne.n	8007f74 <__ssputs_r+0x70>
 8007fae:	6921      	ldr	r1, [r4, #16]
 8007fb0:	4650      	mov	r0, sl
 8007fb2:	f7ff feff 	bl	8007db4 <_free_r>
 8007fb6:	e7c8      	b.n	8007f4a <__ssputs_r+0x46>

08007fb8 <_svfiprintf_r>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	461d      	mov	r5, r3
 8007fbe:	898b      	ldrh	r3, [r1, #12]
 8007fc0:	061f      	lsls	r7, r3, #24
 8007fc2:	b09d      	sub	sp, #116	; 0x74
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	4616      	mov	r6, r2
 8007fca:	d50f      	bpl.n	8007fec <_svfiprintf_r+0x34>
 8007fcc:	690b      	ldr	r3, [r1, #16]
 8007fce:	b96b      	cbnz	r3, 8007fec <_svfiprintf_r+0x34>
 8007fd0:	2140      	movs	r1, #64	; 0x40
 8007fd2:	f7ff ff3d 	bl	8007e50 <_malloc_r>
 8007fd6:	6020      	str	r0, [r4, #0]
 8007fd8:	6120      	str	r0, [r4, #16]
 8007fda:	b928      	cbnz	r0, 8007fe8 <_svfiprintf_r+0x30>
 8007fdc:	230c      	movs	r3, #12
 8007fde:	f8c8 3000 	str.w	r3, [r8]
 8007fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fe6:	e0c8      	b.n	800817a <_svfiprintf_r+0x1c2>
 8007fe8:	2340      	movs	r3, #64	; 0x40
 8007fea:	6163      	str	r3, [r4, #20]
 8007fec:	2300      	movs	r3, #0
 8007fee:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ff6:	2330      	movs	r3, #48	; 0x30
 8007ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ffc:	9503      	str	r5, [sp, #12]
 8007ffe:	f04f 0b01 	mov.w	fp, #1
 8008002:	4637      	mov	r7, r6
 8008004:	463d      	mov	r5, r7
 8008006:	f815 3b01 	ldrb.w	r3, [r5], #1
 800800a:	b10b      	cbz	r3, 8008010 <_svfiprintf_r+0x58>
 800800c:	2b25      	cmp	r3, #37	; 0x25
 800800e:	d13e      	bne.n	800808e <_svfiprintf_r+0xd6>
 8008010:	ebb7 0a06 	subs.w	sl, r7, r6
 8008014:	d00b      	beq.n	800802e <_svfiprintf_r+0x76>
 8008016:	4653      	mov	r3, sl
 8008018:	4632      	mov	r2, r6
 800801a:	4621      	mov	r1, r4
 800801c:	4640      	mov	r0, r8
 800801e:	f7ff ff71 	bl	8007f04 <__ssputs_r>
 8008022:	3001      	adds	r0, #1
 8008024:	f000 80a4 	beq.w	8008170 <_svfiprintf_r+0x1b8>
 8008028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802a:	4453      	add	r3, sl
 800802c:	9309      	str	r3, [sp, #36]	; 0x24
 800802e:	783b      	ldrb	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 809d 	beq.w	8008170 <_svfiprintf_r+0x1b8>
 8008036:	2300      	movs	r3, #0
 8008038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800803c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	9307      	str	r3, [sp, #28]
 8008044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008048:	931a      	str	r3, [sp, #104]	; 0x68
 800804a:	462f      	mov	r7, r5
 800804c:	2205      	movs	r2, #5
 800804e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008052:	4850      	ldr	r0, [pc, #320]	; (8008194 <_svfiprintf_r+0x1dc>)
 8008054:	f7f8 f8e4 	bl	8000220 <memchr>
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	b9d0      	cbnz	r0, 8008092 <_svfiprintf_r+0xda>
 800805c:	06d9      	lsls	r1, r3, #27
 800805e:	bf44      	itt	mi
 8008060:	2220      	movmi	r2, #32
 8008062:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008066:	071a      	lsls	r2, r3, #28
 8008068:	bf44      	itt	mi
 800806a:	222b      	movmi	r2, #43	; 0x2b
 800806c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008070:	782a      	ldrb	r2, [r5, #0]
 8008072:	2a2a      	cmp	r2, #42	; 0x2a
 8008074:	d015      	beq.n	80080a2 <_svfiprintf_r+0xea>
 8008076:	9a07      	ldr	r2, [sp, #28]
 8008078:	462f      	mov	r7, r5
 800807a:	2000      	movs	r0, #0
 800807c:	250a      	movs	r5, #10
 800807e:	4639      	mov	r1, r7
 8008080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008084:	3b30      	subs	r3, #48	; 0x30
 8008086:	2b09      	cmp	r3, #9
 8008088:	d94d      	bls.n	8008126 <_svfiprintf_r+0x16e>
 800808a:	b1b8      	cbz	r0, 80080bc <_svfiprintf_r+0x104>
 800808c:	e00f      	b.n	80080ae <_svfiprintf_r+0xf6>
 800808e:	462f      	mov	r7, r5
 8008090:	e7b8      	b.n	8008004 <_svfiprintf_r+0x4c>
 8008092:	4a40      	ldr	r2, [pc, #256]	; (8008194 <_svfiprintf_r+0x1dc>)
 8008094:	1a80      	subs	r0, r0, r2
 8008096:	fa0b f000 	lsl.w	r0, fp, r0
 800809a:	4318      	orrs	r0, r3
 800809c:	9004      	str	r0, [sp, #16]
 800809e:	463d      	mov	r5, r7
 80080a0:	e7d3      	b.n	800804a <_svfiprintf_r+0x92>
 80080a2:	9a03      	ldr	r2, [sp, #12]
 80080a4:	1d11      	adds	r1, r2, #4
 80080a6:	6812      	ldr	r2, [r2, #0]
 80080a8:	9103      	str	r1, [sp, #12]
 80080aa:	2a00      	cmp	r2, #0
 80080ac:	db01      	blt.n	80080b2 <_svfiprintf_r+0xfa>
 80080ae:	9207      	str	r2, [sp, #28]
 80080b0:	e004      	b.n	80080bc <_svfiprintf_r+0x104>
 80080b2:	4252      	negs	r2, r2
 80080b4:	f043 0302 	orr.w	r3, r3, #2
 80080b8:	9207      	str	r2, [sp, #28]
 80080ba:	9304      	str	r3, [sp, #16]
 80080bc:	783b      	ldrb	r3, [r7, #0]
 80080be:	2b2e      	cmp	r3, #46	; 0x2e
 80080c0:	d10c      	bne.n	80080dc <_svfiprintf_r+0x124>
 80080c2:	787b      	ldrb	r3, [r7, #1]
 80080c4:	2b2a      	cmp	r3, #42	; 0x2a
 80080c6:	d133      	bne.n	8008130 <_svfiprintf_r+0x178>
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	1d1a      	adds	r2, r3, #4
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	9203      	str	r2, [sp, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	bfb8      	it	lt
 80080d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080d8:	3702      	adds	r7, #2
 80080da:	9305      	str	r3, [sp, #20]
 80080dc:	4d2e      	ldr	r5, [pc, #184]	; (8008198 <_svfiprintf_r+0x1e0>)
 80080de:	7839      	ldrb	r1, [r7, #0]
 80080e0:	2203      	movs	r2, #3
 80080e2:	4628      	mov	r0, r5
 80080e4:	f7f8 f89c 	bl	8000220 <memchr>
 80080e8:	b138      	cbz	r0, 80080fa <_svfiprintf_r+0x142>
 80080ea:	2340      	movs	r3, #64	; 0x40
 80080ec:	1b40      	subs	r0, r0, r5
 80080ee:	fa03 f000 	lsl.w	r0, r3, r0
 80080f2:	9b04      	ldr	r3, [sp, #16]
 80080f4:	4303      	orrs	r3, r0
 80080f6:	3701      	adds	r7, #1
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	7839      	ldrb	r1, [r7, #0]
 80080fc:	4827      	ldr	r0, [pc, #156]	; (800819c <_svfiprintf_r+0x1e4>)
 80080fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008102:	2206      	movs	r2, #6
 8008104:	1c7e      	adds	r6, r7, #1
 8008106:	f7f8 f88b 	bl	8000220 <memchr>
 800810a:	2800      	cmp	r0, #0
 800810c:	d038      	beq.n	8008180 <_svfiprintf_r+0x1c8>
 800810e:	4b24      	ldr	r3, [pc, #144]	; (80081a0 <_svfiprintf_r+0x1e8>)
 8008110:	bb13      	cbnz	r3, 8008158 <_svfiprintf_r+0x1a0>
 8008112:	9b03      	ldr	r3, [sp, #12]
 8008114:	3307      	adds	r3, #7
 8008116:	f023 0307 	bic.w	r3, r3, #7
 800811a:	3308      	adds	r3, #8
 800811c:	9303      	str	r3, [sp, #12]
 800811e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008120:	444b      	add	r3, r9
 8008122:	9309      	str	r3, [sp, #36]	; 0x24
 8008124:	e76d      	b.n	8008002 <_svfiprintf_r+0x4a>
 8008126:	fb05 3202 	mla	r2, r5, r2, r3
 800812a:	2001      	movs	r0, #1
 800812c:	460f      	mov	r7, r1
 800812e:	e7a6      	b.n	800807e <_svfiprintf_r+0xc6>
 8008130:	2300      	movs	r3, #0
 8008132:	3701      	adds	r7, #1
 8008134:	9305      	str	r3, [sp, #20]
 8008136:	4619      	mov	r1, r3
 8008138:	250a      	movs	r5, #10
 800813a:	4638      	mov	r0, r7
 800813c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008140:	3a30      	subs	r2, #48	; 0x30
 8008142:	2a09      	cmp	r2, #9
 8008144:	d903      	bls.n	800814e <_svfiprintf_r+0x196>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0c8      	beq.n	80080dc <_svfiprintf_r+0x124>
 800814a:	9105      	str	r1, [sp, #20]
 800814c:	e7c6      	b.n	80080dc <_svfiprintf_r+0x124>
 800814e:	fb05 2101 	mla	r1, r5, r1, r2
 8008152:	2301      	movs	r3, #1
 8008154:	4607      	mov	r7, r0
 8008156:	e7f0      	b.n	800813a <_svfiprintf_r+0x182>
 8008158:	ab03      	add	r3, sp, #12
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	4622      	mov	r2, r4
 800815e:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <_svfiprintf_r+0x1ec>)
 8008160:	a904      	add	r1, sp, #16
 8008162:	4640      	mov	r0, r8
 8008164:	f3af 8000 	nop.w
 8008168:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800816c:	4681      	mov	r9, r0
 800816e:	d1d6      	bne.n	800811e <_svfiprintf_r+0x166>
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	065b      	lsls	r3, r3, #25
 8008174:	f53f af35 	bmi.w	8007fe2 <_svfiprintf_r+0x2a>
 8008178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800817a:	b01d      	add	sp, #116	; 0x74
 800817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008180:	ab03      	add	r3, sp, #12
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	4622      	mov	r2, r4
 8008186:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <_svfiprintf_r+0x1ec>)
 8008188:	a904      	add	r1, sp, #16
 800818a:	4640      	mov	r0, r8
 800818c:	f000 f9c2 	bl	8008514 <_printf_i>
 8008190:	e7ea      	b.n	8008168 <_svfiprintf_r+0x1b0>
 8008192:	bf00      	nop
 8008194:	08008cd8 	.word	0x08008cd8
 8008198:	08008cde 	.word	0x08008cde
 800819c:	08008ce2 	.word	0x08008ce2
 80081a0:	00000000 	.word	0x00000000
 80081a4:	08007f05 	.word	0x08007f05

080081a8 <__sfputc_r>:
 80081a8:	6893      	ldr	r3, [r2, #8]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	b410      	push	{r4}
 80081b0:	6093      	str	r3, [r2, #8]
 80081b2:	da08      	bge.n	80081c6 <__sfputc_r+0x1e>
 80081b4:	6994      	ldr	r4, [r2, #24]
 80081b6:	42a3      	cmp	r3, r4
 80081b8:	db01      	blt.n	80081be <__sfputc_r+0x16>
 80081ba:	290a      	cmp	r1, #10
 80081bc:	d103      	bne.n	80081c6 <__sfputc_r+0x1e>
 80081be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c2:	f7ff bb59 	b.w	8007878 <__swbuf_r>
 80081c6:	6813      	ldr	r3, [r2, #0]
 80081c8:	1c58      	adds	r0, r3, #1
 80081ca:	6010      	str	r0, [r2, #0]
 80081cc:	7019      	strb	r1, [r3, #0]
 80081ce:	4608      	mov	r0, r1
 80081d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <__sfputs_r>:
 80081d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d8:	4606      	mov	r6, r0
 80081da:	460f      	mov	r7, r1
 80081dc:	4614      	mov	r4, r2
 80081de:	18d5      	adds	r5, r2, r3
 80081e0:	42ac      	cmp	r4, r5
 80081e2:	d101      	bne.n	80081e8 <__sfputs_r+0x12>
 80081e4:	2000      	movs	r0, #0
 80081e6:	e007      	b.n	80081f8 <__sfputs_r+0x22>
 80081e8:	463a      	mov	r2, r7
 80081ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff ffda 	bl	80081a8 <__sfputc_r>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d1f3      	bne.n	80081e0 <__sfputs_r+0xa>
 80081f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081fc <_vfiprintf_r>:
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	b09d      	sub	sp, #116	; 0x74
 8008204:	4617      	mov	r7, r2
 8008206:	461d      	mov	r5, r3
 8008208:	4606      	mov	r6, r0
 800820a:	b118      	cbz	r0, 8008214 <_vfiprintf_r+0x18>
 800820c:	6983      	ldr	r3, [r0, #24]
 800820e:	b90b      	cbnz	r3, 8008214 <_vfiprintf_r+0x18>
 8008210:	f7ff fce2 	bl	8007bd8 <__sinit>
 8008214:	4b7c      	ldr	r3, [pc, #496]	; (8008408 <_vfiprintf_r+0x20c>)
 8008216:	429c      	cmp	r4, r3
 8008218:	d158      	bne.n	80082cc <_vfiprintf_r+0xd0>
 800821a:	6874      	ldr	r4, [r6, #4]
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	0718      	lsls	r0, r3, #28
 8008220:	d55e      	bpl.n	80082e0 <_vfiprintf_r+0xe4>
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d05b      	beq.n	80082e0 <_vfiprintf_r+0xe4>
 8008228:	2300      	movs	r3, #0
 800822a:	9309      	str	r3, [sp, #36]	; 0x24
 800822c:	2320      	movs	r3, #32
 800822e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008232:	2330      	movs	r3, #48	; 0x30
 8008234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008238:	9503      	str	r5, [sp, #12]
 800823a:	f04f 0b01 	mov.w	fp, #1
 800823e:	46b8      	mov	r8, r7
 8008240:	4645      	mov	r5, r8
 8008242:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008246:	b10b      	cbz	r3, 800824c <_vfiprintf_r+0x50>
 8008248:	2b25      	cmp	r3, #37	; 0x25
 800824a:	d154      	bne.n	80082f6 <_vfiprintf_r+0xfa>
 800824c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008250:	d00b      	beq.n	800826a <_vfiprintf_r+0x6e>
 8008252:	4653      	mov	r3, sl
 8008254:	463a      	mov	r2, r7
 8008256:	4621      	mov	r1, r4
 8008258:	4630      	mov	r0, r6
 800825a:	f7ff ffbc 	bl	80081d6 <__sfputs_r>
 800825e:	3001      	adds	r0, #1
 8008260:	f000 80c2 	beq.w	80083e8 <_vfiprintf_r+0x1ec>
 8008264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008266:	4453      	add	r3, sl
 8008268:	9309      	str	r3, [sp, #36]	; 0x24
 800826a:	f898 3000 	ldrb.w	r3, [r8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80ba 	beq.w	80083e8 <_vfiprintf_r+0x1ec>
 8008274:	2300      	movs	r3, #0
 8008276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800827a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	9307      	str	r3, [sp, #28]
 8008282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008286:	931a      	str	r3, [sp, #104]	; 0x68
 8008288:	46a8      	mov	r8, r5
 800828a:	2205      	movs	r2, #5
 800828c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008290:	485e      	ldr	r0, [pc, #376]	; (800840c <_vfiprintf_r+0x210>)
 8008292:	f7f7 ffc5 	bl	8000220 <memchr>
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	bb78      	cbnz	r0, 80082fa <_vfiprintf_r+0xfe>
 800829a:	06d9      	lsls	r1, r3, #27
 800829c:	bf44      	itt	mi
 800829e:	2220      	movmi	r2, #32
 80082a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082a4:	071a      	lsls	r2, r3, #28
 80082a6:	bf44      	itt	mi
 80082a8:	222b      	movmi	r2, #43	; 0x2b
 80082aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082ae:	782a      	ldrb	r2, [r5, #0]
 80082b0:	2a2a      	cmp	r2, #42	; 0x2a
 80082b2:	d02a      	beq.n	800830a <_vfiprintf_r+0x10e>
 80082b4:	9a07      	ldr	r2, [sp, #28]
 80082b6:	46a8      	mov	r8, r5
 80082b8:	2000      	movs	r0, #0
 80082ba:	250a      	movs	r5, #10
 80082bc:	4641      	mov	r1, r8
 80082be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c2:	3b30      	subs	r3, #48	; 0x30
 80082c4:	2b09      	cmp	r3, #9
 80082c6:	d969      	bls.n	800839c <_vfiprintf_r+0x1a0>
 80082c8:	b360      	cbz	r0, 8008324 <_vfiprintf_r+0x128>
 80082ca:	e024      	b.n	8008316 <_vfiprintf_r+0x11a>
 80082cc:	4b50      	ldr	r3, [pc, #320]	; (8008410 <_vfiprintf_r+0x214>)
 80082ce:	429c      	cmp	r4, r3
 80082d0:	d101      	bne.n	80082d6 <_vfiprintf_r+0xda>
 80082d2:	68b4      	ldr	r4, [r6, #8]
 80082d4:	e7a2      	b.n	800821c <_vfiprintf_r+0x20>
 80082d6:	4b4f      	ldr	r3, [pc, #316]	; (8008414 <_vfiprintf_r+0x218>)
 80082d8:	429c      	cmp	r4, r3
 80082da:	bf08      	it	eq
 80082dc:	68f4      	ldreq	r4, [r6, #12]
 80082de:	e79d      	b.n	800821c <_vfiprintf_r+0x20>
 80082e0:	4621      	mov	r1, r4
 80082e2:	4630      	mov	r0, r6
 80082e4:	f7ff fb1a 	bl	800791c <__swsetup_r>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d09d      	beq.n	8008228 <_vfiprintf_r+0x2c>
 80082ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082f0:	b01d      	add	sp, #116	; 0x74
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f6:	46a8      	mov	r8, r5
 80082f8:	e7a2      	b.n	8008240 <_vfiprintf_r+0x44>
 80082fa:	4a44      	ldr	r2, [pc, #272]	; (800840c <_vfiprintf_r+0x210>)
 80082fc:	1a80      	subs	r0, r0, r2
 80082fe:	fa0b f000 	lsl.w	r0, fp, r0
 8008302:	4318      	orrs	r0, r3
 8008304:	9004      	str	r0, [sp, #16]
 8008306:	4645      	mov	r5, r8
 8008308:	e7be      	b.n	8008288 <_vfiprintf_r+0x8c>
 800830a:	9a03      	ldr	r2, [sp, #12]
 800830c:	1d11      	adds	r1, r2, #4
 800830e:	6812      	ldr	r2, [r2, #0]
 8008310:	9103      	str	r1, [sp, #12]
 8008312:	2a00      	cmp	r2, #0
 8008314:	db01      	blt.n	800831a <_vfiprintf_r+0x11e>
 8008316:	9207      	str	r2, [sp, #28]
 8008318:	e004      	b.n	8008324 <_vfiprintf_r+0x128>
 800831a:	4252      	negs	r2, r2
 800831c:	f043 0302 	orr.w	r3, r3, #2
 8008320:	9207      	str	r2, [sp, #28]
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	f898 3000 	ldrb.w	r3, [r8]
 8008328:	2b2e      	cmp	r3, #46	; 0x2e
 800832a:	d10e      	bne.n	800834a <_vfiprintf_r+0x14e>
 800832c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008330:	2b2a      	cmp	r3, #42	; 0x2a
 8008332:	d138      	bne.n	80083a6 <_vfiprintf_r+0x1aa>
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	1d1a      	adds	r2, r3, #4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	9203      	str	r2, [sp, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfb8      	it	lt
 8008340:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008344:	f108 0802 	add.w	r8, r8, #2
 8008348:	9305      	str	r3, [sp, #20]
 800834a:	4d33      	ldr	r5, [pc, #204]	; (8008418 <_vfiprintf_r+0x21c>)
 800834c:	f898 1000 	ldrb.w	r1, [r8]
 8008350:	2203      	movs	r2, #3
 8008352:	4628      	mov	r0, r5
 8008354:	f7f7 ff64 	bl	8000220 <memchr>
 8008358:	b140      	cbz	r0, 800836c <_vfiprintf_r+0x170>
 800835a:	2340      	movs	r3, #64	; 0x40
 800835c:	1b40      	subs	r0, r0, r5
 800835e:	fa03 f000 	lsl.w	r0, r3, r0
 8008362:	9b04      	ldr	r3, [sp, #16]
 8008364:	4303      	orrs	r3, r0
 8008366:	f108 0801 	add.w	r8, r8, #1
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	f898 1000 	ldrb.w	r1, [r8]
 8008370:	482a      	ldr	r0, [pc, #168]	; (800841c <_vfiprintf_r+0x220>)
 8008372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008376:	2206      	movs	r2, #6
 8008378:	f108 0701 	add.w	r7, r8, #1
 800837c:	f7f7 ff50 	bl	8000220 <memchr>
 8008380:	2800      	cmp	r0, #0
 8008382:	d037      	beq.n	80083f4 <_vfiprintf_r+0x1f8>
 8008384:	4b26      	ldr	r3, [pc, #152]	; (8008420 <_vfiprintf_r+0x224>)
 8008386:	bb1b      	cbnz	r3, 80083d0 <_vfiprintf_r+0x1d4>
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	3307      	adds	r3, #7
 800838c:	f023 0307 	bic.w	r3, r3, #7
 8008390:	3308      	adds	r3, #8
 8008392:	9303      	str	r3, [sp, #12]
 8008394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008396:	444b      	add	r3, r9
 8008398:	9309      	str	r3, [sp, #36]	; 0x24
 800839a:	e750      	b.n	800823e <_vfiprintf_r+0x42>
 800839c:	fb05 3202 	mla	r2, r5, r2, r3
 80083a0:	2001      	movs	r0, #1
 80083a2:	4688      	mov	r8, r1
 80083a4:	e78a      	b.n	80082bc <_vfiprintf_r+0xc0>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f108 0801 	add.w	r8, r8, #1
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	4619      	mov	r1, r3
 80083b0:	250a      	movs	r5, #10
 80083b2:	4640      	mov	r0, r8
 80083b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083b8:	3a30      	subs	r2, #48	; 0x30
 80083ba:	2a09      	cmp	r2, #9
 80083bc:	d903      	bls.n	80083c6 <_vfiprintf_r+0x1ca>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0c3      	beq.n	800834a <_vfiprintf_r+0x14e>
 80083c2:	9105      	str	r1, [sp, #20]
 80083c4:	e7c1      	b.n	800834a <_vfiprintf_r+0x14e>
 80083c6:	fb05 2101 	mla	r1, r5, r1, r2
 80083ca:	2301      	movs	r3, #1
 80083cc:	4680      	mov	r8, r0
 80083ce:	e7f0      	b.n	80083b2 <_vfiprintf_r+0x1b6>
 80083d0:	ab03      	add	r3, sp, #12
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	4622      	mov	r2, r4
 80083d6:	4b13      	ldr	r3, [pc, #76]	; (8008424 <_vfiprintf_r+0x228>)
 80083d8:	a904      	add	r1, sp, #16
 80083da:	4630      	mov	r0, r6
 80083dc:	f3af 8000 	nop.w
 80083e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80083e4:	4681      	mov	r9, r0
 80083e6:	d1d5      	bne.n	8008394 <_vfiprintf_r+0x198>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	065b      	lsls	r3, r3, #25
 80083ec:	f53f af7e 	bmi.w	80082ec <_vfiprintf_r+0xf0>
 80083f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083f2:	e77d      	b.n	80082f0 <_vfiprintf_r+0xf4>
 80083f4:	ab03      	add	r3, sp, #12
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	4622      	mov	r2, r4
 80083fa:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <_vfiprintf_r+0x228>)
 80083fc:	a904      	add	r1, sp, #16
 80083fe:	4630      	mov	r0, r6
 8008400:	f000 f888 	bl	8008514 <_printf_i>
 8008404:	e7ec      	b.n	80083e0 <_vfiprintf_r+0x1e4>
 8008406:	bf00      	nop
 8008408:	08008c98 	.word	0x08008c98
 800840c:	08008cd8 	.word	0x08008cd8
 8008410:	08008cb8 	.word	0x08008cb8
 8008414:	08008c78 	.word	0x08008c78
 8008418:	08008cde 	.word	0x08008cde
 800841c:	08008ce2 	.word	0x08008ce2
 8008420:	00000000 	.word	0x00000000
 8008424:	080081d7 	.word	0x080081d7

08008428 <_printf_common>:
 8008428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	4691      	mov	r9, r2
 800842e:	461f      	mov	r7, r3
 8008430:	688a      	ldr	r2, [r1, #8]
 8008432:	690b      	ldr	r3, [r1, #16]
 8008434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008438:	4293      	cmp	r3, r2
 800843a:	bfb8      	it	lt
 800843c:	4613      	movlt	r3, r2
 800843e:	f8c9 3000 	str.w	r3, [r9]
 8008442:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008446:	4606      	mov	r6, r0
 8008448:	460c      	mov	r4, r1
 800844a:	b112      	cbz	r2, 8008452 <_printf_common+0x2a>
 800844c:	3301      	adds	r3, #1
 800844e:	f8c9 3000 	str.w	r3, [r9]
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	0699      	lsls	r1, r3, #26
 8008456:	bf42      	ittt	mi
 8008458:	f8d9 3000 	ldrmi.w	r3, [r9]
 800845c:	3302      	addmi	r3, #2
 800845e:	f8c9 3000 	strmi.w	r3, [r9]
 8008462:	6825      	ldr	r5, [r4, #0]
 8008464:	f015 0506 	ands.w	r5, r5, #6
 8008468:	d107      	bne.n	800847a <_printf_common+0x52>
 800846a:	f104 0a19 	add.w	sl, r4, #25
 800846e:	68e3      	ldr	r3, [r4, #12]
 8008470:	f8d9 2000 	ldr.w	r2, [r9]
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	42ab      	cmp	r3, r5
 8008478:	dc28      	bgt.n	80084cc <_printf_common+0xa4>
 800847a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800847e:	6822      	ldr	r2, [r4, #0]
 8008480:	3300      	adds	r3, #0
 8008482:	bf18      	it	ne
 8008484:	2301      	movne	r3, #1
 8008486:	0692      	lsls	r2, r2, #26
 8008488:	d42d      	bmi.n	80084e6 <_printf_common+0xbe>
 800848a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800848e:	4639      	mov	r1, r7
 8008490:	4630      	mov	r0, r6
 8008492:	47c0      	blx	r8
 8008494:	3001      	adds	r0, #1
 8008496:	d020      	beq.n	80084da <_printf_common+0xb2>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	68e5      	ldr	r5, [r4, #12]
 800849c:	f8d9 2000 	ldr.w	r2, [r9]
 80084a0:	f003 0306 	and.w	r3, r3, #6
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	bf08      	it	eq
 80084a8:	1aad      	subeq	r5, r5, r2
 80084aa:	68a3      	ldr	r3, [r4, #8]
 80084ac:	6922      	ldr	r2, [r4, #16]
 80084ae:	bf0c      	ite	eq
 80084b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084b4:	2500      	movne	r5, #0
 80084b6:	4293      	cmp	r3, r2
 80084b8:	bfc4      	itt	gt
 80084ba:	1a9b      	subgt	r3, r3, r2
 80084bc:	18ed      	addgt	r5, r5, r3
 80084be:	f04f 0900 	mov.w	r9, #0
 80084c2:	341a      	adds	r4, #26
 80084c4:	454d      	cmp	r5, r9
 80084c6:	d11a      	bne.n	80084fe <_printf_common+0xd6>
 80084c8:	2000      	movs	r0, #0
 80084ca:	e008      	b.n	80084de <_printf_common+0xb6>
 80084cc:	2301      	movs	r3, #1
 80084ce:	4652      	mov	r2, sl
 80084d0:	4639      	mov	r1, r7
 80084d2:	4630      	mov	r0, r6
 80084d4:	47c0      	blx	r8
 80084d6:	3001      	adds	r0, #1
 80084d8:	d103      	bne.n	80084e2 <_printf_common+0xba>
 80084da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e2:	3501      	adds	r5, #1
 80084e4:	e7c3      	b.n	800846e <_printf_common+0x46>
 80084e6:	18e1      	adds	r1, r4, r3
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	2030      	movs	r0, #48	; 0x30
 80084ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084f0:	4422      	add	r2, r4
 80084f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084fa:	3302      	adds	r3, #2
 80084fc:	e7c5      	b.n	800848a <_printf_common+0x62>
 80084fe:	2301      	movs	r3, #1
 8008500:	4622      	mov	r2, r4
 8008502:	4639      	mov	r1, r7
 8008504:	4630      	mov	r0, r6
 8008506:	47c0      	blx	r8
 8008508:	3001      	adds	r0, #1
 800850a:	d0e6      	beq.n	80084da <_printf_common+0xb2>
 800850c:	f109 0901 	add.w	r9, r9, #1
 8008510:	e7d8      	b.n	80084c4 <_printf_common+0x9c>
	...

08008514 <_printf_i>:
 8008514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008518:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800851c:	460c      	mov	r4, r1
 800851e:	7e09      	ldrb	r1, [r1, #24]
 8008520:	b085      	sub	sp, #20
 8008522:	296e      	cmp	r1, #110	; 0x6e
 8008524:	4617      	mov	r7, r2
 8008526:	4606      	mov	r6, r0
 8008528:	4698      	mov	r8, r3
 800852a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800852c:	f000 80b3 	beq.w	8008696 <_printf_i+0x182>
 8008530:	d822      	bhi.n	8008578 <_printf_i+0x64>
 8008532:	2963      	cmp	r1, #99	; 0x63
 8008534:	d036      	beq.n	80085a4 <_printf_i+0x90>
 8008536:	d80a      	bhi.n	800854e <_printf_i+0x3a>
 8008538:	2900      	cmp	r1, #0
 800853a:	f000 80b9 	beq.w	80086b0 <_printf_i+0x19c>
 800853e:	2958      	cmp	r1, #88	; 0x58
 8008540:	f000 8083 	beq.w	800864a <_printf_i+0x136>
 8008544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008548:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800854c:	e032      	b.n	80085b4 <_printf_i+0xa0>
 800854e:	2964      	cmp	r1, #100	; 0x64
 8008550:	d001      	beq.n	8008556 <_printf_i+0x42>
 8008552:	2969      	cmp	r1, #105	; 0x69
 8008554:	d1f6      	bne.n	8008544 <_printf_i+0x30>
 8008556:	6820      	ldr	r0, [r4, #0]
 8008558:	6813      	ldr	r3, [r2, #0]
 800855a:	0605      	lsls	r5, r0, #24
 800855c:	f103 0104 	add.w	r1, r3, #4
 8008560:	d52a      	bpl.n	80085b8 <_printf_i+0xa4>
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6011      	str	r1, [r2, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	da03      	bge.n	8008572 <_printf_i+0x5e>
 800856a:	222d      	movs	r2, #45	; 0x2d
 800856c:	425b      	negs	r3, r3
 800856e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008572:	486f      	ldr	r0, [pc, #444]	; (8008730 <_printf_i+0x21c>)
 8008574:	220a      	movs	r2, #10
 8008576:	e039      	b.n	80085ec <_printf_i+0xd8>
 8008578:	2973      	cmp	r1, #115	; 0x73
 800857a:	f000 809d 	beq.w	80086b8 <_printf_i+0x1a4>
 800857e:	d808      	bhi.n	8008592 <_printf_i+0x7e>
 8008580:	296f      	cmp	r1, #111	; 0x6f
 8008582:	d020      	beq.n	80085c6 <_printf_i+0xb2>
 8008584:	2970      	cmp	r1, #112	; 0x70
 8008586:	d1dd      	bne.n	8008544 <_printf_i+0x30>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	f043 0320 	orr.w	r3, r3, #32
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	e003      	b.n	800859a <_printf_i+0x86>
 8008592:	2975      	cmp	r1, #117	; 0x75
 8008594:	d017      	beq.n	80085c6 <_printf_i+0xb2>
 8008596:	2978      	cmp	r1, #120	; 0x78
 8008598:	d1d4      	bne.n	8008544 <_printf_i+0x30>
 800859a:	2378      	movs	r3, #120	; 0x78
 800859c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085a0:	4864      	ldr	r0, [pc, #400]	; (8008734 <_printf_i+0x220>)
 80085a2:	e055      	b.n	8008650 <_printf_i+0x13c>
 80085a4:	6813      	ldr	r3, [r2, #0]
 80085a6:	1d19      	adds	r1, r3, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6011      	str	r1, [r2, #0]
 80085ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085b4:	2301      	movs	r3, #1
 80085b6:	e08c      	b.n	80086d2 <_printf_i+0x1be>
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6011      	str	r1, [r2, #0]
 80085bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085c0:	bf18      	it	ne
 80085c2:	b21b      	sxthne	r3, r3
 80085c4:	e7cf      	b.n	8008566 <_printf_i+0x52>
 80085c6:	6813      	ldr	r3, [r2, #0]
 80085c8:	6825      	ldr	r5, [r4, #0]
 80085ca:	1d18      	adds	r0, r3, #4
 80085cc:	6010      	str	r0, [r2, #0]
 80085ce:	0628      	lsls	r0, r5, #24
 80085d0:	d501      	bpl.n	80085d6 <_printf_i+0xc2>
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	e002      	b.n	80085dc <_printf_i+0xc8>
 80085d6:	0668      	lsls	r0, r5, #25
 80085d8:	d5fb      	bpl.n	80085d2 <_printf_i+0xbe>
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	4854      	ldr	r0, [pc, #336]	; (8008730 <_printf_i+0x21c>)
 80085de:	296f      	cmp	r1, #111	; 0x6f
 80085e0:	bf14      	ite	ne
 80085e2:	220a      	movne	r2, #10
 80085e4:	2208      	moveq	r2, #8
 80085e6:	2100      	movs	r1, #0
 80085e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085ec:	6865      	ldr	r5, [r4, #4]
 80085ee:	60a5      	str	r5, [r4, #8]
 80085f0:	2d00      	cmp	r5, #0
 80085f2:	f2c0 8095 	blt.w	8008720 <_printf_i+0x20c>
 80085f6:	6821      	ldr	r1, [r4, #0]
 80085f8:	f021 0104 	bic.w	r1, r1, #4
 80085fc:	6021      	str	r1, [r4, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d13d      	bne.n	800867e <_printf_i+0x16a>
 8008602:	2d00      	cmp	r5, #0
 8008604:	f040 808e 	bne.w	8008724 <_printf_i+0x210>
 8008608:	4665      	mov	r5, ip
 800860a:	2a08      	cmp	r2, #8
 800860c:	d10b      	bne.n	8008626 <_printf_i+0x112>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	07db      	lsls	r3, r3, #31
 8008612:	d508      	bpl.n	8008626 <_printf_i+0x112>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	6862      	ldr	r2, [r4, #4]
 8008618:	429a      	cmp	r2, r3
 800861a:	bfde      	ittt	le
 800861c:	2330      	movle	r3, #48	; 0x30
 800861e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008622:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008626:	ebac 0305 	sub.w	r3, ip, r5
 800862a:	6123      	str	r3, [r4, #16]
 800862c:	f8cd 8000 	str.w	r8, [sp]
 8008630:	463b      	mov	r3, r7
 8008632:	aa03      	add	r2, sp, #12
 8008634:	4621      	mov	r1, r4
 8008636:	4630      	mov	r0, r6
 8008638:	f7ff fef6 	bl	8008428 <_printf_common>
 800863c:	3001      	adds	r0, #1
 800863e:	d14d      	bne.n	80086dc <_printf_i+0x1c8>
 8008640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008644:	b005      	add	sp, #20
 8008646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800864a:	4839      	ldr	r0, [pc, #228]	; (8008730 <_printf_i+0x21c>)
 800864c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008650:	6813      	ldr	r3, [r2, #0]
 8008652:	6821      	ldr	r1, [r4, #0]
 8008654:	1d1d      	adds	r5, r3, #4
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6015      	str	r5, [r2, #0]
 800865a:	060a      	lsls	r2, r1, #24
 800865c:	d50b      	bpl.n	8008676 <_printf_i+0x162>
 800865e:	07ca      	lsls	r2, r1, #31
 8008660:	bf44      	itt	mi
 8008662:	f041 0120 	orrmi.w	r1, r1, #32
 8008666:	6021      	strmi	r1, [r4, #0]
 8008668:	b91b      	cbnz	r3, 8008672 <_printf_i+0x15e>
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	f022 0220 	bic.w	r2, r2, #32
 8008670:	6022      	str	r2, [r4, #0]
 8008672:	2210      	movs	r2, #16
 8008674:	e7b7      	b.n	80085e6 <_printf_i+0xd2>
 8008676:	064d      	lsls	r5, r1, #25
 8008678:	bf48      	it	mi
 800867a:	b29b      	uxthmi	r3, r3
 800867c:	e7ef      	b.n	800865e <_printf_i+0x14a>
 800867e:	4665      	mov	r5, ip
 8008680:	fbb3 f1f2 	udiv	r1, r3, r2
 8008684:	fb02 3311 	mls	r3, r2, r1, r3
 8008688:	5cc3      	ldrb	r3, [r0, r3]
 800868a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800868e:	460b      	mov	r3, r1
 8008690:	2900      	cmp	r1, #0
 8008692:	d1f5      	bne.n	8008680 <_printf_i+0x16c>
 8008694:	e7b9      	b.n	800860a <_printf_i+0xf6>
 8008696:	6813      	ldr	r3, [r2, #0]
 8008698:	6825      	ldr	r5, [r4, #0]
 800869a:	6961      	ldr	r1, [r4, #20]
 800869c:	1d18      	adds	r0, r3, #4
 800869e:	6010      	str	r0, [r2, #0]
 80086a0:	0628      	lsls	r0, r5, #24
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	d501      	bpl.n	80086aa <_printf_i+0x196>
 80086a6:	6019      	str	r1, [r3, #0]
 80086a8:	e002      	b.n	80086b0 <_printf_i+0x19c>
 80086aa:	066a      	lsls	r2, r5, #25
 80086ac:	d5fb      	bpl.n	80086a6 <_printf_i+0x192>
 80086ae:	8019      	strh	r1, [r3, #0]
 80086b0:	2300      	movs	r3, #0
 80086b2:	6123      	str	r3, [r4, #16]
 80086b4:	4665      	mov	r5, ip
 80086b6:	e7b9      	b.n	800862c <_printf_i+0x118>
 80086b8:	6813      	ldr	r3, [r2, #0]
 80086ba:	1d19      	adds	r1, r3, #4
 80086bc:	6011      	str	r1, [r2, #0]
 80086be:	681d      	ldr	r5, [r3, #0]
 80086c0:	6862      	ldr	r2, [r4, #4]
 80086c2:	2100      	movs	r1, #0
 80086c4:	4628      	mov	r0, r5
 80086c6:	f7f7 fdab 	bl	8000220 <memchr>
 80086ca:	b108      	cbz	r0, 80086d0 <_printf_i+0x1bc>
 80086cc:	1b40      	subs	r0, r0, r5
 80086ce:	6060      	str	r0, [r4, #4]
 80086d0:	6863      	ldr	r3, [r4, #4]
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	2300      	movs	r3, #0
 80086d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086da:	e7a7      	b.n	800862c <_printf_i+0x118>
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	462a      	mov	r2, r5
 80086e0:	4639      	mov	r1, r7
 80086e2:	4630      	mov	r0, r6
 80086e4:	47c0      	blx	r8
 80086e6:	3001      	adds	r0, #1
 80086e8:	d0aa      	beq.n	8008640 <_printf_i+0x12c>
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	079b      	lsls	r3, r3, #30
 80086ee:	d413      	bmi.n	8008718 <_printf_i+0x204>
 80086f0:	68e0      	ldr	r0, [r4, #12]
 80086f2:	9b03      	ldr	r3, [sp, #12]
 80086f4:	4298      	cmp	r0, r3
 80086f6:	bfb8      	it	lt
 80086f8:	4618      	movlt	r0, r3
 80086fa:	e7a3      	b.n	8008644 <_printf_i+0x130>
 80086fc:	2301      	movs	r3, #1
 80086fe:	464a      	mov	r2, r9
 8008700:	4639      	mov	r1, r7
 8008702:	4630      	mov	r0, r6
 8008704:	47c0      	blx	r8
 8008706:	3001      	adds	r0, #1
 8008708:	d09a      	beq.n	8008640 <_printf_i+0x12c>
 800870a:	3501      	adds	r5, #1
 800870c:	68e3      	ldr	r3, [r4, #12]
 800870e:	9a03      	ldr	r2, [sp, #12]
 8008710:	1a9b      	subs	r3, r3, r2
 8008712:	42ab      	cmp	r3, r5
 8008714:	dcf2      	bgt.n	80086fc <_printf_i+0x1e8>
 8008716:	e7eb      	b.n	80086f0 <_printf_i+0x1dc>
 8008718:	2500      	movs	r5, #0
 800871a:	f104 0919 	add.w	r9, r4, #25
 800871e:	e7f5      	b.n	800870c <_printf_i+0x1f8>
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1ac      	bne.n	800867e <_printf_i+0x16a>
 8008724:	7803      	ldrb	r3, [r0, #0]
 8008726:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800872a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800872e:	e76c      	b.n	800860a <_printf_i+0xf6>
 8008730:	08008ce9 	.word	0x08008ce9
 8008734:	08008cfa 	.word	0x08008cfa

08008738 <_sbrk_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4c06      	ldr	r4, [pc, #24]	; (8008754 <_sbrk_r+0x1c>)
 800873c:	2300      	movs	r3, #0
 800873e:	4605      	mov	r5, r0
 8008740:	4608      	mov	r0, r1
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	f7f8 fe2c 	bl	80013a0 <_sbrk>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_sbrk_r+0x1a>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	b103      	cbz	r3, 8008752 <_sbrk_r+0x1a>
 8008750:	602b      	str	r3, [r5, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20002414 	.word	0x20002414

08008758 <__sread>:
 8008758:	b510      	push	{r4, lr}
 800875a:	460c      	mov	r4, r1
 800875c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008760:	f000 f8e0 	bl	8008924 <_read_r>
 8008764:	2800      	cmp	r0, #0
 8008766:	bfab      	itete	ge
 8008768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800876a:	89a3      	ldrhlt	r3, [r4, #12]
 800876c:	181b      	addge	r3, r3, r0
 800876e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008772:	bfac      	ite	ge
 8008774:	6563      	strge	r3, [r4, #84]	; 0x54
 8008776:	81a3      	strhlt	r3, [r4, #12]
 8008778:	bd10      	pop	{r4, pc}

0800877a <__swrite>:
 800877a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	461f      	mov	r7, r3
 8008780:	898b      	ldrh	r3, [r1, #12]
 8008782:	05db      	lsls	r3, r3, #23
 8008784:	4605      	mov	r5, r0
 8008786:	460c      	mov	r4, r1
 8008788:	4616      	mov	r6, r2
 800878a:	d505      	bpl.n	8008798 <__swrite+0x1e>
 800878c:	2302      	movs	r3, #2
 800878e:	2200      	movs	r2, #0
 8008790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008794:	f000 f868 	bl	8008868 <_lseek_r>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800879e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	4632      	mov	r2, r6
 80087a6:	463b      	mov	r3, r7
 80087a8:	4628      	mov	r0, r5
 80087aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ae:	f000 b817 	b.w	80087e0 <_write_r>

080087b2 <__sseek>:
 80087b2:	b510      	push	{r4, lr}
 80087b4:	460c      	mov	r4, r1
 80087b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ba:	f000 f855 	bl	8008868 <_lseek_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	bf15      	itete	ne
 80087c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80087c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087ce:	81a3      	strheq	r3, [r4, #12]
 80087d0:	bf18      	it	ne
 80087d2:	81a3      	strhne	r3, [r4, #12]
 80087d4:	bd10      	pop	{r4, pc}

080087d6 <__sclose>:
 80087d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087da:	f000 b813 	b.w	8008804 <_close_r>
	...

080087e0 <_write_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4c07      	ldr	r4, [pc, #28]	; (8008800 <_write_r+0x20>)
 80087e4:	4605      	mov	r5, r0
 80087e6:	4608      	mov	r0, r1
 80087e8:	4611      	mov	r1, r2
 80087ea:	2200      	movs	r2, #0
 80087ec:	6022      	str	r2, [r4, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	f7f8 f98f 	bl	8000b12 <_write>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_write_r+0x1e>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_write_r+0x1e>
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20002414 	.word	0x20002414

08008804 <_close_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4c06      	ldr	r4, [pc, #24]	; (8008820 <_close_r+0x1c>)
 8008808:	2300      	movs	r3, #0
 800880a:	4605      	mov	r5, r0
 800880c:	4608      	mov	r0, r1
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	f7f8 fd91 	bl	8001336 <_close>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_close_r+0x1a>
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	b103      	cbz	r3, 800881e <_close_r+0x1a>
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	20002414 	.word	0x20002414

08008824 <_fstat_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4c07      	ldr	r4, [pc, #28]	; (8008844 <_fstat_r+0x20>)
 8008828:	2300      	movs	r3, #0
 800882a:	4605      	mov	r5, r0
 800882c:	4608      	mov	r0, r1
 800882e:	4611      	mov	r1, r2
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	f7f8 fd8c 	bl	800134e <_fstat>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d102      	bne.n	8008840 <_fstat_r+0x1c>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	b103      	cbz	r3, 8008840 <_fstat_r+0x1c>
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	bf00      	nop
 8008844:	20002414 	.word	0x20002414

08008848 <_isatty_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4c06      	ldr	r4, [pc, #24]	; (8008864 <_isatty_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4605      	mov	r5, r0
 8008850:	4608      	mov	r0, r1
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	f7f8 fd8b 	bl	800136e <_isatty>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_isatty_r+0x1a>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	b103      	cbz	r3, 8008862 <_isatty_r+0x1a>
 8008860:	602b      	str	r3, [r5, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20002414 	.word	0x20002414

08008868 <_lseek_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4c07      	ldr	r4, [pc, #28]	; (8008888 <_lseek_r+0x20>)
 800886c:	4605      	mov	r5, r0
 800886e:	4608      	mov	r0, r1
 8008870:	4611      	mov	r1, r2
 8008872:	2200      	movs	r2, #0
 8008874:	6022      	str	r2, [r4, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f7f8 fd84 	bl	8001384 <_lseek>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d102      	bne.n	8008886 <_lseek_r+0x1e>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	b103      	cbz	r3, 8008886 <_lseek_r+0x1e>
 8008884:	602b      	str	r3, [r5, #0]
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	20002414 	.word	0x20002414

0800888c <memcpy>:
 800888c:	b510      	push	{r4, lr}
 800888e:	1e43      	subs	r3, r0, #1
 8008890:	440a      	add	r2, r1
 8008892:	4291      	cmp	r1, r2
 8008894:	d100      	bne.n	8008898 <memcpy+0xc>
 8008896:	bd10      	pop	{r4, pc}
 8008898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800889c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a0:	e7f7      	b.n	8008892 <memcpy+0x6>

080088a2 <memmove>:
 80088a2:	4288      	cmp	r0, r1
 80088a4:	b510      	push	{r4, lr}
 80088a6:	eb01 0302 	add.w	r3, r1, r2
 80088aa:	d807      	bhi.n	80088bc <memmove+0x1a>
 80088ac:	1e42      	subs	r2, r0, #1
 80088ae:	4299      	cmp	r1, r3
 80088b0:	d00a      	beq.n	80088c8 <memmove+0x26>
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80088ba:	e7f8      	b.n	80088ae <memmove+0xc>
 80088bc:	4283      	cmp	r3, r0
 80088be:	d9f5      	bls.n	80088ac <memmove+0xa>
 80088c0:	1881      	adds	r1, r0, r2
 80088c2:	1ad2      	subs	r2, r2, r3
 80088c4:	42d3      	cmn	r3, r2
 80088c6:	d100      	bne.n	80088ca <memmove+0x28>
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80088d2:	e7f7      	b.n	80088c4 <memmove+0x22>

080088d4 <__malloc_lock>:
 80088d4:	4770      	bx	lr

080088d6 <__malloc_unlock>:
 80088d6:	4770      	bx	lr

080088d8 <_realloc_r>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	4607      	mov	r7, r0
 80088dc:	4614      	mov	r4, r2
 80088de:	460e      	mov	r6, r1
 80088e0:	b921      	cbnz	r1, 80088ec <_realloc_r+0x14>
 80088e2:	4611      	mov	r1, r2
 80088e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088e8:	f7ff bab2 	b.w	8007e50 <_malloc_r>
 80088ec:	b922      	cbnz	r2, 80088f8 <_realloc_r+0x20>
 80088ee:	f7ff fa61 	bl	8007db4 <_free_r>
 80088f2:	4625      	mov	r5, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f8:	f000 f826 	bl	8008948 <_malloc_usable_size_r>
 80088fc:	42a0      	cmp	r0, r4
 80088fe:	d20f      	bcs.n	8008920 <_realloc_r+0x48>
 8008900:	4621      	mov	r1, r4
 8008902:	4638      	mov	r0, r7
 8008904:	f7ff faa4 	bl	8007e50 <_malloc_r>
 8008908:	4605      	mov	r5, r0
 800890a:	2800      	cmp	r0, #0
 800890c:	d0f2      	beq.n	80088f4 <_realloc_r+0x1c>
 800890e:	4631      	mov	r1, r6
 8008910:	4622      	mov	r2, r4
 8008912:	f7ff ffbb 	bl	800888c <memcpy>
 8008916:	4631      	mov	r1, r6
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff fa4b 	bl	8007db4 <_free_r>
 800891e:	e7e9      	b.n	80088f4 <_realloc_r+0x1c>
 8008920:	4635      	mov	r5, r6
 8008922:	e7e7      	b.n	80088f4 <_realloc_r+0x1c>

08008924 <_read_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4c07      	ldr	r4, [pc, #28]	; (8008944 <_read_r+0x20>)
 8008928:	4605      	mov	r5, r0
 800892a:	4608      	mov	r0, r1
 800892c:	4611      	mov	r1, r2
 800892e:	2200      	movs	r2, #0
 8008930:	6022      	str	r2, [r4, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	f7f8 fce2 	bl	80012fc <_read>
 8008938:	1c43      	adds	r3, r0, #1
 800893a:	d102      	bne.n	8008942 <_read_r+0x1e>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	b103      	cbz	r3, 8008942 <_read_r+0x1e>
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	20002414 	.word	0x20002414

08008948 <_malloc_usable_size_r>:
 8008948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800894c:	1f18      	subs	r0, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	bfbc      	itt	lt
 8008952:	580b      	ldrlt	r3, [r1, r0]
 8008954:	18c0      	addlt	r0, r0, r3
 8008956:	4770      	bx	lr

08008958 <_init>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr

08008964 <_fini>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	bf00      	nop
 8008968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896a:	bc08      	pop	{r3}
 800896c:	469e      	mov	lr, r3
 800896e:	4770      	bx	lr
