
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c178  0800c178  000210c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c178  0800c178  000210c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c178  0800c178  000210c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c178  0800c178  0001c178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c17c  0800c17c  0001c17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010c8  20000000  0800c180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200010c8  0800d248  000210c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001568  0800d248  00021568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000210c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002866b  00000000  00000000  000210f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000054f4  00000000  00000000  00049763  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d88  00000000  00000000  0004ec58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a48  00000000  00000000  000509e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fff8  00000000  00000000  00052428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020205  00000000  00000000  00082420  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001244ee  00000000  00000000  000a2625  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c6b13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e30  00000000  00000000  001c6b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200010c8 	.word	0x200010c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bbb0 	.word	0x0800bbb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200010cc 	.word	0x200010cc
 800021c:	0800bbb0 	.word	0x0800bbb0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f009 febc 	bl	800a040 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f00a faa9 	bl	800a820 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f00a f8bd 	bl	800a450 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f009 fe52 	bl	8009f9c <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f004 f940 	bl	8004580 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f001 fca4 	bl	8001c4c <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f00a fcd7 	bl	800acb8 <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800bbc8 	.word	0x0800bbc8
 8000314:	0800bbd8 	.word	0x0800bbd8

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8



	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 800031e:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <DM_UpdateDisplay+0xd8>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d002      	beq.n	800032c <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000326:	f000 f885 	bl	8000434 <_DrawFuncSelectMenu>
 800032a:	e041      	b.n	80003b0 <DM_UpdateDisplay+0x98>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 800032c:	4b31      	ldr	r3, [pc, #196]	; (80003f4 <DM_UpdateDisplay+0xdc>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <DM_UpdateDisplay+0x22>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawGainSelectMenu();
 8000334:	f000 fa48 	bl	80007c8 <_DrawGainSelectMenu>
 8000338:	e03a      	b.n	80003b0 <DM_UpdateDisplay+0x98>
	}
	else if(eNextFreqMenuStatus)		//  == ENABLE_FREQMENU
 800033a:	4b2f      	ldr	r3, [pc, #188]	; (80003f8 <DM_UpdateDisplay+0xe0>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d002      	beq.n	8000348 <DM_UpdateDisplay+0x30>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		_DrawFreqSelectMenu();
 8000342:	f000 fa7f 	bl	8000844 <_DrawFreqSelectMenu>
 8000346:	e033      	b.n	80003b0 <DM_UpdateDisplay+0x98>
	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 8000348:	4b2c      	ldr	r3, [pc, #176]	; (80003fc <DM_UpdateDisplay+0xe4>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d002      	beq.n	8000356 <DM_UpdateDisplay+0x3e>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawBiasSelectMenu();
 8000350:	f001 fbfa 	bl	8001b48 <_DrawBiasSelectMenu>
 8000354:	e02c      	b.n	80003b0 <DM_UpdateDisplay+0x98>
	}
	else
	{
		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000356:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800035a:	9301      	str	r3, [sp, #4]
 800035c:	2302      	movs	r3, #2
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2300      	movs	r3, #0
 8000362:	22d2      	movs	r2, #210	; 0xd2
 8000364:	210a      	movs	r1, #10
 8000366:	4826      	ldr	r0, [pc, #152]	; (8000400 <DM_UpdateDisplay+0xe8>)
 8000368:	f009 fe18 	bl	8009f9c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 800036c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2302      	movs	r3, #2
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	22d2      	movs	r2, #210	; 0xd2
 800037a:	2164      	movs	r1, #100	; 0x64
 800037c:	4821      	ldr	r0, [pc, #132]	; (8000404 <DM_UpdateDisplay+0xec>)
 800037e:	f009 fe0d 	bl	8009f9c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000382:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	2302      	movs	r3, #2
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2300      	movs	r3, #0
 800038e:	22d2      	movs	r2, #210	; 0xd2
 8000390:	21af      	movs	r1, #175	; 0xaf
 8000392:	481d      	ldr	r0, [pc, #116]	; (8000408 <DM_UpdateDisplay+0xf0>)
 8000394:	f009 fe02 	bl	8009f9c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000398:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	2302      	movs	r3, #2
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2300      	movs	r3, #0
 80003a4:	22d2      	movs	r2, #210	; 0xd2
 80003a6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80003aa:	4818      	ldr	r0, [pc, #96]	; (800040c <DM_UpdateDisplay+0xf4>)
 80003ac:	f009 fdf6 	bl	8009f9c <ILI9341_Draw_Text>
	}

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 80003b0:	2300      	movs	r3, #0
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	2300      	movs	r3, #0
 80003b6:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <DM_UpdateDisplay+0xf8>)
 80003ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003bc:	b29b      	uxth	r3, r3
 80003be:	4639      	mov	r1, r7
 80003c0:	2205      	movs	r2, #5
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fc84 	bl	8001cd0 <DM_AddDigitPadding>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d10b      	bne.n	80003e6 <DM_UpdateDisplay+0xce>
		ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 80003ce:	4638      	mov	r0, r7
 80003d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2302      	movs	r3, #2
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2300      	movs	r3, #0
 80003dc:	2232      	movs	r2, #50	; 0x32
 80003de:	f44f 7182 	mov.w	r1, #260	; 0x104
 80003e2:	f009 fddb 	bl	8009f9c <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200010e4 	.word	0x200010e4
 80003f4:	200010e5 	.word	0x200010e5
 80003f8:	200010e6 	.word	0x200010e6
 80003fc:	200010e7 	.word	0x200010e7
 8000400:	0800bbe8 	.word	0x0800bbe8
 8000404:	0800bbf0 	.word	0x0800bbf0
 8000408:	0800bbf8 	.word	0x0800bbf8
 800040c:	0800bc00 	.word	0x0800bc00
 8000410:	40012c00 	.word	0x40012c00

08000414 <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 800041e:	4a04      	ldr	r2, [pc, #16]	; (8000430 <DM_ShowFuncSelectMenu+0x1c>)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	7013      	strb	r3, [r2, #0]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	200010e4 	.word	0x200010e4

08000434 <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af02      	add	r7, sp, #8

	switch(FuncO_GetOutputMode())
 800043a:	f002 f955 	bl	80026e8 <FuncO_GetOutputMode>
 800043e:	4603      	mov	r3, r0
 8000440:	2b05      	cmp	r3, #5
 8000442:	f200 81a1 	bhi.w	8000788 <_DrawFuncSelectMenu+0x354>
 8000446:	a201      	add	r2, pc, #4	; (adr r2, 800044c <_DrawFuncSelectMenu+0x18>)
 8000448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044c:	08000465 	.word	0x08000465
 8000450:	080004eb 	.word	0x080004eb
 8000454:	08000571 	.word	0x08000571
 8000458:	080005f7 	.word	0x080005f7
 800045c:	0800067d 	.word	0x0800067d
 8000460:	08000703 	.word	0x08000703
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 8000464:	2300      	movs	r3, #0
 8000466:	9301      	str	r3, [sp, #4]
 8000468:	2302      	movs	r3, #2
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000470:	221e      	movs	r2, #30
 8000472:	210a      	movs	r1, #10
 8000474:	48c6      	ldr	r0, [pc, #792]	; (8000790 <_DrawFuncSelectMenu+0x35c>)
 8000476:	f009 fd91 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800047a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	2302      	movs	r3, #2
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2300      	movs	r3, #0
 8000486:	2232      	movs	r2, #50	; 0x32
 8000488:	210a      	movs	r1, #10
 800048a:	48c2      	ldr	r0, [pc, #776]	; (8000794 <_DrawFuncSelectMenu+0x360>)
 800048c:	f009 fd86 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2302      	movs	r3, #2
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2300      	movs	r3, #0
 800049c:	2246      	movs	r2, #70	; 0x46
 800049e:	210a      	movs	r1, #10
 80004a0:	48bd      	ldr	r0, [pc, #756]	; (8000798 <_DrawFuncSelectMenu+0x364>)
 80004a2:	f009 fd7b 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80004a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	2302      	movs	r3, #2
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2300      	movs	r3, #0
 80004b2:	225a      	movs	r2, #90	; 0x5a
 80004b4:	210a      	movs	r1, #10
 80004b6:	48b9      	ldr	r0, [pc, #740]	; (800079c <_DrawFuncSelectMenu+0x368>)
 80004b8:	f009 fd70 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80004bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2302      	movs	r3, #2
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2300      	movs	r3, #0
 80004c8:	226e      	movs	r2, #110	; 0x6e
 80004ca:	210a      	movs	r1, #10
 80004cc:	48b4      	ldr	r0, [pc, #720]	; (80007a0 <_DrawFuncSelectMenu+0x36c>)
 80004ce:	f009 fd65 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80004d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2302      	movs	r3, #2
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2300      	movs	r3, #0
 80004de:	2282      	movs	r2, #130	; 0x82
 80004e0:	210a      	movs	r1, #10
 80004e2:	48b0      	ldr	r0, [pc, #704]	; (80007a4 <_DrawFuncSelectMenu+0x370>)
 80004e4:	f009 fd5a 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 80004e8:	e14e      	b.n	8000788 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80004ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	2302      	movs	r3, #2
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2300      	movs	r3, #0
 80004f6:	221e      	movs	r2, #30
 80004f8:	210a      	movs	r1, #10
 80004fa:	48a5      	ldr	r0, [pc, #660]	; (8000790 <_DrawFuncSelectMenu+0x35c>)
 80004fc:	f009 fd4e 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 8000500:	2300      	movs	r3, #0
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	2302      	movs	r3, #2
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800050c:	2232      	movs	r2, #50	; 0x32
 800050e:	210a      	movs	r1, #10
 8000510:	48a0      	ldr	r0, [pc, #640]	; (8000794 <_DrawFuncSelectMenu+0x360>)
 8000512:	f009 fd43 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	2302      	movs	r3, #2
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2300      	movs	r3, #0
 8000522:	2246      	movs	r2, #70	; 0x46
 8000524:	210a      	movs	r1, #10
 8000526:	489c      	ldr	r0, [pc, #624]	; (8000798 <_DrawFuncSelectMenu+0x364>)
 8000528:	f009 fd38 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800052c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2302      	movs	r3, #2
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2300      	movs	r3, #0
 8000538:	225a      	movs	r2, #90	; 0x5a
 800053a:	210a      	movs	r1, #10
 800053c:	4897      	ldr	r0, [pc, #604]	; (800079c <_DrawFuncSelectMenu+0x368>)
 800053e:	f009 fd2d 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	2302      	movs	r3, #2
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2300      	movs	r3, #0
 800054e:	226e      	movs	r2, #110	; 0x6e
 8000550:	210a      	movs	r1, #10
 8000552:	4893      	ldr	r0, [pc, #588]	; (80007a0 <_DrawFuncSelectMenu+0x36c>)
 8000554:	f009 fd22 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2302      	movs	r3, #2
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	2282      	movs	r2, #130	; 0x82
 8000566:	210a      	movs	r1, #10
 8000568:	488e      	ldr	r0, [pc, #568]	; (80007a4 <_DrawFuncSelectMenu+0x370>)
 800056a:	f009 fd17 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 800056e:	e10b      	b.n	8000788 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2302      	movs	r3, #2
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	221e      	movs	r2, #30
 800057e:	210a      	movs	r1, #10
 8000580:	4883      	ldr	r0, [pc, #524]	; (8000790 <_DrawFuncSelectMenu+0x35c>)
 8000582:	f009 fd0b 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2302      	movs	r3, #2
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	2232      	movs	r2, #50	; 0x32
 8000594:	210a      	movs	r1, #10
 8000596:	487f      	ldr	r0, [pc, #508]	; (8000794 <_DrawFuncSelectMenu+0x360>)
 8000598:	f009 fd00 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 800059c:	2300      	movs	r3, #0
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2302      	movs	r3, #2
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	2246      	movs	r2, #70	; 0x46
 80005aa:	210a      	movs	r1, #10
 80005ac:	487a      	ldr	r0, [pc, #488]	; (8000798 <_DrawFuncSelectMenu+0x364>)
 80005ae:	f009 fcf5 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	225a      	movs	r2, #90	; 0x5a
 80005c0:	210a      	movs	r1, #10
 80005c2:	4876      	ldr	r0, [pc, #472]	; (800079c <_DrawFuncSelectMenu+0x368>)
 80005c4:	f009 fcea 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	226e      	movs	r2, #110	; 0x6e
 80005d6:	210a      	movs	r1, #10
 80005d8:	4871      	ldr	r0, [pc, #452]	; (80007a0 <_DrawFuncSelectMenu+0x36c>)
 80005da:	f009 fcdf 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	2302      	movs	r3, #2
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2300      	movs	r3, #0
 80005ea:	2282      	movs	r2, #130	; 0x82
 80005ec:	210a      	movs	r1, #10
 80005ee:	486d      	ldr	r0, [pc, #436]	; (80007a4 <_DrawFuncSelectMenu+0x370>)
 80005f0:	f009 fcd4 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 80005f4:	e0c8      	b.n	8000788 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	221e      	movs	r2, #30
 8000604:	210a      	movs	r1, #10
 8000606:	4862      	ldr	r0, [pc, #392]	; (8000790 <_DrawFuncSelectMenu+0x35c>)
 8000608:	f009 fcc8 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800060c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2302      	movs	r3, #2
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	2232      	movs	r2, #50	; 0x32
 800061a:	210a      	movs	r1, #10
 800061c:	485d      	ldr	r0, [pc, #372]	; (8000794 <_DrawFuncSelectMenu+0x360>)
 800061e:	f009 fcbd 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	2302      	movs	r3, #2
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	2246      	movs	r2, #70	; 0x46
 8000630:	210a      	movs	r1, #10
 8000632:	4859      	ldr	r0, [pc, #356]	; (8000798 <_DrawFuncSelectMenu+0x364>)
 8000634:	f009 fcb2 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 8000638:	2300      	movs	r3, #0
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2302      	movs	r3, #2
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000644:	225a      	movs	r2, #90	; 0x5a
 8000646:	210a      	movs	r1, #10
 8000648:	4854      	ldr	r0, [pc, #336]	; (800079c <_DrawFuncSelectMenu+0x368>)
 800064a:	f009 fca7 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800064e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2302      	movs	r3, #2
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	226e      	movs	r2, #110	; 0x6e
 800065c:	210a      	movs	r1, #10
 800065e:	4850      	ldr	r0, [pc, #320]	; (80007a0 <_DrawFuncSelectMenu+0x36c>)
 8000660:	f009 fc9c 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2302      	movs	r3, #2
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2282      	movs	r2, #130	; 0x82
 8000672:	210a      	movs	r1, #10
 8000674:	484b      	ldr	r0, [pc, #300]	; (80007a4 <_DrawFuncSelectMenu+0x370>)
 8000676:	f009 fc91 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 800067a:	e085      	b.n	8000788 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800067c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	2302      	movs	r3, #2
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2300      	movs	r3, #0
 8000688:	221e      	movs	r2, #30
 800068a:	210a      	movs	r1, #10
 800068c:	4840      	ldr	r0, [pc, #256]	; (8000790 <_DrawFuncSelectMenu+0x35c>)
 800068e:	f009 fc85 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	2302      	movs	r3, #2
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	2232      	movs	r2, #50	; 0x32
 80006a0:	210a      	movs	r1, #10
 80006a2:	483c      	ldr	r0, [pc, #240]	; (8000794 <_DrawFuncSelectMenu+0x360>)
 80006a4:	f009 fc7a 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80006a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2302      	movs	r3, #2
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2246      	movs	r2, #70	; 0x46
 80006b6:	210a      	movs	r1, #10
 80006b8:	4837      	ldr	r0, [pc, #220]	; (8000798 <_DrawFuncSelectMenu+0x364>)
 80006ba:	f009 fc6f 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80006be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	2302      	movs	r3, #2
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	225a      	movs	r2, #90	; 0x5a
 80006cc:	210a      	movs	r1, #10
 80006ce:	4833      	ldr	r0, [pc, #204]	; (800079c <_DrawFuncSelectMenu+0x368>)
 80006d0:	f009 fc64 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 80006d4:	2300      	movs	r3, #0
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	2302      	movs	r3, #2
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e0:	226e      	movs	r2, #110	; 0x6e
 80006e2:	210a      	movs	r1, #10
 80006e4:	482e      	ldr	r0, [pc, #184]	; (80007a0 <_DrawFuncSelectMenu+0x36c>)
 80006e6:	f009 fc59 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80006ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	2302      	movs	r3, #2
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2300      	movs	r3, #0
 80006f6:	2282      	movs	r2, #130	; 0x82
 80006f8:	210a      	movs	r1, #10
 80006fa:	482a      	ldr	r0, [pc, #168]	; (80007a4 <_DrawFuncSelectMenu+0x370>)
 80006fc:	f009 fc4e 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 8000700:	e042      	b.n	8000788 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	2302      	movs	r3, #2
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2300      	movs	r3, #0
 800070e:	221e      	movs	r2, #30
 8000710:	210a      	movs	r1, #10
 8000712:	481f      	ldr	r0, [pc, #124]	; (8000790 <_DrawFuncSelectMenu+0x35c>)
 8000714:	f009 fc42 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2302      	movs	r3, #2
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	2232      	movs	r2, #50	; 0x32
 8000726:	210a      	movs	r1, #10
 8000728:	481a      	ldr	r0, [pc, #104]	; (8000794 <_DrawFuncSelectMenu+0x360>)
 800072a:	f009 fc37 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800072e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	2302      	movs	r3, #2
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	2246      	movs	r2, #70	; 0x46
 800073c:	210a      	movs	r1, #10
 800073e:	4816      	ldr	r0, [pc, #88]	; (8000798 <_DrawFuncSelectMenu+0x364>)
 8000740:	f009 fc2c 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	2302      	movs	r3, #2
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2300      	movs	r3, #0
 8000750:	225a      	movs	r2, #90	; 0x5a
 8000752:	210a      	movs	r1, #10
 8000754:	4811      	ldr	r0, [pc, #68]	; (800079c <_DrawFuncSelectMenu+0x368>)
 8000756:	f009 fc21 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800075a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	2302      	movs	r3, #2
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	226e      	movs	r2, #110	; 0x6e
 8000768:	210a      	movs	r1, #10
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <_DrawFuncSelectMenu+0x36c>)
 800076c:	f009 fc16 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 8000770:	2300      	movs	r3, #0
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	2302      	movs	r3, #2
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800077c:	2282      	movs	r2, #130	; 0x82
 800077e:	210a      	movs	r1, #10
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <_DrawFuncSelectMenu+0x370>)
 8000782:	f009 fc0b 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 8000786:	bf00      	nop

	}

}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	0800bc08 	.word	0x0800bc08
 8000794:	0800bc10 	.word	0x0800bc10
 8000798:	0800bc1c 	.word	0x0800bc1c
 800079c:	0800bc24 	.word	0x0800bc24
 80007a0:	0800bc30 	.word	0x0800bc30
 80007a4:	0800bc3c 	.word	0x0800bc3c

080007a8 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <DM_ShowGainSelectMenu+0x1c>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	7013      	strb	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	200010e5 	.word	0x200010e5

080007c8 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 80007ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	2302      	movs	r3, #2
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2300      	movs	r3, #0
 80007da:	2278      	movs	r2, #120	; 0x78
 80007dc:	210a      	movs	r1, #10
 80007de:	4810      	ldr	r0, [pc, #64]	; (8000820 <_DrawGainSelectMenu+0x58>)
 80007e0:	f009 fbdc 	bl	8009f9c <ILI9341_Draw_Text>

	char gain[4] = "";
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
 80007e8:	f002 f878 	bl	80028dc <GO_GetOutputGain>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	1d39      	adds	r1, r7, #4
 80007f2:	2204      	movs	r2, #4
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fa6b 	bl	8001cd0 <DM_AddDigitPadding>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10a      	bne.n	8000816 <_DrawGainSelectMenu+0x4e>
		ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 8000800:	1d38      	adds	r0, r7, #4
 8000802:	2300      	movs	r3, #0
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2302      	movs	r3, #2
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	2278      	movs	r2, #120	; 0x78
 8000810:	21fa      	movs	r1, #250	; 0xfa
 8000812:	f009 fbc3 	bl	8009f9c <ILI9341_Draw_Text>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	0800bc44 	.word	0x0800bc44

08000824 <DM_ShowFreqSelectMenu>:
 *
 *
 *
 */
void DM_ShowFreqSelectMenu(eFreqMenu_Status pValue)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <DM_ShowFreqSelectMenu+0x1c>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	7013      	strb	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	200010e6 	.word	0x200010e6

08000844 <_DrawFreqSelectMenu>:
 *
 *
 *
 */
void _DrawFreqSelectMenu()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af02      	add	r7, sp, #8
	char freq[6] = "";
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
*/
	switch(FreqO_GetFPreset())
 800084a:	f001 fe8f 	bl	800256c <FreqO_GetFPreset>
 800084e:	4603      	mov	r3, r0
 8000850:	2b0d      	cmp	r3, #13
 8000852:	f201 8149 	bhi.w	8001ae8 <_DrawFreqSelectMenu+0x12a4>
 8000856:	a201      	add	r2, pc, #4	; (adr r2, 800085c <_DrawFreqSelectMenu+0x18>)
 8000858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085c:	08000895 	.word	0x08000895
 8000860:	080009cd 	.word	0x080009cd
 8000864:	08000b3d 	.word	0x08000b3d
 8000868:	08000c75 	.word	0x08000c75
 800086c:	08000de5 	.word	0x08000de5
 8000870:	08000f1d 	.word	0x08000f1d
 8000874:	0800108d 	.word	0x0800108d
 8000878:	080011c5 	.word	0x080011c5
 800087c:	08001335 	.word	0x08001335
 8000880:	0800146b 	.word	0x0800146b
 8000884:	080015d9 	.word	0x080015d9
 8000888:	0800170f 	.word	0x0800170f
 800088c:	0800187d 	.word	0x0800187d
 8000890:	080019b3 	.word	0x080019b3
	{
		case FPRESET_1HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, WHITE, 2, BLACK);
 8000894:	2300      	movs	r3, #0
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	2302      	movs	r3, #2
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a0:	2223      	movs	r2, #35	; 0x23
 80008a2:	210a      	movs	r1, #10
 80008a4:	4897      	ldr	r0, [pc, #604]	; (8000b04 <_DrawFreqSelectMenu+0x2c0>)
 80008a6:	f009 fb79 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 80008aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	2302      	movs	r3, #2
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2300      	movs	r3, #0
 80008b6:	2237      	movs	r2, #55	; 0x37
 80008b8:	210a      	movs	r1, #10
 80008ba:	4893      	ldr	r0, [pc, #588]	; (8000b08 <_DrawFreqSelectMenu+0x2c4>)
 80008bc:	f009 fb6e 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 80008c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	2302      	movs	r3, #2
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	224b      	movs	r2, #75	; 0x4b
 80008ce:	210a      	movs	r1, #10
 80008d0:	488e      	ldr	r0, [pc, #568]	; (8000b0c <_DrawFreqSelectMenu+0x2c8>)
 80008d2:	f009 fb63 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 80008d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	2302      	movs	r3, #2
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2300      	movs	r3, #0
 80008e2:	225f      	movs	r2, #95	; 0x5f
 80008e4:	210a      	movs	r1, #10
 80008e6:	488a      	ldr	r0, [pc, #552]	; (8000b10 <_DrawFreqSelectMenu+0x2cc>)
 80008e8:	f009 fb58 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 80008ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2302      	movs	r3, #2
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	2273      	movs	r2, #115	; 0x73
 80008fa:	210a      	movs	r1, #10
 80008fc:	4885      	ldr	r0, [pc, #532]	; (8000b14 <_DrawFreqSelectMenu+0x2d0>)
 80008fe:	f009 fb4d 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8000902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	2302      	movs	r3, #2
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	2287      	movs	r2, #135	; 0x87
 8000910:	210a      	movs	r1, #10
 8000912:	4881      	ldr	r0, [pc, #516]	; (8000b18 <_DrawFreqSelectMenu+0x2d4>)
 8000914:	f009 fb42 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8000918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	2302      	movs	r3, #2
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2300      	movs	r3, #0
 8000924:	229b      	movs	r2, #155	; 0x9b
 8000926:	210a      	movs	r1, #10
 8000928:	487c      	ldr	r0, [pc, #496]	; (8000b1c <_DrawFreqSelectMenu+0x2d8>)
 800092a:	f009 fb37 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 800092e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	2302      	movs	r3, #2
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2300      	movs	r3, #0
 800093a:	2223      	movs	r2, #35	; 0x23
 800093c:	2178      	movs	r1, #120	; 0x78
 800093e:	4878      	ldr	r0, [pc, #480]	; (8000b20 <_DrawFreqSelectMenu+0x2dc>)
 8000940:	f009 fb2c 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8000944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	2302      	movs	r3, #2
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	2237      	movs	r2, #55	; 0x37
 8000952:	2178      	movs	r1, #120	; 0x78
 8000954:	4873      	ldr	r0, [pc, #460]	; (8000b24 <_DrawFreqSelectMenu+0x2e0>)
 8000956:	f009 fb21 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 800095a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	2302      	movs	r3, #2
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2300      	movs	r3, #0
 8000966:	224b      	movs	r2, #75	; 0x4b
 8000968:	2178      	movs	r1, #120	; 0x78
 800096a:	486f      	ldr	r0, [pc, #444]	; (8000b28 <_DrawFreqSelectMenu+0x2e4>)
 800096c:	f009 fb16 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8000970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	2302      	movs	r3, #2
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2300      	movs	r3, #0
 800097c:	225f      	movs	r2, #95	; 0x5f
 800097e:	2178      	movs	r1, #120	; 0x78
 8000980:	486a      	ldr	r0, [pc, #424]	; (8000b2c <_DrawFreqSelectMenu+0x2e8>)
 8000982:	f009 fb0b 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8000986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	2302      	movs	r3, #2
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	2273      	movs	r2, #115	; 0x73
 8000994:	2178      	movs	r1, #120	; 0x78
 8000996:	4866      	ldr	r0, [pc, #408]	; (8000b30 <_DrawFreqSelectMenu+0x2ec>)
 8000998:	f009 fb00 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 800099c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	2302      	movs	r3, #2
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2300      	movs	r3, #0
 80009a8:	2287      	movs	r2, #135	; 0x87
 80009aa:	2178      	movs	r1, #120	; 0x78
 80009ac:	4861      	ldr	r0, [pc, #388]	; (8000b34 <_DrawFreqSelectMenu+0x2f0>)
 80009ae:	f009 faf5 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 80009b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	2302      	movs	r3, #2
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2300      	movs	r3, #0
 80009be:	229b      	movs	r2, #155	; 0x9b
 80009c0:	2178      	movs	r1, #120	; 0x78
 80009c2:	485d      	ldr	r0, [pc, #372]	; (8000b38 <_DrawFreqSelectMenu+0x2f4>)
 80009c4:	f009 faea 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 80009c8:	f001 b88e 	b.w	8001ae8 <_DrawFreqSelectMenu+0x12a4>
		case FPRESET_10HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 80009cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	2302      	movs	r3, #2
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2300      	movs	r3, #0
 80009d8:	2223      	movs	r2, #35	; 0x23
 80009da:	210a      	movs	r1, #10
 80009dc:	4849      	ldr	r0, [pc, #292]	; (8000b04 <_DrawFreqSelectMenu+0x2c0>)
 80009de:	f009 fadd 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, WHITE, 2, BLACK);
 80009e2:	2300      	movs	r3, #0
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	2302      	movs	r3, #2
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ee:	2237      	movs	r2, #55	; 0x37
 80009f0:	210a      	movs	r1, #10
 80009f2:	4845      	ldr	r0, [pc, #276]	; (8000b08 <_DrawFreqSelectMenu+0x2c4>)
 80009f4:	f009 fad2 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 80009f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	2302      	movs	r3, #2
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2300      	movs	r3, #0
 8000a04:	224b      	movs	r2, #75	; 0x4b
 8000a06:	210a      	movs	r1, #10
 8000a08:	4840      	ldr	r0, [pc, #256]	; (8000b0c <_DrawFreqSelectMenu+0x2c8>)
 8000a0a:	f009 fac7 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8000a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	2302      	movs	r3, #2
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	225f      	movs	r2, #95	; 0x5f
 8000a1c:	210a      	movs	r1, #10
 8000a1e:	483c      	ldr	r0, [pc, #240]	; (8000b10 <_DrawFreqSelectMenu+0x2cc>)
 8000a20:	f009 fabc 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8000a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2273      	movs	r2, #115	; 0x73
 8000a32:	210a      	movs	r1, #10
 8000a34:	4837      	ldr	r0, [pc, #220]	; (8000b14 <_DrawFreqSelectMenu+0x2d0>)
 8000a36:	f009 fab1 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8000a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	2302      	movs	r3, #2
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	2287      	movs	r2, #135	; 0x87
 8000a48:	210a      	movs	r1, #10
 8000a4a:	4833      	ldr	r0, [pc, #204]	; (8000b18 <_DrawFreqSelectMenu+0x2d4>)
 8000a4c:	f009 faa6 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8000a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	2302      	movs	r3, #2
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	229b      	movs	r2, #155	; 0x9b
 8000a5e:	210a      	movs	r1, #10
 8000a60:	482e      	ldr	r0, [pc, #184]	; (8000b1c <_DrawFreqSelectMenu+0x2d8>)
 8000a62:	f009 fa9b 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8000a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2300      	movs	r3, #0
 8000a72:	2223      	movs	r2, #35	; 0x23
 8000a74:	2178      	movs	r1, #120	; 0x78
 8000a76:	482a      	ldr	r0, [pc, #168]	; (8000b20 <_DrawFreqSelectMenu+0x2dc>)
 8000a78:	f009 fa90 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8000a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	2302      	movs	r3, #2
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2300      	movs	r3, #0
 8000a88:	2237      	movs	r2, #55	; 0x37
 8000a8a:	2178      	movs	r1, #120	; 0x78
 8000a8c:	4825      	ldr	r0, [pc, #148]	; (8000b24 <_DrawFreqSelectMenu+0x2e0>)
 8000a8e:	f009 fa85 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8000a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	2302      	movs	r3, #2
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	224b      	movs	r2, #75	; 0x4b
 8000aa0:	2178      	movs	r1, #120	; 0x78
 8000aa2:	4821      	ldr	r0, [pc, #132]	; (8000b28 <_DrawFreqSelectMenu+0x2e4>)
 8000aa4:	f009 fa7a 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8000aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	2302      	movs	r3, #2
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	225f      	movs	r2, #95	; 0x5f
 8000ab6:	2178      	movs	r1, #120	; 0x78
 8000ab8:	481c      	ldr	r0, [pc, #112]	; (8000b2c <_DrawFreqSelectMenu+0x2e8>)
 8000aba:	f009 fa6f 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8000abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	2273      	movs	r2, #115	; 0x73
 8000acc:	2178      	movs	r1, #120	; 0x78
 8000ace:	4818      	ldr	r0, [pc, #96]	; (8000b30 <_DrawFreqSelectMenu+0x2ec>)
 8000ad0:	f009 fa64 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8000ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	2302      	movs	r3, #2
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	2287      	movs	r2, #135	; 0x87
 8000ae2:	2178      	movs	r1, #120	; 0x78
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <_DrawFreqSelectMenu+0x2f0>)
 8000ae6:	f009 fa59 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8000aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	2302      	movs	r3, #2
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2300      	movs	r3, #0
 8000af6:	229b      	movs	r2, #155	; 0x9b
 8000af8:	2178      	movs	r1, #120	; 0x78
 8000afa:	480f      	ldr	r0, [pc, #60]	; (8000b38 <_DrawFreqSelectMenu+0x2f4>)
 8000afc:	f009 fa4e 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 8000b00:	f000 bff2 	b.w	8001ae8 <_DrawFreqSelectMenu+0x12a4>
 8000b04:	0800bc5c 	.word	0x0800bc5c
 8000b08:	0800bc64 	.word	0x0800bc64
 8000b0c:	0800bc6c 	.word	0x0800bc6c
 8000b10:	0800bc74 	.word	0x0800bc74
 8000b14:	0800bc7c 	.word	0x0800bc7c
 8000b18:	0800bc84 	.word	0x0800bc84
 8000b1c:	0800bc8c 	.word	0x0800bc8c
 8000b20:	0800bc94 	.word	0x0800bc94
 8000b24:	0800bc9c 	.word	0x0800bc9c
 8000b28:	0800bca4 	.word	0x0800bca4
 8000b2c:	0800bcac 	.word	0x0800bcac
 8000b30:	0800bcb4 	.word	0x0800bcb4
 8000b34:	0800bcbc 	.word	0x0800bcbc
 8000b38:	0800bcc4 	.word	0x0800bcc4
		case FPRESET_50HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8000b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	2302      	movs	r3, #2
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2300      	movs	r3, #0
 8000b48:	2223      	movs	r2, #35	; 0x23
 8000b4a:	210a      	movs	r1, #10
 8000b4c:	4897      	ldr	r0, [pc, #604]	; (8000dac <_DrawFreqSelectMenu+0x568>)
 8000b4e:	f009 fa25 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8000b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	2302      	movs	r3, #2
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	2237      	movs	r2, #55	; 0x37
 8000b60:	210a      	movs	r1, #10
 8000b62:	4893      	ldr	r0, [pc, #588]	; (8000db0 <_DrawFreqSelectMenu+0x56c>)
 8000b64:	f009 fa1a 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, WHITE, 2, BLACK);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b74:	224b      	movs	r2, #75	; 0x4b
 8000b76:	210a      	movs	r1, #10
 8000b78:	488e      	ldr	r0, [pc, #568]	; (8000db4 <_DrawFreqSelectMenu+0x570>)
 8000b7a:	f009 fa0f 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8000b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b82:	9301      	str	r3, [sp, #4]
 8000b84:	2302      	movs	r3, #2
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	225f      	movs	r2, #95	; 0x5f
 8000b8c:	210a      	movs	r1, #10
 8000b8e:	488a      	ldr	r0, [pc, #552]	; (8000db8 <_DrawFreqSelectMenu+0x574>)
 8000b90:	f009 fa04 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8000b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2273      	movs	r2, #115	; 0x73
 8000ba2:	210a      	movs	r1, #10
 8000ba4:	4885      	ldr	r0, [pc, #532]	; (8000dbc <_DrawFreqSelectMenu+0x578>)
 8000ba6:	f009 f9f9 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8000baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2287      	movs	r2, #135	; 0x87
 8000bb8:	210a      	movs	r1, #10
 8000bba:	4881      	ldr	r0, [pc, #516]	; (8000dc0 <_DrawFreqSelectMenu+0x57c>)
 8000bbc:	f009 f9ee 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8000bc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	229b      	movs	r2, #155	; 0x9b
 8000bce:	210a      	movs	r1, #10
 8000bd0:	487c      	ldr	r0, [pc, #496]	; (8000dc4 <_DrawFreqSelectMenu+0x580>)
 8000bd2:	f009 f9e3 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8000bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	2302      	movs	r3, #2
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2300      	movs	r3, #0
 8000be2:	2223      	movs	r2, #35	; 0x23
 8000be4:	2178      	movs	r1, #120	; 0x78
 8000be6:	4878      	ldr	r0, [pc, #480]	; (8000dc8 <_DrawFreqSelectMenu+0x584>)
 8000be8:	f009 f9d8 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8000bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2237      	movs	r2, #55	; 0x37
 8000bfa:	2178      	movs	r1, #120	; 0x78
 8000bfc:	4873      	ldr	r0, [pc, #460]	; (8000dcc <_DrawFreqSelectMenu+0x588>)
 8000bfe:	f009 f9cd 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8000c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	2302      	movs	r3, #2
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	224b      	movs	r2, #75	; 0x4b
 8000c10:	2178      	movs	r1, #120	; 0x78
 8000c12:	486f      	ldr	r0, [pc, #444]	; (8000dd0 <_DrawFreqSelectMenu+0x58c>)
 8000c14:	f009 f9c2 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8000c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	2302      	movs	r3, #2
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2300      	movs	r3, #0
 8000c24:	225f      	movs	r2, #95	; 0x5f
 8000c26:	2178      	movs	r1, #120	; 0x78
 8000c28:	486a      	ldr	r0, [pc, #424]	; (8000dd4 <_DrawFreqSelectMenu+0x590>)
 8000c2a:	f009 f9b7 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8000c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c32:	9301      	str	r3, [sp, #4]
 8000c34:	2302      	movs	r3, #2
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	2273      	movs	r2, #115	; 0x73
 8000c3c:	2178      	movs	r1, #120	; 0x78
 8000c3e:	4866      	ldr	r0, [pc, #408]	; (8000dd8 <_DrawFreqSelectMenu+0x594>)
 8000c40:	f009 f9ac 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8000c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2287      	movs	r2, #135	; 0x87
 8000c52:	2178      	movs	r1, #120	; 0x78
 8000c54:	4861      	ldr	r0, [pc, #388]	; (8000ddc <_DrawFreqSelectMenu+0x598>)
 8000c56:	f009 f9a1 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	2302      	movs	r3, #2
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2300      	movs	r3, #0
 8000c66:	229b      	movs	r2, #155	; 0x9b
 8000c68:	2178      	movs	r1, #120	; 0x78
 8000c6a:	485d      	ldr	r0, [pc, #372]	; (8000de0 <_DrawFreqSelectMenu+0x59c>)
 8000c6c:	f009 f996 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 8000c70:	f000 bf3a 	b.w	8001ae8 <_DrawFreqSelectMenu+0x12a4>
		case FPRESET_100HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8000c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2223      	movs	r2, #35	; 0x23
 8000c82:	210a      	movs	r1, #10
 8000c84:	4849      	ldr	r0, [pc, #292]	; (8000dac <_DrawFreqSelectMenu+0x568>)
 8000c86:	f009 f989 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8000c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	2302      	movs	r3, #2
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2300      	movs	r3, #0
 8000c96:	2237      	movs	r2, #55	; 0x37
 8000c98:	210a      	movs	r1, #10
 8000c9a:	4845      	ldr	r0, [pc, #276]	; (8000db0 <_DrawFreqSelectMenu+0x56c>)
 8000c9c:	f009 f97e 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8000ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2300      	movs	r3, #0
 8000cac:	224b      	movs	r2, #75	; 0x4b
 8000cae:	210a      	movs	r1, #10
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <_DrawFreqSelectMenu+0x570>)
 8000cb2:	f009 f973 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, WHITE, 2, BLACK);
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	2302      	movs	r3, #2
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc2:	225f      	movs	r2, #95	; 0x5f
 8000cc4:	210a      	movs	r1, #10
 8000cc6:	483c      	ldr	r0, [pc, #240]	; (8000db8 <_DrawFreqSelectMenu+0x574>)
 8000cc8:	f009 f968 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8000ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2273      	movs	r2, #115	; 0x73
 8000cda:	210a      	movs	r1, #10
 8000cdc:	4837      	ldr	r0, [pc, #220]	; (8000dbc <_DrawFreqSelectMenu+0x578>)
 8000cde:	f009 f95d 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8000ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	2302      	movs	r3, #2
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2300      	movs	r3, #0
 8000cee:	2287      	movs	r2, #135	; 0x87
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	4833      	ldr	r0, [pc, #204]	; (8000dc0 <_DrawFreqSelectMenu+0x57c>)
 8000cf4:	f009 f952 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8000cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	2302      	movs	r3, #2
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2300      	movs	r3, #0
 8000d04:	229b      	movs	r2, #155	; 0x9b
 8000d06:	210a      	movs	r1, #10
 8000d08:	482e      	ldr	r0, [pc, #184]	; (8000dc4 <_DrawFreqSelectMenu+0x580>)
 8000d0a:	f009 f947 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8000d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	2302      	movs	r3, #2
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	2223      	movs	r2, #35	; 0x23
 8000d1c:	2178      	movs	r1, #120	; 0x78
 8000d1e:	482a      	ldr	r0, [pc, #168]	; (8000dc8 <_DrawFreqSelectMenu+0x584>)
 8000d20:	f009 f93c 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8000d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d28:	9301      	str	r3, [sp, #4]
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2237      	movs	r2, #55	; 0x37
 8000d32:	2178      	movs	r1, #120	; 0x78
 8000d34:	4825      	ldr	r0, [pc, #148]	; (8000dcc <_DrawFreqSelectMenu+0x588>)
 8000d36:	f009 f931 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8000d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	2302      	movs	r3, #2
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2300      	movs	r3, #0
 8000d46:	224b      	movs	r2, #75	; 0x4b
 8000d48:	2178      	movs	r1, #120	; 0x78
 8000d4a:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <_DrawFreqSelectMenu+0x58c>)
 8000d4c:	f009 f926 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8000d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	2302      	movs	r3, #2
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	225f      	movs	r2, #95	; 0x5f
 8000d5e:	2178      	movs	r1, #120	; 0x78
 8000d60:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <_DrawFreqSelectMenu+0x590>)
 8000d62:	f009 f91b 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8000d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2300      	movs	r3, #0
 8000d72:	2273      	movs	r2, #115	; 0x73
 8000d74:	2178      	movs	r1, #120	; 0x78
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <_DrawFreqSelectMenu+0x594>)
 8000d78:	f009 f910 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8000d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	2302      	movs	r3, #2
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	2287      	movs	r2, #135	; 0x87
 8000d8a:	2178      	movs	r1, #120	; 0x78
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <_DrawFreqSelectMenu+0x598>)
 8000d8e:	f009 f905 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8000d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	2302      	movs	r3, #2
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	229b      	movs	r2, #155	; 0x9b
 8000da0:	2178      	movs	r1, #120	; 0x78
 8000da2:	480f      	ldr	r0, [pc, #60]	; (8000de0 <_DrawFreqSelectMenu+0x59c>)
 8000da4:	f009 f8fa 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 8000da8:	f000 be9e 	b.w	8001ae8 <_DrawFreqSelectMenu+0x12a4>
 8000dac:	0800bc5c 	.word	0x0800bc5c
 8000db0:	0800bc64 	.word	0x0800bc64
 8000db4:	0800bc6c 	.word	0x0800bc6c
 8000db8:	0800bc74 	.word	0x0800bc74
 8000dbc:	0800bc7c 	.word	0x0800bc7c
 8000dc0:	0800bc84 	.word	0x0800bc84
 8000dc4:	0800bc8c 	.word	0x0800bc8c
 8000dc8:	0800bc94 	.word	0x0800bc94
 8000dcc:	0800bc9c 	.word	0x0800bc9c
 8000dd0:	0800bca4 	.word	0x0800bca4
 8000dd4:	0800bcac 	.word	0x0800bcac
 8000dd8:	0800bcb4 	.word	0x0800bcb4
 8000ddc:	0800bcbc 	.word	0x0800bcbc
 8000de0:	0800bcc4 	.word	0x0800bcc4
		case FPRESET_250HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8000de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	2302      	movs	r3, #2
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2300      	movs	r3, #0
 8000df0:	2223      	movs	r2, #35	; 0x23
 8000df2:	210a      	movs	r1, #10
 8000df4:	4897      	ldr	r0, [pc, #604]	; (8001054 <_DrawFreqSelectMenu+0x810>)
 8000df6:	f009 f8d1 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8000dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	2302      	movs	r3, #2
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2300      	movs	r3, #0
 8000e06:	2237      	movs	r2, #55	; 0x37
 8000e08:	210a      	movs	r1, #10
 8000e0a:	4893      	ldr	r0, [pc, #588]	; (8001058 <_DrawFreqSelectMenu+0x814>)
 8000e0c:	f009 f8c6 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8000e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	2302      	movs	r3, #2
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	224b      	movs	r2, #75	; 0x4b
 8000e1e:	210a      	movs	r1, #10
 8000e20:	488e      	ldr	r0, [pc, #568]	; (800105c <_DrawFreqSelectMenu+0x818>)
 8000e22:	f009 f8bb 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8000e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2300      	movs	r3, #0
 8000e32:	225f      	movs	r2, #95	; 0x5f
 8000e34:	210a      	movs	r1, #10
 8000e36:	488a      	ldr	r0, [pc, #552]	; (8001060 <_DrawFreqSelectMenu+0x81c>)
 8000e38:	f009 f8b0 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, WHITE, 2, BLACK);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	2302      	movs	r3, #2
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e48:	2273      	movs	r2, #115	; 0x73
 8000e4a:	210a      	movs	r1, #10
 8000e4c:	4885      	ldr	r0, [pc, #532]	; (8001064 <_DrawFreqSelectMenu+0x820>)
 8000e4e:	f009 f8a5 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8000e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	2302      	movs	r3, #2
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	2287      	movs	r2, #135	; 0x87
 8000e60:	210a      	movs	r1, #10
 8000e62:	4881      	ldr	r0, [pc, #516]	; (8001068 <_DrawFreqSelectMenu+0x824>)
 8000e64:	f009 f89a 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8000e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	2302      	movs	r3, #2
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2300      	movs	r3, #0
 8000e74:	229b      	movs	r2, #155	; 0x9b
 8000e76:	210a      	movs	r1, #10
 8000e78:	487c      	ldr	r0, [pc, #496]	; (800106c <_DrawFreqSelectMenu+0x828>)
 8000e7a:	f009 f88f 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8000e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	2302      	movs	r3, #2
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2223      	movs	r2, #35	; 0x23
 8000e8c:	2178      	movs	r1, #120	; 0x78
 8000e8e:	4878      	ldr	r0, [pc, #480]	; (8001070 <_DrawFreqSelectMenu+0x82c>)
 8000e90:	f009 f884 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8000e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2237      	movs	r2, #55	; 0x37
 8000ea2:	2178      	movs	r1, #120	; 0x78
 8000ea4:	4873      	ldr	r0, [pc, #460]	; (8001074 <_DrawFreqSelectMenu+0x830>)
 8000ea6:	f009 f879 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8000eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	224b      	movs	r2, #75	; 0x4b
 8000eb8:	2178      	movs	r1, #120	; 0x78
 8000eba:	486f      	ldr	r0, [pc, #444]	; (8001078 <_DrawFreqSelectMenu+0x834>)
 8000ebc:	f009 f86e 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8000ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	225f      	movs	r2, #95	; 0x5f
 8000ece:	2178      	movs	r1, #120	; 0x78
 8000ed0:	486a      	ldr	r0, [pc, #424]	; (800107c <_DrawFreqSelectMenu+0x838>)
 8000ed2:	f009 f863 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8000ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2302      	movs	r3, #2
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2273      	movs	r2, #115	; 0x73
 8000ee4:	2178      	movs	r1, #120	; 0x78
 8000ee6:	4866      	ldr	r0, [pc, #408]	; (8001080 <_DrawFreqSelectMenu+0x83c>)
 8000ee8:	f009 f858 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8000eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2287      	movs	r2, #135	; 0x87
 8000efa:	2178      	movs	r1, #120	; 0x78
 8000efc:	4861      	ldr	r0, [pc, #388]	; (8001084 <_DrawFreqSelectMenu+0x840>)
 8000efe:	f009 f84d 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8000f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	229b      	movs	r2, #155	; 0x9b
 8000f10:	2178      	movs	r1, #120	; 0x78
 8000f12:	485d      	ldr	r0, [pc, #372]	; (8001088 <_DrawFreqSelectMenu+0x844>)
 8000f14:	f009 f842 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 8000f18:	f000 bde6 	b.w	8001ae8 <_DrawFreqSelectMenu+0x12a4>
		case FPRESET_500HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8000f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	2302      	movs	r3, #2
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2300      	movs	r3, #0
 8000f28:	2223      	movs	r2, #35	; 0x23
 8000f2a:	210a      	movs	r1, #10
 8000f2c:	4849      	ldr	r0, [pc, #292]	; (8001054 <_DrawFreqSelectMenu+0x810>)
 8000f2e:	f009 f835 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8000f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2237      	movs	r2, #55	; 0x37
 8000f40:	210a      	movs	r1, #10
 8000f42:	4845      	ldr	r0, [pc, #276]	; (8001058 <_DrawFreqSelectMenu+0x814>)
 8000f44:	f009 f82a 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8000f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	2302      	movs	r3, #2
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2300      	movs	r3, #0
 8000f54:	224b      	movs	r2, #75	; 0x4b
 8000f56:	210a      	movs	r1, #10
 8000f58:	4840      	ldr	r0, [pc, #256]	; (800105c <_DrawFreqSelectMenu+0x818>)
 8000f5a:	f009 f81f 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8000f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	2302      	movs	r3, #2
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	225f      	movs	r2, #95	; 0x5f
 8000f6c:	210a      	movs	r1, #10
 8000f6e:	483c      	ldr	r0, [pc, #240]	; (8001060 <_DrawFreqSelectMenu+0x81c>)
 8000f70:	f009 f814 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8000f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2273      	movs	r2, #115	; 0x73
 8000f82:	210a      	movs	r1, #10
 8000f84:	4837      	ldr	r0, [pc, #220]	; (8001064 <_DrawFreqSelectMenu+0x820>)
 8000f86:	f009 f809 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, WHITE, 2, BLACK);
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f96:	2287      	movs	r2, #135	; 0x87
 8000f98:	210a      	movs	r1, #10
 8000f9a:	4833      	ldr	r0, [pc, #204]	; (8001068 <_DrawFreqSelectMenu+0x824>)
 8000f9c:	f008 fffe 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8000fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2300      	movs	r3, #0
 8000fac:	229b      	movs	r2, #155	; 0x9b
 8000fae:	210a      	movs	r1, #10
 8000fb0:	482e      	ldr	r0, [pc, #184]	; (800106c <_DrawFreqSelectMenu+0x828>)
 8000fb2:	f008 fff3 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8000fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2223      	movs	r2, #35	; 0x23
 8000fc4:	2178      	movs	r1, #120	; 0x78
 8000fc6:	482a      	ldr	r0, [pc, #168]	; (8001070 <_DrawFreqSelectMenu+0x82c>)
 8000fc8:	f008 ffe8 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8000fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	2237      	movs	r2, #55	; 0x37
 8000fda:	2178      	movs	r1, #120	; 0x78
 8000fdc:	4825      	ldr	r0, [pc, #148]	; (8001074 <_DrawFreqSelectMenu+0x830>)
 8000fde:	f008 ffdd 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8000fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2300      	movs	r3, #0
 8000fee:	224b      	movs	r2, #75	; 0x4b
 8000ff0:	2178      	movs	r1, #120	; 0x78
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <_DrawFreqSelectMenu+0x834>)
 8000ff4:	f008 ffd2 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8000ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2302      	movs	r3, #2
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	225f      	movs	r2, #95	; 0x5f
 8001006:	2178      	movs	r1, #120	; 0x78
 8001008:	481c      	ldr	r0, [pc, #112]	; (800107c <_DrawFreqSelectMenu+0x838>)
 800100a:	f008 ffc7 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 800100e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2302      	movs	r3, #2
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	2273      	movs	r2, #115	; 0x73
 800101c:	2178      	movs	r1, #120	; 0x78
 800101e:	4818      	ldr	r0, [pc, #96]	; (8001080 <_DrawFreqSelectMenu+0x83c>)
 8001020:	f008 ffbc 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	2302      	movs	r3, #2
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	2287      	movs	r2, #135	; 0x87
 8001032:	2178      	movs	r1, #120	; 0x78
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <_DrawFreqSelectMenu+0x840>)
 8001036:	f008 ffb1 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 800103a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	2302      	movs	r3, #2
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2300      	movs	r3, #0
 8001046:	229b      	movs	r2, #155	; 0x9b
 8001048:	2178      	movs	r1, #120	; 0x78
 800104a:	480f      	ldr	r0, [pc, #60]	; (8001088 <_DrawFreqSelectMenu+0x844>)
 800104c:	f008 ffa6 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 8001050:	f000 bd4a 	b.w	8001ae8 <_DrawFreqSelectMenu+0x12a4>
 8001054:	0800bc5c 	.word	0x0800bc5c
 8001058:	0800bc64 	.word	0x0800bc64
 800105c:	0800bc6c 	.word	0x0800bc6c
 8001060:	0800bc74 	.word	0x0800bc74
 8001064:	0800bc7c 	.word	0x0800bc7c
 8001068:	0800bc84 	.word	0x0800bc84
 800106c:	0800bc8c 	.word	0x0800bc8c
 8001070:	0800bc94 	.word	0x0800bc94
 8001074:	0800bc9c 	.word	0x0800bc9c
 8001078:	0800bca4 	.word	0x0800bca4
 800107c:	0800bcac 	.word	0x0800bcac
 8001080:	0800bcb4 	.word	0x0800bcb4
 8001084:	0800bcbc 	.word	0x0800bcbc
 8001088:	0800bcc4 	.word	0x0800bcc4
		case FPRESET_750HZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 800108c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	2302      	movs	r3, #2
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2300      	movs	r3, #0
 8001098:	2223      	movs	r2, #35	; 0x23
 800109a:	210a      	movs	r1, #10
 800109c:	4897      	ldr	r0, [pc, #604]	; (80012fc <_DrawFreqSelectMenu+0xab8>)
 800109e:	f008 ff7d 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 80010a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	2302      	movs	r3, #2
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	2237      	movs	r2, #55	; 0x37
 80010b0:	210a      	movs	r1, #10
 80010b2:	4893      	ldr	r0, [pc, #588]	; (8001300 <_DrawFreqSelectMenu+0xabc>)
 80010b4:	f008 ff72 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 80010b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	2302      	movs	r3, #2
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2300      	movs	r3, #0
 80010c4:	224b      	movs	r2, #75	; 0x4b
 80010c6:	210a      	movs	r1, #10
 80010c8:	488e      	ldr	r0, [pc, #568]	; (8001304 <_DrawFreqSelectMenu+0xac0>)
 80010ca:	f008 ff67 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 80010ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	2302      	movs	r3, #2
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2300      	movs	r3, #0
 80010da:	225f      	movs	r2, #95	; 0x5f
 80010dc:	210a      	movs	r1, #10
 80010de:	488a      	ldr	r0, [pc, #552]	; (8001308 <_DrawFreqSelectMenu+0xac4>)
 80010e0:	f008 ff5c 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 80010e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	2302      	movs	r3, #2
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2300      	movs	r3, #0
 80010f0:	2273      	movs	r2, #115	; 0x73
 80010f2:	210a      	movs	r1, #10
 80010f4:	4885      	ldr	r0, [pc, #532]	; (800130c <_DrawFreqSelectMenu+0xac8>)
 80010f6:	f008 ff51 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 80010fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	2302      	movs	r3, #2
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2300      	movs	r3, #0
 8001106:	2287      	movs	r2, #135	; 0x87
 8001108:	210a      	movs	r1, #10
 800110a:	4881      	ldr	r0, [pc, #516]	; (8001310 <_DrawFreqSelectMenu+0xacc>)
 800110c:	f008 ff46 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, WHITE, 2, BLACK);
 8001110:	2300      	movs	r3, #0
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2302      	movs	r3, #2
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111c:	229b      	movs	r2, #155	; 0x9b
 800111e:	210a      	movs	r1, #10
 8001120:	487c      	ldr	r0, [pc, #496]	; (8001314 <_DrawFreqSelectMenu+0xad0>)
 8001122:	f008 ff3b 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8001126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	2302      	movs	r3, #2
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2300      	movs	r3, #0
 8001132:	2223      	movs	r2, #35	; 0x23
 8001134:	2178      	movs	r1, #120	; 0x78
 8001136:	4878      	ldr	r0, [pc, #480]	; (8001318 <_DrawFreqSelectMenu+0xad4>)
 8001138:	f008 ff30 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 800113c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2302      	movs	r3, #2
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	2237      	movs	r2, #55	; 0x37
 800114a:	2178      	movs	r1, #120	; 0x78
 800114c:	4873      	ldr	r0, [pc, #460]	; (800131c <_DrawFreqSelectMenu+0xad8>)
 800114e:	f008 ff25 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8001152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	2302      	movs	r3, #2
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2300      	movs	r3, #0
 800115e:	224b      	movs	r2, #75	; 0x4b
 8001160:	2178      	movs	r1, #120	; 0x78
 8001162:	486f      	ldr	r0, [pc, #444]	; (8001320 <_DrawFreqSelectMenu+0xadc>)
 8001164:	f008 ff1a 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	2302      	movs	r3, #2
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	225f      	movs	r2, #95	; 0x5f
 8001176:	2178      	movs	r1, #120	; 0x78
 8001178:	486a      	ldr	r0, [pc, #424]	; (8001324 <_DrawFreqSelectMenu+0xae0>)
 800117a:	f008 ff0f 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 800117e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	2302      	movs	r3, #2
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2300      	movs	r3, #0
 800118a:	2273      	movs	r2, #115	; 0x73
 800118c:	2178      	movs	r1, #120	; 0x78
 800118e:	4866      	ldr	r0, [pc, #408]	; (8001328 <_DrawFreqSelectMenu+0xae4>)
 8001190:	f008 ff04 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	2302      	movs	r3, #2
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	2287      	movs	r2, #135	; 0x87
 80011a2:	2178      	movs	r1, #120	; 0x78
 80011a4:	4861      	ldr	r0, [pc, #388]	; (800132c <_DrawFreqSelectMenu+0xae8>)
 80011a6:	f008 fef9 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 80011aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2302      	movs	r3, #2
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2300      	movs	r3, #0
 80011b6:	229b      	movs	r2, #155	; 0x9b
 80011b8:	2178      	movs	r1, #120	; 0x78
 80011ba:	485d      	ldr	r0, [pc, #372]	; (8001330 <_DrawFreqSelectMenu+0xaec>)
 80011bc:	f008 feee 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 80011c0:	f000 bc92 	b.w	8001ae8 <_DrawFreqSelectMenu+0x12a4>
		case FPRESET_1KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 80011c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2302      	movs	r3, #2
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2300      	movs	r3, #0
 80011d0:	2223      	movs	r2, #35	; 0x23
 80011d2:	210a      	movs	r1, #10
 80011d4:	4849      	ldr	r0, [pc, #292]	; (80012fc <_DrawFreqSelectMenu+0xab8>)
 80011d6:	f008 fee1 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 80011da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	2302      	movs	r3, #2
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	2237      	movs	r2, #55	; 0x37
 80011e8:	210a      	movs	r1, #10
 80011ea:	4845      	ldr	r0, [pc, #276]	; (8001300 <_DrawFreqSelectMenu+0xabc>)
 80011ec:	f008 fed6 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 80011f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2302      	movs	r3, #2
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	224b      	movs	r2, #75	; 0x4b
 80011fe:	210a      	movs	r1, #10
 8001200:	4840      	ldr	r0, [pc, #256]	; (8001304 <_DrawFreqSelectMenu+0xac0>)
 8001202:	f008 fecb 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8001206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	2302      	movs	r3, #2
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	225f      	movs	r2, #95	; 0x5f
 8001214:	210a      	movs	r1, #10
 8001216:	483c      	ldr	r0, [pc, #240]	; (8001308 <_DrawFreqSelectMenu+0xac4>)
 8001218:	f008 fec0 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 800121c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	2302      	movs	r3, #2
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2300      	movs	r3, #0
 8001228:	2273      	movs	r2, #115	; 0x73
 800122a:	210a      	movs	r1, #10
 800122c:	4837      	ldr	r0, [pc, #220]	; (800130c <_DrawFreqSelectMenu+0xac8>)
 800122e:	f008 feb5 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8001232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	2302      	movs	r3, #2
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2300      	movs	r3, #0
 800123e:	2287      	movs	r2, #135	; 0x87
 8001240:	210a      	movs	r1, #10
 8001242:	4833      	ldr	r0, [pc, #204]	; (8001310 <_DrawFreqSelectMenu+0xacc>)
 8001244:	f008 feaa 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	2302      	movs	r3, #2
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2300      	movs	r3, #0
 8001254:	229b      	movs	r2, #155	; 0x9b
 8001256:	210a      	movs	r1, #10
 8001258:	482e      	ldr	r0, [pc, #184]	; (8001314 <_DrawFreqSelectMenu+0xad0>)
 800125a:	f008 fe9f 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, WHITE, 2, BLACK);
 800125e:	2300      	movs	r3, #0
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	2302      	movs	r3, #2
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126a:	2223      	movs	r2, #35	; 0x23
 800126c:	2178      	movs	r1, #120	; 0x78
 800126e:	482a      	ldr	r0, [pc, #168]	; (8001318 <_DrawFreqSelectMenu+0xad4>)
 8001270:	f008 fe94 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8001274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2302      	movs	r3, #2
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	2237      	movs	r2, #55	; 0x37
 8001282:	2178      	movs	r1, #120	; 0x78
 8001284:	4825      	ldr	r0, [pc, #148]	; (800131c <_DrawFreqSelectMenu+0xad8>)
 8001286:	f008 fe89 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 800128a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	2302      	movs	r3, #2
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	224b      	movs	r2, #75	; 0x4b
 8001298:	2178      	movs	r1, #120	; 0x78
 800129a:	4821      	ldr	r0, [pc, #132]	; (8001320 <_DrawFreqSelectMenu+0xadc>)
 800129c:	f008 fe7e 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 80012a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	2302      	movs	r3, #2
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2300      	movs	r3, #0
 80012ac:	225f      	movs	r2, #95	; 0x5f
 80012ae:	2178      	movs	r1, #120	; 0x78
 80012b0:	481c      	ldr	r0, [pc, #112]	; (8001324 <_DrawFreqSelectMenu+0xae0>)
 80012b2:	f008 fe73 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 80012b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2302      	movs	r3, #2
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	2273      	movs	r2, #115	; 0x73
 80012c4:	2178      	movs	r1, #120	; 0x78
 80012c6:	4818      	ldr	r0, [pc, #96]	; (8001328 <_DrawFreqSelectMenu+0xae4>)
 80012c8:	f008 fe68 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 80012cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2302      	movs	r3, #2
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	2287      	movs	r2, #135	; 0x87
 80012da:	2178      	movs	r1, #120	; 0x78
 80012dc:	4813      	ldr	r0, [pc, #76]	; (800132c <_DrawFreqSelectMenu+0xae8>)
 80012de:	f008 fe5d 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 80012e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2302      	movs	r3, #2
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	229b      	movs	r2, #155	; 0x9b
 80012f0:	2178      	movs	r1, #120	; 0x78
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <_DrawFreqSelectMenu+0xaec>)
 80012f4:	f008 fe52 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 80012f8:	e3f6      	b.n	8001ae8 <_DrawFreqSelectMenu+0x12a4>
 80012fa:	bf00      	nop
 80012fc:	0800bc5c 	.word	0x0800bc5c
 8001300:	0800bc64 	.word	0x0800bc64
 8001304:	0800bc6c 	.word	0x0800bc6c
 8001308:	0800bc74 	.word	0x0800bc74
 800130c:	0800bc7c 	.word	0x0800bc7c
 8001310:	0800bc84 	.word	0x0800bc84
 8001314:	0800bc8c 	.word	0x0800bc8c
 8001318:	0800bc94 	.word	0x0800bc94
 800131c:	0800bc9c 	.word	0x0800bc9c
 8001320:	0800bca4 	.word	0x0800bca4
 8001324:	0800bcac 	.word	0x0800bcac
 8001328:	0800bcb4 	.word	0x0800bcb4
 800132c:	0800bcbc 	.word	0x0800bcbc
 8001330:	0800bcc4 	.word	0x0800bcc4
		case FPRESET_5KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	2302      	movs	r3, #2
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	2223      	movs	r2, #35	; 0x23
 8001342:	210a      	movs	r1, #10
 8001344:	4896      	ldr	r0, [pc, #600]	; (80015a0 <_DrawFreqSelectMenu+0xd5c>)
 8001346:	f008 fe29 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 800134a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	2302      	movs	r3, #2
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2300      	movs	r3, #0
 8001356:	2237      	movs	r2, #55	; 0x37
 8001358:	210a      	movs	r1, #10
 800135a:	4892      	ldr	r0, [pc, #584]	; (80015a4 <_DrawFreqSelectMenu+0xd60>)
 800135c:	f008 fe1e 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	2302      	movs	r3, #2
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	224b      	movs	r2, #75	; 0x4b
 800136e:	210a      	movs	r1, #10
 8001370:	488d      	ldr	r0, [pc, #564]	; (80015a8 <_DrawFreqSelectMenu+0xd64>)
 8001372:	f008 fe13 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8001376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	2302      	movs	r3, #2
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2300      	movs	r3, #0
 8001382:	225f      	movs	r2, #95	; 0x5f
 8001384:	210a      	movs	r1, #10
 8001386:	4889      	ldr	r0, [pc, #548]	; (80015ac <_DrawFreqSelectMenu+0xd68>)
 8001388:	f008 fe08 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 800138c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2302      	movs	r3, #2
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	2273      	movs	r2, #115	; 0x73
 800139a:	210a      	movs	r1, #10
 800139c:	4884      	ldr	r0, [pc, #528]	; (80015b0 <_DrawFreqSelectMenu+0xd6c>)
 800139e:	f008 fdfd 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	2302      	movs	r3, #2
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2300      	movs	r3, #0
 80013ae:	2287      	movs	r2, #135	; 0x87
 80013b0:	210a      	movs	r1, #10
 80013b2:	4880      	ldr	r0, [pc, #512]	; (80015b4 <_DrawFreqSelectMenu+0xd70>)
 80013b4:	f008 fdf2 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 80013b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	2302      	movs	r3, #2
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2300      	movs	r3, #0
 80013c4:	229b      	movs	r2, #155	; 0x9b
 80013c6:	210a      	movs	r1, #10
 80013c8:	487b      	ldr	r0, [pc, #492]	; (80015b8 <_DrawFreqSelectMenu+0xd74>)
 80013ca:	f008 fde7 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 80013ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	2302      	movs	r3, #2
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2300      	movs	r3, #0
 80013da:	2223      	movs	r2, #35	; 0x23
 80013dc:	2178      	movs	r1, #120	; 0x78
 80013de:	4877      	ldr	r0, [pc, #476]	; (80015bc <_DrawFreqSelectMenu+0xd78>)
 80013e0:	f008 fddc 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, WHITE, 2, BLACK);
 80013e4:	2300      	movs	r3, #0
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	2302      	movs	r3, #2
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f0:	2237      	movs	r2, #55	; 0x37
 80013f2:	2178      	movs	r1, #120	; 0x78
 80013f4:	4872      	ldr	r0, [pc, #456]	; (80015c0 <_DrawFreqSelectMenu+0xd7c>)
 80013f6:	f008 fdd1 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 80013fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2302      	movs	r3, #2
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	224b      	movs	r2, #75	; 0x4b
 8001408:	2178      	movs	r1, #120	; 0x78
 800140a:	486e      	ldr	r0, [pc, #440]	; (80015c4 <_DrawFreqSelectMenu+0xd80>)
 800140c:	f008 fdc6 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	2302      	movs	r3, #2
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2300      	movs	r3, #0
 800141c:	225f      	movs	r2, #95	; 0x5f
 800141e:	2178      	movs	r1, #120	; 0x78
 8001420:	4869      	ldr	r0, [pc, #420]	; (80015c8 <_DrawFreqSelectMenu+0xd84>)
 8001422:	f008 fdbb 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8001426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	2302      	movs	r3, #2
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2300      	movs	r3, #0
 8001432:	2273      	movs	r2, #115	; 0x73
 8001434:	2178      	movs	r1, #120	; 0x78
 8001436:	4865      	ldr	r0, [pc, #404]	; (80015cc <_DrawFreqSelectMenu+0xd88>)
 8001438:	f008 fdb0 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 800143c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2302      	movs	r3, #2
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	2287      	movs	r2, #135	; 0x87
 800144a:	2178      	movs	r1, #120	; 0x78
 800144c:	4860      	ldr	r0, [pc, #384]	; (80015d0 <_DrawFreqSelectMenu+0xd8c>)
 800144e:	f008 fda5 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8001452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	2302      	movs	r3, #2
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	229b      	movs	r2, #155	; 0x9b
 8001460:	2178      	movs	r1, #120	; 0x78
 8001462:	485c      	ldr	r0, [pc, #368]	; (80015d4 <_DrawFreqSelectMenu+0xd90>)
 8001464:	f008 fd9a 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 8001468:	e33e      	b.n	8001ae8 <_DrawFreqSelectMenu+0x12a4>
		case FPRESET_10KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 800146a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	2302      	movs	r3, #2
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2300      	movs	r3, #0
 8001476:	2223      	movs	r2, #35	; 0x23
 8001478:	210a      	movs	r1, #10
 800147a:	4849      	ldr	r0, [pc, #292]	; (80015a0 <_DrawFreqSelectMenu+0xd5c>)
 800147c:	f008 fd8e 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	2302      	movs	r3, #2
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	2237      	movs	r2, #55	; 0x37
 800148e:	210a      	movs	r1, #10
 8001490:	4844      	ldr	r0, [pc, #272]	; (80015a4 <_DrawFreqSelectMenu+0xd60>)
 8001492:	f008 fd83 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	2302      	movs	r3, #2
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	224b      	movs	r2, #75	; 0x4b
 80014a4:	210a      	movs	r1, #10
 80014a6:	4840      	ldr	r0, [pc, #256]	; (80015a8 <_DrawFreqSelectMenu+0xd64>)
 80014a8:	f008 fd78 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 80014ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	2302      	movs	r3, #2
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	225f      	movs	r2, #95	; 0x5f
 80014ba:	210a      	movs	r1, #10
 80014bc:	483b      	ldr	r0, [pc, #236]	; (80015ac <_DrawFreqSelectMenu+0xd68>)
 80014be:	f008 fd6d 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 80014c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	2302      	movs	r3, #2
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2300      	movs	r3, #0
 80014ce:	2273      	movs	r2, #115	; 0x73
 80014d0:	210a      	movs	r1, #10
 80014d2:	4837      	ldr	r0, [pc, #220]	; (80015b0 <_DrawFreqSelectMenu+0xd6c>)
 80014d4:	f008 fd62 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 80014d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2302      	movs	r3, #2
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	2287      	movs	r2, #135	; 0x87
 80014e6:	210a      	movs	r1, #10
 80014e8:	4832      	ldr	r0, [pc, #200]	; (80015b4 <_DrawFreqSelectMenu+0xd70>)
 80014ea:	f008 fd57 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 80014ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	2302      	movs	r3, #2
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2300      	movs	r3, #0
 80014fa:	229b      	movs	r2, #155	; 0x9b
 80014fc:	210a      	movs	r1, #10
 80014fe:	482e      	ldr	r0, [pc, #184]	; (80015b8 <_DrawFreqSelectMenu+0xd74>)
 8001500:	f008 fd4c 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8001504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	2302      	movs	r3, #2
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	2223      	movs	r2, #35	; 0x23
 8001512:	2178      	movs	r1, #120	; 0x78
 8001514:	4829      	ldr	r0, [pc, #164]	; (80015bc <_DrawFreqSelectMenu+0xd78>)
 8001516:	f008 fd41 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 800151a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	2302      	movs	r3, #2
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2300      	movs	r3, #0
 8001526:	2237      	movs	r2, #55	; 0x37
 8001528:	2178      	movs	r1, #120	; 0x78
 800152a:	4825      	ldr	r0, [pc, #148]	; (80015c0 <_DrawFreqSelectMenu+0xd7c>)
 800152c:	f008 fd36 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, WHITE, 2, BLACK);
 8001530:	2300      	movs	r3, #0
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	2302      	movs	r3, #2
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153c:	224b      	movs	r2, #75	; 0x4b
 800153e:	2178      	movs	r1, #120	; 0x78
 8001540:	4820      	ldr	r0, [pc, #128]	; (80015c4 <_DrawFreqSelectMenu+0xd80>)
 8001542:	f008 fd2b 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	2302      	movs	r3, #2
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2300      	movs	r3, #0
 8001552:	225f      	movs	r2, #95	; 0x5f
 8001554:	2178      	movs	r1, #120	; 0x78
 8001556:	481c      	ldr	r0, [pc, #112]	; (80015c8 <_DrawFreqSelectMenu+0xd84>)
 8001558:	f008 fd20 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 800155c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	2302      	movs	r3, #2
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2300      	movs	r3, #0
 8001568:	2273      	movs	r2, #115	; 0x73
 800156a:	2178      	movs	r1, #120	; 0x78
 800156c:	4817      	ldr	r0, [pc, #92]	; (80015cc <_DrawFreqSelectMenu+0xd88>)
 800156e:	f008 fd15 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	2302      	movs	r3, #2
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2300      	movs	r3, #0
 800157e:	2287      	movs	r2, #135	; 0x87
 8001580:	2178      	movs	r1, #120	; 0x78
 8001582:	4813      	ldr	r0, [pc, #76]	; (80015d0 <_DrawFreqSelectMenu+0xd8c>)
 8001584:	f008 fd0a 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 8001588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	2302      	movs	r3, #2
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2300      	movs	r3, #0
 8001594:	229b      	movs	r2, #155	; 0x9b
 8001596:	2178      	movs	r1, #120	; 0x78
 8001598:	480e      	ldr	r0, [pc, #56]	; (80015d4 <_DrawFreqSelectMenu+0xd90>)
 800159a:	f008 fcff 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 800159e:	e2a3      	b.n	8001ae8 <_DrawFreqSelectMenu+0x12a4>
 80015a0:	0800bc5c 	.word	0x0800bc5c
 80015a4:	0800bc64 	.word	0x0800bc64
 80015a8:	0800bc6c 	.word	0x0800bc6c
 80015ac:	0800bc74 	.word	0x0800bc74
 80015b0:	0800bc7c 	.word	0x0800bc7c
 80015b4:	0800bc84 	.word	0x0800bc84
 80015b8:	0800bc8c 	.word	0x0800bc8c
 80015bc:	0800bc94 	.word	0x0800bc94
 80015c0:	0800bc9c 	.word	0x0800bc9c
 80015c4:	0800bca4 	.word	0x0800bca4
 80015c8:	0800bcac 	.word	0x0800bcac
 80015cc:	0800bcb4 	.word	0x0800bcb4
 80015d0:	0800bcbc 	.word	0x0800bcbc
 80015d4:	0800bcc4 	.word	0x0800bcc4
		case FPRESET_25KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 80015d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	2302      	movs	r3, #2
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2300      	movs	r3, #0
 80015e4:	2223      	movs	r2, #35	; 0x23
 80015e6:	210a      	movs	r1, #10
 80015e8:	4896      	ldr	r0, [pc, #600]	; (8001844 <_DrawFreqSelectMenu+0x1000>)
 80015ea:	f008 fcd7 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 80015ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	2302      	movs	r3, #2
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	2237      	movs	r2, #55	; 0x37
 80015fc:	210a      	movs	r1, #10
 80015fe:	4892      	ldr	r0, [pc, #584]	; (8001848 <_DrawFreqSelectMenu+0x1004>)
 8001600:	f008 fccc 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 8001604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	2302      	movs	r3, #2
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	224b      	movs	r2, #75	; 0x4b
 8001612:	210a      	movs	r1, #10
 8001614:	488d      	ldr	r0, [pc, #564]	; (800184c <_DrawFreqSelectMenu+0x1008>)
 8001616:	f008 fcc1 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 800161a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	2302      	movs	r3, #2
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2300      	movs	r3, #0
 8001626:	225f      	movs	r2, #95	; 0x5f
 8001628:	210a      	movs	r1, #10
 800162a:	4889      	ldr	r0, [pc, #548]	; (8001850 <_DrawFreqSelectMenu+0x100c>)
 800162c:	f008 fcb6 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8001630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	2302      	movs	r3, #2
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	2273      	movs	r2, #115	; 0x73
 800163e:	210a      	movs	r1, #10
 8001640:	4884      	ldr	r0, [pc, #528]	; (8001854 <_DrawFreqSelectMenu+0x1010>)
 8001642:	f008 fcab 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8001646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	2302      	movs	r3, #2
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2300      	movs	r3, #0
 8001652:	2287      	movs	r2, #135	; 0x87
 8001654:	210a      	movs	r1, #10
 8001656:	4880      	ldr	r0, [pc, #512]	; (8001858 <_DrawFreqSelectMenu+0x1014>)
 8001658:	f008 fca0 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 800165c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	2302      	movs	r3, #2
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	229b      	movs	r2, #155	; 0x9b
 800166a:	210a      	movs	r1, #10
 800166c:	487b      	ldr	r0, [pc, #492]	; (800185c <_DrawFreqSelectMenu+0x1018>)
 800166e:	f008 fc95 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8001672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2302      	movs	r3, #2
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	2223      	movs	r2, #35	; 0x23
 8001680:	2178      	movs	r1, #120	; 0x78
 8001682:	4877      	ldr	r0, [pc, #476]	; (8001860 <_DrawFreqSelectMenu+0x101c>)
 8001684:	f008 fc8a 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8001688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2302      	movs	r3, #2
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	2237      	movs	r2, #55	; 0x37
 8001696:	2178      	movs	r1, #120	; 0x78
 8001698:	4872      	ldr	r0, [pc, #456]	; (8001864 <_DrawFreqSelectMenu+0x1020>)
 800169a:	f008 fc7f 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 800169e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2302      	movs	r3, #2
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	224b      	movs	r2, #75	; 0x4b
 80016ac:	2178      	movs	r1, #120	; 0x78
 80016ae:	486e      	ldr	r0, [pc, #440]	; (8001868 <_DrawFreqSelectMenu+0x1024>)
 80016b0:	f008 fc74 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, WHITE, 2, BLACK);
 80016b4:	2300      	movs	r3, #0
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	2302      	movs	r3, #2
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c0:	225f      	movs	r2, #95	; 0x5f
 80016c2:	2178      	movs	r1, #120	; 0x78
 80016c4:	4869      	ldr	r0, [pc, #420]	; (800186c <_DrawFreqSelectMenu+0x1028>)
 80016c6:	f008 fc69 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 80016ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	2302      	movs	r3, #2
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2300      	movs	r3, #0
 80016d6:	2273      	movs	r2, #115	; 0x73
 80016d8:	2178      	movs	r1, #120	; 0x78
 80016da:	4865      	ldr	r0, [pc, #404]	; (8001870 <_DrawFreqSelectMenu+0x102c>)
 80016dc:	f008 fc5e 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 80016e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	2302      	movs	r3, #2
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	2287      	movs	r2, #135	; 0x87
 80016ee:	2178      	movs	r1, #120	; 0x78
 80016f0:	4860      	ldr	r0, [pc, #384]	; (8001874 <_DrawFreqSelectMenu+0x1030>)
 80016f2:	f008 fc53 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 80016f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	2302      	movs	r3, #2
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	229b      	movs	r2, #155	; 0x9b
 8001704:	2178      	movs	r1, #120	; 0x78
 8001706:	485c      	ldr	r0, [pc, #368]	; (8001878 <_DrawFreqSelectMenu+0x1034>)
 8001708:	f008 fc48 	bl	8009f9c <ILI9341_Draw_Text>
			break;
 800170c:	e1ec      	b.n	8001ae8 <_DrawFreqSelectMenu+0x12a4>
		case FPRESET_50KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 800170e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2302      	movs	r3, #2
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	2223      	movs	r2, #35	; 0x23
 800171c:	210a      	movs	r1, #10
 800171e:	4849      	ldr	r0, [pc, #292]	; (8001844 <_DrawFreqSelectMenu+0x1000>)
 8001720:	f008 fc3c 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	2302      	movs	r3, #2
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	2237      	movs	r2, #55	; 0x37
 8001732:	210a      	movs	r1, #10
 8001734:	4844      	ldr	r0, [pc, #272]	; (8001848 <_DrawFreqSelectMenu+0x1004>)
 8001736:	f008 fc31 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 800173a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2302      	movs	r3, #2
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	224b      	movs	r2, #75	; 0x4b
 8001748:	210a      	movs	r1, #10
 800174a:	4840      	ldr	r0, [pc, #256]	; (800184c <_DrawFreqSelectMenu+0x1008>)
 800174c:	f008 fc26 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 8001750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	2302      	movs	r3, #2
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	225f      	movs	r2, #95	; 0x5f
 800175e:	210a      	movs	r1, #10
 8001760:	483b      	ldr	r0, [pc, #236]	; (8001850 <_DrawFreqSelectMenu+0x100c>)
 8001762:	f008 fc1b 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8001766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	2273      	movs	r2, #115	; 0x73
 8001774:	210a      	movs	r1, #10
 8001776:	4837      	ldr	r0, [pc, #220]	; (8001854 <_DrawFreqSelectMenu+0x1010>)
 8001778:	f008 fc10 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 800177c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	2302      	movs	r3, #2
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2300      	movs	r3, #0
 8001788:	2287      	movs	r2, #135	; 0x87
 800178a:	210a      	movs	r1, #10
 800178c:	4832      	ldr	r0, [pc, #200]	; (8001858 <_DrawFreqSelectMenu+0x1014>)
 800178e:	f008 fc05 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	2302      	movs	r3, #2
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	229b      	movs	r2, #155	; 0x9b
 80017a0:	210a      	movs	r1, #10
 80017a2:	482e      	ldr	r0, [pc, #184]	; (800185c <_DrawFreqSelectMenu+0x1018>)
 80017a4:	f008 fbfa 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 80017a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2302      	movs	r3, #2
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2300      	movs	r3, #0
 80017b4:	2223      	movs	r2, #35	; 0x23
 80017b6:	2178      	movs	r1, #120	; 0x78
 80017b8:	4829      	ldr	r0, [pc, #164]	; (8001860 <_DrawFreqSelectMenu+0x101c>)
 80017ba:	f008 fbef 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 80017be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2300      	movs	r3, #0
 80017ca:	2237      	movs	r2, #55	; 0x37
 80017cc:	2178      	movs	r1, #120	; 0x78
 80017ce:	4825      	ldr	r0, [pc, #148]	; (8001864 <_DrawFreqSelectMenu+0x1020>)
 80017d0:	f008 fbe4 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 80017d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	2302      	movs	r3, #2
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	224b      	movs	r2, #75	; 0x4b
 80017e2:	2178      	movs	r1, #120	; 0x78
 80017e4:	4820      	ldr	r0, [pc, #128]	; (8001868 <_DrawFreqSelectMenu+0x1024>)
 80017e6:	f008 fbd9 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 80017ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	225f      	movs	r2, #95	; 0x5f
 80017f8:	2178      	movs	r1, #120	; 0x78
 80017fa:	481c      	ldr	r0, [pc, #112]	; (800186c <_DrawFreqSelectMenu+0x1028>)
 80017fc:	f008 fbce 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, WHITE, 2, BLACK);
 8001800:	2300      	movs	r3, #0
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	2302      	movs	r3, #2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180c:	2273      	movs	r2, #115	; 0x73
 800180e:	2178      	movs	r1, #120	; 0x78
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <_DrawFreqSelectMenu+0x102c>)
 8001812:	f008 fbc3 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	2287      	movs	r2, #135	; 0x87
 8001824:	2178      	movs	r1, #120	; 0x78
 8001826:	4813      	ldr	r0, [pc, #76]	; (8001874 <_DrawFreqSelectMenu+0x1030>)
 8001828:	f008 fbb8 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 800182c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	2302      	movs	r3, #2
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	229b      	movs	r2, #155	; 0x9b
 800183a:	2178      	movs	r1, #120	; 0x78
 800183c:	480e      	ldr	r0, [pc, #56]	; (8001878 <_DrawFreqSelectMenu+0x1034>)
 800183e:	f008 fbad 	bl	8009f9c <ILI9341_Draw_Text>
		break;
 8001842:	e151      	b.n	8001ae8 <_DrawFreqSelectMenu+0x12a4>
 8001844:	0800bc5c 	.word	0x0800bc5c
 8001848:	0800bc64 	.word	0x0800bc64
 800184c:	0800bc6c 	.word	0x0800bc6c
 8001850:	0800bc74 	.word	0x0800bc74
 8001854:	0800bc7c 	.word	0x0800bc7c
 8001858:	0800bc84 	.word	0x0800bc84
 800185c:	0800bc8c 	.word	0x0800bc8c
 8001860:	0800bc94 	.word	0x0800bc94
 8001864:	0800bc9c 	.word	0x0800bc9c
 8001868:	0800bca4 	.word	0x0800bca4
 800186c:	0800bcac 	.word	0x0800bcac
 8001870:	0800bcb4 	.word	0x0800bcb4
 8001874:	0800bcbc 	.word	0x0800bcbc
 8001878:	0800bcc4 	.word	0x0800bcc4
		case FPRESET_75KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 800187c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	2302      	movs	r3, #2
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	2223      	movs	r2, #35	; 0x23
 800188a:	210a      	movs	r1, #10
 800188c:	4898      	ldr	r0, [pc, #608]	; (8001af0 <_DrawFreqSelectMenu+0x12ac>)
 800188e:	f008 fb85 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 8001892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2302      	movs	r3, #2
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2300      	movs	r3, #0
 800189e:	2237      	movs	r2, #55	; 0x37
 80018a0:	210a      	movs	r1, #10
 80018a2:	4894      	ldr	r0, [pc, #592]	; (8001af4 <_DrawFreqSelectMenu+0x12b0>)
 80018a4:	f008 fb7a 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 80018a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	2302      	movs	r3, #2
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	224b      	movs	r2, #75	; 0x4b
 80018b6:	210a      	movs	r1, #10
 80018b8:	488f      	ldr	r0, [pc, #572]	; (8001af8 <_DrawFreqSelectMenu+0x12b4>)
 80018ba:	f008 fb6f 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 80018be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2300      	movs	r3, #0
 80018ca:	225f      	movs	r2, #95	; 0x5f
 80018cc:	210a      	movs	r1, #10
 80018ce:	488b      	ldr	r0, [pc, #556]	; (8001afc <_DrawFreqSelectMenu+0x12b8>)
 80018d0:	f008 fb64 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 80018d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	2302      	movs	r3, #2
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	2273      	movs	r2, #115	; 0x73
 80018e2:	210a      	movs	r1, #10
 80018e4:	4886      	ldr	r0, [pc, #536]	; (8001b00 <_DrawFreqSelectMenu+0x12bc>)
 80018e6:	f008 fb59 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 80018ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	2302      	movs	r3, #2
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	2287      	movs	r2, #135	; 0x87
 80018f8:	210a      	movs	r1, #10
 80018fa:	4882      	ldr	r0, [pc, #520]	; (8001b04 <_DrawFreqSelectMenu+0x12c0>)
 80018fc:	f008 fb4e 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2302      	movs	r3, #2
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	229b      	movs	r2, #155	; 0x9b
 800190e:	210a      	movs	r1, #10
 8001910:	487d      	ldr	r0, [pc, #500]	; (8001b08 <_DrawFreqSelectMenu+0x12c4>)
 8001912:	f008 fb43 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8001916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2300      	movs	r3, #0
 8001922:	2223      	movs	r2, #35	; 0x23
 8001924:	2178      	movs	r1, #120	; 0x78
 8001926:	4879      	ldr	r0, [pc, #484]	; (8001b0c <_DrawFreqSelectMenu+0x12c8>)
 8001928:	f008 fb38 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 800192c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	2302      	movs	r3, #2
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2300      	movs	r3, #0
 8001938:	2237      	movs	r2, #55	; 0x37
 800193a:	2178      	movs	r1, #120	; 0x78
 800193c:	4874      	ldr	r0, [pc, #464]	; (8001b10 <_DrawFreqSelectMenu+0x12cc>)
 800193e:	f008 fb2d 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8001942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	2302      	movs	r3, #2
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2300      	movs	r3, #0
 800194e:	224b      	movs	r2, #75	; 0x4b
 8001950:	2178      	movs	r1, #120	; 0x78
 8001952:	4870      	ldr	r0, [pc, #448]	; (8001b14 <_DrawFreqSelectMenu+0x12d0>)
 8001954:	f008 fb22 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	2302      	movs	r3, #2
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	225f      	movs	r2, #95	; 0x5f
 8001966:	2178      	movs	r1, #120	; 0x78
 8001968:	486b      	ldr	r0, [pc, #428]	; (8001b18 <_DrawFreqSelectMenu+0x12d4>)
 800196a:	f008 fb17 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 800196e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2302      	movs	r3, #2
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2300      	movs	r3, #0
 800197a:	2273      	movs	r2, #115	; 0x73
 800197c:	2178      	movs	r1, #120	; 0x78
 800197e:	4867      	ldr	r0, [pc, #412]	; (8001b1c <_DrawFreqSelectMenu+0x12d8>)
 8001980:	f008 fb0c 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, WHITE, 2, BLACK);
 8001984:	2300      	movs	r3, #0
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001990:	2287      	movs	r2, #135	; 0x87
 8001992:	2178      	movs	r1, #120	; 0x78
 8001994:	4862      	ldr	r0, [pc, #392]	; (8001b20 <_DrawFreqSelectMenu+0x12dc>)
 8001996:	f008 fb01 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, BLACK, 2, WHITE);
 800199a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	229b      	movs	r2, #155	; 0x9b
 80019a8:	2178      	movs	r1, #120	; 0x78
 80019aa:	485e      	ldr	r0, [pc, #376]	; (8001b24 <_DrawFreqSelectMenu+0x12e0>)
 80019ac:	f008 faf6 	bl	8009f9c <ILI9341_Draw_Text>
		break;
 80019b0:	e09a      	b.n	8001ae8 <_DrawFreqSelectMenu+0x12a4>
		case FPRESET_100KHZ:
			ILI9341_Draw_Text("- 1Hz", 		10, 35, BLACK, 2, WHITE);
 80019b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2302      	movs	r3, #2
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	2223      	movs	r2, #35	; 0x23
 80019c0:	210a      	movs	r1, #10
 80019c2:	484b      	ldr	r0, [pc, #300]	; (8001af0 <_DrawFreqSelectMenu+0x12ac>)
 80019c4:	f008 faea 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10Hz", 	10, 55, BLACK, 2, WHITE);
 80019c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	2237      	movs	r2, #55	; 0x37
 80019d6:	210a      	movs	r1, #10
 80019d8:	4846      	ldr	r0, [pc, #280]	; (8001af4 <_DrawFreqSelectMenu+0x12b0>)
 80019da:	f008 fadf 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50Hz", 	10, 75, BLACK, 2, WHITE);
 80019de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2300      	movs	r3, #0
 80019ea:	224b      	movs	r2, #75	; 0x4b
 80019ec:	210a      	movs	r1, #10
 80019ee:	4842      	ldr	r0, [pc, #264]	; (8001af8 <_DrawFreqSelectMenu+0x12b4>)
 80019f0:	f008 fad4 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100Hz", 	10, 95, BLACK, 2, WHITE);
 80019f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	2302      	movs	r3, #2
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2300      	movs	r3, #0
 8001a00:	225f      	movs	r2, #95	; 0x5f
 8001a02:	210a      	movs	r1, #10
 8001a04:	483d      	ldr	r0, [pc, #244]	; (8001afc <_DrawFreqSelectMenu+0x12b8>)
 8001a06:	f008 fac9 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 250Hz", 	10, 115, BLACK, 2, WHITE);
 8001a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2302      	movs	r3, #2
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2300      	movs	r3, #0
 8001a16:	2273      	movs	r2, #115	; 0x73
 8001a18:	210a      	movs	r1, #10
 8001a1a:	4839      	ldr	r0, [pc, #228]	; (8001b00 <_DrawFreqSelectMenu+0x12bc>)
 8001a1c:	f008 fabe 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 500Hz",	10, 135, BLACK, 2, WHITE);
 8001a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	2302      	movs	r3, #2
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2287      	movs	r2, #135	; 0x87
 8001a2e:	210a      	movs	r1, #10
 8001a30:	4834      	ldr	r0, [pc, #208]	; (8001b04 <_DrawFreqSelectMenu+0x12c0>)
 8001a32:	f008 fab3 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 750Hz", 	10, 155, BLACK, 2, WHITE);
 8001a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	229b      	movs	r2, #155	; 0x9b
 8001a44:	210a      	movs	r1, #10
 8001a46:	4830      	ldr	r0, [pc, #192]	; (8001b08 <_DrawFreqSelectMenu+0x12c4>)
 8001a48:	f008 faa8 	bl	8009f9c <ILI9341_Draw_Text>

			ILI9341_Draw_Text("- 1KHz", 	120, 35, BLACK, 2, WHITE);
 8001a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2302      	movs	r3, #2
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	2223      	movs	r2, #35	; 0x23
 8001a5a:	2178      	movs	r1, #120	; 0x78
 8001a5c:	482b      	ldr	r0, [pc, #172]	; (8001b0c <_DrawFreqSelectMenu+0x12c8>)
 8001a5e:	f008 fa9d 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 5KHz", 	120, 55, BLACK, 2, WHITE);
 8001a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	2302      	movs	r3, #2
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2237      	movs	r2, #55	; 0x37
 8001a70:	2178      	movs	r1, #120	; 0x78
 8001a72:	4827      	ldr	r0, [pc, #156]	; (8001b10 <_DrawFreqSelectMenu+0x12cc>)
 8001a74:	f008 fa92 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 10KHz", 	120, 75, BLACK, 2, WHITE);
 8001a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	224b      	movs	r2, #75	; 0x4b
 8001a86:	2178      	movs	r1, #120	; 0x78
 8001a88:	4822      	ldr	r0, [pc, #136]	; (8001b14 <_DrawFreqSelectMenu+0x12d0>)
 8001a8a:	f008 fa87 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 25KHz", 	120, 95, BLACK, 2, WHITE);
 8001a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2302      	movs	r3, #2
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	225f      	movs	r2, #95	; 0x5f
 8001a9c:	2178      	movs	r1, #120	; 0x78
 8001a9e:	481e      	ldr	r0, [pc, #120]	; (8001b18 <_DrawFreqSelectMenu+0x12d4>)
 8001aa0:	f008 fa7c 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 50KHz", 	120, 115, BLACK, 2, WHITE);
 8001aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	2302      	movs	r3, #2
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2273      	movs	r2, #115	; 0x73
 8001ab2:	2178      	movs	r1, #120	; 0x78
 8001ab4:	4819      	ldr	r0, [pc, #100]	; (8001b1c <_DrawFreqSelectMenu+0x12d8>)
 8001ab6:	f008 fa71 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 75KHz",	120, 135, BLACK, 2, WHITE);
 8001aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2287      	movs	r2, #135	; 0x87
 8001ac8:	2178      	movs	r1, #120	; 0x78
 8001aca:	4815      	ldr	r0, [pc, #84]	; (8001b20 <_DrawFreqSelectMenu+0x12dc>)
 8001acc:	f008 fa66 	bl	8009f9c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- 100KHz", 	120, 155, WHITE, 2, BLACK);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001adc:	229b      	movs	r2, #155	; 0x9b
 8001ade:	2178      	movs	r1, #120	; 0x78
 8001ae0:	4810      	ldr	r0, [pc, #64]	; (8001b24 <_DrawFreqSelectMenu+0x12e0>)
 8001ae2:	f008 fa5b 	bl	8009f9c <ILI9341_Draw_Text>
		break;
 8001ae6:	bf00      	nop

	}
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	0800bc5c 	.word	0x0800bc5c
 8001af4:	0800bc64 	.word	0x0800bc64
 8001af8:	0800bc6c 	.word	0x0800bc6c
 8001afc:	0800bc74 	.word	0x0800bc74
 8001b00:	0800bc7c 	.word	0x0800bc7c
 8001b04:	0800bc84 	.word	0x0800bc84
 8001b08:	0800bc8c 	.word	0x0800bc8c
 8001b0c:	0800bc94 	.word	0x0800bc94
 8001b10:	0800bc9c 	.word	0x0800bc9c
 8001b14:	0800bca4 	.word	0x0800bca4
 8001b18:	0800bcac 	.word	0x0800bcac
 8001b1c:	0800bcb4 	.word	0x0800bcb4
 8001b20:	0800bcbc 	.word	0x0800bcbc
 8001b24:	0800bcc4 	.word	0x0800bcc4

08001b28 <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <DM_ShowBiasSelectMenu+0x1c>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	7013      	strb	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	200010e7 	.word	0x200010e7

08001b48 <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 8001b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	2302      	movs	r3, #2
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2278      	movs	r2, #120	; 0x78
 8001b5c:	210a      	movs	r1, #10
 8001b5e:	4823      	ldr	r0, [pc, #140]	; (8001bec <_DrawBiasSelectMenu+0xa4>)
 8001b60:	f008 fa1c 	bl	8009f9c <ILI9341_Draw_Text>

	char bias[5] = "";
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	733b      	strb	r3, [r7, #12]
	//snprintf(bias, sizeof(bias), "%u", (uint8_t)BO_GetOutputBias());
	if(DM_AddDigitPadding((uint16_t)BO_GetOutputBias(), bias, sizeof(bias)) == 0)
 8001b6c:	f000 fb72 	bl	8002254 <BO_GetOutputBias>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	f107 0108 	add.w	r1, r7, #8
 8001b78:	2205      	movs	r2, #5
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f8a8 	bl	8001cd0 <DM_AddDigitPadding>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d12d      	bne.n	8001be2 <_DrawBiasSelectMenu+0x9a>
	{
		if(BO_GetBiasPolarity())
 8001b86:	f000 fb13 	bl	80021b0 <BO_GetBiasPolarity>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d014      	beq.n	8001bba <_DrawBiasSelectMenu+0x72>
		{
			char symbol[2] = "+\0";
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <_DrawBiasSelectMenu+0xa8>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	80bb      	strh	r3, [r7, #4]
			//char test[10] = strcat(symbol, "10");
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 8001b96:	f107 0208 	add.w	r2, r7, #8
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f009 f8c6 	bl	800ad30 <strcat>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb0:	2278      	movs	r2, #120	; 0x78
 8001bb2:	21fa      	movs	r1, #250	; 0xfa
 8001bb4:	f008 f9f2 	bl	8009f9c <ILI9341_Draw_Text>
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
		}
	}

}
 8001bb8:	e013      	b.n	8001be2 <_DrawBiasSelectMenu+0x9a>
			char symbol[2] = "-\0";
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <_DrawBiasSelectMenu+0xac>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	803b      	strh	r3, [r7, #0]
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f009 f8b1 	bl	800ad30 <strcat>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bda:	2278      	movs	r2, #120	; 0x78
 8001bdc:	21fa      	movs	r1, #250	; 0xfa
 8001bde:	f008 f9dd 	bl	8009f9c <ILI9341_Draw_Text>
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0800bcd0 	.word	0x0800bcd0
 8001bf0:	0800bce8 	.word	0x0800bce8
 8001bf4:	0800bcec 	.word	0x0800bcec

08001bf8 <DM_DigitCount>:
 *
 *
 *
 */
int DM_DigitCount(int num)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	if(num < 10)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b09      	cmp	r3, #9
 8001c04:	dc01      	bgt.n	8001c0a <DM_DigitCount+0x12>
		return 1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e018      	b.n	8001c3c <DM_DigitCount+0x44>
	if(num < 100)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b63      	cmp	r3, #99	; 0x63
 8001c0e:	dc01      	bgt.n	8001c14 <DM_DigitCount+0x1c>
		return 2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	e013      	b.n	8001c3c <DM_DigitCount+0x44>
	if(num < 1000)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1a:	da01      	bge.n	8001c20 <DM_DigitCount+0x28>
		return 3;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e00d      	b.n	8001c3c <DM_DigitCount+0x44>
	if(num < 10000)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c26:	4293      	cmp	r3, r2
 8001c28:	dc01      	bgt.n	8001c2e <DM_DigitCount+0x36>
		return 4;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e006      	b.n	8001c3c <DM_DigitCount+0x44>
	if(num < 100000)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <DM_DigitCount+0x50>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	dc01      	bgt.n	8001c3a <DM_DigitCount+0x42>
		return 5;
 8001c36:	2305      	movs	r3, #5
 8001c38:	e000      	b.n	8001c3c <DM_DigitCount+0x44>
	else
		return 0;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	0001869f 	.word	0x0001869f

08001c4c <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 8001c52:	f008 f9d1 	bl	8009ff8 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <DM_RefreshBackgroundLayout+0x80>)
 8001c58:	8818      	ldrh	r0, [r3, #0]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2332      	movs	r3, #50	; 0x32
 8001c6a:	2250      	movs	r2, #80	; 0x50
 8001c6c:	21c8      	movs	r1, #200	; 0xc8
 8001c6e:	f008 f82b 	bl	8009cc8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <DM_RefreshBackgroundLayout+0x80>)
 8001c74:	8858      	ldrh	r0, [r3, #2]
 8001c76:	2300      	movs	r3, #0
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2332      	movs	r3, #50	; 0x32
 8001c86:	2250      	movs	r2, #80	; 0x50
 8001c88:	21c8      	movs	r1, #200	; 0xc8
 8001c8a:	f008 f81d 	bl	8009cc8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <DM_RefreshBackgroundLayout+0x80>)
 8001c90:	8898      	ldrh	r0, [r3, #4]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2332      	movs	r3, #50	; 0x32
 8001ca2:	2250      	movs	r2, #80	; 0x50
 8001ca4:	21c8      	movs	r1, #200	; 0xc8
 8001ca6:	f008 f80f 	bl	8009cc8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <DM_RefreshBackgroundLayout+0x80>)
 8001cac:	88d8      	ldrh	r0, [r3, #6]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2332      	movs	r3, #50	; 0x32
 8001cbe:	2250      	movs	r2, #80	; 0x50
 8001cc0:	21c8      	movs	r1, #200	; 0xc8
 8001cc2:	f008 f801 	bl	8009cc8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <DM_AddDigitPadding>:
 *				1 if buflen is invalid size
 *				2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	80fb      	strh	r3, [r7, #6]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8001ce0:	88bb      	ldrh	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <DM_AddDigitPadding+0x1c>
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	2b06      	cmp	r3, #6
 8001cea:	d901      	bls.n	8001cf0 <DM_AddDigitPadding+0x20>
		return 1;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e048      	b.n	8001d82 <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8001cf4:	89fb      	ldrh	r3, [r7, #14]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff7e 	bl	8001bf8 <DM_DigitCount>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d83e      	bhi.n	8001d80 <DM_AddDigitPadding+0xb0>
 8001d02:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <DM_AddDigitPadding+0x38>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d21 	.word	0x08001d21
 8001d0c:	08001d31 	.word	0x08001d31
 8001d10:	08001d41 	.word	0x08001d41
 8001d14:	08001d51 	.word	0x08001d51
 8001d18:	08001d61 	.word	0x08001d61
 8001d1c:	08001d71 	.word	0x08001d71
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8001d20:	88bb      	ldrh	r3, [r7, #4]
 8001d22:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <DM_AddDigitPadding+0xbc>)
 8001d24:	4619      	mov	r1, r3
 8001d26:	6838      	ldr	r0, [r7, #0]
 8001d28:	f008 ffce 	bl	800acc8 <sniprintf>
			return 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e028      	b.n	8001d82 <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8001d30:	88b9      	ldrh	r1, [r7, #4]
 8001d32:	89fb      	ldrh	r3, [r7, #14]
 8001d34:	4a16      	ldr	r2, [pc, #88]	; (8001d90 <DM_AddDigitPadding+0xc0>)
 8001d36:	6838      	ldr	r0, [r7, #0]
 8001d38:	f008 ffc6 	bl	800acc8 <sniprintf>
			return 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e020      	b.n	8001d82 <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8001d40:	88b9      	ldrh	r1, [r7, #4]
 8001d42:	89fb      	ldrh	r3, [r7, #14]
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <DM_AddDigitPadding+0xc4>)
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f008 ffbe 	bl	800acc8 <sniprintf>
			return 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e018      	b.n	8001d82 <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8001d50:	88b9      	ldrh	r1, [r7, #4]
 8001d52:	89fb      	ldrh	r3, [r7, #14]
 8001d54:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <DM_AddDigitPadding+0xc8>)
 8001d56:	6838      	ldr	r0, [r7, #0]
 8001d58:	f008 ffb6 	bl	800acc8 <sniprintf>
			return 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e010      	b.n	8001d82 <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8001d60:	88b9      	ldrh	r1, [r7, #4]
 8001d62:	89fb      	ldrh	r3, [r7, #14]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <DM_AddDigitPadding+0xcc>)
 8001d66:	6838      	ldr	r0, [r7, #0]
 8001d68:	f008 ffae 	bl	800acc8 <sniprintf>
			return 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e008      	b.n	8001d82 <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8001d70:	88b9      	ldrh	r1, [r7, #4]
 8001d72:	89fb      	ldrh	r3, [r7, #14]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <DM_AddDigitPadding+0xd0>)
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f008 ffa6 	bl	800acc8 <sniprintf>
			return 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e000      	b.n	8001d82 <DM_AddDigitPadding+0xb2>

	}

	return 2;
 8001d80:	2302      	movs	r3, #2


}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	0800bd28 	.word	0x0800bd28
 8001d90:	0800bd30 	.word	0x0800bd30
 8001d94:	0800bd38 	.word	0x0800bd38
 8001d98:	0800bd40 	.word	0x0800bd40
 8001d9c:	0800bd48 	.word	0x0800bd48
 8001da0:	0800bd4c 	.word	0x0800bd4c

08001da4 <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

	switch(eNextState)
 8001da8:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	f200 808a 	bhi.w	8001ec6 <EM_ProcessEvent+0x122>
 8001db2:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <EM_ProcessEvent+0x14>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001dcd 	.word	0x08001dcd
 8001dbc:	08001e1f 	.word	0x08001e1f
 8001dc0:	08001e49 	.word	0x08001e49
 8001dc4:	08001e73 	.word	0x08001e73
 8001dc8:	08001e9d 	.word	0x08001e9d
	{
		case Idle_State:
			if(eNewEvent == evBlueBtn)
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <EM_ProcessEvent+0x3c>
			{
				eNextState = _FuncMenuHandler();
 8001dd4:	f000 f888 	bl	8001ee8 <_FuncMenuHandler>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001dde:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8001de0:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d105      	bne.n	8001df4 <EM_ProcessEvent+0x50>
			{
				eNextState = _FreqMenuHandler();
 8001de8:	f000 f984 	bl	80020f4 <_FreqMenuHandler>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001df2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8001df4:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d105      	bne.n	8001e08 <EM_ProcessEvent+0x64>
			{
				eNextState = _GainMenuHandler();
 8001dfc:	f000 f8c8 	bl	8001f90 <_GainMenuHandler>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001e06:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d15c      	bne.n	8001eca <EM_ProcessEvent+0x126>
			{
				eNextState = _BiasMenuHandler();
 8001e10:	f000 f91a 	bl	8002048 <_BiasMenuHandler>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001e1a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001e1c:	e055      	b.n	8001eca <EM_ProcessEvent+0x126>

		case Func_Menu_State:
			if(eNewEvent == evEncoderSet)
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d105      	bne.n	8001e32 <EM_ProcessEvent+0x8e>
			{
				eNextState = _FuncSetHandler();
 8001e26:	f000 f87f 	bl	8001f28 <_FuncSetHandler>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001e30:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d149      	bne.n	8001ece <EM_ProcessEvent+0x12a>
			{
				eNextState = _ExitFuncMenuHandler();
 8001e3a:	f000 f887 	bl	8001f4c <_ExitFuncMenuHandler>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001e44:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e46:	e042      	b.n	8001ece <EM_ProcessEvent+0x12a>

		case Gain_Menu_State:
			if(eNewEvent == evEncoderSet)
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d105      	bne.n	8001e5c <EM_ProcessEvent+0xb8>
			{
				eNextState = _GainSetHandler();
 8001e50:	f000 f8c0 	bl	8001fd4 <_GainSetHandler>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001e5a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b06      	cmp	r3, #6
 8001e62:	d136      	bne.n	8001ed2 <EM_ProcessEvent+0x12e>
			{
				eNextState = _ExitGainMenuHandler();
 8001e64:	f000 f8ce 	bl	8002004 <_ExitGainMenuHandler>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001e6e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e70:	e02f      	b.n	8001ed2 <EM_ProcessEvent+0x12e>

		case Freq_Menu_State:
			if(eNewEvent == evEncoderSet)
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d105      	bne.n	8001e86 <EM_ProcessEvent+0xe2>
			{
				eNextState = _FreqSetHandler();
 8001e7a:	f000 f95b 	bl	8002134 <_FreqSetHandler>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001e84:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d123      	bne.n	8001ed6 <EM_ProcessEvent+0x132>
			{
				eNextState = _ExitFreqMenuHandler();
 8001e8e:	f000 f95d 	bl	800214c <_ExitFreqMenuHandler>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001e98:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evRedBtn)
			{
//				FreqO_ApplyPreset(FPRESET_100KHZ);
//				eNextState = Freq_Menu_State;
			}
			break;
 8001e9a:	e01c      	b.n	8001ed6 <EM_ProcessEvent+0x132>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d105      	bne.n	8001eb0 <EM_ProcessEvent+0x10c>
			{
				eNextState = _BiasSetHandler();
 8001ea4:	f000 f8f2 	bl	800208c <_BiasSetHandler>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001eae:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <EM_ProcessEvent+0x140>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b06      	cmp	r3, #6
 8001eb6:	d110      	bne.n	8001eda <EM_ProcessEvent+0x136>
			{
				eNextState = _ExitBiasMenuHandler();
 8001eb8:	f000 f8fa 	bl	80020b0 <_ExitBiasMenuHandler>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <EM_ProcessEvent+0x13c>)
 8001ec2:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001ec4:	e009      	b.n	8001eda <EM_ProcessEvent+0x136>

		default:
			break;
 8001ec6:	bf00      	nop
 8001ec8:	e008      	b.n	8001edc <EM_ProcessEvent+0x138>
			break;
 8001eca:	bf00      	nop
 8001ecc:	e006      	b.n	8001edc <EM_ProcessEvent+0x138>
			break;
 8001ece:	bf00      	nop
 8001ed0:	e004      	b.n	8001edc <EM_ProcessEvent+0x138>
			break;
 8001ed2:	bf00      	nop
 8001ed4:	e002      	b.n	8001edc <EM_ProcessEvent+0x138>
			break;
 8001ed6:	bf00      	nop
 8001ed8:	e000      	b.n	8001edc <EM_ProcessEvent+0x138>
			break;
 8001eda:	bf00      	nop
	}

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200010e8 	.word	0x200010e8
 8001ee4:	200010e9 	.word	0x200010e9

08001ee8 <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8001eec:	480b      	ldr	r0, [pc, #44]	; (8001f1c <_FuncMenuHandler+0x34>)
 8001eee:	f008 fee3 	bl	800acb8 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <_FuncMenuHandler+0x38>)
 8001ef4:	f006 fc10 	bl	8008718 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8001ef8:	f7ff fea8 	bl	8001c4c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8001efc:	4808      	ldr	r0, [pc, #32]	; (8001f20 <_FuncMenuHandler+0x38>)
 8001efe:	f006 fbd5 	bl	80086ac <HAL_TIM_Base_Start_IT>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7fe fa86 	bl	8000414 <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 20;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <_FuncMenuHandler+0x3c>)
 8001f0a:	2214      	movs	r2, #20
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 20;
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <_FuncMenuHandler+0x3c>)
 8001f10:	2214      	movs	r2, #20
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8001f14:	2301      	movs	r3, #1
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	0800bd50 	.word	0x0800bd50
 8001f20:	20001398 	.word	0x20001398
 8001f24:	40012c00 	.word	0x40012c00

08001f28 <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <_FuncSetHandler+0x1c>)
 8001f2e:	f008 fec3 	bl	800acb8 <puts>
#endif


	FuncO_ModifyOutput();
 8001f32:	f000 fb27 	bl	8002584 <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <_FuncSetHandler+0x20>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	0800bd6c 	.word	0x0800bd6c
 8001f48:	200010e9 	.word	0x200010e9

08001f4c <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <_ExitFuncMenuHandler+0x34>)
 8001f52:	f008 feb1 	bl	800acb8 <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7fe fa5c 	bl	8000414 <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <_ExitFuncMenuHandler+0x38>)
 8001f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8001f64:	4808      	ldr	r0, [pc, #32]	; (8001f88 <_ExitFuncMenuHandler+0x3c>)
 8001f66:	f006 fbd7 	bl	8008718 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8001f6a:	f7ff fe6f 	bl	8001c4c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <_ExitFuncMenuHandler+0x3c>)
 8001f70:	f006 fb9c 	bl	80086ac <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <_ExitFuncMenuHandler+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	0800bd8c 	.word	0x0800bd8c
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	20001398 	.word	0x20001398
 8001f8c:	200010e9 	.word	0x200010e9

08001f90 <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <_GainMenuHandler+0x38>)
 8001f96:	f008 fe8f 	bl	800acb8 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8001f9a:	480c      	ldr	r0, [pc, #48]	; (8001fcc <_GainMenuHandler+0x3c>)
 8001f9c:	f006 fbbc 	bl	8008718 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8001fa0:	f7ff fe54 	bl	8001c4c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8001fa4:	4809      	ldr	r0, [pc, #36]	; (8001fcc <_GainMenuHandler+0x3c>)
 8001fa6:	f006 fb81 	bl	80086ac <HAL_TIM_Base_Start_IT>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7fe fbfc 	bl	80007a8 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-32 for this menu
	ENCODER_TIMER->CNT = GO_GetOutputGain();
 8001fb0:	f000 fc94 	bl	80028dc <GO_GetOutputGain>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <_GainMenuHandler+0x40>)
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 32;
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <_GainMenuHandler+0x40>)
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8001fc2:	2302      	movs	r3, #2
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	0800bda8 	.word	0x0800bda8
 8001fcc:	20001398 	.word	0x20001398
 8001fd0:	40012c00 	.word	0x40012c00

08001fd4 <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8001fd8:	4808      	ldr	r0, [pc, #32]	; (8001ffc <_GainSetHandler+0x28>)
 8001fda:	f008 fe6d 	bl	800acb8 <puts>
#endif

	GO_SetOutputToEncoder(SM_GetEncoderValue(ENCODER_REVERSE));
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 fc88 	bl	80028f4 <SM_GetEncoderValue>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fb89 	bl	8002700 <GO_SetOutputToEncoder>

	eNewEvent = evYellowBtn;
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <_GainSetHandler+0x2c>)
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8001ff4:	2302      	movs	r3, #2
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	0800bdc0 	.word	0x0800bdc0
 8002000:	200010e9 	.word	0x200010e9

08002004 <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <_ExitGainMenuHandler+0x34>)
 800200a:	f008 fe55 	bl	800acb8 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 800200e:	2000      	movs	r0, #0
 8002010:	f7fe fbca 	bl	80007a8 <DM_ShowGainSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <_ExitGainMenuHandler+0x38>)
 8002016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 800201c:	4808      	ldr	r0, [pc, #32]	; (8002040 <_ExitGainMenuHandler+0x3c>)
 800201e:	f006 fb7b 	bl	8008718 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8002022:	f7ff fe13 	bl	8001c4c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <_ExitGainMenuHandler+0x3c>)
 8002028:	f006 fb40 	bl	80086ac <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <_ExitGainMenuHandler+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	0800bdd8 	.word	0x0800bdd8
 800203c:	40012c00 	.word	0x40012c00
 8002040:	20001398 	.word	0x20001398
 8002044:	200010e9 	.word	0x200010e9

08002048 <_BiasMenuHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuHandler()
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <_BiasMenuHandler+0x38>)
 800204e:	f008 fe33 	bl	800acb8 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <_BiasMenuHandler+0x3c>)
 8002054:	f006 fb60 	bl	8008718 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8002058:	f7ff fdf8 	bl	8001c4c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <_BiasMenuHandler+0x3c>)
 800205e:	f006 fb25 	bl	80086ac <HAL_TIM_Base_Start_IT>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff fd60 	bl	8001b28 <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <_BiasMenuHandler+0x40>)
 800206a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <_BiasMenuHandler+0x40>)
 8002072:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002076:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8002078:	2304      	movs	r3, #4
}
 800207a:	4618      	mov	r0, r3
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	0800bdf4 	.word	0x0800bdf4
 8002084:	20001398 	.word	0x20001398
 8002088:	40012c00 	.word	0x40012c00

0800208c <_BiasSetHandler>:
 *
 *
 *
 */
eSystemState _BiasSetHandler()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <_BiasSetHandler+0x1c>)
 8002092:	f008 fe11 	bl	800acb8 <puts>
#endif

	BO_ModifyOutput();
 8002096:	f000 f897 	bl	80021c8 <BO_ModifyOutput>

	eNewEvent = evRedBtn;
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <_BiasSetHandler+0x20>)
 800209c:	2204      	movs	r2, #4
 800209e:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80020a0:	2304      	movs	r3, #4
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	0800be0c 	.word	0x0800be0c
 80020ac:	200010e9 	.word	0x200010e9

080020b0 <_ExitBiasMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitBiasMenuHandler()
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 80020b4:	480b      	ldr	r0, [pc, #44]	; (80020e4 <_ExitBiasMenuHandler+0x34>)
 80020b6:	f008 fdff 	bl	800acb8 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff fd34 	bl	8001b28 <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <_ExitBiasMenuHandler+0x38>)
 80020c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 80020c8:	4808      	ldr	r0, [pc, #32]	; (80020ec <_ExitBiasMenuHandler+0x3c>)
 80020ca:	f006 fb25 	bl	8008718 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 80020ce:	f7ff fdbd 	bl	8001c4c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <_ExitBiasMenuHandler+0x3c>)
 80020d4:	f006 faea 	bl	80086ac <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <_ExitBiasMenuHandler+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	0800be24 	.word	0x0800be24
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	20001398 	.word	0x20001398
 80020f0:	200010e9 	.word	0x200010e9

080020f4 <_FreqMenuHandler>:
 *
 *	Business logic for FREQ MENU events
 *
 */
eSystemState _FreqMenuHandler()
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <_FreqMenuHandler+0x34>)
 80020fa:	f008 fddd 	bl	800acb8 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <_FreqMenuHandler+0x38>)
 8002100:	f006 fb0a 	bl	8008718 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8002104:	f7ff fda2 	bl	8001c4c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8002108:	4808      	ldr	r0, [pc, #32]	; (800212c <_FreqMenuHandler+0x38>)
 800210a:	f006 facf 	bl	80086ac <HAL_TIM_Base_Start_IT>

	DM_ShowFreqSelectMenu(ENABLE_FREQMENU);
 800210e:	2001      	movs	r0, #1
 8002110:	f7fe fb88 	bl	8000824 <DM_ShowFreqSelectMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <_FreqMenuHandler+0x3c>)
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <_FreqMenuHandler+0x3c>)
 800211c:	2238      	movs	r2, #56	; 0x38
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c

	return Freq_Menu_State;
 8002120:	2303      	movs	r3, #3
}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	0800be40 	.word	0x0800be40
 800212c:	20001398 	.word	0x20001398
 8002130:	40012c00 	.word	0x40012c00

08002134 <_FreqSetHandler>:
 *
 *
 *
 */
eSystemState _FreqSetHandler()
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <_FreqSetHandler+0x14>)
 800213a:	f008 fdbd 	bl	800acb8 <puts>
#endif

	FreqO_ModifyOutput();
 800213e:	f000 f895 	bl	800226c <FreqO_ModifyOutput>

	//eNewEvent = evGreenBtn;
	return Freq_Menu_State;
 8002142:	2303      	movs	r3, #3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	0800be58 	.word	0x0800be58

0800214c <_ExitFreqMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFreqMenuHandler()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFreqMenu Event captured\n");
 8002150:	480b      	ldr	r0, [pc, #44]	; (8002180 <_ExitFreqMenuHandler+0x34>)
 8002152:	f008 fdb1 	bl	800acb8 <puts>
#endif


	// disable the menu
	DM_ShowFreqSelectMenu(DISABLE_FREQMENU);
 8002156:	2000      	movs	r0, #0
 8002158:	f7fe fb64 	bl	8000824 <DM_ShowFreqSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <_ExitFreqMenuHandler+0x38>)
 800215e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8002164:	4808      	ldr	r0, [pc, #32]	; (8002188 <_ExitFreqMenuHandler+0x3c>)
 8002166:	f006 fad7 	bl	8008718 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 800216a:	f7ff fd6f 	bl	8001c4c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <_ExitFreqMenuHandler+0x3c>)
 8002170:	f006 fa9c 	bl	80086ac <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <_ExitFreqMenuHandler+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}
 8002180:	0800be70 	.word	0x0800be70
 8002184:	40012c00 	.word	0x40012c00
 8002188:	20001398 	.word	0x20001398
 800218c:	200010e9 	.word	0x200010e9

08002190 <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <EM_SetNewEvent+0x1c>)
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	7013      	strb	r3, [r2, #0]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	200010e9 	.word	0x200010e9

080021b0 <BO_GetBiasPolarity>:
 *
 *
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <BO_GetBiasPolarity+0x14>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000008 	.word	0x20000008

080021c8 <BO_ModifyOutput>:
 *
 *
 *
 */
void BO_ModifyOutput()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 80021cc:	2001      	movs	r0, #1
 80021ce:	f000 fb91 	bl	80028f4 <SM_GetEncoderValue>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80021d8:	d217      	bcs.n	800220a <BO_ModifyOutput+0x42>

		eBiasPolarity = INVERSEBIAS;
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <BO_ModifyOutput+0x84>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 80021e0:	2001      	movs	r0, #1
 80021e2:	f000 fb87 	bl	80028f4 <SM_GetEncoderValue>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80021f4:	2200      	movs	r2, #0
 80021f6:	2110      	movs	r1, #16
 80021f8:	4815      	ldr	r0, [pc, #84]	; (8002250 <BO_ModifyOutput+0x88>)
 80021fa:	f003 ffbf 	bl	800617c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80021fe:	2201      	movs	r2, #1
 8002200:	2108      	movs	r1, #8
 8002202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002206:	f004 fea7 	bl	8006f58 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 800220a:	2001      	movs	r0, #1
 800220c:	f000 fb72 	bl	80028f4 <SM_GetEncoderValue>
 8002210:	4603      	mov	r3, r0
 8002212:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002216:	d317      	bcc.n	8002248 <BO_ModifyOutput+0x80>

		eBiasPolarity = NORMALBIAS;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <BO_ModifyOutput+0x84>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 800221e:	2001      	movs	r0, #1
 8002220:	f000 fb68 	bl	80028f4 <SM_GetEncoderValue>
 8002224:	4603      	mov	r3, r0
 8002226:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8002232:	2200      	movs	r2, #0
 8002234:	2110      	movs	r1, #16
 8002236:	4806      	ldr	r0, [pc, #24]	; (8002250 <BO_ModifyOutput+0x88>)
 8002238:	f003 ffa0 	bl	800617c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800223c:	2200      	movs	r2, #0
 800223e:	2108      	movs	r1, #8
 8002240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002244:	f004 fe88 	bl	8006f58 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000008 	.word	0x20000008
 8002250:	20001214 	.word	0x20001214

08002254 <BO_GetOutputBias>:
 *
 *
 *
 */
uint32_t BO_GetOutputBias()
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8002258:	2110      	movs	r1, #16
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <BO_GetOutputBias+0x14>)
 800225c:	f003 ffca 	bl	80061f4 <HAL_DAC_GetValue>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20001214 	.word	0x20001214

0800226c <FreqO_ModifyOutput>:
 *
 *
 *
 */
void FreqO_ModifyOutput()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 8002270:	2001      	movs	r0, #1
 8002272:	f000 fb3f 	bl	80028f4 <SM_GetEncoderValue>
 8002276:	4603      	mov	r3, r0
 8002278:	2b38      	cmp	r3, #56	; 0x38
 800227a:	f200 80ad 	bhi.w	80023d8 <FreqO_ModifyOutput+0x16c>
 800227e:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <FreqO_ModifyOutput+0x18>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	08002369 	.word	0x08002369
 8002288:	08002369 	.word	0x08002369
 800228c:	08002369 	.word	0x08002369
 8002290:	08002369 	.word	0x08002369
 8002294:	08002371 	.word	0x08002371
 8002298:	08002371 	.word	0x08002371
 800229c:	08002371 	.word	0x08002371
 80022a0:	08002371 	.word	0x08002371
 80022a4:	08002379 	.word	0x08002379
 80022a8:	08002379 	.word	0x08002379
 80022ac:	08002379 	.word	0x08002379
 80022b0:	08002379 	.word	0x08002379
 80022b4:	08002381 	.word	0x08002381
 80022b8:	08002381 	.word	0x08002381
 80022bc:	08002381 	.word	0x08002381
 80022c0:	08002381 	.word	0x08002381
 80022c4:	08002389 	.word	0x08002389
 80022c8:	08002389 	.word	0x08002389
 80022cc:	08002389 	.word	0x08002389
 80022d0:	08002389 	.word	0x08002389
 80022d4:	08002391 	.word	0x08002391
 80022d8:	08002391 	.word	0x08002391
 80022dc:	08002391 	.word	0x08002391
 80022e0:	08002391 	.word	0x08002391
 80022e4:	08002399 	.word	0x08002399
 80022e8:	08002399 	.word	0x08002399
 80022ec:	08002399 	.word	0x08002399
 80022f0:	08002399 	.word	0x08002399
 80022f4:	080023a1 	.word	0x080023a1
 80022f8:	080023a1 	.word	0x080023a1
 80022fc:	080023a1 	.word	0x080023a1
 8002300:	080023d9 	.word	0x080023d9
 8002304:	080023a1 	.word	0x080023a1
 8002308:	080023a9 	.word	0x080023a9
 800230c:	080023a9 	.word	0x080023a9
 8002310:	080023a9 	.word	0x080023a9
 8002314:	080023a9 	.word	0x080023a9
 8002318:	080023b1 	.word	0x080023b1
 800231c:	080023b1 	.word	0x080023b1
 8002320:	080023b1 	.word	0x080023b1
 8002324:	080023b1 	.word	0x080023b1
 8002328:	080023b9 	.word	0x080023b9
 800232c:	080023b9 	.word	0x080023b9
 8002330:	080023b9 	.word	0x080023b9
 8002334:	080023b9 	.word	0x080023b9
 8002338:	080023c1 	.word	0x080023c1
 800233c:	080023c1 	.word	0x080023c1
 8002340:	080023c1 	.word	0x080023c1
 8002344:	080023c1 	.word	0x080023c1
 8002348:	080023c9 	.word	0x080023c9
 800234c:	080023c9 	.word	0x080023c9
 8002350:	080023c9 	.word	0x080023c9
 8002354:	080023c9 	.word	0x080023c9
 8002358:	080023d1 	.word	0x080023d1
 800235c:	080023d1 	.word	0x080023d1
 8002360:	080023d1 	.word	0x080023d1
 8002364:	080023d1 	.word	0x080023d1
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8002368:	2000      	movs	r0, #0
 800236a:	f000 f837 	bl	80023dc <FreqO_ApplyPreset>
			break;
 800236e:	e033      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8002370:	2001      	movs	r0, #1
 8002372:	f000 f833 	bl	80023dc <FreqO_ApplyPreset>
			break;
 8002376:	e02f      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8002378:	2002      	movs	r0, #2
 800237a:	f000 f82f 	bl	80023dc <FreqO_ApplyPreset>
			break;
 800237e:	e02b      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8002380:	2003      	movs	r0, #3
 8002382:	f000 f82b 	bl	80023dc <FreqO_ApplyPreset>
			break;
 8002386:	e027      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8002388:	2004      	movs	r0, #4
 800238a:	f000 f827 	bl	80023dc <FreqO_ApplyPreset>
			break;
 800238e:	e023      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8002390:	2005      	movs	r0, #5
 8002392:	f000 f823 	bl	80023dc <FreqO_ApplyPreset>
			break;
 8002396:	e01f      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8002398:	2006      	movs	r0, #6
 800239a:	f000 f81f 	bl	80023dc <FreqO_ApplyPreset>
			break;
 800239e:	e01b      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 80023a0:	2007      	movs	r0, #7
 80023a2:	f000 f81b 	bl	80023dc <FreqO_ApplyPreset>
			break;
 80023a6:	e017      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 80023a8:	2008      	movs	r0, #8
 80023aa:	f000 f817 	bl	80023dc <FreqO_ApplyPreset>
			break;
 80023ae:	e013      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 80023b0:	2009      	movs	r0, #9
 80023b2:	f000 f813 	bl	80023dc <FreqO_ApplyPreset>
			break;
 80023b6:	e00f      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 80023b8:	200a      	movs	r0, #10
 80023ba:	f000 f80f 	bl	80023dc <FreqO_ApplyPreset>
			break;
 80023be:	e00b      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 80023c0:	200b      	movs	r0, #11
 80023c2:	f000 f80b 	bl	80023dc <FreqO_ApplyPreset>
			break;
 80023c6:	e007      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 80023c8:	200c      	movs	r0, #12
 80023ca:	f000 f807 	bl	80023dc <FreqO_ApplyPreset>
			break;
 80023ce:	e003      	b.n	80023d8 <FreqO_ModifyOutput+0x16c>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 80023d0:	200d      	movs	r0, #13
 80023d2:	f000 f803 	bl	80023dc <FreqO_ApplyPreset>
			break;
 80023d6:	bf00      	nop
	else if (eNewFreqPreset == FPRESET_100HZ)
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_MIDFREQ_MAG;
	else if (eNewFreqPreset == FPRESET_1HZ)
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
	*/
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <FreqO_ApplyPreset>:
 *
 *
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPreset)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
	switch(pPreset)
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	2b0d      	cmp	r3, #13
 80023ea:	f200 80b4 	bhi.w	8002556 <FreqO_ApplyPreset+0x17a>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <FreqO_ApplyPreset+0x18>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	0800242d 	.word	0x0800242d
 80023f8:	08002443 	.word	0x08002443
 80023fc:	08002459 	.word	0x08002459
 8002400:	0800246f 	.word	0x0800246f
 8002404:	08002485 	.word	0x08002485
 8002408:	0800249b 	.word	0x0800249b
 800240c:	080024b1 	.word	0x080024b1
 8002410:	080024c7 	.word	0x080024c7
 8002414:	080024dd 	.word	0x080024dd
 8002418:	080024f3 	.word	0x080024f3
 800241c:	08002507 	.word	0x08002507
 8002420:	0800251b 	.word	0x0800251b
 8002424:	0800252f 	.word	0x0800252f
 8002428:	08002543 	.word	0x08002543
	{
		case FPRESET_1HZ:
			TIM8->PSC = 0x0014;
 800242c:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <FreqO_ApplyPreset+0x188>)
 800242e:	2214      	movs	r2, #20
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0xFFFF;
 8002432:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_1HZ;
 800243a:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
			break;
 8002440:	e089      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_10HZ:
			TIM8->PSC = 0x0003;
 8002442:	4b48      	ldr	r3, [pc, #288]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002444:	2203      	movs	r2, #3
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x87FF;
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <FreqO_ApplyPreset+0x188>)
 800244a:	f248 72ff 	movw	r2, #34815	; 0x87ff
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_10HZ;
 8002450:	4b45      	ldr	r3, [pc, #276]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
			break;
 8002456:	e07e      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_50HZ:
			TIM8->PSC = 0x0000;
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <FreqO_ApplyPreset+0x188>)
 800245a:	2200      	movs	r2, #0
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x6D00;
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002460:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_50HZ;
 8002466:	4b40      	ldr	r3, [pc, #256]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 8002468:	2202      	movs	r2, #2
 800246a:	701a      	strb	r2, [r3, #0]
			break;
 800246c:	e073      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_100HZ:
			TIM8->PSC = 0x0000;
 800246e:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x37FF;
 8002474:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002476:	f243 72ff 	movw	r2, #14335	; 0x37ff
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_100HZ;
 800247c:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 800247e:	2203      	movs	r2, #3
 8002480:	701a      	strb	r2, [r3, #0]
			break;
 8002482:	e068      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_250HZ:
			TIM8->PSC = 0x0000;
 8002484:	4b37      	ldr	r3, [pc, #220]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002486:	2200      	movs	r2, #0
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x163F;
 800248a:	4b36      	ldr	r3, [pc, #216]	; (8002564 <FreqO_ApplyPreset+0x188>)
 800248c:	f241 623f 	movw	r2, #5695	; 0x163f
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_250HZ;
 8002492:	4b35      	ldr	r3, [pc, #212]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 8002494:	2204      	movs	r2, #4
 8002496:	701a      	strb	r2, [r3, #0]
			break;
 8002498:	e05d      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_500HZ:
			TIM8->PSC = 0x0000;
 800249a:	4b32      	ldr	r3, [pc, #200]	; (8002564 <FreqO_ApplyPreset+0x188>)
 800249c:	2200      	movs	r2, #0
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0AFF;
 80024a0:	4b30      	ldr	r3, [pc, #192]	; (8002564 <FreqO_ApplyPreset+0x188>)
 80024a2:	f640 22ff 	movw	r2, #2815	; 0xaff
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_500HZ;
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 80024aa:	2205      	movs	r2, #5
 80024ac:	701a      	strb	r2, [r3, #0]
			break;
 80024ae:	e052      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_750HZ:
			TIM8->PSC = 0x0000;
 80024b0:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <FreqO_ApplyPreset+0x188>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x07BF;
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <FreqO_ApplyPreset+0x188>)
 80024b8:	f240 72bf 	movw	r2, #1983	; 0x7bf
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_750HZ;
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 80024c0:	2206      	movs	r2, #6
 80024c2:	701a      	strb	r2, [r3, #0]
			break;
 80024c4:	e047      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_1KHZ:
			TIM8->PSC = 0x0000;
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <FreqO_ApplyPreset+0x188>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0577;
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <FreqO_ApplyPreset+0x188>)
 80024ce:	f240 5277 	movw	r2, #1399	; 0x577
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_1KHZ;
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 80024d6:	2207      	movs	r2, #7
 80024d8:	701a      	strb	r2, [r3, #0]
			break;
 80024da:	e03c      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_5KHZ:
			TIM8->PSC = 0x0000;
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <FreqO_ApplyPreset+0x188>)
 80024de:	2200      	movs	r2, #0
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0118;
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <FreqO_ApplyPreset+0x188>)
 80024e4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_5KHZ;
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 80024ec:	2208      	movs	r2, #8
 80024ee:	701a      	strb	r2, [r3, #0]
			break;
 80024f0:	e031      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_10KHZ:
			TIM8->PSC = 0x0000;
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <FreqO_ApplyPreset+0x188>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x008B;
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <FreqO_ApplyPreset+0x188>)
 80024fa:	228b      	movs	r2, #139	; 0x8b
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_10KHZ;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 8002500:	2209      	movs	r2, #9
 8002502:	701a      	strb	r2, [r3, #0]
			break;
 8002504:	e027      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_25KHZ:
			TIM8->PSC = 0x0000;
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002508:	2200      	movs	r2, #0
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0037;
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <FreqO_ApplyPreset+0x188>)
 800250e:	2237      	movs	r2, #55	; 0x37
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_25KHZ;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 8002514:	220a      	movs	r2, #10
 8002516:	701a      	strb	r2, [r3, #0]
			break;
 8002518:	e01d      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_50KHZ:
			TIM8->PSC = 0x0000;
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <FreqO_ApplyPreset+0x188>)
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x001B;
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002522:	221b      	movs	r2, #27
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_50KHZ;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 8002528:	220b      	movs	r2, #11
 800252a:	701a      	strb	r2, [r3, #0]
			break;
 800252c:	e013      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_75KHZ:
			TIM8->PSC = 0x0000;
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0012;
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002536:	2212      	movs	r2, #18
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_75KHZ;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 800253c:	220c      	movs	r2, #12
 800253e:	701a      	strb	r2, [r3, #0]
			break;
 8002540:	e009      	b.n	8002556 <FreqO_ApplyPreset+0x17a>
		case FPRESET_100KHZ:
			TIM8->PSC = 0x0000;
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <FreqO_ApplyPreset+0x188>)
 8002544:	2200      	movs	r2, #0
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0006;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <FreqO_ApplyPreset+0x188>)
 800254a:	2206      	movs	r2, #6
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c

			eNewFreqPreset = FPRESET_100KHZ;
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <FreqO_ApplyPreset+0x18c>)
 8002550:	220d      	movs	r2, #13
 8002552:	701a      	strb	r2, [r3, #0]
			break;
 8002554:	bf00      	nop
	}
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40013400 	.word	0x40013400
 8002568:	20000009 	.word	0x20000009

0800256c <FreqO_GetFPreset>:

eFreq_Preset FreqO_GetFPreset()
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
	return eNewFreqPreset;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <FreqO_GetFPreset+0x14>)
 8002572:	781b      	ldrb	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000009 	.word	0x20000009

08002584 <FuncO_ModifyOutput>:

// signal output function
eOutput_mode eNewOutMode = Sine_Out_Mode;

void FuncO_ModifyOutput()
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af02      	add	r7, sp, #8


	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 800258a:	2001      	movs	r0, #1
 800258c:	f000 f9b2 	bl	80028f4 <SM_GetEncoderValue>
 8002590:	4603      	mov	r3, r0
 8002592:	2b17      	cmp	r3, #23
 8002594:	f200 8094 	bhi.w	80026c0 <FuncO_ModifyOutput+0x13c>
 8002598:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <FuncO_ModifyOutput+0x1c>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	08002601 	.word	0x08002601
 80025a4:	08002601 	.word	0x08002601
 80025a8:	08002601 	.word	0x08002601
 80025ac:	08002621 	.word	0x08002621
 80025b0:	08002621 	.word	0x08002621
 80025b4:	08002621 	.word	0x08002621
 80025b8:	08002621 	.word	0x08002621
 80025bc:	08002641 	.word	0x08002641
 80025c0:	08002641 	.word	0x08002641
 80025c4:	08002641 	.word	0x08002641
 80025c8:	08002641 	.word	0x08002641
 80025cc:	08002661 	.word	0x08002661
 80025d0:	08002661 	.word	0x08002661
 80025d4:	08002661 	.word	0x08002661
 80025d8:	08002661 	.word	0x08002661
 80025dc:	08002681 	.word	0x08002681
 80025e0:	08002681 	.word	0x08002681
 80025e4:	08002681 	.word	0x08002681
 80025e8:	08002681 	.word	0x08002681
 80025ec:	080026a1 	.word	0x080026a1
 80025f0:	080026a1 	.word	0x080026a1
 80025f4:	080026a1 	.word	0x080026a1
 80025f8:	080026a1 	.word	0x080026a1
 80025fc:	080026a1 	.word	0x080026a1
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 8002600:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <FuncO_ModifyOutput+0x144>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8002606:	2100      	movs	r1, #0
 8002608:	4830      	ldr	r0, [pc, #192]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800260a:	f003 fd61 	bl	80060d0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2378      	movs	r3, #120	; 0x78
 8002614:	4a2e      	ldr	r2, [pc, #184]	; (80026d0 <FuncO_ModifyOutput+0x14c>)
 8002616:	2100      	movs	r1, #0
 8002618:	482c      	ldr	r0, [pc, #176]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800261a:	f003 fc97 	bl	8005f4c <HAL_DAC_Start_DMA>
			break;
 800261e:	e04f      	b.n	80026c0 <FuncO_ModifyOutput+0x13c>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <FuncO_ModifyOutput+0x144>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8002626:	2100      	movs	r1, #0
 8002628:	4828      	ldr	r0, [pc, #160]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800262a:	f003 fd51 	bl	80060d0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2378      	movs	r3, #120	; 0x78
 8002634:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <FuncO_ModifyOutput+0x150>)
 8002636:	2100      	movs	r1, #0
 8002638:	4824      	ldr	r0, [pc, #144]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800263a:	f003 fc87 	bl	8005f4c <HAL_DAC_Start_DMA>

			break;
 800263e:	e03f      	b.n	80026c0 <FuncO_ModifyOutput+0x13c>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <FuncO_ModifyOutput+0x144>)
 8002642:	2202      	movs	r2, #2
 8002644:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8002646:	2100      	movs	r1, #0
 8002648:	4820      	ldr	r0, [pc, #128]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800264a:	f003 fd41 	bl	80060d0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2378      	movs	r3, #120	; 0x78
 8002654:	4a20      	ldr	r2, [pc, #128]	; (80026d8 <FuncO_ModifyOutput+0x154>)
 8002656:	2100      	movs	r1, #0
 8002658:	481c      	ldr	r0, [pc, #112]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800265a:	f003 fc77 	bl	8005f4c <HAL_DAC_Start_DMA>
			break;
 800265e:	e02f      	b.n	80026c0 <FuncO_ModifyOutput+0x13c>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <FuncO_ModifyOutput+0x144>)
 8002662:	2203      	movs	r2, #3
 8002664:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8002666:	2100      	movs	r1, #0
 8002668:	4818      	ldr	r0, [pc, #96]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800266a:	f003 fd31 	bl	80060d0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 800266e:	2300      	movs	r3, #0
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2378      	movs	r3, #120	; 0x78
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <FuncO_ModifyOutput+0x158>)
 8002676:	2100      	movs	r1, #0
 8002678:	4814      	ldr	r0, [pc, #80]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800267a:	f003 fc67 	bl	8005f4c <HAL_DAC_Start_DMA>
			break;
 800267e:	e01f      	b.n	80026c0 <FuncO_ModifyOutput+0x13c>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <FuncO_ModifyOutput+0x144>)
 8002682:	2204      	movs	r2, #4
 8002684:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8002686:	2100      	movs	r1, #0
 8002688:	4810      	ldr	r0, [pc, #64]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800268a:	f003 fd21 	bl	80060d0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 800268e:	2300      	movs	r3, #0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2378      	movs	r3, #120	; 0x78
 8002694:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <FuncO_ModifyOutput+0x15c>)
 8002696:	2100      	movs	r1, #0
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <FuncO_ModifyOutput+0x148>)
 800269a:	f003 fc57 	bl	8005f4c <HAL_DAC_Start_DMA>
			break;
 800269e:	e00f      	b.n	80026c0 <FuncO_ModifyOutput+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <FuncO_ModifyOutput+0x144>)
 80026a2:	2205      	movs	r2, #5
 80026a4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80026a6:	2100      	movs	r1, #0
 80026a8:	4808      	ldr	r0, [pc, #32]	; (80026cc <FuncO_ModifyOutput+0x148>)
 80026aa:	f003 fd11 	bl	80060d0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2378      	movs	r3, #120	; 0x78
 80026b4:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <FuncO_ModifyOutput+0x160>)
 80026b6:	2100      	movs	r1, #0
 80026b8:	4804      	ldr	r0, [pc, #16]	; (80026cc <FuncO_ModifyOutput+0x148>)
 80026ba:	f003 fc47 	bl	8005f4c <HAL_DAC_Start_DMA>
			break;
 80026be:	bf00      	nop
	}
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200010ea 	.word	0x200010ea
 80026cc:	20001214 	.word	0x20001214
 80026d0:	200008e4 	.word	0x200008e4
 80026d4:	20000ac4 	.word	0x20000ac4
 80026d8:	20000524 	.word	0x20000524
 80026dc:	20000704 	.word	0x20000704
 80026e0:	20000ca4 	.word	0x20000ca4
 80026e4:	20000e84 	.word	0x20000e84

080026e8 <FuncO_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode FuncO_GetOutputMode()
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
	return eNewOutMode;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <FuncO_GetOutputMode+0x14>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	200010ea 	.word	0x200010ea

08002700 <GO_SetOutputToEncoder>:
 *
 *
 *
 */
void GO_SetOutputToEncoder(uint8_t pGain)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(pGain)
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	2b1f      	cmp	r3, #31
 800270e:	f200 80db 	bhi.w	80028c8 <GO_SetOutputToEncoder+0x1c8>
 8002712:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <GO_SetOutputToEncoder+0x18>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	08002799 	.word	0x08002799
 800271c:	08002799 	.word	0x08002799
 8002720:	08002799 	.word	0x08002799
 8002724:	08002799 	.word	0x08002799
 8002728:	080027bf 	.word	0x080027bf
 800272c:	080027bf 	.word	0x080027bf
 8002730:	080027bf 	.word	0x080027bf
 8002734:	080027bf 	.word	0x080027bf
 8002738:	080027e5 	.word	0x080027e5
 800273c:	080027e5 	.word	0x080027e5
 8002740:	080027e5 	.word	0x080027e5
 8002744:	080027e5 	.word	0x080027e5
 8002748:	0800280b 	.word	0x0800280b
 800274c:	0800280b 	.word	0x0800280b
 8002750:	0800280b 	.word	0x0800280b
 8002754:	0800280b 	.word	0x0800280b
 8002758:	08002831 	.word	0x08002831
 800275c:	08002831 	.word	0x08002831
 8002760:	08002831 	.word	0x08002831
 8002764:	08002831 	.word	0x08002831
 8002768:	08002857 	.word	0x08002857
 800276c:	08002857 	.word	0x08002857
 8002770:	08002857 	.word	0x08002857
 8002774:	08002857 	.word	0x08002857
 8002778:	0800287d 	.word	0x0800287d
 800277c:	0800287d 	.word	0x0800287d
 8002780:	0800287d 	.word	0x0800287d
 8002784:	0800287d 	.word	0x0800287d
 8002788:	080028a3 	.word	0x080028a3
 800278c:	080028a3 	.word	0x080028a3
 8002790:	080028a3 	.word	0x080028a3
 8002794:	080028a3 	.word	0x080028a3
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	2101      	movs	r1, #1
 800279c:	484c      	ldr	r0, [pc, #304]	; (80028d0 <GO_SetOutputToEncoder+0x1d0>)
 800279e:	f004 fbdb 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2120      	movs	r1, #32
 80027a6:	484b      	ldr	r0, [pc, #300]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 80027a8:	f004 fbd6 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2110      	movs	r1, #16
 80027b0:	4848      	ldr	r0, [pc, #288]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 80027b2:	f004 fbd1 	bl	8006f58 <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 80027b6:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <GO_SetOutputToEncoder+0x1d8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
			break;
 80027bc:	e084      	b.n	80028c8 <GO_SetOutputToEncoder+0x1c8>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80027be:	2201      	movs	r2, #1
 80027c0:	2101      	movs	r1, #1
 80027c2:	4843      	ldr	r0, [pc, #268]	; (80028d0 <GO_SetOutputToEncoder+0x1d0>)
 80027c4:	f004 fbc8 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2120      	movs	r1, #32
 80027cc:	4841      	ldr	r0, [pc, #260]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 80027ce:	f004 fbc3 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2110      	movs	r1, #16
 80027d6:	483f      	ldr	r0, [pc, #252]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 80027d8:	f004 fbbe 	bl	8006f58 <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 80027dc:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <GO_SetOutputToEncoder+0x1d8>)
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
			break;
 80027e2:	e071      	b.n	80028c8 <GO_SetOutputToEncoder+0x1c8>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2101      	movs	r1, #1
 80027e8:	4839      	ldr	r0, [pc, #228]	; (80028d0 <GO_SetOutputToEncoder+0x1d0>)
 80027ea:	f004 fbb5 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80027ee:	2201      	movs	r2, #1
 80027f0:	2120      	movs	r1, #32
 80027f2:	4838      	ldr	r0, [pc, #224]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 80027f4:	f004 fbb0 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2110      	movs	r1, #16
 80027fc:	4835      	ldr	r0, [pc, #212]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 80027fe:	f004 fbab 	bl	8006f58 <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 8002802:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <GO_SetOutputToEncoder+0x1d8>)
 8002804:	2202      	movs	r2, #2
 8002806:	701a      	strb	r2, [r3, #0]
			break;
 8002808:	e05e      	b.n	80028c8 <GO_SetOutputToEncoder+0x1c8>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800280a:	2201      	movs	r2, #1
 800280c:	2101      	movs	r1, #1
 800280e:	4830      	ldr	r0, [pc, #192]	; (80028d0 <GO_SetOutputToEncoder+0x1d0>)
 8002810:	f004 fba2 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8002814:	2201      	movs	r2, #1
 8002816:	2120      	movs	r1, #32
 8002818:	482e      	ldr	r0, [pc, #184]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 800281a:	f004 fb9d 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	2110      	movs	r1, #16
 8002822:	482c      	ldr	r0, [pc, #176]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 8002824:	f004 fb98 	bl	8006f58 <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <GO_SetOutputToEncoder+0x1d8>)
 800282a:	2203      	movs	r2, #3
 800282c:	701a      	strb	r2, [r3, #0]
			break;
 800282e:	e04b      	b.n	80028c8 <GO_SetOutputToEncoder+0x1c8>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8002830:	2200      	movs	r2, #0
 8002832:	2101      	movs	r1, #1
 8002834:	4826      	ldr	r0, [pc, #152]	; (80028d0 <GO_SetOutputToEncoder+0x1d0>)
 8002836:	f004 fb8f 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	2120      	movs	r1, #32
 800283e:	4825      	ldr	r0, [pc, #148]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 8002840:	f004 fb8a 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8002844:	2201      	movs	r2, #1
 8002846:	2110      	movs	r1, #16
 8002848:	4822      	ldr	r0, [pc, #136]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 800284a:	f004 fb85 	bl	8006f58 <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <GO_SetOutputToEncoder+0x1d8>)
 8002850:	2204      	movs	r2, #4
 8002852:	701a      	strb	r2, [r3, #0]
			break;
 8002854:	e038      	b.n	80028c8 <GO_SetOutputToEncoder+0x1c8>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8002856:	2201      	movs	r2, #1
 8002858:	2101      	movs	r1, #1
 800285a:	481d      	ldr	r0, [pc, #116]	; (80028d0 <GO_SetOutputToEncoder+0x1d0>)
 800285c:	f004 fb7c 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8002860:	2200      	movs	r2, #0
 8002862:	2120      	movs	r1, #32
 8002864:	481b      	ldr	r0, [pc, #108]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 8002866:	f004 fb77 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800286a:	2201      	movs	r2, #1
 800286c:	2110      	movs	r1, #16
 800286e:	4819      	ldr	r0, [pc, #100]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 8002870:	f004 fb72 	bl	8006f58 <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <GO_SetOutputToEncoder+0x1d8>)
 8002876:	2205      	movs	r2, #5
 8002878:	701a      	strb	r2, [r3, #0]
			break;
 800287a:	e025      	b.n	80028c8 <GO_SetOutputToEncoder+0x1c8>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800287c:	2200      	movs	r2, #0
 800287e:	2101      	movs	r1, #1
 8002880:	4813      	ldr	r0, [pc, #76]	; (80028d0 <GO_SetOutputToEncoder+0x1d0>)
 8002882:	f004 fb69 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8002886:	2201      	movs	r2, #1
 8002888:	2120      	movs	r1, #32
 800288a:	4812      	ldr	r0, [pc, #72]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 800288c:	f004 fb64 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8002890:	2201      	movs	r2, #1
 8002892:	2110      	movs	r1, #16
 8002894:	480f      	ldr	r0, [pc, #60]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 8002896:	f004 fb5f 	bl	8006f58 <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <GO_SetOutputToEncoder+0x1d8>)
 800289c:	2206      	movs	r2, #6
 800289e:	701a      	strb	r2, [r3, #0]
			break;
 80028a0:	e012      	b.n	80028c8 <GO_SetOutputToEncoder+0x1c8>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80028a2:	2201      	movs	r2, #1
 80028a4:	2101      	movs	r1, #1
 80028a6:	480a      	ldr	r0, [pc, #40]	; (80028d0 <GO_SetOutputToEncoder+0x1d0>)
 80028a8:	f004 fb56 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	2120      	movs	r1, #32
 80028b0:	4808      	ldr	r0, [pc, #32]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 80028b2:	f004 fb51 	bl	8006f58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	2110      	movs	r1, #16
 80028ba:	4806      	ldr	r0, [pc, #24]	; (80028d4 <GO_SetOutputToEncoder+0x1d4>)
 80028bc:	f004 fb4c 	bl	8006f58 <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <GO_SetOutputToEncoder+0x1d8>)
 80028c2:	2207      	movs	r2, #7
 80028c4:	701a      	strb	r2, [r3, #0]
			break;
 80028c6:	bf00      	nop
	}

}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	48000400 	.word	0x48000400
 80028d4:	48000800 	.word	0x48000800
 80028d8:	2000000a 	.word	0x2000000a

080028dc <GO_GetOutputGain>:
 *
 *
 *
 */
uint8_t GO_GetOutputGain()
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <GO_GetOutputGain+0x14>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	2000000a 	.word	0x2000000a

080028f4 <SM_GetEncoderValue>:

#include "SignalManager.h"


uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <SM_GetEncoderValue+0x34>)
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	b29a      	uxth	r2, r3
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <SM_GetEncoderValue+0x34>)
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	b29b      	uxth	r3, r3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	b29b      	uxth	r3, r3
 8002914:	e002      	b.n	800291c <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SM_GetEncoderValue+0x34>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	b29b      	uxth	r3, r3
	}
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40012c00 	.word	0x40012c00

0800292c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	; 0x30
 8002930:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8002932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2220      	movs	r2, #32
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f008 f953 	bl	800abf0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800294a:	4b32      	ldr	r3, [pc, #200]	; (8002a14 <MX_ADC1_Init+0xe8>)
 800294c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002950:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <MX_ADC1_Init+0xe8>)
 8002954:	2200      	movs	r2, #0
 8002956:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <MX_ADC1_Init+0xe8>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <MX_ADC1_Init+0xe8>)
 8002960:	2200      	movs	r2, #0
 8002962:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <MX_ADC1_Init+0xe8>)
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <MX_ADC1_Init+0xe8>)
 800296c:	2200      	movs	r2, #0
 800296e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <MX_ADC1_Init+0xe8>)
 8002972:	2204      	movs	r2, #4
 8002974:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002976:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <MX_ADC1_Init+0xe8>)
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <MX_ADC1_Init+0xe8>)
 800297e:	2201      	movs	r2, #1
 8002980:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002982:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <MX_ADC1_Init+0xe8>)
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002988:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <MX_ADC1_Init+0xe8>)
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002990:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <MX_ADC1_Init+0xe8>)
 8002992:	2200      	movs	r2, #0
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002996:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <MX_ADC1_Init+0xe8>)
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <MX_ADC1_Init+0xe8>)
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <MX_ADC1_Init+0xe8>)
 80029a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <MX_ADC1_Init+0xe8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029b4:	4817      	ldr	r0, [pc, #92]	; (8002a14 <MX_ADC1_Init+0xe8>)
 80029b6:	f001 ffc7 	bl	8004948 <HAL_ADC_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80029c0:	f000 ff40 	bl	8003844 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80029c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4811      	ldr	r0, [pc, #68]	; (8002a14 <MX_ADC1_Init+0xe8>)
 80029d0:	f002 fd50 	bl	8005474 <HAL_ADCEx_MultiModeConfigChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80029da:	f000 ff33 	bl	8003844 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <MX_ADC1_Init+0xec>)
 80029e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029e2:	2306      	movs	r3, #6
 80029e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029ea:	237f      	movs	r3, #127	; 0x7f
 80029ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029ee:	2304      	movs	r3, #4
 80029f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4806      	ldr	r0, [pc, #24]	; (8002a14 <MX_ADC1_Init+0xe8>)
 80029fc:	f002 f964 	bl	8004cc8 <HAL_ADC_ConfigChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002a06:	f000 ff1d 	bl	8003844 <Error_Handler>
  }

}
 8002a0a:	bf00      	nop
 8002a0c:	3730      	adds	r7, #48	; 0x30
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20001110 	.word	0x20001110
 8002a18:	0c900008 	.word	0x0c900008

08002a1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a3c:	d14f      	bne.n	8002ade <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <HAL_ADC_MspInit+0xcc>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <HAL_ADC_MspInit+0xcc>)
 8002a44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_ADC_MspInit+0xcc>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_ADC_MspInit+0xcc>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	4a23      	ldr	r2, [pc, #140]	; (8002ae8 <HAL_ADC_MspInit+0xcc>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a62:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_ADC_MspInit+0xcc>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a6e:	2304      	movs	r3, #4
 8002a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a72:	2303      	movs	r3, #3
 8002a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a84:	f004 f8ce 	bl	8006c24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002a8a:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <HAL_ADC_MspInit+0xd4>)
 8002a8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002a90:	2205      	movs	r2, #5
 8002a92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002ab8:	2220      	movs	r2, #32
 8002aba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ac2:	480a      	ldr	r0, [pc, #40]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002ac4:	f003 fde2 	bl	800668c <HAL_DMA_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8002ace:	f000 feb9 	bl	8003844 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a05      	ldr	r2, [pc, #20]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_ADC_MspInit+0xd0>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3728      	adds	r7, #40	; 0x28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	2000117c 	.word	0x2000117c
 8002af0:	40020008 	.word	0x40020008

08002af4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <MX_COMP1_Init+0x44>)
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <MX_COMP1_Init+0x48>)
 8002afc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_COMP1_Init+0x44>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_COMP1_Init+0x44>)
 8002b06:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <MX_COMP1_Init+0x4c>)
 8002b08:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <MX_COMP1_Init+0x44>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <MX_COMP1_Init+0x44>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_COMP1_Init+0x44>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <MX_COMP1_Init+0x44>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <MX_COMP1_Init+0x44>)
 8002b24:	f002 fefa 	bl	800591c <HAL_COMP_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8002b2e:	f000 fe89 	bl	8003844 <Error_Handler>
  }

}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200011dc 	.word	0x200011dc
 8002b3c:	40010200 	.word	0x40010200
 8002b40:	00800030 	.word	0x00800030

08002b44 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <HAL_COMP_MspInit+0x5c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d118      	bne.n	8002b98 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_COMP_MspInit+0x60>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <HAL_COMP_MspInit+0x60>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_COMP_MspInit+0x60>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b82:	2303      	movs	r3, #3
 8002b84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f107 030c 	add.w	r3, r7, #12
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b94:	f004 f846 	bl	8006c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40010200 	.word	0x40010200
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	; 0x30
 8002bac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002bae:	463b      	mov	r3, r7
 8002bb0:	2230      	movs	r2, #48	; 0x30
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f008 f81b 	bl	800abf0 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8002bba:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <MX_DAC1_Init+0x8c>)
 8002bbc:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <MX_DAC1_Init+0x90>)
 8002bbe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002bc0:	481c      	ldr	r0, [pc, #112]	; (8002c34 <MX_DAC1_Init+0x8c>)
 8002bc2:	f003 f94e 	bl	8005e62 <HAL_DAC_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002bcc:	f000 fe3a 	bl	8003844 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002bd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bd4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8002be2:	2306      	movs	r3, #6
 8002be4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	480d      	ldr	r0, [pc, #52]	; (8002c34 <MX_DAC1_Init+0x8c>)
 8002bfe:	f003 fb0f 	bl	8006220 <HAL_DAC_ConfigChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8002c08:	f000 fe1c 	bl	8003844 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002c10:	2301      	movs	r3, #1
 8002c12:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002c14:	463b      	mov	r3, r7
 8002c16:	2210      	movs	r2, #16
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4806      	ldr	r0, [pc, #24]	; (8002c34 <MX_DAC1_Init+0x8c>)
 8002c1c:	f003 fb00 	bl	8006220 <HAL_DAC_ConfigChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8002c26:	f000 fe0d 	bl	8003844 <Error_Handler>
  }

}
 8002c2a:	bf00      	nop
 8002c2c:	3730      	adds	r7, #48	; 0x30
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20001214 	.word	0x20001214
 8002c38:	50000800 	.word	0x50000800

08002c3c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002c42:	463b      	mov	r3, r7
 8002c44:	2230      	movs	r2, #48	; 0x30
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f007 ffd1 	bl	800abf0 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <MX_DAC2_Init+0x6c>)
 8002c50:	4a16      	ldr	r2, [pc, #88]	; (8002cac <MX_DAC2_Init+0x70>)
 8002c52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8002c54:	4814      	ldr	r0, [pc, #80]	; (8002ca8 <MX_DAC2_Init+0x6c>)
 8002c56:	f003 f904 	bl	8005e62 <HAL_DAC_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8002c60:	f000 fdf0 	bl	8003844 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002c64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c68:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8002c76:	2306      	movs	r3, #6
 8002c78:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_DAC2_Init+0x6c>)
 8002c92:	f003 fac5 	bl	8006220 <HAL_DAC_ConfigChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8002c9c:	f000 fdd2 	bl	8003844 <Error_Handler>
  }

}
 8002ca0:	bf00      	nop
 8002ca2:	3730      	adds	r7, #48	; 0x30
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20001200 	.word	0x20001200
 8002cac:	50000c00 	.word	0x50000c00

08002cb0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a56      	ldr	r2, [pc, #344]	; (8002e28 <HAL_DAC_MspInit+0x178>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d150      	bne.n	8002d74 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002cd2:	4b56      	ldr	r3, [pc, #344]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	4a55      	ldr	r2, [pc, #340]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cde:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	4a4f      	ldr	r2, [pc, #316]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d02:	2330      	movs	r3, #48	; 0x30
 8002d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d06:	2303      	movs	r3, #3
 8002d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f107 031c 	add.w	r3, r7, #28
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d18:	f003 ff84 	bl	8006c24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8002d1c:	4b44      	ldr	r3, [pc, #272]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d1e:	4a45      	ldr	r2, [pc, #276]	; (8002e34 <HAL_DAC_MspInit+0x184>)
 8002d20:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002d22:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d24:	2206      	movs	r2, #6
 8002d26:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d28:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2e:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002d34:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d40:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d42:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d48:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002d50:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002d56:	4836      	ldr	r0, [pc, #216]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d58:	f003 fc98 	bl	800668c <HAL_DMA_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002d62:	f000 fd6f 	bl	8003844 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <HAL_DAC_MspInit+0x180>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8002d72:	e054      	b.n	8002e1e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <HAL_DAC_MspInit+0x188>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d14f      	bne.n	8002e1e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_DAC_MspInit+0x17c>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dae:	2340      	movs	r3, #64	; 0x40
 8002db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db2:	2303      	movs	r3, #3
 8002db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc4:	f003 ff2e 	bl	8006c24 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_DAC_MspInit+0x190>)
 8002dcc:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8002dce:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002dd0:	2229      	movs	r2, #41	; 0x29
 8002dd2:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002de0:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dec:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002df4:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002df8:	2220      	movs	r2, #32
 8002dfa:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8002e02:	480e      	ldr	r0, [pc, #56]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002e04:	f003 fc42 	bl	800668c <HAL_DMA_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8002e0e:	f000 fd19 	bl	8003844 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <HAL_DAC_MspInit+0x18c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002e1e:	bf00      	nop
 8002e20:	3730      	adds	r7, #48	; 0x30
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	50000800 	.word	0x50000800
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	20001228 	.word	0x20001228
 8002e34:	4002001c 	.word	0x4002001c
 8002e38:	50000c00 	.word	0x50000c00
 8002e3c:	20001288 	.word	0x20001288
 8002e40:	40020030 	.word	0x40020030

08002e44 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <MX_DMA_Init+0x70>)
 8002e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4e:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <MX_DMA_Init+0x70>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	6493      	str	r3, [r2, #72]	; 0x48
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <MX_DMA_Init+0x70>)
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <MX_DMA_Init+0x70>)
 8002e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e66:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <MX_DMA_Init+0x70>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6493      	str	r3, [r2, #72]	; 0x48
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <MX_DMA_Init+0x70>)
 8002e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	200b      	movs	r0, #11
 8002e80:	f002 ffbb 	bl	8005dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002e84:	200b      	movs	r0, #11
 8002e86:	f002 ffd2 	bl	8005e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	200c      	movs	r0, #12
 8002e90:	f002 ffb3 	bl	8005dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002e94:	200c      	movs	r0, #12
 8002e96:	f002 ffca 	bl	8005e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	200d      	movs	r0, #13
 8002ea0:	f002 ffab 	bl	8005dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ea4:	200d      	movs	r0, #13
 8002ea6:	f002 ffc2 	bl	8005e2e <HAL_NVIC_EnableIRQ>

}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <update_dc_bias_sweep+0x88>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d006      	beq.n	8002ed2 <update_dc_bias_sweep+0x1a>
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <update_dc_bias_sweep+0x8c>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <update_dc_bias_sweep+0x8c>)
 8002ece:	801a      	strh	r2, [r3, #0]
 8002ed0:	e005      	b.n	8002ede <update_dc_bias_sweep+0x26>
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <update_dc_bias_sweep+0x8c>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <update_dc_bias_sweep+0x8c>)
 8002edc:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <update_dc_bias_sweep+0x8c>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <update_dc_bias_sweep+0x90>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <update_dc_bias_sweep+0x3e>
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <update_dc_bias_sweep+0x90>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e002      	b.n	8002efc <update_dc_bias_sweep+0x44>
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <update_dc_bias_sweep+0x90>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <update_dc_bias_sweep+0x8c>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <update_dc_bias_sweep+0x52>
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <update_dc_bias_sweep+0x88>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <update_dc_bias_sweep+0x8c>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f12:	d302      	bcc.n	8002f1a <update_dc_bias_sweep+0x62>
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <update_dc_bias_sweep+0x88>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <update_dc_bias_sweep+0x90>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	2108      	movs	r1, #8
 8002f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f28:	f004 f816 	bl	8006f58 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <update_dc_bias_sweep+0x8c>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2110      	movs	r1, #16
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <update_dc_bias_sweep+0x94>)
 8002f36:	f003 f921 	bl	800617c <HAL_DAC_SetValue>
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	200010ec 	.word	0x200010ec
 8002f48:	200010f0 	.word	0x200010f0
 8002f4c:	20001214 	.word	0x20001214

08002f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <__NVIC_GetPriorityGrouping+0x18>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 0307 	and.w	r3, r3, #7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	db0b      	blt.n	8002f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	4907      	ldr	r1, [pc, #28]	; (8002fa4 <__NVIC_EnableIRQ+0x38>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db0a      	blt.n	8002fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	490c      	ldr	r1, [pc, #48]	; (8002ff4 <__NVIC_SetPriority+0x4c>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd0:	e00a      	b.n	8002fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4908      	ldr	r1, [pc, #32]	; (8002ff8 <__NVIC_SetPriority+0x50>)
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	761a      	strb	r2, [r3, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f1c3 0307 	rsb	r3, r3, #7
 8003016:	2b04      	cmp	r3, #4
 8003018:	bf28      	it	cs
 800301a:	2304      	movcs	r3, #4
 800301c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3304      	adds	r3, #4
 8003022:	2b06      	cmp	r3, #6
 8003024:	d902      	bls.n	800302c <NVIC_EncodePriority+0x30>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3b03      	subs	r3, #3
 800302a:	e000      	b.n	800302e <NVIC_EncodePriority+0x32>
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43d9      	mvns	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	4313      	orrs	r3, r2
         );
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	; 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800306e:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	3302      	adds	r3, #2
 8003078:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	43db      	mvns	r3, r3
 8003082:	ea02 0103 	and.w	r1, r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	409a      	lsls	r2, r3
 80030a4:	4806      	ldr	r0, [pc, #24]	; (80030c0 <LL_SYSCFG_SetEXTISource+0x5c>)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	430a      	orrs	r2, r1
 80030ae:	3302      	adds	r3, #2
 80030b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40010000 	.word	0x40010000

080030c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	613b      	str	r3, [r7, #16]
  return result;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	2103      	movs	r1, #3
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	61bb      	str	r3, [r7, #24]
  return result;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	431a      	orrs	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	3724      	adds	r7, #36	; 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003122:	b480      	push	{r7}
 8003124:	b089      	sub	sp, #36	; 0x24
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	613b      	str	r3, [r7, #16]
  return result;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2103      	movs	r1, #3
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	401a      	ands	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	61bb      	str	r3, [r7, #24]
  return result;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	431a      	orrs	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	60da      	str	r2, [r3, #12]
}
 8003174:	bf00      	nop
 8003176:	3724      	adds	r7, #36	; 0x24
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80031a4:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80031a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a8:	4907      	ldr	r1, [pc, #28]	; (80031c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80031b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4013      	ands	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40021000 	.word	0x40021000

080031cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80031d2:	f107 031c 	add.w	r3, r7, #28
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]
 80031ec:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80031ee:	2004      	movs	r0, #4
 80031f0:	f7ff ffd4 	bl	800319c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80031f4:	2020      	movs	r0, #32
 80031f6:	f7ff ffd1 	bl	800319c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80031fa:	2001      	movs	r0, #1
 80031fc:	f7ff ffce 	bl	800319c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003200:	2002      	movs	r0, #2
 8003202:	f7ff ffcb 	bl	800319c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8003206:	2108      	movs	r1, #8
 8003208:	48d3      	ldr	r0, [pc, #844]	; (8003558 <MX_GPIO_Init+0x38c>)
 800320a:	f7ff ffb9 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 800320e:	2108      	movs	r1, #8
 8003210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003214:	f7ff ffb4 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8003218:	2110      	movs	r1, #16
 800321a:	48cf      	ldr	r0, [pc, #828]	; (8003558 <MX_GPIO_Init+0x38c>)
 800321c:	f7ff ffb0 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8003220:	2120      	movs	r1, #32
 8003222:	48cd      	ldr	r0, [pc, #820]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003224:	f7ff ffac 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8003228:	2101      	movs	r1, #1
 800322a:	48cc      	ldr	r0, [pc, #816]	; (800355c <MX_GPIO_Init+0x390>)
 800322c:	f7ff ffa8 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8003230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003234:	48c8      	ldr	r0, [pc, #800]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003236:	f7ff ffa3 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800323a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800323e:	48c6      	ldr	r0, [pc, #792]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003240:	f7ff ff9e 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8003244:	2140      	movs	r1, #64	; 0x40
 8003246:	48c5      	ldr	r0, [pc, #788]	; (800355c <MX_GPIO_Init+0x390>)
 8003248:	f7ff ff9a 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	48c3      	ldr	r0, [pc, #780]	; (800355c <MX_GPIO_Init+0x390>)
 8003250:	f7ff ff96 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8003254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003258:	48c0      	ldr	r0, [pc, #768]	; (800355c <MX_GPIO_Init+0x390>)
 800325a:	f7ff ff91 	bl	8003180 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800325e:	49c0      	ldr	r1, [pc, #768]	; (8003560 <MX_GPIO_Init+0x394>)
 8003260:	2002      	movs	r0, #2
 8003262:	f7ff feff 	bl	8003064 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8003266:	49bf      	ldr	r1, [pc, #764]	; (8003564 <MX_GPIO_Init+0x398>)
 8003268:	2002      	movs	r0, #2
 800326a:	f7ff fefb 	bl	8003064 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800326e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8003272:	2005      	movs	r0, #5
 8003274:	f7ff fef6 	bl	8003064 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8003278:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800327c:	2005      	movs	r0, #5
 800327e:	f7ff fef1 	bl	8003064 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8003282:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8003286:	2002      	movs	r0, #2
 8003288:	f7ff feec 	bl	8003064 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800328c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003290:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003298:	2300      	movs	r3, #0
 800329a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800329e:	2302      	movs	r3, #2
 80032a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	4618      	mov	r0, r3
 80032aa:	f006 faab 	bl	8009804 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80032ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80032c0:	2302      	movs	r3, #2
 80032c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80032c6:	f107 031c 	add.w	r3, r7, #28
 80032ca:	4618      	mov	r0, r3
 80032cc:	f006 fa9a 	bl	8009804 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80032d0:	2301      	movs	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80032e0:	2302      	movs	r3, #2
 80032e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80032e6:	f107 031c 	add.w	r3, r7, #28
 80032ea:	4618      	mov	r0, r3
 80032ec:	f006 fa8a 	bl	8009804 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8003300:	2302      	movs	r3, #2
 8003302:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8003306:	f107 031c 	add.w	r3, r7, #28
 800330a:	4618      	mov	r0, r3
 800330c:	f006 fa7a 	bl	8009804 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8003310:	2304      	movs	r3, #4
 8003312:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800331a:	2300      	movs	r3, #0
 800331c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8003320:	2302      	movs	r3, #2
 8003322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8003326:	f107 031c 	add.w	r3, r7, #28
 800332a:	4618      	mov	r0, r3
 800332c:	f006 fa6a 	bl	8009804 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8003330:	2201      	movs	r2, #1
 8003332:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003336:	4888      	ldr	r0, [pc, #544]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003338:	f7ff fef3 	bl	8003122 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 800333c:	2201      	movs	r2, #1
 800333e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003342:	4885      	ldr	r0, [pc, #532]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003344:	f7ff feed 	bl	8003122 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8003348:	2201      	movs	r2, #1
 800334a:	2101      	movs	r1, #1
 800334c:	4886      	ldr	r0, [pc, #536]	; (8003568 <MX_GPIO_Init+0x39c>)
 800334e:	f7ff fee8 	bl	8003122 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8003352:	2201      	movs	r2, #1
 8003354:	2102      	movs	r1, #2
 8003356:	4884      	ldr	r0, [pc, #528]	; (8003568 <MX_GPIO_Init+0x39c>)
 8003358:	f7ff fee3 	bl	8003122 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 800335c:	2201      	movs	r2, #1
 800335e:	2104      	movs	r1, #4
 8003360:	487d      	ldr	r0, [pc, #500]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003362:	f7ff fede 	bl	8003122 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8003366:	2200      	movs	r2, #0
 8003368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800336c:	487a      	ldr	r0, [pc, #488]	; (8003558 <MX_GPIO_Init+0x38c>)
 800336e:	f7ff fea9 	bl	80030c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8003372:	2200      	movs	r2, #0
 8003374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003378:	4877      	ldr	r0, [pc, #476]	; (8003558 <MX_GPIO_Init+0x38c>)
 800337a:	f7ff fea3 	bl	80030c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800337e:	2200      	movs	r2, #0
 8003380:	2101      	movs	r1, #1
 8003382:	4879      	ldr	r0, [pc, #484]	; (8003568 <MX_GPIO_Init+0x39c>)
 8003384:	f7ff fe9e 	bl	80030c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8003388:	2200      	movs	r2, #0
 800338a:	2102      	movs	r1, #2
 800338c:	4876      	ldr	r0, [pc, #472]	; (8003568 <MX_GPIO_Init+0x39c>)
 800338e:	f7ff fe99 	bl	80030c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8003392:	2200      	movs	r2, #0
 8003394:	2104      	movs	r1, #4
 8003396:	4870      	ldr	r0, [pc, #448]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003398:	f7ff fe94 	bl	80030c4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 800339c:	2308      	movs	r3, #8
 800339e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033a0:	2301      	movs	r3, #1
 80033a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80033ac:	2302      	movs	r3, #2
 80033ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	4619      	mov	r1, r3
 80033b4:	4868      	ldr	r0, [pc, #416]	; (8003558 <MX_GPIO_Init+0x38c>)
 80033b6:	f006 fc18 	bl	8009bea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80033ba:	2308      	movs	r3, #8
 80033bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033be:	2301      	movs	r3, #1
 80033c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d6:	f006 fc08 	bl	8009bea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80033da:	2310      	movs	r3, #16
 80033dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033de:	2301      	movs	r3, #1
 80033e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4859      	ldr	r0, [pc, #356]	; (8003558 <MX_GPIO_Init+0x38c>)
 80033f4:	f006 fbf9 	bl	8009bea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 80033f8:	2320      	movs	r3, #32
 80033fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033fc:	2301      	movs	r3, #1
 80033fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	4619      	mov	r1, r3
 8003410:	4851      	ldr	r0, [pc, #324]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003412:	f006 fbea 	bl	8009bea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8003416:	2301      	movs	r3, #1
 8003418:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800341a:	2301      	movs	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	4619      	mov	r1, r3
 800342e:	484b      	ldr	r0, [pc, #300]	; (800355c <MX_GPIO_Init+0x390>)
 8003430:	f006 fbdb 	bl	8009bea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8003434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003438:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800343a:	2301      	movs	r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4842      	ldr	r0, [pc, #264]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003450:	f006 fbcb 	bl	8009bea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8003454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800345a:	2301      	movs	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	4619      	mov	r1, r3
 800346e:	483a      	ldr	r0, [pc, #232]	; (8003558 <MX_GPIO_Init+0x38c>)
 8003470:	f006 fbbb 	bl	8009bea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003478:	2301      	movs	r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800347c:	2303      	movs	r3, #3
 800347e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4833      	ldr	r0, [pc, #204]	; (800355c <MX_GPIO_Init+0x390>)
 800348e:	f006 fbac 	bl	8009bea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003496:	2301      	movs	r3, #1
 8003498:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800349a:	2303      	movs	r3, #3
 800349c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	482c      	ldr	r0, [pc, #176]	; (800355c <MX_GPIO_Init+0x390>)
 80034ac:	f006 fb9d 	bl	8009bea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80034b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80034b6:	2301      	movs	r3, #1
 80034b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80034ba:	2303      	movs	r3, #3
 80034bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4824      	ldr	r0, [pc, #144]	; (800355c <MX_GPIO_Init+0x390>)
 80034cc:	f006 fb8d 	bl	8009bea <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80034d0:	f7ff fd3e 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2200      	movs	r2, #0
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fd8e 	bl	8002ffc <NVIC_EncodePriority>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4619      	mov	r1, r3
 80034e4:	2006      	movs	r0, #6
 80034e6:	f7ff fd5f 	bl	8002fa8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80034ea:	2006      	movs	r0, #6
 80034ec:	f7ff fd3e 	bl	8002f6c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80034f0:	f7ff fd2e 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2200      	movs	r2, #0
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fd7e 	bl	8002ffc <NVIC_EncodePriority>
 8003500:	4603      	mov	r3, r0
 8003502:	4619      	mov	r1, r3
 8003504:	2007      	movs	r0, #7
 8003506:	f7ff fd4f 	bl	8002fa8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800350a:	2007      	movs	r0, #7
 800350c:	f7ff fd2e 	bl	8002f6c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003510:	f7ff fd1e 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 8003514:	4603      	mov	r3, r0
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fd6e 	bl	8002ffc <NVIC_EncodePriority>
 8003520:	4603      	mov	r3, r0
 8003522:	4619      	mov	r1, r3
 8003524:	2008      	movs	r0, #8
 8003526:	f7ff fd3f 	bl	8002fa8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800352a:	2008      	movs	r0, #8
 800352c:	f7ff fd1e 	bl	8002f6c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003530:	f7ff fd0e 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 8003534:	4603      	mov	r3, r0
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fd5e 	bl	8002ffc <NVIC_EncodePriority>
 8003540:	4603      	mov	r3, r0
 8003542:	4619      	mov	r1, r3
 8003544:	2028      	movs	r0, #40	; 0x28
 8003546:	f7ff fd2f 	bl	8002fa8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800354a:	2028      	movs	r0, #40	; 0x28
 800354c:	f7ff fd0e 	bl	8002f6c <__NVIC_EnableIRQ>

}
 8003550:	bf00      	nop
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	e009      	b.n	800356c <MX_GPIO_Init+0x3a0>
 8003558:	48000800 	.word	0x48000800
 800355c:	48000400 	.word	0x48000400
 8003560:	0f000003 	.word	0x0f000003
 8003564:	f0000003 	.word	0xf0000003
 8003568:	48001400 	.word	0x48001400
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop

08003570 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003578:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800357c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800358c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003590:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003598:	e000      	b.n	800359c <ITM_SendChar+0x2c>
    {
      __NOP();
 800359a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800359c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f9      	beq.n	800359a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80035a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80035b0:	687b      	ldr	r3, [r7, #4]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e009      	b.n	80035e8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	60ba      	str	r2, [r7, #8]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ffc7 	bl	8003570 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	3301      	adds	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	dbf1      	blt.n	80035d4 <_write+0x16>
  return len;
 80035f0:	687b      	ldr	r3, [r7, #4]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
	// do something
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003616:	f000 ff42 	bl	800449e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800361a:	f000 f8a5 	bl	8003768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800361e:	f7ff fdd5 	bl	80031cc <MX_GPIO_Init>
  MX_DMA_Init();
 8003622:	f7ff fc0f 	bl	8002e44 <MX_DMA_Init>
  MX_DAC1_Init();
 8003626:	f7ff fabf 	bl	8002ba8 <MX_DAC1_Init>
  MX_DAC2_Init();
 800362a:	f7ff fb07 	bl	8002c3c <MX_DAC2_Init>
  MX_ADC1_Init();
 800362e:	f7ff f97d 	bl	800292c <MX_ADC1_Init>
  MX_COMP1_Init();
 8003632:	f7ff fa5f 	bl	8002af4 <MX_COMP1_Init>
  MX_TIM2_Init();
 8003636:	f000 fc29 	bl	8003e8c <MX_TIM2_Init>
  MX_TIM17_Init();
 800363a:	f000 fdc1 	bl	80041c0 <MX_TIM17_Init>
  MX_SPI3_Init();
 800363e:	f000 f93f 	bl	80038c0 <MX_SPI3_Init>
  MX_RNG_Init();
 8003642:	f000 f92f 	bl	80038a4 <MX_RNG_Init>
  MX_TIM1_Init();
 8003646:	f000 fbb1 	bl	8003dac <MX_TIM1_Init>
  MX_TIM8_Init();
 800364a:	f000 fcd9 	bl	8004000 <MX_TIM8_Init>
  MX_TIM16_Init();
 800364e:	f000 fd91 	bl	8004174 <MX_TIM16_Init>
  MX_TIM15_Init();
 8003652:	f000 fd3d 	bl	80040d0 <MX_TIM15_Init>
  MX_TIM5_Init();
 8003656:	f000 fc83 	bl	8003f60 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	2378      	movs	r3, #120	; 0x78
 8003660:	4a34      	ldr	r2, [pc, #208]	; (8003734 <main+0x124>)
 8003662:	2100      	movs	r1, #0
 8003664:	4834      	ldr	r0, [pc, #208]	; (8003738 <main+0x128>)
 8003666:	f002 fc71 	bl	8005f4c <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800366a:	2110      	movs	r1, #16
 800366c:	4832      	ldr	r0, [pc, #200]	; (8003738 <main+0x128>)
 800366e:	f002 fc1a 	bl	8005ea6 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003672:	2300      	movs	r3, #0
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2378      	movs	r3, #120	; 0x78
 8003678:	4a30      	ldr	r2, [pc, #192]	; (800373c <main+0x12c>)
 800367a:	2100      	movs	r1, #0
 800367c:	4830      	ldr	r0, [pc, #192]	; (8003740 <main+0x130>)
 800367e:	f002 fc65 	bl	8005f4c <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8003682:	4830      	ldr	r0, [pc, #192]	; (8003744 <main+0x134>)
 8003684:	f004 ffe4 	bl	8008650 <HAL_TIM_Base_Start>
  TIM8->ARR = 14015;			// 100Hz
 8003688:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <main+0x138>)
 800368a:	f243 62bf 	movw	r2, #14015	; 0x36bf
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
  //TIM8->ARR = 65535;
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8003690:	2201      	movs	r2, #1
 8003692:	2108      	movs	r1, #8
 8003694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003698:	f003 fc5e 	bl	8006f58 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800369c:	2201      	movs	r2, #1
 800369e:	2101      	movs	r1, #1
 80036a0:	482a      	ldr	r0, [pc, #168]	; (800374c <main+0x13c>)
 80036a2:	f003 fc59 	bl	8006f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80036a6:	2201      	movs	r2, #1
 80036a8:	2120      	movs	r1, #32
 80036aa:	4829      	ldr	r0, [pc, #164]	; (8003750 <main+0x140>)
 80036ac:	f003 fc54 	bl	8006f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80036b0:	2201      	movs	r2, #1
 80036b2:	2110      	movs	r1, #16
 80036b4:	4826      	ldr	r0, [pc, #152]	; (8003750 <main+0x140>)
 80036b6:	f003 fc4f 	bl	8006f58 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80036ba:	2200      	movs	r2, #0
 80036bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c0:	4823      	ldr	r0, [pc, #140]	; (8003750 <main+0x140>)
 80036c2:	f003 fc49 	bl	8006f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80036c6:	2200      	movs	r2, #0
 80036c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036cc:	4820      	ldr	r0, [pc, #128]	; (8003750 <main+0x140>)
 80036ce:	f003 fc43 	bl	8006f58 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80036d2:	2201      	movs	r2, #1
 80036d4:	2108      	movs	r1, #8
 80036d6:	481e      	ldr	r0, [pc, #120]	; (8003750 <main+0x140>)
 80036d8:	f003 fc3e 	bl	8006f58 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80036dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 80036ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036f6:	f043 0305 	orr.w	r3, r3, #5
 80036fa:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80036fc:	4815      	ldr	r0, [pc, #84]	; (8003754 <main+0x144>)
 80036fe:	f004 ffd5 	bl	80086ac <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8003702:	4815      	ldr	r0, [pc, #84]	; (8003758 <main+0x148>)
 8003704:	f004 ffa4 	bl	8008650 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <main+0x14c>)
 800370a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <main+0x14c>)
 8003712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8003718:	f7fc fdd2 	bl	80002c0 <DM_Init>
  DM_PostInit();
 800371c:	f7fc fdde 	bl	80002dc <DM_PostInit>


  HAL_TIM_Base_Start_IT(&htim15);
 8003720:	480f      	ldr	r0, [pc, #60]	; (8003760 <main+0x150>)
 8003722:	f004 ffc3 	bl	80086ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8003726:	480f      	ldr	r0, [pc, #60]	; (8003764 <main+0x154>)
 8003728:	f004 ff92 	bl	8008650 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 800372c:	f7fe fb3a 	bl	8001da4 <EM_ProcessEvent>
 8003730:	e7fc      	b.n	800372c <main+0x11c>
 8003732:	bf00      	nop
 8003734:	200008e4 	.word	0x200008e4
 8003738:	20001214 	.word	0x20001214
 800373c:	20000ca4 	.word	0x20000ca4
 8003740:	20001200 	.word	0x20001200
 8003744:	2000134c 	.word	0x2000134c
 8003748:	40013400 	.word	0x40013400
 800374c:	48000400 	.word	0x48000400
 8003750:	48000800 	.word	0x48000800
 8003754:	200014c8 	.word	0x200014c8
 8003758:	2000147c 	.word	0x2000147c
 800375c:	40001000 	.word	0x40001000
 8003760:	20001398 	.word	0x20001398
 8003764:	20001430 	.word	0x20001430

08003768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b0a8      	sub	sp, #160	; 0xa0
 800376c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800376e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003772:	2238      	movs	r2, #56	; 0x38
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f007 fa3a 	bl	800abf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800377c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800378c:	463b      	mov	r3, r7
 800378e:	2254      	movs	r2, #84	; 0x54
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f007 fa2c 	bl	800abf0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003798:	2000      	movs	r0, #0
 800379a:	f003 fbf5 	bl	8006f88 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800379e:	2322      	movs	r3, #34	; 0x22
 80037a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037a8:	2340      	movs	r3, #64	; 0x40
 80037aa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037b8:	2302      	movs	r3, #2
 80037ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80037be:	2302      	movs	r3, #2
 80037c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80037c4:	232a      	movs	r3, #42	; 0x2a
 80037c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037ca:	2302      	movs	r3, #2
 80037cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80037d0:	2304      	movs	r3, #4
 80037d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037d6:	2302      	movs	r3, #2
 80037d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037e0:	4618      	mov	r0, r3
 80037e2:	f003 fc75 	bl	80070d0 <HAL_RCC_OscConfig>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80037ec:	f000 f82a 	bl	8003844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f0:	230f      	movs	r3, #15
 80037f2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037f4:	2303      	movs	r3, #3
 80037f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037f8:	2300      	movs	r3, #0
 80037fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037fc:	2300      	movs	r3, #0
 80037fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003800:	2300      	movs	r3, #0
 8003802:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8003804:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003808:	2108      	movs	r1, #8
 800380a:	4618      	mov	r0, r3
 800380c:	f003 ff78 	bl	8007700 <HAL_RCC_ClockConfig>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003816:	f000 f815 	bl	8003844 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800381a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800381e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003820:	2300      	movs	r3, #0
 8003822:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003824:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003828:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382a:	463b      	mov	r3, r7
 800382c:	4618      	mov	r0, r3
 800382e:	f004 f957 	bl	8007ae0 <HAL_RCCEx_PeriphCLKConfig>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003838:	f000 f804 	bl	8003844 <Error_Handler>
  }
}
 800383c:	bf00      	nop
 800383e:	37a0      	adds	r7, #160	; 0xa0
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f043 0204 	orr.w	r2, r3, #4
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	601a      	str	r2, [r3, #0]
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <LL_AHB2_GRP1_EnableClock>:
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800387e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4313      	orrs	r3, r2
 8003886:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800388a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4013      	ands	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003892:	68fb      	ldr	r3, [r7, #12]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40021000 	.word	0x40021000

080038a4 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80038a8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80038ac:	f7ff ffe2 	bl	8003874 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80038b0:	4802      	ldr	r0, [pc, #8]	; (80038bc <MX_RNG_Init+0x18>)
 80038b2:	f7ff ffce 	bl	8003852 <LL_RNG_Enable>

}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	50060800 	.word	0x50060800

080038c0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <MX_SPI3_Init+0x74>)
 80038c6:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <MX_SPI3_Init+0x78>)
 80038c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <MX_SPI3_Init+0x74>)
 80038cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80038d2:	4b18      	ldr	r3, [pc, #96]	; (8003934 <MX_SPI3_Init+0x74>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80038d8:	4b16      	ldr	r3, [pc, #88]	; (8003934 <MX_SPI3_Init+0x74>)
 80038da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <MX_SPI3_Init+0x74>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <MX_SPI3_Init+0x74>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80038ec:	4b11      	ldr	r3, [pc, #68]	; (8003934 <MX_SPI3_Init+0x74>)
 80038ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <MX_SPI3_Init+0x74>)
 80038f6:	2210      	movs	r2, #16
 80038f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <MX_SPI3_Init+0x74>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <MX_SPI3_Init+0x74>)
 8003902:	2200      	movs	r2, #0
 8003904:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <MX_SPI3_Init+0x74>)
 8003908:	2200      	movs	r2, #0
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <MX_SPI3_Init+0x74>)
 800390e:	2207      	movs	r2, #7
 8003910:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <MX_SPI3_Init+0x74>)
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <MX_SPI3_Init+0x74>)
 800391a:	2208      	movs	r2, #8
 800391c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800391e:	4805      	ldr	r0, [pc, #20]	; (8003934 <MX_SPI3_Init+0x74>)
 8003920:	f004 fb2a 	bl	8007f78 <HAL_SPI_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800392a:	f7ff ff8b 	bl	8003844 <Error_Handler>
  }

}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200012e8 	.word	0x200012e8
 8003938:	40003c00 	.word	0x40003c00

0800393c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <HAL_SPI_MspInit+0x7c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d128      	bne.n	80039b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800395e:	4b17      	ldr	r3, [pc, #92]	; (80039bc <HAL_SPI_MspInit+0x80>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <HAL_SPI_MspInit+0x80>)
 8003964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003968:	6593      	str	r3, [r2, #88]	; 0x58
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_SPI_MspInit+0x80>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_SPI_MspInit+0x80>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397a:	4a10      	ldr	r2, [pc, #64]	; (80039bc <HAL_SPI_MspInit+0x80>)
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <HAL_SPI_MspInit+0x80>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800398e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003994:	2302      	movs	r3, #2
 8003996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399c:	2300      	movs	r3, #0
 800399e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80039a0:	2306      	movs	r3, #6
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	4619      	mov	r1, r3
 80039aa:	4805      	ldr	r0, [pc, #20]	; (80039c0 <HAL_SPI_MspInit+0x84>)
 80039ac:	f003 f93a 	bl	8006c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80039b0:	bf00      	nop
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40003c00 	.word	0x40003c00
 80039bc:	40021000 	.word	0x40021000
 80039c0:	48000800 	.word	0x48000800

080039c4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80039ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d2:	6093      	str	r3, [r2, #8]
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40007000 	.word	0x40007000

080039e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_MspInit+0x44>)
 80039ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ee:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <HAL_MspInit+0x44>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6613      	str	r3, [r2, #96]	; 0x60
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_MspInit+0x44>)
 80039f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_MspInit+0x44>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <HAL_MspInit+0x44>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_MspInit+0x44>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8003a1a:	f7ff ffd3 	bl	80039c4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000

08003a2c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d101      	bne.n	8003a46 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40010400 	.word	0x40010400

08003a58 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6153      	str	r3, [r2, #20]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40010400 	.word	0x40010400

08003a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a8a:	e7fe      	b.n	8003a8a <HardFault_Handler+0x4>

08003a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a90:	e7fe      	b.n	8003a90 <MemManage_Handler+0x4>

08003a92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a96:	e7fe      	b.n	8003a96 <BusFault_Handler+0x4>

08003a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <UsageFault_Handler+0x4>

08003a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003acc:	f000 fd3a 	bl	8004544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evRedBtn);
 8003ad8:	2004      	movs	r0, #4
 8003ada:	f7fe fb59 	bl	8002190 <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8003ade:	2001      	movs	r0, #1
 8003ae0:	f7ff ffa4 	bl	8003a2c <LL_EXTI_IsActiveFlag_0_31>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8003aea:	2001      	movs	r0, #1
 8003aec:	f7ff ffb4 	bl	8003a58 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evGreenBtn);
 8003af8:	2002      	movs	r0, #2
 8003afa:	f7fe fb49 	bl	8002190 <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8003afe:	2002      	movs	r0, #2
 8003b00:	f7ff ff94 	bl	8003a2c <LL_EXTI_IsActiveFlag_0_31>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f7ff ffa4 	bl	8003a58 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 8003b18:	2006      	movs	r0, #6
 8003b1a:	f7fe fb39 	bl	8002190 <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8003b1e:	2004      	movs	r0, #4
 8003b20:	f7ff ff84 	bl	8003a2c <LL_EXTI_IsActiveFlag_0_31>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8003b2a:	2004      	movs	r0, #4
 8003b2c:	f7ff ff94 	bl	8003a58 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <DMA1_Channel1_IRQHandler+0x10>)
 8003b3a:	f002 ff23 	bl	8006984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	2000117c 	.word	0x2000117c

08003b48 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <DMA1_Channel2_IRQHandler+0x10>)
 8003b4e:	f002 ff19 	bl	8006984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20001228 	.word	0x20001228

08003b5c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <DMA1_Channel3_IRQHandler+0x10>)
 8003b62:	f002 ff0f 	bl	8006984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20001288 	.word	0x20001288

08003b70 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8003b74:	f7fc fbd0 	bl	8000318 <DM_UpdateDisplay>
	//DM_TestScreen();

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8003b78:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8003b7e:	8812      	ldrh	r2, [r2, #0]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d305      	bcc.n	8003b90 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8003b84:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8003b8a:	8812      	ldrh	r2, [r2, #0]
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d902      	bls.n	8003b96 <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8003b90:	2005      	movs	r0, #5
 8003b92:	f7fe fafd 	bl	8002190 <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8003b9e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ba0:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8003ba2:	f004 fe8e 	bl	80088c2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003ba6:	4805      	ldr	r0, [pc, #20]	; (8003bbc <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8003ba8:	f004 fe8b 	bl	80088c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	200010f4 	.word	0x200010f4
 8003bb8:	2000147c 	.word	0x2000147c
 8003bbc:	20001398 	.word	0x20001398

08003bc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8003bc4:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bcc:	4805      	ldr	r0, [pc, #20]	; (8003be4 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8003bce:	f004 fe78 	bl	80088c2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003bd2:	4805      	ldr	r0, [pc, #20]	; (8003be8 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8003bd4:	f004 fe75 	bl	80088c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003bd8:	bf00      	nop
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20001104 	.word	0x20001104
 8003be0:	0800be8c 	.word	0x0800be8c
 8003be4:	2000147c 	.word	0x2000147c
 8003be8:	20001514 	.word	0x20001514

08003bec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8003bf0:	f7ff f962 	bl	8002eb8 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bf4:	4803      	ldr	r0, [pc, #12]	; (8003c04 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003bf6:	f004 fe64 	bl	80088c2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8003bfa:	4803      	ldr	r0, [pc, #12]	; (8003c08 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8003bfc:	f004 fe61 	bl	80088c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	2000147c 	.word	0x2000147c
 8003c08:	200013e4 	.word	0x200013e4

08003c0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c10:	4802      	ldr	r0, [pc, #8]	; (8003c1c <TIM2_IRQHandler+0x10>)
 8003c12:	f004 fe56 	bl	80088c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200014c8 	.word	0x200014c8

08003c20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8003c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c28:	4815      	ldr	r0, [pc, #84]	; (8003c80 <EXTI15_10_IRQHandler+0x60>)
 8003c2a:	f003 f97d 	bl	8006f28 <HAL_GPIO_ReadPin>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evYellowBtn);
 8003c34:	2003      	movs	r0, #3
 8003c36:	f7fe faab 	bl	8002190 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8003c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c3e:	4810      	ldr	r0, [pc, #64]	; (8003c80 <EXTI15_10_IRQHandler+0x60>)
 8003c40:	f003 f972 	bl	8006f28 <HAL_GPIO_ReadPin>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evBlueBtn);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f7fe faa0 	bl	8002190 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8003c50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c54:	f7ff feea 	bl	8003a2c <LL_EXTI_IsActiveFlag_0_31>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8003c5e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c62:	f7ff fef9 	bl	8003a58 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8003c66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c6a:	f7ff fedf 	bl	8003a2c <LL_EXTI_IsActiveFlag_0_31>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8003c74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c78:	f7ff feee 	bl	8003a58 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	48000800 	.word	0x48000800

08003c84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e00a      	b.n	8003cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c96:	f3af 8000 	nop.w
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	60ba      	str	r2, [r7, #8]
 8003ca2:	b2ca      	uxtb	r2, r1
 8003ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	dbf0      	blt.n	8003c96 <_read+0x12>
	}

return len;
 8003cb4:	687b      	ldr	r3, [r7, #4]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	return -1;
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ce6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <_isatty>:

int _isatty(int file)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8003cfe:	2301      	movs	r3, #1
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
	return 0;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <_sbrk+0x50>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <_sbrk+0x16>
		heap_end = &end;
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <_sbrk+0x50>)
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <_sbrk+0x54>)
 8003d3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <_sbrk+0x50>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <_sbrk+0x50>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	466a      	mov	r2, sp
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d907      	bls.n	8003d62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d52:	f006 ff23 	bl	800ab9c <__errno>
 8003d56:	4602      	mov	r2, r0
 8003d58:	230c      	movs	r3, #12
 8003d5a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d60:	e006      	b.n	8003d70 <_sbrk+0x48>
	}

	heap_end += incr;
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <_sbrk+0x50>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	4a03      	ldr	r2, [pc, #12]	; (8003d78 <_sbrk+0x50>)
 8003d6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	200010f8 	.word	0x200010f8
 8003d7c:	20001568 	.word	0x20001568

08003d80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d84:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <SystemInit+0x28>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	4a07      	ldr	r2, [pc, #28]	; (8003da8 <SystemInit+0x28>)
 8003d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <SystemInit+0x28>)
 8003d96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d9a:	609a      	str	r2, [r3, #8]
#endif
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b09a      	sub	sp, #104	; 0x68
 8003db0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003db2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f006 ff18 	bl	800abf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dcc:	1d3b      	adds	r3, r7, #4
 8003dce:	2234      	movs	r2, #52	; 0x34
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f006 ff0c 	bl	800abf0 <memset>

  htim1.Instance = TIM1;
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003dda:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <MX_TIM1_Init+0xdc>)
 8003ddc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8003de4:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003de6:	2240      	movs	r2, #64	; 0x40
 8003de8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003df0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003df8:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dfe:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e04:	2303      	movs	r3, #3
 8003e06:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e10:	2300      	movs	r3, #0
 8003e12:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e20:	2300      	movs	r3, #0
 8003e22:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003e28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4815      	ldr	r0, [pc, #84]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003e30:	f004 fca1 	bl	8008776 <HAL_TIM_Encoder_Init>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003e3a:	f7ff fd03 	bl	8003844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e4e:	4619      	mov	r1, r3
 8003e50:	480c      	ldr	r0, [pc, #48]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003e52:	f005 fa19 	bl	8009288 <HAL_TIMEx_MasterConfigSynchronization>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003e5c:	f7ff fcf2 	bl	8003844 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003e60:	2300      	movs	r3, #0
 8003e62:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003e64:	2300      	movs	r3, #0
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4805      	ldr	r0, [pc, #20]	; (8003e84 <MX_TIM1_Init+0xd8>)
 8003e6e:	f005 faa1 	bl	80093b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8003e78:	f7ff fce4 	bl	8003844 <Error_Handler>
  }

}
 8003e7c:	bf00      	nop
 8003e7e:	3768      	adds	r7, #104	; 0x68
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	2000147c 	.word	0x2000147c
 8003e88:	40012c00 	.word	0x40012c00

08003e8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08c      	sub	sp, #48	; 0x30
 8003e90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e92:	f107 0320 	add.w	r3, r7, #32
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
 8003e9e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ec0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8003ec2:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003ec4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003ec8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8003ed0:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ed6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ed8:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ede:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ee4:	481d      	ldr	r0, [pc, #116]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003ee6:	f004 fb5c 	bl	80085a2 <HAL_TIM_Base_Init>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003ef0:	f7ff fca8 	bl	8003844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003efa:	f107 0320 	add.w	r3, r7, #32
 8003efe:	4619      	mov	r1, r3
 8003f00:	4816      	ldr	r0, [pc, #88]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003f02:	f004 fe5d 	bl	8008bc0 <HAL_TIM_ConfigClockSource>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003f0c:	f7ff fc9a 	bl	8003844 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8003f10:	2305      	movs	r3, #5
 8003f12:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003f14:	2350      	movs	r3, #80	; 0x50
 8003f16:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4619      	mov	r1, r3
 8003f26:	480d      	ldr	r0, [pc, #52]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003f28:	f004 ff3a 	bl	8008da0 <HAL_TIM_SlaveConfigSynchro>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003f32:	f7ff fc87 	bl	8003844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f3e:	463b      	mov	r3, r7
 8003f40:	4619      	mov	r1, r3
 8003f42:	4806      	ldr	r0, [pc, #24]	; (8003f5c <MX_TIM2_Init+0xd0>)
 8003f44:	f005 f9a0 	bl	8009288 <HAL_TIMEx_MasterConfigSynchronization>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8003f4e:	f7ff fc79 	bl	8003844 <Error_Handler>
  }

}
 8003f52:	bf00      	nop
 8003f54:	3730      	adds	r7, #48	; 0x30
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200014c8 	.word	0x200014c8

08003f60 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f66:	f107 0310 	add.w	r3, r7, #16
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <MX_TIM5_Init+0x98>)
 8003f80:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <MX_TIM5_Init+0x9c>)
 8003f82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8003f84:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <MX_TIM5_Init+0x98>)
 8003f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f8a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <MX_TIM5_Init+0x98>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003f92:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <MX_TIM5_Init+0x98>)
 8003f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003f9a:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <MX_TIM5_Init+0x98>)
 8003f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <MX_TIM5_Init+0x98>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003fa8:	4813      	ldr	r0, [pc, #76]	; (8003ff8 <MX_TIM5_Init+0x98>)
 8003faa:	f004 fafa 	bl	80085a2 <HAL_TIM_Base_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8003fb4:	f7ff fc46 	bl	8003844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003fbe:	f107 0310 	add.w	r3, r7, #16
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	480c      	ldr	r0, [pc, #48]	; (8003ff8 <MX_TIM5_Init+0x98>)
 8003fc6:	f004 fdfb 	bl	8008bc0 <HAL_TIM_ConfigClockSource>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8003fd0:	f7ff fc38 	bl	8003844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <MX_TIM5_Init+0x98>)
 8003fe2:	f005 f951 	bl	8009288 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8003fec:	f7ff fc2a 	bl	8003844 <Error_Handler>
  }

}
 8003ff0:	bf00      	nop
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20001430 	.word	0x20001430
 8003ffc:	40000c00 	.word	0x40000c00

08004000 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b094      	sub	sp, #80	; 0x50
 8004004:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004006:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004020:	463b      	mov	r3, r7
 8004022:	2234      	movs	r2, #52	; 0x34
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f006 fde2 	bl	800abf0 <memset>

  htim8.Instance = TIM8;
 800402c:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <MX_TIM8_Init+0xc8>)
 800402e:	4a27      	ldr	r2, [pc, #156]	; (80040cc <MX_TIM8_Init+0xcc>)
 8004030:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <MX_TIM8_Init+0xc8>)
 8004034:	2200      	movs	r2, #0
 8004036:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004038:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <MX_TIM8_Init+0xc8>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800403e:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <MX_TIM8_Init+0xc8>)
 8004040:	2201      	movs	r2, #1
 8004042:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004044:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <MX_TIM8_Init+0xc8>)
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800404a:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <MX_TIM8_Init+0xc8>)
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <MX_TIM8_Init+0xc8>)
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004056:	481c      	ldr	r0, [pc, #112]	; (80040c8 <MX_TIM8_Init+0xc8>)
 8004058:	f004 faa3 	bl	80085a2 <HAL_TIM_Base_Init>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8004062:	f7ff fbef 	bl	8003844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800406a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800406c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004070:	4619      	mov	r1, r3
 8004072:	4815      	ldr	r0, [pc, #84]	; (80040c8 <MX_TIM8_Init+0xc8>)
 8004074:	f004 fda4 	bl	8008bc0 <HAL_TIM_ConfigClockSource>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800407e:	f7ff fbe1 	bl	8003844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004082:	2320      	movs	r3, #32
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004086:	2300      	movs	r3, #0
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800408a:	2300      	movs	r3, #0
 800408c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800408e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004092:	4619      	mov	r1, r3
 8004094:	480c      	ldr	r0, [pc, #48]	; (80040c8 <MX_TIM8_Init+0xc8>)
 8004096:	f005 f8f7 	bl	8009288 <HAL_TIMEx_MasterConfigSynchronization>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80040a0:	f7ff fbd0 	bl	8003844 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80040a8:	2300      	movs	r3, #0
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80040ac:	463b      	mov	r3, r7
 80040ae:	4619      	mov	r1, r3
 80040b0:	4805      	ldr	r0, [pc, #20]	; (80040c8 <MX_TIM8_Init+0xc8>)
 80040b2:	f005 f97f 	bl	80093b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80040bc:	f7ff fbc2 	bl	8003844 <Error_Handler>
  }

}
 80040c0:	bf00      	nop
 80040c2:	3750      	adds	r7, #80	; 0x50
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	2000134c 	.word	0x2000134c
 80040cc:	40013400 	.word	0x40013400

080040d0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040d6:	f107 0310 	add.w	r3, r7, #16
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040e4:	1d3b      	adds	r3, r7, #4
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80040ee:	4b1f      	ldr	r3, [pc, #124]	; (800416c <MX_TIM15_Init+0x9c>)
 80040f0:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <MX_TIM15_Init+0xa0>)
 80040f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <MX_TIM15_Init+0x9c>)
 80040f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040fa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <MX_TIM15_Init+0x9c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <MX_TIM15_Init+0x9c>)
 8004104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004108:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800410a:	4b18      	ldr	r3, [pc, #96]	; (800416c <MX_TIM15_Init+0x9c>)
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004110:	4b16      	ldr	r3, [pc, #88]	; (800416c <MX_TIM15_Init+0x9c>)
 8004112:	2200      	movs	r2, #0
 8004114:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <MX_TIM15_Init+0x9c>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800411c:	4813      	ldr	r0, [pc, #76]	; (800416c <MX_TIM15_Init+0x9c>)
 800411e:	f004 fa40 	bl	80085a2 <HAL_TIM_Base_Init>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8004128:	f7ff fb8c 	bl	8003844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800412c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004130:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004132:	f107 0310 	add.w	r3, r7, #16
 8004136:	4619      	mov	r1, r3
 8004138:	480c      	ldr	r0, [pc, #48]	; (800416c <MX_TIM15_Init+0x9c>)
 800413a:	f004 fd41 	bl	8008bc0 <HAL_TIM_ConfigClockSource>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8004144:	f7ff fb7e 	bl	8003844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004148:	2300      	movs	r3, #0
 800414a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	4619      	mov	r1, r3
 8004154:	4805      	ldr	r0, [pc, #20]	; (800416c <MX_TIM15_Init+0x9c>)
 8004156:	f005 f897 	bl	8009288 <HAL_TIMEx_MasterConfigSynchronization>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8004160:	f7ff fb70 	bl	8003844 <Error_Handler>
  }

}
 8004164:	bf00      	nop
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20001398 	.word	0x20001398
 8004170:	40014000 	.word	0x40014000

08004174 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <MX_TIM16_Init+0x44>)
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <MX_TIM16_Init+0x48>)
 800417c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <MX_TIM16_Init+0x44>)
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <MX_TIM16_Init+0x44>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <MX_TIM16_Init+0x44>)
 800418c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004190:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <MX_TIM16_Init+0x44>)
 8004194:	2200      	movs	r2, #0
 8004196:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004198:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <MX_TIM16_Init+0x44>)
 800419a:	2200      	movs	r2, #0
 800419c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <MX_TIM16_Init+0x44>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80041a4:	4804      	ldr	r0, [pc, #16]	; (80041b8 <MX_TIM16_Init+0x44>)
 80041a6:	f004 f9fc 	bl	80085a2 <HAL_TIM_Base_Init>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80041b0:	f7ff fb48 	bl	8003844 <Error_Handler>
  }

}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20001514 	.word	0x20001514
 80041bc:	40014400 	.word	0x40014400

080041c0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <MX_TIM17_Init+0x44>)
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <MX_TIM17_Init+0x48>)
 80041c8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <MX_TIM17_Init+0x44>)
 80041cc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80041d0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <MX_TIM17_Init+0x44>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <MX_TIM17_Init+0x44>)
 80041da:	2240      	movs	r2, #64	; 0x40
 80041dc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <MX_TIM17_Init+0x44>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <MX_TIM17_Init+0x44>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <MX_TIM17_Init+0x44>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80041f0:	4804      	ldr	r0, [pc, #16]	; (8004204 <MX_TIM17_Init+0x44>)
 80041f2:	f004 f9d6 	bl	80085a2 <HAL_TIM_Base_Init>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80041fc:	f7ff fb22 	bl	8003844 <Error_Handler>
  }

}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200013e4 	.word	0x200013e4
 8004208:	40014800 	.word	0x40014800

0800420c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a23      	ldr	r2, [pc, #140]	; (80042b8 <HAL_TIM_Encoder_MspInit+0xac>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d13f      	bne.n	80042ae <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800422e:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_TIM_Encoder_MspInit+0xb0>)
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	4a22      	ldr	r2, [pc, #136]	; (80042bc <HAL_TIM_Encoder_MspInit+0xb0>)
 8004234:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004238:	6613      	str	r3, [r2, #96]	; 0x60
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_TIM_Encoder_MspInit+0xb0>)
 800423c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004246:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <HAL_TIM_Encoder_MspInit+0xb0>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <HAL_TIM_Encoder_MspInit+0xb0>)
 800424c:	f043 0304 	orr.w	r3, r3, #4
 8004250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <HAL_TIM_Encoder_MspInit+0xb0>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800425e:	2303      	movs	r3, #3
 8004260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004262:	2302      	movs	r3, #2
 8004264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426a:	2300      	movs	r3, #0
 800426c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800426e:	2302      	movs	r3, #2
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	4619      	mov	r1, r3
 8004278:	4811      	ldr	r0, [pc, #68]	; (80042c0 <HAL_TIM_Encoder_MspInit+0xb4>)
 800427a:	f002 fcd3 	bl	8006c24 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800427e:	2200      	movs	r2, #0
 8004280:	2100      	movs	r1, #0
 8004282:	2018      	movs	r0, #24
 8004284:	f001 fdb9 	bl	8005dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004288:	2018      	movs	r0, #24
 800428a:	f001 fdd0 	bl	8005e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2101      	movs	r1, #1
 8004292:	2019      	movs	r0, #25
 8004294:	f001 fdb1 	bl	8005dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004298:	2019      	movs	r0, #25
 800429a:	f001 fdc8 	bl	8005e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	2101      	movs	r1, #1
 80042a2:	201a      	movs	r0, #26
 80042a4:	f001 fda9 	bl	8005dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80042a8:	201a      	movs	r0, #26
 80042aa:	f001 fdc0 	bl	8005e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80042ae:	bf00      	nop
 80042b0:	3728      	adds	r7, #40	; 0x28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40021000 	.word	0x40021000
 80042c0:	48000800 	.word	0x48000800

080042c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	; 0x38
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e4:	d131      	bne.n	800434a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042e6:	4b53      	ldr	r3, [pc, #332]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	4a52      	ldr	r2, [pc, #328]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
 80042f2:	4b50      	ldr	r3, [pc, #320]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	623b      	str	r3, [r7, #32]
 80042fc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fe:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 8004300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004302:	4a4c      	ldr	r2, [pc, #304]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800430a:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 800430c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004316:	2301      	movs	r3, #1
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431a:	2302      	movs	r3, #2
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431e:	2300      	movs	r3, #0
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004322:	2300      	movs	r3, #0
 8004324:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004326:	2301      	movs	r3, #1
 8004328:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800432e:	4619      	mov	r1, r3
 8004330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004334:	f002 fc76 	bl	8006c24 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004338:	2200      	movs	r2, #0
 800433a:	2101      	movs	r1, #1
 800433c:	201c      	movs	r0, #28
 800433e:	f001 fd5c 	bl	8005dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004342:	201c      	movs	r0, #28
 8004344:	f001 fd73 	bl	8005e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004348:	e070      	b.n	800442c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3a      	ldr	r2, [pc, #232]	; (8004438 <HAL_TIM_Base_MspInit+0x174>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10c      	bne.n	800436e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004354:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	4a36      	ldr	r2, [pc, #216]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 800435a:	f043 0308 	orr.w	r3, r3, #8
 800435e:	6593      	str	r3, [r2, #88]	; 0x58
 8004360:	4b34      	ldr	r3, [pc, #208]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	69bb      	ldr	r3, [r7, #24]
}
 800436c:	e05e      	b.n	800442c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a32      	ldr	r2, [pc, #200]	; (800443c <HAL_TIM_Base_MspInit+0x178>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d10c      	bne.n	8004392 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004378:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 800437a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437c:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 800437e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004382:	6613      	str	r3, [r2, #96]	; 0x60
 8004384:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	697b      	ldr	r3, [r7, #20]
}
 8004390:	e04c      	b.n	800442c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <HAL_TIM_Base_MspInit+0x17c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d114      	bne.n	80043c6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 800439e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a0:	4a24      	ldr	r2, [pc, #144]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 80043a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a6:	6613      	str	r3, [r2, #96]	; 0x60
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 80043aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80043b4:	2200      	movs	r2, #0
 80043b6:	2100      	movs	r1, #0
 80043b8:	2018      	movs	r0, #24
 80043ba:	f001 fd1e 	bl	8005dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80043be:	2018      	movs	r0, #24
 80043c0:	f001 fd35 	bl	8005e2e <HAL_NVIC_EnableIRQ>
}
 80043c4:	e032      	b.n	800442c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_TIM_Base_MspInit+0x180>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d114      	bne.n	80043fa <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80043d0:	4b18      	ldr	r3, [pc, #96]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 80043d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d4:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 80043d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043da:	6613      	str	r3, [r2, #96]	; 0x60
 80043dc:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 80043de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80043e8:	2200      	movs	r2, #0
 80043ea:	2101      	movs	r1, #1
 80043ec:	2019      	movs	r0, #25
 80043ee:	f001 fd04 	bl	8005dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80043f2:	2019      	movs	r0, #25
 80043f4:	f001 fd1b 	bl	8005e2e <HAL_NVIC_EnableIRQ>
}
 80043f8:	e018      	b.n	800442c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <HAL_TIM_Base_MspInit+0x184>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d113      	bne.n	800442c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 800440a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440e:	6613      	str	r3, [r2, #96]	; 0x60
 8004410:	4b08      	ldr	r3, [pc, #32]	; (8004434 <HAL_TIM_Base_MspInit+0x170>)
 8004412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800441c:	2200      	movs	r2, #0
 800441e:	2101      	movs	r1, #1
 8004420:	201a      	movs	r0, #26
 8004422:	f001 fcea 	bl	8005dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004426:	201a      	movs	r0, #26
 8004428:	f001 fd01 	bl	8005e2e <HAL_NVIC_EnableIRQ>
}
 800442c:	bf00      	nop
 800442e:	3738      	adds	r7, #56	; 0x38
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40013400 	.word	0x40013400
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400
 8004448:	40014800 	.word	0x40014800

0800444c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800444c:	480d      	ldr	r0, [pc, #52]	; (8004484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800444e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004450:	480d      	ldr	r0, [pc, #52]	; (8004488 <LoopForever+0x6>)
  ldr r1, =_edata
 8004452:	490e      	ldr	r1, [pc, #56]	; (800448c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004454:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <LoopForever+0xe>)
  movs r3, #0
 8004456:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004458:	e002      	b.n	8004460 <LoopCopyDataInit>

0800445a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800445a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800445c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800445e:	3304      	adds	r3, #4

08004460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004464:	d3f9      	bcc.n	800445a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004466:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004468:	4c0b      	ldr	r4, [pc, #44]	; (8004498 <LoopForever+0x16>)
  movs r3, #0
 800446a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800446c:	e001      	b.n	8004472 <LoopFillZerobss>

0800446e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800446e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004470:	3204      	adds	r2, #4

08004472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004474:	d3fb      	bcc.n	800446e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004476:	f7ff fc83 	bl	8003d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800447a:	f006 fb95 	bl	800aba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800447e:	f7ff f8c7 	bl	8003610 <main>

08004482 <LoopForever>:

LoopForever:
    b LoopForever
 8004482:	e7fe      	b.n	8004482 <LoopForever>
  ldr   r0, =_estack
 8004484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800448c:	200010c8 	.word	0x200010c8
  ldr r2, =_sidata
 8004490:	0800c180 	.word	0x0800c180
  ldr r2, =_sbss
 8004494:	200010c8 	.word	0x200010c8
  ldr r4, =_ebss
 8004498:	20001568 	.word	0x20001568

0800449c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800449c:	e7fe      	b.n	800449c <ADC1_2_IRQHandler>

0800449e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a8:	2003      	movs	r0, #3
 80044aa:	f001 fc9b 	bl	8005de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044ae:	2000      	movs	r0, #0
 80044b0:	f000 f80e 	bl	80044d0 <HAL_InitTick>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	71fb      	strb	r3, [r7, #7]
 80044be:	e001      	b.n	80044c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044c0:	f7ff fa90 	bl	80039e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044c4:	79fb      	ldrb	r3, [r7, #7]

}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80044dc:	4b16      	ldr	r3, [pc, #88]	; (8004538 <HAL_InitTick+0x68>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d022      	beq.n	800452a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <HAL_InitTick+0x6c>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b13      	ldr	r3, [pc, #76]	; (8004538 <HAL_InitTick+0x68>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80044f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 fca6 	bl	8005e4a <HAL_SYSTICK_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10f      	bne.n	8004524 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b0f      	cmp	r3, #15
 8004508:	d809      	bhi.n	800451e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800450a:	2200      	movs	r2, #0
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004512:	f001 fc72 	bl	8005dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <HAL_InitTick+0x70>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e007      	b.n	800452e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
 8004522:	e004      	b.n	800452e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e001      	b.n	800452e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000018 	.word	0x20000018
 800453c:	20000010 	.word	0x20000010
 8004540:	20000014 	.word	0x20000014

08004544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_IncTick+0x1c>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_IncTick+0x20>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4413      	add	r3, r2
 8004552:	4a03      	ldr	r2, [pc, #12]	; (8004560 <HAL_IncTick+0x1c>)
 8004554:	6013      	str	r3, [r2, #0]
}
 8004556:	bf00      	nop
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	20001560 	.word	0x20001560
 8004564:	20000018 	.word	0x20000018

08004568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return uwTick;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_GetTick+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20001560 	.word	0x20001560

08004580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004588:	f7ff ffee 	bl	8004568 <HAL_GetTick>
 800458c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004598:	d004      	beq.n	80045a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_Delay+0x40>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045a4:	bf00      	nop
 80045a6:	f7ff ffdf 	bl	8004568 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d8f7      	bhi.n	80045a6 <HAL_Delay+0x26>
  {
  }
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000018 	.word	0x20000018

080045c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	609a      	str	r2, [r3, #8]
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800462c:	b490      	push	{r4, r7}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3360      	adds	r3, #96	; 0x60
 800463e:	461a      	mov	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004648:	6822      	ldr	r2, [r4, #0]
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <LL_ADC_SetOffset+0x40>)
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	4313      	orrs	r3, r2
 800465a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800465e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bc90      	pop	{r4, r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	03fff000 	.word	0x03fff000

08004670 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004670:	b490      	push	{r4, r7}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3360      	adds	r3, #96	; 0x60
 800467e:	461a      	mov	r2, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bc90      	pop	{r4, r7}
 8004696:	4770      	bx	lr

08004698 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004698:	b490      	push	{r4, r7}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3360      	adds	r3, #96	; 0x60
 80046a8:	461a      	mov	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc90      	pop	{r4, r7}
 80046c6:	4770      	bx	lr

080046c8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80046c8:	b490      	push	{r4, r7}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3360      	adds	r3, #96	; 0x60
 80046d8:	461a      	mov	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc90      	pop	{r4, r7}
 80046f6:	4770      	bx	lr

080046f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80046f8:	b490      	push	{r4, r7}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3360      	adds	r3, #96	; 0x60
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4313      	orrs	r3, r2
 800471c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bc90      	pop	{r4, r7}
 8004726:	4770      	bx	lr

08004728 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	615a      	str	r2, [r3, #20]
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800474e:	b490      	push	{r4, r7}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3330      	adds	r3, #48	; 0x30
 800475e:	461a      	mov	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	4413      	add	r3, r2
 800476c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	211f      	movs	r1, #31
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	401a      	ands	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	0e9b      	lsrs	r3, r3, #26
 8004784:	f003 011f 	and.w	r1, r3, #31
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	4313      	orrs	r3, r2
 8004794:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bc90      	pop	{r4, r7}
 800479e:	4770      	bx	lr

080047a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80047a0:	b490      	push	{r4, r7}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3314      	adds	r3, #20
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	0e5b      	lsrs	r3, r3, #25
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	4413      	add	r3, r2
 80047be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80047c0:	6822      	ldr	r2, [r4, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	0d1b      	lsrs	r3, r3, #20
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	2107      	movs	r1, #7
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	401a      	ands	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	0d1b      	lsrs	r3, r3, #20
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	fa01 f303 	lsl.w	r3, r1, r3
 80047e2:	4313      	orrs	r3, r2
 80047e4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc90      	pop	{r4, r7}
 80047ee:	4770      	bx	lr

080047f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f003 0318 	and.w	r3, r3, #24
 8004812:	4908      	ldr	r1, [pc, #32]	; (8004834 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004814:	40d9      	lsrs	r1, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	400b      	ands	r3, r1
 800481a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481e:	431a      	orrs	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	0007ffff 	.word	0x0007ffff

08004838 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004848:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6093      	str	r3, [r2, #8]
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800486c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004870:	d101      	bne.n	8004876 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004894:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004898:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048c0:	d101      	bne.n	80048c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <LL_ADC_IsEnabled+0x18>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <LL_ADC_IsEnabled+0x1a>
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b04      	cmp	r3, #4
 800490c:	d101      	bne.n	8004912 <LL_ADC_REG_IsConversionOngoing+0x18>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d101      	bne.n	8004938 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b089      	sub	sp, #36	; 0x24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e1ad      	b.n	8004cbe <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fe f853 	bl	8002a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ff67 	bl	800485c <LL_ADC_IsDeepPowerDownEnabled>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d004      	beq.n	800499e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff ff4d 	bl	8004838 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff ff82 	bl	80048ac <LL_ADC_IsInternalRegulatorEnabled>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d113      	bne.n	80049d6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ff66 	bl	8004884 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80049b8:	4b9e      	ldr	r3, [pc, #632]	; (8004c34 <HAL_ADC_Init+0x2ec>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	099b      	lsrs	r3, r3, #6
 80049be:	4a9e      	ldr	r2, [pc, #632]	; (8004c38 <HAL_ADC_Init+0x2f0>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	099b      	lsrs	r3, r3, #6
 80049c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80049c8:	e002      	b.n	80049d0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f9      	bne.n	80049ca <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ff66 	bl	80048ac <LL_ADC_IsInternalRegulatorEnabled>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	f043 0210 	orr.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff77 	bl	80048fa <LL_ADC_REG_IsConversionOngoing>
 8004a0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 8148 	bne.w	8004cac <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 8144 	bne.w	8004cac <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004a2c:	f043 0202 	orr.w	r2, r3, #2
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ff4b 	bl	80048d4 <LL_ADC_IsEnabled>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d141      	bne.n	8004ac8 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a4c:	d004      	beq.n	8004a58 <HAL_ADC_Init+0x110>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7a      	ldr	r2, [pc, #488]	; (8004c3c <HAL_ADC_Init+0x2f4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10f      	bne.n	8004a78 <HAL_ADC_Init+0x130>
 8004a58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004a5c:	f7ff ff3a 	bl	80048d4 <LL_ADC_IsEnabled>
 8004a60:	4604      	mov	r4, r0
 8004a62:	4876      	ldr	r0, [pc, #472]	; (8004c3c <HAL_ADC_Init+0x2f4>)
 8004a64:	f7ff ff36 	bl	80048d4 <LL_ADC_IsEnabled>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4323      	orrs	r3, r4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e012      	b.n	8004a9e <HAL_ADC_Init+0x156>
 8004a78:	4871      	ldr	r0, [pc, #452]	; (8004c40 <HAL_ADC_Init+0x2f8>)
 8004a7a:	f7ff ff2b 	bl	80048d4 <LL_ADC_IsEnabled>
 8004a7e:	4604      	mov	r4, r0
 8004a80:	4870      	ldr	r0, [pc, #448]	; (8004c44 <HAL_ADC_Init+0x2fc>)
 8004a82:	f7ff ff27 	bl	80048d4 <LL_ADC_IsEnabled>
 8004a86:	4603      	mov	r3, r0
 8004a88:	431c      	orrs	r4, r3
 8004a8a:	486f      	ldr	r0, [pc, #444]	; (8004c48 <HAL_ADC_Init+0x300>)
 8004a8c:	f7ff ff22 	bl	80048d4 <LL_ADC_IsEnabled>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4323      	orrs	r3, r4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d012      	beq.n	8004ac8 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aaa:	d004      	beq.n	8004ab6 <HAL_ADC_Init+0x16e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a62      	ldr	r2, [pc, #392]	; (8004c3c <HAL_ADC_Init+0x2f4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d101      	bne.n	8004aba <HAL_ADC_Init+0x172>
 8004ab6:	4a65      	ldr	r2, [pc, #404]	; (8004c4c <HAL_ADC_Init+0x304>)
 8004ab8:	e000      	b.n	8004abc <HAL_ADC_Init+0x174>
 8004aba:	4a65      	ldr	r2, [pc, #404]	; (8004c50 <HAL_ADC_Init+0x308>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f7ff fd7e 	bl	80045c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	7f5b      	ldrb	r3, [r3, #29]
 8004acc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ad2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004ad8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004ade:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ae6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d106      	bne.n	8004b04 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	3b01      	subs	r3, #1
 8004afc:	045b      	lsls	r3, r3, #17
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	4b4b      	ldr	r3, [pc, #300]	; (8004c54 <HAL_ADC_Init+0x30c>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	69b9      	ldr	r1, [r7, #24]
 8004b30:	430b      	orrs	r3, r1
 8004b32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fed3 	bl	80048fa <LL_ADC_REG_IsConversionOngoing>
 8004b54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fee0 	bl	8004920 <LL_ADC_INJ_IsConversionOngoing>
 8004b60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d17f      	bne.n	8004c68 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d17c      	bne.n	8004c68 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b7a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b8a:	f023 0302 	bic.w	r3, r3, #2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	69b9      	ldr	r1, [r7, #24]
 8004b94:	430b      	orrs	r3, r1
 8004b96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d017      	beq.n	8004bd0 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004bae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004bb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6911      	ldr	r1, [r2, #16]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004bce:	e013      	b.n	8004bf8 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bf4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d12a      	bne.n	8004c58 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c0c:	f023 0304 	bic.w	r3, r3, #4
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c18:	4311      	orrs	r1, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c1e:	4311      	orrs	r1, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c24:	430a      	orrs	r2, r1
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	611a      	str	r2, [r3, #16]
 8004c32:	e019      	b.n	8004c68 <HAL_ADC_Init+0x320>
 8004c34:	20000010 	.word	0x20000010
 8004c38:	053e2d63 	.word	0x053e2d63
 8004c3c:	50000100 	.word	0x50000100
 8004c40:	50000400 	.word	0x50000400
 8004c44:	50000500 	.word	0x50000500
 8004c48:	50000600 	.word	0x50000600
 8004c4c:	50000300 	.word	0x50000300
 8004c50:	50000700 	.word	0x50000700
 8004c54:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0201 	bic.w	r2, r2, #1
 8004c66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10c      	bne.n	8004c8a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f023 010f 	bic.w	r1, r3, #15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	1e5a      	subs	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
 8004c88:	e007      	b.n	8004c9a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 020f 	bic.w	r2, r2, #15
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9e:	f023 0303 	bic.w	r3, r3, #3
 8004ca2:	f043 0201 	orr.w	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004caa:	e007      	b.n	8004cbc <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb0:	f043 0210 	orr.w	r2, r3, #16
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004cbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3724      	adds	r7, #36	; 0x24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd90      	pop	{r4, r7, pc}
 8004cc6:	bf00      	nop

08004cc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b0a6      	sub	sp, #152	; 0x98
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x22>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e38e      	b.n	8005408 <HAL_ADC_ConfigChannel+0x740>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fdff 	bl	80048fa <LL_ADC_REG_IsConversionOngoing>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f040 836f 	bne.w	80053e2 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	f7ff fd1c 	bl	800474e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fded 	bl	80048fa <LL_ADC_REG_IsConversionOngoing>
 8004d20:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff fdf9 	bl	8004920 <LL_ADC_INJ_IsConversionOngoing>
 8004d2e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 817b 	bne.w	8005032 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f040 8176 	bne.w	8005032 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d4e:	d10f      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	f7ff fd20 	bl	80047a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fcdd 	bl	8004728 <LL_ADC_SetSamplingTimeCommonConfig>
 8004d6e:	e00e      	b.n	8004d8e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	6819      	ldr	r1, [r3, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f7ff fd0f 	bl	80047a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fccd 	bl	8004728 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	08db      	lsrs	r3, r3, #3
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d022      	beq.n	8004df6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	6919      	ldr	r1, [r3, #16]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dc0:	f7ff fc34 	bl	800462c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6919      	ldr	r1, [r3, #16]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f7ff fc79 	bl	80046c8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6919      	ldr	r1, [r3, #16]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	7f1b      	ldrb	r3, [r3, #28]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d102      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x124>
 8004de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dea:	e000      	b.n	8004dee <HAL_ADC_ConfigChannel+0x126>
 8004dec:	2300      	movs	r3, #0
 8004dee:	461a      	mov	r2, r3
 8004df0:	f7ff fc82 	bl	80046f8 <LL_ADC_SetOffsetSaturation>
 8004df4:	e11d      	b.n	8005032 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff fc37 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0x15a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fc2c 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	0e9b      	lsrs	r3, r3, #26
 8004e1c:	f003 021f 	and.w	r2, r3, #31
 8004e20:	e012      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x180>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fc21 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e40:	fab3 f383 	clz	r3, r3
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d105      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x198>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	0e9b      	lsrs	r3, r3, #26
 8004e5a:	f003 031f 	and.w	r3, r3, #31
 8004e5e:	e00a      	b.n	8004e76 <HAL_ADC_ConfigChannel+0x1ae>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8004e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e70:	fab3 f383 	clz	r3, r3
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d106      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fc08 	bl	8004698 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fbee 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0x1ec>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff fbe3 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	0e9b      	lsrs	r3, r3, #26
 8004eae:	f003 021f 	and.w	r2, r3, #31
 8004eb2:	e010      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x20e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2101      	movs	r1, #1
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff fbd8 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec6:	fa93 f3a3 	rbit	r3, r3
 8004eca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x226>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	0e9b      	lsrs	r3, r3, #26
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	e00a      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x23c>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ef6:	fa93 f3a3 	rbit	r3, r3
 8004efa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004efe:	fab3 f383 	clz	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d106      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fbc1 	bl	8004698 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fba7 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x27a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2102      	movs	r1, #2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fb9c 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	0e9b      	lsrs	r3, r3, #26
 8004f3c:	f003 021f 	and.w	r2, r3, #31
 8004f40:	e010      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x29c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2102      	movs	r1, #2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fb91 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f54:	fa93 f3a3 	rbit	r3, r3
 8004f58:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8004f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f5c:	fab3 f383 	clz	r3, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d105      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x2b4>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	0e9b      	lsrs	r3, r3, #26
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	e00a      	b.n	8004f92 <HAL_ADC_ConfigChannel+0x2ca>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f84:	fa93 f3a3 	rbit	r3, r3
 8004f88:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8c:	fab3 f383 	clz	r3, r3
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d106      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fb7a 	bl	8004698 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2103      	movs	r1, #3
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fb60 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x308>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2103      	movs	r1, #3
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fb55 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	0e9b      	lsrs	r3, r3, #26
 8004fca:	f003 021f 	and.w	r2, r3, #31
 8004fce:	e010      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x32a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2103      	movs	r1, #3
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fb4a 	bl	8004670 <LL_ADC_GetOffsetChannel>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d105      	bne.n	800500a <HAL_ADC_ConfigChannel+0x342>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	0e9b      	lsrs	r3, r3, #26
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	e00a      	b.n	8005020 <HAL_ADC_ConfigChannel+0x358>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005012:	fa93 f3a3 	rbit	r3, r3
 8005016:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8005018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	429a      	cmp	r2, r3
 8005022:	d106      	bne.n	8005032 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2200      	movs	r2, #0
 800502a:	2103      	movs	r1, #3
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff fb33 	bl	8004698 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fc4c 	bl	80048d4 <LL_ADC_IsEnabled>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 810c 	bne.w	800525c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	461a      	mov	r2, r3
 8005052:	f7ff fbcd 	bl	80047f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	4aaf      	ldr	r2, [pc, #700]	; (8005318 <HAL_ADC_ConfigChannel+0x650>)
 800505c:	4293      	cmp	r3, r2
 800505e:	f040 80fd 	bne.w	800525c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <HAL_ADC_ConfigChannel+0x3c2>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	0e9b      	lsrs	r3, r3, #26
 8005078:	3301      	adds	r3, #1
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2b09      	cmp	r3, #9
 8005080:	bf94      	ite	ls
 8005082:	2301      	movls	r3, #1
 8005084:	2300      	movhi	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e012      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x3e8>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509a:	fab3 f383 	clz	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	3301      	adds	r3, #1
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	bf94      	ite	ls
 80050aa:	2301      	movls	r3, #1
 80050ac:	2300      	movhi	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d064      	beq.n	800517e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x408>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	0e9b      	lsrs	r3, r3, #26
 80050c6:	3301      	adds	r3, #1
 80050c8:	069b      	lsls	r3, r3, #26
 80050ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ce:	e00e      	b.n	80050ee <HAL_ADC_ConfigChannel+0x426>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	fab3 f383 	clz	r3, r3
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	3301      	adds	r3, #1
 80050e8:	069b      	lsls	r3, r3, #26
 80050ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <HAL_ADC_ConfigChannel+0x446>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	0e9b      	lsrs	r3, r3, #26
 8005100:	3301      	adds	r3, #1
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	2101      	movs	r1, #1
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	e010      	b.n	8005130 <HAL_ADC_ConfigChannel+0x468>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	3301      	adds	r3, #1
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2101      	movs	r1, #1
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	ea42 0103 	orr.w	r1, r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <HAL_ADC_ConfigChannel+0x48e>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	0e9b      	lsrs	r3, r3, #26
 8005146:	3301      	adds	r3, #1
 8005148:	f003 021f 	and.w	r2, r3, #31
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	051b      	lsls	r3, r3, #20
 8005154:	e011      	b.n	800517a <HAL_ADC_ConfigChannel+0x4b2>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	fa93 f3a3 	rbit	r3, r3
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	3301      	adds	r3, #1
 800516e:	f003 021f 	and.w	r2, r3, #31
 8005172:	4613      	mov	r3, r2
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	4413      	add	r3, r2
 8005178:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800517a:	430b      	orrs	r3, r1
 800517c:	e069      	b.n	8005252 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005186:	2b00      	cmp	r3, #0
 8005188:	d107      	bne.n	800519a <HAL_ADC_ConfigChannel+0x4d2>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	0e9b      	lsrs	r3, r3, #26
 8005190:	3301      	adds	r3, #1
 8005192:	069b      	lsls	r3, r3, #26
 8005194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005198:	e00e      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x4f0>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	fa93 f3a3 	rbit	r3, r3
 80051a6:	61fb      	str	r3, [r7, #28]
  return result;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	3301      	adds	r3, #1
 80051b2:	069b      	lsls	r3, r3, #26
 80051b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x510>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	0e9b      	lsrs	r3, r3, #26
 80051ca:	3301      	adds	r3, #1
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	e010      	b.n	80051fa <HAL_ADC_ConfigChannel+0x532>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	fa93 f3a3 	rbit	r3, r3
 80051e4:	617b      	str	r3, [r7, #20]
  return result;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	3301      	adds	r3, #1
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	ea42 0103 	orr.w	r1, r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10d      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x55e>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	0e9b      	lsrs	r3, r3, #26
 8005210:	3301      	adds	r3, #1
 8005212:	f003 021f 	and.w	r2, r3, #31
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	3b1e      	subs	r3, #30
 800521e:	051b      	lsls	r3, r3, #20
 8005220:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005224:	e014      	b.n	8005250 <HAL_ADC_ConfigChannel+0x588>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	fa93 f3a3 	rbit	r3, r3
 8005232:	60fb      	str	r3, [r7, #12]
  return result;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	3301      	adds	r3, #1
 800523e:	f003 021f 	and.w	r2, r3, #31
 8005242:	4613      	mov	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	4413      	add	r3, r2
 8005248:	3b1e      	subs	r3, #30
 800524a:	051b      	lsls	r3, r3, #20
 800524c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005250:	430b      	orrs	r3, r1
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	6892      	ldr	r2, [r2, #8]
 8005256:	4619      	mov	r1, r3
 8005258:	f7ff faa2 	bl	80047a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b2e      	ldr	r3, [pc, #184]	; (800531c <HAL_ADC_ConfigChannel+0x654>)
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80c9 	beq.w	80053fc <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005272:	d004      	beq.n	800527e <HAL_ADC_ConfigChannel+0x5b6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a29      	ldr	r2, [pc, #164]	; (8005320 <HAL_ADC_ConfigChannel+0x658>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x5ba>
 800527e:	4b29      	ldr	r3, [pc, #164]	; (8005324 <HAL_ADC_ConfigChannel+0x65c>)
 8005280:	e000      	b.n	8005284 <HAL_ADC_ConfigChannel+0x5bc>
 8005282:	4b29      	ldr	r3, [pc, #164]	; (8005328 <HAL_ADC_ConfigChannel+0x660>)
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff f9c3 	bl	8004610 <LL_ADC_GetCommonPathInternalCh>
 800528a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a26      	ldr	r2, [pc, #152]	; (800532c <HAL_ADC_ConfigChannel+0x664>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_ADC_ConfigChannel+0x5da>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a24      	ldr	r2, [pc, #144]	; (8005330 <HAL_ADC_ConfigChannel+0x668>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d14e      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d148      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052b6:	d005      	beq.n	80052c4 <HAL_ADC_ConfigChannel+0x5fc>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <HAL_ADC_ConfigChannel+0x66c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	f040 8099 	bne.w	80053f6 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052cc:	d004      	beq.n	80052d8 <HAL_ADC_ConfigChannel+0x610>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a13      	ldr	r2, [pc, #76]	; (8005320 <HAL_ADC_ConfigChannel+0x658>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <HAL_ADC_ConfigChannel+0x614>
 80052d8:	4a12      	ldr	r2, [pc, #72]	; (8005324 <HAL_ADC_ConfigChannel+0x65c>)
 80052da:	e000      	b.n	80052de <HAL_ADC_ConfigChannel+0x616>
 80052dc:	4a12      	ldr	r2, [pc, #72]	; (8005328 <HAL_ADC_ConfigChannel+0x660>)
 80052de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7ff f97e 	bl	80045ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_ADC_ConfigChannel+0x670>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	099b      	lsrs	r3, r3, #6
 80052f4:	4a11      	ldr	r2, [pc, #68]	; (800533c <HAL_ADC_ConfigChannel+0x674>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	099a      	lsrs	r2, r3, #6
 80052fc:	4613      	mov	r3, r2
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005306:	e002      	b.n	800530e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	3b01      	subs	r3, #1
 800530c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f9      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005314:	e06f      	b.n	80053f6 <HAL_ADC_ConfigChannel+0x72e>
 8005316:	bf00      	nop
 8005318:	407f0000 	.word	0x407f0000
 800531c:	80080000 	.word	0x80080000
 8005320:	50000100 	.word	0x50000100
 8005324:	50000300 	.word	0x50000300
 8005328:	50000700 	.word	0x50000700
 800532c:	c3210000 	.word	0xc3210000
 8005330:	90c00010 	.word	0x90c00010
 8005334:	50000600 	.word	0x50000600
 8005338:	20000010 	.word	0x20000010
 800533c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a32      	ldr	r2, [pc, #200]	; (8005410 <HAL_ADC_ConfigChannel+0x748>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d125      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x6ce>
 800534a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800534e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d11f      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2e      	ldr	r2, [pc, #184]	; (8005414 <HAL_ADC_ConfigChannel+0x74c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d104      	bne.n	800536a <HAL_ADC_ConfigChannel+0x6a2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2c      	ldr	r2, [pc, #176]	; (8005418 <HAL_ADC_ConfigChannel+0x750>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d047      	beq.n	80053fa <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005372:	d004      	beq.n	800537e <HAL_ADC_ConfigChannel+0x6b6>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a26      	ldr	r2, [pc, #152]	; (8005414 <HAL_ADC_ConfigChannel+0x74c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x6ba>
 800537e:	4a27      	ldr	r2, [pc, #156]	; (800541c <HAL_ADC_ConfigChannel+0x754>)
 8005380:	e000      	b.n	8005384 <HAL_ADC_ConfigChannel+0x6bc>
 8005382:	4a27      	ldr	r2, [pc, #156]	; (8005420 <HAL_ADC_ConfigChannel+0x758>)
 8005384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f7ff f92b 	bl	80045ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005394:	e031      	b.n	80053fa <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a22      	ldr	r2, [pc, #136]	; (8005424 <HAL_ADC_ConfigChannel+0x75c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d12d      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80053a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d127      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_ADC_ConfigChannel+0x74c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d022      	beq.n	80053fc <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053be:	d004      	beq.n	80053ca <HAL_ADC_ConfigChannel+0x702>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a13      	ldr	r2, [pc, #76]	; (8005414 <HAL_ADC_ConfigChannel+0x74c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x706>
 80053ca:	4a14      	ldr	r2, [pc, #80]	; (800541c <HAL_ADC_ConfigChannel+0x754>)
 80053cc:	e000      	b.n	80053d0 <HAL_ADC_ConfigChannel+0x708>
 80053ce:	4a14      	ldr	r2, [pc, #80]	; (8005420 <HAL_ADC_ConfigChannel+0x758>)
 80053d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053d8:	4619      	mov	r1, r3
 80053da:	4610      	mov	r0, r2
 80053dc:	f7ff f905 	bl	80045ea <LL_ADC_SetCommonPathInternalCh>
 80053e0:	e00c      	b.n	80053fc <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e6:	f043 0220 	orr.w	r2, r3, #32
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80053f4:	e002      	b.n	80053fc <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053fa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005404:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8005408:	4618      	mov	r0, r3
 800540a:	3798      	adds	r7, #152	; 0x98
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	c7520000 	.word	0xc7520000
 8005414:	50000100 	.word	0x50000100
 8005418:	50000500 	.word	0x50000500
 800541c:	50000300 	.word	0x50000300
 8005420:	50000700 	.word	0x50000700
 8005424:	cb840000 	.word	0xcb840000

08005428 <LL_ADC_IsEnabled>:
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <LL_ADC_IsEnabled+0x18>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <LL_ADC_IsEnabled+0x1a>
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_ADC_REG_IsConversionOngoing>:
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b04      	cmp	r3, #4
 8005460:	d101      	bne.n	8005466 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005474:	b590      	push	{r4, r7, lr}
 8005476:	b0a1      	sub	sp, #132	; 0x84
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800548e:	2302      	movs	r3, #2
 8005490:	e0e3      	b.n	800565a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054a2:	d102      	bne.n	80054aa <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80054a4:	4b6f      	ldr	r3, [pc, #444]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	e009      	b.n	80054be <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a6e      	ldr	r2, [pc, #440]	; (8005668 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d102      	bne.n	80054ba <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80054b4:	4b6d      	ldr	r3, [pc, #436]	; (800566c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	e001      	b.n	80054be <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	f043 0220 	orr.w	r2, r3, #32
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0be      	b.n	800565a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff ffb5 	bl	800544e <LL_ADC_REG_IsConversionOngoing>
 80054e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ffaf 	bl	800544e <LL_ADC_REG_IsConversionOngoing>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 80a0 	bne.w	8005638 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80054f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f040 809c 	bne.w	8005638 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005508:	d004      	beq.n	8005514 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a55      	ldr	r2, [pc, #340]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d101      	bne.n	8005518 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8005514:	4b56      	ldr	r3, [pc, #344]	; (8005670 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005516:	e000      	b.n	800551a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8005518:	4b56      	ldr	r3, [pc, #344]	; (8005674 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800551a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d04b      	beq.n	80055bc <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6859      	ldr	r1, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005536:	035b      	lsls	r3, r3, #13
 8005538:	430b      	orrs	r3, r1
 800553a:	431a      	orrs	r2, r3
 800553c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800553e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005548:	d004      	beq.n	8005554 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a45      	ldr	r2, [pc, #276]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d10f      	bne.n	8005574 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005554:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005558:	f7ff ff66 	bl	8005428 <LL_ADC_IsEnabled>
 800555c:	4604      	mov	r4, r0
 800555e:	4841      	ldr	r0, [pc, #260]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8005560:	f7ff ff62 	bl	8005428 <LL_ADC_IsEnabled>
 8005564:	4603      	mov	r3, r0
 8005566:	4323      	orrs	r3, r4
 8005568:	2b00      	cmp	r3, #0
 800556a:	bf0c      	ite	eq
 800556c:	2301      	moveq	r3, #1
 800556e:	2300      	movne	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e012      	b.n	800559a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005574:	483c      	ldr	r0, [pc, #240]	; (8005668 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8005576:	f7ff ff57 	bl	8005428 <LL_ADC_IsEnabled>
 800557a:	4604      	mov	r4, r0
 800557c:	483b      	ldr	r0, [pc, #236]	; (800566c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800557e:	f7ff ff53 	bl	8005428 <LL_ADC_IsEnabled>
 8005582:	4603      	mov	r3, r0
 8005584:	431c      	orrs	r4, r3
 8005586:	483c      	ldr	r0, [pc, #240]	; (8005678 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005588:	f7ff ff4e 	bl	8005428 <LL_ADC_IsEnabled>
 800558c:	4603      	mov	r3, r0
 800558e:	4323      	orrs	r3, r4
 8005590:	2b00      	cmp	r3, #0
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d056      	beq.n	800564c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800559e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055a6:	f023 030f 	bic.w	r3, r3, #15
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	6811      	ldr	r1, [r2, #0]
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	6892      	ldr	r2, [r2, #8]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	431a      	orrs	r2, r3
 80055b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055ba:	e047      	b.n	800564c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80055bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055d0:	d004      	beq.n	80055dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a23      	ldr	r2, [pc, #140]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d10f      	bne.n	80055fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80055dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80055e0:	f7ff ff22 	bl	8005428 <LL_ADC_IsEnabled>
 80055e4:	4604      	mov	r4, r0
 80055e6:	481f      	ldr	r0, [pc, #124]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80055e8:	f7ff ff1e 	bl	8005428 <LL_ADC_IsEnabled>
 80055ec:	4603      	mov	r3, r0
 80055ee:	4323      	orrs	r3, r4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bf0c      	ite	eq
 80055f4:	2301      	moveq	r3, #1
 80055f6:	2300      	movne	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e012      	b.n	8005622 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80055fc:	481a      	ldr	r0, [pc, #104]	; (8005668 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80055fe:	f7ff ff13 	bl	8005428 <LL_ADC_IsEnabled>
 8005602:	4604      	mov	r4, r0
 8005604:	4819      	ldr	r0, [pc, #100]	; (800566c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005606:	f7ff ff0f 	bl	8005428 <LL_ADC_IsEnabled>
 800560a:	4603      	mov	r3, r0
 800560c:	431c      	orrs	r4, r3
 800560e:	481a      	ldr	r0, [pc, #104]	; (8005678 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005610:	f7ff ff0a 	bl	8005428 <LL_ADC_IsEnabled>
 8005614:	4603      	mov	r3, r0
 8005616:	4323      	orrs	r3, r4
 8005618:	2b00      	cmp	r3, #0
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d012      	beq.n	800564c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800562e:	f023 030f 	bic.w	r3, r3, #15
 8005632:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005634:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005636:	e009      	b.n	800564c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563c:	f043 0220 	orr.w	r2, r3, #32
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800564a:	e000      	b.n	800564e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800564c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005656:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800565a:	4618      	mov	r0, r3
 800565c:	3784      	adds	r7, #132	; 0x84
 800565e:	46bd      	mov	sp, r7
 8005660:	bd90      	pop	{r4, r7, pc}
 8005662:	bf00      	nop
 8005664:	50000100 	.word	0x50000100
 8005668:	50000400 	.word	0x50000400
 800566c:	50000500 	.word	0x50000500
 8005670:	50000300 	.word	0x50000300
 8005674:	50000700 	.word	0x50000700
 8005678:	50000600 	.word	0x50000600

0800567c <LL_EXTI_EnableIT_0_31>:
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <LL_EXTI_EnableIT_0_31+0x20>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4904      	ldr	r1, [pc, #16]	; (800569c <LL_EXTI_EnableIT_0_31+0x20>)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4313      	orrs	r3, r2
 800568e:	600b      	str	r3, [r1, #0]
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40010400 	.word	0x40010400

080056a0 <LL_EXTI_EnableIT_32_63>:
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <LL_EXTI_EnableIT_32_63+0x20>)
 80056aa:	6a1a      	ldr	r2, [r3, #32]
 80056ac:	4904      	ldr	r1, [pc, #16]	; (80056c0 <LL_EXTI_EnableIT_32_63+0x20>)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	620b      	str	r3, [r1, #32]
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	40010400 	.word	0x40010400

080056c4 <LL_EXTI_DisableIT_0_31>:
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	43db      	mvns	r3, r3
 80056d4:	4904      	ldr	r1, [pc, #16]	; (80056e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010400 	.word	0x40010400

080056ec <LL_EXTI_DisableIT_32_63>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <LL_EXTI_DisableIT_32_63+0x24>)
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	4904      	ldr	r1, [pc, #16]	; (8005710 <LL_EXTI_DisableIT_32_63+0x24>)
 80056fe:	4013      	ands	r3, r2
 8005700:	620b      	str	r3, [r1, #32]
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40010400 	.word	0x40010400

08005714 <LL_EXTI_EnableEvent_0_31>:
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <LL_EXTI_EnableEvent_0_31+0x20>)
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4904      	ldr	r1, [pc, #16]	; (8005734 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4313      	orrs	r3, r2
 8005726:	604b      	str	r3, [r1, #4]
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40010400 	.word	0x40010400

08005738 <LL_EXTI_EnableEvent_32_63>:
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005744:	4904      	ldr	r1, [pc, #16]	; (8005758 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4313      	orrs	r3, r2
 800574a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40010400 	.word	0x40010400

0800575c <LL_EXTI_DisableEvent_0_31>:
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	43db      	mvns	r3, r3
 800576c:	4904      	ldr	r1, [pc, #16]	; (8005780 <LL_EXTI_DisableEvent_0_31+0x24>)
 800576e:	4013      	ands	r3, r2
 8005770:	604b      	str	r3, [r1, #4]
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40010400 	.word	0x40010400

08005784 <LL_EXTI_DisableEvent_32_63>:
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800578e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	43db      	mvns	r3, r3
 8005794:	4904      	ldr	r1, [pc, #16]	; (80057a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005796:	4013      	ands	r3, r2
 8005798:	624b      	str	r3, [r1, #36]	; 0x24
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40010400 	.word	0x40010400

080057ac <LL_EXTI_EnableRisingTrig_0_31>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	4904      	ldr	r1, [pc, #16]	; (80057cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4313      	orrs	r3, r2
 80057be:	608b      	str	r3, [r1, #8]
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40010400 	.word	0x40010400

080057d0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80057da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057dc:	4904      	ldr	r1, [pc, #16]	; (80057f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40010400 	.word	0x40010400

080057f4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	43db      	mvns	r3, r3
 8005804:	4904      	ldr	r1, [pc, #16]	; (8005818 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005806:	4013      	ands	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010400 	.word	0x40010400

0800581c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	43db      	mvns	r3, r3
 800582c:	4904      	ldr	r1, [pc, #16]	; (8005840 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800582e:	4013      	ands	r3, r2
 8005830:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40010400 	.word	0x40010400

08005844 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800584c:	4b05      	ldr	r3, [pc, #20]	; (8005864 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	4904      	ldr	r1, [pc, #16]	; (8005864 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4313      	orrs	r3, r2
 8005856:	60cb      	str	r3, [r1, #12]
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40010400 	.word	0x40010400

08005868 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005874:	4904      	ldr	r1, [pc, #16]	; (8005888 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4313      	orrs	r3, r2
 800587a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40010400 	.word	0x40010400

0800588c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005894:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	43db      	mvns	r3, r3
 800589c:	4904      	ldr	r1, [pc, #16]	; (80058b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800589e:	4013      	ands	r3, r2
 80058a0:	60cb      	str	r3, [r1, #12]
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40010400 	.word	0x40010400

080058b4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	43db      	mvns	r3, r3
 80058c4:	4904      	ldr	r1, [pc, #16]	; (80058d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010400 	.word	0x40010400

080058dc <LL_EXTI_ClearFlag_0_31>:
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80058e4:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6153      	str	r3, [r2, #20]
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010400 	.word	0x40010400

080058fc <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005904:	4a04      	ldr	r2, [pc, #16]	; (8005918 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6353      	str	r3, [r2, #52]	; 0x34
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010400 	.word	0x40010400

0800591c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e180      	b.n	8005c3a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005946:	d102      	bne.n	800594e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e175      	b.n	8005c3a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7f5b      	ldrb	r3, [r3, #29]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d108      	bne.n	800596a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fd f8ed 	bl	8002b44 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005974:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b98      	ldr	r3, [pc, #608]	; (8005bfc <HAL_COMP_Init+0x2e0>)
 800599c:	4013      	ands	r3, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	6979      	ldr	r1, [r7, #20]
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d015      	beq.n	80059e2 <HAL_COMP_Init+0xc6>
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d112      	bne.n	80059e2 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80059bc:	4b90      	ldr	r3, [pc, #576]	; (8005c00 <HAL_COMP_Init+0x2e4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	099b      	lsrs	r3, r3, #6
 80059c2:	4a90      	ldr	r2, [pc, #576]	; (8005c04 <HAL_COMP_Init+0x2e8>)
 80059c4:	fba2 2303 	umull	r2, r3, r2, r3
 80059c8:	099a      	lsrs	r2, r3, #6
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80059d4:	e002      	b.n	80059dc <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3b01      	subs	r3, #1
 80059da:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f9      	bne.n	80059d6 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a88      	ldr	r2, [pc, #544]	; (8005c08 <HAL_COMP_Init+0x2ec>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d028      	beq.n	8005a3e <HAL_COMP_Init+0x122>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a86      	ldr	r2, [pc, #536]	; (8005c0c <HAL_COMP_Init+0x2f0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d020      	beq.n	8005a38 <HAL_COMP_Init+0x11c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a85      	ldr	r2, [pc, #532]	; (8005c10 <HAL_COMP_Init+0x2f4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d018      	beq.n	8005a32 <HAL_COMP_Init+0x116>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a83      	ldr	r2, [pc, #524]	; (8005c14 <HAL_COMP_Init+0x2f8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d010      	beq.n	8005a2c <HAL_COMP_Init+0x110>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a82      	ldr	r2, [pc, #520]	; (8005c18 <HAL_COMP_Init+0x2fc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d008      	beq.n	8005a26 <HAL_COMP_Init+0x10a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a80      	ldr	r2, [pc, #512]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d101      	bne.n	8005a22 <HAL_COMP_Init+0x106>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e00f      	b.n	8005a42 <HAL_COMP_Init+0x126>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e00d      	b.n	8005a42 <HAL_COMP_Init+0x126>
 8005a26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a2a:	e00a      	b.n	8005a42 <HAL_COMP_Init+0x126>
 8005a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a30:	e007      	b.n	8005a42 <HAL_COMP_Init+0x126>
 8005a32:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005a36:	e004      	b.n	8005a42 <HAL_COMP_Init+0x126>
 8005a38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a3c:	e001      	b.n	8005a42 <HAL_COMP_Init+0x126>
 8005a3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a42:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80b6 	beq.w	8005bbe <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d011      	beq.n	8005a82 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a6e      	ldr	r2, [pc, #440]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_COMP_Init+0x156>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a6c      	ldr	r2, [pc, #432]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d103      	bne.n	8005a7a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8005a72:	6938      	ldr	r0, [r7, #16]
 8005a74:	f7ff feac 	bl	80057d0 <LL_EXTI_EnableRisingTrig_32_63>
 8005a78:	e014      	b.n	8005aa4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005a7a:	6938      	ldr	r0, [r7, #16]
 8005a7c:	f7ff fe96 	bl	80057ac <LL_EXTI_EnableRisingTrig_0_31>
 8005a80:	e010      	b.n	8005aa4 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a65      	ldr	r2, [pc, #404]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <HAL_COMP_Init+0x17a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a63      	ldr	r2, [pc, #396]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d103      	bne.n	8005a9e <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8005a96:	6938      	ldr	r0, [r7, #16]
 8005a98:	f7ff fec0 	bl	800581c <LL_EXTI_DisableRisingTrig_32_63>
 8005a9c:	e002      	b.n	8005aa4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005a9e:	6938      	ldr	r0, [r7, #16]
 8005aa0:	f7ff fea8 	bl	80057f4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d011      	beq.n	8005ad4 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a59      	ldr	r2, [pc, #356]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_COMP_Init+0x1a8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a58      	ldr	r2, [pc, #352]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d103      	bne.n	8005acc <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8005ac4:	6938      	ldr	r0, [r7, #16]
 8005ac6:	f7ff fecf 	bl	8005868 <LL_EXTI_EnableFallingTrig_32_63>
 8005aca:	e014      	b.n	8005af6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005acc:	6938      	ldr	r0, [r7, #16]
 8005ace:	f7ff feb9 	bl	8005844 <LL_EXTI_EnableFallingTrig_0_31>
 8005ad2:	e010      	b.n	8005af6 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a50      	ldr	r2, [pc, #320]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_COMP_Init+0x1cc>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a4f      	ldr	r2, [pc, #316]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8005ae8:	6938      	ldr	r0, [r7, #16]
 8005aea:	f7ff fee3 	bl	80058b4 <LL_EXTI_DisableFallingTrig_32_63>
 8005aee:	e002      	b.n	8005af6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005af0:	6938      	ldr	r0, [r7, #16]
 8005af2:	f7ff fecb 	bl	800588c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a48      	ldr	r2, [pc, #288]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_COMP_Init+0x1ee>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a46      	ldr	r2, [pc, #280]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d103      	bne.n	8005b12 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8005b0a:	6938      	ldr	r0, [r7, #16]
 8005b0c:	f7ff fef6 	bl	80058fc <LL_EXTI_ClearFlag_32_63>
 8005b10:	e002      	b.n	8005b18 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8005b12:	6938      	ldr	r0, [r7, #16]
 8005b14:	f7ff fee2 	bl	80058dc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d011      	beq.n	8005b48 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a3c      	ldr	r2, [pc, #240]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_COMP_Init+0x21c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a3b      	ldr	r2, [pc, #236]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d103      	bne.n	8005b40 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8005b38:	6938      	ldr	r0, [r7, #16]
 8005b3a:	f7ff fdfd 	bl	8005738 <LL_EXTI_EnableEvent_32_63>
 8005b3e:	e014      	b.n	8005b6a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8005b40:	6938      	ldr	r0, [r7, #16]
 8005b42:	f7ff fde7 	bl	8005714 <LL_EXTI_EnableEvent_0_31>
 8005b46:	e010      	b.n	8005b6a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a33      	ldr	r2, [pc, #204]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <HAL_COMP_Init+0x240>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a32      	ldr	r2, [pc, #200]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d103      	bne.n	8005b64 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8005b5c:	6938      	ldr	r0, [r7, #16]
 8005b5e:	f7ff fe11 	bl	8005784 <LL_EXTI_DisableEvent_32_63>
 8005b62:	e002      	b.n	8005b6a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8005b64:	6938      	ldr	r0, [r7, #16]
 8005b66:	f7ff fdf9 	bl	800575c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d011      	beq.n	8005b9a <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a28      	ldr	r2, [pc, #160]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_COMP_Init+0x26e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d103      	bne.n	8005b92 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8005b8a:	6938      	ldr	r0, [r7, #16]
 8005b8c:	f7ff fd88 	bl	80056a0 <LL_EXTI_EnableIT_32_63>
 8005b90:	e04b      	b.n	8005c2a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8005b92:	6938      	ldr	r0, [r7, #16]
 8005b94:	f7ff fd72 	bl	800567c <LL_EXTI_EnableIT_0_31>
 8005b98:	e047      	b.n	8005c2a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1f      	ldr	r2, [pc, #124]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d004      	beq.n	8005bae <HAL_COMP_Init+0x292>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d103      	bne.n	8005bb6 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8005bae:	6938      	ldr	r0, [r7, #16]
 8005bb0:	f7ff fd9c 	bl	80056ec <LL_EXTI_DisableIT_32_63>
 8005bb4:	e039      	b.n	8005c2a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8005bb6:	6938      	ldr	r0, [r7, #16]
 8005bb8:	f7ff fd84 	bl	80056c4 <LL_EXTI_DisableIT_0_31>
 8005bbc:	e035      	b.n	8005c2a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_COMP_Init+0x2b6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a14      	ldr	r2, [pc, #80]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d103      	bne.n	8005bda <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8005bd2:	6938      	ldr	r0, [r7, #16]
 8005bd4:	f7ff fdd6 	bl	8005784 <LL_EXTI_DisableEvent_32_63>
 8005bd8:	e002      	b.n	8005be0 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005bda:	6938      	ldr	r0, [r7, #16]
 8005bdc:	f7ff fdbe 	bl	800575c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a0d      	ldr	r2, [pc, #52]	; (8005c1c <HAL_COMP_Init+0x300>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <HAL_COMP_Init+0x2d8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <HAL_COMP_Init+0x304>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d117      	bne.n	8005c24 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8005bf4:	6938      	ldr	r0, [r7, #16]
 8005bf6:	f7ff fd79 	bl	80056ec <LL_EXTI_DisableIT_32_63>
 8005bfa:	e016      	b.n	8005c2a <HAL_COMP_Init+0x30e>
 8005bfc:	ff007e0f 	.word	0xff007e0f
 8005c00:	20000010 	.word	0x20000010
 8005c04:	053e2d63 	.word	0x053e2d63
 8005c08:	40010200 	.word	0x40010200
 8005c0c:	40010204 	.word	0x40010204
 8005c10:	40010208 	.word	0x40010208
 8005c14:	4001020c 	.word	0x4001020c
 8005c18:	40010210 	.word	0x40010210
 8005c1c:	40010214 	.word	0x40010214
 8005c20:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005c24:	6938      	ldr	r0, [r7, #16]
 8005c26:	f7ff fd4d 	bl	80056c4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	7f5b      	ldrb	r3, [r3, #29]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <__NVIC_SetPriorityGrouping>:
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <__NVIC_SetPriorityGrouping+0x44>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c60:	4013      	ands	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c76:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <__NVIC_SetPriorityGrouping+0x44>)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	60d3      	str	r3, [r2, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	e000ed00 	.word	0xe000ed00

08005c8c <__NVIC_GetPriorityGrouping>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c90:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	f003 0307 	and.w	r3, r3, #7
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	e000ed00 	.word	0xe000ed00

08005ca8 <__NVIC_EnableIRQ>:
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	db0b      	blt.n	8005cd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	f003 021f 	and.w	r2, r3, #31
 8005cc0:	4907      	ldr	r1, [pc, #28]	; (8005ce0 <__NVIC_EnableIRQ+0x38>)
 8005cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	2001      	movs	r0, #1
 8005cca:	fa00 f202 	lsl.w	r2, r0, r2
 8005cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	e000e100 	.word	0xe000e100

08005ce4 <__NVIC_SetPriority>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	6039      	str	r1, [r7, #0]
 8005cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	db0a      	blt.n	8005d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	490c      	ldr	r1, [pc, #48]	; (8005d30 <__NVIC_SetPriority+0x4c>)
 8005cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d02:	0112      	lsls	r2, r2, #4
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	440b      	add	r3, r1
 8005d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d0c:	e00a      	b.n	8005d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4908      	ldr	r1, [pc, #32]	; (8005d34 <__NVIC_SetPriority+0x50>)
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	3b04      	subs	r3, #4
 8005d1c:	0112      	lsls	r2, r2, #4
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	440b      	add	r3, r1
 8005d22:	761a      	strb	r2, [r3, #24]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	e000e100 	.word	0xe000e100
 8005d34:	e000ed00 	.word	0xe000ed00

08005d38 <NVIC_EncodePriority>:
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	; 0x24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f1c3 0307 	rsb	r3, r3, #7
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	bf28      	it	cs
 8005d56:	2304      	movcs	r3, #4
 8005d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	d902      	bls.n	8005d68 <NVIC_EncodePriority+0x30>
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3b03      	subs	r3, #3
 8005d66:	e000      	b.n	8005d6a <NVIC_EncodePriority+0x32>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43da      	mvns	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	401a      	ands	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8a:	43d9      	mvns	r1, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d90:	4313      	orrs	r3, r2
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3724      	adds	r7, #36	; 0x24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <SysTick_Config>:
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005db0:	d301      	bcc.n	8005db6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005db2:	2301      	movs	r3, #1
 8005db4:	e00f      	b.n	8005dd6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <SysTick_Config+0x40>)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dbe:	210f      	movs	r1, #15
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc4:	f7ff ff8e 	bl	8005ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <SysTick_Config+0x40>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dce:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <SysTick_Config+0x40>)
 8005dd0:	2207      	movs	r2, #7
 8005dd2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	e000e010 	.word	0xe000e010

08005de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff ff29 	bl	8005c44 <__NVIC_SetPriorityGrouping>
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b086      	sub	sp, #24
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	4603      	mov	r3, r0
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e08:	f7ff ff40 	bl	8005c8c <__NVIC_GetPriorityGrouping>
 8005e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	6978      	ldr	r0, [r7, #20]
 8005e14:	f7ff ff90 	bl	8005d38 <NVIC_EncodePriority>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff ff5f 	bl	8005ce4 <__NVIC_SetPriority>
}
 8005e26:	bf00      	nop
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	4603      	mov	r3, r0
 8005e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff ff33 	bl	8005ca8 <__NVIC_EnableIRQ>
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ffa4 	bl	8005da0 <SysTick_Config>
 8005e58:	4603      	mov	r3, r0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e014      	b.n	8005e9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	791b      	ldrb	r3, [r3, #4]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d105      	bne.n	8005e8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fc ff13 	bl	8002cb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	795b      	ldrb	r3, [r3, #5]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_DAC_Start+0x16>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e043      	b.n	8005f44 <HAL_DAC_Start+0x9e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6819      	ldr	r1, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	f7fe fb4d 	bl	8004580 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10f      	bne.n	8005f0c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d11d      	bne.n	8005f36 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0201 	orr.w	r2, r2, #1
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	e014      	b.n	8005f36 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d107      	bne.n	8005f36 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0202 	orr.w	r2, r2, #2
 8005f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	795b      	ldrb	r3, [r3, #5]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_DAC_Start_DMA+0x1e>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e0a1      	b.n	80060ae <HAL_DAC_Start_DMA+0x162>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2202      	movs	r2, #2
 8005f74:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d12a      	bne.n	8005fd2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4a4d      	ldr	r2, [pc, #308]	; (80060b8 <HAL_DAC_Start_DMA+0x16c>)
 8005f82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	4a4c      	ldr	r2, [pc, #304]	; (80060bc <HAL_DAC_Start_DMA+0x170>)
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4a4b      	ldr	r2, [pc, #300]	; (80060c0 <HAL_DAC_Start_DMA+0x174>)
 8005f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fa2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d009      	beq.n	8005fbe <HAL_DAC_Start_DMA+0x72>
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d00c      	beq.n	8005fc8 <HAL_DAC_Start_DMA+0x7c>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d000      	beq.n	8005fb4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005fb2:	e039      	b.n	8006028 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	613b      	str	r3, [r7, #16]
        break;
 8005fbc:	e034      	b.n	8006028 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	330c      	adds	r3, #12
 8005fc4:	613b      	str	r3, [r7, #16]
        break;
 8005fc6:	e02f      	b.n	8006028 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3310      	adds	r3, #16
 8005fce:	613b      	str	r3, [r7, #16]
        break;
 8005fd0:	e02a      	b.n	8006028 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	4a3b      	ldr	r2, [pc, #236]	; (80060c4 <HAL_DAC_Start_DMA+0x178>)
 8005fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	4a3a      	ldr	r2, [pc, #232]	; (80060c8 <HAL_DAC_Start_DMA+0x17c>)
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4a39      	ldr	r2, [pc, #228]	; (80060cc <HAL_DAC_Start_DMA+0x180>)
 8005fe8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ff8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d009      	beq.n	8006014 <HAL_DAC_Start_DMA+0xc8>
 8006000:	2b08      	cmp	r3, #8
 8006002:	d00c      	beq.n	800601e <HAL_DAC_Start_DMA+0xd2>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d000      	beq.n	800600a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8006008:	e00e      	b.n	8006028 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	613b      	str	r3, [r7, #16]
        break;
 8006012:	e009      	b.n	8006028 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3318      	adds	r3, #24
 800601a:	613b      	str	r3, [r7, #16]
        break;
 800601c:	e004      	b.n	8006028 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	331c      	adds	r3, #28
 8006024:	613b      	str	r3, [r7, #16]
        break;
 8006026:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d111      	bne.n	8006052 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800603c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6898      	ldr	r0, [r3, #8]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	f000 fbc8 	bl	80067dc <HAL_DMA_Start_IT>
 800604c:	4603      	mov	r3, r0
 800604e:	75fb      	strb	r3, [r7, #23]
 8006050:	e010      	b.n	8006074 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006060:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	68d8      	ldr	r0, [r3, #12]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	f000 fbb6 	bl	80067dc <HAL_DMA_Start_IT>
 8006070:	4603      	mov	r3, r0
 8006072:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10f      	bne.n	80060a0 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6819      	ldr	r1, [r3, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2201      	movs	r2, #1
 800608e:	409a      	lsls	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8006098:	2001      	movs	r0, #1
 800609a:	f7fe fa71 	bl	8004580 <HAL_Delay>
 800609e:	e005      	b.n	80060ac <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f043 0204 	orr.w	r2, r3, #4
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	08006579 	.word	0x08006579
 80060bc:	0800659b 	.word	0x0800659b
 80060c0:	080065b7 	.word	0x080065b7
 80060c4:	08006621 	.word	0x08006621
 80060c8:	08006643 	.word	0x08006643
 80060cc:	0800665f 	.word	0x0800665f

080060d0 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6819      	ldr	r1, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43da      	mvns	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	400a      	ands	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6819      	ldr	r1, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2201      	movs	r2, #1
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43da      	mvns	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	400a      	ands	r2, r1
 8006112:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8006114:	2001      	movs	r0, #1
 8006116:	f7fe fa33 	bl	8004580 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10f      	bne.n	8006140 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fbd4 	bl	80068d2 <HAL_DMA_Abort>
 800612a:	4603      	mov	r3, r0
 800612c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e00e      	b.n	800615e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fbc4 	bl	80068d2 <HAL_DMA_Abort>
 800614a:	4603      	mov	r3, r0
 800614c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800615c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2204      	movs	r2, #4
 8006168:	711a      	strb	r2, [r3, #4]
 800616a:	e002      	b.n	8006172 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4413      	add	r3, r2
 80061a6:	3308      	adds	r3, #8
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e004      	b.n	80061b6 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4413      	add	r3, r2
 80061b2:	3314      	adds	r3, #20
 80061b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	461a      	mov	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	e002      	b.n	8006212 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	; 0x28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	795b      	ldrb	r3, [r3, #5]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_DAC_ConfigChannel+0x1c>
 8006238:	2302      	movs	r3, #2
 800623a:	e194      	b.n	8006566 <HAL_DAC_ConfigChannel+0x346>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2202      	movs	r2, #2
 8006246:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d174      	bne.n	800633a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d137      	bne.n	80062c6 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8006256:	f7fe f987 	bl	8004568 <HAL_GetTick>
 800625a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800625c:	e011      	b.n	8006282 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800625e:	f7fe f983 	bl	8004568 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	d90a      	bls.n	8006282 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f043 0208 	orr.w	r2, r3, #8
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2203      	movs	r2, #3
 800627c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e171      	b.n	8006566 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e6      	bne.n	800625e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8006290:	2001      	movs	r0, #1
 8006292:	f7fe f975 	bl	8004580 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800629e:	641a      	str	r2, [r3, #64]	; 0x40
 80062a0:	e01e      	b.n	80062e0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062a2:	f7fe f961 	bl	8004568 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d90a      	bls.n	80062c6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f043 0208 	orr.w	r2, r3, #8
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2203      	movs	r2, #3
 80062c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e14f      	b.n	8006566 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	dbe8      	blt.n	80062a2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80062d0:	2001      	movs	r0, #1
 80062d2:	f7fe f955 	bl	8004580 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	43db      	mvns	r3, r3
 80062f6:	ea02 0103 	and.w	r1, r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	409a      	lsls	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	21ff      	movs	r1, #255	; 0xff
 800631c:	fa01 f303 	lsl.w	r3, r1, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	ea02 0103 	and.w	r1, r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	409a      	lsls	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d11d      	bne.n	800637e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	221f      	movs	r2, #31
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43db      	mvns	r3, r3
 8006358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635a:	4013      	ands	r3, r2
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006372:	4313      	orrs	r3, r2
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f003 0310 	and.w	r3, r3, #16
 800638c:	2207      	movs	r2, #7
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43db      	mvns	r3, r3
 8006394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006396:	4013      	ands	r3, r2
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	623b      	str	r3, [r7, #32]
 80063aa:	e011      	b.n	80063d0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80063b8:	2301      	movs	r3, #1
 80063ba:	623b      	str	r3, [r7, #32]
 80063bc:	e008      	b.n	80063d0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80063c6:	2301      	movs	r3, #1
 80063c8:	623b      	str	r3, [r7, #32]
 80063ca:	e001      	b.n	80063d0 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80063cc:	2300      	movs	r3, #0
 80063ce:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	6a3a      	ldr	r2, [r7, #32]
 80063dc:	4313      	orrs	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	43db      	mvns	r3, r3
 80063f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f2:	4013      	ands	r3, r2
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	791b      	ldrb	r3, [r3, #4]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d102      	bne.n	8006404 <HAL_DAC_ConfigChannel+0x1e4>
 80063fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006402:	e000      	b.n	8006406 <HAL_DAC_ConfigChannel+0x1e6>
 8006404:	2300      	movs	r3, #0
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4313      	orrs	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	43db      	mvns	r3, r3
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	4013      	ands	r3, r2
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	795b      	ldrb	r3, [r3, #5]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d102      	bne.n	8006430 <HAL_DAC_ConfigChannel+0x210>
 800642a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642e:	e000      	b.n	8006432 <HAL_DAC_ConfigChannel+0x212>
 8006430:	2300      	movs	r3, #0
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4313      	orrs	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d114      	bne.n	8006472 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006448:	f001 faf8 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 800644c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	4a47      	ldr	r2, [pc, #284]	; (8006570 <HAL_DAC_ConfigChannel+0x350>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d904      	bls.n	8006460 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
 800645e:	e00d      	b.n	800647c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	4a44      	ldr	r2, [pc, #272]	; (8006574 <HAL_DAC_ConfigChannel+0x354>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d909      	bls.n	800647c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
 8006470:	e004      	b.n	800647c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006478:	4313      	orrs	r3, r2
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f003 0310 	and.w	r3, r3, #16
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	4313      	orrs	r3, r2
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6819      	ldr	r1, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	43da      	mvns	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	400a      	ands	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43db      	mvns	r3, r3
 80064cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ce:	4013      	ands	r3, r2
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e6:	4313      	orrs	r3, r2
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6819      	ldr	r1, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	22c0      	movs	r2, #192	; 0xc0
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	43da      	mvns	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	400a      	ands	r2, r1
 800650c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	089b      	lsrs	r3, r3, #2
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	4313      	orrs	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	f640 710f 	movw	r1, #3855	; 0xf0f
 800653c:	fa01 f303 	lsl.w	r3, r1, r3
 8006540:	43db      	mvns	r3, r3
 8006542:	ea02 0103 	and.w	r1, r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	409a      	lsls	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3728      	adds	r7, #40	; 0x28
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	09896800 	.word	0x09896800
 8006574:	04c4b400 	.word	0x04c4b400

08006578 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff fe20 	bl	80061cc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	711a      	strb	r2, [r3, #4]
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff fe19 	bl	80061e0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f043 0204 	orr.w	r2, r3, #4
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7fd f812 	bl	80035fa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	711a      	strb	r2, [r3, #4]
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff ffd8 	bl	80065e4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	711a      	strb	r2, [r3, #4]
}
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f7ff ffd1 	bl	80065f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006656:	bf00      	nop
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f043 0204 	orr.w	r2, r3, #4
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff ffc7 	bl	800660c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	711a      	strb	r2, [r3, #4]
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e08d      	b.n	80067ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	4b47      	ldr	r3, [pc, #284]	; (80067c4 <HAL_DMA_Init+0x138>)
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d80f      	bhi.n	80066ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	4b45      	ldr	r3, [pc, #276]	; (80067c8 <HAL_DMA_Init+0x13c>)
 80066b2:	4413      	add	r3, r2
 80066b4:	4a45      	ldr	r2, [pc, #276]	; (80067cc <HAL_DMA_Init+0x140>)
 80066b6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ba:	091b      	lsrs	r3, r3, #4
 80066bc:	009a      	lsls	r2, r3, #2
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a42      	ldr	r2, [pc, #264]	; (80067d0 <HAL_DMA_Init+0x144>)
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40
 80066c8:	e00e      	b.n	80066e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	4b40      	ldr	r3, [pc, #256]	; (80067d4 <HAL_DMA_Init+0x148>)
 80066d2:	4413      	add	r3, r2
 80066d4:	4a3d      	ldr	r2, [pc, #244]	; (80067cc <HAL_DMA_Init+0x140>)
 80066d6:	fba2 2303 	umull	r2, r3, r2, r3
 80066da:	091b      	lsrs	r3, r3, #4
 80066dc:	009a      	lsls	r2, r3, #2
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a3c      	ldr	r2, [pc, #240]	; (80067d8 <HAL_DMA_Init+0x14c>)
 80066e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80066fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006702:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800670c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa10 	bl	8006b60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006748:	d102      	bne.n	8006750 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006764:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d010      	beq.n	8006790 <HAL_DMA_Init+0x104>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b04      	cmp	r3, #4
 8006774:	d80c      	bhi.n	8006790 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa30 	bl	8006bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800678c:	605a      	str	r2, [r3, #4]
 800678e:	e008      	b.n	80067a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40020407 	.word	0x40020407
 80067c8:	bffdfff8 	.word	0xbffdfff8
 80067cc:	cccccccd 	.word	0xcccccccd
 80067d0:	40020000 	.word	0x40020000
 80067d4:	bffdfbf8 	.word	0xbffdfbf8
 80067d8:	40020400 	.word	0x40020400

080067dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_DMA_Start_IT+0x20>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e066      	b.n	80068ca <HAL_DMA_Start_IT+0xee>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	d155      	bne.n	80068bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0201 	bic.w	r2, r2, #1
 800682c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 f954 	bl	8006ae2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	2b00      	cmp	r3, #0
 8006840:	d008      	beq.n	8006854 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 020e 	orr.w	r2, r2, #14
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e00f      	b.n	8006874 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0204 	bic.w	r2, r2, #4
 8006862:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 020a 	orr.w	r2, r2, #10
 8006872:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006890:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e005      	b.n	80068c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80068c4:	2302      	movs	r3, #2
 80068c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b085      	sub	sp, #20
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d005      	beq.n	80068f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2204      	movs	r2, #4
 80068ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
 80068f4:	e037      	b.n	8006966 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 020e 	bic.w	r2, r2, #14
 8006904:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006914:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0201 	bic.w	r2, r2, #1
 8006924:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	f003 021f 	and.w	r2, r3, #31
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	2101      	movs	r1, #1
 8006934:	fa01 f202 	lsl.w	r2, r1, r2
 8006938:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006942:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00c      	beq.n	8006966 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800695a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006964:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a0:	f003 031f 	and.w	r3, r3, #31
 80069a4:	2204      	movs	r2, #4
 80069a6:	409a      	lsls	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d026      	beq.n	80069fe <HAL_DMA_IRQHandler+0x7a>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d021      	beq.n	80069fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0204 	bic.w	r2, r2, #4
 80069d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069dc:	f003 021f 	and.w	r2, r3, #31
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	2104      	movs	r1, #4
 80069e6:	fa01 f202 	lsl.w	r2, r1, r2
 80069ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d071      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80069fc:	e06c      	b.n	8006ad8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	2202      	movs	r2, #2
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02e      	beq.n	8006a70 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d029      	beq.n	8006a70 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 020a 	bic.w	r2, r2, #10
 8006a38:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a46:	f003 021f 	and.w	r2, r3, #31
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	2102      	movs	r1, #2
 8006a50:	fa01 f202 	lsl.w	r2, r1, r2
 8006a54:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d038      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006a6e:	e033      	b.n	8006ad8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	2208      	movs	r2, #8
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02a      	beq.n	8006ada <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d025      	beq.n	8006ada <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 020e 	bic.w	r2, r2, #14
 8006a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	f003 021f 	and.w	r2, r3, #31
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2101      	movs	r1, #1
 8006aac:	fa01 f202 	lsl.w	r2, r1, r2
 8006ab0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
}
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006af8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006b0a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b10:	f003 021f 	and.w	r2, r3, #31
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	2101      	movs	r1, #1
 8006b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b1e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d108      	bne.n	8006b42 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b40:	e007      	b.n	8006b52 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	60da      	str	r2, [r3, #12]
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
	...

08006b60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4b16      	ldr	r3, [pc, #88]	; (8006bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d802      	bhi.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006b74:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e001      	b.n	8006b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006b7a:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006b7c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	3b08      	subs	r3, #8
 8006b8a:	4a12      	ldr	r2, [pc, #72]	; (8006bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	091b      	lsrs	r3, r3, #4
 8006b92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b98:	089b      	lsrs	r3, r3, #2
 8006b9a:	009a      	lsls	r2, r3, #2
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a0b      	ldr	r2, [pc, #44]	; (8006bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006baa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	409a      	lsls	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40020407 	.word	0x40020407
 8006bcc:	40020800 	.word	0x40020800
 8006bd0:	40020820 	.word	0x40020820
 8006bd4:	cccccccd 	.word	0xcccccccd
 8006bd8:	40020880 	.word	0x40020880

08006bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4b0b      	ldr	r3, [pc, #44]	; (8006c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006bfe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	2201      	movs	r2, #1
 8006c0a:	409a      	lsls	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	1000823f 	.word	0x1000823f
 8006c20:	40020940 	.word	0x40020940

08006c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006c32:	e15a      	b.n	8006eea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	2101      	movs	r1, #1
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c40:	4013      	ands	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 814c 	beq.w	8006ee4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d00b      	beq.n	8006c6c <HAL_GPIO_Init+0x48>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d007      	beq.n	8006c6c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c60:	2b11      	cmp	r3, #17
 8006c62:	d003      	beq.n	8006c6c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b12      	cmp	r3, #18
 8006c6a:	d130      	bne.n	8006cce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	2203      	movs	r2, #3
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4013      	ands	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	43db      	mvns	r3, r3
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	091b      	lsrs	r3, r3, #4
 8006cb8:	f003 0201 	and.w	r2, r3, #1
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	2203      	movs	r2, #3
 8006cda:	fa02 f303 	lsl.w	r3, r2, r3
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d003      	beq.n	8006d0e <HAL_GPIO_Init+0xea>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b12      	cmp	r3, #18
 8006d0c:	d123      	bne.n	8006d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	08da      	lsrs	r2, r3, #3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3208      	adds	r2, #8
 8006d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	220f      	movs	r2, #15
 8006d26:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	08da      	lsrs	r2, r3, #3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3208      	adds	r2, #8
 8006d50:	6939      	ldr	r1, [r7, #16]
 8006d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	2203      	movs	r2, #3
 8006d62:	fa02 f303 	lsl.w	r3, r2, r3
 8006d66:	43db      	mvns	r3, r3
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f003 0203 	and.w	r2, r3, #3
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80a6 	beq.w	8006ee4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d98:	4b5b      	ldr	r3, [pc, #364]	; (8006f08 <HAL_GPIO_Init+0x2e4>)
 8006d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9c:	4a5a      	ldr	r2, [pc, #360]	; (8006f08 <HAL_GPIO_Init+0x2e4>)
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	6613      	str	r3, [r2, #96]	; 0x60
 8006da4:	4b58      	ldr	r3, [pc, #352]	; (8006f08 <HAL_GPIO_Init+0x2e4>)
 8006da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006db0:	4a56      	ldr	r2, [pc, #344]	; (8006f0c <HAL_GPIO_Init+0x2e8>)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	089b      	lsrs	r3, r3, #2
 8006db6:	3302      	adds	r3, #2
 8006db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	220f      	movs	r2, #15
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006dda:	d01f      	beq.n	8006e1c <HAL_GPIO_Init+0x1f8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a4c      	ldr	r2, [pc, #304]	; (8006f10 <HAL_GPIO_Init+0x2ec>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d019      	beq.n	8006e18 <HAL_GPIO_Init+0x1f4>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a4b      	ldr	r2, [pc, #300]	; (8006f14 <HAL_GPIO_Init+0x2f0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d013      	beq.n	8006e14 <HAL_GPIO_Init+0x1f0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a4a      	ldr	r2, [pc, #296]	; (8006f18 <HAL_GPIO_Init+0x2f4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00d      	beq.n	8006e10 <HAL_GPIO_Init+0x1ec>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a49      	ldr	r2, [pc, #292]	; (8006f1c <HAL_GPIO_Init+0x2f8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d007      	beq.n	8006e0c <HAL_GPIO_Init+0x1e8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a48      	ldr	r2, [pc, #288]	; (8006f20 <HAL_GPIO_Init+0x2fc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d101      	bne.n	8006e08 <HAL_GPIO_Init+0x1e4>
 8006e04:	2305      	movs	r3, #5
 8006e06:	e00a      	b.n	8006e1e <HAL_GPIO_Init+0x1fa>
 8006e08:	2306      	movs	r3, #6
 8006e0a:	e008      	b.n	8006e1e <HAL_GPIO_Init+0x1fa>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	e006      	b.n	8006e1e <HAL_GPIO_Init+0x1fa>
 8006e10:	2303      	movs	r3, #3
 8006e12:	e004      	b.n	8006e1e <HAL_GPIO_Init+0x1fa>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e002      	b.n	8006e1e <HAL_GPIO_Init+0x1fa>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <HAL_GPIO_Init+0x1fa>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	f002 0203 	and.w	r2, r2, #3
 8006e24:	0092      	lsls	r2, r2, #2
 8006e26:	4093      	lsls	r3, r2
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e2e:	4937      	ldr	r1, [pc, #220]	; (8006f0c <HAL_GPIO_Init+0x2e8>)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	089b      	lsrs	r3, r3, #2
 8006e34:	3302      	adds	r3, #2
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006e3c:	4b39      	ldr	r3, [pc, #228]	; (8006f24 <HAL_GPIO_Init+0x300>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	43db      	mvns	r3, r3
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e60:	4a30      	ldr	r2, [pc, #192]	; (8006f24 <HAL_GPIO_Init+0x300>)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006e66:	4b2f      	ldr	r3, [pc, #188]	; (8006f24 <HAL_GPIO_Init+0x300>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4013      	ands	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e8a:	4a26      	ldr	r2, [pc, #152]	; (8006f24 <HAL_GPIO_Init+0x300>)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e90:	4b24      	ldr	r3, [pc, #144]	; (8006f24 <HAL_GPIO_Init+0x300>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006eb4:	4a1b      	ldr	r2, [pc, #108]	; (8006f24 <HAL_GPIO_Init+0x300>)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006eba:	4b1a      	ldr	r3, [pc, #104]	; (8006f24 <HAL_GPIO_Init+0x300>)
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006ede:	4a11      	ldr	r2, [pc, #68]	; (8006f24 <HAL_GPIO_Init+0x300>)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f47f ae9d 	bne.w	8006c34 <HAL_GPIO_Init+0x10>
  }
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	48000400 	.word	0x48000400
 8006f14:	48000800 	.word	0x48000800
 8006f18:	48000c00 	.word	0x48000c00
 8006f1c:	48001000 	.word	0x48001000
 8006f20:	48001400 	.word	0x48001400
 8006f24:	40010400 	.word	0x40010400

08006f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	887b      	ldrh	r3, [r7, #2]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f40:	2301      	movs	r3, #1
 8006f42:	73fb      	strb	r3, [r7, #15]
 8006f44:	e001      	b.n	8006f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	807b      	strh	r3, [r7, #2]
 8006f64:	4613      	mov	r3, r2
 8006f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f68:	787b      	ldrb	r3, [r7, #1]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f6e:	887a      	ldrh	r2, [r7, #2]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f74:	e002      	b.n	8006f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f76:	887a      	ldrh	r2, [r7, #2]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d141      	bne.n	800701a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f96:	4b4b      	ldr	r3, [pc, #300]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa2:	d131      	bne.n	8007008 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fa4:	4b47      	ldr	r3, [pc, #284]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006faa:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006fb4:	4b43      	ldr	r3, [pc, #268]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006fbc:	4a41      	ldr	r2, [pc, #260]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006fc4:	4b40      	ldr	r3, [pc, #256]	; (80070c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2232      	movs	r2, #50	; 0x32
 8006fca:	fb02 f303 	mul.w	r3, r2, r3
 8006fce:	4a3f      	ldr	r2, [pc, #252]	; (80070cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd4:	0c9b      	lsrs	r3, r3, #18
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fda:	e002      	b.n	8006fe2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fe2:	4b38      	ldr	r3, [pc, #224]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fee:	d102      	bne.n	8006ff6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f2      	bne.n	8006fdc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ff6:	4b33      	ldr	r3, [pc, #204]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007002:	d158      	bne.n	80070b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e057      	b.n	80070b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007008:	4b2e      	ldr	r3, [pc, #184]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800700a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800700e:	4a2d      	ldr	r2, [pc, #180]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007014:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007018:	e04d      	b.n	80070b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007020:	d141      	bne.n	80070a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007022:	4b28      	ldr	r3, [pc, #160]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800702a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702e:	d131      	bne.n	8007094 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007030:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007036:	4a23      	ldr	r2, [pc, #140]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007040:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007048:	4a1e      	ldr	r2, [pc, #120]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800704a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800704e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007050:	4b1d      	ldr	r3, [pc, #116]	; (80070c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2232      	movs	r2, #50	; 0x32
 8007056:	fb02 f303 	mul.w	r3, r2, r3
 800705a:	4a1c      	ldr	r2, [pc, #112]	; (80070cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800705c:	fba2 2303 	umull	r2, r3, r2, r3
 8007060:	0c9b      	lsrs	r3, r3, #18
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007066:	e002      	b.n	800706e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3b01      	subs	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707a:	d102      	bne.n	8007082 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f2      	bne.n	8007068 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007082:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708e:	d112      	bne.n	80070b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e011      	b.n	80070b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800709a:	4a0a      	ldr	r2, [pc, #40]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800709c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80070a4:	e007      	b.n	80070b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80070a6:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070ae:	4a05      	ldr	r2, [pc, #20]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	40007000 	.word	0x40007000
 80070c8:	20000010 	.word	0x20000010
 80070cc:	431bde83 	.word	0x431bde83

080070d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e308      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d075      	beq.n	80071da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ee:	4ba3      	ldr	r3, [pc, #652]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 030c 	and.w	r3, r3, #12
 80070f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070f8:	4ba0      	ldr	r3, [pc, #640]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d102      	bne.n	800710e <HAL_RCC_OscConfig+0x3e>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d002      	beq.n	8007114 <HAL_RCC_OscConfig+0x44>
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b08      	cmp	r3, #8
 8007112:	d10b      	bne.n	800712c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007114:	4b99      	ldr	r3, [pc, #612]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d05b      	beq.n	80071d8 <HAL_RCC_OscConfig+0x108>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d157      	bne.n	80071d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e2e3      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007134:	d106      	bne.n	8007144 <HAL_RCC_OscConfig+0x74>
 8007136:	4b91      	ldr	r3, [pc, #580]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a90      	ldr	r2, [pc, #576]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800713c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e01d      	b.n	8007180 <HAL_RCC_OscConfig+0xb0>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800714c:	d10c      	bne.n	8007168 <HAL_RCC_OscConfig+0x98>
 800714e:	4b8b      	ldr	r3, [pc, #556]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a8a      	ldr	r2, [pc, #552]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	4b88      	ldr	r3, [pc, #544]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a87      	ldr	r2, [pc, #540]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e00b      	b.n	8007180 <HAL_RCC_OscConfig+0xb0>
 8007168:	4b84      	ldr	r3, [pc, #528]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a83      	ldr	r2, [pc, #524]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800716e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	4b81      	ldr	r3, [pc, #516]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a80      	ldr	r2, [pc, #512]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800717a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800717e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007188:	f7fd f9ee 	bl	8004568 <HAL_GetTick>
 800718c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007190:	f7fd f9ea 	bl	8004568 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b64      	cmp	r3, #100	; 0x64
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e2a8      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071a2:	4b76      	ldr	r3, [pc, #472]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f0      	beq.n	8007190 <HAL_RCC_OscConfig+0xc0>
 80071ae:	e014      	b.n	80071da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fd f9da 	bl	8004568 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071b8:	f7fd f9d6 	bl	8004568 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b64      	cmp	r3, #100	; 0x64
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e294      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071ca:	4b6c      	ldr	r3, [pc, #432]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0xe8>
 80071d6:	e000      	b.n	80071da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d075      	beq.n	80072d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071e6:	4b65      	ldr	r3, [pc, #404]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 030c 	and.w	r3, r3, #12
 80071ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071f0:	4b62      	ldr	r3, [pc, #392]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b0c      	cmp	r3, #12
 80071fe:	d102      	bne.n	8007206 <HAL_RCC_OscConfig+0x136>
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2b02      	cmp	r3, #2
 8007204:	d002      	beq.n	800720c <HAL_RCC_OscConfig+0x13c>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d11f      	bne.n	800724c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800720c:	4b5b      	ldr	r3, [pc, #364]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <HAL_RCC_OscConfig+0x154>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e267      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007224:	4b55      	ldr	r3, [pc, #340]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	061b      	lsls	r3, r3, #24
 8007232:	4952      	ldr	r1, [pc, #328]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007234:	4313      	orrs	r3, r2
 8007236:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007238:	4b51      	ldr	r3, [pc, #324]	; (8007380 <HAL_RCC_OscConfig+0x2b0>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f7fd f947 	bl	80044d0 <HAL_InitTick>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d043      	beq.n	80072d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e253      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d023      	beq.n	800729c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007254:	4b49      	ldr	r3, [pc, #292]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a48      	ldr	r2, [pc, #288]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800725a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800725e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fd f982 	bl	8004568 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007268:	f7fd f97e 	bl	8004568 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e23c      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727a:	4b40      	ldr	r3, [pc, #256]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007286:	4b3d      	ldr	r3, [pc, #244]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	061b      	lsls	r3, r3, #24
 8007294:	4939      	ldr	r1, [pc, #228]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007296:	4313      	orrs	r3, r2
 8007298:	604b      	str	r3, [r1, #4]
 800729a:	e01a      	b.n	80072d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800729c:	4b37      	ldr	r3, [pc, #220]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a36      	ldr	r2, [pc, #216]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80072a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a8:	f7fd f95e 	bl	8004568 <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072b0:	f7fd f95a 	bl	8004568 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e218      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072c2:	4b2e      	ldr	r3, [pc, #184]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f0      	bne.n	80072b0 <HAL_RCC_OscConfig+0x1e0>
 80072ce:	e000      	b.n	80072d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d03c      	beq.n	8007358 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d01c      	beq.n	8007320 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e6:	4b25      	ldr	r3, [pc, #148]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80072e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072ec:	4a23      	ldr	r2, [pc, #140]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 80072ee:	f043 0301 	orr.w	r3, r3, #1
 80072f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f6:	f7fd f937 	bl	8004568 <HAL_GetTick>
 80072fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fe:	f7fd f933 	bl	8004568 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e1f1      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007310:	4b1a      	ldr	r3, [pc, #104]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0ef      	beq.n	80072fe <HAL_RCC_OscConfig+0x22e>
 800731e:	e01b      	b.n	8007358 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007320:	4b16      	ldr	r3, [pc, #88]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007326:	4a15      	ldr	r2, [pc, #84]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007330:	f7fd f91a 	bl	8004568 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007338:	f7fd f916 	bl	8004568 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e1d4      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800734a:	4b0c      	ldr	r3, [pc, #48]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800734c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1ef      	bne.n	8007338 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80ab 	beq.w	80074bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007366:	2300      	movs	r3, #0
 8007368:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800736a:	4b04      	ldr	r3, [pc, #16]	; (800737c <HAL_RCC_OscConfig+0x2ac>)
 800736c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_RCC_OscConfig+0x2b4>
 8007376:	2301      	movs	r3, #1
 8007378:	e005      	b.n	8007386 <HAL_RCC_OscConfig+0x2b6>
 800737a:	bf00      	nop
 800737c:	40021000 	.word	0x40021000
 8007380:	20000014 	.word	0x20000014
 8007384:	2300      	movs	r3, #0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00d      	beq.n	80073a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800738a:	4baf      	ldr	r3, [pc, #700]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800738c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738e:	4aae      	ldr	r2, [pc, #696]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007394:	6593      	str	r3, [r2, #88]	; 0x58
 8007396:	4bac      	ldr	r3, [pc, #688]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80073a2:	2301      	movs	r3, #1
 80073a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073a6:	4ba9      	ldr	r3, [pc, #676]	; (800764c <HAL_RCC_OscConfig+0x57c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d118      	bne.n	80073e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073b2:	4ba6      	ldr	r3, [pc, #664]	; (800764c <HAL_RCC_OscConfig+0x57c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4aa5      	ldr	r2, [pc, #660]	; (800764c <HAL_RCC_OscConfig+0x57c>)
 80073b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073be:	f7fd f8d3 	bl	8004568 <HAL_GetTick>
 80073c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c4:	e008      	b.n	80073d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073c6:	f7fd f8cf 	bl	8004568 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e18d      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073d8:	4b9c      	ldr	r3, [pc, #624]	; (800764c <HAL_RCC_OscConfig+0x57c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d108      	bne.n	80073fe <HAL_RCC_OscConfig+0x32e>
 80073ec:	4b96      	ldr	r3, [pc, #600]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80073ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f2:	4a95      	ldr	r2, [pc, #596]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80073f4:	f043 0301 	orr.w	r3, r3, #1
 80073f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073fc:	e024      	b.n	8007448 <HAL_RCC_OscConfig+0x378>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b05      	cmp	r3, #5
 8007404:	d110      	bne.n	8007428 <HAL_RCC_OscConfig+0x358>
 8007406:	4b90      	ldr	r3, [pc, #576]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740c:	4a8e      	ldr	r2, [pc, #568]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800740e:	f043 0304 	orr.w	r3, r3, #4
 8007412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007416:	4b8c      	ldr	r3, [pc, #560]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741c:	4a8a      	ldr	r2, [pc, #552]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007426:	e00f      	b.n	8007448 <HAL_RCC_OscConfig+0x378>
 8007428:	4b87      	ldr	r3, [pc, #540]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742e:	4a86      	ldr	r2, [pc, #536]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007438:	4b83      	ldr	r3, [pc, #524]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743e:	4a82      	ldr	r2, [pc, #520]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007440:	f023 0304 	bic.w	r3, r3, #4
 8007444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d016      	beq.n	800747e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007450:	f7fd f88a 	bl	8004568 <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007456:	e00a      	b.n	800746e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007458:	f7fd f886 	bl	8004568 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	f241 3288 	movw	r2, #5000	; 0x1388
 8007466:	4293      	cmp	r3, r2
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e142      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800746e:	4b76      	ldr	r3, [pc, #472]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0ed      	beq.n	8007458 <HAL_RCC_OscConfig+0x388>
 800747c:	e015      	b.n	80074aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800747e:	f7fd f873 	bl	8004568 <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007484:	e00a      	b.n	800749c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007486:	f7fd f86f 	bl	8004568 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f241 3288 	movw	r2, #5000	; 0x1388
 8007494:	4293      	cmp	r3, r2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e12b      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800749c:	4b6a      	ldr	r3, [pc, #424]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800749e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1ed      	bne.n	8007486 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074aa:	7ffb      	ldrb	r3, [r7, #31]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d105      	bne.n	80074bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074b0:	4b65      	ldr	r3, [pc, #404]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80074b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b4:	4a64      	ldr	r2, [pc, #400]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80074b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d03c      	beq.n	8007542 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01c      	beq.n	800750a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074d0:	4b5d      	ldr	r3, [pc, #372]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80074d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074d6:	4a5c      	ldr	r2, [pc, #368]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e0:	f7fd f842 	bl	8004568 <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074e8:	f7fd f83e 	bl	8004568 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e0fc      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074fa:	4b53      	ldr	r3, [pc, #332]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80074fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0ef      	beq.n	80074e8 <HAL_RCC_OscConfig+0x418>
 8007508:	e01b      	b.n	8007542 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800750a:	4b4f      	ldr	r3, [pc, #316]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800750c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007510:	4a4d      	ldr	r2, [pc, #308]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751a:	f7fd f825 	bl	8004568 <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007520:	e008      	b.n	8007534 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007522:	f7fd f821 	bl	8004568 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e0df      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007534:	4b44      	ldr	r3, [pc, #272]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1ef      	bne.n	8007522 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 80d3 	beq.w	80076f2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800754c:	4b3e      	ldr	r3, [pc, #248]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 030c 	and.w	r3, r3, #12
 8007554:	2b0c      	cmp	r3, #12
 8007556:	f000 808d 	beq.w	8007674 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d15a      	bne.n	8007618 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007562:	4b39      	ldr	r3, [pc, #228]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a38      	ldr	r2, [pc, #224]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800756c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756e:	f7fc fffb 	bl	8004568 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007574:	e008      	b.n	8007588 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007576:	f7fc fff7 	bl	8004568 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e0b5      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007588:	4b2f      	ldr	r3, [pc, #188]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1f0      	bne.n	8007576 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007594:	4b2c      	ldr	r3, [pc, #176]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	4b2d      	ldr	r3, [pc, #180]	; (8007650 <HAL_RCC_OscConfig+0x580>)
 800759a:	4013      	ands	r3, r2
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6a11      	ldr	r1, [r2, #32]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075a4:	3a01      	subs	r2, #1
 80075a6:	0112      	lsls	r2, r2, #4
 80075a8:	4311      	orrs	r1, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80075ae:	0212      	lsls	r2, r2, #8
 80075b0:	4311      	orrs	r1, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075b6:	0852      	lsrs	r2, r2, #1
 80075b8:	3a01      	subs	r2, #1
 80075ba:	0552      	lsls	r2, r2, #21
 80075bc:	4311      	orrs	r1, r2
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075c2:	0852      	lsrs	r2, r2, #1
 80075c4:	3a01      	subs	r2, #1
 80075c6:	0652      	lsls	r2, r2, #25
 80075c8:	4311      	orrs	r1, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075ce:	06d2      	lsls	r2, r2, #27
 80075d0:	430a      	orrs	r2, r1
 80075d2:	491d      	ldr	r1, [pc, #116]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075d8:	4b1b      	ldr	r3, [pc, #108]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1a      	ldr	r2, [pc, #104]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80075de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075e4:	4b18      	ldr	r3, [pc, #96]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4a17      	ldr	r2, [pc, #92]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 80075ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f0:	f7fc ffba 	bl	8004568 <HAL_GetTick>
 80075f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f8:	f7fc ffb6 	bl	8004568 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e074      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800760a:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f0      	beq.n	80075f8 <HAL_RCC_OscConfig+0x528>
 8007616:	e06c      	b.n	80076f2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007618:	4b0b      	ldr	r3, [pc, #44]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800761e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007622:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007624:	4b08      	ldr	r3, [pc, #32]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	4a07      	ldr	r2, [pc, #28]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4a04      	ldr	r2, [pc, #16]	; (8007648 <HAL_RCC_OscConfig+0x578>)
 8007636:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800763a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800763e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007640:	f7fc ff92 	bl	8004568 <HAL_GetTick>
 8007644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007646:	e00e      	b.n	8007666 <HAL_RCC_OscConfig+0x596>
 8007648:	40021000 	.word	0x40021000
 800764c:	40007000 	.word	0x40007000
 8007650:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007654:	f7fc ff88 	bl	8004568 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e046      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007666:	4b25      	ldr	r3, [pc, #148]	; (80076fc <HAL_RCC_OscConfig+0x62c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f0      	bne.n	8007654 <HAL_RCC_OscConfig+0x584>
 8007672:	e03e      	b.n	80076f2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e039      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007680:	4b1e      	ldr	r3, [pc, #120]	; (80076fc <HAL_RCC_OscConfig+0x62c>)
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f003 0203 	and.w	r2, r3, #3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	429a      	cmp	r2, r3
 8007692:	d12c      	bne.n	80076ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	3b01      	subs	r3, #1
 80076a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d123      	bne.n	80076ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d11b      	bne.n	80076ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d113      	bne.n	80076ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	085b      	lsrs	r3, r3, #1
 80076d2:	3b01      	subs	r3, #1
 80076d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d109      	bne.n	80076ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	3b01      	subs	r3, #1
 80076e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d001      	beq.n	80076f2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40021000 	.word	0x40021000

08007700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e11e      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007718:	4b91      	ldr	r3, [pc, #580]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d910      	bls.n	8007748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007726:	4b8e      	ldr	r3, [pc, #568]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f023 020f 	bic.w	r2, r3, #15
 800772e:	498c      	ldr	r1, [pc, #560]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	4313      	orrs	r3, r2
 8007734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007736:	4b8a      	ldr	r3, [pc, #552]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d001      	beq.n	8007748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e106      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d073      	beq.n	800783c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d129      	bne.n	80077b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800775c:	4b81      	ldr	r3, [pc, #516]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0f4      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800776c:	f000 f972 	bl	8007a54 <RCC_GetSysClockFreqFromPLLSource>
 8007770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	4a7c      	ldr	r2, [pc, #496]	; (8007968 <HAL_RCC_ClockConfig+0x268>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d93f      	bls.n	80077fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800777a:	4b7a      	ldr	r3, [pc, #488]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800778e:	2b00      	cmp	r3, #0
 8007790:	d033      	beq.n	80077fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007796:	2b00      	cmp	r3, #0
 8007798:	d12f      	bne.n	80077fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800779a:	4b72      	ldr	r3, [pc, #456]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077a2:	4a70      	ldr	r2, [pc, #448]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80077aa:	2380      	movs	r3, #128	; 0x80
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	e024      	b.n	80077fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d107      	bne.n	80077c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077b8:	4b6a      	ldr	r3, [pc, #424]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d109      	bne.n	80077d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0c6      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077c8:	4b66      	ldr	r3, [pc, #408]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0be      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80077d8:	f000 f8ce 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 80077dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	4a61      	ldr	r2, [pc, #388]	; (8007968 <HAL_RCC_ClockConfig+0x268>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d909      	bls.n	80077fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077e6:	4b5f      	ldr	r3, [pc, #380]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ee:	4a5d      	ldr	r2, [pc, #372]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80077f6:	2380      	movs	r3, #128	; 0x80
 80077f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077fa:	4b5a      	ldr	r3, [pc, #360]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f023 0203 	bic.w	r2, r3, #3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	4957      	ldr	r1, [pc, #348]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007808:	4313      	orrs	r3, r2
 800780a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780c:	f7fc feac 	bl	8004568 <HAL_GetTick>
 8007810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007812:	e00a      	b.n	800782a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007814:	f7fc fea8 	bl	8004568 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007822:	4293      	cmp	r3, r2
 8007824:	d901      	bls.n	800782a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e095      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800782a:	4b4e      	ldr	r3, [pc, #312]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 020c 	and.w	r2, r3, #12
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	429a      	cmp	r2, r3
 800783a:	d1eb      	bne.n	8007814 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d023      	beq.n	8007890 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007854:	4b43      	ldr	r3, [pc, #268]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4a42      	ldr	r2, [pc, #264]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800785a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800785e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800786c:	4b3d      	ldr	r3, [pc, #244]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007874:	4a3b      	ldr	r2, [pc, #236]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007876:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800787a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800787c:	4b39      	ldr	r3, [pc, #228]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	4936      	ldr	r1, [pc, #216]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800788a:	4313      	orrs	r3, r2
 800788c:	608b      	str	r3, [r1, #8]
 800788e:	e008      	b.n	80078a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d105      	bne.n	80078a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007896:	4b33      	ldr	r3, [pc, #204]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	4a32      	ldr	r2, [pc, #200]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800789c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078a2:	4b2f      	ldr	r3, [pc, #188]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d21d      	bcs.n	80078ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b0:	4b2b      	ldr	r3, [pc, #172]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f023 020f 	bic.w	r2, r3, #15
 80078b8:	4929      	ldr	r1, [pc, #164]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	4313      	orrs	r3, r2
 80078be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80078c0:	f7fc fe52 	bl	8004568 <HAL_GetTick>
 80078c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c6:	e00a      	b.n	80078de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078c8:	f7fc fe4e 	bl	8004568 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e03b      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078de:	4b20      	ldr	r3, [pc, #128]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 030f 	and.w	r3, r3, #15
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d1ed      	bne.n	80078c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078f8:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4917      	ldr	r1, [pc, #92]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007906:	4313      	orrs	r3, r2
 8007908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007916:	4b13      	ldr	r3, [pc, #76]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	490f      	ldr	r1, [pc, #60]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007926:	4313      	orrs	r3, r2
 8007928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800792a:	f000 f825 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 800792e:	4601      	mov	r1, r0
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	4a0c      	ldr	r2, [pc, #48]	; (800796c <HAL_RCC_ClockConfig+0x26c>)
 800793c:	5cd3      	ldrb	r3, [r2, r3]
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	fa21 f303 	lsr.w	r3, r1, r3
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <HAL_RCC_ClockConfig+0x270>)
 8007948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800794a:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <HAL_RCC_ClockConfig+0x274>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7fc fdbe 	bl	80044d0 <HAL_InitTick>
 8007954:	4603      	mov	r3, r0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40022000 	.word	0x40022000
 8007964:	40021000 	.word	0x40021000
 8007968:	04c4b400 	.word	0x04c4b400
 800796c:	0800be90 	.word	0x0800be90
 8007970:	20000010 	.word	0x20000010
 8007974:	20000014 	.word	0x20000014

08007978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800797e:	4b2c      	ldr	r3, [pc, #176]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 030c 	and.w	r3, r3, #12
 8007986:	2b04      	cmp	r3, #4
 8007988:	d102      	bne.n	8007990 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800798a:	4b2a      	ldr	r3, [pc, #168]	; (8007a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	e047      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007990:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 030c 	and.w	r3, r3, #12
 8007998:	2b08      	cmp	r3, #8
 800799a:	d102      	bne.n	80079a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800799c:	4b26      	ldr	r3, [pc, #152]	; (8007a38 <HAL_RCC_GetSysClockFreq+0xc0>)
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	e03e      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80079a2:	4b23      	ldr	r3, [pc, #140]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 030c 	and.w	r3, r3, #12
 80079aa:	2b0c      	cmp	r3, #12
 80079ac:	d136      	bne.n	8007a1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079ae:	4b20      	ldr	r3, [pc, #128]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	091b      	lsrs	r3, r3, #4
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	3301      	adds	r3, #1
 80079c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d10c      	bne.n	80079e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079cc:	4a1a      	ldr	r2, [pc, #104]	; (8007a38 <HAL_RCC_GetSysClockFreq+0xc0>)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d4:	4a16      	ldr	r2, [pc, #88]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079d6:	68d2      	ldr	r2, [r2, #12]
 80079d8:	0a12      	lsrs	r2, r2, #8
 80079da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079de:	fb02 f303 	mul.w	r3, r2, r3
 80079e2:	617b      	str	r3, [r7, #20]
      break;
 80079e4:	e00c      	b.n	8007a00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079e6:	4a13      	ldr	r2, [pc, #76]	; (8007a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ee:	4a10      	ldr	r2, [pc, #64]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079f0:	68d2      	ldr	r2, [r2, #12]
 80079f2:	0a12      	lsrs	r2, r2, #8
 80079f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079f8:	fb02 f303 	mul.w	r3, r2, r3
 80079fc:	617b      	str	r3, [r7, #20]
      break;
 80079fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	0e5b      	lsrs	r3, r3, #25
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a18:	613b      	str	r3, [r7, #16]
 8007a1a:	e001      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007a20:	693b      	ldr	r3, [r7, #16]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	40021000 	.word	0x40021000
 8007a34:	00f42400 	.word	0x00f42400
 8007a38:	007a1200 	.word	0x007a1200

08007a3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a40:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a42:	681b      	ldr	r3, [r3, #0]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000010 	.word	0x20000010

08007a54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a5a:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a64:	4b1b      	ldr	r3, [pc, #108]	; (8007ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	091b      	lsrs	r3, r3, #4
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d10c      	bne.n	8007a92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a78:	4a17      	ldr	r2, [pc, #92]	; (8007ad8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a80:	4a14      	ldr	r2, [pc, #80]	; (8007ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a82:	68d2      	ldr	r2, [r2, #12]
 8007a84:	0a12      	lsrs	r2, r2, #8
 8007a86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
 8007a8e:	617b      	str	r3, [r7, #20]
    break;
 8007a90:	e00c      	b.n	8007aac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a92:	4a12      	ldr	r2, [pc, #72]	; (8007adc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9a:	4a0e      	ldr	r2, [pc, #56]	; (8007ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a9c:	68d2      	ldr	r2, [r2, #12]
 8007a9e:	0a12      	lsrs	r2, r2, #8
 8007aa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007aa4:	fb02 f303 	mul.w	r3, r2, r3
 8007aa8:	617b      	str	r3, [r7, #20]
    break;
 8007aaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	0e5b      	lsrs	r3, r3, #25
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007ac6:	687b      	ldr	r3, [r7, #4]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	40021000 	.word	0x40021000
 8007ad8:	007a1200 	.word	0x007a1200
 8007adc:	00f42400 	.word	0x00f42400

08007ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ae8:	2300      	movs	r3, #0
 8007aea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007aec:	2300      	movs	r3, #0
 8007aee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 8098 	beq.w	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007afe:	2300      	movs	r3, #0
 8007b00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b02:	4b43      	ldr	r3, [pc, #268]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10d      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b0e:	4b40      	ldr	r3, [pc, #256]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b12:	4a3f      	ldr	r2, [pc, #252]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b18:	6593      	str	r3, [r2, #88]	; 0x58
 8007b1a:	4b3d      	ldr	r3, [pc, #244]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b22:	60bb      	str	r3, [r7, #8]
 8007b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b26:	2301      	movs	r3, #1
 8007b28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b2a:	4b3a      	ldr	r3, [pc, #232]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a39      	ldr	r2, [pc, #228]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b36:	f7fc fd17 	bl	8004568 <HAL_GetTick>
 8007b3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b3c:	e009      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b3e:	f7fc fd13 	bl	8004568 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d902      	bls.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	74fb      	strb	r3, [r7, #19]
        break;
 8007b50:	e005      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b52:	4b30      	ldr	r3, [pc, #192]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0ef      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007b5e:	7cfb      	ldrb	r3, [r7, #19]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d159      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b64:	4b2a      	ldr	r3, [pc, #168]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d01e      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d019      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b80:	4b23      	ldr	r3, [pc, #140]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b8c:	4b20      	ldr	r3, [pc, #128]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b9c:	4b1c      	ldr	r3, [pc, #112]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba2:	4a1b      	ldr	r2, [pc, #108]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bac:	4a18      	ldr	r2, [pc, #96]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d016      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bbe:	f7fc fcd3 	bl	8004568 <HAL_GetTick>
 8007bc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bc4:	e00b      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc6:	f7fc fccf 	bl	8004568 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d902      	bls.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	74fb      	strb	r3, [r7, #19]
            break;
 8007bdc:	e006      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bde:	4b0c      	ldr	r3, [pc, #48]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0ec      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007bec:	7cfb      	ldrb	r3, [r7, #19]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bf2:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c00:	4903      	ldr	r1, [pc, #12]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c08:	e008      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c0a:	7cfb      	ldrb	r3, [r7, #19]
 8007c0c:	74bb      	strb	r3, [r7, #18]
 8007c0e:	e005      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c10:	40021000 	.word	0x40021000
 8007c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c18:	7cfb      	ldrb	r3, [r7, #19]
 8007c1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c1c:	7c7b      	ldrb	r3, [r7, #17]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d105      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c22:	4baf      	ldr	r3, [pc, #700]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c26:	4aae      	ldr	r2, [pc, #696]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c3a:	4ba9      	ldr	r3, [pc, #676]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c40:	f023 0203 	bic.w	r2, r3, #3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	49a5      	ldr	r1, [pc, #660]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c5c:	4ba0      	ldr	r3, [pc, #640]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c62:	f023 020c 	bic.w	r2, r3, #12
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	499d      	ldr	r1, [pc, #628]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c7e:	4b98      	ldr	r3, [pc, #608]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4994      	ldr	r1, [pc, #592]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ca0:	4b8f      	ldr	r3, [pc, #572]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	498c      	ldr	r1, [pc, #560]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cc2:	4b87      	ldr	r3, [pc, #540]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	4983      	ldr	r1, [pc, #524]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ce4:	4b7e      	ldr	r3, [pc, #504]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	497b      	ldr	r1, [pc, #492]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d06:	4b76      	ldr	r3, [pc, #472]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	4972      	ldr	r1, [pc, #456]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d28:	4b6d      	ldr	r3, [pc, #436]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	496a      	ldr	r1, [pc, #424]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d4a:	4b65      	ldr	r3, [pc, #404]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	4961      	ldr	r1, [pc, #388]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d6c:	4b5c      	ldr	r3, [pc, #368]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d72:	f023 0203 	bic.w	r2, r3, #3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7a:	4959      	ldr	r1, [pc, #356]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d8e:	4b54      	ldr	r3, [pc, #336]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	4950      	ldr	r1, [pc, #320]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d015      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007db0:	4b4b      	ldr	r3, [pc, #300]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbe:	4948      	ldr	r1, [pc, #288]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dce:	d105      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dd0:	4b43      	ldr	r3, [pc, #268]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	4a42      	ldr	r2, [pc, #264]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d015      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007de8:	4b3d      	ldr	r3, [pc, #244]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df6:	493a      	ldr	r1, [pc, #232]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e06:	d105      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e08:	4b35      	ldr	r3, [pc, #212]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	4a34      	ldr	r2, [pc, #208]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d015      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e20:	4b2f      	ldr	r3, [pc, #188]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	492c      	ldr	r1, [pc, #176]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e3e:	d105      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e40:	4b27      	ldr	r3, [pc, #156]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	4a26      	ldr	r2, [pc, #152]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d015      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e58:	4b21      	ldr	r3, [pc, #132]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e66:	491e      	ldr	r1, [pc, #120]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e76:	d105      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e78:	4b19      	ldr	r3, [pc, #100]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	4a18      	ldr	r2, [pc, #96]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d015      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e90:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	4910      	ldr	r1, [pc, #64]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eae:	d105      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007eb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	4a0a      	ldr	r2, [pc, #40]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d018      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ece:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	4902      	ldr	r1, [pc, #8]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007ede:	e001      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007ee0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eec:	d105      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007eee:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	4a20      	ldr	r2, [pc, #128]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ef8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d015      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007f06:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f14:	4917      	ldr	r1, [pc, #92]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f24:	d105      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f26:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	4a12      	ldr	r2, [pc, #72]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f30:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d015      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4c:	4909      	ldr	r1, [pc, #36]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f5c:	d105      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f5e:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f68:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007f6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40021000 	.word	0x40021000

08007f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e084      	b.n	8008094 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d106      	bne.n	8007faa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7fb fcc9 	bl	800393c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fca:	d902      	bls.n	8007fd2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e002      	b.n	8007fd8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fd6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007fe0:	d007      	beq.n	8007ff2 <HAL_SPI_Init+0x7a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fea:	d002      	beq.n	8007ff2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008002:	d903      	bls.n	800800c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	631a      	str	r2, [r3, #48]	; 0x30
 800800a:	e002      	b.n	8008012 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	431a      	orrs	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	ea42 0103 	orr.w	r1, r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	0c1b      	lsrs	r3, r3, #16
 8008052:	f003 0204 	and.w	r2, r3, #4
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	ea42 0103 	orr.w	r1, r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	430a      	orrs	r2, r1
 8008072:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69da      	ldr	r2, [r3, #28]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008082:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	4613      	mov	r3, r2
 80080aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d101      	bne.n	80080be <HAL_SPI_Transmit+0x22>
 80080ba:	2302      	movs	r3, #2
 80080bc:	e150      	b.n	8008360 <HAL_SPI_Transmit+0x2c4>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080c6:	f7fc fa4f 	bl	8004568 <HAL_GetTick>
 80080ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080cc:	88fb      	ldrh	r3, [r7, #6]
 80080ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d002      	beq.n	80080e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
 80080de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080e0:	e135      	b.n	800834e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <HAL_SPI_Transmit+0x52>
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080f2:	e12c      	b.n	800834e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2203      	movs	r2, #3
 80080f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	88fa      	ldrh	r2, [r7, #6]
 800810c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	88fa      	ldrh	r2, [r7, #6]
 8008112:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800813e:	d107      	bne.n	8008150 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800814e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d007      	beq.n	800816e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800816c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008176:	d94b      	bls.n	8008210 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_SPI_Transmit+0xea>
 8008180:	8afb      	ldrh	r3, [r7, #22]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d13e      	bne.n	8008204 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	881a      	ldrh	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081aa:	e02b      	b.n	8008204 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d112      	bne.n	80081e0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	881a      	ldrh	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ca:	1c9a      	adds	r2, r3, #2
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081de:	e011      	b.n	8008204 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081e0:	f7fc f9c2 	bl	8004568 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d803      	bhi.n	80081f8 <HAL_SPI_Transmit+0x15c>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f6:	d102      	bne.n	80081fe <HAL_SPI_Transmit+0x162>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d102      	bne.n	8008204 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008202:	e0a4      	b.n	800834e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1ce      	bne.n	80081ac <HAL_SPI_Transmit+0x110>
 800820e:	e07c      	b.n	800830a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <HAL_SPI_Transmit+0x182>
 8008218:	8afb      	ldrh	r3, [r7, #22]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d170      	bne.n	8008300 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008222:	b29b      	uxth	r3, r3
 8008224:	2b01      	cmp	r3, #1
 8008226:	d912      	bls.n	800824e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	881a      	ldrh	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008238:	1c9a      	adds	r2, r3, #2
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008242:	b29b      	uxth	r3, r3
 8008244:	3b02      	subs	r3, #2
 8008246:	b29a      	uxth	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800824c:	e058      	b.n	8008300 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	330c      	adds	r3, #12
 8008258:	7812      	ldrb	r2, [r2, #0]
 800825a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800826a:	b29b      	uxth	r3, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008274:	e044      	b.n	8008300 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b02      	cmp	r3, #2
 8008282:	d12b      	bne.n	80082dc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b01      	cmp	r3, #1
 800828c:	d912      	bls.n	80082b4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	881a      	ldrh	r2, [r3, #0]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	1c9a      	adds	r2, r3, #2
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b02      	subs	r3, #2
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082b2:	e025      	b.n	8008300 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	330c      	adds	r3, #12
 80082be:	7812      	ldrb	r2, [r2, #0]
 80082c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082da:	e011      	b.n	8008300 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082dc:	f7fc f944 	bl	8004568 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d803      	bhi.n	80082f4 <HAL_SPI_Transmit+0x258>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f2:	d102      	bne.n	80082fa <HAL_SPI_Transmit+0x25e>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d102      	bne.n	8008300 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082fe:	e026      	b.n	800834e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1b5      	bne.n	8008276 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f901 	bl	8008516 <SPI_EndRxTxTransaction>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2220      	movs	r2, #32
 800831e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008328:	2300      	movs	r3, #0
 800832a:	613b      	str	r3, [r7, #16]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	77fb      	strb	r3, [r7, #31]
 800834a:	e000      	b.n	800834e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800834c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800835e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008378:	e04c      	b.n	8008414 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008380:	d048      	beq.n	8008414 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008382:	f7fc f8f1 	bl	8004568 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d902      	bls.n	8008398 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d13d      	bne.n	8008414 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083b0:	d111      	bne.n	80083d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ba:	d004      	beq.n	80083c6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c4:	d107      	bne.n	80083d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083de:	d10f      	bne.n	8008400 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e00f      	b.n	8008434 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	4013      	ands	r3, r2
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	429a      	cmp	r2, r3
 8008422:	bf0c      	ite	eq
 8008424:	2301      	moveq	r3, #1
 8008426:	2300      	movne	r3, #0
 8008428:	b2db      	uxtb	r3, r3
 800842a:	461a      	mov	r2, r3
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	429a      	cmp	r2, r3
 8008430:	d1a3      	bne.n	800837a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800844a:	e057      	b.n	80084fc <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008452:	d106      	bne.n	8008462 <SPI_WaitFifoStateUntilTimeout+0x26>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d103      	bne.n	8008462 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008468:	d048      	beq.n	80084fc <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800846a:	f7fc f87d 	bl	8004568 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d902      	bls.n	8008480 <SPI_WaitFifoStateUntilTimeout+0x44>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d13d      	bne.n	80084fc <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800848e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008498:	d111      	bne.n	80084be <SPI_WaitFifoStateUntilTimeout+0x82>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a2:	d004      	beq.n	80084ae <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ac:	d107      	bne.n	80084be <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c6:	d10f      	bne.n	80084e8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e008      	b.n	800850e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	4013      	ands	r3, r2
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	429a      	cmp	r2, r3
 800850a:	d19f      	bne.n	800844c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b086      	sub	sp, #24
 800851a:	af02      	add	r7, sp, #8
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2200      	movs	r2, #0
 800852a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff ff84 	bl	800843c <SPI_WaitFifoStateUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d007      	beq.n	800854a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853e:	f043 0220 	orr.w	r2, r3, #32
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e027      	b.n	800859a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2200      	movs	r2, #0
 8008552:	2180      	movs	r1, #128	; 0x80
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7ff ff07 	bl	8008368 <SPI_WaitFlagStateUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d007      	beq.n	8008570 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008564:	f043 0220 	orr.w	r2, r3, #32
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e014      	b.n	800859a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2200      	movs	r2, #0
 8008578:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff ff5d 	bl	800843c <SPI_WaitFifoStateUntilTimeout>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800858c:	f043 0220 	orr.w	r2, r3, #32
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e000      	b.n	800859a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e049      	b.n	8008648 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d106      	bne.n	80085ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7fb fe7b 	bl	80042c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2202      	movs	r2, #2
 80085d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3304      	adds	r3, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f000 fc51 	bl	8008e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b01      	cmp	r3, #1
 8008662:	d001      	beq.n	8008668 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e019      	b.n	800869c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <HAL_TIM_Base_Start+0x58>)
 8008678:	4013      	ands	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b06      	cmp	r3, #6
 8008680:	d00b      	beq.n	800869a <HAL_TIM_Base_Start+0x4a>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008688:	d007      	beq.n	800869a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0201 	orr.w	r2, r2, #1
 8008698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	00010007 	.word	0x00010007

080086ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d001      	beq.n	80086c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e021      	b.n	8008708 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <HAL_TIM_Base_Start_IT+0x68>)
 80086e4:	4013      	ands	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b06      	cmp	r3, #6
 80086ec:	d00b      	beq.n	8008706 <HAL_TIM_Base_Start_IT+0x5a>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f4:	d007      	beq.n	8008706 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0201 	orr.w	r2, r2, #1
 8008704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	00010007 	.word	0x00010007

08008718 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 0201 	bic.w	r2, r2, #1
 800872e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6a1a      	ldr	r2, [r3, #32]
 8008736:	f241 1311 	movw	r3, #4369	; 0x1111
 800873a:	4013      	ands	r3, r2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10f      	bne.n	8008760 <HAL_TIM_Base_Stop_IT+0x48>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6a1a      	ldr	r2, [r3, #32]
 8008746:	f244 4344 	movw	r3, #17476	; 0x4444
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d107      	bne.n	8008760 <HAL_TIM_Base_Stop_IT+0x48>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b086      	sub	sp, #24
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e097      	b.n	80088ba <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d106      	bne.n	80087a4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7fb fd34 	bl	800420c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6812      	ldr	r2, [r2, #0]
 80087b6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80087ba:	f023 0307 	bic.w	r3, r3, #7
 80087be:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3304      	adds	r3, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f000 fb5c 	bl	8008e88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f8:	f023 0303 	bic.w	r3, r3, #3
 80087fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	4313      	orrs	r3, r2
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4313      	orrs	r3, r2
 800880e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008816:	f023 030c 	bic.w	r3, r3, #12
 800881a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	4313      	orrs	r3, r2
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	011a      	lsls	r2, r3, #4
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	031b      	lsls	r3, r3, #12
 8008846:	4313      	orrs	r3, r2
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008854:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800885c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685a      	ldr	r2, [r3, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	4313      	orrs	r3, r2
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d122      	bne.n	800891e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d11b      	bne.n	800891e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f06f 0202 	mvn.w	r2, #2
 80088ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 faa1 	bl	8008e4c <HAL_TIM_IC_CaptureCallback>
 800890a:	e005      	b.n	8008918 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fa93 	bl	8008e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 faa4 	bl	8008e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d122      	bne.n	8008972 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b04      	cmp	r3, #4
 8008938:	d11b      	bne.n	8008972 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f06f 0204 	mvn.w	r2, #4
 8008942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fa77 	bl	8008e4c <HAL_TIM_IC_CaptureCallback>
 800895e:	e005      	b.n	800896c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fa69 	bl	8008e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa7a 	bl	8008e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b08      	cmp	r3, #8
 800897e:	d122      	bne.n	80089c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b08      	cmp	r3, #8
 800898c:	d11b      	bne.n	80089c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f06f 0208 	mvn.w	r2, #8
 8008996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2204      	movs	r2, #4
 800899c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	f003 0303 	and.w	r3, r3, #3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fa4d 	bl	8008e4c <HAL_TIM_IC_CaptureCallback>
 80089b2:	e005      	b.n	80089c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fa3f 	bl	8008e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fa50 	bl	8008e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	f003 0310 	and.w	r3, r3, #16
 80089d0:	2b10      	cmp	r3, #16
 80089d2:	d122      	bne.n	8008a1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f003 0310 	and.w	r3, r3, #16
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d11b      	bne.n	8008a1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f06f 0210 	mvn.w	r2, #16
 80089ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2208      	movs	r2, #8
 80089f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fa23 	bl	8008e4c <HAL_TIM_IC_CaptureCallback>
 8008a06:	e005      	b.n	8008a14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa15 	bl	8008e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa26 	bl	8008e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d10e      	bne.n	8008a46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d107      	bne.n	8008a46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f06f 0201 	mvn.w	r2, #1
 8008a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f9ef 	bl	8008e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a50:	2b80      	cmp	r3, #128	; 0x80
 8008a52:	d10e      	bne.n	8008a72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5e:	2b80      	cmp	r3, #128	; 0x80
 8008a60:	d107      	bne.n	8008a72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fd5d 	bl	800952c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a80:	d10e      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8c:	2b80      	cmp	r3, #128	; 0x80
 8008a8e:	d107      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fd50 	bl	8009540 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b40      	cmp	r3, #64	; 0x40
 8008aac:	d10e      	bne.n	8008acc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab8:	2b40      	cmp	r3, #64	; 0x40
 8008aba:	d107      	bne.n	8008acc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9d4 	bl	8008e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	f003 0320 	and.w	r3, r3, #32
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	d10e      	bne.n	8008af8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d107      	bne.n	8008af8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f06f 0220 	mvn.w	r2, #32
 8008af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fd10 	bl	8009518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b06:	d10f      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b16:	d107      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fd16 	bl	8009554 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b36:	d10f      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b46:	d107      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fd08 	bl	8009568 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b66:	d10f      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b76:	d107      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fcfa 	bl	800957c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b96:	d10f      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ba6:	d107      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fcec 	bl	8009590 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d101      	bne.n	8008bd8 <HAL_TIM_ConfigClockSource+0x18>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e0d2      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x1be>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c14:	f000 80a9 	beq.w	8008d6a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c1c:	d81a      	bhi.n	8008c54 <HAL_TIM_ConfigClockSource+0x94>
 8008c1e:	2b30      	cmp	r3, #48	; 0x30
 8008c20:	f000 809a 	beq.w	8008d58 <HAL_TIM_ConfigClockSource+0x198>
 8008c24:	2b30      	cmp	r3, #48	; 0x30
 8008c26:	d809      	bhi.n	8008c3c <HAL_TIM_ConfigClockSource+0x7c>
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	f000 8095 	beq.w	8008d58 <HAL_TIM_ConfigClockSource+0x198>
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	f000 8092 	beq.w	8008d58 <HAL_TIM_ConfigClockSource+0x198>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 808f 	beq.w	8008d58 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c3a:	e097      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8008c3c:	2b50      	cmp	r3, #80	; 0x50
 8008c3e:	d05b      	beq.n	8008cf8 <HAL_TIM_ConfigClockSource+0x138>
 8008c40:	2b50      	cmp	r3, #80	; 0x50
 8008c42:	d802      	bhi.n	8008c4a <HAL_TIM_ConfigClockSource+0x8a>
 8008c44:	2b40      	cmp	r3, #64	; 0x40
 8008c46:	d077      	beq.n	8008d38 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008c48:	e090      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8008c4a:	2b60      	cmp	r3, #96	; 0x60
 8008c4c:	d064      	beq.n	8008d18 <HAL_TIM_ConfigClockSource+0x158>
 8008c4e:	2b70      	cmp	r3, #112	; 0x70
 8008c50:	d028      	beq.n	8008ca4 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8008c52:	e08b      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8008c54:	4a4c      	ldr	r2, [pc, #304]	; (8008d88 <HAL_TIM_ConfigClockSource+0x1c8>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d07e      	beq.n	8008d58 <HAL_TIM_ConfigClockSource+0x198>
 8008c5a:	4a4b      	ldr	r2, [pc, #300]	; (8008d88 <HAL_TIM_ConfigClockSource+0x1c8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d810      	bhi.n	8008c82 <HAL_TIM_ConfigClockSource+0xc2>
 8008c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c64:	d078      	beq.n	8008d58 <HAL_TIM_ConfigClockSource+0x198>
 8008c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c6a:	d803      	bhi.n	8008c74 <HAL_TIM_ConfigClockSource+0xb4>
 8008c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c70:	d02f      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8008c72:	e07b      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8008c74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c78:	d06e      	beq.n	8008d58 <HAL_TIM_ConfigClockSource+0x198>
 8008c7a:	4a44      	ldr	r2, [pc, #272]	; (8008d8c <HAL_TIM_ConfigClockSource+0x1cc>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d06b      	beq.n	8008d58 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8008c80:	e074      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8008c82:	4a43      	ldr	r2, [pc, #268]	; (8008d90 <HAL_TIM_ConfigClockSource+0x1d0>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d067      	beq.n	8008d58 <HAL_TIM_ConfigClockSource+0x198>
 8008c88:	4a41      	ldr	r2, [pc, #260]	; (8008d90 <HAL_TIM_ConfigClockSource+0x1d0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d803      	bhi.n	8008c96 <HAL_TIM_ConfigClockSource+0xd6>
 8008c8e:	4a41      	ldr	r2, [pc, #260]	; (8008d94 <HAL_TIM_ConfigClockSource+0x1d4>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d061      	beq.n	8008d58 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8008c94:	e06a      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8008c96:	4a40      	ldr	r2, [pc, #256]	; (8008d98 <HAL_TIM_ConfigClockSource+0x1d8>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d05d      	beq.n	8008d58 <HAL_TIM_ConfigClockSource+0x198>
 8008c9c:	4a3f      	ldr	r2, [pc, #252]	; (8008d9c <HAL_TIM_ConfigClockSource+0x1dc>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d05a      	beq.n	8008d58 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8008ca2:	e063      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	6899      	ldr	r1, [r3, #8]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f000 fac8 	bl	8009248 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	609a      	str	r2, [r3, #8]
      break;
 8008cd0:	e04c      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	6899      	ldr	r1, [r3, #8]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f000 fab1 	bl	8009248 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cf4:	609a      	str	r2, [r3, #8]
      break;
 8008cf6:	e039      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	6859      	ldr	r1, [r3, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	461a      	mov	r2, r3
 8008d06:	f000 fa23 	bl	8009150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2150      	movs	r1, #80	; 0x50
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fa7c 	bl	800920e <TIM_ITRx_SetConfig>
      break;
 8008d16:	e029      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	6859      	ldr	r1, [r3, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	461a      	mov	r2, r3
 8008d26:	f000 fa42 	bl	80091ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2160      	movs	r1, #96	; 0x60
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fa6c 	bl	800920e <TIM_ITRx_SetConfig>
      break;
 8008d36:	e019      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6818      	ldr	r0, [r3, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	6859      	ldr	r1, [r3, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	461a      	mov	r2, r3
 8008d46:	f000 fa03 	bl	8009150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2140      	movs	r1, #64	; 0x40
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 fa5c 	bl	800920e <TIM_ITRx_SetConfig>
      break;
 8008d56:	e009      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4619      	mov	r1, r3
 8008d62:	4610      	mov	r0, r2
 8008d64:	f000 fa53 	bl	800920e <TIM_ITRx_SetConfig>
      break;
 8008d68:	e000      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8008d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	00100030 	.word	0x00100030
 8008d8c:	00100020 	.word	0x00100020
 8008d90:	00100050 	.word	0x00100050
 8008d94:	00100040 	.word	0x00100040
 8008d98:	00100060 	.word	0x00100060
 8008d9c:	00100070 	.word	0x00100070

08008da0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d101      	bne.n	8008db8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008db4:	2302      	movs	r3, #2
 8008db6:	e031      	b.n	8008e1c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f904 	bl	8008fd8 <TIM_SlaveTimer_SetConfig>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d009      	beq.n	8008dea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e018      	b.n	8008e1c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008df8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e08:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a46      	ldr	r2, [pc, #280]	; (8008fb4 <TIM_Base_SetConfig+0x12c>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d017      	beq.n	8008ed0 <TIM_Base_SetConfig+0x48>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea6:	d013      	beq.n	8008ed0 <TIM_Base_SetConfig+0x48>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a43      	ldr	r2, [pc, #268]	; (8008fb8 <TIM_Base_SetConfig+0x130>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00f      	beq.n	8008ed0 <TIM_Base_SetConfig+0x48>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a42      	ldr	r2, [pc, #264]	; (8008fbc <TIM_Base_SetConfig+0x134>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d00b      	beq.n	8008ed0 <TIM_Base_SetConfig+0x48>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a41      	ldr	r2, [pc, #260]	; (8008fc0 <TIM_Base_SetConfig+0x138>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d007      	beq.n	8008ed0 <TIM_Base_SetConfig+0x48>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a40      	ldr	r2, [pc, #256]	; (8008fc4 <TIM_Base_SetConfig+0x13c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d003      	beq.n	8008ed0 <TIM_Base_SetConfig+0x48>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a3f      	ldr	r2, [pc, #252]	; (8008fc8 <TIM_Base_SetConfig+0x140>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d108      	bne.n	8008ee2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a33      	ldr	r2, [pc, #204]	; (8008fb4 <TIM_Base_SetConfig+0x12c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d023      	beq.n	8008f32 <TIM_Base_SetConfig+0xaa>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef0:	d01f      	beq.n	8008f32 <TIM_Base_SetConfig+0xaa>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a30      	ldr	r2, [pc, #192]	; (8008fb8 <TIM_Base_SetConfig+0x130>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d01b      	beq.n	8008f32 <TIM_Base_SetConfig+0xaa>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a2f      	ldr	r2, [pc, #188]	; (8008fbc <TIM_Base_SetConfig+0x134>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d017      	beq.n	8008f32 <TIM_Base_SetConfig+0xaa>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a2e      	ldr	r2, [pc, #184]	; (8008fc0 <TIM_Base_SetConfig+0x138>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d013      	beq.n	8008f32 <TIM_Base_SetConfig+0xaa>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a2d      	ldr	r2, [pc, #180]	; (8008fc4 <TIM_Base_SetConfig+0x13c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d00f      	beq.n	8008f32 <TIM_Base_SetConfig+0xaa>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a2d      	ldr	r2, [pc, #180]	; (8008fcc <TIM_Base_SetConfig+0x144>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d00b      	beq.n	8008f32 <TIM_Base_SetConfig+0xaa>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a2c      	ldr	r2, [pc, #176]	; (8008fd0 <TIM_Base_SetConfig+0x148>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d007      	beq.n	8008f32 <TIM_Base_SetConfig+0xaa>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a2b      	ldr	r2, [pc, #172]	; (8008fd4 <TIM_Base_SetConfig+0x14c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d003      	beq.n	8008f32 <TIM_Base_SetConfig+0xaa>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a26      	ldr	r2, [pc, #152]	; (8008fc8 <TIM_Base_SetConfig+0x140>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d108      	bne.n	8008f44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a12      	ldr	r2, [pc, #72]	; (8008fb4 <TIM_Base_SetConfig+0x12c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d013      	beq.n	8008f98 <TIM_Base_SetConfig+0x110>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a14      	ldr	r2, [pc, #80]	; (8008fc4 <TIM_Base_SetConfig+0x13c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00f      	beq.n	8008f98 <TIM_Base_SetConfig+0x110>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a14      	ldr	r2, [pc, #80]	; (8008fcc <TIM_Base_SetConfig+0x144>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00b      	beq.n	8008f98 <TIM_Base_SetConfig+0x110>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a13      	ldr	r2, [pc, #76]	; (8008fd0 <TIM_Base_SetConfig+0x148>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d007      	beq.n	8008f98 <TIM_Base_SetConfig+0x110>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a12      	ldr	r2, [pc, #72]	; (8008fd4 <TIM_Base_SetConfig+0x14c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d003      	beq.n	8008f98 <TIM_Base_SetConfig+0x110>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a0d      	ldr	r2, [pc, #52]	; (8008fc8 <TIM_Base_SetConfig+0x140>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d103      	bne.n	8008fa0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	691a      	ldr	r2, [r3, #16]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	615a      	str	r2, [r3, #20]
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	40012c00 	.word	0x40012c00
 8008fb8:	40000400 	.word	0x40000400
 8008fbc:	40000800 	.word	0x40000800
 8008fc0:	40000c00 	.word	0x40000c00
 8008fc4:	40013400 	.word	0x40013400
 8008fc8:	40015000 	.word	0x40015000
 8008fcc:	40014000 	.word	0x40014000
 8008fd0:	40014400 	.word	0x40014400
 8008fd4:	40014800 	.word	0x40014800

08008fd8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009006:	f023 0307 	bic.w	r3, r3, #7
 800900a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	4313      	orrs	r3, r2
 8009014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	2b70      	cmp	r3, #112	; 0x70
 8009024:	d034      	beq.n	8009090 <TIM_SlaveTimer_SetConfig+0xb8>
 8009026:	2b70      	cmp	r3, #112	; 0x70
 8009028:	d811      	bhi.n	800904e <TIM_SlaveTimer_SetConfig+0x76>
 800902a:	2b30      	cmp	r3, #48	; 0x30
 800902c:	d07d      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
 800902e:	2b30      	cmp	r3, #48	; 0x30
 8009030:	d806      	bhi.n	8009040 <TIM_SlaveTimer_SetConfig+0x68>
 8009032:	2b10      	cmp	r3, #16
 8009034:	d079      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
 8009036:	2b20      	cmp	r3, #32
 8009038:	d077      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
 800903a:	2b00      	cmp	r3, #0
 800903c:	d075      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800903e:	e075      	b.n	800912c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8009040:	2b50      	cmp	r3, #80	; 0x50
 8009042:	d05e      	beq.n	8009102 <TIM_SlaveTimer_SetConfig+0x12a>
 8009044:	2b60      	cmp	r3, #96	; 0x60
 8009046:	d066      	beq.n	8009116 <TIM_SlaveTimer_SetConfig+0x13e>
 8009048:	2b40      	cmp	r3, #64	; 0x40
 800904a:	d02c      	beq.n	80090a6 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800904c:	e06e      	b.n	800912c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800904e:	4a3a      	ldr	r2, [pc, #232]	; (8009138 <TIM_SlaveTimer_SetConfig+0x160>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d06a      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
 8009054:	4a38      	ldr	r2, [pc, #224]	; (8009138 <TIM_SlaveTimer_SetConfig+0x160>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d809      	bhi.n	800906e <TIM_SlaveTimer_SetConfig+0x96>
 800905a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800905e:	d064      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
 8009060:	4a36      	ldr	r2, [pc, #216]	; (800913c <TIM_SlaveTimer_SetConfig+0x164>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d061      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
 8009066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800906a:	d05e      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800906c:	e05e      	b.n	800912c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800906e:	4a34      	ldr	r2, [pc, #208]	; (8009140 <TIM_SlaveTimer_SetConfig+0x168>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d05a      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
 8009074:	4a32      	ldr	r2, [pc, #200]	; (8009140 <TIM_SlaveTimer_SetConfig+0x168>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d803      	bhi.n	8009082 <TIM_SlaveTimer_SetConfig+0xaa>
 800907a:	4a32      	ldr	r2, [pc, #200]	; (8009144 <TIM_SlaveTimer_SetConfig+0x16c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d054      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8009080:	e054      	b.n	800912c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8009082:	4a31      	ldr	r2, [pc, #196]	; (8009148 <TIM_SlaveTimer_SetConfig+0x170>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d050      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
 8009088:	4a30      	ldr	r2, [pc, #192]	; (800914c <TIM_SlaveTimer_SetConfig+0x174>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d04d      	beq.n	800912a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800908e:	e04d      	b.n	800912c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68d9      	ldr	r1, [r3, #12]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f000 f8d2 	bl	8009248 <TIM_ETR_SetConfig>
      break;
 80090a4:	e042      	b.n	800912c <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b05      	cmp	r3, #5
 80090ac:	d004      	beq.n	80090b8 <TIM_SlaveTimer_SetConfig+0xe0>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80090b6:	d101      	bne.n	80090bc <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e038      	b.n	800912e <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6a1a      	ldr	r2, [r3, #32]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0201 	bic.w	r2, r2, #1
 80090d2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090e2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	621a      	str	r2, [r3, #32]
      break;
 8009100:	e014      	b.n	800912c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	6899      	ldr	r1, [r3, #8]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	461a      	mov	r2, r3
 8009110:	f000 f81e 	bl	8009150 <TIM_TI1_ConfigInputStage>
      break;
 8009114:	e00a      	b.n	800912c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6899      	ldr	r1, [r3, #8]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	461a      	mov	r2, r3
 8009124:	f000 f843 	bl	80091ae <TIM_TI2_ConfigInputStage>
      break;
 8009128:	e000      	b.n	800912c <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800912a:	bf00      	nop
  }
  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	00100030 	.word	0x00100030
 800913c:	00100020 	.word	0x00100020
 8009140:	00100050 	.word	0x00100050
 8009144:	00100040 	.word	0x00100040
 8009148:	00100060 	.word	0x00100060
 800914c:	00100070 	.word	0x00100070

08009150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	f023 0201 	bic.w	r2, r3, #1
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800917a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	011b      	lsls	r3, r3, #4
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	4313      	orrs	r3, r2
 8009184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f023 030a 	bic.w	r3, r3, #10
 800918c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4313      	orrs	r3, r2
 8009194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	621a      	str	r2, [r3, #32]
}
 80091a2:	bf00      	nop
 80091a4:	371c      	adds	r7, #28
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b087      	sub	sp, #28
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	f023 0210 	bic.w	r2, r3, #16
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	031b      	lsls	r3, r3, #12
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	621a      	str	r2, [r3, #32]
}
 8009202:	bf00      	nop
 8009204:	371c      	adds	r7, #28
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800920e:	b480      	push	{r7}
 8009210:	b085      	sub	sp, #20
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4313      	orrs	r3, r2
 8009230:	f043 0307 	orr.w	r3, r3, #7
 8009234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	609a      	str	r2, [r3, #8]
}
 800923c:	bf00      	nop
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	021a      	lsls	r2, r3, #8
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	431a      	orrs	r2, r3
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4313      	orrs	r3, r2
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	4313      	orrs	r3, r2
 8009274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	609a      	str	r2, [r3, #8]
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009298:	2b01      	cmp	r3, #1
 800929a:	d101      	bne.n	80092a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800929c:	2302      	movs	r3, #2
 800929e:	e074      	b.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a34      	ldr	r2, [pc, #208]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d009      	beq.n	80092de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a33      	ldr	r2, [pc, #204]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d004      	beq.n	80092de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a31      	ldr	r2, [pc, #196]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d108      	bne.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80092f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a21      	ldr	r2, [pc, #132]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d022      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009320:	d01d      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a1f      	ldr	r2, [pc, #124]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d018      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a1d      	ldr	r2, [pc, #116]	; (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d013      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a1c      	ldr	r2, [pc, #112]	; (80093ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00e      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a15      	ldr	r2, [pc, #84]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d009      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a18      	ldr	r2, [pc, #96]	; (80093b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d004      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a11      	ldr	r2, [pc, #68]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d10c      	bne.n	8009378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	4313      	orrs	r3, r2
 800936e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	40012c00 	.word	0x40012c00
 800939c:	40013400 	.word	0x40013400
 80093a0:	40015000 	.word	0x40015000
 80093a4:	40000400 	.word	0x40000400
 80093a8:	40000800 	.word	0x40000800
 80093ac:	40000c00 	.word	0x40000c00
 80093b0:	40014000 	.word	0x40014000

080093b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d101      	bne.n	80093d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80093cc:	2302      	movs	r3, #2
 80093ce:	e096      	b.n	80094fe <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	4313      	orrs	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	041b      	lsls	r3, r3, #16
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a2f      	ldr	r2, [pc, #188]	; (800950c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d009      	beq.n	8009468 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a2d      	ldr	r2, [pc, #180]	; (8009510 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d004      	beq.n	8009468 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a2c      	ldr	r2, [pc, #176]	; (8009514 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d106      	bne.n	8009476 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	4313      	orrs	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a24      	ldr	r2, [pc, #144]	; (800950c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d009      	beq.n	8009494 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a22      	ldr	r2, [pc, #136]	; (8009510 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d004      	beq.n	8009494 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a21      	ldr	r2, [pc, #132]	; (8009514 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d12b      	bne.n	80094ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949e:	051b      	lsls	r3, r3, #20
 80094a0:	4313      	orrs	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a11      	ldr	r2, [pc, #68]	; (800950c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d009      	beq.n	80094de <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a10      	ldr	r2, [pc, #64]	; (8009510 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d004      	beq.n	80094de <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a0e      	ldr	r2, [pc, #56]	; (8009514 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d106      	bne.n	80094ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	40012c00 	.word	0x40012c00
 8009510:	40013400 	.word	0x40013400
 8009514:	40015000 	.word	0x40015000

08009518 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <LL_EXTI_EnableIT_0_31>:
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80095ac:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <LL_EXTI_EnableIT_0_31+0x20>)
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	4904      	ldr	r1, [pc, #16]	; (80095c4 <LL_EXTI_EnableIT_0_31+0x20>)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	600b      	str	r3, [r1, #0]
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	40010400 	.word	0x40010400

080095c8 <LL_EXTI_EnableIT_32_63>:
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80095d0:	4b05      	ldr	r3, [pc, #20]	; (80095e8 <LL_EXTI_EnableIT_32_63+0x20>)
 80095d2:	6a1a      	ldr	r2, [r3, #32]
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <LL_EXTI_EnableIT_32_63+0x20>)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4313      	orrs	r3, r2
 80095da:	620b      	str	r3, [r1, #32]
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	40010400 	.word	0x40010400

080095ec <LL_EXTI_DisableIT_0_31>:
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80095f4:	4b06      	ldr	r3, [pc, #24]	; (8009610 <LL_EXTI_DisableIT_0_31+0x24>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	43db      	mvns	r3, r3
 80095fc:	4904      	ldr	r1, [pc, #16]	; (8009610 <LL_EXTI_DisableIT_0_31+0x24>)
 80095fe:	4013      	ands	r3, r2
 8009600:	600b      	str	r3, [r1, #0]
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	40010400 	.word	0x40010400

08009614 <LL_EXTI_DisableIT_32_63>:
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800961c:	4b06      	ldr	r3, [pc, #24]	; (8009638 <LL_EXTI_DisableIT_32_63+0x24>)
 800961e:	6a1a      	ldr	r2, [r3, #32]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	43db      	mvns	r3, r3
 8009624:	4904      	ldr	r1, [pc, #16]	; (8009638 <LL_EXTI_DisableIT_32_63+0x24>)
 8009626:	4013      	ands	r3, r2
 8009628:	620b      	str	r3, [r1, #32]
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	40010400 	.word	0x40010400

0800963c <LL_EXTI_EnableEvent_0_31>:
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009644:	4b05      	ldr	r3, [pc, #20]	; (800965c <LL_EXTI_EnableEvent_0_31+0x20>)
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	4904      	ldr	r1, [pc, #16]	; (800965c <LL_EXTI_EnableEvent_0_31+0x20>)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4313      	orrs	r3, r2
 800964e:	604b      	str	r3, [r1, #4]
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	40010400 	.word	0x40010400

08009660 <LL_EXTI_EnableEvent_32_63>:
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009668:	4b05      	ldr	r3, [pc, #20]	; (8009680 <LL_EXTI_EnableEvent_32_63+0x20>)
 800966a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800966c:	4904      	ldr	r1, [pc, #16]	; (8009680 <LL_EXTI_EnableEvent_32_63+0x20>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4313      	orrs	r3, r2
 8009672:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	40010400 	.word	0x40010400

08009684 <LL_EXTI_DisableEvent_0_31>:
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800968c:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	43db      	mvns	r3, r3
 8009694:	4904      	ldr	r1, [pc, #16]	; (80096a8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009696:	4013      	ands	r3, r2
 8009698:	604b      	str	r3, [r1, #4]
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	40010400 	.word	0x40010400

080096ac <LL_EXTI_DisableEvent_32_63>:
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80096b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	43db      	mvns	r3, r3
 80096bc:	4904      	ldr	r1, [pc, #16]	; (80096d0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80096be:	4013      	ands	r3, r2
 80096c0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40010400 	.word	0x40010400

080096d4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80096dc:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80096de:	689a      	ldr	r2, [r3, #8]
 80096e0:	4904      	ldr	r1, [pc, #16]	; (80096f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	608b      	str	r3, [r1, #8]
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	40010400 	.word	0x40010400

080096f8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009700:	4b05      	ldr	r3, [pc, #20]	; (8009718 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009704:	4904      	ldr	r1, [pc, #16]	; (8009718 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4313      	orrs	r3, r2
 800970a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	40010400 	.word	0x40010400

0800971c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009724:	4b06      	ldr	r3, [pc, #24]	; (8009740 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	43db      	mvns	r3, r3
 800972c:	4904      	ldr	r1, [pc, #16]	; (8009740 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800972e:	4013      	ands	r3, r2
 8009730:	608b      	str	r3, [r1, #8]
}
 8009732:	bf00      	nop
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	40010400 	.word	0x40010400

08009744 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800974c:	4b06      	ldr	r3, [pc, #24]	; (8009768 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800974e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	43db      	mvns	r3, r3
 8009754:	4904      	ldr	r1, [pc, #16]	; (8009768 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009756:	4013      	ands	r3, r2
 8009758:	628b      	str	r3, [r1, #40]	; 0x28
}
 800975a:	bf00      	nop
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	40010400 	.word	0x40010400

0800976c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009776:	68da      	ldr	r2, [r3, #12]
 8009778:	4904      	ldr	r1, [pc, #16]	; (800978c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4313      	orrs	r3, r2
 800977e:	60cb      	str	r3, [r1, #12]
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	40010400 	.word	0x40010400

08009790 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800979a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979c:	4904      	ldr	r1, [pc, #16]	; (80097b0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	40010400 	.word	0x40010400

080097b4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80097bc:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	43db      	mvns	r3, r3
 80097c4:	4904      	ldr	r1, [pc, #16]	; (80097d8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80097c6:	4013      	ands	r3, r2
 80097c8:	60cb      	str	r3, [r1, #12]
}
 80097ca:	bf00      	nop
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40010400 	.word	0x40010400

080097dc <LL_EXTI_DisableFallingTrig_32_63>:
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80097e4:	4b06      	ldr	r3, [pc, #24]	; (8009800 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80097e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	43db      	mvns	r3, r3
 80097ec:	4904      	ldr	r1, [pc, #16]	; (8009800 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80097ee:	4013      	ands	r3, r2
 80097f0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	40010400 	.word	0x40010400

08009804 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800980c:	2300      	movs	r3, #0
 800980e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7a1b      	ldrb	r3, [r3, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 80c8 	beq.w	80099aa <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d05d      	beq.n	80098de <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	7a5b      	ldrb	r3, [r3, #9]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d00e      	beq.n	8009848 <LL_EXTI_Init+0x44>
 800982a:	2b02      	cmp	r3, #2
 800982c:	d017      	beq.n	800985e <LL_EXTI_Init+0x5a>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d120      	bne.n	8009874 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff ff24 	bl	8009684 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff feaf 	bl	80095a4 <LL_EXTI_EnableIT_0_31>
          break;
 8009846:	e018      	b.n	800987a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4618      	mov	r0, r3
 800984e:	f7ff fecd 	bl	80095ec <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff fef0 	bl	800963c <LL_EXTI_EnableEvent_0_31>
          break;
 800985c:	e00d      	b.n	800987a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff fe9e 	bl	80095a4 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4618      	mov	r0, r3
 800986e:	f7ff fee5 	bl	800963c <LL_EXTI_EnableEvent_0_31>
          break;
 8009872:	e002      	b.n	800987a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8009874:	2301      	movs	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]
          break;
 8009878:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7a9b      	ldrb	r3, [r3, #10]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d02d      	beq.n	80098de <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7a9b      	ldrb	r3, [r3, #10]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d00e      	beq.n	80098a8 <LL_EXTI_Init+0xa4>
 800988a:	2b03      	cmp	r3, #3
 800988c:	d017      	beq.n	80098be <LL_EXTI_Init+0xba>
 800988e:	2b01      	cmp	r3, #1
 8009890:	d120      	bne.n	80098d4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff ff8c 	bl	80097b4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7ff ff17 	bl	80096d4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80098a6:	e01b      	b.n	80098e0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff ff35 	bl	800971c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff ff58 	bl	800976c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80098bc:	e010      	b.n	80098e0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7ff ff06 	bl	80096d4 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff ff4d 	bl	800976c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80098d2:	e005      	b.n	80098e0 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f043 0302 	orr.w	r3, r3, #2
 80098da:	60fb      	str	r3, [r7, #12]
            break;
 80098dc:	e000      	b.n	80098e0 <LL_EXTI_Init+0xdc>
        }
      }
 80098de:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d075      	beq.n	80099d4 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	7a5b      	ldrb	r3, [r3, #9]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d00e      	beq.n	800990e <LL_EXTI_Init+0x10a>
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d017      	beq.n	8009924 <LL_EXTI_Init+0x120>
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d120      	bne.n	800993a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7ff fed5 	bl	80096ac <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fe5e 	bl	80095c8 <LL_EXTI_EnableIT_32_63>
          break;
 800990c:	e01a      	b.n	8009944 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff fe7e 	bl	8009614 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff fe9f 	bl	8009660 <LL_EXTI_EnableEvent_32_63>
          break;
 8009922:	e00f      	b.n	8009944 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff fe4d 	bl	80095c8 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff fe94 	bl	8009660 <LL_EXTI_EnableEvent_32_63>
          break;
 8009938:	e004      	b.n	8009944 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f043 0304 	orr.w	r3, r3, #4
 8009940:	60fb      	str	r3, [r7, #12]
          break;
 8009942:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	7a9b      	ldrb	r3, [r3, #10]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d043      	beq.n	80099d4 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7a9b      	ldrb	r3, [r3, #10]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d00e      	beq.n	8009972 <LL_EXTI_Init+0x16e>
 8009954:	2b03      	cmp	r3, #3
 8009956:	d017      	beq.n	8009988 <LL_EXTI_Init+0x184>
 8009958:	2b01      	cmp	r3, #1
 800995a:	d120      	bne.n	800999e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	4618      	mov	r0, r3
 8009962:	f7ff ff3b 	bl	80097dc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff fec4 	bl	80096f8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8009970:	e031      	b.n	80099d6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fee4 	bl	8009744 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff ff05 	bl	8009790 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8009986:	e026      	b.n	80099d6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff feb3 	bl	80096f8 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff fefa 	bl	8009790 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800999c:	e01b      	b.n	80099d6 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f043 0305 	orr.w	r3, r3, #5
 80099a4:	60fb      	str	r3, [r7, #12]
            break;
 80099a6:	bf00      	nop
 80099a8:	e015      	b.n	80099d6 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff fe1c 	bl	80095ec <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff fe63 	bl	8009684 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff fe26 	bl	8009614 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fe6d 	bl	80096ac <LL_EXTI_DisableEvent_32_63>
 80099d2:	e000      	b.n	80099d6 <LL_EXTI_Init+0x1d2>
      }
 80099d4:	bf00      	nop
  }

  return status;
 80099d6:	68fb      	ldr	r3, [r7, #12]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <LL_GPIO_SetPinMode>:
{
 80099e0:	b480      	push	{r7}
 80099e2:	b089      	sub	sp, #36	; 0x24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	fa93 f3a3 	rbit	r3, r3
 80099fa:	613b      	str	r3, [r7, #16]
  return result;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	fab3 f383 	clz	r3, r3
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	2103      	movs	r1, #3
 8009a08:	fa01 f303 	lsl.w	r3, r1, r3
 8009a0c:	43db      	mvns	r3, r3
 8009a0e:	401a      	ands	r2, r3
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	fa93 f3a3 	rbit	r3, r3
 8009a1a:	61bb      	str	r3, [r7, #24]
  return result;
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	fab3 f383 	clz	r3, r3
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	fa01 f303 	lsl.w	r3, r1, r3
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	601a      	str	r2, [r3, #0]
}
 8009a32:	bf00      	nop
 8009a34:	3724      	adds	r7, #36	; 0x24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <LL_GPIO_SetPinOutputType>:
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	43db      	mvns	r3, r3
 8009a52:	401a      	ands	r2, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	431a      	orrs	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	605a      	str	r2, [r3, #4]
}
 8009a62:	bf00      	nop
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <LL_GPIO_SetPinSpeed>:
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b089      	sub	sp, #36	; 0x24
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	689a      	ldr	r2, [r3, #8]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	fa93 f3a3 	rbit	r3, r3
 8009a88:	613b      	str	r3, [r7, #16]
  return result;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	fab3 f383 	clz	r3, r3
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	2103      	movs	r1, #3
 8009a96:	fa01 f303 	lsl.w	r3, r1, r3
 8009a9a:	43db      	mvns	r3, r3
 8009a9c:	401a      	ands	r2, r3
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	fa93 f3a3 	rbit	r3, r3
 8009aa8:	61bb      	str	r3, [r7, #24]
  return result;
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	fab3 f383 	clz	r3, r3
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aba:	431a      	orrs	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	609a      	str	r2, [r3, #8]
}
 8009ac0:	bf00      	nop
 8009ac2:	3724      	adds	r7, #36	; 0x24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <LL_GPIO_SetPinPull>:
{
 8009acc:	b480      	push	{r7}
 8009ace:	b089      	sub	sp, #36	; 0x24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	68da      	ldr	r2, [r3, #12]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	fa93 f3a3 	rbit	r3, r3
 8009ae6:	613b      	str	r3, [r7, #16]
  return result;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	fab3 f383 	clz	r3, r3
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	2103      	movs	r1, #3
 8009af4:	fa01 f303 	lsl.w	r3, r1, r3
 8009af8:	43db      	mvns	r3, r3
 8009afa:	401a      	ands	r2, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	fa93 f3a3 	rbit	r3, r3
 8009b06:	61bb      	str	r3, [r7, #24]
  return result;
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	fab3 f383 	clz	r3, r3
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	005b      	lsls	r3, r3, #1
 8009b12:	6879      	ldr	r1, [r7, #4]
 8009b14:	fa01 f303 	lsl.w	r3, r1, r3
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	60da      	str	r2, [r3, #12]
}
 8009b1e:	bf00      	nop
 8009b20:	3724      	adds	r7, #36	; 0x24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <LL_GPIO_SetAFPin_0_7>:
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b089      	sub	sp, #36	; 0x24
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a1a      	ldr	r2, [r3, #32]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	fa93 f3a3 	rbit	r3, r3
 8009b44:	613b      	str	r3, [r7, #16]
  return result;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	fab3 f383 	clz	r3, r3
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	210f      	movs	r1, #15
 8009b52:	fa01 f303 	lsl.w	r3, r1, r3
 8009b56:	43db      	mvns	r3, r3
 8009b58:	401a      	ands	r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	fa93 f3a3 	rbit	r3, r3
 8009b64:	61bb      	str	r3, [r7, #24]
  return result;
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	fab3 f383 	clz	r3, r3
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	6879      	ldr	r1, [r7, #4]
 8009b72:	fa01 f303 	lsl.w	r3, r1, r3
 8009b76:	431a      	orrs	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	621a      	str	r2, [r3, #32]
}
 8009b7c:	bf00      	nop
 8009b7e:	3724      	adds	r7, #36	; 0x24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <LL_GPIO_SetAFPin_8_15>:
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b089      	sub	sp, #36	; 0x24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	0a1b      	lsrs	r3, r3, #8
 8009b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	fa93 f3a3 	rbit	r3, r3
 8009ba4:	613b      	str	r3, [r7, #16]
  return result;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	fab3 f383 	clz	r3, r3
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	210f      	movs	r1, #15
 8009bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bb6:	43db      	mvns	r3, r3
 8009bb8:	401a      	ands	r2, r3
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	0a1b      	lsrs	r3, r3, #8
 8009bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	fa93 f3a3 	rbit	r3, r3
 8009bc6:	61bb      	str	r3, [r7, #24]
  return result;
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	fab3 f383 	clz	r3, r3
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009bde:	bf00      	nop
 8009be0:	3724      	adds	r7, #36	; 0x24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b086      	sub	sp, #24
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	fa93 f3a3 	rbit	r3, r3
 8009c00:	60bb      	str	r3, [r7, #8]
  return result;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	fab3 f383 	clz	r3, r3
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009c0c:	e040      	b.n	8009c90 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	2101      	movs	r1, #1
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d032      	beq.n	8009c8a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	6939      	ldr	r1, [r7, #16]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff fed7 	bl	80099e0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d003      	beq.n	8009c42 <LL_GPIO_Init+0x58>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d106      	bne.n	8009c50 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	461a      	mov	r2, r3
 8009c48:	6939      	ldr	r1, [r7, #16]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff ff0f 	bl	8009a6e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	461a      	mov	r2, r3
 8009c56:	6939      	ldr	r1, [r7, #16]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff ff37 	bl	8009acc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d111      	bne.n	8009c8a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2bff      	cmp	r3, #255	; 0xff
 8009c6a:	d807      	bhi.n	8009c7c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6939      	ldr	r1, [r7, #16]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff ff58 	bl	8009b2a <LL_GPIO_SetAFPin_0_7>
 8009c7a:	e006      	b.n	8009c8a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6939      	ldr	r1, [r7, #16]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ff7f 	bl	8009b88 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1b7      	bne.n	8009c0e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d003      	beq.n	8009cae <LL_GPIO_Init+0xc4>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d107      	bne.n	8009cbe <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	6819      	ldr	r1, [r3, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff fec0 	bl	8009a3e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 8009cc8:	b590      	push	{r4, r7, lr}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	4604      	mov	r4, r0
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4623      	mov	r3, r4
 8009cd8:	80fb      	strh	r3, [r7, #6]
 8009cda:	4603      	mov	r3, r0
 8009cdc:	80bb      	strh	r3, [r7, #4]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	807b      	strh	r3, [r7, #2]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8009cea:	7bfa      	ldrb	r2, [r7, #15]
 8009cec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d93a      	bls.n	8009d6a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8009cf4:	88ba      	ldrh	r2, [r7, #4]
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	441a      	add	r2, r3
 8009cfa:	88b9      	ldrh	r1, [r7, #4]
 8009cfc:	883b      	ldrh	r3, [r7, #0]
 8009cfe:	4419      	add	r1, r3
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	1acb      	subs	r3, r1, r3
 8009d04:	429a      	cmp	r2, r3
 8009d06:	f000 8090 	beq.w	8009e2a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 8009d0a:	88fa      	ldrh	r2, [r7, #6]
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	441a      	add	r2, r3
 8009d10:	88f9      	ldrh	r1, [r7, #6]
 8009d12:	887b      	ldrh	r3, [r7, #2]
 8009d14:	4419      	add	r1, r3
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	1acb      	subs	r3, r1, r3
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	f000 8085 	beq.w	8009e2a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	4413      	add	r3, r2
 8009d28:	b298      	uxth	r0, r3
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	88bb      	ldrh	r3, [r7, #4]
 8009d30:	4413      	add	r3, r2
 8009d32:	b299      	uxth	r1, r3
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	887a      	ldrh	r2, [r7, #2]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	3301      	adds	r3, #1
 8009d44:	b29c      	uxth	r4, r3
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	883a      	ldrh	r2, [r7, #0]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	3301      	adds	r3, #1
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	2304      	movs	r3, #4
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	8c3b      	ldrh	r3, [r7, #32]
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	4613      	mov	r3, r2
 8009d62:	4622      	mov	r2, r4
 8009d64:	f000 fcd6 	bl	800a714 <ILI9341_Draw_Rectangle>
				goto finish;
 8009d68:	e060      	b.n	8009e2c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	4413      	add	r3, r2
 8009d72:	b298      	uxth	r0, r3
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	88bb      	ldrh	r3, [r7, #4]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	b299      	uxth	r1, r3
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	005b      	lsls	r3, r3, #1
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	887a      	ldrh	r2, [r7, #2]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f000 fa81 	bl	800a298 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	88fb      	ldrh	r3, [r7, #6]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	b298      	uxth	r0, r3
										(y + h) - b,
 8009da0:	88ba      	ldrh	r2, [r7, #4]
 8009da2:	883b      	ldrh	r3, [r7, #0]
 8009da4:	4413      	add	r3, r2
 8009da6:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	b299      	uxth	r1, r3
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	887a      	ldrh	r2, [r7, #2]
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	f000 fa6a 	bl	800a298 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	88fb      	ldrh	r3, [r7, #6]
 8009dca:	4413      	add	r3, r2
 8009dcc:	b298      	uxth	r0, r3
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	88bb      	ldrh	r3, [r7, #4]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	b299      	uxth	r1, r3
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	005b      	lsls	r3, r3, #1
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	883a      	ldrh	r2, [r7, #0]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f000 fa9c 	bl	800a328 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 8009df0:	88fa      	ldrh	r2, [r7, #6]
 8009df2:	887b      	ldrh	r3, [r7, #2]
 8009df4:	4413      	add	r3, r2
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	b298      	uxth	r0, r3
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	88bb      	ldrh	r3, [r7, #4]
 8009e06:	4413      	add	r3, r2
 8009e08:	b299      	uxth	r1, r3
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	883a      	ldrh	r2, [r7, #0]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	f000 fa83 	bl	800a328 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	3301      	adds	r3, #1
 8009e26:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8009e28:	e75f      	b.n	8009cea <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8009e2a:	bf00      	nop
	// done
	return;
 8009e2c:	bf00      	nop
}
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd90      	pop	{r4, r7, pc}

08009e34 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8009e34:	b590      	push	{r4, r7, lr}
 8009e36:	b089      	sub	sp, #36	; 0x24
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	4608      	mov	r0, r1
 8009e3e:	4611      	mov	r1, r2
 8009e40:	461a      	mov	r2, r3
 8009e42:	4623      	mov	r3, r4
 8009e44:	71fb      	strb	r3, [r7, #7]
 8009e46:	4603      	mov	r3, r0
 8009e48:	80bb      	strh	r3, [r7, #4]
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	807b      	strh	r3, [r7, #2]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	2b1f      	cmp	r3, #31
 8009e5a:	d802      	bhi.n	8009e62 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	71fb      	strb	r3, [r7, #7]
 8009e60:	e002      	b.n	8009e68 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	3b20      	subs	r3, #32
 8009e66:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	753b      	strb	r3, [r7, #20]
 8009e6c:	e012      	b.n	8009e94 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8009e6e:	7dfa      	ldrb	r2, [r7, #23]
 8009e70:	7d38      	ldrb	r0, [r7, #20]
 8009e72:	7d39      	ldrb	r1, [r7, #20]
 8009e74:	4c48      	ldr	r4, [pc, #288]	; (8009f98 <ILI9341_Draw_Char+0x164>)
 8009e76:	4613      	mov	r3, r2
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	4413      	add	r3, r2
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	4423      	add	r3, r4
 8009e80:	4403      	add	r3, r0
 8009e82:	781a      	ldrb	r2, [r3, #0]
 8009e84:	f107 0318 	add.w	r3, r7, #24
 8009e88:	440b      	add	r3, r1
 8009e8a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8009e8e:	7d3b      	ldrb	r3, [r7, #20]
 8009e90:	3301      	adds	r3, #1
 8009e92:	753b      	strb	r3, [r7, #20]
 8009e94:	7d3b      	ldrb	r3, [r7, #20]
 8009e96:	2b05      	cmp	r3, #5
 8009e98:	d9e9      	bls.n	8009e6e <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	757b      	strb	r3, [r7, #21]
 8009e9e:	e074      	b.n	8009f8a <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75bb      	strb	r3, [r7, #22]
 8009ea4:	e06b      	b.n	8009f7e <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 8009ea6:	7d7b      	ldrb	r3, [r7, #21]
 8009ea8:	f107 0218 	add.w	r2, r7, #24
 8009eac:	4413      	add	r3, r2
 8009eae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	7dbb      	ldrb	r3, [r7, #22]
 8009eb6:	fa42 f303 	asr.w	r3, r2, r3
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d02d      	beq.n	8009f1e <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8009ec2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d10e      	bne.n	8009ee6 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8009ec8:	7d7b      	ldrb	r3, [r7, #21]
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	88bb      	ldrh	r3, [r7, #4]
 8009ece:	4413      	add	r3, r2
 8009ed0:	b298      	uxth	r0, r3
 8009ed2:	7dbb      	ldrb	r3, [r7, #22]
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	887b      	ldrh	r3, [r7, #2]
 8009ed8:	4413      	add	r3, r2
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	883a      	ldrh	r2, [r7, #0]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	f000 fae0 	bl	800a4a4 <ILI9341_Draw_Pixel>
 8009ee4:	e048      	b.n	8009f78 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8009ee6:	7d7b      	ldrb	r3, [r7, #21]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009eec:	fb12 f303 	smulbb	r3, r2, r3
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	88bb      	ldrh	r3, [r7, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	b298      	uxth	r0, r3
 8009ef8:	7dbb      	ldrb	r3, [r7, #22]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009efe:	fb12 f303 	smulbb	r3, r2, r3
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	887b      	ldrh	r3, [r7, #2]
 8009f06:	4413      	add	r3, r2
 8009f08:	b299      	uxth	r1, r3
 8009f0a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8009f0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009f0e:	2301      	movs	r3, #1
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	883b      	ldrh	r3, [r7, #0]
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	4623      	mov	r3, r4
 8009f18:	f000 fbfc 	bl	800a714 <ILI9341_Draw_Rectangle>
 8009f1c:	e02c      	b.n	8009f78 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8009f1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d10e      	bne.n	8009f42 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8009f24:	7d7b      	ldrb	r3, [r7, #21]
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	88bb      	ldrh	r3, [r7, #4]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	b298      	uxth	r0, r3
 8009f2e:	7dbb      	ldrb	r3, [r7, #22]
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	887b      	ldrh	r3, [r7, #2]
 8009f34:	4413      	add	r3, r2
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	f000 fab2 	bl	800a4a4 <ILI9341_Draw_Pixel>
 8009f40:	e01a      	b.n	8009f78 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8009f42:	7d7b      	ldrb	r3, [r7, #21]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009f48:	fb12 f303 	smulbb	r3, r2, r3
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	88bb      	ldrh	r3, [r7, #4]
 8009f50:	4413      	add	r3, r2
 8009f52:	b298      	uxth	r0, r3
 8009f54:	7dbb      	ldrb	r3, [r7, #22]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009f5a:	fb12 f303 	smulbb	r3, r2, r3
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	887b      	ldrh	r3, [r7, #2]
 8009f62:	4413      	add	r3, r2
 8009f64:	b299      	uxth	r1, r3
 8009f66:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8009f68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	4623      	mov	r3, r4
 8009f74:	f000 fbce 	bl	800a714 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8009f78:	7dbb      	ldrb	r3, [r7, #22]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	75bb      	strb	r3, [r7, #22]
 8009f7e:	7dbb      	ldrb	r3, [r7, #22]
 8009f80:	2b07      	cmp	r3, #7
 8009f82:	d990      	bls.n	8009ea6 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8009f84:	7d7b      	ldrb	r3, [r7, #21]
 8009f86:	3301      	adds	r3, #1
 8009f88:	757b      	strb	r3, [r7, #21]
 8009f8a:	7d7b      	ldrb	r3, [r7, #21]
 8009f8c:	2b05      	cmp	r3, #5
 8009f8e:	d987      	bls.n	8009ea0 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8009f90:	bf00      	nop
 8009f92:	371c      	adds	r7, #28
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd90      	pop	{r4, r7, pc}
 8009f98:	0800bea0 	.word	0x0800bea0

08009f9c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8009f9c:	b590      	push	{r4, r7, lr}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	461a      	mov	r2, r3
 8009faa:	4603      	mov	r3, r0
 8009fac:	817b      	strh	r3, [r7, #10]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	813b      	strh	r3, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8009fb6:	e016      	b.n	8009fe6 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	1c5a      	adds	r2, r3, #1
 8009fbc:	60fa      	str	r2, [r7, #12]
 8009fbe:	7818      	ldrb	r0, [r3, #0]
 8009fc0:	88fc      	ldrh	r4, [r7, #6]
 8009fc2:	893a      	ldrh	r2, [r7, #8]
 8009fc4:	8979      	ldrh	r1, [r7, #10]
 8009fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	8c3b      	ldrh	r3, [r7, #32]
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4623      	mov	r3, r4
 8009fd0:	f7ff ff30 	bl	8009e34 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8009fd4:	8c3b      	ldrh	r3, [r7, #32]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	0052      	lsls	r2, r2, #1
 8009fda:	4413      	add	r3, r2
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	897b      	ldrh	r3, [r7, #10]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e4      	bne.n	8009fb8 <ILI9341_Draw_Text+0x1c>
    }


}
 8009fee:	bf00      	nop
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd90      	pop	{r4, r7, pc}
	...

08009ff8 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800a002:	2300      	movs	r3, #0
 800a004:	80fb      	strh	r3, [r7, #6]
 800a006:	e010      	b.n	800a02a <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800a008:	88fb      	ldrh	r3, [r7, #6]
 800a00a:	4a0c      	ldr	r2, [pc, #48]	; (800a03c <ILI9341_FillScreenGradient+0x44>)
 800a00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a010:	b29b      	uxth	r3, r3
 800a012:	88b9      	ldrh	r1, [r7, #4]
 800a014:	88f8      	ldrh	r0, [r7, #6]
 800a016:	2204      	movs	r2, #4
 800a018:	9201      	str	r2, [sp, #4]
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	23f0      	movs	r3, #240	; 0xf0
 800a01e:	2201      	movs	r2, #1
 800a020:	f000 fb78 	bl	800a714 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800a024:	88fb      	ldrh	r3, [r7, #6]
 800a026:	3301      	adds	r3, #1
 800a028:	80fb      	strh	r3, [r7, #6]
 800a02a:	88fb      	ldrh	r3, [r7, #6]
 800a02c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a030:	d9ea      	bls.n	800a008 <ILI9341_FillScreenGradient+0x10>

	}
}
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20000024 	.word	0x20000024

0800a040 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800a044:	f000 fc3a 	bl	800a8bc <_LCD_Enable>
	ILI9341_SPI_Init();
 800a048:	f000 f908 	bl	800a25c <ILI9341_SPI_Init>
	_LCD_Reset();
 800a04c:	f000 fc46 	bl	800a8dc <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800a050:	2001      	movs	r0, #1
 800a052:	f000 fd11 	bl	800aa78 <_LCD_SendCommand>
	HAL_Delay(2000);
 800a056:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a05a:	f7fa fa91 	bl	8004580 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800a05e:	20cb      	movs	r0, #203	; 0xcb
 800a060:	f000 fd0a 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800a064:	2039      	movs	r0, #57	; 0x39
 800a066:	f000 fd39 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x2C);
 800a06a:	202c      	movs	r0, #44	; 0x2c
 800a06c:	f000 fd36 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x00);
 800a070:	2000      	movs	r0, #0
 800a072:	f000 fd33 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x34);
 800a076:	2034      	movs	r0, #52	; 0x34
 800a078:	f000 fd30 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x02);
 800a07c:	2002      	movs	r0, #2
 800a07e:	f000 fd2d 	bl	800aadc <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800a082:	20cf      	movs	r0, #207	; 0xcf
 800a084:	f000 fcf8 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a088:	2000      	movs	r0, #0
 800a08a:	f000 fd27 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0xC1);
 800a08e:	20c1      	movs	r0, #193	; 0xc1
 800a090:	f000 fd24 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x30);
 800a094:	2030      	movs	r0, #48	; 0x30
 800a096:	f000 fd21 	bl	800aadc <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800a09a:	20e8      	movs	r0, #232	; 0xe8
 800a09c:	f000 fcec 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800a0a0:	2085      	movs	r0, #133	; 0x85
 800a0a2:	f000 fd1b 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x00);
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	f000 fd18 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x78);
 800a0ac:	2078      	movs	r0, #120	; 0x78
 800a0ae:	f000 fd15 	bl	800aadc <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800a0b2:	20ea      	movs	r0, #234	; 0xea
 800a0b4:	f000 fce0 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	f000 fd0f 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x00);
 800a0be:	2000      	movs	r0, #0
 800a0c0:	f000 fd0c 	bl	800aadc <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800a0c4:	20ed      	movs	r0, #237	; 0xed
 800a0c6:	f000 fcd7 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800a0ca:	2064      	movs	r0, #100	; 0x64
 800a0cc:	f000 fd06 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x03);
 800a0d0:	2003      	movs	r0, #3
 800a0d2:	f000 fd03 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x12);
 800a0d6:	2012      	movs	r0, #18
 800a0d8:	f000 fd00 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x81);
 800a0dc:	2081      	movs	r0, #129	; 0x81
 800a0de:	f000 fcfd 	bl	800aadc <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800a0e2:	20f7      	movs	r0, #247	; 0xf7
 800a0e4:	f000 fcc8 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800a0e8:	2020      	movs	r0, #32
 800a0ea:	f000 fcf7 	bl	800aadc <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800a0ee:	20c0      	movs	r0, #192	; 0xc0
 800a0f0:	f000 fcc2 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800a0f4:	2023      	movs	r0, #35	; 0x23
 800a0f6:	f000 fcf1 	bl	800aadc <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800a0fa:	20c1      	movs	r0, #193	; 0xc1
 800a0fc:	f000 fcbc 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800a100:	2010      	movs	r0, #16
 800a102:	f000 fceb 	bl	800aadc <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800a106:	20c5      	movs	r0, #197	; 0xc5
 800a108:	f000 fcb6 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800a10c:	203e      	movs	r0, #62	; 0x3e
 800a10e:	f000 fce5 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x28);
 800a112:	2028      	movs	r0, #40	; 0x28
 800a114:	f000 fce2 	bl	800aadc <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800a118:	20c7      	movs	r0, #199	; 0xc7
 800a11a:	f000 fcad 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800a11e:	2086      	movs	r0, #134	; 0x86
 800a120:	f000 fcdc 	bl	800aadc <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800a124:	2036      	movs	r0, #54	; 0x36
 800a126:	f000 fca7 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800a12a:	2048      	movs	r0, #72	; 0x48
 800a12c:	f000 fcd6 	bl	800aadc <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800a130:	203a      	movs	r0, #58	; 0x3a
 800a132:	f000 fca1 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800a136:	2055      	movs	r0, #85	; 0x55
 800a138:	f000 fcd0 	bl	800aadc <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800a13c:	20b1      	movs	r0, #177	; 0xb1
 800a13e:	f000 fc9b 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a142:	2000      	movs	r0, #0
 800a144:	f000 fcca 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x18);
 800a148:	2018      	movs	r0, #24
 800a14a:	f000 fcc7 	bl	800aadc <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800a14e:	20b6      	movs	r0, #182	; 0xb6
 800a150:	f000 fc92 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800a154:	2008      	movs	r0, #8
 800a156:	f000 fcc1 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x82);
 800a15a:	2082      	movs	r0, #130	; 0x82
 800a15c:	f000 fcbe 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x27);
 800a160:	2027      	movs	r0, #39	; 0x27
 800a162:	f000 fcbb 	bl	800aadc <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800a166:	20f2      	movs	r0, #242	; 0xf2
 800a168:	f000 fc86 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a16c:	2000      	movs	r0, #0
 800a16e:	f000 fcb5 	bl	800aadc <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800a172:	2026      	movs	r0, #38	; 0x26
 800a174:	f000 fc80 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800a178:	2001      	movs	r0, #1
 800a17a:	f000 fcaf 	bl	800aadc <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800a17e:	20e0      	movs	r0, #224	; 0xe0
 800a180:	f000 fc7a 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800a184:	200f      	movs	r0, #15
 800a186:	f000 fca9 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x31);
 800a18a:	2031      	movs	r0, #49	; 0x31
 800a18c:	f000 fca6 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x2B);
 800a190:	202b      	movs	r0, #43	; 0x2b
 800a192:	f000 fca3 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x0C);
 800a196:	200c      	movs	r0, #12
 800a198:	f000 fca0 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800a19c:	200e      	movs	r0, #14
 800a19e:	f000 fc9d 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x08);
 800a1a2:	2008      	movs	r0, #8
 800a1a4:	f000 fc9a 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x4E);
 800a1a8:	204e      	movs	r0, #78	; 0x4e
 800a1aa:	f000 fc97 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0xF1);
 800a1ae:	20f1      	movs	r0, #241	; 0xf1
 800a1b0:	f000 fc94 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x37);
 800a1b4:	2037      	movs	r0, #55	; 0x37
 800a1b6:	f000 fc91 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x07);
 800a1ba:	2007      	movs	r0, #7
 800a1bc:	f000 fc8e 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x10);
 800a1c0:	2010      	movs	r0, #16
 800a1c2:	f000 fc8b 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x03);
 800a1c6:	2003      	movs	r0, #3
 800a1c8:	f000 fc88 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800a1cc:	200e      	movs	r0, #14
 800a1ce:	f000 fc85 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x09);
 800a1d2:	2009      	movs	r0, #9
 800a1d4:	f000 fc82 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x00);
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f000 fc7f 	bl	800aadc <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800a1de:	20e1      	movs	r0, #225	; 0xe1
 800a1e0:	f000 fc4a 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	f000 fc79 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800a1ea:	200e      	movs	r0, #14
 800a1ec:	f000 fc76 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x14);
 800a1f0:	2014      	movs	r0, #20
 800a1f2:	f000 fc73 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x03);
 800a1f6:	2003      	movs	r0, #3
 800a1f8:	f000 fc70 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x11);
 800a1fc:	2011      	movs	r0, #17
 800a1fe:	f000 fc6d 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x07);
 800a202:	2007      	movs	r0, #7
 800a204:	f000 fc6a 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x31);
 800a208:	2031      	movs	r0, #49	; 0x31
 800a20a:	f000 fc67 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0xC1);
 800a20e:	20c1      	movs	r0, #193	; 0xc1
 800a210:	f000 fc64 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x48);
 800a214:	2048      	movs	r0, #72	; 0x48
 800a216:	f000 fc61 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x08);
 800a21a:	2008      	movs	r0, #8
 800a21c:	f000 fc5e 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x0F);
 800a220:	200f      	movs	r0, #15
 800a222:	f000 fc5b 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x0C);
 800a226:	200c      	movs	r0, #12
 800a228:	f000 fc58 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x31);
 800a22c:	2031      	movs	r0, #49	; 0x31
 800a22e:	f000 fc55 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x36);
 800a232:	2036      	movs	r0, #54	; 0x36
 800a234:	f000 fc52 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(0x0F);
 800a238:	200f      	movs	r0, #15
 800a23a:	f000 fc4f 	bl	800aadc <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800a23e:	2011      	movs	r0, #17
 800a240:	f000 fc1a 	bl	800aa78 <_LCD_SendCommand>
	HAL_Delay(240);
 800a244:	20f0      	movs	r0, #240	; 0xf0
 800a246:	f7fa f99b 	bl	8004580 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800a24a:	2029      	movs	r0, #41	; 0x29
 800a24c:	f000 fc14 	bl	800aa78 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800a250:	2000      	movs	r0, #0
 800a252:	f000 fae5 	bl	800a820 <ILI9341_Set_Rotation>
}
 800a256:	bf00      	nop
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a260:	4b0b      	ldr	r3, [pc, #44]	; (800a290 <ILI9341_SPI_Init+0x34>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a268:	2b40      	cmp	r3, #64	; 0x40
 800a26a:	d005      	beq.n	800a278 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800a26c:	4b08      	ldr	r3, [pc, #32]	; (800a290 <ILI9341_SPI_Init+0x34>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a07      	ldr	r2, [pc, #28]	; (800a290 <ILI9341_SPI_Init+0x34>)
 800a272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a276:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <ILI9341_SPI_Init+0x38>)
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	4a05      	ldr	r2, [pc, #20]	; (800a294 <ILI9341_SPI_Init+0x38>)
 800a27e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a282:	6153      	str	r3, [r2, #20]
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	40003c00 	.word	0x40003c00
 800a294:	48000400 	.word	0x48000400

0800a298 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	4604      	mov	r4, r0
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	4623      	mov	r3, r4
 800a2a8:	80fb      	strh	r3, [r7, #6]
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	80bb      	strh	r3, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	807b      	strh	r3, [r7, #2]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800a2b6:	4b1a      	ldr	r3, [pc, #104]	; (800a320 <ILI9341_Draw_Horizontal_Line+0x88>)
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	88fa      	ldrh	r2, [r7, #6]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d229      	bcs.n	800a316 <ILI9341_Draw_Horizontal_Line+0x7e>
 800a2c2:	4b18      	ldr	r3, [pc, #96]	; (800a324 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	88ba      	ldrh	r2, [r7, #4]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d223      	bcs.n	800a316 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800a2ce:	88fa      	ldrh	r2, [r7, #6]
 800a2d0:	887b      	ldrh	r3, [r7, #2]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	4a12      	ldr	r2, [pc, #72]	; (800a320 <ILI9341_Draw_Horizontal_Line+0x88>)
 800a2d8:	8812      	ldrh	r2, [r2, #0]
 800a2da:	b292      	uxth	r2, r2
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	db05      	blt.n	800a2ec <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800a2e0:	4b0f      	ldr	r3, [pc, #60]	; (800a320 <ILI9341_Draw_Horizontal_Line+0x88>)
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	88fb      	ldrh	r3, [r7, #6]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800a2ec:	88fa      	ldrh	r2, [r7, #6]
 800a2ee:	887b      	ldrh	r3, [r7, #2]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	88bb      	ldrh	r3, [r7, #4]
 800a2fa:	88b9      	ldrh	r1, [r7, #4]
 800a2fc:	88f8      	ldrh	r0, [r7, #6]
 800a2fe:	f000 f85b 	bl	800a3b8 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800a302:	887c      	ldrh	r4, [r7, #2]
 800a304:	883a      	ldrh	r2, [r7, #0]
 800a306:	88b9      	ldrh	r1, [r7, #4]
 800a308:	88f8      	ldrh	r0, [r7, #6]
 800a30a:	2303      	movs	r3, #3
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	4623      	mov	r3, r4
 800a310:	f000 fb02 	bl	800a918 <_LCD_Write_Frame>
 800a314:	e000      	b.n	800a318 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800a316:	bf00      	nop
}
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd90      	pop	{r4, r7, pc}
 800a31e:	bf00      	nop
 800a320:	2000001e 	.word	0x2000001e
 800a324:	2000001c 	.word	0x2000001c

0800a328 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800a328:	b590      	push	{r4, r7, lr}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af02      	add	r7, sp, #8
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	4611      	mov	r1, r2
 800a334:	461a      	mov	r2, r3
 800a336:	4623      	mov	r3, r4
 800a338:	80fb      	strh	r3, [r7, #6]
 800a33a:	4603      	mov	r3, r0
 800a33c:	80bb      	strh	r3, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	807b      	strh	r3, [r7, #2]
 800a342:	4613      	mov	r3, r2
 800a344:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800a346:	4b1a      	ldr	r3, [pc, #104]	; (800a3b0 <ILI9341_Draw_Vertical_Line+0x88>)
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	88fa      	ldrh	r2, [r7, #6]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d229      	bcs.n	800a3a6 <ILI9341_Draw_Vertical_Line+0x7e>
 800a352:	4b18      	ldr	r3, [pc, #96]	; (800a3b4 <ILI9341_Draw_Vertical_Line+0x8c>)
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	b29b      	uxth	r3, r3
 800a358:	88ba      	ldrh	r2, [r7, #4]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d223      	bcs.n	800a3a6 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800a35e:	88ba      	ldrh	r2, [r7, #4]
 800a360:	887b      	ldrh	r3, [r7, #2]
 800a362:	4413      	add	r3, r2
 800a364:	3b01      	subs	r3, #1
 800a366:	4a13      	ldr	r2, [pc, #76]	; (800a3b4 <ILI9341_Draw_Vertical_Line+0x8c>)
 800a368:	8812      	ldrh	r2, [r2, #0]
 800a36a:	b292      	uxth	r2, r2
 800a36c:	4293      	cmp	r3, r2
 800a36e:	db05      	blt.n	800a37c <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800a370:	4b10      	ldr	r3, [pc, #64]	; (800a3b4 <ILI9341_Draw_Vertical_Line+0x8c>)
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	b29a      	uxth	r2, r3
 800a376:	88bb      	ldrh	r3, [r7, #4]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800a37c:	88ba      	ldrh	r2, [r7, #4]
 800a37e:	887b      	ldrh	r3, [r7, #2]
 800a380:	4413      	add	r3, r2
 800a382:	b29b      	uxth	r3, r3
 800a384:	3b01      	subs	r3, #1
 800a386:	b29b      	uxth	r3, r3
 800a388:	88fa      	ldrh	r2, [r7, #6]
 800a38a:	88b9      	ldrh	r1, [r7, #4]
 800a38c:	88f8      	ldrh	r0, [r7, #6]
 800a38e:	f000 f813 	bl	800a3b8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800a392:	887c      	ldrh	r4, [r7, #2]
 800a394:	883a      	ldrh	r2, [r7, #0]
 800a396:	88b9      	ldrh	r1, [r7, #4]
 800a398:	88f8      	ldrh	r0, [r7, #6]
 800a39a:	2303      	movs	r3, #3
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	4623      	mov	r3, r4
 800a3a0:	f000 faba 	bl	800a918 <_LCD_Write_Frame>
 800a3a4:	e000      	b.n	800a3a8 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800a3a6:	bf00      	nop
}
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd90      	pop	{r4, r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	2000001e 	.word	0x2000001e
 800a3b4:	2000001c 	.word	0x2000001c

0800a3b8 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800a3b8:	b590      	push	{r4, r7, lr}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	4623      	mov	r3, r4
 800a3c8:	80fb      	strh	r3, [r7, #6]
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	80bb      	strh	r3, [r7, #4]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	807b      	strh	r3, [r7, #2]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800a3d6:	202a      	movs	r0, #42	; 0x2a
 800a3d8:	f000 fb4e 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800a3dc:	88fb      	ldrh	r3, [r7, #6]
 800a3de:	0a1b      	lsrs	r3, r3, #8
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fb79 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(sc);
 800a3ea:	88fb      	ldrh	r3, [r7, #6]
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fb74 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800a3f4:	887b      	ldrh	r3, [r7, #2]
 800a3f6:	0a1b      	lsrs	r3, r3, #8
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 fb6d 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(ec);
 800a402:	887b      	ldrh	r3, [r7, #2]
 800a404:	b2db      	uxtb	r3, r3
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fb68 	bl	800aadc <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800a40c:	202b      	movs	r0, #43	; 0x2b
 800a40e:	f000 fb33 	bl	800aa78 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800a412:	88bb      	ldrh	r3, [r7, #4]
 800a414:	0a1b      	lsrs	r3, r3, #8
 800a416:	b29b      	uxth	r3, r3
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 fb5e 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(sp);
 800a420:	88bb      	ldrh	r3, [r7, #4]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fb59 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800a42a:	883b      	ldrh	r3, [r7, #0]
 800a42c:	0a1b      	lsrs	r3, r3, #8
 800a42e:	b29b      	uxth	r3, r3
 800a430:	b2db      	uxtb	r3, r3
 800a432:	4618      	mov	r0, r3
 800a434:	f000 fb52 	bl	800aadc <_LCD_SendData>
	_LCD_SendData(ep);
 800a438:	883b      	ldrh	r3, [r7, #0]
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 fb4d 	bl	800aadc <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800a442:	202c      	movs	r0, #44	; 0x2c
 800a444:	f000 fb18 	bl	800aa78 <_LCD_SendCommand>
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd90      	pop	{r4, r7, pc}

0800a450 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af02      	add	r7, sp, #8
 800a456:	4603      	mov	r3, r0
 800a458:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800a45a:	4b10      	ldr	r3, [pc, #64]	; (800a49c <ILI9341_Fill_Screen+0x4c>)
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	b29a      	uxth	r2, r3
 800a460:	4b0f      	ldr	r3, [pc, #60]	; (800a4a0 <ILI9341_Fill_Screen+0x50>)
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	b29b      	uxth	r3, r3
 800a466:	2100      	movs	r1, #0
 800a468:	2000      	movs	r0, #0
 800a46a:	f7ff ffa5 	bl	800a3b8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800a46e:	4b0b      	ldr	r3, [pc, #44]	; (800a49c <ILI9341_Fill_Screen+0x4c>)
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	b29b      	uxth	r3, r3
 800a474:	461a      	mov	r2, r3
 800a476:	4b0a      	ldr	r3, [pc, #40]	; (800a4a0 <ILI9341_Fill_Screen+0x50>)
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	fb03 f302 	mul.w	r3, r3, r2
 800a480:	4619      	mov	r1, r3
 800a482:	88fa      	ldrh	r2, [r7, #6]
 800a484:	2304      	movs	r3, #4
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	460b      	mov	r3, r1
 800a48a:	2100      	movs	r1, #0
 800a48c:	2000      	movs	r0, #0
 800a48e:	f000 fa43 	bl	800a918 <_LCD_Write_Frame>
}
 800a492:	bf00      	nop
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	2000001e 	.word	0x2000001e
 800a4a0:	2000001c 	.word	0x2000001c

0800a4a4 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08c      	sub	sp, #48	; 0x30
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	80fb      	strh	r3, [r7, #6]
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	80bb      	strh	r3, [r7, #4]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800a4b6:	4b94      	ldr	r3, [pc, #592]	; (800a708 <ILI9341_Draw_Pixel+0x264>)
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	88fa      	ldrh	r2, [r7, #6]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	f080 811e 	bcs.w	800a700 <ILI9341_Draw_Pixel+0x25c>
 800a4c4:	4b91      	ldr	r3, [pc, #580]	; (800a70c <ILI9341_Draw_Pixel+0x268>)
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	88ba      	ldrh	r2, [r7, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	f080 8117 	bcs.w	800a700 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800a4d2:	4b8f      	ldr	r3, [pc, #572]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	4a8e      	ldr	r2, [pc, #568]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a4d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4dc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a4de:	4b8c      	ldr	r3, [pc, #560]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	4a8b      	ldr	r2, [pc, #556]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a4e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4e8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	202a      	movs	r0, #42	; 0x2a
 800a4f0:	f000 fb26 	bl	800ab40 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4f8:	e008      	b.n	800a50c <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a4fa:	4b85      	ldr	r3, [pc, #532]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	4a84      	ldr	r2, [pc, #528]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a504:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	3301      	adds	r3, #1
 800a50a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	2b02      	cmp	r3, #2
 800a510:	ddf3      	ble.n	800a4fa <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800a512:	4b7f      	ldr	r3, [pc, #508]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	4a7e      	ldr	r2, [pc, #504]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a51e:	4b7c      	ldr	r3, [pc, #496]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	4a7b      	ldr	r2, [pc, #492]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a528:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a52a:	4b79      	ldr	r3, [pc, #484]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	4a78      	ldr	r2, [pc, #480]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a534:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800a536:	88fb      	ldrh	r3, [r7, #6]
 800a538:	0a1b      	lsrs	r3, r3, #8
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	753b      	strb	r3, [r7, #20]
 800a540:	88fb      	ldrh	r3, [r7, #6]
 800a542:	b2db      	uxtb	r3, r3
 800a544:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800a546:	88fb      	ldrh	r3, [r7, #6]
 800a548:	3301      	adds	r3, #1
 800a54a:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800a550:	88fb      	ldrh	r3, [r7, #6]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	3301      	adds	r3, #1
 800a556:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800a558:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 9);
 800a55a:	f107 0014 	add.w	r0, r7, #20
 800a55e:	2309      	movs	r3, #9
 800a560:	2200      	movs	r2, #0
 800a562:	2104      	movs	r1, #4
 800a564:	f000 fb02 	bl	800ab6c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a568:	2300      	movs	r3, #0
 800a56a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a56c:	e008      	b.n	800a580 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a56e:	4b68      	ldr	r3, [pc, #416]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	4a67      	ldr	r2, [pc, #412]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a578:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	3301      	adds	r3, #1
 800a57e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a582:	2b02      	cmp	r3, #2
 800a584:	ddf3      	ble.n	800a56e <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a586:	4b62      	ldr	r3, [pc, #392]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	4a61      	ldr	r2, [pc, #388]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a590:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800a592:	4b5f      	ldr	r3, [pc, #380]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	4a5e      	ldr	r2, [pc, #376]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a59c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a59e:	4b5c      	ldr	r3, [pc, #368]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	4a5b      	ldr	r2, [pc, #364]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5a8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	202b      	movs	r0, #43	; 0x2b
 800a5b0:	f000 fac6 	bl	800ab40 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b8:	e008      	b.n	800a5cc <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a5ba:	4b55      	ldr	r3, [pc, #340]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	4a54      	ldr	r2, [pc, #336]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5c4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	ddf3      	ble.n	800a5ba <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800a5d2:	4b4f      	ldr	r3, [pc, #316]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	4a4e      	ldr	r2, [pc, #312]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5dc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a5de:	4b4c      	ldr	r3, [pc, #304]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	4a4b      	ldr	r2, [pc, #300]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e8:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a5ea:	4b49      	ldr	r3, [pc, #292]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	4a48      	ldr	r2, [pc, #288]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a5f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5f4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800a5f6:	88bb      	ldrh	r3, [r7, #4]
 800a5f8:	0a1b      	lsrs	r3, r3, #8
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	743b      	strb	r3, [r7, #16]
 800a600:	88bb      	ldrh	r3, [r7, #4]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800a606:	88bb      	ldrh	r3, [r7, #4]
 800a608:	3301      	adds	r3, #1
 800a60a:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800a610:	88bb      	ldrh	r3, [r7, #4]
 800a612:	b2db      	uxtb	r3, r3
 800a614:	3301      	adds	r3, #1
 800a616:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800a618:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 9);
 800a61a:	f107 0010 	add.w	r0, r7, #16
 800a61e:	2309      	movs	r3, #9
 800a620:	2200      	movs	r2, #0
 800a622:	2104      	movs	r1, #4
 800a624:	f000 faa2 	bl	800ab6c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a628:	2300      	movs	r3, #0
 800a62a:	623b      	str	r3, [r7, #32]
 800a62c:	e008      	b.n	800a640 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a62e:	4b38      	ldr	r3, [pc, #224]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	4a37      	ldr	r2, [pc, #220]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a638:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a63a:	6a3b      	ldr	r3, [r7, #32]
 800a63c:	3301      	adds	r3, #1
 800a63e:	623b      	str	r3, [r7, #32]
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	2b02      	cmp	r3, #2
 800a644:	ddf3      	ble.n	800a62e <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a646:	4b32      	ldr	r3, [pc, #200]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	4a31      	ldr	r2, [pc, #196]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a64c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a650:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800a652:	4b2f      	ldr	r3, [pc, #188]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	4a2e      	ldr	r2, [pc, #184]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a65c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a65e:	4b2c      	ldr	r3, [pc, #176]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	4a2b      	ldr	r2, [pc, #172]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a668:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800a66a:	2200      	movs	r2, #0
 800a66c:	2100      	movs	r1, #0
 800a66e:	202c      	movs	r0, #44	; 0x2c
 800a670:	f000 fa66 	bl	800ab40 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a674:	2300      	movs	r3, #0
 800a676:	61fb      	str	r3, [r7, #28]
 800a678:	e008      	b.n	800a68c <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a67a:	4b25      	ldr	r3, [pc, #148]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	4a24      	ldr	r2, [pc, #144]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a684:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	3301      	adds	r3, #1
 800a68a:	61fb      	str	r3, [r7, #28]
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	ddf3      	ble.n	800a67a <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800a692:	4b1f      	ldr	r3, [pc, #124]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	4a1e      	ldr	r2, [pc, #120]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a69e:	4b1c      	ldr	r3, [pc, #112]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	4a1b      	ldr	r2, [pc, #108]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a8:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a6aa:	4b19      	ldr	r3, [pc, #100]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	4a18      	ldr	r2, [pc, #96]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a6b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6b4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800a6b6:	887b      	ldrh	r3, [r7, #2]
 800a6b8:	0a1b      	lsrs	r3, r3, #8
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	733b      	strb	r3, [r7, #12]
 800a6c0:	887b      	ldrh	r3, [r7, #2]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 9);
 800a6c6:	f107 000c 	add.w	r0, r7, #12
 800a6ca:	2309      	movs	r3, #9
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2104      	movs	r1, #4
 800a6d0:	f000 fa4c 	bl	800ab6c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61bb      	str	r3, [r7, #24]
 800a6d8:	e008      	b.n	800a6ec <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a6da:	4b0d      	ldr	r3, [pc, #52]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	4a0c      	ldr	r2, [pc, #48]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a6e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6e4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	61bb      	str	r3, [r7, #24]
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	ddf3      	ble.n	800a6da <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800a6f2:	4b07      	ldr	r3, [pc, #28]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	4a06      	ldr	r2, [pc, #24]	; (800a710 <ILI9341_Draw_Pixel+0x26c>)
 800a6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fc:	6153      	str	r3, [r2, #20]
 800a6fe:	e000      	b.n	800a702 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800a700:	bf00      	nop


}
 800a702:	3730      	adds	r7, #48	; 0x30
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	2000001e 	.word	0x2000001e
 800a70c:	2000001c 	.word	0x2000001c
 800a710:	48000400 	.word	0x48000400

0800a714 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800a714:	b590      	push	{r4, r7, lr}
 800a716:	b087      	sub	sp, #28
 800a718:	af02      	add	r7, sp, #8
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	4611      	mov	r1, r2
 800a720:	461a      	mov	r2, r3
 800a722:	4623      	mov	r3, r4
 800a724:	80fb      	strh	r3, [r7, #6]
 800a726:	4603      	mov	r3, r0
 800a728:	80bb      	strh	r3, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	807b      	strh	r3, [r7, #2]
 800a72e:	4613      	mov	r3, r2
 800a730:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800a732:	4b39      	ldr	r3, [pc, #228]	; (800a818 <ILI9341_Draw_Rectangle+0x104>)
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	b29b      	uxth	r3, r3
 800a738:	88fa      	ldrh	r2, [r7, #6]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d268      	bcs.n	800a810 <ILI9341_Draw_Rectangle+0xfc>
 800a73e:	4b37      	ldr	r3, [pc, #220]	; (800a81c <ILI9341_Draw_Rectangle+0x108>)
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	b29b      	uxth	r3, r3
 800a744:	88ba      	ldrh	r2, [r7, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	d262      	bcs.n	800a810 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800a74a:	88fa      	ldrh	r2, [r7, #6]
 800a74c:	887b      	ldrh	r3, [r7, #2]
 800a74e:	4413      	add	r3, r2
 800a750:	3b01      	subs	r3, #1
 800a752:	4a31      	ldr	r2, [pc, #196]	; (800a818 <ILI9341_Draw_Rectangle+0x104>)
 800a754:	8812      	ldrh	r2, [r2, #0]
 800a756:	b292      	uxth	r2, r2
 800a758:	4293      	cmp	r3, r2
 800a75a:	db05      	blt.n	800a768 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800a75c:	4b2e      	ldr	r3, [pc, #184]	; (800a818 <ILI9341_Draw_Rectangle+0x104>)
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	b29a      	uxth	r2, r3
 800a762:	88fb      	ldrh	r3, [r7, #6]
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800a768:	88ba      	ldrh	r2, [r7, #4]
 800a76a:	883b      	ldrh	r3, [r7, #0]
 800a76c:	4413      	add	r3, r2
 800a76e:	3b01      	subs	r3, #1
 800a770:	4a2a      	ldr	r2, [pc, #168]	; (800a81c <ILI9341_Draw_Rectangle+0x108>)
 800a772:	8812      	ldrh	r2, [r2, #0]
 800a774:	b292      	uxth	r2, r2
 800a776:	4293      	cmp	r3, r2
 800a778:	db05      	blt.n	800a786 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800a77a:	4b28      	ldr	r3, [pc, #160]	; (800a81c <ILI9341_Draw_Rectangle+0x108>)
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	b29a      	uxth	r2, r3
 800a780:	88bb      	ldrh	r3, [r7, #4]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800a786:	88fa      	ldrh	r2, [r7, #6]
 800a788:	887b      	ldrh	r3, [r7, #2]
 800a78a:	4413      	add	r3, r2
 800a78c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800a78e:	3b01      	subs	r3, #1
 800a790:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800a792:	88ba      	ldrh	r2, [r7, #4]
 800a794:	883b      	ldrh	r3, [r7, #0]
 800a796:	4413      	add	r3, r2
 800a798:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800a79a:	3b01      	subs	r3, #1
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	88b9      	ldrh	r1, [r7, #4]
 800a7a0:	88f8      	ldrh	r0, [r7, #6]
 800a7a2:	4622      	mov	r2, r4
 800a7a4:	f7ff fe08 	bl	800a3b8 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800a7a8:	883a      	ldrh	r2, [r7, #0]
 800a7aa:	887b      	ldrh	r3, [r7, #2]
 800a7ac:	fb12 f303 	smulbb	r3, r2, r3
 800a7b0:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800a7b6:	89fb      	ldrh	r3, [r7, #14]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d009      	beq.n	800a7d4 <ILI9341_Draw_Rectangle+0xc0>
 800a7c0:	89fb      	ldrh	r3, [r7, #14]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d906      	bls.n	800a7d4 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800a7ca:	89fb      	ldrh	r3, [r7, #14]
 800a7cc:	085b      	lsrs	r3, r3, #1
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800a7d4:	89fc      	ldrh	r4, [r7, #14]
 800a7d6:	8c3a      	ldrh	r2, [r7, #32]
 800a7d8:	88b9      	ldrh	r1, [r7, #4]
 800a7da:	88f8      	ldrh	r0, [r7, #6]
 800a7dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	4623      	mov	r3, r4
 800a7e4:	f000 f898 	bl	800a918 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800a7e8:	7b7b      	ldrb	r3, [r7, #13]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d011      	beq.n	800a812 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800a7ee:	88fa      	ldrh	r2, [r7, #6]
 800a7f0:	887b      	ldrh	r3, [r7, #2]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800a7fa:	88ba      	ldrh	r2, [r7, #4]
 800a7fc:	883b      	ldrh	r3, [r7, #0]
 800a7fe:	4413      	add	r3, r2
 800a800:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800a802:	3b01      	subs	r3, #1
 800a804:	b29b      	uxth	r3, r3
 800a806:	8c3a      	ldrh	r2, [r7, #32]
 800a808:	4619      	mov	r1, r3
 800a80a:	f7ff fe4b 	bl	800a4a4 <ILI9341_Draw_Pixel>
 800a80e:	e000      	b.n	800a812 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800a810:	bf00      	nop
							colour);
	}
}
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	bd90      	pop	{r4, r7, pc}
 800a818:	2000001e 	.word	0x2000001e
 800a81c:	2000001c 	.word	0x2000001c

0800a820 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800a82e:	2036      	movs	r0, #54	; 0x36
 800a830:	f000 f922 	bl	800aa78 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	2b03      	cmp	r3, #3
 800a838:	d836      	bhi.n	800a8a8 <ILI9341_Set_Rotation+0x88>
 800a83a:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <ILI9341_Set_Rotation+0x20>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a851 	.word	0x0800a851
 800a844:	0800a867 	.word	0x0800a867
 800a848:	0800a87d 	.word	0x0800a87d
 800a84c:	0800a893 	.word	0x0800a893
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800a850:	2048      	movs	r0, #72	; 0x48
 800a852:	f000 f943 	bl	800aadc <_LCD_SendData>
			LCD_WIDTH = 240;
 800a856:	4b17      	ldr	r3, [pc, #92]	; (800a8b4 <ILI9341_Set_Rotation+0x94>)
 800a858:	22f0      	movs	r2, #240	; 0xf0
 800a85a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800a85c:	4b16      	ldr	r3, [pc, #88]	; (800a8b8 <ILI9341_Set_Rotation+0x98>)
 800a85e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a862:	801a      	strh	r2, [r3, #0]
			break;
 800a864:	e021      	b.n	800a8aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800a866:	2028      	movs	r0, #40	; 0x28
 800a868:	f000 f938 	bl	800aadc <_LCD_SendData>
			LCD_WIDTH  = 320;
 800a86c:	4b11      	ldr	r3, [pc, #68]	; (800a8b4 <ILI9341_Set_Rotation+0x94>)
 800a86e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a872:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800a874:	4b10      	ldr	r3, [pc, #64]	; (800a8b8 <ILI9341_Set_Rotation+0x98>)
 800a876:	22f0      	movs	r2, #240	; 0xf0
 800a878:	801a      	strh	r2, [r3, #0]
			break;
 800a87a:	e016      	b.n	800a8aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800a87c:	2088      	movs	r0, #136	; 0x88
 800a87e:	f000 f92d 	bl	800aadc <_LCD_SendData>
			LCD_WIDTH  = 240;
 800a882:	4b0c      	ldr	r3, [pc, #48]	; (800a8b4 <ILI9341_Set_Rotation+0x94>)
 800a884:	22f0      	movs	r2, #240	; 0xf0
 800a886:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800a888:	4b0b      	ldr	r3, [pc, #44]	; (800a8b8 <ILI9341_Set_Rotation+0x98>)
 800a88a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a88e:	801a      	strh	r2, [r3, #0]
			break;
 800a890:	e00b      	b.n	800a8aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800a892:	20e8      	movs	r0, #232	; 0xe8
 800a894:	f000 f922 	bl	800aadc <_LCD_SendData>
			LCD_WIDTH  = 320;
 800a898:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <ILI9341_Set_Rotation+0x94>)
 800a89a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a89e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800a8a0:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <ILI9341_Set_Rotation+0x98>)
 800a8a2:	22f0      	movs	r2, #240	; 0xf0
 800a8a4:	801a      	strh	r2, [r3, #0]
			break;
 800a8a6:	e000      	b.n	800a8aa <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800a8a8:	bf00      	nop
	}
}
 800a8aa:	bf00      	nop
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	2000001e 	.word	0x2000001e
 800a8b8:	2000001c 	.word	0x2000001c

0800a8bc <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <_LCD_Enable+0x1c>)
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	4a04      	ldr	r2, [pc, #16]	; (800a8d8 <_LCD_Enable+0x1c>)
 800a8c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8ca:	6153      	str	r3, [r2, #20]
}
 800a8cc:	bf00      	nop
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	48000400 	.word	0x48000400

0800a8dc <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800a8e0:	4b0c      	ldr	r3, [pc, #48]	; (800a914 <_LCD_Reset+0x38>)
 800a8e2:	695b      	ldr	r3, [r3, #20]
 800a8e4:	4a0b      	ldr	r2, [pc, #44]	; (800a914 <_LCD_Reset+0x38>)
 800a8e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8ea:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800a8ec:	20c8      	movs	r0, #200	; 0xc8
 800a8ee:	f7f9 fe47 	bl	8004580 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a8f2:	4b08      	ldr	r3, [pc, #32]	; (800a914 <_LCD_Reset+0x38>)
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	4a07      	ldr	r2, [pc, #28]	; (800a914 <_LCD_Reset+0x38>)
 800a8f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8fc:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800a8fe:	20c8      	movs	r0, #200	; 0xc8
 800a900:	f7f9 fe3e 	bl	8004580 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800a904:	4b03      	ldr	r3, [pc, #12]	; (800a914 <_LCD_Reset+0x38>)
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	4a02      	ldr	r2, [pc, #8]	; (800a914 <_LCD_Reset+0x38>)
 800a90a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a90e:	6153      	str	r3, [r2, #20]
}
 800a910:	bf00      	nop
 800a912:	bd80      	pop	{r7, pc}
 800a914:	48000400 	.word	0x48000400

0800a918 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800a918:	b5b0      	push	{r4, r5, r7, lr}
 800a91a:	b08e      	sub	sp, #56	; 0x38
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	607b      	str	r3, [r7, #4]
 800a920:	4603      	mov	r3, r0
 800a922:	81fb      	strh	r3, [r7, #14]
 800a924:	460b      	mov	r3, r1
 800a926:	81bb      	strh	r3, [r7, #12]
 800a928:	4613      	mov	r3, r2
 800a92a:	817b      	strh	r3, [r7, #10]
 800a92c:	466b      	mov	r3, sp
 800a92e:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	4a4d      	ldr	r2, [pc, #308]	; (800aa70 <_LCD_Write_Frame+0x158>)
 800a93a:	8812      	ldrh	r2, [r2, #0]
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d202      	bcs.n	800a946 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a944:	e002      	b.n	800a94c <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800a946:	4b4a      	ldr	r3, [pc, #296]	; (800aa70 <_LCD_Write_Frame+0x158>)
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800a94c:	897b      	ldrh	r3, [r7, #10]
 800a94e:	0a1b      	lsrs	r3, r3, #8
 800a950:	b29b      	uxth	r3, r3
 800a952:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800a954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a956:	4603      	mov	r3, r0
 800a958:	3b01      	subs	r3, #1
 800a95a:	61bb      	str	r3, [r7, #24]
 800a95c:	4601      	mov	r1, r0
 800a95e:	f04f 0200 	mov.w	r2, #0
 800a962:	f04f 0300 	mov.w	r3, #0
 800a966:	f04f 0400 	mov.w	r4, #0
 800a96a:	00d4      	lsls	r4, r2, #3
 800a96c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800a970:	00cb      	lsls	r3, r1, #3
 800a972:	4601      	mov	r1, r0
 800a974:	f04f 0200 	mov.w	r2, #0
 800a978:	f04f 0300 	mov.w	r3, #0
 800a97c:	f04f 0400 	mov.w	r4, #0
 800a980:	00d4      	lsls	r4, r2, #3
 800a982:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800a986:	00cb      	lsls	r3, r1, #3
 800a988:	1dc3      	adds	r3, r0, #7
 800a98a:	08db      	lsrs	r3, r3, #3
 800a98c:	00db      	lsls	r3, r3, #3
 800a98e:	ebad 0d03 	sub.w	sp, sp, r3
 800a992:	466b      	mov	r3, sp
 800a994:	3300      	adds	r3, #0
 800a996:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800a998:	2300      	movs	r3, #0
 800a99a:	633b      	str	r3, [r7, #48]	; 0x30
 800a99c:	e00d      	b.n	800a9ba <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	4413      	add	r3, r2
 800a9a4:	7ffa      	ldrb	r2, [r7, #31]
 800a9a6:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	897a      	ldrh	r2, [r7, #10]
 800a9ae:	b2d1      	uxtb	r1, r2
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	3302      	adds	r3, #2
 800a9b8:	633b      	str	r3, [r7, #48]	; 0x30
 800a9ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d3ed      	bcc.n	800a99e <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00d      	beq.n	800a9f2 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9de:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a9e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9ea:	fb01 f202 	mul.w	r2, r1, r2
 800a9ee:	1a9b      	subs	r3, r3, r2
 800a9f0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800a9f2:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <_LCD_Write_Frame+0x15c>)
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	4a1f      	ldr	r2, [pc, #124]	; (800aa74 <_LCD_Write_Frame+0x15c>)
 800a9f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9fc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800a9fe:	4b1d      	ldr	r3, [pc, #116]	; (800aa74 <_LCD_Write_Frame+0x15c>)
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	4a1c      	ldr	r2, [pc, #112]	; (800aa74 <_LCD_Write_Frame+0x15c>)
 800aa04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa08:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00f      	beq.n	800aa30 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800aa10:	2300      	movs	r3, #0
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24
 800aa14:	e008      	b.n	800aa28 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 9);
 800aa16:	6978      	ldr	r0, [r7, #20]
 800aa18:	2309      	movs	r3, #9
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa1e:	f000 f8a5 	bl	800ab6c <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	3301      	adds	r3, #1
 800aa26:	627b      	str	r3, [r7, #36]	; 0x24
 800aa28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d3f2      	bcc.n	800aa16 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 9);
 800aa30:	6978      	ldr	r0, [r7, #20]
 800aa32:	2309      	movs	r3, #9
 800aa34:	2200      	movs	r2, #0
 800aa36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa38:	f000 f898 	bl	800ab6c <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	623b      	str	r3, [r7, #32]
 800aa40:	e008      	b.n	800aa54 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800aa42:	4b0c      	ldr	r3, [pc, #48]	; (800aa74 <_LCD_Write_Frame+0x15c>)
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	4a0b      	ldr	r2, [pc, #44]	; (800aa74 <_LCD_Write_Frame+0x15c>)
 800aa48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa4c:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	3301      	adds	r3, #1
 800aa52:	623b      	str	r3, [r7, #32]
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	ddf3      	ble.n	800aa42 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800aa5a:	4b06      	ldr	r3, [pc, #24]	; (800aa74 <_LCD_Write_Frame+0x15c>)
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	4a05      	ldr	r2, [pc, #20]	; (800aa74 <_LCD_Write_Frame+0x15c>)
 800aa60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa64:	6153      	str	r3, [r2, #20]
 800aa66:	46ad      	mov	sp, r5

}
 800aa68:	bf00      	nop
 800aa6a:	3738      	adds	r7, #56	; 0x38
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bdb0      	pop	{r4, r5, r7, pc}
 800aa70:	20000020 	.word	0x20000020
 800aa74:	48000400 	.word	0x48000400

0800aa78 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800aa82:	4b15      	ldr	r3, [pc, #84]	; (800aad8 <_LCD_SendCommand+0x60>)
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	4a14      	ldr	r2, [pc, #80]	; (800aad8 <_LCD_SendCommand+0x60>)
 800aa88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa8c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800aa8e:	4b12      	ldr	r3, [pc, #72]	; (800aad8 <_LCD_SendCommand+0x60>)
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	4a11      	ldr	r2, [pc, #68]	; (800aad8 <_LCD_SendCommand+0x60>)
 800aa94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa98:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800aa9a:	79fb      	ldrb	r3, [r7, #7]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 f84d 	bl	800ab40 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	e008      	b.n	800aabe <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <_LCD_SendCommand+0x60>)
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	4a09      	ldr	r2, [pc, #36]	; (800aad8 <_LCD_SendCommand+0x60>)
 800aab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aab6:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3301      	adds	r3, #1
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	ddf3      	ble.n	800aaac <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800aac4:	4b04      	ldr	r3, [pc, #16]	; (800aad8 <_LCD_SendCommand+0x60>)
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	4a03      	ldr	r2, [pc, #12]	; (800aad8 <_LCD_SendCommand+0x60>)
 800aaca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aace:	6153      	str	r3, [r2, #20]
}
 800aad0:	bf00      	nop
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	48000400 	.word	0x48000400

0800aadc <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800aae6:	4b15      	ldr	r3, [pc, #84]	; (800ab3c <_LCD_SendData+0x60>)
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	4a14      	ldr	r2, [pc, #80]	; (800ab3c <_LCD_SendData+0x60>)
 800aaec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaf0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800aaf2:	4b12      	ldr	r3, [pc, #72]	; (800ab3c <_LCD_SendData+0x60>)
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	4a11      	ldr	r2, [pc, #68]	; (800ab3c <_LCD_SendData+0x60>)
 800aaf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aafc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	2200      	movs	r2, #0
 800ab02:	2100      	movs	r1, #0
 800ab04:	4618      	mov	r0, r3
 800ab06:	f000 f81b 	bl	800ab40 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	e008      	b.n	800ab22 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <_LCD_SendData+0x60>)
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	4a09      	ldr	r2, [pc, #36]	; (800ab3c <_LCD_SendData+0x60>)
 800ab16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab1a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	60fb      	str	r3, [r7, #12]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	ddf3      	ble.n	800ab10 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ab28:	4b04      	ldr	r3, [pc, #16]	; (800ab3c <_LCD_SendData+0x60>)
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	4a03      	ldr	r2, [pc, #12]	; (800ab3c <_LCD_SendData+0x60>)
 800ab2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab32:	6153      	str	r3, [r2, #20]
}
 800ab34:	bf00      	nop
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	48000400 	.word	0x48000400

0800ab40 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	71fb      	strb	r3, [r7, #7]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	71bb      	strb	r3, [r7, #6]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	717b      	strb	r3, [r7, #5]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, &data_buffer, 1, 1);
 800ab52:	1df9      	adds	r1, r7, #7
 800ab54:	2301      	movs	r3, #1
 800ab56:	2201      	movs	r2, #1
 800ab58:	4803      	ldr	r0, [pc, #12]	; (800ab68 <_SPI_SendByte+0x28>)
 800ab5a:	f7fd fa9f 	bl	800809c <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800ab5e:	bf00      	nop
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	200012e8 	.word	0x200012e8

0800ab6c <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	4611      	mov	r1, r2
 800ab78:	461a      	mov	r2, r3
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	71fb      	strb	r3, [r7, #7]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	71bb      	strb	r3, [r7, #6]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)data_buffer, buffer_size, 2 );
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	2302      	movs	r3, #2
 800ab88:	68f9      	ldr	r1, [r7, #12]
 800ab8a:	4803      	ldr	r0, [pc, #12]	; (800ab98 <_SPI_SendByteMultiByte+0x2c>)
 800ab8c:	f7fd fa86 	bl	800809c <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800ab90:	bf00      	nop
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	200012e8 	.word	0x200012e8

0800ab9c <__errno>:
 800ab9c:	4b01      	ldr	r3, [pc, #4]	; (800aba4 <__errno+0x8>)
 800ab9e:	6818      	ldr	r0, [r3, #0]
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20001064 	.word	0x20001064

0800aba8 <__libc_init_array>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	4e0d      	ldr	r6, [pc, #52]	; (800abe0 <__libc_init_array+0x38>)
 800abac:	4c0d      	ldr	r4, [pc, #52]	; (800abe4 <__libc_init_array+0x3c>)
 800abae:	1ba4      	subs	r4, r4, r6
 800abb0:	10a4      	asrs	r4, r4, #2
 800abb2:	2500      	movs	r5, #0
 800abb4:	42a5      	cmp	r5, r4
 800abb6:	d109      	bne.n	800abcc <__libc_init_array+0x24>
 800abb8:	4e0b      	ldr	r6, [pc, #44]	; (800abe8 <__libc_init_array+0x40>)
 800abba:	4c0c      	ldr	r4, [pc, #48]	; (800abec <__libc_init_array+0x44>)
 800abbc:	f000 fff8 	bl	800bbb0 <_init>
 800abc0:	1ba4      	subs	r4, r4, r6
 800abc2:	10a4      	asrs	r4, r4, #2
 800abc4:	2500      	movs	r5, #0
 800abc6:	42a5      	cmp	r5, r4
 800abc8:	d105      	bne.n	800abd6 <__libc_init_array+0x2e>
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abd0:	4798      	blx	r3
 800abd2:	3501      	adds	r5, #1
 800abd4:	e7ee      	b.n	800abb4 <__libc_init_array+0xc>
 800abd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abda:	4798      	blx	r3
 800abdc:	3501      	adds	r5, #1
 800abde:	e7f2      	b.n	800abc6 <__libc_init_array+0x1e>
 800abe0:	0800c178 	.word	0x0800c178
 800abe4:	0800c178 	.word	0x0800c178
 800abe8:	0800c178 	.word	0x0800c178
 800abec:	0800c17c 	.word	0x0800c17c

0800abf0 <memset>:
 800abf0:	4402      	add	r2, r0
 800abf2:	4603      	mov	r3, r0
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d100      	bne.n	800abfa <memset+0xa>
 800abf8:	4770      	bx	lr
 800abfa:	f803 1b01 	strb.w	r1, [r3], #1
 800abfe:	e7f9      	b.n	800abf4 <memset+0x4>

0800ac00 <_puts_r>:
 800ac00:	b570      	push	{r4, r5, r6, lr}
 800ac02:	460e      	mov	r6, r1
 800ac04:	4605      	mov	r5, r0
 800ac06:	b118      	cbz	r0, 800ac10 <_puts_r+0x10>
 800ac08:	6983      	ldr	r3, [r0, #24]
 800ac0a:	b90b      	cbnz	r3, 800ac10 <_puts_r+0x10>
 800ac0c:	f000 fa50 	bl	800b0b0 <__sinit>
 800ac10:	69ab      	ldr	r3, [r5, #24]
 800ac12:	68ac      	ldr	r4, [r5, #8]
 800ac14:	b913      	cbnz	r3, 800ac1c <_puts_r+0x1c>
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 fa4a 	bl	800b0b0 <__sinit>
 800ac1c:	4b23      	ldr	r3, [pc, #140]	; (800acac <_puts_r+0xac>)
 800ac1e:	429c      	cmp	r4, r3
 800ac20:	d117      	bne.n	800ac52 <_puts_r+0x52>
 800ac22:	686c      	ldr	r4, [r5, #4]
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	071b      	lsls	r3, r3, #28
 800ac28:	d51d      	bpl.n	800ac66 <_puts_r+0x66>
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	b1db      	cbz	r3, 800ac66 <_puts_r+0x66>
 800ac2e:	3e01      	subs	r6, #1
 800ac30:	68a3      	ldr	r3, [r4, #8]
 800ac32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac36:	3b01      	subs	r3, #1
 800ac38:	60a3      	str	r3, [r4, #8]
 800ac3a:	b9e9      	cbnz	r1, 800ac78 <_puts_r+0x78>
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	da2e      	bge.n	800ac9e <_puts_r+0x9e>
 800ac40:	4622      	mov	r2, r4
 800ac42:	210a      	movs	r1, #10
 800ac44:	4628      	mov	r0, r5
 800ac46:	f000 f883 	bl	800ad50 <__swbuf_r>
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	d011      	beq.n	800ac72 <_puts_r+0x72>
 800ac4e:	200a      	movs	r0, #10
 800ac50:	e011      	b.n	800ac76 <_puts_r+0x76>
 800ac52:	4b17      	ldr	r3, [pc, #92]	; (800acb0 <_puts_r+0xb0>)
 800ac54:	429c      	cmp	r4, r3
 800ac56:	d101      	bne.n	800ac5c <_puts_r+0x5c>
 800ac58:	68ac      	ldr	r4, [r5, #8]
 800ac5a:	e7e3      	b.n	800ac24 <_puts_r+0x24>
 800ac5c:	4b15      	ldr	r3, [pc, #84]	; (800acb4 <_puts_r+0xb4>)
 800ac5e:	429c      	cmp	r4, r3
 800ac60:	bf08      	it	eq
 800ac62:	68ec      	ldreq	r4, [r5, #12]
 800ac64:	e7de      	b.n	800ac24 <_puts_r+0x24>
 800ac66:	4621      	mov	r1, r4
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f000 f8c3 	bl	800adf4 <__swsetup_r>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d0dd      	beq.n	800ac2e <_puts_r+0x2e>
 800ac72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac76:	bd70      	pop	{r4, r5, r6, pc}
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	da04      	bge.n	800ac86 <_puts_r+0x86>
 800ac7c:	69a2      	ldr	r2, [r4, #24]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	dc06      	bgt.n	800ac90 <_puts_r+0x90>
 800ac82:	290a      	cmp	r1, #10
 800ac84:	d004      	beq.n	800ac90 <_puts_r+0x90>
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	1c5a      	adds	r2, r3, #1
 800ac8a:	6022      	str	r2, [r4, #0]
 800ac8c:	7019      	strb	r1, [r3, #0]
 800ac8e:	e7cf      	b.n	800ac30 <_puts_r+0x30>
 800ac90:	4622      	mov	r2, r4
 800ac92:	4628      	mov	r0, r5
 800ac94:	f000 f85c 	bl	800ad50 <__swbuf_r>
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d1c9      	bne.n	800ac30 <_puts_r+0x30>
 800ac9c:	e7e9      	b.n	800ac72 <_puts_r+0x72>
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	200a      	movs	r0, #10
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	6022      	str	r2, [r4, #0]
 800aca6:	7018      	strb	r0, [r3, #0]
 800aca8:	e7e5      	b.n	800ac76 <_puts_r+0x76>
 800acaa:	bf00      	nop
 800acac:	0800c104 	.word	0x0800c104
 800acb0:	0800c124 	.word	0x0800c124
 800acb4:	0800c0e4 	.word	0x0800c0e4

0800acb8 <puts>:
 800acb8:	4b02      	ldr	r3, [pc, #8]	; (800acc4 <puts+0xc>)
 800acba:	4601      	mov	r1, r0
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	f7ff bf9f 	b.w	800ac00 <_puts_r>
 800acc2:	bf00      	nop
 800acc4:	20001064 	.word	0x20001064

0800acc8 <sniprintf>:
 800acc8:	b40c      	push	{r2, r3}
 800acca:	b530      	push	{r4, r5, lr}
 800accc:	4b17      	ldr	r3, [pc, #92]	; (800ad2c <sniprintf+0x64>)
 800acce:	1e0c      	subs	r4, r1, #0
 800acd0:	b09d      	sub	sp, #116	; 0x74
 800acd2:	681d      	ldr	r5, [r3, #0]
 800acd4:	da08      	bge.n	800ace8 <sniprintf+0x20>
 800acd6:	238b      	movs	r3, #139	; 0x8b
 800acd8:	602b      	str	r3, [r5, #0]
 800acda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acde:	b01d      	add	sp, #116	; 0x74
 800ace0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ace4:	b002      	add	sp, #8
 800ace6:	4770      	bx	lr
 800ace8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800acec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800acf0:	bf14      	ite	ne
 800acf2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800acf6:	4623      	moveq	r3, r4
 800acf8:	9304      	str	r3, [sp, #16]
 800acfa:	9307      	str	r3, [sp, #28]
 800acfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad00:	9002      	str	r0, [sp, #8]
 800ad02:	9006      	str	r0, [sp, #24]
 800ad04:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad0a:	ab21      	add	r3, sp, #132	; 0x84
 800ad0c:	a902      	add	r1, sp, #8
 800ad0e:	4628      	mov	r0, r5
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	f000 fbbd 	bl	800b490 <_svfiprintf_r>
 800ad16:	1c43      	adds	r3, r0, #1
 800ad18:	bfbc      	itt	lt
 800ad1a:	238b      	movlt	r3, #139	; 0x8b
 800ad1c:	602b      	strlt	r3, [r5, #0]
 800ad1e:	2c00      	cmp	r4, #0
 800ad20:	d0dd      	beq.n	800acde <sniprintf+0x16>
 800ad22:	9b02      	ldr	r3, [sp, #8]
 800ad24:	2200      	movs	r2, #0
 800ad26:	701a      	strb	r2, [r3, #0]
 800ad28:	e7d9      	b.n	800acde <sniprintf+0x16>
 800ad2a:	bf00      	nop
 800ad2c:	20001064 	.word	0x20001064

0800ad30 <strcat>:
 800ad30:	b510      	push	{r4, lr}
 800ad32:	4603      	mov	r3, r0
 800ad34:	781a      	ldrb	r2, [r3, #0]
 800ad36:	1c5c      	adds	r4, r3, #1
 800ad38:	b93a      	cbnz	r2, 800ad4a <strcat+0x1a>
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad40:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad44:	2a00      	cmp	r2, #0
 800ad46:	d1f9      	bne.n	800ad3c <strcat+0xc>
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	4623      	mov	r3, r4
 800ad4c:	e7f2      	b.n	800ad34 <strcat+0x4>
	...

0800ad50 <__swbuf_r>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	460e      	mov	r6, r1
 800ad54:	4614      	mov	r4, r2
 800ad56:	4605      	mov	r5, r0
 800ad58:	b118      	cbz	r0, 800ad62 <__swbuf_r+0x12>
 800ad5a:	6983      	ldr	r3, [r0, #24]
 800ad5c:	b90b      	cbnz	r3, 800ad62 <__swbuf_r+0x12>
 800ad5e:	f000 f9a7 	bl	800b0b0 <__sinit>
 800ad62:	4b21      	ldr	r3, [pc, #132]	; (800ade8 <__swbuf_r+0x98>)
 800ad64:	429c      	cmp	r4, r3
 800ad66:	d12a      	bne.n	800adbe <__swbuf_r+0x6e>
 800ad68:	686c      	ldr	r4, [r5, #4]
 800ad6a:	69a3      	ldr	r3, [r4, #24]
 800ad6c:	60a3      	str	r3, [r4, #8]
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	071a      	lsls	r2, r3, #28
 800ad72:	d52e      	bpl.n	800add2 <__swbuf_r+0x82>
 800ad74:	6923      	ldr	r3, [r4, #16]
 800ad76:	b363      	cbz	r3, 800add2 <__swbuf_r+0x82>
 800ad78:	6923      	ldr	r3, [r4, #16]
 800ad7a:	6820      	ldr	r0, [r4, #0]
 800ad7c:	1ac0      	subs	r0, r0, r3
 800ad7e:	6963      	ldr	r3, [r4, #20]
 800ad80:	b2f6      	uxtb	r6, r6
 800ad82:	4283      	cmp	r3, r0
 800ad84:	4637      	mov	r7, r6
 800ad86:	dc04      	bgt.n	800ad92 <__swbuf_r+0x42>
 800ad88:	4621      	mov	r1, r4
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f000 f926 	bl	800afdc <_fflush_r>
 800ad90:	bb28      	cbnz	r0, 800adde <__swbuf_r+0x8e>
 800ad92:	68a3      	ldr	r3, [r4, #8]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	60a3      	str	r3, [r4, #8]
 800ad98:	6823      	ldr	r3, [r4, #0]
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	6022      	str	r2, [r4, #0]
 800ad9e:	701e      	strb	r6, [r3, #0]
 800ada0:	6963      	ldr	r3, [r4, #20]
 800ada2:	3001      	adds	r0, #1
 800ada4:	4283      	cmp	r3, r0
 800ada6:	d004      	beq.n	800adb2 <__swbuf_r+0x62>
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	07db      	lsls	r3, r3, #31
 800adac:	d519      	bpl.n	800ade2 <__swbuf_r+0x92>
 800adae:	2e0a      	cmp	r6, #10
 800adb0:	d117      	bne.n	800ade2 <__swbuf_r+0x92>
 800adb2:	4621      	mov	r1, r4
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 f911 	bl	800afdc <_fflush_r>
 800adba:	b190      	cbz	r0, 800ade2 <__swbuf_r+0x92>
 800adbc:	e00f      	b.n	800adde <__swbuf_r+0x8e>
 800adbe:	4b0b      	ldr	r3, [pc, #44]	; (800adec <__swbuf_r+0x9c>)
 800adc0:	429c      	cmp	r4, r3
 800adc2:	d101      	bne.n	800adc8 <__swbuf_r+0x78>
 800adc4:	68ac      	ldr	r4, [r5, #8]
 800adc6:	e7d0      	b.n	800ad6a <__swbuf_r+0x1a>
 800adc8:	4b09      	ldr	r3, [pc, #36]	; (800adf0 <__swbuf_r+0xa0>)
 800adca:	429c      	cmp	r4, r3
 800adcc:	bf08      	it	eq
 800adce:	68ec      	ldreq	r4, [r5, #12]
 800add0:	e7cb      	b.n	800ad6a <__swbuf_r+0x1a>
 800add2:	4621      	mov	r1, r4
 800add4:	4628      	mov	r0, r5
 800add6:	f000 f80d 	bl	800adf4 <__swsetup_r>
 800adda:	2800      	cmp	r0, #0
 800addc:	d0cc      	beq.n	800ad78 <__swbuf_r+0x28>
 800adde:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ade2:	4638      	mov	r0, r7
 800ade4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ade6:	bf00      	nop
 800ade8:	0800c104 	.word	0x0800c104
 800adec:	0800c124 	.word	0x0800c124
 800adf0:	0800c0e4 	.word	0x0800c0e4

0800adf4 <__swsetup_r>:
 800adf4:	4b32      	ldr	r3, [pc, #200]	; (800aec0 <__swsetup_r+0xcc>)
 800adf6:	b570      	push	{r4, r5, r6, lr}
 800adf8:	681d      	ldr	r5, [r3, #0]
 800adfa:	4606      	mov	r6, r0
 800adfc:	460c      	mov	r4, r1
 800adfe:	b125      	cbz	r5, 800ae0a <__swsetup_r+0x16>
 800ae00:	69ab      	ldr	r3, [r5, #24]
 800ae02:	b913      	cbnz	r3, 800ae0a <__swsetup_r+0x16>
 800ae04:	4628      	mov	r0, r5
 800ae06:	f000 f953 	bl	800b0b0 <__sinit>
 800ae0a:	4b2e      	ldr	r3, [pc, #184]	; (800aec4 <__swsetup_r+0xd0>)
 800ae0c:	429c      	cmp	r4, r3
 800ae0e:	d10f      	bne.n	800ae30 <__swsetup_r+0x3c>
 800ae10:	686c      	ldr	r4, [r5, #4]
 800ae12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	0715      	lsls	r5, r2, #28
 800ae1a:	d42c      	bmi.n	800ae76 <__swsetup_r+0x82>
 800ae1c:	06d0      	lsls	r0, r2, #27
 800ae1e:	d411      	bmi.n	800ae44 <__swsetup_r+0x50>
 800ae20:	2209      	movs	r2, #9
 800ae22:	6032      	str	r2, [r6, #0]
 800ae24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae2e:	e03e      	b.n	800aeae <__swsetup_r+0xba>
 800ae30:	4b25      	ldr	r3, [pc, #148]	; (800aec8 <__swsetup_r+0xd4>)
 800ae32:	429c      	cmp	r4, r3
 800ae34:	d101      	bne.n	800ae3a <__swsetup_r+0x46>
 800ae36:	68ac      	ldr	r4, [r5, #8]
 800ae38:	e7eb      	b.n	800ae12 <__swsetup_r+0x1e>
 800ae3a:	4b24      	ldr	r3, [pc, #144]	; (800aecc <__swsetup_r+0xd8>)
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	bf08      	it	eq
 800ae40:	68ec      	ldreq	r4, [r5, #12]
 800ae42:	e7e6      	b.n	800ae12 <__swsetup_r+0x1e>
 800ae44:	0751      	lsls	r1, r2, #29
 800ae46:	d512      	bpl.n	800ae6e <__swsetup_r+0x7a>
 800ae48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae4a:	b141      	cbz	r1, 800ae5e <__swsetup_r+0x6a>
 800ae4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae50:	4299      	cmp	r1, r3
 800ae52:	d002      	beq.n	800ae5a <__swsetup_r+0x66>
 800ae54:	4630      	mov	r0, r6
 800ae56:	f000 fa19 	bl	800b28c <_free_r>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	6363      	str	r3, [r4, #52]	; 0x34
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae64:	81a3      	strh	r3, [r4, #12]
 800ae66:	2300      	movs	r3, #0
 800ae68:	6063      	str	r3, [r4, #4]
 800ae6a:	6923      	ldr	r3, [r4, #16]
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	f043 0308 	orr.w	r3, r3, #8
 800ae74:	81a3      	strh	r3, [r4, #12]
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	b94b      	cbnz	r3, 800ae8e <__swsetup_r+0x9a>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae84:	d003      	beq.n	800ae8e <__swsetup_r+0x9a>
 800ae86:	4621      	mov	r1, r4
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f000 f9bf 	bl	800b20c <__smakebuf_r>
 800ae8e:	89a2      	ldrh	r2, [r4, #12]
 800ae90:	f012 0301 	ands.w	r3, r2, #1
 800ae94:	d00c      	beq.n	800aeb0 <__swsetup_r+0xbc>
 800ae96:	2300      	movs	r3, #0
 800ae98:	60a3      	str	r3, [r4, #8]
 800ae9a:	6963      	ldr	r3, [r4, #20]
 800ae9c:	425b      	negs	r3, r3
 800ae9e:	61a3      	str	r3, [r4, #24]
 800aea0:	6923      	ldr	r3, [r4, #16]
 800aea2:	b953      	cbnz	r3, 800aeba <__swsetup_r+0xc6>
 800aea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800aeac:	d1ba      	bne.n	800ae24 <__swsetup_r+0x30>
 800aeae:	bd70      	pop	{r4, r5, r6, pc}
 800aeb0:	0792      	lsls	r2, r2, #30
 800aeb2:	bf58      	it	pl
 800aeb4:	6963      	ldrpl	r3, [r4, #20]
 800aeb6:	60a3      	str	r3, [r4, #8]
 800aeb8:	e7f2      	b.n	800aea0 <__swsetup_r+0xac>
 800aeba:	2000      	movs	r0, #0
 800aebc:	e7f7      	b.n	800aeae <__swsetup_r+0xba>
 800aebe:	bf00      	nop
 800aec0:	20001064 	.word	0x20001064
 800aec4:	0800c104 	.word	0x0800c104
 800aec8:	0800c124 	.word	0x0800c124
 800aecc:	0800c0e4 	.word	0x0800c0e4

0800aed0 <__sflush_r>:
 800aed0:	898a      	ldrh	r2, [r1, #12]
 800aed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed6:	4605      	mov	r5, r0
 800aed8:	0710      	lsls	r0, r2, #28
 800aeda:	460c      	mov	r4, r1
 800aedc:	d458      	bmi.n	800af90 <__sflush_r+0xc0>
 800aede:	684b      	ldr	r3, [r1, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	dc05      	bgt.n	800aef0 <__sflush_r+0x20>
 800aee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	dc02      	bgt.n	800aef0 <__sflush_r+0x20>
 800aeea:	2000      	movs	r0, #0
 800aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aef2:	2e00      	cmp	r6, #0
 800aef4:	d0f9      	beq.n	800aeea <__sflush_r+0x1a>
 800aef6:	2300      	movs	r3, #0
 800aef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aefc:	682f      	ldr	r7, [r5, #0]
 800aefe:	6a21      	ldr	r1, [r4, #32]
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	d032      	beq.n	800af6a <__sflush_r+0x9a>
 800af04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	075a      	lsls	r2, r3, #29
 800af0a:	d505      	bpl.n	800af18 <__sflush_r+0x48>
 800af0c:	6863      	ldr	r3, [r4, #4]
 800af0e:	1ac0      	subs	r0, r0, r3
 800af10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af12:	b10b      	cbz	r3, 800af18 <__sflush_r+0x48>
 800af14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af16:	1ac0      	subs	r0, r0, r3
 800af18:	2300      	movs	r3, #0
 800af1a:	4602      	mov	r2, r0
 800af1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af1e:	6a21      	ldr	r1, [r4, #32]
 800af20:	4628      	mov	r0, r5
 800af22:	47b0      	blx	r6
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	d106      	bne.n	800af38 <__sflush_r+0x68>
 800af2a:	6829      	ldr	r1, [r5, #0]
 800af2c:	291d      	cmp	r1, #29
 800af2e:	d848      	bhi.n	800afc2 <__sflush_r+0xf2>
 800af30:	4a29      	ldr	r2, [pc, #164]	; (800afd8 <__sflush_r+0x108>)
 800af32:	40ca      	lsrs	r2, r1
 800af34:	07d6      	lsls	r6, r2, #31
 800af36:	d544      	bpl.n	800afc2 <__sflush_r+0xf2>
 800af38:	2200      	movs	r2, #0
 800af3a:	6062      	str	r2, [r4, #4]
 800af3c:	04d9      	lsls	r1, r3, #19
 800af3e:	6922      	ldr	r2, [r4, #16]
 800af40:	6022      	str	r2, [r4, #0]
 800af42:	d504      	bpl.n	800af4e <__sflush_r+0x7e>
 800af44:	1c42      	adds	r2, r0, #1
 800af46:	d101      	bne.n	800af4c <__sflush_r+0x7c>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b903      	cbnz	r3, 800af4e <__sflush_r+0x7e>
 800af4c:	6560      	str	r0, [r4, #84]	; 0x54
 800af4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af50:	602f      	str	r7, [r5, #0]
 800af52:	2900      	cmp	r1, #0
 800af54:	d0c9      	beq.n	800aeea <__sflush_r+0x1a>
 800af56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af5a:	4299      	cmp	r1, r3
 800af5c:	d002      	beq.n	800af64 <__sflush_r+0x94>
 800af5e:	4628      	mov	r0, r5
 800af60:	f000 f994 	bl	800b28c <_free_r>
 800af64:	2000      	movs	r0, #0
 800af66:	6360      	str	r0, [r4, #52]	; 0x34
 800af68:	e7c0      	b.n	800aeec <__sflush_r+0x1c>
 800af6a:	2301      	movs	r3, #1
 800af6c:	4628      	mov	r0, r5
 800af6e:	47b0      	blx	r6
 800af70:	1c41      	adds	r1, r0, #1
 800af72:	d1c8      	bne.n	800af06 <__sflush_r+0x36>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0c5      	beq.n	800af06 <__sflush_r+0x36>
 800af7a:	2b1d      	cmp	r3, #29
 800af7c:	d001      	beq.n	800af82 <__sflush_r+0xb2>
 800af7e:	2b16      	cmp	r3, #22
 800af80:	d101      	bne.n	800af86 <__sflush_r+0xb6>
 800af82:	602f      	str	r7, [r5, #0]
 800af84:	e7b1      	b.n	800aeea <__sflush_r+0x1a>
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af8c:	81a3      	strh	r3, [r4, #12]
 800af8e:	e7ad      	b.n	800aeec <__sflush_r+0x1c>
 800af90:	690f      	ldr	r7, [r1, #16]
 800af92:	2f00      	cmp	r7, #0
 800af94:	d0a9      	beq.n	800aeea <__sflush_r+0x1a>
 800af96:	0793      	lsls	r3, r2, #30
 800af98:	680e      	ldr	r6, [r1, #0]
 800af9a:	bf08      	it	eq
 800af9c:	694b      	ldreq	r3, [r1, #20]
 800af9e:	600f      	str	r7, [r1, #0]
 800afa0:	bf18      	it	ne
 800afa2:	2300      	movne	r3, #0
 800afa4:	eba6 0807 	sub.w	r8, r6, r7
 800afa8:	608b      	str	r3, [r1, #8]
 800afaa:	f1b8 0f00 	cmp.w	r8, #0
 800afae:	dd9c      	ble.n	800aeea <__sflush_r+0x1a>
 800afb0:	4643      	mov	r3, r8
 800afb2:	463a      	mov	r2, r7
 800afb4:	6a21      	ldr	r1, [r4, #32]
 800afb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afb8:	4628      	mov	r0, r5
 800afba:	47b0      	blx	r6
 800afbc:	2800      	cmp	r0, #0
 800afbe:	dc06      	bgt.n	800afce <__sflush_r+0xfe>
 800afc0:	89a3      	ldrh	r3, [r4, #12]
 800afc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afc6:	81a3      	strh	r3, [r4, #12]
 800afc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afcc:	e78e      	b.n	800aeec <__sflush_r+0x1c>
 800afce:	4407      	add	r7, r0
 800afd0:	eba8 0800 	sub.w	r8, r8, r0
 800afd4:	e7e9      	b.n	800afaa <__sflush_r+0xda>
 800afd6:	bf00      	nop
 800afd8:	20400001 	.word	0x20400001

0800afdc <_fflush_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	690b      	ldr	r3, [r1, #16]
 800afe0:	4605      	mov	r5, r0
 800afe2:	460c      	mov	r4, r1
 800afe4:	b1db      	cbz	r3, 800b01e <_fflush_r+0x42>
 800afe6:	b118      	cbz	r0, 800aff0 <_fflush_r+0x14>
 800afe8:	6983      	ldr	r3, [r0, #24]
 800afea:	b90b      	cbnz	r3, 800aff0 <_fflush_r+0x14>
 800afec:	f000 f860 	bl	800b0b0 <__sinit>
 800aff0:	4b0c      	ldr	r3, [pc, #48]	; (800b024 <_fflush_r+0x48>)
 800aff2:	429c      	cmp	r4, r3
 800aff4:	d109      	bne.n	800b00a <_fflush_r+0x2e>
 800aff6:	686c      	ldr	r4, [r5, #4]
 800aff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affc:	b17b      	cbz	r3, 800b01e <_fflush_r+0x42>
 800affe:	4621      	mov	r1, r4
 800b000:	4628      	mov	r0, r5
 800b002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b006:	f7ff bf63 	b.w	800aed0 <__sflush_r>
 800b00a:	4b07      	ldr	r3, [pc, #28]	; (800b028 <_fflush_r+0x4c>)
 800b00c:	429c      	cmp	r4, r3
 800b00e:	d101      	bne.n	800b014 <_fflush_r+0x38>
 800b010:	68ac      	ldr	r4, [r5, #8]
 800b012:	e7f1      	b.n	800aff8 <_fflush_r+0x1c>
 800b014:	4b05      	ldr	r3, [pc, #20]	; (800b02c <_fflush_r+0x50>)
 800b016:	429c      	cmp	r4, r3
 800b018:	bf08      	it	eq
 800b01a:	68ec      	ldreq	r4, [r5, #12]
 800b01c:	e7ec      	b.n	800aff8 <_fflush_r+0x1c>
 800b01e:	2000      	movs	r0, #0
 800b020:	bd38      	pop	{r3, r4, r5, pc}
 800b022:	bf00      	nop
 800b024:	0800c104 	.word	0x0800c104
 800b028:	0800c124 	.word	0x0800c124
 800b02c:	0800c0e4 	.word	0x0800c0e4

0800b030 <std>:
 800b030:	2300      	movs	r3, #0
 800b032:	b510      	push	{r4, lr}
 800b034:	4604      	mov	r4, r0
 800b036:	e9c0 3300 	strd	r3, r3, [r0]
 800b03a:	6083      	str	r3, [r0, #8]
 800b03c:	8181      	strh	r1, [r0, #12]
 800b03e:	6643      	str	r3, [r0, #100]	; 0x64
 800b040:	81c2      	strh	r2, [r0, #14]
 800b042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b046:	6183      	str	r3, [r0, #24]
 800b048:	4619      	mov	r1, r3
 800b04a:	2208      	movs	r2, #8
 800b04c:	305c      	adds	r0, #92	; 0x5c
 800b04e:	f7ff fdcf 	bl	800abf0 <memset>
 800b052:	4b05      	ldr	r3, [pc, #20]	; (800b068 <std+0x38>)
 800b054:	6263      	str	r3, [r4, #36]	; 0x24
 800b056:	4b05      	ldr	r3, [pc, #20]	; (800b06c <std+0x3c>)
 800b058:	62a3      	str	r3, [r4, #40]	; 0x28
 800b05a:	4b05      	ldr	r3, [pc, #20]	; (800b070 <std+0x40>)
 800b05c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b05e:	4b05      	ldr	r3, [pc, #20]	; (800b074 <std+0x44>)
 800b060:	6224      	str	r4, [r4, #32]
 800b062:	6323      	str	r3, [r4, #48]	; 0x30
 800b064:	bd10      	pop	{r4, pc}
 800b066:	bf00      	nop
 800b068:	0800b9b1 	.word	0x0800b9b1
 800b06c:	0800b9d3 	.word	0x0800b9d3
 800b070:	0800ba0b 	.word	0x0800ba0b
 800b074:	0800ba2f 	.word	0x0800ba2f

0800b078 <_cleanup_r>:
 800b078:	4901      	ldr	r1, [pc, #4]	; (800b080 <_cleanup_r+0x8>)
 800b07a:	f000 b885 	b.w	800b188 <_fwalk_reent>
 800b07e:	bf00      	nop
 800b080:	0800afdd 	.word	0x0800afdd

0800b084 <__sfmoreglue>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	1e4a      	subs	r2, r1, #1
 800b088:	2568      	movs	r5, #104	; 0x68
 800b08a:	4355      	muls	r5, r2
 800b08c:	460e      	mov	r6, r1
 800b08e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b092:	f000 f949 	bl	800b328 <_malloc_r>
 800b096:	4604      	mov	r4, r0
 800b098:	b140      	cbz	r0, 800b0ac <__sfmoreglue+0x28>
 800b09a:	2100      	movs	r1, #0
 800b09c:	e9c0 1600 	strd	r1, r6, [r0]
 800b0a0:	300c      	adds	r0, #12
 800b0a2:	60a0      	str	r0, [r4, #8]
 800b0a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0a8:	f7ff fda2 	bl	800abf0 <memset>
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	bd70      	pop	{r4, r5, r6, pc}

0800b0b0 <__sinit>:
 800b0b0:	6983      	ldr	r3, [r0, #24]
 800b0b2:	b510      	push	{r4, lr}
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	bb33      	cbnz	r3, 800b106 <__sinit+0x56>
 800b0b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b0bc:	6503      	str	r3, [r0, #80]	; 0x50
 800b0be:	4b12      	ldr	r3, [pc, #72]	; (800b108 <__sinit+0x58>)
 800b0c0:	4a12      	ldr	r2, [pc, #72]	; (800b10c <__sinit+0x5c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6282      	str	r2, [r0, #40]	; 0x28
 800b0c6:	4298      	cmp	r0, r3
 800b0c8:	bf04      	itt	eq
 800b0ca:	2301      	moveq	r3, #1
 800b0cc:	6183      	streq	r3, [r0, #24]
 800b0ce:	f000 f81f 	bl	800b110 <__sfp>
 800b0d2:	6060      	str	r0, [r4, #4]
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f000 f81b 	bl	800b110 <__sfp>
 800b0da:	60a0      	str	r0, [r4, #8]
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f000 f817 	bl	800b110 <__sfp>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	60e0      	str	r0, [r4, #12]
 800b0e6:	2104      	movs	r1, #4
 800b0e8:	6860      	ldr	r0, [r4, #4]
 800b0ea:	f7ff ffa1 	bl	800b030 <std>
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	2109      	movs	r1, #9
 800b0f2:	68a0      	ldr	r0, [r4, #8]
 800b0f4:	f7ff ff9c 	bl	800b030 <std>
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	2112      	movs	r1, #18
 800b0fc:	68e0      	ldr	r0, [r4, #12]
 800b0fe:	f7ff ff97 	bl	800b030 <std>
 800b102:	2301      	movs	r3, #1
 800b104:	61a3      	str	r3, [r4, #24]
 800b106:	bd10      	pop	{r4, pc}
 800b108:	0800c0e0 	.word	0x0800c0e0
 800b10c:	0800b079 	.word	0x0800b079

0800b110 <__sfp>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	4b1b      	ldr	r3, [pc, #108]	; (800b180 <__sfp+0x70>)
 800b114:	681e      	ldr	r6, [r3, #0]
 800b116:	69b3      	ldr	r3, [r6, #24]
 800b118:	4607      	mov	r7, r0
 800b11a:	b913      	cbnz	r3, 800b122 <__sfp+0x12>
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7ff ffc7 	bl	800b0b0 <__sinit>
 800b122:	3648      	adds	r6, #72	; 0x48
 800b124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b128:	3b01      	subs	r3, #1
 800b12a:	d503      	bpl.n	800b134 <__sfp+0x24>
 800b12c:	6833      	ldr	r3, [r6, #0]
 800b12e:	b133      	cbz	r3, 800b13e <__sfp+0x2e>
 800b130:	6836      	ldr	r6, [r6, #0]
 800b132:	e7f7      	b.n	800b124 <__sfp+0x14>
 800b134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b138:	b16d      	cbz	r5, 800b156 <__sfp+0x46>
 800b13a:	3468      	adds	r4, #104	; 0x68
 800b13c:	e7f4      	b.n	800b128 <__sfp+0x18>
 800b13e:	2104      	movs	r1, #4
 800b140:	4638      	mov	r0, r7
 800b142:	f7ff ff9f 	bl	800b084 <__sfmoreglue>
 800b146:	6030      	str	r0, [r6, #0]
 800b148:	2800      	cmp	r0, #0
 800b14a:	d1f1      	bne.n	800b130 <__sfp+0x20>
 800b14c:	230c      	movs	r3, #12
 800b14e:	603b      	str	r3, [r7, #0]
 800b150:	4604      	mov	r4, r0
 800b152:	4620      	mov	r0, r4
 800b154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b156:	4b0b      	ldr	r3, [pc, #44]	; (800b184 <__sfp+0x74>)
 800b158:	6665      	str	r5, [r4, #100]	; 0x64
 800b15a:	e9c4 5500 	strd	r5, r5, [r4]
 800b15e:	60a5      	str	r5, [r4, #8]
 800b160:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b164:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b168:	2208      	movs	r2, #8
 800b16a:	4629      	mov	r1, r5
 800b16c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b170:	f7ff fd3e 	bl	800abf0 <memset>
 800b174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b17c:	e7e9      	b.n	800b152 <__sfp+0x42>
 800b17e:	bf00      	nop
 800b180:	0800c0e0 	.word	0x0800c0e0
 800b184:	ffff0001 	.word	0xffff0001

0800b188 <_fwalk_reent>:
 800b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b18c:	4680      	mov	r8, r0
 800b18e:	4689      	mov	r9, r1
 800b190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b194:	2600      	movs	r6, #0
 800b196:	b914      	cbnz	r4, 800b19e <_fwalk_reent+0x16>
 800b198:	4630      	mov	r0, r6
 800b19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b19e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b1a2:	3f01      	subs	r7, #1
 800b1a4:	d501      	bpl.n	800b1aa <_fwalk_reent+0x22>
 800b1a6:	6824      	ldr	r4, [r4, #0]
 800b1a8:	e7f5      	b.n	800b196 <_fwalk_reent+0xe>
 800b1aa:	89ab      	ldrh	r3, [r5, #12]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d907      	bls.n	800b1c0 <_fwalk_reent+0x38>
 800b1b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	d003      	beq.n	800b1c0 <_fwalk_reent+0x38>
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	47c8      	blx	r9
 800b1be:	4306      	orrs	r6, r0
 800b1c0:	3568      	adds	r5, #104	; 0x68
 800b1c2:	e7ee      	b.n	800b1a2 <_fwalk_reent+0x1a>

0800b1c4 <__swhatbuf_r>:
 800b1c4:	b570      	push	{r4, r5, r6, lr}
 800b1c6:	460e      	mov	r6, r1
 800b1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	b096      	sub	sp, #88	; 0x58
 800b1d0:	4614      	mov	r4, r2
 800b1d2:	461d      	mov	r5, r3
 800b1d4:	da07      	bge.n	800b1e6 <__swhatbuf_r+0x22>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	89b3      	ldrh	r3, [r6, #12]
 800b1dc:	061a      	lsls	r2, r3, #24
 800b1de:	d410      	bmi.n	800b202 <__swhatbuf_r+0x3e>
 800b1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1e4:	e00e      	b.n	800b204 <__swhatbuf_r+0x40>
 800b1e6:	466a      	mov	r2, sp
 800b1e8:	f000 fc48 	bl	800ba7c <_fstat_r>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	dbf2      	blt.n	800b1d6 <__swhatbuf_r+0x12>
 800b1f0:	9a01      	ldr	r2, [sp, #4]
 800b1f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1fa:	425a      	negs	r2, r3
 800b1fc:	415a      	adcs	r2, r3
 800b1fe:	602a      	str	r2, [r5, #0]
 800b200:	e7ee      	b.n	800b1e0 <__swhatbuf_r+0x1c>
 800b202:	2340      	movs	r3, #64	; 0x40
 800b204:	2000      	movs	r0, #0
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	b016      	add	sp, #88	; 0x58
 800b20a:	bd70      	pop	{r4, r5, r6, pc}

0800b20c <__smakebuf_r>:
 800b20c:	898b      	ldrh	r3, [r1, #12]
 800b20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b210:	079d      	lsls	r5, r3, #30
 800b212:	4606      	mov	r6, r0
 800b214:	460c      	mov	r4, r1
 800b216:	d507      	bpl.n	800b228 <__smakebuf_r+0x1c>
 800b218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	6123      	str	r3, [r4, #16]
 800b220:	2301      	movs	r3, #1
 800b222:	6163      	str	r3, [r4, #20]
 800b224:	b002      	add	sp, #8
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	ab01      	add	r3, sp, #4
 800b22a:	466a      	mov	r2, sp
 800b22c:	f7ff ffca 	bl	800b1c4 <__swhatbuf_r>
 800b230:	9900      	ldr	r1, [sp, #0]
 800b232:	4605      	mov	r5, r0
 800b234:	4630      	mov	r0, r6
 800b236:	f000 f877 	bl	800b328 <_malloc_r>
 800b23a:	b948      	cbnz	r0, 800b250 <__smakebuf_r+0x44>
 800b23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b240:	059a      	lsls	r2, r3, #22
 800b242:	d4ef      	bmi.n	800b224 <__smakebuf_r+0x18>
 800b244:	f023 0303 	bic.w	r3, r3, #3
 800b248:	f043 0302 	orr.w	r3, r3, #2
 800b24c:	81a3      	strh	r3, [r4, #12]
 800b24e:	e7e3      	b.n	800b218 <__smakebuf_r+0xc>
 800b250:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <__smakebuf_r+0x7c>)
 800b252:	62b3      	str	r3, [r6, #40]	; 0x28
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	6020      	str	r0, [r4, #0]
 800b258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	9b00      	ldr	r3, [sp, #0]
 800b260:	6163      	str	r3, [r4, #20]
 800b262:	9b01      	ldr	r3, [sp, #4]
 800b264:	6120      	str	r0, [r4, #16]
 800b266:	b15b      	cbz	r3, 800b280 <__smakebuf_r+0x74>
 800b268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b26c:	4630      	mov	r0, r6
 800b26e:	f000 fc17 	bl	800baa0 <_isatty_r>
 800b272:	b128      	cbz	r0, 800b280 <__smakebuf_r+0x74>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f023 0303 	bic.w	r3, r3, #3
 800b27a:	f043 0301 	orr.w	r3, r3, #1
 800b27e:	81a3      	strh	r3, [r4, #12]
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	431d      	orrs	r5, r3
 800b284:	81a5      	strh	r5, [r4, #12]
 800b286:	e7cd      	b.n	800b224 <__smakebuf_r+0x18>
 800b288:	0800b079 	.word	0x0800b079

0800b28c <_free_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4605      	mov	r5, r0
 800b290:	2900      	cmp	r1, #0
 800b292:	d045      	beq.n	800b320 <_free_r+0x94>
 800b294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b298:	1f0c      	subs	r4, r1, #4
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	bfb8      	it	lt
 800b29e:	18e4      	addlt	r4, r4, r3
 800b2a0:	f000 fc44 	bl	800bb2c <__malloc_lock>
 800b2a4:	4a1f      	ldr	r2, [pc, #124]	; (800b324 <_free_r+0x98>)
 800b2a6:	6813      	ldr	r3, [r2, #0]
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	b933      	cbnz	r3, 800b2ba <_free_r+0x2e>
 800b2ac:	6063      	str	r3, [r4, #4]
 800b2ae:	6014      	str	r4, [r2, #0]
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2b6:	f000 bc3a 	b.w	800bb2e <__malloc_unlock>
 800b2ba:	42a3      	cmp	r3, r4
 800b2bc:	d90c      	bls.n	800b2d8 <_free_r+0x4c>
 800b2be:	6821      	ldr	r1, [r4, #0]
 800b2c0:	1862      	adds	r2, r4, r1
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	bf04      	itt	eq
 800b2c6:	681a      	ldreq	r2, [r3, #0]
 800b2c8:	685b      	ldreq	r3, [r3, #4]
 800b2ca:	6063      	str	r3, [r4, #4]
 800b2cc:	bf04      	itt	eq
 800b2ce:	1852      	addeq	r2, r2, r1
 800b2d0:	6022      	streq	r2, [r4, #0]
 800b2d2:	6004      	str	r4, [r0, #0]
 800b2d4:	e7ec      	b.n	800b2b0 <_free_r+0x24>
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	b10a      	cbz	r2, 800b2e0 <_free_r+0x54>
 800b2dc:	42a2      	cmp	r2, r4
 800b2de:	d9fa      	bls.n	800b2d6 <_free_r+0x4a>
 800b2e0:	6819      	ldr	r1, [r3, #0]
 800b2e2:	1858      	adds	r0, r3, r1
 800b2e4:	42a0      	cmp	r0, r4
 800b2e6:	d10b      	bne.n	800b300 <_free_r+0x74>
 800b2e8:	6820      	ldr	r0, [r4, #0]
 800b2ea:	4401      	add	r1, r0
 800b2ec:	1858      	adds	r0, r3, r1
 800b2ee:	4282      	cmp	r2, r0
 800b2f0:	6019      	str	r1, [r3, #0]
 800b2f2:	d1dd      	bne.n	800b2b0 <_free_r+0x24>
 800b2f4:	6810      	ldr	r0, [r2, #0]
 800b2f6:	6852      	ldr	r2, [r2, #4]
 800b2f8:	605a      	str	r2, [r3, #4]
 800b2fa:	4401      	add	r1, r0
 800b2fc:	6019      	str	r1, [r3, #0]
 800b2fe:	e7d7      	b.n	800b2b0 <_free_r+0x24>
 800b300:	d902      	bls.n	800b308 <_free_r+0x7c>
 800b302:	230c      	movs	r3, #12
 800b304:	602b      	str	r3, [r5, #0]
 800b306:	e7d3      	b.n	800b2b0 <_free_r+0x24>
 800b308:	6820      	ldr	r0, [r4, #0]
 800b30a:	1821      	adds	r1, r4, r0
 800b30c:	428a      	cmp	r2, r1
 800b30e:	bf04      	itt	eq
 800b310:	6811      	ldreq	r1, [r2, #0]
 800b312:	6852      	ldreq	r2, [r2, #4]
 800b314:	6062      	str	r2, [r4, #4]
 800b316:	bf04      	itt	eq
 800b318:	1809      	addeq	r1, r1, r0
 800b31a:	6021      	streq	r1, [r4, #0]
 800b31c:	605c      	str	r4, [r3, #4]
 800b31e:	e7c7      	b.n	800b2b0 <_free_r+0x24>
 800b320:	bd38      	pop	{r3, r4, r5, pc}
 800b322:	bf00      	nop
 800b324:	200010fc 	.word	0x200010fc

0800b328 <_malloc_r>:
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	1ccd      	adds	r5, r1, #3
 800b32c:	f025 0503 	bic.w	r5, r5, #3
 800b330:	3508      	adds	r5, #8
 800b332:	2d0c      	cmp	r5, #12
 800b334:	bf38      	it	cc
 800b336:	250c      	movcc	r5, #12
 800b338:	2d00      	cmp	r5, #0
 800b33a:	4606      	mov	r6, r0
 800b33c:	db01      	blt.n	800b342 <_malloc_r+0x1a>
 800b33e:	42a9      	cmp	r1, r5
 800b340:	d903      	bls.n	800b34a <_malloc_r+0x22>
 800b342:	230c      	movs	r3, #12
 800b344:	6033      	str	r3, [r6, #0]
 800b346:	2000      	movs	r0, #0
 800b348:	bd70      	pop	{r4, r5, r6, pc}
 800b34a:	f000 fbef 	bl	800bb2c <__malloc_lock>
 800b34e:	4a21      	ldr	r2, [pc, #132]	; (800b3d4 <_malloc_r+0xac>)
 800b350:	6814      	ldr	r4, [r2, #0]
 800b352:	4621      	mov	r1, r4
 800b354:	b991      	cbnz	r1, 800b37c <_malloc_r+0x54>
 800b356:	4c20      	ldr	r4, [pc, #128]	; (800b3d8 <_malloc_r+0xb0>)
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	b91b      	cbnz	r3, 800b364 <_malloc_r+0x3c>
 800b35c:	4630      	mov	r0, r6
 800b35e:	f000 fb17 	bl	800b990 <_sbrk_r>
 800b362:	6020      	str	r0, [r4, #0]
 800b364:	4629      	mov	r1, r5
 800b366:	4630      	mov	r0, r6
 800b368:	f000 fb12 	bl	800b990 <_sbrk_r>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	d124      	bne.n	800b3ba <_malloc_r+0x92>
 800b370:	230c      	movs	r3, #12
 800b372:	6033      	str	r3, [r6, #0]
 800b374:	4630      	mov	r0, r6
 800b376:	f000 fbda 	bl	800bb2e <__malloc_unlock>
 800b37a:	e7e4      	b.n	800b346 <_malloc_r+0x1e>
 800b37c:	680b      	ldr	r3, [r1, #0]
 800b37e:	1b5b      	subs	r3, r3, r5
 800b380:	d418      	bmi.n	800b3b4 <_malloc_r+0x8c>
 800b382:	2b0b      	cmp	r3, #11
 800b384:	d90f      	bls.n	800b3a6 <_malloc_r+0x7e>
 800b386:	600b      	str	r3, [r1, #0]
 800b388:	50cd      	str	r5, [r1, r3]
 800b38a:	18cc      	adds	r4, r1, r3
 800b38c:	4630      	mov	r0, r6
 800b38e:	f000 fbce 	bl	800bb2e <__malloc_unlock>
 800b392:	f104 000b 	add.w	r0, r4, #11
 800b396:	1d23      	adds	r3, r4, #4
 800b398:	f020 0007 	bic.w	r0, r0, #7
 800b39c:	1ac3      	subs	r3, r0, r3
 800b39e:	d0d3      	beq.n	800b348 <_malloc_r+0x20>
 800b3a0:	425a      	negs	r2, r3
 800b3a2:	50e2      	str	r2, [r4, r3]
 800b3a4:	e7d0      	b.n	800b348 <_malloc_r+0x20>
 800b3a6:	428c      	cmp	r4, r1
 800b3a8:	684b      	ldr	r3, [r1, #4]
 800b3aa:	bf16      	itet	ne
 800b3ac:	6063      	strne	r3, [r4, #4]
 800b3ae:	6013      	streq	r3, [r2, #0]
 800b3b0:	460c      	movne	r4, r1
 800b3b2:	e7eb      	b.n	800b38c <_malloc_r+0x64>
 800b3b4:	460c      	mov	r4, r1
 800b3b6:	6849      	ldr	r1, [r1, #4]
 800b3b8:	e7cc      	b.n	800b354 <_malloc_r+0x2c>
 800b3ba:	1cc4      	adds	r4, r0, #3
 800b3bc:	f024 0403 	bic.w	r4, r4, #3
 800b3c0:	42a0      	cmp	r0, r4
 800b3c2:	d005      	beq.n	800b3d0 <_malloc_r+0xa8>
 800b3c4:	1a21      	subs	r1, r4, r0
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f000 fae2 	bl	800b990 <_sbrk_r>
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	d0cf      	beq.n	800b370 <_malloc_r+0x48>
 800b3d0:	6025      	str	r5, [r4, #0]
 800b3d2:	e7db      	b.n	800b38c <_malloc_r+0x64>
 800b3d4:	200010fc 	.word	0x200010fc
 800b3d8:	20001100 	.word	0x20001100

0800b3dc <__ssputs_r>:
 800b3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e0:	688e      	ldr	r6, [r1, #8]
 800b3e2:	429e      	cmp	r6, r3
 800b3e4:	4682      	mov	sl, r0
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	4690      	mov	r8, r2
 800b3ea:	4699      	mov	r9, r3
 800b3ec:	d837      	bhi.n	800b45e <__ssputs_r+0x82>
 800b3ee:	898a      	ldrh	r2, [r1, #12]
 800b3f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3f4:	d031      	beq.n	800b45a <__ssputs_r+0x7e>
 800b3f6:	6825      	ldr	r5, [r4, #0]
 800b3f8:	6909      	ldr	r1, [r1, #16]
 800b3fa:	1a6f      	subs	r7, r5, r1
 800b3fc:	6965      	ldr	r5, [r4, #20]
 800b3fe:	2302      	movs	r3, #2
 800b400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b404:	fb95 f5f3 	sdiv	r5, r5, r3
 800b408:	f109 0301 	add.w	r3, r9, #1
 800b40c:	443b      	add	r3, r7
 800b40e:	429d      	cmp	r5, r3
 800b410:	bf38      	it	cc
 800b412:	461d      	movcc	r5, r3
 800b414:	0553      	lsls	r3, r2, #21
 800b416:	d530      	bpl.n	800b47a <__ssputs_r+0x9e>
 800b418:	4629      	mov	r1, r5
 800b41a:	f7ff ff85 	bl	800b328 <_malloc_r>
 800b41e:	4606      	mov	r6, r0
 800b420:	b950      	cbnz	r0, 800b438 <__ssputs_r+0x5c>
 800b422:	230c      	movs	r3, #12
 800b424:	f8ca 3000 	str.w	r3, [sl]
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b42e:	81a3      	strh	r3, [r4, #12]
 800b430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b438:	463a      	mov	r2, r7
 800b43a:	6921      	ldr	r1, [r4, #16]
 800b43c:	f000 fb52 	bl	800bae4 <memcpy>
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	6126      	str	r6, [r4, #16]
 800b44e:	6165      	str	r5, [r4, #20]
 800b450:	443e      	add	r6, r7
 800b452:	1bed      	subs	r5, r5, r7
 800b454:	6026      	str	r6, [r4, #0]
 800b456:	60a5      	str	r5, [r4, #8]
 800b458:	464e      	mov	r6, r9
 800b45a:	454e      	cmp	r6, r9
 800b45c:	d900      	bls.n	800b460 <__ssputs_r+0x84>
 800b45e:	464e      	mov	r6, r9
 800b460:	4632      	mov	r2, r6
 800b462:	4641      	mov	r1, r8
 800b464:	6820      	ldr	r0, [r4, #0]
 800b466:	f000 fb48 	bl	800bafa <memmove>
 800b46a:	68a3      	ldr	r3, [r4, #8]
 800b46c:	1b9b      	subs	r3, r3, r6
 800b46e:	60a3      	str	r3, [r4, #8]
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	441e      	add	r6, r3
 800b474:	6026      	str	r6, [r4, #0]
 800b476:	2000      	movs	r0, #0
 800b478:	e7dc      	b.n	800b434 <__ssputs_r+0x58>
 800b47a:	462a      	mov	r2, r5
 800b47c:	f000 fb58 	bl	800bb30 <_realloc_r>
 800b480:	4606      	mov	r6, r0
 800b482:	2800      	cmp	r0, #0
 800b484:	d1e2      	bne.n	800b44c <__ssputs_r+0x70>
 800b486:	6921      	ldr	r1, [r4, #16]
 800b488:	4650      	mov	r0, sl
 800b48a:	f7ff feff 	bl	800b28c <_free_r>
 800b48e:	e7c8      	b.n	800b422 <__ssputs_r+0x46>

0800b490 <_svfiprintf_r>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	461d      	mov	r5, r3
 800b496:	898b      	ldrh	r3, [r1, #12]
 800b498:	061f      	lsls	r7, r3, #24
 800b49a:	b09d      	sub	sp, #116	; 0x74
 800b49c:	4680      	mov	r8, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	4616      	mov	r6, r2
 800b4a2:	d50f      	bpl.n	800b4c4 <_svfiprintf_r+0x34>
 800b4a4:	690b      	ldr	r3, [r1, #16]
 800b4a6:	b96b      	cbnz	r3, 800b4c4 <_svfiprintf_r+0x34>
 800b4a8:	2140      	movs	r1, #64	; 0x40
 800b4aa:	f7ff ff3d 	bl	800b328 <_malloc_r>
 800b4ae:	6020      	str	r0, [r4, #0]
 800b4b0:	6120      	str	r0, [r4, #16]
 800b4b2:	b928      	cbnz	r0, 800b4c0 <_svfiprintf_r+0x30>
 800b4b4:	230c      	movs	r3, #12
 800b4b6:	f8c8 3000 	str.w	r3, [r8]
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4be:	e0c8      	b.n	800b652 <_svfiprintf_r+0x1c2>
 800b4c0:	2340      	movs	r3, #64	; 0x40
 800b4c2:	6163      	str	r3, [r4, #20]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c8:	2320      	movs	r3, #32
 800b4ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4ce:	2330      	movs	r3, #48	; 0x30
 800b4d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4d4:	9503      	str	r5, [sp, #12]
 800b4d6:	f04f 0b01 	mov.w	fp, #1
 800b4da:	4637      	mov	r7, r6
 800b4dc:	463d      	mov	r5, r7
 800b4de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b4e2:	b10b      	cbz	r3, 800b4e8 <_svfiprintf_r+0x58>
 800b4e4:	2b25      	cmp	r3, #37	; 0x25
 800b4e6:	d13e      	bne.n	800b566 <_svfiprintf_r+0xd6>
 800b4e8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b4ec:	d00b      	beq.n	800b506 <_svfiprintf_r+0x76>
 800b4ee:	4653      	mov	r3, sl
 800b4f0:	4632      	mov	r2, r6
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	f7ff ff71 	bl	800b3dc <__ssputs_r>
 800b4fa:	3001      	adds	r0, #1
 800b4fc:	f000 80a4 	beq.w	800b648 <_svfiprintf_r+0x1b8>
 800b500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b502:	4453      	add	r3, sl
 800b504:	9309      	str	r3, [sp, #36]	; 0x24
 800b506:	783b      	ldrb	r3, [r7, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 809d 	beq.w	800b648 <_svfiprintf_r+0x1b8>
 800b50e:	2300      	movs	r3, #0
 800b510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b518:	9304      	str	r3, [sp, #16]
 800b51a:	9307      	str	r3, [sp, #28]
 800b51c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b520:	931a      	str	r3, [sp, #104]	; 0x68
 800b522:	462f      	mov	r7, r5
 800b524:	2205      	movs	r2, #5
 800b526:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b52a:	4850      	ldr	r0, [pc, #320]	; (800b66c <_svfiprintf_r+0x1dc>)
 800b52c:	f7f4 fe78 	bl	8000220 <memchr>
 800b530:	9b04      	ldr	r3, [sp, #16]
 800b532:	b9d0      	cbnz	r0, 800b56a <_svfiprintf_r+0xda>
 800b534:	06d9      	lsls	r1, r3, #27
 800b536:	bf44      	itt	mi
 800b538:	2220      	movmi	r2, #32
 800b53a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b53e:	071a      	lsls	r2, r3, #28
 800b540:	bf44      	itt	mi
 800b542:	222b      	movmi	r2, #43	; 0x2b
 800b544:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b548:	782a      	ldrb	r2, [r5, #0]
 800b54a:	2a2a      	cmp	r2, #42	; 0x2a
 800b54c:	d015      	beq.n	800b57a <_svfiprintf_r+0xea>
 800b54e:	9a07      	ldr	r2, [sp, #28]
 800b550:	462f      	mov	r7, r5
 800b552:	2000      	movs	r0, #0
 800b554:	250a      	movs	r5, #10
 800b556:	4639      	mov	r1, r7
 800b558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b55c:	3b30      	subs	r3, #48	; 0x30
 800b55e:	2b09      	cmp	r3, #9
 800b560:	d94d      	bls.n	800b5fe <_svfiprintf_r+0x16e>
 800b562:	b1b8      	cbz	r0, 800b594 <_svfiprintf_r+0x104>
 800b564:	e00f      	b.n	800b586 <_svfiprintf_r+0xf6>
 800b566:	462f      	mov	r7, r5
 800b568:	e7b8      	b.n	800b4dc <_svfiprintf_r+0x4c>
 800b56a:	4a40      	ldr	r2, [pc, #256]	; (800b66c <_svfiprintf_r+0x1dc>)
 800b56c:	1a80      	subs	r0, r0, r2
 800b56e:	fa0b f000 	lsl.w	r0, fp, r0
 800b572:	4318      	orrs	r0, r3
 800b574:	9004      	str	r0, [sp, #16]
 800b576:	463d      	mov	r5, r7
 800b578:	e7d3      	b.n	800b522 <_svfiprintf_r+0x92>
 800b57a:	9a03      	ldr	r2, [sp, #12]
 800b57c:	1d11      	adds	r1, r2, #4
 800b57e:	6812      	ldr	r2, [r2, #0]
 800b580:	9103      	str	r1, [sp, #12]
 800b582:	2a00      	cmp	r2, #0
 800b584:	db01      	blt.n	800b58a <_svfiprintf_r+0xfa>
 800b586:	9207      	str	r2, [sp, #28]
 800b588:	e004      	b.n	800b594 <_svfiprintf_r+0x104>
 800b58a:	4252      	negs	r2, r2
 800b58c:	f043 0302 	orr.w	r3, r3, #2
 800b590:	9207      	str	r2, [sp, #28]
 800b592:	9304      	str	r3, [sp, #16]
 800b594:	783b      	ldrb	r3, [r7, #0]
 800b596:	2b2e      	cmp	r3, #46	; 0x2e
 800b598:	d10c      	bne.n	800b5b4 <_svfiprintf_r+0x124>
 800b59a:	787b      	ldrb	r3, [r7, #1]
 800b59c:	2b2a      	cmp	r3, #42	; 0x2a
 800b59e:	d133      	bne.n	800b608 <_svfiprintf_r+0x178>
 800b5a0:	9b03      	ldr	r3, [sp, #12]
 800b5a2:	1d1a      	adds	r2, r3, #4
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	9203      	str	r2, [sp, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	bfb8      	it	lt
 800b5ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b5b0:	3702      	adds	r7, #2
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	4d2e      	ldr	r5, [pc, #184]	; (800b670 <_svfiprintf_r+0x1e0>)
 800b5b6:	7839      	ldrb	r1, [r7, #0]
 800b5b8:	2203      	movs	r2, #3
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f7f4 fe30 	bl	8000220 <memchr>
 800b5c0:	b138      	cbz	r0, 800b5d2 <_svfiprintf_r+0x142>
 800b5c2:	2340      	movs	r3, #64	; 0x40
 800b5c4:	1b40      	subs	r0, r0, r5
 800b5c6:	fa03 f000 	lsl.w	r0, r3, r0
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	4303      	orrs	r3, r0
 800b5ce:	3701      	adds	r7, #1
 800b5d0:	9304      	str	r3, [sp, #16]
 800b5d2:	7839      	ldrb	r1, [r7, #0]
 800b5d4:	4827      	ldr	r0, [pc, #156]	; (800b674 <_svfiprintf_r+0x1e4>)
 800b5d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5da:	2206      	movs	r2, #6
 800b5dc:	1c7e      	adds	r6, r7, #1
 800b5de:	f7f4 fe1f 	bl	8000220 <memchr>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d038      	beq.n	800b658 <_svfiprintf_r+0x1c8>
 800b5e6:	4b24      	ldr	r3, [pc, #144]	; (800b678 <_svfiprintf_r+0x1e8>)
 800b5e8:	bb13      	cbnz	r3, 800b630 <_svfiprintf_r+0x1a0>
 800b5ea:	9b03      	ldr	r3, [sp, #12]
 800b5ec:	3307      	adds	r3, #7
 800b5ee:	f023 0307 	bic.w	r3, r3, #7
 800b5f2:	3308      	adds	r3, #8
 800b5f4:	9303      	str	r3, [sp, #12]
 800b5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f8:	444b      	add	r3, r9
 800b5fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fc:	e76d      	b.n	800b4da <_svfiprintf_r+0x4a>
 800b5fe:	fb05 3202 	mla	r2, r5, r2, r3
 800b602:	2001      	movs	r0, #1
 800b604:	460f      	mov	r7, r1
 800b606:	e7a6      	b.n	800b556 <_svfiprintf_r+0xc6>
 800b608:	2300      	movs	r3, #0
 800b60a:	3701      	adds	r7, #1
 800b60c:	9305      	str	r3, [sp, #20]
 800b60e:	4619      	mov	r1, r3
 800b610:	250a      	movs	r5, #10
 800b612:	4638      	mov	r0, r7
 800b614:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b618:	3a30      	subs	r2, #48	; 0x30
 800b61a:	2a09      	cmp	r2, #9
 800b61c:	d903      	bls.n	800b626 <_svfiprintf_r+0x196>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0c8      	beq.n	800b5b4 <_svfiprintf_r+0x124>
 800b622:	9105      	str	r1, [sp, #20]
 800b624:	e7c6      	b.n	800b5b4 <_svfiprintf_r+0x124>
 800b626:	fb05 2101 	mla	r1, r5, r1, r2
 800b62a:	2301      	movs	r3, #1
 800b62c:	4607      	mov	r7, r0
 800b62e:	e7f0      	b.n	800b612 <_svfiprintf_r+0x182>
 800b630:	ab03      	add	r3, sp, #12
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	4622      	mov	r2, r4
 800b636:	4b11      	ldr	r3, [pc, #68]	; (800b67c <_svfiprintf_r+0x1ec>)
 800b638:	a904      	add	r1, sp, #16
 800b63a:	4640      	mov	r0, r8
 800b63c:	f3af 8000 	nop.w
 800b640:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b644:	4681      	mov	r9, r0
 800b646:	d1d6      	bne.n	800b5f6 <_svfiprintf_r+0x166>
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	065b      	lsls	r3, r3, #25
 800b64c:	f53f af35 	bmi.w	800b4ba <_svfiprintf_r+0x2a>
 800b650:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b652:	b01d      	add	sp, #116	; 0x74
 800b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b658:	ab03      	add	r3, sp, #12
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	4622      	mov	r2, r4
 800b65e:	4b07      	ldr	r3, [pc, #28]	; (800b67c <_svfiprintf_r+0x1ec>)
 800b660:	a904      	add	r1, sp, #16
 800b662:	4640      	mov	r0, r8
 800b664:	f000 f882 	bl	800b76c <_printf_i>
 800b668:	e7ea      	b.n	800b640 <_svfiprintf_r+0x1b0>
 800b66a:	bf00      	nop
 800b66c:	0800c144 	.word	0x0800c144
 800b670:	0800c14a 	.word	0x0800c14a
 800b674:	0800c14e 	.word	0x0800c14e
 800b678:	00000000 	.word	0x00000000
 800b67c:	0800b3dd 	.word	0x0800b3dd

0800b680 <_printf_common>:
 800b680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b684:	4691      	mov	r9, r2
 800b686:	461f      	mov	r7, r3
 800b688:	688a      	ldr	r2, [r1, #8]
 800b68a:	690b      	ldr	r3, [r1, #16]
 800b68c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b690:	4293      	cmp	r3, r2
 800b692:	bfb8      	it	lt
 800b694:	4613      	movlt	r3, r2
 800b696:	f8c9 3000 	str.w	r3, [r9]
 800b69a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b69e:	4606      	mov	r6, r0
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	b112      	cbz	r2, 800b6aa <_printf_common+0x2a>
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	f8c9 3000 	str.w	r3, [r9]
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	0699      	lsls	r1, r3, #26
 800b6ae:	bf42      	ittt	mi
 800b6b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b6b4:	3302      	addmi	r3, #2
 800b6b6:	f8c9 3000 	strmi.w	r3, [r9]
 800b6ba:	6825      	ldr	r5, [r4, #0]
 800b6bc:	f015 0506 	ands.w	r5, r5, #6
 800b6c0:	d107      	bne.n	800b6d2 <_printf_common+0x52>
 800b6c2:	f104 0a19 	add.w	sl, r4, #25
 800b6c6:	68e3      	ldr	r3, [r4, #12]
 800b6c8:	f8d9 2000 	ldr.w	r2, [r9]
 800b6cc:	1a9b      	subs	r3, r3, r2
 800b6ce:	42ab      	cmp	r3, r5
 800b6d0:	dc28      	bgt.n	800b724 <_printf_common+0xa4>
 800b6d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b6d6:	6822      	ldr	r2, [r4, #0]
 800b6d8:	3300      	adds	r3, #0
 800b6da:	bf18      	it	ne
 800b6dc:	2301      	movne	r3, #1
 800b6de:	0692      	lsls	r2, r2, #26
 800b6e0:	d42d      	bmi.n	800b73e <_printf_common+0xbe>
 800b6e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	47c0      	blx	r8
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d020      	beq.n	800b732 <_printf_common+0xb2>
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	68e5      	ldr	r5, [r4, #12]
 800b6f4:	f8d9 2000 	ldr.w	r2, [r9]
 800b6f8:	f003 0306 	and.w	r3, r3, #6
 800b6fc:	2b04      	cmp	r3, #4
 800b6fe:	bf08      	it	eq
 800b700:	1aad      	subeq	r5, r5, r2
 800b702:	68a3      	ldr	r3, [r4, #8]
 800b704:	6922      	ldr	r2, [r4, #16]
 800b706:	bf0c      	ite	eq
 800b708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b70c:	2500      	movne	r5, #0
 800b70e:	4293      	cmp	r3, r2
 800b710:	bfc4      	itt	gt
 800b712:	1a9b      	subgt	r3, r3, r2
 800b714:	18ed      	addgt	r5, r5, r3
 800b716:	f04f 0900 	mov.w	r9, #0
 800b71a:	341a      	adds	r4, #26
 800b71c:	454d      	cmp	r5, r9
 800b71e:	d11a      	bne.n	800b756 <_printf_common+0xd6>
 800b720:	2000      	movs	r0, #0
 800b722:	e008      	b.n	800b736 <_printf_common+0xb6>
 800b724:	2301      	movs	r3, #1
 800b726:	4652      	mov	r2, sl
 800b728:	4639      	mov	r1, r7
 800b72a:	4630      	mov	r0, r6
 800b72c:	47c0      	blx	r8
 800b72e:	3001      	adds	r0, #1
 800b730:	d103      	bne.n	800b73a <_printf_common+0xba>
 800b732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73a:	3501      	adds	r5, #1
 800b73c:	e7c3      	b.n	800b6c6 <_printf_common+0x46>
 800b73e:	18e1      	adds	r1, r4, r3
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	2030      	movs	r0, #48	; 0x30
 800b744:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b748:	4422      	add	r2, r4
 800b74a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b74e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b752:	3302      	adds	r3, #2
 800b754:	e7c5      	b.n	800b6e2 <_printf_common+0x62>
 800b756:	2301      	movs	r3, #1
 800b758:	4622      	mov	r2, r4
 800b75a:	4639      	mov	r1, r7
 800b75c:	4630      	mov	r0, r6
 800b75e:	47c0      	blx	r8
 800b760:	3001      	adds	r0, #1
 800b762:	d0e6      	beq.n	800b732 <_printf_common+0xb2>
 800b764:	f109 0901 	add.w	r9, r9, #1
 800b768:	e7d8      	b.n	800b71c <_printf_common+0x9c>
	...

0800b76c <_printf_i>:
 800b76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b770:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b774:	460c      	mov	r4, r1
 800b776:	7e09      	ldrb	r1, [r1, #24]
 800b778:	b085      	sub	sp, #20
 800b77a:	296e      	cmp	r1, #110	; 0x6e
 800b77c:	4617      	mov	r7, r2
 800b77e:	4606      	mov	r6, r0
 800b780:	4698      	mov	r8, r3
 800b782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b784:	f000 80b3 	beq.w	800b8ee <_printf_i+0x182>
 800b788:	d822      	bhi.n	800b7d0 <_printf_i+0x64>
 800b78a:	2963      	cmp	r1, #99	; 0x63
 800b78c:	d036      	beq.n	800b7fc <_printf_i+0x90>
 800b78e:	d80a      	bhi.n	800b7a6 <_printf_i+0x3a>
 800b790:	2900      	cmp	r1, #0
 800b792:	f000 80b9 	beq.w	800b908 <_printf_i+0x19c>
 800b796:	2958      	cmp	r1, #88	; 0x58
 800b798:	f000 8083 	beq.w	800b8a2 <_printf_i+0x136>
 800b79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b7a4:	e032      	b.n	800b80c <_printf_i+0xa0>
 800b7a6:	2964      	cmp	r1, #100	; 0x64
 800b7a8:	d001      	beq.n	800b7ae <_printf_i+0x42>
 800b7aa:	2969      	cmp	r1, #105	; 0x69
 800b7ac:	d1f6      	bne.n	800b79c <_printf_i+0x30>
 800b7ae:	6820      	ldr	r0, [r4, #0]
 800b7b0:	6813      	ldr	r3, [r2, #0]
 800b7b2:	0605      	lsls	r5, r0, #24
 800b7b4:	f103 0104 	add.w	r1, r3, #4
 800b7b8:	d52a      	bpl.n	800b810 <_printf_i+0xa4>
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6011      	str	r1, [r2, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	da03      	bge.n	800b7ca <_printf_i+0x5e>
 800b7c2:	222d      	movs	r2, #45	; 0x2d
 800b7c4:	425b      	negs	r3, r3
 800b7c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b7ca:	486f      	ldr	r0, [pc, #444]	; (800b988 <_printf_i+0x21c>)
 800b7cc:	220a      	movs	r2, #10
 800b7ce:	e039      	b.n	800b844 <_printf_i+0xd8>
 800b7d0:	2973      	cmp	r1, #115	; 0x73
 800b7d2:	f000 809d 	beq.w	800b910 <_printf_i+0x1a4>
 800b7d6:	d808      	bhi.n	800b7ea <_printf_i+0x7e>
 800b7d8:	296f      	cmp	r1, #111	; 0x6f
 800b7da:	d020      	beq.n	800b81e <_printf_i+0xb2>
 800b7dc:	2970      	cmp	r1, #112	; 0x70
 800b7de:	d1dd      	bne.n	800b79c <_printf_i+0x30>
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	f043 0320 	orr.w	r3, r3, #32
 800b7e6:	6023      	str	r3, [r4, #0]
 800b7e8:	e003      	b.n	800b7f2 <_printf_i+0x86>
 800b7ea:	2975      	cmp	r1, #117	; 0x75
 800b7ec:	d017      	beq.n	800b81e <_printf_i+0xb2>
 800b7ee:	2978      	cmp	r1, #120	; 0x78
 800b7f0:	d1d4      	bne.n	800b79c <_printf_i+0x30>
 800b7f2:	2378      	movs	r3, #120	; 0x78
 800b7f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7f8:	4864      	ldr	r0, [pc, #400]	; (800b98c <_printf_i+0x220>)
 800b7fa:	e055      	b.n	800b8a8 <_printf_i+0x13c>
 800b7fc:	6813      	ldr	r3, [r2, #0]
 800b7fe:	1d19      	adds	r1, r3, #4
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	6011      	str	r1, [r2, #0]
 800b804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b80c:	2301      	movs	r3, #1
 800b80e:	e08c      	b.n	800b92a <_printf_i+0x1be>
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6011      	str	r1, [r2, #0]
 800b814:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b818:	bf18      	it	ne
 800b81a:	b21b      	sxthne	r3, r3
 800b81c:	e7cf      	b.n	800b7be <_printf_i+0x52>
 800b81e:	6813      	ldr	r3, [r2, #0]
 800b820:	6825      	ldr	r5, [r4, #0]
 800b822:	1d18      	adds	r0, r3, #4
 800b824:	6010      	str	r0, [r2, #0]
 800b826:	0628      	lsls	r0, r5, #24
 800b828:	d501      	bpl.n	800b82e <_printf_i+0xc2>
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	e002      	b.n	800b834 <_printf_i+0xc8>
 800b82e:	0668      	lsls	r0, r5, #25
 800b830:	d5fb      	bpl.n	800b82a <_printf_i+0xbe>
 800b832:	881b      	ldrh	r3, [r3, #0]
 800b834:	4854      	ldr	r0, [pc, #336]	; (800b988 <_printf_i+0x21c>)
 800b836:	296f      	cmp	r1, #111	; 0x6f
 800b838:	bf14      	ite	ne
 800b83a:	220a      	movne	r2, #10
 800b83c:	2208      	moveq	r2, #8
 800b83e:	2100      	movs	r1, #0
 800b840:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b844:	6865      	ldr	r5, [r4, #4]
 800b846:	60a5      	str	r5, [r4, #8]
 800b848:	2d00      	cmp	r5, #0
 800b84a:	f2c0 8095 	blt.w	800b978 <_printf_i+0x20c>
 800b84e:	6821      	ldr	r1, [r4, #0]
 800b850:	f021 0104 	bic.w	r1, r1, #4
 800b854:	6021      	str	r1, [r4, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d13d      	bne.n	800b8d6 <_printf_i+0x16a>
 800b85a:	2d00      	cmp	r5, #0
 800b85c:	f040 808e 	bne.w	800b97c <_printf_i+0x210>
 800b860:	4665      	mov	r5, ip
 800b862:	2a08      	cmp	r2, #8
 800b864:	d10b      	bne.n	800b87e <_printf_i+0x112>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	07db      	lsls	r3, r3, #31
 800b86a:	d508      	bpl.n	800b87e <_printf_i+0x112>
 800b86c:	6923      	ldr	r3, [r4, #16]
 800b86e:	6862      	ldr	r2, [r4, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	bfde      	ittt	le
 800b874:	2330      	movle	r3, #48	; 0x30
 800b876:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b87a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b87e:	ebac 0305 	sub.w	r3, ip, r5
 800b882:	6123      	str	r3, [r4, #16]
 800b884:	f8cd 8000 	str.w	r8, [sp]
 800b888:	463b      	mov	r3, r7
 800b88a:	aa03      	add	r2, sp, #12
 800b88c:	4621      	mov	r1, r4
 800b88e:	4630      	mov	r0, r6
 800b890:	f7ff fef6 	bl	800b680 <_printf_common>
 800b894:	3001      	adds	r0, #1
 800b896:	d14d      	bne.n	800b934 <_printf_i+0x1c8>
 800b898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b89c:	b005      	add	sp, #20
 800b89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8a2:	4839      	ldr	r0, [pc, #228]	; (800b988 <_printf_i+0x21c>)
 800b8a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b8a8:	6813      	ldr	r3, [r2, #0]
 800b8aa:	6821      	ldr	r1, [r4, #0]
 800b8ac:	1d1d      	adds	r5, r3, #4
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	6015      	str	r5, [r2, #0]
 800b8b2:	060a      	lsls	r2, r1, #24
 800b8b4:	d50b      	bpl.n	800b8ce <_printf_i+0x162>
 800b8b6:	07ca      	lsls	r2, r1, #31
 800b8b8:	bf44      	itt	mi
 800b8ba:	f041 0120 	orrmi.w	r1, r1, #32
 800b8be:	6021      	strmi	r1, [r4, #0]
 800b8c0:	b91b      	cbnz	r3, 800b8ca <_printf_i+0x15e>
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	f022 0220 	bic.w	r2, r2, #32
 800b8c8:	6022      	str	r2, [r4, #0]
 800b8ca:	2210      	movs	r2, #16
 800b8cc:	e7b7      	b.n	800b83e <_printf_i+0xd2>
 800b8ce:	064d      	lsls	r5, r1, #25
 800b8d0:	bf48      	it	mi
 800b8d2:	b29b      	uxthmi	r3, r3
 800b8d4:	e7ef      	b.n	800b8b6 <_printf_i+0x14a>
 800b8d6:	4665      	mov	r5, ip
 800b8d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8dc:	fb02 3311 	mls	r3, r2, r1, r3
 800b8e0:	5cc3      	ldrb	r3, [r0, r3]
 800b8e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d1f5      	bne.n	800b8d8 <_printf_i+0x16c>
 800b8ec:	e7b9      	b.n	800b862 <_printf_i+0xf6>
 800b8ee:	6813      	ldr	r3, [r2, #0]
 800b8f0:	6825      	ldr	r5, [r4, #0]
 800b8f2:	6961      	ldr	r1, [r4, #20]
 800b8f4:	1d18      	adds	r0, r3, #4
 800b8f6:	6010      	str	r0, [r2, #0]
 800b8f8:	0628      	lsls	r0, r5, #24
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	d501      	bpl.n	800b902 <_printf_i+0x196>
 800b8fe:	6019      	str	r1, [r3, #0]
 800b900:	e002      	b.n	800b908 <_printf_i+0x19c>
 800b902:	066a      	lsls	r2, r5, #25
 800b904:	d5fb      	bpl.n	800b8fe <_printf_i+0x192>
 800b906:	8019      	strh	r1, [r3, #0]
 800b908:	2300      	movs	r3, #0
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	4665      	mov	r5, ip
 800b90e:	e7b9      	b.n	800b884 <_printf_i+0x118>
 800b910:	6813      	ldr	r3, [r2, #0]
 800b912:	1d19      	adds	r1, r3, #4
 800b914:	6011      	str	r1, [r2, #0]
 800b916:	681d      	ldr	r5, [r3, #0]
 800b918:	6862      	ldr	r2, [r4, #4]
 800b91a:	2100      	movs	r1, #0
 800b91c:	4628      	mov	r0, r5
 800b91e:	f7f4 fc7f 	bl	8000220 <memchr>
 800b922:	b108      	cbz	r0, 800b928 <_printf_i+0x1bc>
 800b924:	1b40      	subs	r0, r0, r5
 800b926:	6060      	str	r0, [r4, #4]
 800b928:	6863      	ldr	r3, [r4, #4]
 800b92a:	6123      	str	r3, [r4, #16]
 800b92c:	2300      	movs	r3, #0
 800b92e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b932:	e7a7      	b.n	800b884 <_printf_i+0x118>
 800b934:	6923      	ldr	r3, [r4, #16]
 800b936:	462a      	mov	r2, r5
 800b938:	4639      	mov	r1, r7
 800b93a:	4630      	mov	r0, r6
 800b93c:	47c0      	blx	r8
 800b93e:	3001      	adds	r0, #1
 800b940:	d0aa      	beq.n	800b898 <_printf_i+0x12c>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	079b      	lsls	r3, r3, #30
 800b946:	d413      	bmi.n	800b970 <_printf_i+0x204>
 800b948:	68e0      	ldr	r0, [r4, #12]
 800b94a:	9b03      	ldr	r3, [sp, #12]
 800b94c:	4298      	cmp	r0, r3
 800b94e:	bfb8      	it	lt
 800b950:	4618      	movlt	r0, r3
 800b952:	e7a3      	b.n	800b89c <_printf_i+0x130>
 800b954:	2301      	movs	r3, #1
 800b956:	464a      	mov	r2, r9
 800b958:	4639      	mov	r1, r7
 800b95a:	4630      	mov	r0, r6
 800b95c:	47c0      	blx	r8
 800b95e:	3001      	adds	r0, #1
 800b960:	d09a      	beq.n	800b898 <_printf_i+0x12c>
 800b962:	3501      	adds	r5, #1
 800b964:	68e3      	ldr	r3, [r4, #12]
 800b966:	9a03      	ldr	r2, [sp, #12]
 800b968:	1a9b      	subs	r3, r3, r2
 800b96a:	42ab      	cmp	r3, r5
 800b96c:	dcf2      	bgt.n	800b954 <_printf_i+0x1e8>
 800b96e:	e7eb      	b.n	800b948 <_printf_i+0x1dc>
 800b970:	2500      	movs	r5, #0
 800b972:	f104 0919 	add.w	r9, r4, #25
 800b976:	e7f5      	b.n	800b964 <_printf_i+0x1f8>
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1ac      	bne.n	800b8d6 <_printf_i+0x16a>
 800b97c:	7803      	ldrb	r3, [r0, #0]
 800b97e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b982:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b986:	e76c      	b.n	800b862 <_printf_i+0xf6>
 800b988:	0800c155 	.word	0x0800c155
 800b98c:	0800c166 	.word	0x0800c166

0800b990 <_sbrk_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	4c06      	ldr	r4, [pc, #24]	; (800b9ac <_sbrk_r+0x1c>)
 800b994:	2300      	movs	r3, #0
 800b996:	4605      	mov	r5, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	6023      	str	r3, [r4, #0]
 800b99c:	f7f8 f9c4 	bl	8003d28 <_sbrk>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_sbrk_r+0x1a>
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_sbrk_r+0x1a>
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	20001564 	.word	0x20001564

0800b9b0 <__sread>:
 800b9b0:	b510      	push	{r4, lr}
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b8:	f000 f8e0 	bl	800bb7c <_read_r>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	bfab      	itete	ge
 800b9c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9c4:	181b      	addge	r3, r3, r0
 800b9c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9ca:	bfac      	ite	ge
 800b9cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9ce:	81a3      	strhlt	r3, [r4, #12]
 800b9d0:	bd10      	pop	{r4, pc}

0800b9d2 <__swrite>:
 800b9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d6:	461f      	mov	r7, r3
 800b9d8:	898b      	ldrh	r3, [r1, #12]
 800b9da:	05db      	lsls	r3, r3, #23
 800b9dc:	4605      	mov	r5, r0
 800b9de:	460c      	mov	r4, r1
 800b9e0:	4616      	mov	r6, r2
 800b9e2:	d505      	bpl.n	800b9f0 <__swrite+0x1e>
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ec:	f000 f868 	bl	800bac0 <_lseek_r>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	463b      	mov	r3, r7
 800ba00:	4628      	mov	r0, r5
 800ba02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba06:	f000 b817 	b.w	800ba38 <_write_r>

0800ba0a <__sseek>:
 800ba0a:	b510      	push	{r4, lr}
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba12:	f000 f855 	bl	800bac0 <_lseek_r>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	bf15      	itete	ne
 800ba1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba26:	81a3      	strheq	r3, [r4, #12]
 800ba28:	bf18      	it	ne
 800ba2a:	81a3      	strhne	r3, [r4, #12]
 800ba2c:	bd10      	pop	{r4, pc}

0800ba2e <__sclose>:
 800ba2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba32:	f000 b813 	b.w	800ba5c <_close_r>
	...

0800ba38 <_write_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4c07      	ldr	r4, [pc, #28]	; (800ba58 <_write_r+0x20>)
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	4608      	mov	r0, r1
 800ba40:	4611      	mov	r1, r2
 800ba42:	2200      	movs	r2, #0
 800ba44:	6022      	str	r2, [r4, #0]
 800ba46:	461a      	mov	r2, r3
 800ba48:	f7f7 fdb9 	bl	80035be <_write>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d102      	bne.n	800ba56 <_write_r+0x1e>
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	b103      	cbz	r3, 800ba56 <_write_r+0x1e>
 800ba54:	602b      	str	r3, [r5, #0]
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	20001564 	.word	0x20001564

0800ba5c <_close_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4c06      	ldr	r4, [pc, #24]	; (800ba78 <_close_r+0x1c>)
 800ba60:	2300      	movs	r3, #0
 800ba62:	4605      	mov	r5, r0
 800ba64:	4608      	mov	r0, r1
 800ba66:	6023      	str	r3, [r4, #0]
 800ba68:	f7f8 f929 	bl	8003cbe <_close>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_close_r+0x1a>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_close_r+0x1a>
 800ba74:	602b      	str	r3, [r5, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	20001564 	.word	0x20001564

0800ba7c <_fstat_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4c07      	ldr	r4, [pc, #28]	; (800ba9c <_fstat_r+0x20>)
 800ba80:	2300      	movs	r3, #0
 800ba82:	4605      	mov	r5, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	4611      	mov	r1, r2
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	f7f8 f924 	bl	8003cd6 <_fstat>
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	d102      	bne.n	800ba98 <_fstat_r+0x1c>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	b103      	cbz	r3, 800ba98 <_fstat_r+0x1c>
 800ba96:	602b      	str	r3, [r5, #0]
 800ba98:	bd38      	pop	{r3, r4, r5, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20001564 	.word	0x20001564

0800baa0 <_isatty_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4c06      	ldr	r4, [pc, #24]	; (800babc <_isatty_r+0x1c>)
 800baa4:	2300      	movs	r3, #0
 800baa6:	4605      	mov	r5, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	6023      	str	r3, [r4, #0]
 800baac:	f7f8 f923 	bl	8003cf6 <_isatty>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_isatty_r+0x1a>
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	b103      	cbz	r3, 800baba <_isatty_r+0x1a>
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20001564 	.word	0x20001564

0800bac0 <_lseek_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4c07      	ldr	r4, [pc, #28]	; (800bae0 <_lseek_r+0x20>)
 800bac4:	4605      	mov	r5, r0
 800bac6:	4608      	mov	r0, r1
 800bac8:	4611      	mov	r1, r2
 800baca:	2200      	movs	r2, #0
 800bacc:	6022      	str	r2, [r4, #0]
 800bace:	461a      	mov	r2, r3
 800bad0:	f7f8 f91c 	bl	8003d0c <_lseek>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_lseek_r+0x1e>
 800bad8:	6823      	ldr	r3, [r4, #0]
 800bada:	b103      	cbz	r3, 800bade <_lseek_r+0x1e>
 800badc:	602b      	str	r3, [r5, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	20001564 	.word	0x20001564

0800bae4 <memcpy>:
 800bae4:	b510      	push	{r4, lr}
 800bae6:	1e43      	subs	r3, r0, #1
 800bae8:	440a      	add	r2, r1
 800baea:	4291      	cmp	r1, r2
 800baec:	d100      	bne.n	800baf0 <memcpy+0xc>
 800baee:	bd10      	pop	{r4, pc}
 800baf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baf8:	e7f7      	b.n	800baea <memcpy+0x6>

0800bafa <memmove>:
 800bafa:	4288      	cmp	r0, r1
 800bafc:	b510      	push	{r4, lr}
 800bafe:	eb01 0302 	add.w	r3, r1, r2
 800bb02:	d807      	bhi.n	800bb14 <memmove+0x1a>
 800bb04:	1e42      	subs	r2, r0, #1
 800bb06:	4299      	cmp	r1, r3
 800bb08:	d00a      	beq.n	800bb20 <memmove+0x26>
 800bb0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bb12:	e7f8      	b.n	800bb06 <memmove+0xc>
 800bb14:	4283      	cmp	r3, r0
 800bb16:	d9f5      	bls.n	800bb04 <memmove+0xa>
 800bb18:	1881      	adds	r1, r0, r2
 800bb1a:	1ad2      	subs	r2, r2, r3
 800bb1c:	42d3      	cmn	r3, r2
 800bb1e:	d100      	bne.n	800bb22 <memmove+0x28>
 800bb20:	bd10      	pop	{r4, pc}
 800bb22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb26:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bb2a:	e7f7      	b.n	800bb1c <memmove+0x22>

0800bb2c <__malloc_lock>:
 800bb2c:	4770      	bx	lr

0800bb2e <__malloc_unlock>:
 800bb2e:	4770      	bx	lr

0800bb30 <_realloc_r>:
 800bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb32:	4607      	mov	r7, r0
 800bb34:	4614      	mov	r4, r2
 800bb36:	460e      	mov	r6, r1
 800bb38:	b921      	cbnz	r1, 800bb44 <_realloc_r+0x14>
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb40:	f7ff bbf2 	b.w	800b328 <_malloc_r>
 800bb44:	b922      	cbnz	r2, 800bb50 <_realloc_r+0x20>
 800bb46:	f7ff fba1 	bl	800b28c <_free_r>
 800bb4a:	4625      	mov	r5, r4
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb50:	f000 f826 	bl	800bba0 <_malloc_usable_size_r>
 800bb54:	42a0      	cmp	r0, r4
 800bb56:	d20f      	bcs.n	800bb78 <_realloc_r+0x48>
 800bb58:	4621      	mov	r1, r4
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	f7ff fbe4 	bl	800b328 <_malloc_r>
 800bb60:	4605      	mov	r5, r0
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d0f2      	beq.n	800bb4c <_realloc_r+0x1c>
 800bb66:	4631      	mov	r1, r6
 800bb68:	4622      	mov	r2, r4
 800bb6a:	f7ff ffbb 	bl	800bae4 <memcpy>
 800bb6e:	4631      	mov	r1, r6
 800bb70:	4638      	mov	r0, r7
 800bb72:	f7ff fb8b 	bl	800b28c <_free_r>
 800bb76:	e7e9      	b.n	800bb4c <_realloc_r+0x1c>
 800bb78:	4635      	mov	r5, r6
 800bb7a:	e7e7      	b.n	800bb4c <_realloc_r+0x1c>

0800bb7c <_read_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4c07      	ldr	r4, [pc, #28]	; (800bb9c <_read_r+0x20>)
 800bb80:	4605      	mov	r5, r0
 800bb82:	4608      	mov	r0, r1
 800bb84:	4611      	mov	r1, r2
 800bb86:	2200      	movs	r2, #0
 800bb88:	6022      	str	r2, [r4, #0]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	f7f8 f87a 	bl	8003c84 <_read>
 800bb90:	1c43      	adds	r3, r0, #1
 800bb92:	d102      	bne.n	800bb9a <_read_r+0x1e>
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	b103      	cbz	r3, 800bb9a <_read_r+0x1e>
 800bb98:	602b      	str	r3, [r5, #0]
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	20001564 	.word	0x20001564

0800bba0 <_malloc_usable_size_r>:
 800bba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba4:	1f18      	subs	r0, r3, #4
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	bfbc      	itt	lt
 800bbaa:	580b      	ldrlt	r3, [r1, r0]
 800bbac:	18c0      	addlt	r0, r0, r3
 800bbae:	4770      	bx	lr

0800bbb0 <_init>:
 800bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb2:	bf00      	nop
 800bbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbb6:	bc08      	pop	{r3}
 800bbb8:	469e      	mov	lr, r3
 800bbba:	4770      	bx	lr

0800bbbc <_fini>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	bf00      	nop
 800bbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc2:	bc08      	pop	{r3}
 800bbc4:	469e      	mov	lr, r3
 800bbc6:	4770      	bx	lr
