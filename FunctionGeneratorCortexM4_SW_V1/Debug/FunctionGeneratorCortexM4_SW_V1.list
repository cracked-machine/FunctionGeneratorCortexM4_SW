
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a34  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001468  08012c18  08012c18  00022c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014080  08014080  00031e80  2**0
                  CONTENTS
  4 .ARM          00000000  08014080  08014080  00031e80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014080  08014080  00031e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014080  08014080  00024080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014084  08014084  00024084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e80  20000000  08014088  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20001e80  08015f08  00031e80  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  08015f08  0003294c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044a66  00000000  00000000  00031eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007734  00000000  00000000  00076916  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002230  00000000  00000000  0007e050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001de8  00000000  00000000  00080280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035313  00000000  00000000  00082068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002eefd  00000000  00000000  000b737b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012660c  00000000  00000000  000e6278  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020c884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009618  00000000  00000000  0020c900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e80 	.word	0x20001e80
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012bfc 	.word	0x08012bfc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e84 	.word	0x20001e84
 800021c:	08012bfc 	.word	0x08012bfc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00d f96a 	bl	800dfe8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08012c18 	.word	0x08012c18

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00d f99f 	bl	800e06a <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00d fdf5 	bl	800e91c <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d fbd7 	bl	800e4e8 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00d f946 	bl	800dfe8 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 ff60 	bl	8008c24 <HAL_Delay>

	  DM_RefreshScreen();
 8000d64:	f000 fb88 	bl	8001478 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00e fcd9 	bl	800f720 <puts>
#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08012c24 	.word	0x08012c24
 8000d78:	08012c34 	.word	0x08012c34

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 fecf 	bl	8004b24 <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4854      	ldr	r0, [pc, #336]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000d8e:	f00e fcc7 	bl	800f720 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 fec7 	bl	8004b24 <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 fdce 	bl	8003948 <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fdca 	bl	8003948 <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 fdc6 	bl	8003948 <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 fcad 	bl	800471c <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4845      	ldr	r0, [pc, #276]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000dca:	f00e fca9 	bl	800f720 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 fca5 	bl	800471c <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f8f6 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f002 f8f2 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f002 f8ee 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fd95 	bl	8004928 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <DM_UpdateDisplay+0x168>)
 8000e06:	f00e fc8b 	bl	800f720 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 fd8d 	bl	8004928 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fd04 	bl	800382c <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 fd00 	bl	800382c <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 fcfc 	bl	800382c <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 fc65 	bl	8004704 <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <DM_UpdateDisplay+0x16c>)
 8000e42:	f00e fc6d 	bl	800f720 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 fc5d 	bl	8004704 <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb5d 	bl	8001528 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fb59 	bl	8001528 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fb55 	bl	8001528 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fb51 	bl	8001528 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fe18 	bl	8003abc <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <DM_UpdateDisplay+0x170>)
 8000e94:	f00e fc44 	bl	800f720 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <DM_UpdateDisplay+0x174>)
 8000eb2:	f00d f899 	bl	800dfe8 <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop
		char encoder_value[50] = "";
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
		ILI9341_Draw_Text(encoder_value, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00a      	beq.n	8000ed8 <DM_UpdateDisplay+0x15c>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ec2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	22be      	movs	r2, #190	; 0xbe
 8000ed0:	210a      	movs	r1, #10
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ed4:	f00d f888 	bl	800dfe8 <ILI9341_Draw_Text>

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	08012c44 	.word	0x08012c44
 8000ee4:	08012c58 	.word	0x08012c58
 8000ee8:	08012c6c 	.word	0x08012c6c
 8000eec:	08012c80 	.word	0x08012c80
 8000ef0:	08012c94 	.word	0x08012c94
 8000ef4:	20001e9c 	.word	0x20001e9c

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b09f      	sub	sp, #124	; 0x7c
 8000efc:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f34:	23af      	movs	r3, #175	; 0xaf
 8000f36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f3a:	2346      	movs	r3, #70	; 0x46
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f52:	238a      	movs	r3, #138	; 0x8a
 8000f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f5e:	4bc4      	ldr	r3, [pc, #784]	; (8001270 <DM_DisplayFormattedOutput+0x378>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f70:	23a1      	movs	r3, #161	; 0xa1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f76:	2382      	movs	r3, #130	; 0x82
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f7c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f92:	460a      	mov	r2, r1
 8000f94:	2103      	movs	r1, #3
 8000f96:	48b7      	ldr	r0, [pc, #732]	; (8001274 <DM_DisplayFormattedOutput+0x37c>)
 8000f98:	f00d f826 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	48b0      	ldr	r0, [pc, #704]	; (8001278 <DM_DisplayFormattedOutput+0x380>)
 8000fb8:	f00d f816 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fbc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	48a9      	ldr	r0, [pc, #676]	; (800127c <DM_DisplayFormattedOutput+0x384>)
 8000fd8:	f00d f806 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fdc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	48a2      	ldr	r0, [pc, #648]	; (8001280 <DM_DisplayFormattedOutput+0x388>)
 8000ff8:	f00c fff6 	bl	800dfe8 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000ffc:	f004 fda4 	bl	8005b48 <SM_GetOutputInHertz>
 8001000:	ee10 3a10 	vmov	r3, s0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4a9b      	ldr	r2, [pc, #620]	; (8001284 <DM_DisplayFormattedOutput+0x38c>)
 8001018:	210f      	movs	r1, #15
 800101a:	f00e fb89 	bl	800f730 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800101e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001022:	b299      	uxth	r1, r3
 8001024:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001028:	b29c      	uxth	r4, r3
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	4622      	mov	r2, r4
 8001040:	f00c ffd2 	bl	800dfe8 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001044:	2000      	movs	r0, #0
 8001046:	f004 fd4d 	bl	8005ae4 <SM_GetOutputChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001050:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01d      	beq.n	8001094 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a86      	ldr	r2, [pc, #536]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 8001070:	2112      	movs	r1, #18
 8001072:	f00e fb5d 	bl	800f730 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8c 	bl	8000598 <__aeabi_f2d>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	f107 0014 	add.w	r0, r7, #20
 8001088:	e9cd 3400 	strd	r3, r4, [sp]
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <DM_DisplayFormattedOutput+0x394>)
 800108e:	2114      	movs	r1, #20
 8001090:	f00e fb4e 	bl	800f730 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001098:	b299      	uxth	r1, r3
 800109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800109e:	b29c      	uxth	r4, r3
 80010a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b4:	4622      	mov	r2, r4
 80010b6:	f00c ff97 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010be:	b299      	uxth	r1, r3
 80010c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 0014 	add.w	r0, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010da:	4622      	mov	r2, r4
 80010dc:	f00c ff84 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3380      	adds	r3, #128	; 0x80
 80010e8:	b299      	uxth	r1, r3
 80010ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010ee:	b298      	uxth	r0, r3
 80010f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001100:	4602      	mov	r2, r0
 8001102:	4863      	ldr	r0, [pc, #396]	; (8001290 <DM_DisplayFormattedOutput+0x398>)
 8001104:	f00c ff70 	bl	800dfe8 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001108:	f003 ff3c 	bl	8004f84 <BO_GetOutputBias>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <DM_DisplayFormattedOutput+0x222>
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	; 0x64
 8001118:	e00b      	b.n	8001132 <DM_DisplayFormattedOutput+0x23a>
 800111a:	f003 ff33 	bl	8004f84 <BO_GetOutputBias>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	f107 0008 	add.w	r0, r7, #8
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <DM_DisplayFormattedOutput+0x39c>)
 8001146:	210c      	movs	r1, #12
 8001148:	f00e faf2 	bl	800f730 <sniprintf>
	if(BO_GetBiasPolarity())
 800114c:	f003 feba 	bl	8004ec4 <BO_GetBiasPolarity>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 8001156:	4a50      	ldr	r2, [pc, #320]	; (8001298 <DM_DisplayFormattedOutput+0x3a0>)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f00e fb12 	bl	800f798 <strcat>
 8001174:	4604      	mov	r4, r0
 8001176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117a:	b299      	uxth	r1, r3
 800117c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001180:	b298      	uxth	r0, r3
 8001182:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001186:	b29b      	uxth	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001192:	4602      	mov	r2, r0
 8001194:	4620      	mov	r0, r4
 8001196:	f00c ff27 	bl	800dfe8 <ILI9341_Draw_Text>
 800119a:	e021      	b.n	80011e0 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 800119c:	4a3f      	ldr	r2, [pc, #252]	; (800129c <DM_DisplayFormattedOutput+0x3a4>)
 800119e:	463b      	mov	r3, r7
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	463b      	mov	r3, r7
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e faef 	bl	800f798 <strcat>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011c6:	b298      	uxth	r0, r3
 80011c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011d8:	4602      	mov	r2, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	f00c ff04 	bl	800dfe8 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	2103      	movs	r1, #3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <DM_DisplayFormattedOutput+0x3a8>)
 80011f6:	f00c fef7 	bl	800dfe8 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80011fa:	2000      	movs	r0, #0
 80011fc:	f004 fc72 	bl	8005ae4 <SM_GetOutputChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 800120c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001210:	2b06      	cmp	r3, #6
 8001212:	f200 8091 	bhi.w	8001338 <DM_DisplayFormattedOutput+0x440>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <DM_DisplayFormattedOutput+0x324>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001239 	.word	0x08001239
 8001220:	08001255 	.word	0x08001255
 8001224:	080012ad 	.word	0x080012ad
 8001228:	080012c9 	.word	0x080012c9
 800122c:	080012e5 	.word	0x080012e5
 8001230:	08001301 	.word	0x08001301
 8001234:	0800131d 	.word	0x0800131d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001238:	233c      	movs	r3, #60	; 0x3c
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <DM_DisplayFormattedOutput+0x3ac>)
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001248:	2203      	movs	r2, #3
 800124a:	218c      	movs	r1, #140	; 0x8c
 800124c:	2050      	movs	r0, #80	; 0x50
 800124e:	f00c fd27 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 8001252:	e071      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001254:	233c      	movs	r3, #60	; 0x3c
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <DM_DisplayFormattedOutput+0x3b0>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	23c8      	movs	r3, #200	; 0xc8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001264:	2203      	movs	r2, #3
 8001266:	21a0      	movs	r1, #160	; 0xa0
 8001268:	2050      	movs	r0, #80	; 0x50
 800126a:	f00c fd19 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 800126e:	e063      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
 8001270:	3a449ba6 	.word	0x3a449ba6
 8001274:	08012cb8 	.word	0x08012cb8
 8001278:	08012cc8 	.word	0x08012cc8
 800127c:	08012cd8 	.word	0x08012cd8
 8001280:	08012ce8 	.word	0x08012ce8
 8001284:	08012cf8 	.word	0x08012cf8
 8001288:	08012d08 	.word	0x08012d08
 800128c:	08012d14 	.word	0x08012d14
 8001290:	08012d20 	.word	0x08012d20
 8001294:	08012d28 	.word	0x08012d28
 8001298:	08012d48 	.word	0x08012d48
 800129c:	08012d4c 	.word	0x08012d4c
 80012a0:	08012d34 	.word	0x08012d34
 80012a4:	20000e9c 	.word	0x20000e9c
 80012a8:	20000f8c 	.word	0x20000f8c
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012ac:	233c      	movs	r3, #60	; 0x3c
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <DM_DisplayFormattedOutput+0x564>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	23c8      	movs	r3, #200	; 0xc8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012bc:	2203      	movs	r2, #3
 80012be:	21a0      	movs	r1, #160	; 0xa0
 80012c0:	2050      	movs	r0, #80	; 0x50
 80012c2:	f00c fced 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 80012c6:	e037      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012c8:	233c      	movs	r3, #60	; 0x3c
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	4b64      	ldr	r3, [pc, #400]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	23c8      	movs	r3, #200	; 0xc8
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012d8:	2203      	movs	r2, #3
 80012da:	21a0      	movs	r1, #160	; 0xa0
 80012dc:	2050      	movs	r0, #80	; 0x50
 80012de:	f00c fcdf 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 80012e2:	e029      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80012e4:	233c      	movs	r3, #60	; 0x3c
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	23c8      	movs	r3, #200	; 0xc8
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012f4:	2203      	movs	r2, #3
 80012f6:	21a0      	movs	r1, #160	; 0xa0
 80012f8:	2050      	movs	r0, #80	; 0x50
 80012fa:	f00c fcd1 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 80012fe:	e01b      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001300:	233c      	movs	r3, #60	; 0x3c
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	4b57      	ldr	r3, [pc, #348]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	23c8      	movs	r3, #200	; 0xc8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001310:	2203      	movs	r2, #3
 8001312:	21a0      	movs	r1, #160	; 0xa0
 8001314:	2050      	movs	r0, #80	; 0x50
 8001316:	f00c fcc3 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 800131a:	e00d      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800131c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001320:	b29b      	uxth	r3, r3
 8001322:	2200      	movs	r2, #0
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f240 23fd 	movw	r3, #765	; 0x2fd
 800132c:	22aa      	movs	r2, #170	; 0xaa
 800132e:	2150      	movs	r1, #80	; 0x50
 8001330:	484d      	ldr	r0, [pc, #308]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001332:	f00c fe59 	bl	800dfe8 <ILI9341_Draw_Text>
			break;
 8001336:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001338:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800133c:	b29b      	uxth	r3, r3
 800133e:	2200      	movs	r2, #0
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001348:	22aa      	movs	r2, #170	; 0xaa
 800134a:	21b4      	movs	r1, #180	; 0xb4
 800134c:	4847      	ldr	r0, [pc, #284]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 800134e:	f00c fe4b 	bl	800dfe8 <ILI9341_Draw_Text>
	eOutput_mode sync_output_func = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 8001352:	2001      	movs	r0, #1
 8001354:	f004 fbc6 	bl	8005ae4 <SM_GetOutputChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(sync_output_func)
 8001364:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001368:	2b06      	cmp	r3, #6
 800136a:	d873      	bhi.n	8001454 <DM_DisplayFormattedOutput+0x55c>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <DM_DisplayFormattedOutput+0x47c>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001391 	.word	0x08001391
 8001378:	080013ad 	.word	0x080013ad
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013e5 	.word	0x080013e5
 8001384:	08001401 	.word	0x08001401
 8001388:	0800141d 	.word	0x0800141d
 800138c:	08001439 	.word	0x08001439
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, SYNC_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001390:	233c      	movs	r3, #60	; 0x3c
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b36      	ldr	r3, [pc, #216]	; (8001470 <DM_DisplayFormattedOutput+0x578>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013a0:	2203      	movs	r2, #3
 80013a2:	218c      	movs	r1, #140	; 0x8c
 80013a4:	20f5      	movs	r0, #245	; 0xf5
 80013a6:	f00c fc7b 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 80013aa:	e053      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013ac:	233c      	movs	r3, #60	; 0x3c
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <DM_DisplayFormattedOutput+0x57c>)
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	23c8      	movs	r3, #200	; 0xc8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013bc:	2203      	movs	r2, #3
 80013be:	21a0      	movs	r1, #160	; 0xa0
 80013c0:	20f5      	movs	r0, #245	; 0xf5
 80013c2:	f00c fc6d 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 80013c6:	e045      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013c8:	233c      	movs	r3, #60	; 0x3c
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <DM_DisplayFormattedOutput+0x564>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	23c8      	movs	r3, #200	; 0xc8
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013d8:	2203      	movs	r2, #3
 80013da:	21a0      	movs	r1, #160	; 0xa0
 80013dc:	20f5      	movs	r0, #245	; 0xf5
 80013de:	f00c fc5f 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 80013e2:	e037      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80013e4:	233c      	movs	r3, #60	; 0x3c
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	23c8      	movs	r3, #200	; 0xc8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013f4:	2203      	movs	r2, #3
 80013f6:	21a0      	movs	r1, #160	; 0xa0
 80013f8:	20f5      	movs	r0, #245	; 0xf5
 80013fa:	f00c fc51 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 80013fe:	e029      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001400:	233c      	movs	r3, #60	; 0x3c
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	23c8      	movs	r3, #200	; 0xc8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001410:	2203      	movs	r2, #3
 8001412:	21a0      	movs	r1, #160	; 0xa0
 8001414:	20f5      	movs	r0, #245	; 0xf5
 8001416:	f00c fc43 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 800141a:	e01b      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800141c:	233c      	movs	r3, #60	; 0x3c
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	23c8      	movs	r3, #200	; 0xc8
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800142c:	2203      	movs	r2, #3
 800142e:	21a0      	movs	r1, #160	; 0xa0
 8001430:	20f5      	movs	r0, #245	; 0xf5
 8001432:	f00c fc35 	bl	800dca0 <ILI9341_Draw_Wave>
			break;
 8001436:	e00d      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, SYNC_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001438:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800143c:	b29b      	uxth	r3, r3
 800143e:	2200      	movs	r2, #0
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001448:	22aa      	movs	r2, #170	; 0xaa
 800144a:	21f5      	movs	r1, #245	; 0xf5
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 800144e:	f00c fdcb 	bl	800dfe8 <ILI9341_Draw_Text>
			break;
 8001452:	bf00      	nop
	}



}
 8001454:	bf00      	nop
 8001456:	376c      	adds	r7, #108	; 0x6c
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000cbc 	.word	0x20000cbc
 8001460:	20000dac 	.word	0x20000dac
 8001464:	2000107c 	.word	0x2000107c
 8001468:	08012d3c 	.word	0x08012d3c
 800146c:	08012d40 	.word	0x08012d40
 8001470:	20000e9c 	.word	0x20000e9c
 8001474:	20000f8c 	.word	0x20000f8c

08001478 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <DM_RefreshScreen+0x88>)
 8001480:	f00b fa34 	bl	800c8ec <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001484:	2000      	movs	r0, #0
 8001486:	f00d f82f 	bl	800e4e8 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 800148a:	2300      	movs	r3, #0
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	2302      	movs	r3, #2
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2328      	movs	r3, #40	; 0x28
 800149a:	2250      	movs	r2, #80	; 0x50
 800149c:	21c8      	movs	r1, #200	; 0xc8
 800149e:	2000      	movs	r0, #0
 80014a0:	f00c fc3f 	bl	800dd22 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014a4:	2300      	movs	r3, #0
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2302      	movs	r3, #2
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2328      	movs	r3, #40	; 0x28
 80014b4:	2250      	movs	r2, #80	; 0x50
 80014b6:	21c8      	movs	r1, #200	; 0xc8
 80014b8:	2050      	movs	r0, #80	; 0x50
 80014ba:	f00c fc32 	bl	800dd22 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014be:	2300      	movs	r3, #0
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2302      	movs	r3, #2
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2328      	movs	r3, #40	; 0x28
 80014ce:	2250      	movs	r2, #80	; 0x50
 80014d0:	21c8      	movs	r1, #200	; 0xc8
 80014d2:	20a0      	movs	r0, #160	; 0xa0
 80014d4:	f00c fc25 	bl	800dd22 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80014d8:	2300      	movs	r3, #0
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2302      	movs	r3, #2
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2328      	movs	r3, #40	; 0x28
 80014e8:	2250      	movs	r2, #80	; 0x50
 80014ea:	21c8      	movs	r1, #200	; 0xc8
 80014ec:	20f0      	movs	r0, #240	; 0xf0
 80014ee:	f00c fc18 	bl	800dd22 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <DM_RefreshScreen+0x88>)
 80014f4:	f00b f9c4 	bl	800c880 <HAL_TIM_Base_Start_IT>


}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000277c 	.word	0x2000277c

08001504 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <DM_SetErrorDebugMsg+0x1c>)
 8001510:	212d      	movs	r1, #45	; 0x2d
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <DM_SetErrorDebugMsg+0x20>)
 8001514:	f00e f90c 	bl	800f730 <sniprintf>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	08012dcc 	.word	0x08012dcc
 8001524:	20001e9c 	.word	0x20001e9c

08001528 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3b01      	subs	r3, #1
 8001536:	2b03      	cmp	r3, #3
 8001538:	d816      	bhi.n	8001568 <FreqMenu_DrawMenu+0x40>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <FreqMenu_DrawMenu+0x18>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001551 	.word	0x08001551
 8001544:	08001557 	.word	0x08001557
 8001548:	0800155d 	.word	0x0800155d
 800154c:	08001563 	.word	0x08001563
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001550:	f000 f810 	bl	8001574 <FreqMenu_DrawMainMenu>
			break;
 8001554:	e009      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001556:	f000 f849 	bl	80015ec <FreqMenu_DrawPresetMenu>
			break;
 800155a:	e006      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 800155c:	f001 faf4 	bl	8002b48 <FreqMenu_DrawAdjustMenu>
			break;
 8001560:	e003      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001562:	f001 fb07 	bl	8002b74 <FreqMenu_DrawSweepMenu>
			break;
 8001566:	e000      	b.n	800156a <FreqMenu_DrawMenu+0x42>

		default:
			break;
 8001568:	bf00      	nop

	}
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop

08001574 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800157a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2302      	movs	r3, #2
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	220a      	movs	r2, #10
 8001588:	2105      	movs	r1, #5
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <FreqMenu_DrawMainMenu+0x68>)
 800158c:	f00c fd2c 	bl	800dfe8 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 8001590:	f7ff fcb2 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001594:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2302      	movs	r3, #2
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	22d2      	movs	r2, #210	; 0xd2
 80015a2:	2105      	movs	r1, #5
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <FreqMenu_DrawMainMenu+0x6c>)
 80015a6:	f00c fd1f 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015aa:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2302      	movs	r3, #2
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	22d2      	movs	r2, #210	; 0xd2
 80015b8:	2157      	movs	r1, #87	; 0x57
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <FreqMenu_DrawMainMenu+0x70>)
 80015bc:	f00c fd14 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80015c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	2302      	movs	r3, #2
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	22d2      	movs	r2, #210	; 0xd2
 80015ce:	21ae      	movs	r1, #174	; 0xae
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <FreqMenu_DrawMainMenu+0x74>)
 80015d2:	f00c fd09 	bl	800dfe8 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	08012dd0 	.word	0x08012dd0
 80015e0:	08012ddc 	.word	0x08012ddc
 80015e4:	08012de4 	.word	0x08012de4
 80015e8:	08012dec 	.word	0x08012dec

080015ec <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2302      	movs	r3, #2
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	220a      	movs	r2, #10
 8001600:	2105      	movs	r1, #5
 8001602:	4886      	ldr	r0, [pc, #536]	; (800181c <FreqMenu_DrawPresetMenu+0x230>)
 8001604:	f00c fcf0 	bl	800dfe8 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001608:	2328      	movs	r3, #40	; 0x28
 800160a:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 800160c:	233c      	movs	r3, #60	; 0x3c
 800160e:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001610:	2350      	movs	r3, #80	; 0x50
 8001612:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001618:	2378      	movs	r3, #120	; 0x78
 800161a:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 800161c:	238c      	movs	r3, #140	; 0x8c
 800161e:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001624:	f003 fe70 	bl	8005308 <FreqO_GetFPresetObject>
 8001628:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f001 825d 	beq.w	8002aec <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f240 22ee 	movw	r2, #750	; 0x2ee
 800163a:	4293      	cmp	r3, r2
 800163c:	f000 849a 	beq.w	8001f74 <FreqMenu_DrawPresetMenu+0x988>
 8001640:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001644:	4293      	cmp	r3, r2
 8001646:	d817      	bhi.n	8001678 <FreqMenu_DrawPresetMenu+0x8c>
 8001648:	2b32      	cmp	r3, #50	; 0x32
 800164a:	f000 81b3 	beq.w	80019b4 <FreqMenu_DrawPresetMenu+0x3c8>
 800164e:	2b32      	cmp	r3, #50	; 0x32
 8001650:	d806      	bhi.n	8001660 <FreqMenu_DrawPresetMenu+0x74>
 8001652:	2b01      	cmp	r3, #1
 8001654:	d038      	beq.n	80016c8 <FreqMenu_DrawPresetMenu+0xdc>
 8001656:	2b0a      	cmp	r3, #10
 8001658:	f000 8102 	beq.w	8001860 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 800165c:	f001 ba52 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001660:	2bfa      	cmp	r3, #250	; 0xfa
 8001662:	f000 8317 	beq.w	8001c94 <FreqMenu_DrawPresetMenu+0x6a8>
 8001666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800166a:	f000 83d9 	beq.w	8001e20 <FreqMenu_DrawPresetMenu+0x834>
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	f000 8266 	beq.w	8001b40 <FreqMenu_DrawPresetMenu+0x554>
}
 8001674:	f001 ba46 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001678:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800167c:	4293      	cmp	r3, r2
 800167e:	f000 8758 	beq.w	8002532 <FreqMenu_DrawPresetMenu+0xf46>
 8001682:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001686:	4293      	cmp	r3, r2
 8001688:	d80f      	bhi.n	80016aa <FreqMenu_DrawPresetMenu+0xbe>
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	f000 85e0 	beq.w	8002254 <FreqMenu_DrawPresetMenu+0xc68>
 8001694:	f242 7210 	movw	r2, #10000	; 0x2710
 8001698:	4293      	cmp	r3, r2
 800169a:	f000 86a1 	beq.w	80023e0 <FreqMenu_DrawPresetMenu+0xdf4>
 800169e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a2:	f000 852d 	beq.w	8002100 <FreqMenu_DrawPresetMenu+0xb14>
}
 80016a6:	f001 ba2d 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016aa:	4a5d      	ldr	r2, [pc, #372]	; (8001820 <FreqMenu_DrawPresetMenu+0x234>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f001 80ae 	beq.w	800280e <FreqMenu_DrawPresetMenu+0x1222>
 80016b2:	4a5c      	ldr	r2, [pc, #368]	; (8001824 <FreqMenu_DrawPresetMenu+0x238>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	f001 816f 	beq.w	8002998 <FreqMenu_DrawPresetMenu+0x13ac>
 80016ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016be:	4293      	cmp	r3, r2
 80016c0:	f000 87fc 	beq.w	80026bc <FreqMenu_DrawPresetMenu+0x10d0>
}
 80016c4:	f001 ba1e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2302      	movs	r3, #2
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	4853      	ldr	r0, [pc, #332]	; (8001828 <FreqMenu_DrawPresetMenu+0x23c>)
 80016dc:	f00c fc84 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	2302      	movs	r3, #2
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016f0:	2105      	movs	r1, #5
 80016f2:	484e      	ldr	r0, [pc, #312]	; (800182c <FreqMenu_DrawPresetMenu+0x240>)
 80016f4:	f00c fc78 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	2302      	movs	r3, #2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001708:	2105      	movs	r1, #5
 800170a:	4849      	ldr	r0, [pc, #292]	; (8001830 <FreqMenu_DrawPresetMenu+0x244>)
 800170c:	f00c fc6c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001710:	7b3b      	ldrb	r3, [r7, #12]
 8001712:	b29a      	uxth	r2, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	2302      	movs	r3, #2
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001720:	2105      	movs	r1, #5
 8001722:	4844      	ldr	r0, [pc, #272]	; (8001834 <FreqMenu_DrawPresetMenu+0x248>)
 8001724:	f00c fc60 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001728:	7afb      	ldrb	r3, [r7, #11]
 800172a:	b29a      	uxth	r2, r3
 800172c:	2300      	movs	r3, #0
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	2302      	movs	r3, #2
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001738:	2105      	movs	r1, #5
 800173a:	483f      	ldr	r0, [pc, #252]	; (8001838 <FreqMenu_DrawPresetMenu+0x24c>)
 800173c:	f00c fc54 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001740:	7abb      	ldrb	r3, [r7, #10]
 8001742:	b29a      	uxth	r2, r3
 8001744:	2300      	movs	r3, #0
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2302      	movs	r3, #2
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001750:	2105      	movs	r1, #5
 8001752:	483a      	ldr	r0, [pc, #232]	; (800183c <FreqMenu_DrawPresetMenu+0x250>)
 8001754:	f00c fc48 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001758:	7a7b      	ldrb	r3, [r7, #9]
 800175a:	b29a      	uxth	r2, r3
 800175c:	2300      	movs	r3, #0
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	2302      	movs	r3, #2
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001768:	2105      	movs	r1, #5
 800176a:	4835      	ldr	r0, [pc, #212]	; (8001840 <FreqMenu_DrawPresetMenu+0x254>)
 800176c:	f00c fc3c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	b29a      	uxth	r2, r3
 8001774:	2300      	movs	r3, #0
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	2302      	movs	r3, #2
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001780:	2178      	movs	r1, #120	; 0x78
 8001782:	4830      	ldr	r0, [pc, #192]	; (8001844 <FreqMenu_DrawPresetMenu+0x258>)
 8001784:	f00c fc30 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	b29a      	uxth	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2302      	movs	r3, #2
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001798:	2178      	movs	r1, #120	; 0x78
 800179a:	482b      	ldr	r0, [pc, #172]	; (8001848 <FreqMenu_DrawPresetMenu+0x25c>)
 800179c:	f00c fc24 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	2300      	movs	r3, #0
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	2302      	movs	r3, #2
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b0:	2178      	movs	r1, #120	; 0x78
 80017b2:	4826      	ldr	r0, [pc, #152]	; (800184c <FreqMenu_DrawPresetMenu+0x260>)
 80017b4:	f00c fc18 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017b8:	7b3b      	ldrb	r3, [r7, #12]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	2302      	movs	r3, #2
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017c8:	2178      	movs	r1, #120	; 0x78
 80017ca:	4821      	ldr	r0, [pc, #132]	; (8001850 <FreqMenu_DrawPresetMenu+0x264>)
 80017cc:	f00c fc0c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	2302      	movs	r3, #2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e0:	2178      	movs	r1, #120	; 0x78
 80017e2:	481c      	ldr	r0, [pc, #112]	; (8001854 <FreqMenu_DrawPresetMenu+0x268>)
 80017e4:	f00c fc00 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017e8:	7abb      	ldrb	r3, [r7, #10]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017f8:	2178      	movs	r1, #120	; 0x78
 80017fa:	4817      	ldr	r0, [pc, #92]	; (8001858 <FreqMenu_DrawPresetMenu+0x26c>)
 80017fc:	f00c fbf4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001800:	7a7b      	ldrb	r3, [r7, #9]
 8001802:	b29a      	uxth	r2, r3
 8001804:	2300      	movs	r3, #0
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2302      	movs	r3, #2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001810:	2178      	movs	r1, #120	; 0x78
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <FreqMenu_DrawPresetMenu+0x270>)
 8001814:	f00c fbe8 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8001818:	f001 b974 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 800181c:	08012df4 	.word	0x08012df4
 8001820:	000124f8 	.word	0x000124f8
 8001824:	000186a0 	.word	0x000186a0
 8001828:	08012e08 	.word	0x08012e08
 800182c:	08012e10 	.word	0x08012e10
 8001830:	08012e18 	.word	0x08012e18
 8001834:	08012e20 	.word	0x08012e20
 8001838:	08012e28 	.word	0x08012e28
 800183c:	08012e30 	.word	0x08012e30
 8001840:	08012e38 	.word	0x08012e38
 8001844:	08012e40 	.word	0x08012e40
 8001848:	08012e48 	.word	0x08012e48
 800184c:	08012e50 	.word	0x08012e50
 8001850:	08012e58 	.word	0x08012e58
 8001854:	08012e60 	.word	0x08012e60
 8001858:	08012e68 	.word	0x08012e68
 800185c:	08012e70 	.word	0x08012e70
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	b29a      	uxth	r2, r3
 8001864:	2300      	movs	r3, #0
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2302      	movs	r3, #2
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001870:	2105      	movs	r1, #5
 8001872:	48a5      	ldr	r0, [pc, #660]	; (8001b08 <FreqMenu_DrawPresetMenu+0x51c>)
 8001874:	f00c fbb8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001878:	7bbb      	ldrb	r3, [r7, #14]
 800187a:	b29a      	uxth	r2, r3
 800187c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	2302      	movs	r3, #2
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	2105      	movs	r1, #5
 800188a:	48a0      	ldr	r0, [pc, #640]	; (8001b0c <FreqMenu_DrawPresetMenu+0x520>)
 800188c:	f00c fbac 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001890:	7b7b      	ldrb	r3, [r7, #13]
 8001892:	b29a      	uxth	r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2302      	movs	r3, #2
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018a0:	2105      	movs	r1, #5
 80018a2:	489b      	ldr	r0, [pc, #620]	; (8001b10 <FreqMenu_DrawPresetMenu+0x524>)
 80018a4:	f00c fba0 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018a8:	7b3b      	ldrb	r3, [r7, #12]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	2300      	movs	r3, #0
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2302      	movs	r3, #2
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018b8:	2105      	movs	r1, #5
 80018ba:	4896      	ldr	r0, [pc, #600]	; (8001b14 <FreqMenu_DrawPresetMenu+0x528>)
 80018bc:	f00c fb94 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018c0:	7afb      	ldrb	r3, [r7, #11]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2302      	movs	r3, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018d0:	2105      	movs	r1, #5
 80018d2:	4891      	ldr	r0, [pc, #580]	; (8001b18 <FreqMenu_DrawPresetMenu+0x52c>)
 80018d4:	f00c fb88 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d8:	7abb      	ldrb	r3, [r7, #10]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2302      	movs	r3, #2
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e8:	2105      	movs	r1, #5
 80018ea:	488c      	ldr	r0, [pc, #560]	; (8001b1c <FreqMenu_DrawPresetMenu+0x530>)
 80018ec:	f00c fb7c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018f0:	7a7b      	ldrb	r3, [r7, #9]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	2300      	movs	r3, #0
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2302      	movs	r3, #2
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001900:	2105      	movs	r1, #5
 8001902:	4887      	ldr	r0, [pc, #540]	; (8001b20 <FreqMenu_DrawPresetMenu+0x534>)
 8001904:	f00c fb70 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b29a      	uxth	r2, r3
 800190c:	2300      	movs	r3, #0
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2302      	movs	r3, #2
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001918:	2178      	movs	r1, #120	; 0x78
 800191a:	4882      	ldr	r0, [pc, #520]	; (8001b24 <FreqMenu_DrawPresetMenu+0x538>)
 800191c:	f00c fb64 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	b29a      	uxth	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	2302      	movs	r3, #2
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001930:	2178      	movs	r1, #120	; 0x78
 8001932:	487d      	ldr	r0, [pc, #500]	; (8001b28 <FreqMenu_DrawPresetMenu+0x53c>)
 8001934:	f00c fb58 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001938:	7b7b      	ldrb	r3, [r7, #13]
 800193a:	b29a      	uxth	r2, r3
 800193c:	2300      	movs	r3, #0
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	2302      	movs	r3, #2
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001948:	2178      	movs	r1, #120	; 0x78
 800194a:	4878      	ldr	r0, [pc, #480]	; (8001b2c <FreqMenu_DrawPresetMenu+0x540>)
 800194c:	f00c fb4c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001950:	7b3b      	ldrb	r3, [r7, #12]
 8001952:	b29a      	uxth	r2, r3
 8001954:	2300      	movs	r3, #0
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	2302      	movs	r3, #2
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001960:	2178      	movs	r1, #120	; 0x78
 8001962:	4873      	ldr	r0, [pc, #460]	; (8001b30 <FreqMenu_DrawPresetMenu+0x544>)
 8001964:	f00c fb40 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	b29a      	uxth	r2, r3
 800196c:	2300      	movs	r3, #0
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2302      	movs	r3, #2
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001978:	2178      	movs	r1, #120	; 0x78
 800197a:	486e      	ldr	r0, [pc, #440]	; (8001b34 <FreqMenu_DrawPresetMenu+0x548>)
 800197c:	f00c fb34 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001980:	7abb      	ldrb	r3, [r7, #10]
 8001982:	b29a      	uxth	r2, r3
 8001984:	2300      	movs	r3, #0
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001990:	2178      	movs	r1, #120	; 0x78
 8001992:	4869      	ldr	r0, [pc, #420]	; (8001b38 <FreqMenu_DrawPresetMenu+0x54c>)
 8001994:	f00c fb28 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001998:	7a7b      	ldrb	r3, [r7, #9]
 800199a:	b29a      	uxth	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a8:	2178      	movs	r1, #120	; 0x78
 80019aa:	4864      	ldr	r0, [pc, #400]	; (8001b3c <FreqMenu_DrawPresetMenu+0x550>)
 80019ac:	f00c fb1c 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 80019b0:	f001 b8a8 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2302      	movs	r3, #2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019c4:	2105      	movs	r1, #5
 80019c6:	4850      	ldr	r0, [pc, #320]	; (8001b08 <FreqMenu_DrawPresetMenu+0x51c>)
 80019c8:	f00c fb0e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019dc:	2105      	movs	r1, #5
 80019de:	484b      	ldr	r0, [pc, #300]	; (8001b0c <FreqMenu_DrawPresetMenu+0x520>)
 80019e0:	f00c fb02 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019e4:	7b7b      	ldrb	r3, [r7, #13]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	2302      	movs	r3, #2
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	2105      	movs	r1, #5
 80019f6:	4846      	ldr	r0, [pc, #280]	; (8001b10 <FreqMenu_DrawPresetMenu+0x524>)
 80019f8:	f00c faf6 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019fc:	7b3b      	ldrb	r3, [r7, #12]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	4841      	ldr	r0, [pc, #260]	; (8001b14 <FreqMenu_DrawPresetMenu+0x528>)
 8001a10:	f00c faea 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a24:	2105      	movs	r1, #5
 8001a26:	483c      	ldr	r0, [pc, #240]	; (8001b18 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a28:	f00c fade 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a2c:	7abb      	ldrb	r3, [r7, #10]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2302      	movs	r3, #2
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	4837      	ldr	r0, [pc, #220]	; (8001b1c <FreqMenu_DrawPresetMenu+0x530>)
 8001a40:	f00c fad2 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a54:	2105      	movs	r1, #5
 8001a56:	4832      	ldr	r0, [pc, #200]	; (8001b20 <FreqMenu_DrawPresetMenu+0x534>)
 8001a58:	f00c fac6 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2302      	movs	r3, #2
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a6c:	2178      	movs	r1, #120	; 0x78
 8001a6e:	482d      	ldr	r0, [pc, #180]	; (8001b24 <FreqMenu_DrawPresetMenu+0x538>)
 8001a70:	f00c faba 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a84:	2178      	movs	r1, #120	; 0x78
 8001a86:	4828      	ldr	r0, [pc, #160]	; (8001b28 <FreqMenu_DrawPresetMenu+0x53c>)
 8001a88:	f00c faae 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a8c:	7b7b      	ldrb	r3, [r7, #13]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2302      	movs	r3, #2
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a9c:	2178      	movs	r1, #120	; 0x78
 8001a9e:	4823      	ldr	r0, [pc, #140]	; (8001b2c <FreqMenu_DrawPresetMenu+0x540>)
 8001aa0:	f00c faa2 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa4:	7b3b      	ldrb	r3, [r7, #12]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	2302      	movs	r3, #2
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab4:	2178      	movs	r1, #120	; 0x78
 8001ab6:	481e      	ldr	r0, [pc, #120]	; (8001b30 <FreqMenu_DrawPresetMenu+0x544>)
 8001ab8:	f00c fa96 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001acc:	2178      	movs	r1, #120	; 0x78
 8001ace:	4819      	ldr	r0, [pc, #100]	; (8001b34 <FreqMenu_DrawPresetMenu+0x548>)
 8001ad0:	f00c fa8a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad4:	7abb      	ldrb	r3, [r7, #10]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2302      	movs	r3, #2
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae4:	2178      	movs	r1, #120	; 0x78
 8001ae6:	4814      	ldr	r0, [pc, #80]	; (8001b38 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ae8:	f00c fa7e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aec:	7a7b      	ldrb	r3, [r7, #9]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	2300      	movs	r3, #0
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	2302      	movs	r3, #2
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001afc:	2178      	movs	r1, #120	; 0x78
 8001afe:	480f      	ldr	r0, [pc, #60]	; (8001b3c <FreqMenu_DrawPresetMenu+0x550>)
 8001b00:	f00c fa72 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8001b04:	f000 bffe 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8001b08:	08012e08 	.word	0x08012e08
 8001b0c:	08012e10 	.word	0x08012e10
 8001b10:	08012e18 	.word	0x08012e18
 8001b14:	08012e20 	.word	0x08012e20
 8001b18:	08012e28 	.word	0x08012e28
 8001b1c:	08012e30 	.word	0x08012e30
 8001b20:	08012e38 	.word	0x08012e38
 8001b24:	08012e40 	.word	0x08012e40
 8001b28:	08012e48 	.word	0x08012e48
 8001b2c:	08012e50 	.word	0x08012e50
 8001b30:	08012e58 	.word	0x08012e58
 8001b34:	08012e60 	.word	0x08012e60
 8001b38:	08012e68 	.word	0x08012e68
 8001b3c:	08012e70 	.word	0x08012e70
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b50:	2105      	movs	r1, #5
 8001b52:	48a5      	ldr	r0, [pc, #660]	; (8001de8 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b54:	f00c fa48 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2302      	movs	r3, #2
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	48a0      	ldr	r0, [pc, #640]	; (8001dec <FreqMenu_DrawPresetMenu+0x800>)
 8001b6c:	f00c fa3c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b70:	7b7b      	ldrb	r3, [r7, #13]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b80:	2105      	movs	r1, #5
 8001b82:	489b      	ldr	r0, [pc, #620]	; (8001df0 <FreqMenu_DrawPresetMenu+0x804>)
 8001b84:	f00c fa30 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b88:	7b3b      	ldrb	r3, [r7, #12]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	2302      	movs	r3, #2
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	4896      	ldr	r0, [pc, #600]	; (8001df4 <FreqMenu_DrawPresetMenu+0x808>)
 8001b9c:	f00c fa24 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	4891      	ldr	r0, [pc, #580]	; (8001df8 <FreqMenu_DrawPresetMenu+0x80c>)
 8001bb4:	f00c fa18 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb8:	7abb      	ldrb	r3, [r7, #10]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc8:	2105      	movs	r1, #5
 8001bca:	488c      	ldr	r0, [pc, #560]	; (8001dfc <FreqMenu_DrawPresetMenu+0x810>)
 8001bcc:	f00c fa0c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd0:	7a7b      	ldrb	r3, [r7, #9]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be0:	2105      	movs	r1, #5
 8001be2:	4887      	ldr	r0, [pc, #540]	; (8001e00 <FreqMenu_DrawPresetMenu+0x814>)
 8001be4:	f00c fa00 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf8:	2178      	movs	r1, #120	; 0x78
 8001bfa:	4882      	ldr	r0, [pc, #520]	; (8001e04 <FreqMenu_DrawPresetMenu+0x818>)
 8001bfc:	f00c f9f4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c10:	2178      	movs	r1, #120	; 0x78
 8001c12:	487d      	ldr	r0, [pc, #500]	; (8001e08 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c14:	f00c f9e8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c18:	7b7b      	ldrb	r3, [r7, #13]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2302      	movs	r3, #2
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c28:	2178      	movs	r1, #120	; 0x78
 8001c2a:	4878      	ldr	r0, [pc, #480]	; (8001e0c <FreqMenu_DrawPresetMenu+0x820>)
 8001c2c:	f00c f9dc 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c40:	2178      	movs	r1, #120	; 0x78
 8001c42:	4873      	ldr	r0, [pc, #460]	; (8001e10 <FreqMenu_DrawPresetMenu+0x824>)
 8001c44:	f00c f9d0 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2302      	movs	r3, #2
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c58:	2178      	movs	r1, #120	; 0x78
 8001c5a:	486e      	ldr	r0, [pc, #440]	; (8001e14 <FreqMenu_DrawPresetMenu+0x828>)
 8001c5c:	f00c f9c4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c60:	7abb      	ldrb	r3, [r7, #10]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c70:	2178      	movs	r1, #120	; 0x78
 8001c72:	4869      	ldr	r0, [pc, #420]	; (8001e18 <FreqMenu_DrawPresetMenu+0x82c>)
 8001c74:	f00c f9b8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c78:	7a7b      	ldrb	r3, [r7, #9]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	2302      	movs	r3, #2
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c88:	2178      	movs	r1, #120	; 0x78
 8001c8a:	4864      	ldr	r0, [pc, #400]	; (8001e1c <FreqMenu_DrawPresetMenu+0x830>)
 8001c8c:	f00c f9ac 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8001c90:	f000 bf38 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	4850      	ldr	r0, [pc, #320]	; (8001de8 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ca8:	f00c f99e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	484b      	ldr	r0, [pc, #300]	; (8001dec <FreqMenu_DrawPresetMenu+0x800>)
 8001cc0:	f00c f992 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc4:	7b7b      	ldrb	r3, [r7, #13]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	4846      	ldr	r0, [pc, #280]	; (8001df0 <FreqMenu_DrawPresetMenu+0x804>)
 8001cd8:	f00c f986 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cdc:	7b3b      	ldrb	r3, [r7, #12]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cec:	2105      	movs	r1, #5
 8001cee:	4841      	ldr	r0, [pc, #260]	; (8001df4 <FreqMenu_DrawPresetMenu+0x808>)
 8001cf0:	f00c f97a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	483c      	ldr	r0, [pc, #240]	; (8001df8 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d08:	f00c f96e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d0c:	7abb      	ldrb	r3, [r7, #10]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2302      	movs	r3, #2
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d1c:	2105      	movs	r1, #5
 8001d1e:	4837      	ldr	r0, [pc, #220]	; (8001dfc <FreqMenu_DrawPresetMenu+0x810>)
 8001d20:	f00c f962 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d24:	7a7b      	ldrb	r3, [r7, #9]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d34:	2105      	movs	r1, #5
 8001d36:	4832      	ldr	r0, [pc, #200]	; (8001e00 <FreqMenu_DrawPresetMenu+0x814>)
 8001d38:	f00c f956 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d4c:	2178      	movs	r1, #120	; 0x78
 8001d4e:	482d      	ldr	r0, [pc, #180]	; (8001e04 <FreqMenu_DrawPresetMenu+0x818>)
 8001d50:	f00c f94a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d64:	2178      	movs	r1, #120	; 0x78
 8001d66:	4828      	ldr	r0, [pc, #160]	; (8001e08 <FreqMenu_DrawPresetMenu+0x81c>)
 8001d68:	f00c f93e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	2302      	movs	r3, #2
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d7c:	2178      	movs	r1, #120	; 0x78
 8001d7e:	4823      	ldr	r0, [pc, #140]	; (8001e0c <FreqMenu_DrawPresetMenu+0x820>)
 8001d80:	f00c f932 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d84:	7b3b      	ldrb	r3, [r7, #12]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d94:	2178      	movs	r1, #120	; 0x78
 8001d96:	481e      	ldr	r0, [pc, #120]	; (8001e10 <FreqMenu_DrawPresetMenu+0x824>)
 8001d98:	f00c f926 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	2300      	movs	r3, #0
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2302      	movs	r3, #2
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dac:	2178      	movs	r1, #120	; 0x78
 8001dae:	4819      	ldr	r0, [pc, #100]	; (8001e14 <FreqMenu_DrawPresetMenu+0x828>)
 8001db0:	f00c f91a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db4:	7abb      	ldrb	r3, [r7, #10]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc4:	2178      	movs	r1, #120	; 0x78
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <FreqMenu_DrawPresetMenu+0x82c>)
 8001dc8:	f00c f90e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dcc:	7a7b      	ldrb	r3, [r7, #9]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ddc:	2178      	movs	r1, #120	; 0x78
 8001dde:	480f      	ldr	r0, [pc, #60]	; (8001e1c <FreqMenu_DrawPresetMenu+0x830>)
 8001de0:	f00c f902 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8001de4:	f000 be8e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8001de8:	08012e08 	.word	0x08012e08
 8001dec:	08012e10 	.word	0x08012e10
 8001df0:	08012e18 	.word	0x08012e18
 8001df4:	08012e20 	.word	0x08012e20
 8001df8:	08012e28 	.word	0x08012e28
 8001dfc:	08012e30 	.word	0x08012e30
 8001e00:	08012e38 	.word	0x08012e38
 8001e04:	08012e40 	.word	0x08012e40
 8001e08:	08012e48 	.word	0x08012e48
 8001e0c:	08012e50 	.word	0x08012e50
 8001e10:	08012e58 	.word	0x08012e58
 8001e14:	08012e60 	.word	0x08012e60
 8001e18:	08012e68 	.word	0x08012e68
 8001e1c:	08012e70 	.word	0x08012e70
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e30:	2105      	movs	r1, #5
 8001e32:	48a5      	ldr	r0, [pc, #660]	; (80020c8 <FreqMenu_DrawPresetMenu+0xadc>)
 8001e34:	f00c f8d8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	2302      	movs	r3, #2
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	48a0      	ldr	r0, [pc, #640]	; (80020cc <FreqMenu_DrawPresetMenu+0xae0>)
 8001e4c:	f00c f8cc 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	2302      	movs	r3, #2
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e60:	2105      	movs	r1, #5
 8001e62:	489b      	ldr	r0, [pc, #620]	; (80020d0 <FreqMenu_DrawPresetMenu+0xae4>)
 8001e64:	f00c f8c0 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e68:	7b3b      	ldrb	r3, [r7, #12]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	2302      	movs	r3, #2
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	4896      	ldr	r0, [pc, #600]	; (80020d4 <FreqMenu_DrawPresetMenu+0xae8>)
 8001e7c:	f00c f8b4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	2302      	movs	r3, #2
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e90:	2105      	movs	r1, #5
 8001e92:	4891      	ldr	r0, [pc, #580]	; (80020d8 <FreqMenu_DrawPresetMenu+0xaec>)
 8001e94:	f00c f8a8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e98:	7abb      	ldrb	r3, [r7, #10]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2105      	movs	r1, #5
 8001eaa:	488c      	ldr	r0, [pc, #560]	; (80020dc <FreqMenu_DrawPresetMenu+0xaf0>)
 8001eac:	f00c f89c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb0:	7a7b      	ldrb	r3, [r7, #9]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	4887      	ldr	r0, [pc, #540]	; (80020e0 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001ec4:	f00c f890 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ed8:	2178      	movs	r1, #120	; 0x78
 8001eda:	4882      	ldr	r0, [pc, #520]	; (80020e4 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001edc:	f00c f884 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	2302      	movs	r3, #2
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef0:	2178      	movs	r1, #120	; 0x78
 8001ef2:	487d      	ldr	r0, [pc, #500]	; (80020e8 <FreqMenu_DrawPresetMenu+0xafc>)
 8001ef4:	f00c f878 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ef8:	7b7b      	ldrb	r3, [r7, #13]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	2302      	movs	r3, #2
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f08:	2178      	movs	r1, #120	; 0x78
 8001f0a:	4878      	ldr	r0, [pc, #480]	; (80020ec <FreqMenu_DrawPresetMenu+0xb00>)
 8001f0c:	f00c f86c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	2302      	movs	r3, #2
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f20:	2178      	movs	r1, #120	; 0x78
 8001f22:	4873      	ldr	r0, [pc, #460]	; (80020f0 <FreqMenu_DrawPresetMenu+0xb04>)
 8001f24:	f00c f860 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2302      	movs	r3, #2
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f38:	2178      	movs	r1, #120	; 0x78
 8001f3a:	486e      	ldr	r0, [pc, #440]	; (80020f4 <FreqMenu_DrawPresetMenu+0xb08>)
 8001f3c:	f00c f854 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f40:	7abb      	ldrb	r3, [r7, #10]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f50:	2178      	movs	r1, #120	; 0x78
 8001f52:	4869      	ldr	r0, [pc, #420]	; (80020f8 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f54:	f00c f848 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f58:	7a7b      	ldrb	r3, [r7, #9]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	2302      	movs	r3, #2
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f68:	2178      	movs	r1, #120	; 0x78
 8001f6a:	4864      	ldr	r0, [pc, #400]	; (80020fc <FreqMenu_DrawPresetMenu+0xb10>)
 8001f6c:	f00c f83c 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8001f70:	f000 bdc8 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f84:	2105      	movs	r1, #5
 8001f86:	4850      	ldr	r0, [pc, #320]	; (80020c8 <FreqMenu_DrawPresetMenu+0xadc>)
 8001f88:	f00c f82e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2302      	movs	r3, #2
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	484b      	ldr	r0, [pc, #300]	; (80020cc <FreqMenu_DrawPresetMenu+0xae0>)
 8001fa0:	f00c f822 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa4:	7b7b      	ldrb	r3, [r7, #13]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2302      	movs	r3, #2
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	4846      	ldr	r0, [pc, #280]	; (80020d0 <FreqMenu_DrawPresetMenu+0xae4>)
 8001fb8:	f00c f816 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fbc:	7b3b      	ldrb	r3, [r7, #12]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fcc:	2105      	movs	r1, #5
 8001fce:	4841      	ldr	r0, [pc, #260]	; (80020d4 <FreqMenu_DrawPresetMenu+0xae8>)
 8001fd0:	f00c f80a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe4:	2105      	movs	r1, #5
 8001fe6:	483c      	ldr	r0, [pc, #240]	; (80020d8 <FreqMenu_DrawPresetMenu+0xaec>)
 8001fe8:	f00b fffe 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fec:	7abb      	ldrb	r3, [r7, #10]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	4837      	ldr	r0, [pc, #220]	; (80020dc <FreqMenu_DrawPresetMenu+0xaf0>)
 8002000:	f00b fff2 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002004:	7a7b      	ldrb	r3, [r7, #9]
 8002006:	b29a      	uxth	r2, r3
 8002008:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	2302      	movs	r3, #2
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2300      	movs	r3, #0
 8002014:	2105      	movs	r1, #5
 8002016:	4832      	ldr	r0, [pc, #200]	; (80020e0 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002018:	f00b ffe6 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	b29a      	uxth	r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2302      	movs	r3, #2
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800202c:	2178      	movs	r1, #120	; 0x78
 800202e:	482d      	ldr	r0, [pc, #180]	; (80020e4 <FreqMenu_DrawPresetMenu+0xaf8>)
 8002030:	f00b ffda 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	b29a      	uxth	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2302      	movs	r3, #2
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002044:	2178      	movs	r1, #120	; 0x78
 8002046:	4828      	ldr	r0, [pc, #160]	; (80020e8 <FreqMenu_DrawPresetMenu+0xafc>)
 8002048:	f00b ffce 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800204c:	7b7b      	ldrb	r3, [r7, #13]
 800204e:	b29a      	uxth	r2, r3
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2302      	movs	r3, #2
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800205c:	2178      	movs	r1, #120	; 0x78
 800205e:	4823      	ldr	r0, [pc, #140]	; (80020ec <FreqMenu_DrawPresetMenu+0xb00>)
 8002060:	f00b ffc2 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002064:	7b3b      	ldrb	r3, [r7, #12]
 8002066:	b29a      	uxth	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	2302      	movs	r3, #2
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002074:	2178      	movs	r1, #120	; 0x78
 8002076:	481e      	ldr	r0, [pc, #120]	; (80020f0 <FreqMenu_DrawPresetMenu+0xb04>)
 8002078:	f00b ffb6 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	b29a      	uxth	r2, r3
 8002080:	2300      	movs	r3, #0
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	2302      	movs	r3, #2
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800208c:	2178      	movs	r1, #120	; 0x78
 800208e:	4819      	ldr	r0, [pc, #100]	; (80020f4 <FreqMenu_DrawPresetMenu+0xb08>)
 8002090:	f00b ffaa 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002094:	7abb      	ldrb	r3, [r7, #10]
 8002096:	b29a      	uxth	r2, r3
 8002098:	2300      	movs	r3, #0
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	2302      	movs	r3, #2
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a4:	2178      	movs	r1, #120	; 0x78
 80020a6:	4814      	ldr	r0, [pc, #80]	; (80020f8 <FreqMenu_DrawPresetMenu+0xb0c>)
 80020a8:	f00b ff9e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ac:	7a7b      	ldrb	r3, [r7, #9]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	2302      	movs	r3, #2
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020bc:	2178      	movs	r1, #120	; 0x78
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <FreqMenu_DrawPresetMenu+0xb10>)
 80020c0:	f00b ff92 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 80020c4:	f000 bd1e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 80020c8:	08012e08 	.word	0x08012e08
 80020cc:	08012e10 	.word	0x08012e10
 80020d0:	08012e18 	.word	0x08012e18
 80020d4:	08012e20 	.word	0x08012e20
 80020d8:	08012e28 	.word	0x08012e28
 80020dc:	08012e30 	.word	0x08012e30
 80020e0:	08012e38 	.word	0x08012e38
 80020e4:	08012e40 	.word	0x08012e40
 80020e8:	08012e48 	.word	0x08012e48
 80020ec:	08012e50 	.word	0x08012e50
 80020f0:	08012e58 	.word	0x08012e58
 80020f4:	08012e60 	.word	0x08012e60
 80020f8:	08012e68 	.word	0x08012e68
 80020fc:	08012e70 	.word	0x08012e70
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	b29a      	uxth	r2, r3
 8002104:	2300      	movs	r3, #0
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	2302      	movs	r3, #2
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002110:	2105      	movs	r1, #5
 8002112:	48a5      	ldr	r0, [pc, #660]	; (80023a8 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002114:	f00b ff68 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002118:	7bbb      	ldrb	r3, [r7, #14]
 800211a:	b29a      	uxth	r2, r3
 800211c:	2300      	movs	r3, #0
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2302      	movs	r3, #2
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002128:	2105      	movs	r1, #5
 800212a:	48a0      	ldr	r0, [pc, #640]	; (80023ac <FreqMenu_DrawPresetMenu+0xdc0>)
 800212c:	f00b ff5c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002130:	7b7b      	ldrb	r3, [r7, #13]
 8002132:	b29a      	uxth	r2, r3
 8002134:	2300      	movs	r3, #0
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	2302      	movs	r3, #2
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002140:	2105      	movs	r1, #5
 8002142:	489b      	ldr	r0, [pc, #620]	; (80023b0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002144:	f00b ff50 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002148:	7b3b      	ldrb	r3, [r7, #12]
 800214a:	b29a      	uxth	r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2302      	movs	r3, #2
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002158:	2105      	movs	r1, #5
 800215a:	4896      	ldr	r0, [pc, #600]	; (80023b4 <FreqMenu_DrawPresetMenu+0xdc8>)
 800215c:	f00b ff44 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	b29a      	uxth	r2, r3
 8002164:	2300      	movs	r3, #0
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2302      	movs	r3, #2
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002170:	2105      	movs	r1, #5
 8002172:	4891      	ldr	r0, [pc, #580]	; (80023b8 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002174:	f00b ff38 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002178:	7abb      	ldrb	r3, [r7, #10]
 800217a:	b29a      	uxth	r2, r3
 800217c:	2300      	movs	r3, #0
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	2302      	movs	r3, #2
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002188:	2105      	movs	r1, #5
 800218a:	488c      	ldr	r0, [pc, #560]	; (80023bc <FreqMenu_DrawPresetMenu+0xdd0>)
 800218c:	f00b ff2c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002190:	7a7b      	ldrb	r3, [r7, #9]
 8002192:	b29a      	uxth	r2, r3
 8002194:	2300      	movs	r3, #0
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	2302      	movs	r3, #2
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a0:	2105      	movs	r1, #5
 80021a2:	4887      	ldr	r0, [pc, #540]	; (80023c0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80021a4:	f00b ff20 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	2302      	movs	r3, #2
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2300      	movs	r3, #0
 80021b8:	2178      	movs	r1, #120	; 0x78
 80021ba:	4882      	ldr	r0, [pc, #520]	; (80023c4 <FreqMenu_DrawPresetMenu+0xdd8>)
 80021bc:	f00b ff14 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2302      	movs	r3, #2
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d0:	2178      	movs	r1, #120	; 0x78
 80021d2:	487d      	ldr	r0, [pc, #500]	; (80023c8 <FreqMenu_DrawPresetMenu+0xddc>)
 80021d4:	f00b ff08 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021d8:	7b7b      	ldrb	r3, [r7, #13]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	2302      	movs	r3, #2
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021e8:	2178      	movs	r1, #120	; 0x78
 80021ea:	4878      	ldr	r0, [pc, #480]	; (80023cc <FreqMenu_DrawPresetMenu+0xde0>)
 80021ec:	f00b fefc 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f0:	7b3b      	ldrb	r3, [r7, #12]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	2300      	movs	r3, #0
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	2302      	movs	r3, #2
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002200:	2178      	movs	r1, #120	; 0x78
 8002202:	4873      	ldr	r0, [pc, #460]	; (80023d0 <FreqMenu_DrawPresetMenu+0xde4>)
 8002204:	f00b fef0 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	b29a      	uxth	r2, r3
 800220c:	2300      	movs	r3, #0
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	2302      	movs	r3, #2
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002218:	2178      	movs	r1, #120	; 0x78
 800221a:	486e      	ldr	r0, [pc, #440]	; (80023d4 <FreqMenu_DrawPresetMenu+0xde8>)
 800221c:	f00b fee4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002220:	7abb      	ldrb	r3, [r7, #10]
 8002222:	b29a      	uxth	r2, r3
 8002224:	2300      	movs	r3, #0
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	2302      	movs	r3, #2
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002230:	2178      	movs	r1, #120	; 0x78
 8002232:	4869      	ldr	r0, [pc, #420]	; (80023d8 <FreqMenu_DrawPresetMenu+0xdec>)
 8002234:	f00b fed8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002238:	7a7b      	ldrb	r3, [r7, #9]
 800223a:	b29a      	uxth	r2, r3
 800223c:	2300      	movs	r3, #0
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2302      	movs	r3, #2
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002248:	2178      	movs	r1, #120	; 0x78
 800224a:	4864      	ldr	r0, [pc, #400]	; (80023dc <FreqMenu_DrawPresetMenu+0xdf0>)
 800224c:	f00b fecc 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8002250:	f000 bc58 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	b29a      	uxth	r2, r3
 8002258:	2300      	movs	r3, #0
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002264:	2105      	movs	r1, #5
 8002266:	4850      	ldr	r0, [pc, #320]	; (80023a8 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002268:	f00b febe 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	b29a      	uxth	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2302      	movs	r3, #2
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800227c:	2105      	movs	r1, #5
 800227e:	484b      	ldr	r0, [pc, #300]	; (80023ac <FreqMenu_DrawPresetMenu+0xdc0>)
 8002280:	f00b feb2 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002284:	7b7b      	ldrb	r3, [r7, #13]
 8002286:	b29a      	uxth	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2302      	movs	r3, #2
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002294:	2105      	movs	r1, #5
 8002296:	4846      	ldr	r0, [pc, #280]	; (80023b0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002298:	f00b fea6 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800229c:	7b3b      	ldrb	r3, [r7, #12]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2302      	movs	r3, #2
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ac:	2105      	movs	r1, #5
 80022ae:	4841      	ldr	r0, [pc, #260]	; (80023b4 <FreqMenu_DrawPresetMenu+0xdc8>)
 80022b0:	f00b fe9a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c4:	2105      	movs	r1, #5
 80022c6:	483c      	ldr	r0, [pc, #240]	; (80023b8 <FreqMenu_DrawPresetMenu+0xdcc>)
 80022c8:	f00b fe8e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022cc:	7abb      	ldrb	r3, [r7, #10]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2302      	movs	r3, #2
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022dc:	2105      	movs	r1, #5
 80022de:	4837      	ldr	r0, [pc, #220]	; (80023bc <FreqMenu_DrawPresetMenu+0xdd0>)
 80022e0:	f00b fe82 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e4:	7a7b      	ldrb	r3, [r7, #9]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	2300      	movs	r3, #0
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	2302      	movs	r3, #2
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f4:	2105      	movs	r1, #5
 80022f6:	4832      	ldr	r0, [pc, #200]	; (80023c0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80022f8:	f00b fe76 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	2300      	movs	r3, #0
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2302      	movs	r3, #2
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800230c:	2178      	movs	r1, #120	; 0x78
 800230e:	482d      	ldr	r0, [pc, #180]	; (80023c4 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002310:	f00b fe6a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	b29a      	uxth	r2, r3
 8002318:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	2302      	movs	r3, #2
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	2178      	movs	r1, #120	; 0x78
 8002326:	4828      	ldr	r0, [pc, #160]	; (80023c8 <FreqMenu_DrawPresetMenu+0xddc>)
 8002328:	f00b fe5e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800232c:	7b7b      	ldrb	r3, [r7, #13]
 800232e:	b29a      	uxth	r2, r3
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	2302      	movs	r3, #2
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800233c:	2178      	movs	r1, #120	; 0x78
 800233e:	4823      	ldr	r0, [pc, #140]	; (80023cc <FreqMenu_DrawPresetMenu+0xde0>)
 8002340:	f00b fe52 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002344:	7b3b      	ldrb	r3, [r7, #12]
 8002346:	b29a      	uxth	r2, r3
 8002348:	2300      	movs	r3, #0
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2302      	movs	r3, #2
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002354:	2178      	movs	r1, #120	; 0x78
 8002356:	481e      	ldr	r0, [pc, #120]	; (80023d0 <FreqMenu_DrawPresetMenu+0xde4>)
 8002358:	f00b fe46 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	b29a      	uxth	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2302      	movs	r3, #2
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800236c:	2178      	movs	r1, #120	; 0x78
 800236e:	4819      	ldr	r0, [pc, #100]	; (80023d4 <FreqMenu_DrawPresetMenu+0xde8>)
 8002370:	f00b fe3a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002374:	7abb      	ldrb	r3, [r7, #10]
 8002376:	b29a      	uxth	r2, r3
 8002378:	2300      	movs	r3, #0
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	2302      	movs	r3, #2
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002384:	2178      	movs	r1, #120	; 0x78
 8002386:	4814      	ldr	r0, [pc, #80]	; (80023d8 <FreqMenu_DrawPresetMenu+0xdec>)
 8002388:	f00b fe2e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800238c:	7a7b      	ldrb	r3, [r7, #9]
 800238e:	b29a      	uxth	r2, r3
 8002390:	2300      	movs	r3, #0
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2302      	movs	r3, #2
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800239c:	2178      	movs	r1, #120	; 0x78
 800239e:	480f      	ldr	r0, [pc, #60]	; (80023dc <FreqMenu_DrawPresetMenu+0xdf0>)
 80023a0:	f00b fe22 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 80023a4:	e3ae      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 80023a6:	bf00      	nop
 80023a8:	08012e08 	.word	0x08012e08
 80023ac:	08012e10 	.word	0x08012e10
 80023b0:	08012e18 	.word	0x08012e18
 80023b4:	08012e20 	.word	0x08012e20
 80023b8:	08012e28 	.word	0x08012e28
 80023bc:	08012e30 	.word	0x08012e30
 80023c0:	08012e38 	.word	0x08012e38
 80023c4:	08012e40 	.word	0x08012e40
 80023c8:	08012e48 	.word	0x08012e48
 80023cc:	08012e50 	.word	0x08012e50
 80023d0:	08012e58 	.word	0x08012e58
 80023d4:	08012e60 	.word	0x08012e60
 80023d8:	08012e68 	.word	0x08012e68
 80023dc:	08012e70 	.word	0x08012e70
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	2300      	movs	r3, #0
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2302      	movs	r3, #2
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f0:	2105      	movs	r1, #5
 80023f2:	48a4      	ldr	r0, [pc, #656]	; (8002684 <FreqMenu_DrawPresetMenu+0x1098>)
 80023f4:	f00b fdf8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023f8:	7bbb      	ldrb	r3, [r7, #14]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	2300      	movs	r3, #0
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2302      	movs	r3, #2
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002408:	2105      	movs	r1, #5
 800240a:	489f      	ldr	r0, [pc, #636]	; (8002688 <FreqMenu_DrawPresetMenu+0x109c>)
 800240c:	f00b fdec 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002410:	7b7b      	ldrb	r3, [r7, #13]
 8002412:	b29a      	uxth	r2, r3
 8002414:	2300      	movs	r3, #0
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	2302      	movs	r3, #2
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002420:	2105      	movs	r1, #5
 8002422:	489a      	ldr	r0, [pc, #616]	; (800268c <FreqMenu_DrawPresetMenu+0x10a0>)
 8002424:	f00b fde0 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	b29a      	uxth	r2, r3
 800242c:	2300      	movs	r3, #0
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	2302      	movs	r3, #2
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002438:	2105      	movs	r1, #5
 800243a:	4895      	ldr	r0, [pc, #596]	; (8002690 <FreqMenu_DrawPresetMenu+0x10a4>)
 800243c:	f00b fdd4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002440:	7afb      	ldrb	r3, [r7, #11]
 8002442:	b29a      	uxth	r2, r3
 8002444:	2300      	movs	r3, #0
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	2302      	movs	r3, #2
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002450:	2105      	movs	r1, #5
 8002452:	4890      	ldr	r0, [pc, #576]	; (8002694 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002454:	f00b fdc8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002458:	7abb      	ldrb	r3, [r7, #10]
 800245a:	b29a      	uxth	r2, r3
 800245c:	2300      	movs	r3, #0
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2302      	movs	r3, #2
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002468:	2105      	movs	r1, #5
 800246a:	488b      	ldr	r0, [pc, #556]	; (8002698 <FreqMenu_DrawPresetMenu+0x10ac>)
 800246c:	f00b fdbc 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002470:	7a7b      	ldrb	r3, [r7, #9]
 8002472:	b29a      	uxth	r2, r3
 8002474:	2300      	movs	r3, #0
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2302      	movs	r3, #2
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002480:	2105      	movs	r1, #5
 8002482:	4886      	ldr	r0, [pc, #536]	; (800269c <FreqMenu_DrawPresetMenu+0x10b0>)
 8002484:	f00b fdb0 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	b29a      	uxth	r2, r3
 800248c:	2300      	movs	r3, #0
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2302      	movs	r3, #2
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002498:	2178      	movs	r1, #120	; 0x78
 800249a:	4881      	ldr	r0, [pc, #516]	; (80026a0 <FreqMenu_DrawPresetMenu+0x10b4>)
 800249c:	f00b fda4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	2300      	movs	r3, #0
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2302      	movs	r3, #2
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b0:	2178      	movs	r1, #120	; 0x78
 80024b2:	487c      	ldr	r0, [pc, #496]	; (80026a4 <FreqMenu_DrawPresetMenu+0x10b8>)
 80024b4:	f00b fd98 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80024b8:	7b7b      	ldrb	r3, [r7, #13]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	2302      	movs	r3, #2
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2300      	movs	r3, #0
 80024c8:	2178      	movs	r1, #120	; 0x78
 80024ca:	4877      	ldr	r0, [pc, #476]	; (80026a8 <FreqMenu_DrawPresetMenu+0x10bc>)
 80024cc:	f00b fd8c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d0:	7b3b      	ldrb	r3, [r7, #12]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	2300      	movs	r3, #0
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	2302      	movs	r3, #2
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e0:	2178      	movs	r1, #120	; 0x78
 80024e2:	4872      	ldr	r0, [pc, #456]	; (80026ac <FreqMenu_DrawPresetMenu+0x10c0>)
 80024e4:	f00b fd80 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	2302      	movs	r3, #2
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024f8:	2178      	movs	r1, #120	; 0x78
 80024fa:	486d      	ldr	r0, [pc, #436]	; (80026b0 <FreqMenu_DrawPresetMenu+0x10c4>)
 80024fc:	f00b fd74 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002500:	7abb      	ldrb	r3, [r7, #10]
 8002502:	b29a      	uxth	r2, r3
 8002504:	2300      	movs	r3, #0
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2302      	movs	r3, #2
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002510:	2178      	movs	r1, #120	; 0x78
 8002512:	4868      	ldr	r0, [pc, #416]	; (80026b4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002514:	f00b fd68 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002518:	7a7b      	ldrb	r3, [r7, #9]
 800251a:	b29a      	uxth	r2, r3
 800251c:	2300      	movs	r3, #0
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	2302      	movs	r3, #2
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002528:	2178      	movs	r1, #120	; 0x78
 800252a:	4863      	ldr	r0, [pc, #396]	; (80026b8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800252c:	f00b fd5c 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8002530:	e2e8      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	b29a      	uxth	r2, r3
 8002536:	2300      	movs	r3, #0
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	2302      	movs	r3, #2
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002542:	2105      	movs	r1, #5
 8002544:	484f      	ldr	r0, [pc, #316]	; (8002684 <FreqMenu_DrawPresetMenu+0x1098>)
 8002546:	f00b fd4f 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	b29a      	uxth	r2, r3
 800254e:	2300      	movs	r3, #0
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	2302      	movs	r3, #2
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255a:	2105      	movs	r1, #5
 800255c:	484a      	ldr	r0, [pc, #296]	; (8002688 <FreqMenu_DrawPresetMenu+0x109c>)
 800255e:	f00b fd43 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002562:	7b7b      	ldrb	r3, [r7, #13]
 8002564:	b29a      	uxth	r2, r3
 8002566:	2300      	movs	r3, #0
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2302      	movs	r3, #2
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002572:	2105      	movs	r1, #5
 8002574:	4845      	ldr	r0, [pc, #276]	; (800268c <FreqMenu_DrawPresetMenu+0x10a0>)
 8002576:	f00b fd37 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257a:	7b3b      	ldrb	r3, [r7, #12]
 800257c:	b29a      	uxth	r2, r3
 800257e:	2300      	movs	r3, #0
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	2302      	movs	r3, #2
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258a:	2105      	movs	r1, #5
 800258c:	4840      	ldr	r0, [pc, #256]	; (8002690 <FreqMenu_DrawPresetMenu+0x10a4>)
 800258e:	f00b fd2b 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	b29a      	uxth	r2, r3
 8002596:	2300      	movs	r3, #0
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2302      	movs	r3, #2
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a2:	2105      	movs	r1, #5
 80025a4:	483b      	ldr	r0, [pc, #236]	; (8002694 <FreqMenu_DrawPresetMenu+0x10a8>)
 80025a6:	f00b fd1f 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025aa:	7abb      	ldrb	r3, [r7, #10]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	2300      	movs	r3, #0
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2302      	movs	r3, #2
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ba:	2105      	movs	r1, #5
 80025bc:	4836      	ldr	r0, [pc, #216]	; (8002698 <FreqMenu_DrawPresetMenu+0x10ac>)
 80025be:	f00b fd13 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c2:	7a7b      	ldrb	r3, [r7, #9]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	2300      	movs	r3, #0
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2302      	movs	r3, #2
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d2:	2105      	movs	r1, #5
 80025d4:	4831      	ldr	r0, [pc, #196]	; (800269c <FreqMenu_DrawPresetMenu+0x10b0>)
 80025d6:	f00b fd07 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	2300      	movs	r3, #0
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2302      	movs	r3, #2
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ea:	2178      	movs	r1, #120	; 0x78
 80025ec:	482c      	ldr	r0, [pc, #176]	; (80026a0 <FreqMenu_DrawPresetMenu+0x10b4>)
 80025ee:	f00b fcfb 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	2300      	movs	r3, #0
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	2302      	movs	r3, #2
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002602:	2178      	movs	r1, #120	; 0x78
 8002604:	4827      	ldr	r0, [pc, #156]	; (80026a4 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002606:	f00b fcef 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260a:	7b7b      	ldrb	r3, [r7, #13]
 800260c:	b29a      	uxth	r2, r3
 800260e:	2300      	movs	r3, #0
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261a:	2178      	movs	r1, #120	; 0x78
 800261c:	4822      	ldr	r0, [pc, #136]	; (80026a8 <FreqMenu_DrawPresetMenu+0x10bc>)
 800261e:	f00b fce3 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002622:	7b3b      	ldrb	r3, [r7, #12]
 8002624:	b29a      	uxth	r2, r3
 8002626:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2302      	movs	r3, #2
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	2178      	movs	r1, #120	; 0x78
 8002634:	481d      	ldr	r0, [pc, #116]	; (80026ac <FreqMenu_DrawPresetMenu+0x10c0>)
 8002636:	f00b fcd7 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	b29a      	uxth	r2, r3
 800263e:	2300      	movs	r3, #0
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800264a:	2178      	movs	r1, #120	; 0x78
 800264c:	4818      	ldr	r0, [pc, #96]	; (80026b0 <FreqMenu_DrawPresetMenu+0x10c4>)
 800264e:	f00b fccb 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002652:	7abb      	ldrb	r3, [r7, #10]
 8002654:	b29a      	uxth	r2, r3
 8002656:	2300      	movs	r3, #0
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002662:	2178      	movs	r1, #120	; 0x78
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002666:	f00b fcbf 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800266a:	7a7b      	ldrb	r3, [r7, #9]
 800266c:	b29a      	uxth	r2, r3
 800266e:	2300      	movs	r3, #0
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2302      	movs	r3, #2
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800267a:	2178      	movs	r1, #120	; 0x78
 800267c:	480e      	ldr	r0, [pc, #56]	; (80026b8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800267e:	f00b fcb3 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8002682:	e23f      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002684:	08012e08 	.word	0x08012e08
 8002688:	08012e10 	.word	0x08012e10
 800268c:	08012e18 	.word	0x08012e18
 8002690:	08012e20 	.word	0x08012e20
 8002694:	08012e28 	.word	0x08012e28
 8002698:	08012e30 	.word	0x08012e30
 800269c:	08012e38 	.word	0x08012e38
 80026a0:	08012e40 	.word	0x08012e40
 80026a4:	08012e48 	.word	0x08012e48
 80026a8:	08012e50 	.word	0x08012e50
 80026ac:	08012e58 	.word	0x08012e58
 80026b0:	08012e60 	.word	0x08012e60
 80026b4:	08012e68 	.word	0x08012e68
 80026b8:	08012e70 	.word	0x08012e70
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	2300      	movs	r3, #0
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2302      	movs	r3, #2
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026cc:	2105      	movs	r1, #5
 80026ce:	48a4      	ldr	r0, [pc, #656]	; (8002960 <FreqMenu_DrawPresetMenu+0x1374>)
 80026d0:	f00b fc8a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	2300      	movs	r3, #0
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	2302      	movs	r3, #2
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026e4:	2105      	movs	r1, #5
 80026e6:	489f      	ldr	r0, [pc, #636]	; (8002964 <FreqMenu_DrawPresetMenu+0x1378>)
 80026e8:	f00b fc7e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ec:	7b7b      	ldrb	r3, [r7, #13]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	2302      	movs	r3, #2
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026fc:	2105      	movs	r1, #5
 80026fe:	489a      	ldr	r0, [pc, #616]	; (8002968 <FreqMenu_DrawPresetMenu+0x137c>)
 8002700:	f00b fc72 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002704:	7b3b      	ldrb	r3, [r7, #12]
 8002706:	b29a      	uxth	r2, r3
 8002708:	2300      	movs	r3, #0
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	2302      	movs	r3, #2
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002714:	2105      	movs	r1, #5
 8002716:	4895      	ldr	r0, [pc, #596]	; (800296c <FreqMenu_DrawPresetMenu+0x1380>)
 8002718:	f00b fc66 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	b29a      	uxth	r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	2302      	movs	r3, #2
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800272c:	2105      	movs	r1, #5
 800272e:	4890      	ldr	r0, [pc, #576]	; (8002970 <FreqMenu_DrawPresetMenu+0x1384>)
 8002730:	f00b fc5a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002734:	7abb      	ldrb	r3, [r7, #10]
 8002736:	b29a      	uxth	r2, r3
 8002738:	2300      	movs	r3, #0
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	2302      	movs	r3, #2
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002744:	2105      	movs	r1, #5
 8002746:	488b      	ldr	r0, [pc, #556]	; (8002974 <FreqMenu_DrawPresetMenu+0x1388>)
 8002748:	f00b fc4e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800274c:	7a7b      	ldrb	r3, [r7, #9]
 800274e:	b29a      	uxth	r2, r3
 8002750:	2300      	movs	r3, #0
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	2302      	movs	r3, #2
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800275c:	2105      	movs	r1, #5
 800275e:	4886      	ldr	r0, [pc, #536]	; (8002978 <FreqMenu_DrawPresetMenu+0x138c>)
 8002760:	f00b fc42 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	b29a      	uxth	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	2302      	movs	r3, #2
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002774:	2178      	movs	r1, #120	; 0x78
 8002776:	4881      	ldr	r0, [pc, #516]	; (800297c <FreqMenu_DrawPresetMenu+0x1390>)
 8002778:	f00b fc36 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	b29a      	uxth	r2, r3
 8002780:	2300      	movs	r3, #0
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	2302      	movs	r3, #2
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800278c:	2178      	movs	r1, #120	; 0x78
 800278e:	487c      	ldr	r0, [pc, #496]	; (8002980 <FreqMenu_DrawPresetMenu+0x1394>)
 8002790:	f00b fc2a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002794:	7b7b      	ldrb	r3, [r7, #13]
 8002796:	b29a      	uxth	r2, r3
 8002798:	2300      	movs	r3, #0
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	2302      	movs	r3, #2
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027a4:	2178      	movs	r1, #120	; 0x78
 80027a6:	4877      	ldr	r0, [pc, #476]	; (8002984 <FreqMenu_DrawPresetMenu+0x1398>)
 80027a8:	f00b fc1e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ac:	7b3b      	ldrb	r3, [r7, #12]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	2302      	movs	r3, #2
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027bc:	2178      	movs	r1, #120	; 0x78
 80027be:	4872      	ldr	r0, [pc, #456]	; (8002988 <FreqMenu_DrawPresetMenu+0x139c>)
 80027c0:	f00b fc12 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2302      	movs	r3, #2
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2178      	movs	r1, #120	; 0x78
 80027d6:	486d      	ldr	r0, [pc, #436]	; (800298c <FreqMenu_DrawPresetMenu+0x13a0>)
 80027d8:	f00b fc06 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027dc:	7abb      	ldrb	r3, [r7, #10]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	2302      	movs	r3, #2
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ec:	2178      	movs	r1, #120	; 0x78
 80027ee:	4868      	ldr	r0, [pc, #416]	; (8002990 <FreqMenu_DrawPresetMenu+0x13a4>)
 80027f0:	f00b fbfa 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f4:	7a7b      	ldrb	r3, [r7, #9]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	2300      	movs	r3, #0
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2302      	movs	r3, #2
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002804:	2178      	movs	r1, #120	; 0x78
 8002806:	4863      	ldr	r0, [pc, #396]	; (8002994 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002808:	f00b fbee 	bl	800dfe8 <ILI9341_Draw_Text>
			break;
 800280c:	e17a      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	b29a      	uxth	r2, r3
 8002812:	2300      	movs	r3, #0
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	2302      	movs	r3, #2
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800281e:	2105      	movs	r1, #5
 8002820:	484f      	ldr	r0, [pc, #316]	; (8002960 <FreqMenu_DrawPresetMenu+0x1374>)
 8002822:	f00b fbe1 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	b29a      	uxth	r2, r3
 800282a:	2300      	movs	r3, #0
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	2302      	movs	r3, #2
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002836:	2105      	movs	r1, #5
 8002838:	484a      	ldr	r0, [pc, #296]	; (8002964 <FreqMenu_DrawPresetMenu+0x1378>)
 800283a:	f00b fbd5 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800283e:	7b7b      	ldrb	r3, [r7, #13]
 8002840:	b29a      	uxth	r2, r3
 8002842:	2300      	movs	r3, #0
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	2302      	movs	r3, #2
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800284e:	2105      	movs	r1, #5
 8002850:	4845      	ldr	r0, [pc, #276]	; (8002968 <FreqMenu_DrawPresetMenu+0x137c>)
 8002852:	f00b fbc9 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002856:	7b3b      	ldrb	r3, [r7, #12]
 8002858:	b29a      	uxth	r2, r3
 800285a:	2300      	movs	r3, #0
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	2302      	movs	r3, #2
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002866:	2105      	movs	r1, #5
 8002868:	4840      	ldr	r0, [pc, #256]	; (800296c <FreqMenu_DrawPresetMenu+0x1380>)
 800286a:	f00b fbbd 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800286e:	7afb      	ldrb	r3, [r7, #11]
 8002870:	b29a      	uxth	r2, r3
 8002872:	2300      	movs	r3, #0
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	2302      	movs	r3, #2
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800287e:	2105      	movs	r1, #5
 8002880:	483b      	ldr	r0, [pc, #236]	; (8002970 <FreqMenu_DrawPresetMenu+0x1384>)
 8002882:	f00b fbb1 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002886:	7abb      	ldrb	r3, [r7, #10]
 8002888:	b29a      	uxth	r2, r3
 800288a:	2300      	movs	r3, #0
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	2302      	movs	r3, #2
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002896:	2105      	movs	r1, #5
 8002898:	4836      	ldr	r0, [pc, #216]	; (8002974 <FreqMenu_DrawPresetMenu+0x1388>)
 800289a:	f00b fba5 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800289e:	7a7b      	ldrb	r3, [r7, #9]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	2300      	movs	r3, #0
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2302      	movs	r3, #2
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ae:	2105      	movs	r1, #5
 80028b0:	4831      	ldr	r0, [pc, #196]	; (8002978 <FreqMenu_DrawPresetMenu+0x138c>)
 80028b2:	f00b fb99 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	2300      	movs	r3, #0
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	2302      	movs	r3, #2
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c6:	2178      	movs	r1, #120	; 0x78
 80028c8:	482c      	ldr	r0, [pc, #176]	; (800297c <FreqMenu_DrawPresetMenu+0x1390>)
 80028ca:	f00b fb8d 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2302      	movs	r3, #2
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028de:	2178      	movs	r1, #120	; 0x78
 80028e0:	4827      	ldr	r0, [pc, #156]	; (8002980 <FreqMenu_DrawPresetMenu+0x1394>)
 80028e2:	f00b fb81 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028e6:	7b7b      	ldrb	r3, [r7, #13]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	2300      	movs	r3, #0
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2302      	movs	r3, #2
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028f6:	2178      	movs	r1, #120	; 0x78
 80028f8:	4822      	ldr	r0, [pc, #136]	; (8002984 <FreqMenu_DrawPresetMenu+0x1398>)
 80028fa:	f00b fb75 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028fe:	7b3b      	ldrb	r3, [r7, #12]
 8002900:	b29a      	uxth	r2, r3
 8002902:	2300      	movs	r3, #0
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2302      	movs	r3, #2
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800290e:	2178      	movs	r1, #120	; 0x78
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <FreqMenu_DrawPresetMenu+0x139c>)
 8002912:	f00b fb69 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	b29a      	uxth	r2, r3
 800291a:	2300      	movs	r3, #0
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2302      	movs	r3, #2
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002926:	2178      	movs	r1, #120	; 0x78
 8002928:	4818      	ldr	r0, [pc, #96]	; (800298c <FreqMenu_DrawPresetMenu+0x13a0>)
 800292a:	f00b fb5d 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800292e:	7abb      	ldrb	r3, [r7, #10]
 8002930:	b29a      	uxth	r2, r3
 8002932:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2302      	movs	r3, #2
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2300      	movs	r3, #0
 800293e:	2178      	movs	r1, #120	; 0x78
 8002940:	4813      	ldr	r0, [pc, #76]	; (8002990 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002942:	f00b fb51 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002946:	7a7b      	ldrb	r3, [r7, #9]
 8002948:	b29a      	uxth	r2, r3
 800294a:	2300      	movs	r3, #0
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2302      	movs	r3, #2
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002956:	2178      	movs	r1, #120	; 0x78
 8002958:	480e      	ldr	r0, [pc, #56]	; (8002994 <FreqMenu_DrawPresetMenu+0x13a8>)
 800295a:	f00b fb45 	bl	800dfe8 <ILI9341_Draw_Text>
			break;
 800295e:	e0d1      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002960:	08012e08 	.word	0x08012e08
 8002964:	08012e10 	.word	0x08012e10
 8002968:	08012e18 	.word	0x08012e18
 800296c:	08012e20 	.word	0x08012e20
 8002970:	08012e28 	.word	0x08012e28
 8002974:	08012e30 	.word	0x08012e30
 8002978:	08012e38 	.word	0x08012e38
 800297c:	08012e40 	.word	0x08012e40
 8002980:	08012e48 	.word	0x08012e48
 8002984:	08012e50 	.word	0x08012e50
 8002988:	08012e58 	.word	0x08012e58
 800298c:	08012e60 	.word	0x08012e60
 8002990:	08012e68 	.word	0x08012e68
 8002994:	08012e70 	.word	0x08012e70
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	b29a      	uxth	r2, r3
 800299c:	2300      	movs	r3, #0
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	2302      	movs	r3, #2
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a8:	2105      	movs	r1, #5
 80029aa:	4858      	ldr	r0, [pc, #352]	; (8002b0c <FreqMenu_DrawPresetMenu+0x1520>)
 80029ac:	f00b fb1c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	2300      	movs	r3, #0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2302      	movs	r3, #2
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029c0:	2105      	movs	r1, #5
 80029c2:	4853      	ldr	r0, [pc, #332]	; (8002b10 <FreqMenu_DrawPresetMenu+0x1524>)
 80029c4:	f00b fb10 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c8:	7b7b      	ldrb	r3, [r7, #13]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	2300      	movs	r3, #0
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	2302      	movs	r3, #2
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d8:	2105      	movs	r1, #5
 80029da:	484e      	ldr	r0, [pc, #312]	; (8002b14 <FreqMenu_DrawPresetMenu+0x1528>)
 80029dc:	f00b fb04 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029e0:	7b3b      	ldrb	r3, [r7, #12]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	2300      	movs	r3, #0
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	2302      	movs	r3, #2
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029f0:	2105      	movs	r1, #5
 80029f2:	4849      	ldr	r0, [pc, #292]	; (8002b18 <FreqMenu_DrawPresetMenu+0x152c>)
 80029f4:	f00b faf8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029f8:	7afb      	ldrb	r3, [r7, #11]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	2300      	movs	r3, #0
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	2302      	movs	r3, #2
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a08:	2105      	movs	r1, #5
 8002a0a:	4844      	ldr	r0, [pc, #272]	; (8002b1c <FreqMenu_DrawPresetMenu+0x1530>)
 8002a0c:	f00b faec 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a10:	7abb      	ldrb	r3, [r7, #10]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	2300      	movs	r3, #0
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2302      	movs	r3, #2
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a20:	2105      	movs	r1, #5
 8002a22:	483f      	ldr	r0, [pc, #252]	; (8002b20 <FreqMenu_DrawPresetMenu+0x1534>)
 8002a24:	f00b fae0 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a28:	7a7b      	ldrb	r3, [r7, #9]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	2302      	movs	r3, #2
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a38:	2105      	movs	r1, #5
 8002a3a:	483a      	ldr	r0, [pc, #232]	; (8002b24 <FreqMenu_DrawPresetMenu+0x1538>)
 8002a3c:	f00b fad4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	2300      	movs	r3, #0
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	2302      	movs	r3, #2
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a50:	2178      	movs	r1, #120	; 0x78
 8002a52:	4835      	ldr	r0, [pc, #212]	; (8002b28 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a54:	f00b fac8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	2302      	movs	r3, #2
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a68:	2178      	movs	r1, #120	; 0x78
 8002a6a:	4830      	ldr	r0, [pc, #192]	; (8002b2c <FreqMenu_DrawPresetMenu+0x1540>)
 8002a6c:	f00b fabc 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a70:	7b7b      	ldrb	r3, [r7, #13]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	2300      	movs	r3, #0
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	2302      	movs	r3, #2
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a80:	2178      	movs	r1, #120	; 0x78
 8002a82:	482b      	ldr	r0, [pc, #172]	; (8002b30 <FreqMenu_DrawPresetMenu+0x1544>)
 8002a84:	f00b fab0 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a88:	7b3b      	ldrb	r3, [r7, #12]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	2302      	movs	r3, #2
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a98:	2178      	movs	r1, #120	; 0x78
 8002a9a:	4826      	ldr	r0, [pc, #152]	; (8002b34 <FreqMenu_DrawPresetMenu+0x1548>)
 8002a9c:	f00b faa4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab0:	2178      	movs	r1, #120	; 0x78
 8002ab2:	4821      	ldr	r0, [pc, #132]	; (8002b38 <FreqMenu_DrawPresetMenu+0x154c>)
 8002ab4:	f00b fa98 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ab8:	7abb      	ldrb	r3, [r7, #10]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ac8:	2178      	movs	r1, #120	; 0x78
 8002aca:	481c      	ldr	r0, [pc, #112]	; (8002b3c <FreqMenu_DrawPresetMenu+0x1550>)
 8002acc:	f00b fa8c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ad0:	7a7b      	ldrb	r3, [r7, #9]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	2302      	movs	r3, #2
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2178      	movs	r1, #120	; 0x78
 8002ae2:	4817      	ldr	r0, [pc, #92]	; (8002b40 <FreqMenu_DrawPresetMenu+0x1554>)
 8002ae4:	f00b fa80 	bl	800dfe8 <ILI9341_Draw_Text>
			break;
 8002ae8:	bf00      	nop
 8002aea:	e00b      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002aec:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	2301      	movs	r3, #1
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2300      	movs	r3, #0
 8002af8:	22b4      	movs	r2, #180	; 0xb4
 8002afa:	2105      	movs	r1, #5
 8002afc:	4811      	ldr	r0, [pc, #68]	; (8002b44 <FreqMenu_DrawPresetMenu+0x1558>)
 8002afe:	f00b fa73 	bl	800dfe8 <ILI9341_Draw_Text>
}
 8002b02:	e7ff      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08012e08 	.word	0x08012e08
 8002b10:	08012e10 	.word	0x08012e10
 8002b14:	08012e18 	.word	0x08012e18
 8002b18:	08012e20 	.word	0x08012e20
 8002b1c:	08012e28 	.word	0x08012e28
 8002b20:	08012e30 	.word	0x08012e30
 8002b24:	08012e38 	.word	0x08012e38
 8002b28:	08012e40 	.word	0x08012e40
 8002b2c:	08012e48 	.word	0x08012e48
 8002b30:	08012e50 	.word	0x08012e50
 8002b34:	08012e58 	.word	0x08012e58
 8002b38:	08012e60 	.word	0x08012e60
 8002b3c:	08012e68 	.word	0x08012e68
 8002b40:	08012e70 	.word	0x08012e70
 8002b44:	08012e7c 	.word	0x08012e7c

08002b48 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2302      	movs	r3, #2
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	220a      	movs	r2, #10
 8002b5c:	2105      	movs	r1, #5
 8002b5e:	4804      	ldr	r0, [pc, #16]	; (8002b70 <FreqMenu_DrawAdjustMenu+0x28>)
 8002b60:	f00b fa42 	bl	800dfe8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002b64:	f7fe f9c8 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08012eac 	.word	0x08012eac

08002b74 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	b0a0      	sub	sp, #128	; 0x80
 8002b78:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	2302      	movs	r3, #2
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2300      	movs	r3, #0
 8002b86:	220a      	movs	r2, #10
 8002b88:	2105      	movs	r1, #5
 8002b8a:	48a1      	ldr	r0, [pc, #644]	; (8002e10 <FreqMenu_DrawSweepMenu+0x29c>)
 8002b8c:	f00b fa2c 	bl	800dfe8 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002b90:	2300      	movs	r3, #0
 8002b92:	667b      	str	r3, [r7, #100]	; 0x64
 8002b94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002ba2:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d109      	bne.n	8002bc2 <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002bae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bb2:	4a99      	ldr	r2, [pc, #612]	; (8002e18 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002bb4:	461c      	mov	r4, r3
 8002bb6:	4615      	mov	r5, r2
 8002bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	7023      	strb	r3, [r4, #0]
 8002bc0:	e008      	b.n	8002bd4 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002bc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bc6:	4a95      	ldr	r2, [pc, #596]	; (8002e1c <FreqMenu_DrawSweepMenu+0x2a8>)
 8002bc8:	461c      	mov	r4, r3
 8002bca:	4615      	mov	r5, r2
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2228      	movs	r2, #40	; 0x28
 8002be6:	2105      	movs	r1, #5
 8002be8:	f00b f9fe 	bl	800dfe8 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002bec:	2300      	movs	r3, #0
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c02:	f002 ffa1 	bl	8005b48 <SM_GetOutputInHertz>
 8002c06:	ee10 3a10 	vmov	r3, s0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fcc4 	bl	8000598 <__aeabi_f2d>
 8002c10:	4603      	mov	r3, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c18:	e9cd 3400 	strd	r3, r4, [sp]
 8002c1c:	4a80      	ldr	r2, [pc, #512]	; (8002e20 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c1e:	2119      	movs	r1, #25
 8002c20:	f00c fd86 	bl	800f730 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c24:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c34:	223c      	movs	r2, #60	; 0x3c
 8002c36:	2105      	movs	r1, #5
 8002c38:	f00b f9d6 	bl	800dfe8 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	2302      	movs	r3, #2
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c48:	2264      	movs	r2, #100	; 0x64
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	4875      	ldr	r0, [pc, #468]	; (8002e24 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c4e:	f00b f9cb 	bl	800dfe8 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d117      	bne.n	8002c8e <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2302      	movs	r3, #2
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c6a:	2264      	movs	r2, #100	; 0x64
 8002c6c:	21eb      	movs	r1, #235	; 0xeb
 8002c6e:	486e      	ldr	r0, [pc, #440]	; (8002e28 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c70:	f00b f9ba 	bl	800dfe8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2264      	movs	r2, #100	; 0x64
 8002c82:	f240 1109 	movw	r1, #265	; 0x109
 8002c86:	4869      	ldr	r0, [pc, #420]	; (8002e2c <FreqMenu_DrawSweepMenu+0x2b8>)
 8002c88:	f00b f9ae 	bl	800dfe8 <ILI9341_Draw_Text>
 8002c8c:	e016      	b.n	8002cbc <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2302      	movs	r3, #2
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c9a:	2264      	movs	r2, #100	; 0x64
 8002c9c:	f240 1109 	movw	r1, #265	; 0x109
 8002ca0:	4862      	ldr	r0, [pc, #392]	; (8002e2c <FreqMenu_DrawSweepMenu+0x2b8>)
 8002ca2:	f00b f9a1 	bl	800dfe8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ca6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2302      	movs	r3, #2
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2264      	movs	r2, #100	; 0x64
 8002cb4:	21eb      	movs	r1, #235	; 0xeb
 8002cb6:	485c      	ldr	r0, [pc, #368]	; (8002e28 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cb8:	f00b f996 	bl	800dfe8 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cc4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	2302      	movs	r3, #2
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2278      	movs	r2, #120	; 0x78
 8002cd2:	2105      	movs	r1, #5
 8002cd4:	4857      	ldr	r0, [pc, #348]	; (8002e34 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cd6:	f00b f987 	bl	800dfe8 <ILI9341_Draw_Text>
 8002cda:	e00a      	b.n	8002cf2 <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ce8:	2278      	movs	r2, #120	; 0x78
 8002cea:	2105      	movs	r1, #5
 8002cec:	4851      	ldr	r0, [pc, #324]	; (8002e34 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cee:	f00b f97b 	bl	800dfe8 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fc43 	bl	8000598 <__aeabi_f2d>
 8002d12:	4603      	mov	r3, r0
 8002d14:	460c      	mov	r4, r1
 8002d16:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d1a:	e9cd 3400 	strd	r3, r4, [sp]
 8002d1e:	4a47      	ldr	r2, [pc, #284]	; (8002e3c <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d20:	2119      	movs	r1, #25
 8002d22:	f00c fd05 	bl	800f730 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d26:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d36:	2278      	movs	r2, #120	; 0x78
 8002d38:	21b6      	movs	r1, #182	; 0xb6
 8002d3a:	f00b f955 	bl	800dfe8 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002d3e:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10f      	bne.n	8002d66 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d4e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	2302      	movs	r3, #2
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	228c      	movs	r2, #140	; 0x8c
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	4839      	ldr	r0, [pc, #228]	; (8002e44 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d60:	f00b f942 	bl	800dfe8 <ILI9341_Draw_Text>
 8002d64:	e00a      	b.n	8002d7c <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d72:	228c      	movs	r2, #140	; 0x8c
 8002d74:	2105      	movs	r1, #5
 8002d76:	4833      	ldr	r0, [pc, #204]	; (8002e44 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d78:	f00b f936 	bl	800dfe8 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <FreqMenu_DrawSweepMenu+0x2d8>)
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	ee17 0a90 	vmov	r0, s15
 8002da4:	f002 ff14 	bl	8005bd0 <SM_ConvertPeriodToHertz>
 8002da8:	eeb0 7a40 	vmov.f32	s14, s0
 8002dac:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e50 <FreqMenu_DrawSweepMenu+0x2dc>
 8002db0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002db4:	ee16 0a90 	vmov	r0, s13
 8002db8:	f7fd fbee 	bl	8000598 <__aeabi_f2d>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	f107 0018 	add.w	r0, r7, #24
 8002dc4:	e9cd 3400 	strd	r3, r4, [sp]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002dca:	2114      	movs	r1, #20
 8002dcc:	f00c fcb0 	bl	800f730 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dd0:	f107 0018 	add.w	r0, r7, #24
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	2302      	movs	r3, #2
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002de0:	228c      	movs	r2, #140	; 0x8c
 8002de2:	219e      	movs	r1, #158	; 0x9e
 8002de4:	f00b f900 	bl	800dfe8 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d135      	bne.n	8002e5c <FreqMenu_DrawSweepMenu+0x2e8>
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d131      	bne.n	8002e5c <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002df8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2302      	movs	r3, #2
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	22a0      	movs	r2, #160	; 0xa0
 8002e06:	2105      	movs	r1, #5
 8002e08:	4813      	ldr	r0, [pc, #76]	; (8002e58 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e0a:	f00b f8ed 	bl	800dfe8 <ILI9341_Draw_Text>
 8002e0e:	e030      	b.n	8002e72 <FreqMenu_DrawSweepMenu+0x2fe>
 8002e10:	08012ec0 	.word	0x08012ec0
 8002e14:	40000c00 	.word	0x40000c00
 8002e18:	08012ed4 	.word	0x08012ed4
 8002e1c:	08012ee8 	.word	0x08012ee8
 8002e20:	08012efc 	.word	0x08012efc
 8002e24:	08012f10 	.word	0x08012f10
 8002e28:	08012f1c 	.word	0x08012f1c
 8002e2c:	08012f20 	.word	0x08012f20
 8002e30:	20001ecd 	.word	0x20001ecd
 8002e34:	08012f28 	.word	0x08012f28
 8002e38:	20001f18 	.word	0x20001f18
 8002e3c:	08012f38 	.word	0x08012f38
 8002e40:	20001ecc 	.word	0x20001ecc
 8002e44:	08012f44 	.word	0x08012f44
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	40013400 	.word	0x40013400
 8002e50:	42f00000 	.word	0x42f00000
 8002e54:	08012f54 	.word	0x08012f54
 8002e58:	08012f60 	.word	0x08012f60
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2302      	movs	r3, #2
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e68:	22a0      	movs	r2, #160	; 0xa0
 8002e6a:	2105      	movs	r1, #5
 8002e6c:	484d      	ldr	r0, [pc, #308]	; (8002fa4 <FreqMenu_DrawSweepMenu+0x430>)
 8002e6e:	f00b f8bb 	bl	800dfe8 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <FreqMenu_DrawSweepMenu+0x434>)
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <FreqMenu_DrawSweepMenu+0x438>)
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4619      	mov	r1, r3
 8002e96:	ee17 0a90 	vmov	r0, s15
 8002e9a:	f002 fe99 	bl	8005bd0 <SM_ConvertPeriodToHertz>
 8002e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8002ea2:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002fb0 <FreqMenu_DrawSweepMenu+0x43c>
 8002ea6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002eaa:	ee16 0a90 	vmov	r0, s13
 8002eae:	f7fd fb73 	bl	8000598 <__aeabi_f2d>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	1d38      	adds	r0, r7, #4
 8002eb8:	e9cd 3400 	strd	r3, r4, [sp]
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <FreqMenu_DrawSweepMenu+0x440>)
 8002ebe:	2114      	movs	r1, #20
 8002ec0:	f00c fc36 	bl	800f730 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ec4:	1d38      	adds	r0, r7, #4
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2302      	movs	r3, #2
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ed2:	22a0      	movs	r2, #160	; 0xa0
 8002ed4:	21aa      	movs	r1, #170	; 0xaa
 8002ed6:	f00b f887 	bl	800dfe8 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <FreqMenu_DrawSweepMenu+0x444>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d10b      	bne.n	8002efe <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002ee6:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	2302      	movs	r3, #2
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	22d5      	movs	r2, #213	; 0xd5
 8002ef4:	2106      	movs	r1, #6
 8002ef6:	4831      	ldr	r0, [pc, #196]	; (8002fbc <FreqMenu_DrawSweepMenu+0x448>)
 8002ef8:	f00b f876 	bl	800dfe8 <ILI9341_Draw_Text>
 8002efc:	e00a      	b.n	8002f14 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002efe:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	2302      	movs	r3, #2
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	22d5      	movs	r2, #213	; 0xd5
 8002f0c:	2105      	movs	r1, #5
 8002f0e:	482c      	ldr	r0, [pc, #176]	; (8002fc0 <FreqMenu_DrawSweepMenu+0x44c>)
 8002f10:	f00b f86a 	bl	800dfe8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f14:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	22cc      	movs	r2, #204	; 0xcc
 8002f22:	2169      	movs	r1, #105	; 0x69
 8002f24:	4827      	ldr	r0, [pc, #156]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f26:	f00b f85f 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f2a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2302      	movs	r3, #2
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	22de      	movs	r2, #222	; 0xde
 8002f38:	2162      	movs	r1, #98	; 0x62
 8002f3a:	4823      	ldr	r0, [pc, #140]	; (8002fc8 <FreqMenu_DrawSweepMenu+0x454>)
 8002f3c:	f00b f854 	bl	800dfe8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2302      	movs	r3, #2
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	22cc      	movs	r2, #204	; 0xcc
 8002f4e:	21b7      	movs	r1, #183	; 0xb7
 8002f50:	481c      	ldr	r0, [pc, #112]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f52:	f00b f849 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	22de      	movs	r2, #222	; 0xde
 8002f64:	21ad      	movs	r1, #173	; 0xad
 8002f66:	4819      	ldr	r0, [pc, #100]	; (8002fcc <FreqMenu_DrawSweepMenu+0x458>)
 8002f68:	f00b f83e 	bl	800dfe8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f6c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2302      	movs	r3, #2
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	22cc      	movs	r2, #204	; 0xcc
 8002f7a:	f240 1107 	movw	r1, #263	; 0x107
 8002f7e:	4811      	ldr	r0, [pc, #68]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f80:	f00b f832 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f84:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	22de      	movs	r2, #222	; 0xde
 8002f92:	21fc      	movs	r1, #252	; 0xfc
 8002f94:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <FreqMenu_DrawSweepMenu+0x45c>)
 8002f96:	f00b f827 	bl	800dfe8 <ILI9341_Draw_Text>
}
 8002f9a:	bf00      	nop
 8002f9c:	3778      	adds	r7, #120	; 0x78
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	08012f60 	.word	0x08012f60
 8002fa8:	20000004 	.word	0x20000004
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	42f00000 	.word	0x42f00000
 8002fb4:	08012f70 	.word	0x08012f70
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	08012f7c 	.word	0x08012f7c
 8002fc0:	08012f84 	.word	0x08012f84
 8002fc4:	08012f8c 	.word	0x08012f8c
 8002fc8:	08012f90 	.word	0x08012f90
 8002fcc:	08012f98 	.word	0x08012f98
 8002fd0:	08012fa0 	.word	0x08012fa0

08002fd4 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d007      	beq.n	8002ff4 <FuncMenu_DrawMenu+0x20>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d009      	beq.n	8002ffc <FuncMenu_DrawMenu+0x28>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d000      	beq.n	8002fee <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8002fec:	e00a      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8002fee:	f000 f80d 	bl	800300c <FuncMenu_DrawMainMenu>
			break;
 8002ff2:	e007      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 f851 	bl	800309c <FuncMenu_DrawOutputMenu>
			break;
 8002ffa:	e003      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f000 f84d 	bl	800309c <FuncMenu_DrawOutputMenu>
			break;
 8003002:	bf00      	nop

	}
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	2302      	movs	r3, #2
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2300      	movs	r3, #0
 800301e:	220a      	movs	r2, #10
 8003020:	210a      	movs	r1, #10
 8003022:	481a      	ldr	r0, [pc, #104]	; (800308c <FuncMenu_DrawMainMenu+0x80>)
 8003024:	f00a ffe0 	bl	800dfe8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003028:	f7fd ff66 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800302c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2302      	movs	r3, #2
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	22d2      	movs	r2, #210	; 0xd2
 800303a:	2105      	movs	r1, #5
 800303c:	4814      	ldr	r0, [pc, #80]	; (8003090 <FuncMenu_DrawMainMenu+0x84>)
 800303e:	f00a ffd3 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003042:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2302      	movs	r3, #2
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2300      	movs	r3, #0
 800304e:	22d2      	movs	r2, #210	; 0xd2
 8003050:	2161      	movs	r1, #97	; 0x61
 8003052:	4810      	ldr	r0, [pc, #64]	; (8003094 <FuncMenu_DrawMainMenu+0x88>)
 8003054:	f00a ffc8 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003058:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2302      	movs	r3, #2
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2300      	movs	r3, #0
 8003064:	22d2      	movs	r2, #210	; 0xd2
 8003066:	21af      	movs	r1, #175	; 0xaf
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <FuncMenu_DrawMainMenu+0x8c>)
 800306a:	f00a ffbd 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800306e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2302      	movs	r3, #2
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	22d2      	movs	r2, #210	; 0xd2
 800307c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <FuncMenu_DrawMainMenu+0x8c>)
 8003082:	f00a ffb1 	bl	800dfe8 <ILI9341_Draw_Text>
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	08012fa8 	.word	0x08012fa8
 8003090:	08012fb4 	.word	0x08012fb4
 8003094:	08012fbc 	.word	0x08012fbc
 8003098:	08012fc4 	.word	0x08012fc4

0800309c <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
	if(SYNC_CHANNEL)
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	220a      	movs	r2, #10
 80030b4:	210a      	movs	r1, #10
 80030b6:	488d      	ldr	r0, [pc, #564]	; (80032ec <FuncMenu_DrawOutputMenu+0x250>)
 80030b8:	f00a ff96 	bl	800dfe8 <ILI9341_Draw_Text>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fd10 	bl	8005ae4 <SM_GetOutputChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80030ca:	60fb      	str	r3, [r7, #12]
	if(func_profileTmp)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8396 	beq.w	8003800 <FuncMenu_DrawOutputMenu+0x764>
	{
		switch(func_profileTmp->func)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	f200 8391 	bhi.w	8003800 <FuncMenu_DrawOutputMenu+0x764>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <FuncMenu_DrawOutputMenu+0x48>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003101 	.word	0x08003101
 80030e8:	080031f7 	.word	0x080031f7
 80030ec:	08003311 	.word	0x08003311
 80030f0:	08003407 	.word	0x08003407
 80030f4:	080034fd 	.word	0x080034fd
 80030f8:	08003615 	.word	0x08003615
 80030fc:	0800370b 	.word	0x0800370b
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003100:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2302      	movs	r3, #2
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2232      	movs	r2, #50	; 0x32
 800310e:	210a      	movs	r1, #10
 8003110:	4877      	ldr	r0, [pc, #476]	; (80032f0 <FuncMenu_DrawOutputMenu+0x254>)
 8003112:	f00a ff69 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003116:	2300      	movs	r3, #0
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	2302      	movs	r3, #2
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003122:	2246      	movs	r2, #70	; 0x46
 8003124:	210a      	movs	r1, #10
 8003126:	4873      	ldr	r0, [pc, #460]	; (80032f4 <FuncMenu_DrawOutputMenu+0x258>)
 8003128:	f00a ff5e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800312c:	2300      	movs	r3, #0
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2302      	movs	r3, #2
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003138:	225a      	movs	r2, #90	; 0x5a
 800313a:	210a      	movs	r1, #10
 800313c:	486e      	ldr	r0, [pc, #440]	; (80032f8 <FuncMenu_DrawOutputMenu+0x25c>)
 800313e:	f00a ff53 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003142:	2300      	movs	r3, #0
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800314e:	226e      	movs	r2, #110	; 0x6e
 8003150:	210a      	movs	r1, #10
 8003152:	486a      	ldr	r0, [pc, #424]	; (80032fc <FuncMenu_DrawOutputMenu+0x260>)
 8003154:	f00a ff48 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2302      	movs	r3, #2
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003164:	2282      	movs	r2, #130	; 0x82
 8003166:	210a      	movs	r1, #10
 8003168:	4865      	ldr	r0, [pc, #404]	; (8003300 <FuncMenu_DrawOutputMenu+0x264>)
 800316a:	f00a ff3d 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2302      	movs	r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317a:	2296      	movs	r2, #150	; 0x96
 800317c:	210a      	movs	r1, #10
 800317e:	4861      	ldr	r0, [pc, #388]	; (8003304 <FuncMenu_DrawOutputMenu+0x268>)
 8003180:	f00a ff32 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2302      	movs	r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003190:	22aa      	movs	r2, #170	; 0xaa
 8003192:	210a      	movs	r1, #10
 8003194:	485c      	ldr	r0, [pc, #368]	; (8003308 <FuncMenu_DrawOutputMenu+0x26c>)
 8003196:	f00a ff27 	bl	800dfe8 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800319a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	2302      	movs	r3, #2
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	22d2      	movs	r2, #210	; 0xd2
 80031a8:	2105      	movs	r1, #5
 80031aa:	4858      	ldr	r0, [pc, #352]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031ac:	f00a ff1c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80031b0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2302      	movs	r3, #2
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	22d2      	movs	r2, #210	; 0xd2
 80031be:	2161      	movs	r1, #97	; 0x61
 80031c0:	4852      	ldr	r0, [pc, #328]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031c2:	f00a ff11 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80031c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	2302      	movs	r3, #2
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2300      	movs	r3, #0
 80031d2:	22d2      	movs	r2, #210	; 0xd2
 80031d4:	21af      	movs	r1, #175	; 0xaf
 80031d6:	484d      	ldr	r0, [pc, #308]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031d8:	f00a ff06 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80031dc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	2302      	movs	r3, #2
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2300      	movs	r3, #0
 80031e8:	22d2      	movs	r2, #210	; 0xd2
 80031ea:	f44f 7182 	mov.w	r1, #260	; 0x104
 80031ee:	4847      	ldr	r0, [pc, #284]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031f0:	f00a fefa 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 80031f4:	e304      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031f6:	2300      	movs	r3, #0
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	2302      	movs	r3, #2
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003202:	2232      	movs	r2, #50	; 0x32
 8003204:	210a      	movs	r1, #10
 8003206:	483a      	ldr	r0, [pc, #232]	; (80032f0 <FuncMenu_DrawOutputMenu+0x254>)
 8003208:	f00a feee 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800320c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	2302      	movs	r3, #2
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2300      	movs	r3, #0
 8003218:	2246      	movs	r2, #70	; 0x46
 800321a:	210a      	movs	r1, #10
 800321c:	4835      	ldr	r0, [pc, #212]	; (80032f4 <FuncMenu_DrawOutputMenu+0x258>)
 800321e:	f00a fee3 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003222:	2300      	movs	r3, #0
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	2302      	movs	r3, #2
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800322e:	225a      	movs	r2, #90	; 0x5a
 8003230:	210a      	movs	r1, #10
 8003232:	4831      	ldr	r0, [pc, #196]	; (80032f8 <FuncMenu_DrawOutputMenu+0x25c>)
 8003234:	f00a fed8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003238:	2300      	movs	r3, #0
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2302      	movs	r3, #2
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003244:	226e      	movs	r2, #110	; 0x6e
 8003246:	210a      	movs	r1, #10
 8003248:	482c      	ldr	r0, [pc, #176]	; (80032fc <FuncMenu_DrawOutputMenu+0x260>)
 800324a:	f00a fecd 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800324e:	2300      	movs	r3, #0
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	2302      	movs	r3, #2
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800325a:	2282      	movs	r2, #130	; 0x82
 800325c:	210a      	movs	r1, #10
 800325e:	4828      	ldr	r0, [pc, #160]	; (8003300 <FuncMenu_DrawOutputMenu+0x264>)
 8003260:	f00a fec2 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003264:	2300      	movs	r3, #0
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2302      	movs	r3, #2
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003270:	2296      	movs	r2, #150	; 0x96
 8003272:	210a      	movs	r1, #10
 8003274:	4823      	ldr	r0, [pc, #140]	; (8003304 <FuncMenu_DrawOutputMenu+0x268>)
 8003276:	f00a feb7 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800327a:	2300      	movs	r3, #0
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	2302      	movs	r3, #2
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003286:	22aa      	movs	r2, #170	; 0xaa
 8003288:	210a      	movs	r1, #10
 800328a:	481f      	ldr	r0, [pc, #124]	; (8003308 <FuncMenu_DrawOutputMenu+0x26c>)
 800328c:	f00a feac 	bl	800dfe8 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003290:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2302      	movs	r3, #2
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	22d2      	movs	r2, #210	; 0xd2
 800329e:	2105      	movs	r1, #5
 80032a0:	481a      	ldr	r0, [pc, #104]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032a2:	f00a fea1 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032a6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	2302      	movs	r3, #2
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2300      	movs	r3, #0
 80032b2:	22d2      	movs	r2, #210	; 0xd2
 80032b4:	2161      	movs	r1, #97	; 0x61
 80032b6:	4815      	ldr	r0, [pc, #84]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032b8:	f00a fe96 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80032bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2302      	movs	r3, #2
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2300      	movs	r3, #0
 80032c8:	22d2      	movs	r2, #210	; 0xd2
 80032ca:	21af      	movs	r1, #175	; 0xaf
 80032cc:	480f      	ldr	r0, [pc, #60]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032ce:	f00a fe8b 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80032d2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2302      	movs	r3, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	22d2      	movs	r2, #210	; 0xd2
 80032e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80032e4:	4809      	ldr	r0, [pc, #36]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032e6:	f00a fe7f 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 80032ea:	e289      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
 80032ec:	08012fcc 	.word	0x08012fcc
 80032f0:	08012fdc 	.word	0x08012fdc
 80032f4:	08012fe4 	.word	0x08012fe4
 80032f8:	08012ff0 	.word	0x08012ff0
 80032fc:	08012ff8 	.word	0x08012ff8
 8003300:	08013004 	.word	0x08013004
 8003304:	08013010 	.word	0x08013010
 8003308:	08013018 	.word	0x08013018
 800330c:	08012fc4 	.word	0x08012fc4
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003310:	2300      	movs	r3, #0
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2302      	movs	r3, #2
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800331c:	2232      	movs	r2, #50	; 0x32
 800331e:	210a      	movs	r1, #10
 8003320:	48b4      	ldr	r0, [pc, #720]	; (80035f4 <FuncMenu_DrawOutputMenu+0x558>)
 8003322:	f00a fe61 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003326:	2300      	movs	r3, #0
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2302      	movs	r3, #2
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003332:	2246      	movs	r2, #70	; 0x46
 8003334:	210a      	movs	r1, #10
 8003336:	48b0      	ldr	r0, [pc, #704]	; (80035f8 <FuncMenu_DrawOutputMenu+0x55c>)
 8003338:	f00a fe56 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800333c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2302      	movs	r3, #2
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2300      	movs	r3, #0
 8003348:	225a      	movs	r2, #90	; 0x5a
 800334a:	210a      	movs	r1, #10
 800334c:	48ab      	ldr	r0, [pc, #684]	; (80035fc <FuncMenu_DrawOutputMenu+0x560>)
 800334e:	f00a fe4b 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003352:	2300      	movs	r3, #0
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2302      	movs	r3, #2
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800335e:	226e      	movs	r2, #110	; 0x6e
 8003360:	210a      	movs	r1, #10
 8003362:	48a7      	ldr	r0, [pc, #668]	; (8003600 <FuncMenu_DrawOutputMenu+0x564>)
 8003364:	f00a fe40 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003368:	2300      	movs	r3, #0
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003374:	2282      	movs	r2, #130	; 0x82
 8003376:	210a      	movs	r1, #10
 8003378:	48a2      	ldr	r0, [pc, #648]	; (8003604 <FuncMenu_DrawOutputMenu+0x568>)
 800337a:	f00a fe35 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800337e:	2300      	movs	r3, #0
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	2302      	movs	r3, #2
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800338a:	2296      	movs	r2, #150	; 0x96
 800338c:	210a      	movs	r1, #10
 800338e:	489e      	ldr	r0, [pc, #632]	; (8003608 <FuncMenu_DrawOutputMenu+0x56c>)
 8003390:	f00a fe2a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003394:	2300      	movs	r3, #0
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	2302      	movs	r3, #2
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033a0:	22aa      	movs	r2, #170	; 0xaa
 80033a2:	210a      	movs	r1, #10
 80033a4:	4899      	ldr	r0, [pc, #612]	; (800360c <FuncMenu_DrawOutputMenu+0x570>)
 80033a6:	f00a fe1f 	bl	800dfe8 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033aa:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	2302      	movs	r3, #2
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	22d2      	movs	r2, #210	; 0xd2
 80033b8:	2105      	movs	r1, #5
 80033ba:	4895      	ldr	r0, [pc, #596]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80033bc:	f00a fe14 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80033c0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2302      	movs	r3, #2
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2300      	movs	r3, #0
 80033cc:	22d2      	movs	r2, #210	; 0xd2
 80033ce:	2161      	movs	r1, #97	; 0x61
 80033d0:	488f      	ldr	r0, [pc, #572]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80033d2:	f00a fe09 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80033d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	2302      	movs	r3, #2
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	22d2      	movs	r2, #210	; 0xd2
 80033e4:	21af      	movs	r1, #175	; 0xaf
 80033e6:	488a      	ldr	r0, [pc, #552]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80033e8:	f00a fdfe 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80033ec:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	2302      	movs	r3, #2
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2300      	movs	r3, #0
 80033f8:	22d2      	movs	r2, #210	; 0xd2
 80033fa:	f44f 7182 	mov.w	r1, #260	; 0x104
 80033fe:	4884      	ldr	r0, [pc, #528]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 8003400:	f00a fdf2 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8003404:	e1fc      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2302      	movs	r3, #2
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003412:	2232      	movs	r2, #50	; 0x32
 8003414:	210a      	movs	r1, #10
 8003416:	4877      	ldr	r0, [pc, #476]	; (80035f4 <FuncMenu_DrawOutputMenu+0x558>)
 8003418:	f00a fde6 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800341c:	2300      	movs	r3, #0
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2302      	movs	r3, #2
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003428:	2246      	movs	r2, #70	; 0x46
 800342a:	210a      	movs	r1, #10
 800342c:	4872      	ldr	r0, [pc, #456]	; (80035f8 <FuncMenu_DrawOutputMenu+0x55c>)
 800342e:	f00a fddb 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003432:	2300      	movs	r3, #0
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	2302      	movs	r3, #2
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800343e:	225a      	movs	r2, #90	; 0x5a
 8003440:	210a      	movs	r1, #10
 8003442:	486e      	ldr	r0, [pc, #440]	; (80035fc <FuncMenu_DrawOutputMenu+0x560>)
 8003444:	f00a fdd0 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003448:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	2302      	movs	r3, #2
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	2300      	movs	r3, #0
 8003454:	226e      	movs	r2, #110	; 0x6e
 8003456:	210a      	movs	r1, #10
 8003458:	4869      	ldr	r0, [pc, #420]	; (8003600 <FuncMenu_DrawOutputMenu+0x564>)
 800345a:	f00a fdc5 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800345e:	2300      	movs	r3, #0
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	2302      	movs	r3, #2
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800346a:	2282      	movs	r2, #130	; 0x82
 800346c:	210a      	movs	r1, #10
 800346e:	4865      	ldr	r0, [pc, #404]	; (8003604 <FuncMenu_DrawOutputMenu+0x568>)
 8003470:	f00a fdba 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003474:	2300      	movs	r3, #0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003480:	2296      	movs	r2, #150	; 0x96
 8003482:	210a      	movs	r1, #10
 8003484:	4860      	ldr	r0, [pc, #384]	; (8003608 <FuncMenu_DrawOutputMenu+0x56c>)
 8003486:	f00a fdaf 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800348a:	2300      	movs	r3, #0
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2302      	movs	r3, #2
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003496:	22aa      	movs	r2, #170	; 0xaa
 8003498:	210a      	movs	r1, #10
 800349a:	485c      	ldr	r0, [pc, #368]	; (800360c <FuncMenu_DrawOutputMenu+0x570>)
 800349c:	f00a fda4 	bl	800dfe8 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80034a0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	2302      	movs	r3, #2
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2300      	movs	r3, #0
 80034ac:	22d2      	movs	r2, #210	; 0xd2
 80034ae:	2105      	movs	r1, #5
 80034b0:	4857      	ldr	r0, [pc, #348]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034b2:	f00a fd99 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80034b6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2302      	movs	r3, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	22d2      	movs	r2, #210	; 0xd2
 80034c4:	2161      	movs	r1, #97	; 0x61
 80034c6:	4852      	ldr	r0, [pc, #328]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034c8:	f00a fd8e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	2302      	movs	r3, #2
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	22d2      	movs	r2, #210	; 0xd2
 80034da:	21af      	movs	r1, #175	; 0xaf
 80034dc:	484c      	ldr	r0, [pc, #304]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034de:	f00a fd83 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034e2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	2302      	movs	r3, #2
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	2300      	movs	r3, #0
 80034ee:	22d2      	movs	r2, #210	; 0xd2
 80034f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034f4:	4846      	ldr	r0, [pc, #280]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034f6:	f00a fd77 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 80034fa:	e181      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fc:	2300      	movs	r3, #0
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	2302      	movs	r3, #2
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003508:	2232      	movs	r2, #50	; 0x32
 800350a:	210a      	movs	r1, #10
 800350c:	4839      	ldr	r0, [pc, #228]	; (80035f4 <FuncMenu_DrawOutputMenu+0x558>)
 800350e:	f00a fd6b 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003512:	2300      	movs	r3, #0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2302      	movs	r3, #2
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800351e:	2246      	movs	r2, #70	; 0x46
 8003520:	210a      	movs	r1, #10
 8003522:	4835      	ldr	r0, [pc, #212]	; (80035f8 <FuncMenu_DrawOutputMenu+0x55c>)
 8003524:	f00a fd60 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003528:	2300      	movs	r3, #0
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	2302      	movs	r3, #2
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003534:	225a      	movs	r2, #90	; 0x5a
 8003536:	210a      	movs	r1, #10
 8003538:	4830      	ldr	r0, [pc, #192]	; (80035fc <FuncMenu_DrawOutputMenu+0x560>)
 800353a:	f00a fd55 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800353e:	2300      	movs	r3, #0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2302      	movs	r3, #2
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800354a:	226e      	movs	r2, #110	; 0x6e
 800354c:	210a      	movs	r1, #10
 800354e:	482c      	ldr	r0, [pc, #176]	; (8003600 <FuncMenu_DrawOutputMenu+0x564>)
 8003550:	f00a fd4a 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003554:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	2302      	movs	r3, #2
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2300      	movs	r3, #0
 8003560:	2282      	movs	r2, #130	; 0x82
 8003562:	210a      	movs	r1, #10
 8003564:	4827      	ldr	r0, [pc, #156]	; (8003604 <FuncMenu_DrawOutputMenu+0x568>)
 8003566:	f00a fd3f 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800356a:	2300      	movs	r3, #0
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2302      	movs	r3, #2
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003576:	2296      	movs	r2, #150	; 0x96
 8003578:	210a      	movs	r1, #10
 800357a:	4823      	ldr	r0, [pc, #140]	; (8003608 <FuncMenu_DrawOutputMenu+0x56c>)
 800357c:	f00a fd34 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003580:	2300      	movs	r3, #0
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2302      	movs	r3, #2
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800358c:	22aa      	movs	r2, #170	; 0xaa
 800358e:	210a      	movs	r1, #10
 8003590:	481e      	ldr	r0, [pc, #120]	; (800360c <FuncMenu_DrawOutputMenu+0x570>)
 8003592:	f00a fd29 	bl	800dfe8 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003596:	f240 23fd 	movw	r3, #765	; 0x2fd
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2302      	movs	r3, #2
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	22d2      	movs	r2, #210	; 0xd2
 80035a4:	2105      	movs	r1, #5
 80035a6:	481a      	ldr	r0, [pc, #104]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035a8:	f00a fd1e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80035ac:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2302      	movs	r3, #2
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2300      	movs	r3, #0
 80035b8:	22d2      	movs	r2, #210	; 0xd2
 80035ba:	2161      	movs	r1, #97	; 0x61
 80035bc:	4814      	ldr	r0, [pc, #80]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035be:	f00a fd13 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80035c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	2302      	movs	r3, #2
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	22d2      	movs	r2, #210	; 0xd2
 80035d0:	21af      	movs	r1, #175	; 0xaf
 80035d2:	480f      	ldr	r0, [pc, #60]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035d4:	f00a fd08 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80035d8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	2302      	movs	r3, #2
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2300      	movs	r3, #0
 80035e4:	22d2      	movs	r2, #210	; 0xd2
 80035e6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80035ea:	4809      	ldr	r0, [pc, #36]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035ec:	f00a fcfc 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 80035f0:	e106      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
 80035f2:	bf00      	nop
 80035f4:	08012fdc 	.word	0x08012fdc
 80035f8:	08012fe4 	.word	0x08012fe4
 80035fc:	08012ff0 	.word	0x08012ff0
 8003600:	08012ff8 	.word	0x08012ff8
 8003604:	08013004 	.word	0x08013004
 8003608:	08013010 	.word	0x08013010
 800360c:	08013018 	.word	0x08013018
 8003610:	08012fc4 	.word	0x08012fc4
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003614:	2300      	movs	r3, #0
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2302      	movs	r3, #2
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003620:	2232      	movs	r2, #50	; 0x32
 8003622:	210a      	movs	r1, #10
 8003624:	4878      	ldr	r0, [pc, #480]	; (8003808 <FuncMenu_DrawOutputMenu+0x76c>)
 8003626:	f00a fcdf 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800362a:	2300      	movs	r3, #0
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2302      	movs	r3, #2
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003636:	2246      	movs	r2, #70	; 0x46
 8003638:	210a      	movs	r1, #10
 800363a:	4874      	ldr	r0, [pc, #464]	; (800380c <FuncMenu_DrawOutputMenu+0x770>)
 800363c:	f00a fcd4 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003640:	2300      	movs	r3, #0
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	2302      	movs	r3, #2
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800364c:	225a      	movs	r2, #90	; 0x5a
 800364e:	210a      	movs	r1, #10
 8003650:	486f      	ldr	r0, [pc, #444]	; (8003810 <FuncMenu_DrawOutputMenu+0x774>)
 8003652:	f00a fcc9 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003656:	2300      	movs	r3, #0
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	2302      	movs	r3, #2
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003662:	226e      	movs	r2, #110	; 0x6e
 8003664:	210a      	movs	r1, #10
 8003666:	486b      	ldr	r0, [pc, #428]	; (8003814 <FuncMenu_DrawOutputMenu+0x778>)
 8003668:	f00a fcbe 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800366c:	2300      	movs	r3, #0
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	2302      	movs	r3, #2
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003678:	2282      	movs	r2, #130	; 0x82
 800367a:	210a      	movs	r1, #10
 800367c:	4866      	ldr	r0, [pc, #408]	; (8003818 <FuncMenu_DrawOutputMenu+0x77c>)
 800367e:	f00a fcb3 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003682:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2302      	movs	r3, #2
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2300      	movs	r3, #0
 800368e:	2296      	movs	r2, #150	; 0x96
 8003690:	210a      	movs	r1, #10
 8003692:	4862      	ldr	r0, [pc, #392]	; (800381c <FuncMenu_DrawOutputMenu+0x780>)
 8003694:	f00a fca8 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003698:	2300      	movs	r3, #0
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	2302      	movs	r3, #2
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036a4:	22aa      	movs	r2, #170	; 0xaa
 80036a6:	210a      	movs	r1, #10
 80036a8:	485d      	ldr	r0, [pc, #372]	; (8003820 <FuncMenu_DrawOutputMenu+0x784>)
 80036aa:	f00a fc9d 	bl	800dfe8 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80036ae:	f240 23fd 	movw	r3, #765	; 0x2fd
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	2302      	movs	r3, #2
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	22d2      	movs	r2, #210	; 0xd2
 80036bc:	2105      	movs	r1, #5
 80036be:	4859      	ldr	r0, [pc, #356]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80036c0:	f00a fc92 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80036c4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	2302      	movs	r3, #2
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	22d2      	movs	r2, #210	; 0xd2
 80036d2:	2161      	movs	r1, #97	; 0x61
 80036d4:	4853      	ldr	r0, [pc, #332]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80036d6:	f00a fc87 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80036da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	2302      	movs	r3, #2
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	22d2      	movs	r2, #210	; 0xd2
 80036e8:	21af      	movs	r1, #175	; 0xaf
 80036ea:	484e      	ldr	r0, [pc, #312]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80036ec:	f00a fc7c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80036f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2302      	movs	r3, #2
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	22d2      	movs	r2, #210	; 0xd2
 80036fe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003702:	4848      	ldr	r0, [pc, #288]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 8003704:	f00a fc70 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 8003708:	e07a      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800370a:	2300      	movs	r3, #0
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2302      	movs	r3, #2
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003716:	2232      	movs	r2, #50	; 0x32
 8003718:	210a      	movs	r1, #10
 800371a:	483b      	ldr	r0, [pc, #236]	; (8003808 <FuncMenu_DrawOutputMenu+0x76c>)
 800371c:	f00a fc64 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003720:	2300      	movs	r3, #0
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	2302      	movs	r3, #2
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800372c:	2246      	movs	r2, #70	; 0x46
 800372e:	210a      	movs	r1, #10
 8003730:	4836      	ldr	r0, [pc, #216]	; (800380c <FuncMenu_DrawOutputMenu+0x770>)
 8003732:	f00a fc59 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003736:	2300      	movs	r3, #0
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	2302      	movs	r3, #2
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003742:	225a      	movs	r2, #90	; 0x5a
 8003744:	210a      	movs	r1, #10
 8003746:	4832      	ldr	r0, [pc, #200]	; (8003810 <FuncMenu_DrawOutputMenu+0x774>)
 8003748:	f00a fc4e 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800374c:	2300      	movs	r3, #0
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	2302      	movs	r3, #2
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003758:	226e      	movs	r2, #110	; 0x6e
 800375a:	210a      	movs	r1, #10
 800375c:	482d      	ldr	r0, [pc, #180]	; (8003814 <FuncMenu_DrawOutputMenu+0x778>)
 800375e:	f00a fc43 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003762:	2300      	movs	r3, #0
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	2302      	movs	r3, #2
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800376e:	2282      	movs	r2, #130	; 0x82
 8003770:	210a      	movs	r1, #10
 8003772:	4829      	ldr	r0, [pc, #164]	; (8003818 <FuncMenu_DrawOutputMenu+0x77c>)
 8003774:	f00a fc38 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003778:	2300      	movs	r3, #0
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	2302      	movs	r3, #2
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003784:	2296      	movs	r2, #150	; 0x96
 8003786:	210a      	movs	r1, #10
 8003788:	4824      	ldr	r0, [pc, #144]	; (800381c <FuncMenu_DrawOutputMenu+0x780>)
 800378a:	f00a fc2d 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800378e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2302      	movs	r3, #2
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2300      	movs	r3, #0
 800379a:	22aa      	movs	r2, #170	; 0xaa
 800379c:	210a      	movs	r1, #10
 800379e:	4820      	ldr	r0, [pc, #128]	; (8003820 <FuncMenu_DrawOutputMenu+0x784>)
 80037a0:	f00a fc22 	bl	800dfe8 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80037a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2302      	movs	r3, #2
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2300      	movs	r3, #0
 80037b0:	22d2      	movs	r2, #210	; 0xd2
 80037b2:	2105      	movs	r1, #5
 80037b4:	481b      	ldr	r0, [pc, #108]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80037b6:	f00a fc17 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80037ba:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	2302      	movs	r3, #2
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	22d2      	movs	r2, #210	; 0xd2
 80037c8:	2161      	movs	r1, #97	; 0x61
 80037ca:	4816      	ldr	r0, [pc, #88]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80037cc:	f00a fc0c 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80037d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2302      	movs	r3, #2
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	22d2      	movs	r2, #210	; 0xd2
 80037de:	21af      	movs	r1, #175	; 0xaf
 80037e0:	4811      	ldr	r0, [pc, #68]	; (8003828 <FuncMenu_DrawOutputMenu+0x78c>)
 80037e2:	f00a fc01 	bl	800dfe8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80037e6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2302      	movs	r3, #2
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	22d2      	movs	r2, #210	; 0xd2
 80037f4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037f8:	480a      	ldr	r0, [pc, #40]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80037fa:	f00a fbf5 	bl	800dfe8 <ILI9341_Draw_Text>
				break;
 80037fe:	bf00      	nop
		}

	}


}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	08012fdc 	.word	0x08012fdc
 800380c:	08012fe4 	.word	0x08012fe4
 8003810:	08012ff0 	.word	0x08012ff0
 8003814:	08012ff8 	.word	0x08012ff8
 8003818:	08013004 	.word	0x08013004
 800381c:	08013010 	.word	0x08013010
 8003820:	08013018 	.word	0x08013018
 8003824:	08012fc4 	.word	0x08012fc4
 8003828:	08013020 	.word	0x08013020

0800382c <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d007      	beq.n	800384c <GainMenu_DrawMenu+0x20>
 800383c:	2b03      	cmp	r3, #3
 800383e:	d008      	beq.n	8003852 <GainMenu_DrawMenu+0x26>
 8003840:	2b01      	cmp	r3, #1
 8003842:	d000      	beq.n	8003846 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003844:	e008      	b.n	8003858 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003846:	f000 f80b 	bl	8003860 <GainMenu_DrawMainMenu>
			break;
 800384a:	e005      	b.n	8003858 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 800384c:	f000 f850 	bl	80038f0 <GainMenu_DrawSignalMenu>
			break;
 8003850:	e002      	b.n	8003858 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003852:	f000 f863 	bl	800391c <GainMenu_DrawSyncMenu>
			break;
 8003856:	bf00      	nop

	}
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	2302      	movs	r3, #2
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	220a      	movs	r2, #10
 8003874:	210a      	movs	r1, #10
 8003876:	481a      	ldr	r0, [pc, #104]	; (80038e0 <GainMenu_DrawMainMenu+0x80>)
 8003878:	f00a fbb6 	bl	800dfe8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800387c:	f7fd fb3c 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003880:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	2302      	movs	r3, #2
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	22d2      	movs	r2, #210	; 0xd2
 800388e:	2105      	movs	r1, #5
 8003890:	4814      	ldr	r0, [pc, #80]	; (80038e4 <GainMenu_DrawMainMenu+0x84>)
 8003892:	f00a fba9 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003896:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	2302      	movs	r3, #2
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	22d2      	movs	r2, #210	; 0xd2
 80038a4:	2161      	movs	r1, #97	; 0x61
 80038a6:	4810      	ldr	r0, [pc, #64]	; (80038e8 <GainMenu_DrawMainMenu+0x88>)
 80038a8:	f00a fb9e 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80038ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2302      	movs	r3, #2
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	22d2      	movs	r2, #210	; 0xd2
 80038ba:	21af      	movs	r1, #175	; 0xaf
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <GainMenu_DrawMainMenu+0x8c>)
 80038be:	f00a fb93 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038c2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	2302      	movs	r3, #2
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2300      	movs	r3, #0
 80038ce:	22d2      	movs	r2, #210	; 0xd2
 80038d0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038d4:	4805      	ldr	r0, [pc, #20]	; (80038ec <GainMenu_DrawMainMenu+0x8c>)
 80038d6:	f00a fb87 	bl	800dfe8 <ILI9341_Draw_Text>
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	08013028 	.word	0x08013028
 80038e4:	08013034 	.word	0x08013034
 80038e8:	0801303c 	.word	0x0801303c
 80038ec:	08013044 	.word	0x08013044

080038f0 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80038f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2302      	movs	r3, #2
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2300      	movs	r3, #0
 8003902:	220a      	movs	r2, #10
 8003904:	210a      	movs	r1, #10
 8003906:	4804      	ldr	r0, [pc, #16]	; (8003918 <GainMenu_DrawSignalMenu+0x28>)
 8003908:	f00a fb6e 	bl	800dfe8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800390c:	f7fd faf4 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	0801304c 	.word	0x0801304c

0800391c <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2302      	movs	r3, #2
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	220a      	movs	r2, #10
 8003930:	210a      	movs	r1, #10
 8003932:	4804      	ldr	r0, [pc, #16]	; (8003944 <GainMenu_DrawSyncMenu+0x28>)
 8003934:	f00a fb58 	bl	800dfe8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003938:	f7fd fade 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	0801305c 	.word	0x0801305c

08003948 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d007      	beq.n	8003968 <ToplevelMenu_DrawMenu+0x20>
 8003958:	2b03      	cmp	r3, #3
 800395a:	d008      	beq.n	800396e <ToplevelMenu_DrawMenu+0x26>
 800395c:	2b01      	cmp	r3, #1
 800395e:	d000      	beq.n	8003962 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003960:	e008      	b.n	8003974 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003962:	f000 f80b 	bl	800397c <ToplevelMenu_DrawMainMenu>
			break;
 8003966:	e005      	b.n	8003974 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003968:	f000 f848 	bl	80039fc <ToplevelMenu_DrawOutputMenu>
			break;
 800396c:	e002      	b.n	8003974 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 800396e:	f000 f88f 	bl	8003a90 <ToplevelMenu_DrawInputMenu>
			break;
 8003972:	bf00      	nop

	}
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 8003982:	481a      	ldr	r0, [pc, #104]	; (80039ec <ToplevelMenu_DrawMainMenu+0x70>)
 8003984:	f00b fecc 	bl	800f720 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003988:	f7fd fab6 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800398c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	2302      	movs	r3, #2
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	22d2      	movs	r2, #210	; 0xd2
 800399a:	2106      	movs	r1, #6
 800399c:	4814      	ldr	r0, [pc, #80]	; (80039f0 <ToplevelMenu_DrawMainMenu+0x74>)
 800399e:	f00a fb23 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80039a2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2302      	movs	r3, #2
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	22d2      	movs	r2, #210	; 0xd2
 80039b0:	215d      	movs	r1, #93	; 0x5d
 80039b2:	4810      	ldr	r0, [pc, #64]	; (80039f4 <ToplevelMenu_DrawMainMenu+0x78>)
 80039b4:	f00a fb18 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2302      	movs	r3, #2
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	22d2      	movs	r2, #210	; 0xd2
 80039c6:	21af      	movs	r1, #175	; 0xaf
 80039c8:	480b      	ldr	r0, [pc, #44]	; (80039f8 <ToplevelMenu_DrawMainMenu+0x7c>)
 80039ca:	f00a fb0d 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80039ce:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	2302      	movs	r3, #2
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2300      	movs	r3, #0
 80039da:	22d2      	movs	r2, #210	; 0xd2
 80039dc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80039e0:	4805      	ldr	r0, [pc, #20]	; (80039f8 <ToplevelMenu_DrawMainMenu+0x7c>)
 80039e2:	f00a fb01 	bl	800dfe8 <ILI9341_Draw_Text>


}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	0801306c 	.word	0x0801306c
 80039f0:	08013080 	.word	0x08013080
 80039f4:	08013088 	.word	0x08013088
 80039f8:	08013090 	.word	0x08013090

080039fc <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	2302      	movs	r3, #2
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	220a      	movs	r2, #10
 8003a10:	210a      	movs	r1, #10
 8003a12:	481a      	ldr	r0, [pc, #104]	; (8003a7c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003a14:	f00a fae8 	bl	800dfe8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a18:	f7fd fa6e 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a1c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	2302      	movs	r3, #2
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2300      	movs	r3, #0
 8003a28:	22d2      	movs	r2, #210	; 0xd2
 8003a2a:	210d      	movs	r1, #13
 8003a2c:	4814      	ldr	r0, [pc, #80]	; (8003a80 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003a2e:	f00a fadb 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a32:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	22d2      	movs	r2, #210	; 0xd2
 8003a40:	2163      	movs	r1, #99	; 0x63
 8003a42:	4810      	ldr	r0, [pc, #64]	; (8003a84 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003a44:	f00a fad0 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	2302      	movs	r3, #2
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2300      	movs	r3, #0
 8003a54:	22d2      	movs	r2, #210	; 0xd2
 8003a56:	21b0      	movs	r1, #176	; 0xb0
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003a5a:	f00a fac5 	bl	800dfe8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a5e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	2302      	movs	r3, #2
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	22d2      	movs	r2, #210	; 0xd2
 8003a6c:	21f5      	movs	r1, #245	; 0xf5
 8003a6e:	4807      	ldr	r0, [pc, #28]	; (8003a8c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003a70:	f00a faba 	bl	800dfe8 <ILI9341_Draw_Text>
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	08013098 	.word	0x08013098
 8003a80:	080130a0 	.word	0x080130a0
 8003a84:	080130a8 	.word	0x080130a8
 8003a88:	080130b0 	.word	0x080130b0
 8003a8c:	080130b8 	.word	0x080130b8

08003a90 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	220a      	movs	r2, #10
 8003aa4:	210a      	movs	r1, #10
 8003aa6:	4804      	ldr	r0, [pc, #16]	; (8003ab8 <ToplevelMenu_DrawInputMenu+0x28>)
 8003aa8:	f00a fa9e 	bl	800dfe8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003aac:	f7fd fa24 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	080130c0 	.word	0x080130c0

08003abc <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <BiasMenu_getStatus+0x14>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20001ec9 	.word	0x20001ec9

08003ad4 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 8003ad8:	480b      	ldr	r0, [pc, #44]	; (8003b08 <BiasMenuEntryHandler+0x34>)
 8003ada:	f00b fe21 	bl	800f720 <puts>
#endif

	DM_RefreshScreen();
 8003ade:	f7fd fccb 	bl	8001478 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <BiasMenuEntryHandler+0x38>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <BiasMenuEntryHandler+0x3c>)
 8003aea:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003af0:	f001 f9f4 	bl	8004edc <BO_GetDcBiasEncoderValue>
 8003af4:	4603      	mov	r3, r0
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <BiasMenuEntryHandler+0x3c>)
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <BiasMenuEntryHandler+0x40>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003b02:	230e      	movs	r3, #14
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	080130c8 	.word	0x080130c8
 8003b0c:	20001ec9 	.word	0x20001ec9
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	20001ecb 	.word	0x20001ecb

08003b18 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 8003b1c:	4807      	ldr	r0, [pc, #28]	; (8003b3c <BiasMenuInputHandler+0x24>)
 8003b1e:	f00b fdff 	bl	800f720 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003b22:	2001      	movs	r0, #1
 8003b24:	f001 fff4 	bl	8005b10 <SM_GetEncoderValue>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f9e2 	bl	8004ef4 <BO_ModifyOutput>

	eNewEvent = evIdle;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <BiasMenuInputHandler+0x28>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003b36:	230e      	movs	r3, #14
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	080130ec 	.word	0x080130ec
 8003b40:	20001ecb 	.word	0x20001ecb

08003b44 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 8003b48:	4808      	ldr	r0, [pc, #32]	; (8003b6c <BiasMenuExitHandler+0x28>)
 8003b4a:	f00b fde9 	bl	800f720 <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <BiasMenuExitHandler+0x2c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003b54:	f7fd fc90 	bl	8001478 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003b58:	4806      	ldr	r0, [pc, #24]	; (8003b74 <BiasMenuExitHandler+0x30>)
 8003b5a:	f00b fde1 	bl	800f720 <puts>
#endif

	eNewEvent = evIdle;
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <BiasMenuExitHandler+0x34>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003b64:	2301      	movs	r3, #1
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	08013110 	.word	0x08013110
 8003b70:	20001ec9 	.word	0x20001ec9
 8003b74:	08013134 	.word	0x08013134
 8003b78:	20001ecb 	.word	0x20001ecb

08003b7c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003b80:	4bb8      	ldr	r3, [pc, #736]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b0e      	cmp	r3, #14
 8003b86:	f200 8216 	bhi.w	8003fb6 <EM_ProcessEvent+0x43a>
 8003b8a:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <EM_ProcessEvent+0x14>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003bcd 	.word	0x08003bcd
 8003b94:	08003bff 	.word	0x08003bff
 8003b98:	08003c85 	.word	0x08003c85
 8003b9c:	08003ca3 	.word	0x08003ca3
 8003ba0:	08003cef 	.word	0x08003cef
 8003ba4:	08003d21 	.word	0x08003d21
 8003ba8:	08003d53 	.word	0x08003d53
 8003bac:	08003d9f 	.word	0x08003d9f
 8003bb0:	08003dd1 	.word	0x08003dd1
 8003bb4:	08003fb7 	.word	0x08003fb7
 8003bb8:	08003e03 	.word	0x08003e03
 8003bbc:	08003e95 	.word	0x08003e95
 8003bc0:	08003ec7 	.word	0x08003ec7
 8003bc4:	08003ef7 	.word	0x08003ef7
 8003bc8:	08003f81 	.word	0x08003f81
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003bcc:	48a6      	ldr	r0, [pc, #664]	; (8003e68 <EM_ProcessEvent+0x2ec>)
 8003bce:	f00b fda7 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003bd2:	4ba6      	ldr	r3, [pc, #664]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003bda:	f000 ffbf 	bl	8004b5c <ToplevelOutputMenuEntryHandler>
 8003bde:	4603      	mov	r3, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	4ba0      	ldr	r3, [pc, #640]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003be4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003be6:	4ba1      	ldr	r3, [pc, #644]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	f040 81e5 	bne.w	8003fba <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003bf0:	f000 ffe0 	bl	8004bb4 <ToplevelInputMenuEntryHandler>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b9a      	ldr	r3, [pc, #616]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003bfa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003bfc:	e1dd      	b.n	8003fba <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 8003bfe:	489c      	ldr	r0, [pc, #624]	; (8003e70 <EM_ProcessEvent+0x2f4>)
 8003c00:	f00b fd8e 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003c04:	4b99      	ldr	r3, [pc, #612]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b06      	cmp	r3, #6
 8003c0a:	d105      	bne.n	8003c18 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003c0c:	f000 ffbc 	bl	8004b88 <ToplevelOutputMenuExitHandler>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b93      	ldr	r3, [pc, #588]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c16:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003c18:	4b94      	ldr	r3, [pc, #592]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d108      	bne.n	8003c32 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f000 ff8b 	bl	8004b3c <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003c26:	f000 fd85 	bl	8004734 <FuncMainMenuEntryHandler>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b8d      	ldr	r3, [pc, #564]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c30:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003c32:	4b8e      	ldr	r3, [pc, #568]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d108      	bne.n	8003c4c <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f000 ff7e 	bl	8004b3c <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003c40:	f000 fb5c 	bl	80042fc <FreqMainMenuEntryHandler>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b86      	ldr	r3, [pc, #536]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c4a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003c4c:	4b87      	ldr	r3, [pc, #540]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d108      	bne.n	8003c66 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c54:	2000      	movs	r0, #0
 8003c56:	f000 ff71 	bl	8004b3c <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003c5a:	f000 fe71 	bl	8004940 <GainMainMenuEntryHandler>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b80      	ldr	r3, [pc, #512]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c64:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003c66:	4b81      	ldr	r3, [pc, #516]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	f040 81a7 	bne.w	8003fbe <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f000 ff63 	bl	8004b3c <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003c76:	f7ff ff2d 	bl	8003ad4 <BiasMenuEntryHandler>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b79      	ldr	r3, [pc, #484]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c80:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003c82:	e19c      	b.n	8003fbe <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003c84:	487b      	ldr	r0, [pc, #492]	; (8003e74 <EM_ProcessEvent+0x2f8>)
 8003c86:	f00b fd4b 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003c8a:	4b78      	ldr	r3, [pc, #480]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	f040 8197 	bne.w	8003fc2 <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003c94:	f000 ffa4 	bl	8004be0 <ToplevelInputMenuExitHandler>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b71      	ldr	r3, [pc, #452]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c9e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003ca0:	e18f      	b.n	8003fc2 <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003ca2:	4875      	ldr	r0, [pc, #468]	; (8003e78 <EM_ProcessEvent+0x2fc>)
 8003ca4:	f00b fd3c 	bl	800f720 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003ca8:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b06      	cmp	r3, #6
 8003cae:	d108      	bne.n	8003cc2 <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 8003cb0:	f000 fd56 	bl	8004760 <FuncMainMenuExitHandler>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003cba:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003cbc:	2002      	movs	r0, #2
 8003cbe:	f000 ff3d 	bl	8004b3c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003cc2:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003cca:	f000 fd65 	bl	8004798 <FuncSignalMenuEntryHandler>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b64      	ldr	r3, [pc, #400]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003cd4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003cd6:	4b65      	ldr	r3, [pc, #404]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	f040 8173 	bne.w	8003fc6 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003ce0:	f000 fdbe 	bl	8004860 <FuncSyncMenuEntryHandler>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003cea:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003cec:	e16b      	b.n	8003fc6 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 8003cee:	4863      	ldr	r0, [pc, #396]	; (8003e7c <EM_ProcessEvent+0x300>)
 8003cf0:	f00b fd16 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003cf4:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d105      	bne.n	8003d08 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003cfc:	f000 fd84 	bl	8004808 <FuncSignalMenuInputHandler>
 8003d00:	4603      	mov	r3, r0
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b57      	ldr	r3, [pc, #348]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d06:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003d08:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	f040 815c 	bne.w	8003fca <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003d12:	f000 fd8f 	bl	8004834 <FuncSignalMenuExitHandler>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b52      	ldr	r3, [pc, #328]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d1c:	701a      	strb	r2, [r3, #0]

			}

			break;
 8003d1e:	e154      	b.n	8003fca <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 8003d20:	4857      	ldr	r0, [pc, #348]	; (8003e80 <EM_ProcessEvent+0x304>)
 8003d22:	f00b fcfd 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d105      	bne.n	8003d3a <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 8003d2e:	f000 fdcf 	bl	80048d0 <FuncSyncMenuInputHandler>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b4b      	ldr	r3, [pc, #300]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d38:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	f040 8145 	bne.w	8003fce <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003d44:	f000 fdda 	bl	80048fc <FuncSyncMenuExitHandler>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b45      	ldr	r3, [pc, #276]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d4e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003d50:	e13d      	b.n	8003fce <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003d52:	484c      	ldr	r0, [pc, #304]	; (8003e84 <EM_ProcessEvent+0x308>)
 8003d54:	f00b fce4 	bl	800f720 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003d58:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d108      	bne.n	8003d72 <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 8003d60:	f000 fe04 	bl	800496c <GainMainMenuExitHandler>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d6a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003d6c:	2002      	movs	r0, #2
 8003d6e:	f000 fee5 	bl	8004b3c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003d72:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003d7a:	f000 fe13 	bl	80049a4 <GainSignalMenuEntryHandler>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b38      	ldr	r3, [pc, #224]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d84:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	f040 8121 	bne.w	8003fd2 <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003d90:	f000 fe68 	bl	8004a64 <GainSyncMenuEntryHandler>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d9a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003d9c:	e119      	b.n	8003fd2 <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 8003d9e:	483a      	ldr	r0, [pc, #232]	; (8003e88 <EM_ProcessEvent+0x30c>)
 8003da0:	f00b fcbe 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003da4:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d105      	bne.n	8003db8 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 8003dac:	f000 fe2e 	bl	8004a0c <GainSignalMenuInputHandler>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003db6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003db8:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	f040 810a 	bne.w	8003fd6 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 8003dc2:	f000 fe39 	bl	8004a38 <GainSignalMenuExitHandler>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003dcc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003dce:	e102      	b.n	8003fd6 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 8003dd0:	482e      	ldr	r0, [pc, #184]	; (8003e8c <EM_ProcessEvent+0x310>)
 8003dd2:	f00b fca5 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003dd6:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d105      	bne.n	8003dea <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 8003dde:	f000 fe75 	bl	8004acc <GainSyncMenuInputHandler>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003de8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	f040 80f3 	bne.w	8003fda <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 8003df4:	f000 fe80 	bl	8004af8 <GainSyncMenuExitHandler>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003dfe:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e00:	e0eb      	b.n	8003fda <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003e02:	4823      	ldr	r0, [pc, #140]	; (8003e90 <EM_ProcessEvent+0x314>)
 8003e04:	f00b fc8c 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d108      	bne.n	8003e22 <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 8003e10:	f000 fa8a 	bl	8004328 <FreqMainMenuExitHandler>
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e1a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f000 fe8d 	bl	8004b3c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003e2a:	f000 fa9f 	bl	800436c <FreqPresetMenuEntryHandler>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e34:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d105      	bne.n	8003e4a <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003e3e:	f000 faf5 	bl	800442c <FreqAdjustMenuEntryHandler>
 8003e42:	4603      	mov	r3, r0
 8003e44:	461a      	mov	r2, r3
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e48:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	f040 80c5 	bne.w	8003fde <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003e54:	f000 f8ea 	bl	800402c <FreqSweepMenuEntryHandler>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b01      	ldr	r3, [pc, #4]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e5e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e60:	e0bd      	b.n	8003fde <EM_ProcessEvent+0x462>
 8003e62:	bf00      	nop
 8003e64:	20001eca 	.word	0x20001eca
 8003e68:	0801314c 	.word	0x0801314c
 8003e6c:	20001ecb 	.word	0x20001ecb
 8003e70:	08013158 	.word	0x08013158
 8003e74:	08013174 	.word	0x08013174
 8003e78:	08013190 	.word	0x08013190
 8003e7c:	080131a8 	.word	0x080131a8
 8003e80:	080131c0 	.word	0x080131c0
 8003e84:	080131d8 	.word	0x080131d8
 8003e88:	080131f0 	.word	0x080131f0
 8003e8c:	08013208 	.word	0x08013208
 8003e90:	08013220 	.word	0x08013220

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003e94:	4857      	ldr	r0, [pc, #348]	; (8003ff4 <EM_ProcessEvent+0x478>)
 8003e96:	f00b fc43 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003e9a:	4b57      	ldr	r3, [pc, #348]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d105      	bne.n	8003eae <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003ea2:	f000 fa97 	bl	80043d4 <FreqPresetMenuInputHandler>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b54      	ldr	r3, [pc, #336]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003eac:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003eae:	4b52      	ldr	r3, [pc, #328]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	f040 8095 	bne.w	8003fe2 <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003eb8:	f000 faa2 	bl	8004400 <FreqPresetMenuExitHandler>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003ec2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ec4:	e08d      	b.n	8003fe2 <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003ec6:	484e      	ldr	r0, [pc, #312]	; (8004000 <EM_ProcessEvent+0x484>)
 8003ec8:	f00b fc2a 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003ecc:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d105      	bne.n	8003ee0 <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003ed4:	f000 facc 	bl	8004470 <FreqAdjustMenuInputHandler>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b47      	ldr	r3, [pc, #284]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003ede:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003ee0:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d17e      	bne.n	8003fe6 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003ee8:	f000 fad4 	bl	8004494 <FreqAdjustMenuExitHandler>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003ef2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ef4:	e077      	b.n	8003fe6 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8003ef6:	4843      	ldr	r0, [pc, #268]	; (8004004 <EM_ProcessEvent+0x488>)
 8003ef8:	f00b fc12 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003efc:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8003f04:	2007      	movs	r0, #7
 8003f06:	f000 f8ed 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b3b      	ldr	r3, [pc, #236]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f10:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003f12:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d106      	bne.n	8003f28 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8003f1a:	2008      	movs	r0, #8
 8003f1c:	f000 f8e2 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f26:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003f28:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d106      	bne.n	8003f3e <EM_ProcessEvent+0x3c2>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003f30:	2009      	movs	r0, #9
 8003f32:	f000 f8d7 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f3c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d106      	bne.n	8003f54 <EM_ProcessEvent+0x3d8>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8003f46:	200a      	movs	r0, #10
 8003f48:	f000 f8cc 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f52:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8003f54:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d106      	bne.n	8003f6a <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8003f5c:	200b      	movs	r0, #11
 8003f5e:	f000 f8c1 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f68:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d13b      	bne.n	8003fea <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 8003f72:	f000 f99f 	bl	80042b4 <FreqSweepMenuExitHandler>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f7c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f7e:	e034      	b.n	8003fea <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 8003f80:	4821      	ldr	r0, [pc, #132]	; (8004008 <EM_ProcessEvent+0x48c>)
 8003f82:	f00b fbcd 	bl	800f720 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d105      	bne.n	8003f9a <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 8003f8e:	f7ff fdc3 	bl	8003b18 <BiasMenuInputHandler>
 8003f92:	4603      	mov	r3, r0
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f98:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f9a:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d125      	bne.n	8003fee <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 8003fa2:	f7ff fdcf 	bl	8003b44 <BiasMenuExitHandler>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003fac:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003fae:	2002      	movs	r0, #2
 8003fb0:	f000 fdc4 	bl	8004b3c <ToplevelMenu_setStatus>
			}

			break;
 8003fb4:	e01b      	b.n	8003fee <EM_ProcessEvent+0x472>

		default:
			break;
 8003fb6:	bf00      	nop
 8003fb8:	e01a      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fba:	bf00      	nop
 8003fbc:	e018      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fbe:	bf00      	nop
 8003fc0:	e016      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fc2:	bf00      	nop
 8003fc4:	e014      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fc6:	bf00      	nop
 8003fc8:	e012      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fca:	bf00      	nop
 8003fcc:	e010      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fce:	bf00      	nop
 8003fd0:	e00e      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fd2:	bf00      	nop
 8003fd4:	e00c      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fd6:	bf00      	nop
 8003fd8:	e00a      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fda:	bf00      	nop
 8003fdc:	e008      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fde:	bf00      	nop
 8003fe0:	e006      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fee:	bf00      	nop
	}

}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	08013238 	.word	0x08013238
 8003ff8:	20001ecb 	.word	0x20001ecb
 8003ffc:	20001eca 	.word	0x20001eca
 8004000:	08013250 	.word	0x08013250
 8004004:	08013268 	.word	0x08013268
 8004008:	08013280 	.word	0x08013280

0800400c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <EM_SetNewEvent+0x1c>)
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	7013      	strb	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20001ecb 	.word	0x20001ecb

0800402c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8004030:	4825      	ldr	r0, [pc, #148]	; (80040c8 <FreqSweepMenuEntryHandler+0x9c>)
 8004032:	f00b fb75 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 8004036:	f7fd fa1f 	bl	8001478 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <FreqSweepMenuEntryHandler+0xa0>)
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <FreqSweepMenuEntryHandler+0xa4>)
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	d008      	beq.n	8004068 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <FreqSweepMenuEntryHandler+0xa0>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <FreqSweepMenuEntryHandler+0xa4>)
 8004064:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <FreqSweepMenuEntryHandler+0xa4>)
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004072:	eef4 7a47 	vcmp.f32	s15, s14
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	d101      	bne.n	8004080 <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 800407c:	f000 fa20 	bl	80044c0 <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004080:	2000      	movs	r0, #0
 8004082:	f000 fa77 	bl	8004574 <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004086:	2000      	movs	r0, #0
 8004088:	f000 fad2 	bl	8004630 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 800408c:	f000 fb0c 	bl	80046a8 <_getCalculatedSweepFrequencyInHertz>
 8004090:	eef0 7a40 	vmov.f32	s15, s0
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <FreqSweepMenuEntryHandler+0xa8>)
 8004096:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <FreqSweepMenuEntryHandler+0xac>)
 800409c:	2200      	movs	r2, #0
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80040a0:	2009      	movs	r0, #9
 80040a2:	f000 f81f 	bl	80040e4 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <FreqSweepMenuEntryHandler+0xac>)
 80040a8:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <FreqSweepMenuEntryHandler+0xac>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <FreqSweepMenuEntryHandler+0xb0>)
 80040b6:	2204      	movs	r2, #4
 80040b8:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <FreqSweepMenuEntryHandler+0xb4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80040c0:	230d      	movs	r3, #13
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	08013290 	.word	0x08013290
 80040cc:	40013400 	.word	0x40013400
 80040d0:	20000004 	.word	0x20000004
 80040d4:	20001f18 	.word	0x20001f18
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	20001ece 	.word	0x20001ece
 80040e0:	20001ecb 	.word	0x20001ecb

080040e4 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 80040ee:	4865      	ldr	r0, [pc, #404]	; (8004284 <FreqSweepMenuInputHandler+0x1a0>)
 80040f0:	f00b fb16 	bl	800f720 <puts>
	#endif



	switch(pEvent)
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	3b07      	subs	r3, #7
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	f200 80ba 	bhi.w	8004272 <FreqSweepMenuInputHandler+0x18e>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <FreqSweepMenuInputHandler+0x20>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004119 	.word	0x08004119
 8004108:	08004139 	.word	0x08004139
 800410c:	08004263 	.word	0x08004263
 8004110:	0800426b 	.word	0x0800426b
 8004114:	08004179 	.word	0x08004179
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8004118:	485b      	ldr	r0, [pc, #364]	; (8004288 <FreqSweepMenuInputHandler+0x1a4>)
 800411a:	f00b fb01 	bl	800f720 <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 800411e:	4b5b      	ldr	r3, [pc, #364]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4a5a      	ldr	r2, [pc, #360]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 8004124:	f083 0301 	eor.w	r3, r3, #1
 8004128:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 800412a:	4b58      	ldr	r3, [pc, #352]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a57      	ldr	r2, [pc, #348]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 8004130:	f083 0301 	eor.w	r3, r3, #1
 8004134:	6013      	str	r3, [r2, #0]
			break;
 8004136:	e09d      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8004138:	4855      	ldr	r0, [pc, #340]	; (8004290 <FreqSweepMenuInputHandler+0x1ac>)
 800413a:	f00b faf1 	bl	800f720 <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 800413e:	4b55      	ldr	r3, [pc, #340]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	4b52      	ldr	r3, [pc, #328]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 800414a:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 800414c:	4b51      	ldr	r3, [pc, #324]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d004      	beq.n	800415e <FreqSweepMenuInputHandler+0x7a>
 8004154:	2b02      	cmp	r3, #2
 8004156:	d008      	beq.n	800416a <FreqSweepMenuInputHandler+0x86>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <FreqSweepMenuInputHandler+0x80>
 800415c:	e006      	b.n	800416c <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 800415e:	f000 f9af 	bl	80044c0 <_setSweepModeDown>
					break;
 8004162:	e003      	b.n	800416c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 8004164:	f000 f9dc 	bl	8004520 <_setSweepModeUp>
					break;
 8004168:	e000      	b.n	800416c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 800416a:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 800416c:	4b4a      	ldr	r3, [pc, #296]	; (8004298 <FreqSweepMenuInputHandler+0x1b4>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f9ff 	bl	8004574 <_setEncoderControlMode>

			break;
 8004176:	e07d      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8004178:	4848      	ldr	r0, [pc, #288]	; (800429c <FreqSweepMenuInputHandler+0x1b8>)
 800417a:	f00b fad1 	bl	800f720 <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 800417e:	4b46      	ldr	r3, [pc, #280]	; (8004298 <FreqSweepMenuInputHandler+0x1b4>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <FreqSweepMenuInputHandler+0xa8>
 8004186:	2b01      	cmp	r3, #1
 8004188:	d00b      	beq.n	80041a2 <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 800418a:	e073      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 800418c:	2000      	movs	r0, #0
 800418e:	f000 fa4f 	bl	8004630 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8004192:	f000 fa89 	bl	80046a8 <_getCalculatedSweepFrequencyInHertz>
 8004196:	eef0 7a40 	vmov.f32	s15, s0
 800419a:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <FreqSweepMenuInputHandler+0x1bc>)
 800419c:	edc3 7a00 	vstr	s15, [r3]
					break;
 80041a0:	e05e      	b.n	8004260 <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 80041a2:	4b3c      	ldr	r3, [pc, #240]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <FreqSweepMenuInputHandler+0xcc>
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d02a      	beq.n	8004204 <FreqSweepMenuInputHandler+0x120>
							break;
 80041ae:	e056      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 80041b0:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	2b0c      	cmp	r3, #12
 80041b6:	d803      	bhi.n	80041c0 <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80041b8:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041ba:	220d      	movs	r2, #13
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80041be:	e04e      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80041c0:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041cc:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <FreqSweepMenuInputHandler+0x1c4>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	dd09      	ble.n	80041f0 <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 80041dc:	4b32      	ldr	r3, [pc, #200]	; (80042a8 <FreqSweepMenuInputHandler+0x1c4>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e8:	ee17 2a90 	vmov	r2, s15
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80041ee:	e036      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <FreqSweepMenuInputHandler+0x1c8>)
 80041fe:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004202:	e02c      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800420c:	4293      	cmp	r3, r2
 800420e:	d904      	bls.n	800421a <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 8004212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004218:	e020      	b.n	800425c <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004226:	4b21      	ldr	r3, [pc, #132]	; (80042ac <FreqSweepMenuInputHandler+0x1c8>)
 8004228:	edd3 7a00 	vldr	s15, [r3]
 800422c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	d509      	bpl.n	800424a <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <FreqSweepMenuInputHandler+0x1c8>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 800423e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004242:	ee17 2a90 	vmov	r2, s15
 8004246:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004248:	e008      	b.n	800425c <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <FreqSweepMenuInputHandler+0x1c4>)
 8004258:	edc3 7a00 	vstr	s15, [r3]
							break;
 800425c:	bf00      	nop
					break;
 800425e:	bf00      	nop
			break;
 8004260:	e008      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004262:	2000      	movs	r0, #0
 8004264:	f000 f986 	bl	8004574 <_setEncoderControlMode>

			break;
 8004268:	e004      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 800426a:	2001      	movs	r0, #1
 800426c:	f000 f982 	bl	8004574 <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004270:	e000      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 8004272:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <FreqSweepMenuInputHandler+0x1cc>)
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800427a:	230d      	movs	r3, #13
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	080132b4 	.word	0x080132b4
 8004288:	080132e0 	.word	0x080132e0
 800428c:	40000c00 	.word	0x40000c00
 8004290:	080132f8 	.word	0x080132f8
 8004294:	20001ecc 	.word	0x20001ecc
 8004298:	20001ecd 	.word	0x20001ecd
 800429c:	08013310 	.word	0x08013310
 80042a0:	20001f18 	.word	0x20001f18
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	20000004 	.word	0x20000004
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20001ecb 	.word	0x20001ecb

080042b4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 80042b8:	480c      	ldr	r0, [pc, #48]	; (80042ec <FreqSweepMenuExitHandler+0x38>)
 80042ba:	f00b fa31 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 80042be:	f7fd f8db 	bl	8001478 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <FreqSweepMenuExitHandler+0x40>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <FreqSweepMenuExitHandler+0x44>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80042e6:	230a      	movs	r3, #10
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08013328 	.word	0x08013328
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	20001ece 	.word	0x20001ece
 80042f8:	20001ecb 	.word	0x20001ecb

080042fc <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8004300:	4806      	ldr	r0, [pc, #24]	; (800431c <FreqMainMenuEntryHandler+0x20>)
 8004302:	f00b fa0d 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 8004306:	f7fd f8b7 	bl	8001478 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <FreqMainMenuEntryHandler+0x24>)
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <FreqMainMenuEntryHandler+0x28>)
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004316:	230a      	movs	r3, #10
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08013350 	.word	0x08013350
 8004320:	20001ece 	.word	0x20001ece
 8004324:	20001ecb 	.word	0x20001ecb

08004328 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 800432c:	480a      	ldr	r0, [pc, #40]	; (8004358 <FreqMainMenuExitHandler+0x30>)
 800432e:	f00b f9f7 	bl	800f720 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <FreqMainMenuExitHandler+0x34>)
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <FreqMainMenuExitHandler+0x38>)
 800433a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004340:	f7fd f89a 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004344:	4807      	ldr	r0, [pc, #28]	; (8004364 <FreqMainMenuExitHandler+0x3c>)
 8004346:	f00b f9eb 	bl	800f720 <puts>
	#endif

	eNewEvent = evIdle;
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <FreqMainMenuExitHandler+0x40>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004350:	2301      	movs	r3, #1
}
 8004352:	4618      	mov	r0, r3
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	080133a0 	.word	0x080133a0
 800435c:	20001ece 	.word	0x20001ece
 8004360:	40012c00 	.word	0x40012c00
 8004364:	080133c8 	.word	0x080133c8
 8004368:	20001ecb 	.word	0x20001ecb

0800436c <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8004372:	4813      	ldr	r0, [pc, #76]	; (80043c0 <FreqPresetMenuEntryHandler+0x54>)
 8004374:	f00b f9d4 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 8004378:	f7fd f87e 	bl	8001478 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 800437c:	f000 feb8 	bl	80050f0 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <FreqPresetMenuEntryHandler+0x58>)
 8004382:	2202      	movs	r2, #2
 8004384:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004386:	f000 ffbf 	bl	8005308 <FreqO_GetFPresetObject>
 800438a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <FreqPresetMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	791a      	ldrb	r2, [r3, #4]
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <FreqPresetMenuEntryHandler+0x5c>)
 8004398:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 800439a:	f000 ffe7 	bl	800536c <FreqO_GetFreqPresetEncoderRange>
 800439e:	4603      	mov	r3, r0
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <FreqPresetMenuEntryHandler+0x5c>)
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80043a6:	e002      	b.n	80043ae <FreqPresetMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 80043a8:	4808      	ldr	r0, [pc, #32]	; (80043cc <FreqPresetMenuEntryHandler+0x60>)
 80043aa:	f7fd f8ab 	bl	8001504 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <FreqPresetMenuEntryHandler+0x64>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80043b4:	230b      	movs	r3, #11
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	080133e0 	.word	0x080133e0
 80043c4:	20001ece 	.word	0x20001ece
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	0801340c 	.word	0x0801340c
 80043d0:	20001ecb 	.word	0x20001ecb

080043d4 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 80043d8:	4807      	ldr	r0, [pc, #28]	; (80043f8 <FreqPresetMenuInputHandler+0x24>)
 80043da:	f00b f9a1 	bl	800f720 <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80043de:	2001      	movs	r0, #1
 80043e0:	f001 fb96 	bl	8005b10 <SM_GetEncoderValue>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fe9c 	bl	8005124 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <FreqPresetMenuInputHandler+0x28>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80043f2:	230b      	movs	r3, #11
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	08013448 	.word	0x08013448
 80043fc:	20001ecb 	.word	0x20001ecb

08004400 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8004404:	4806      	ldr	r0, [pc, #24]	; (8004420 <FreqPresetMenuExitHandler+0x20>)
 8004406:	f00b f98b 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 800440a:	f7fd f835 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <FreqPresetMenuExitHandler+0x24>)
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <FreqPresetMenuExitHandler+0x28>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800441a:	230a      	movs	r3, #10
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	08013474 	.word	0x08013474
 8004424:	20001ece 	.word	0x20001ece
 8004428:	20001ecb 	.word	0x20001ecb

0800442c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8004430:	480a      	ldr	r0, [pc, #40]	; (800445c <FreqAdjustMenuEntryHandler+0x30>)
 8004432:	f00b f975 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 8004436:	f7fd f81f 	bl	8001478 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <FreqAdjustMenuEntryHandler+0x34>)
 800443c:	2203      	movs	r2, #3
 800443e:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <FreqAdjustMenuEntryHandler+0x38>)
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <FreqAdjustMenuEntryHandler+0x3c>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <FreqAdjustMenuEntryHandler+0x3c>)
 800444a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <FreqAdjustMenuEntryHandler+0x40>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004456:	230c      	movs	r3, #12
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	080134a0 	.word	0x080134a0
 8004460:	20001ece 	.word	0x20001ece
 8004464:	40013400 	.word	0x40013400
 8004468:	40012c00 	.word	0x40012c00
 800446c:	20001ecb 	.word	0x20001ecb

08004470 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8004474:	4805      	ldr	r0, [pc, #20]	; (800448c <FreqAdjustMenuInputHandler+0x1c>)
 8004476:	f00b f953 	bl	800f720 <puts>
	#endif

	FreqO_AdjustFreq();
 800447a:	f000 fe45 	bl	8005108 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <FreqAdjustMenuInputHandler+0x20>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004484:	230c      	movs	r3, #12
}
 8004486:	4618      	mov	r0, r3
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	080132b4 	.word	0x080132b4
 8004490:	20001ecb 	.word	0x20001ecb

08004494 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8004498:	4806      	ldr	r0, [pc, #24]	; (80044b4 <FreqAdjustMenuExitHandler+0x20>)
 800449a:	f00b f941 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 800449e:	f7fc ffeb 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <FreqAdjustMenuExitHandler+0x24>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <FreqAdjustMenuExitHandler+0x28>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80044ae:	230a      	movs	r3, #10
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	080134cc 	.word	0x080134cc
 80044b8:	20001ece 	.word	0x20001ece
 80044bc:	20001ecb 	.word	0x20001ecb

080044c0 <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <_setSweepModeDown+0x48>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0f      	ldr	r2, [pc, #60]	; (8004508 <_setSweepModeDown+0x48>)
 80044ca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80044ce:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <_setSweepModeDown+0x48>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0c      	ldr	r2, [pc, #48]	; (8004508 <_setSweepModeDown+0x48>)
 80044d6:	f043 0310 	orr.w	r3, r3, #16
 80044da:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <_setSweepModeDown+0x4c>)
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <_setSweepModeDown+0x50>)
 80044ea:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <_setSweepModeDown+0x54>)
 80044f0:	4a09      	ldr	r2, [pc, #36]	; (8004518 <_setSweepModeDown+0x58>)
 80044f2:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <_setSweepModeDown+0x5c>)
 80044f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40013400 	.word	0x40013400
 8004510:	20000000 	.word	0x20000000
 8004514:	20000004 	.word	0x20000004
 8004518:	477fff00 	.word	0x477fff00
 800451c:	40012c00 	.word	0x40012c00

08004520 <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <_setSweepModeUp+0x40>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <_setSweepModeUp+0x40>)
 800452a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800452e:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <_setSweepModeUp+0x40>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <_setSweepModeUp+0x40>)
 8004536:	f023 0310 	bic.w	r3, r3, #16
 800453a:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <_setSweepModeUp+0x44>)
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <_setSweepModeUp+0x48>)
 800454a:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <_setSweepModeUp+0x4c>)
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <_setSweepModeUp+0x50>)
 8004552:	601a      	str	r2, [r3, #0]


}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40013400 	.word	0x40013400
 8004568:	20000004 	.word	0x20000004
 800456c:	20000000 	.word	0x20000000
 8004570:	41500000 	.word	0x41500000

08004574 <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d038      	beq.n	80045f6 <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8004584:	4a24      	ldr	r2, [pc, #144]	; (8004618 <_setEncoderControlMode+0xa4>)
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <_setEncoderControlMode+0xa8>)
 800458c:	220d      	movs	r2, #13
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <_setEncoderControlMode+0xa8>)
 8004592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <_setEncoderControlMode+0xac>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <_setEncoderControlMode+0x32>
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d014      	beq.n	80045ce <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 80045a4:	e031      	b.n	800460a <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <_setEncoderControlMode+0xa8>)
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <_setEncoderControlMode+0xb0>)
 80045b4:	edd3 7a00 	vldr	s15, [r3]
 80045b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	dc00      	bgt.n	80045c4 <_setEncoderControlMode+0x50>
				break;
 80045c2:	e022      	b.n	800460a <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80045c4:	4b18      	ldr	r3, [pc, #96]	; (8004628 <_setEncoderControlMode+0xb4>)
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <_setEncoderControlMode+0xa8>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80045cc:	e01d      	b.n	800460a <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <_setEncoderControlMode+0xa8>)
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <_setEncoderControlMode+0xb8>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e8:	d400      	bmi.n	80045ec <_setEncoderControlMode+0x78>
				break;
 80045ea:	e00e      	b.n	800460a <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <_setEncoderControlMode+0xb4>)
 80045ee:	4a0b      	ldr	r2, [pc, #44]	; (800461c <_setEncoderControlMode+0xa8>)
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80045f4:	e009      	b.n	800460a <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <_setEncoderControlMode+0xa4>)
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <_setEncoderControlMode+0xa8>)
 80045fe:	2201      	movs	r2, #1
 8004600:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <_setEncoderControlMode+0xa8>)
 8004604:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20001ecd 	.word	0x20001ecd
 800461c:	40012c00 	.word	0x40012c00
 8004620:	20001ecc 	.word	0x20001ecc
 8004624:	20000004 	.word	0x20000004
 8004628:	40013400 	.word	0x40013400
 800462c:	20000000 	.word	0x20000000

08004630 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8004630:	b590      	push	{r4, r7, lr}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d122      	bne.n	8004686 <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	4618      	mov	r0, r3
 8004646:	f7fb ff85 	bl	8000554 <__aeabi_ui2d>
 800464a:	4603      	mov	r3, r0
 800464c:	460c      	mov	r4, r1
 800464e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004690 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 8004652:	ec44 3b10 	vmov	d0, r3, r4
 8004656:	f00d f83b 	bl	80116d0 <pow>
 800465a:	ec51 0b10 	vmov	r0, r1, d0
 800465e:	a30e      	add	r3, pc, #56	; (adr r3, 8004698 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f7fb fe3a 	bl	80002dc <__adddf3>
 8004668:	4603      	mov	r3, r0
 800466a:	460c      	mov	r4, r1
 800466c:	4618      	mov	r0, r3
 800466e:	4621      	mov	r1, r4
 8004670:	f7fc fac2 	bl	8000bf8 <__aeabi_d2uiz>
 8004674:	4603      	mov	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467e:	d002      	beq.n	8004686 <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bd90      	pop	{r4, r7, pc}
 800468e:	bf00      	nop
 8004690:	00000000 	.word	0x00000000
 8004694:	40080000 	.word	0x40080000
 8004698:	00000000 	.word	0x00000000
 800469c:	40d06800 	.word	0x40d06800
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40000c00 	.word	0x40000c00

080046a8 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 80046b4:	4b11      	ldr	r3, [pc, #68]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	ee07 3a90 	vmov	s15, r3
 80046bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004700 <_getCalculatedSweepFrequencyInHertz+0x58>
 80046c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c8:	e011      	b.n	80046ee <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046e6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004700 <_getCalculatedSweepFrequencyInHertz+0x58>
 80046ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 80046ee:	eeb0 0a67 	vmov.f32	s0, s15
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	4d2037a0 	.word	0x4d2037a0

08004704 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <FreqMenu_getStatus+0x14>)
 800470a:	781b      	ldrb	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20001ece 	.word	0x20001ece

0800471c <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <FuncMenu_getStatus+0x14>)
 8004722:	781b      	ldrb	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20001ecf 	.word	0x20001ecf

08004734 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 8004738:	4806      	ldr	r0, [pc, #24]	; (8004754 <FuncMainMenuEntryHandler+0x20>)
 800473a:	f00a fff1 	bl	800f720 <puts>
#endif

	DM_RefreshScreen();
 800473e:	f7fc fe9b 	bl	8001478 <DM_RefreshScreen>



	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <FuncMainMenuEntryHandler+0x24>)
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <FuncMainMenuEntryHandler+0x28>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800474e:	2303      	movs	r3, #3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	080134f8 	.word	0x080134f8
 8004758:	20001ecf 	.word	0x20001ecf
 800475c:	20001ecb 	.word	0x20001ecb

08004760 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 8004764:	4808      	ldr	r0, [pc, #32]	; (8004788 <FuncMainMenuExitHandler+0x28>)
 8004766:	f00a ffdb 	bl	800f720 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <FuncMainMenuExitHandler+0x2c>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004770:	f7fc fe82 	bl	8001478 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004774:	4806      	ldr	r0, [pc, #24]	; (8004790 <FuncMainMenuExitHandler+0x30>)
 8004776:	f00a ffd3 	bl	800f720 <puts>
#endif

	eNewEvent = evIdle;
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <FuncMainMenuExitHandler+0x34>)
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004780:	2301      	movs	r3, #1
}
 8004782:	4618      	mov	r0, r3
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	08013548 	.word	0x08013548
 800478c:	20001ecf 	.word	0x20001ecf
 8004790:	08013570 	.word	0x08013570
 8004794:	20001ecb 	.word	0x20001ecb

08004798 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 800479e:	4815      	ldr	r0, [pc, #84]	; (80047f4 <FuncSignalMenuEntryHandler+0x5c>)
 80047a0:	f00a ffbe 	bl	800f720 <puts>
#endif

	DM_RefreshScreen();
 80047a4:	f7fc fe68 	bl	8001478 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 80047a8:	f000 fdec 	bl	8005384 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 80047ac:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <FuncSignalMenuEntryHandler+0x60>)
 80047ae:	2202      	movs	r2, #2
 80047b0:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 80047b2:	2000      	movs	r0, #0
 80047b4:	f001 f996 	bl	8005ae4 <SM_GetOutputChannel>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80047be:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <FuncSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	785a      	ldrb	r2, [r3, #1]
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <FuncSignalMenuEntryHandler+0x64>)
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 80047ce:	f000 ff1b 	bl	8005608 <FuncO_GetFuncPresetEncoderRange>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <FuncSignalMenuEntryHandler+0x64>)
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80047da:	e002      	b.n	80047e2 <FuncSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80047dc:	4808      	ldr	r0, [pc, #32]	; (8004800 <FuncSignalMenuEntryHandler+0x68>)
 80047de:	f7fc fe91 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <FuncSignalMenuEntryHandler+0x6c>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80047e8:	2304      	movs	r3, #4
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	08013588 	.word	0x08013588
 80047f8:	20001ecf 	.word	0x20001ecf
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	080135b4 	.word	0x080135b4
 8004804:	20001ecb 	.word	0x20001ecb

08004808 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 800480c:	4807      	ldr	r0, [pc, #28]	; (800482c <FuncSignalMenuInputHandler+0x24>)
 800480e:	f00a ff87 	bl	800f720 <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004812:	2001      	movs	r0, #1
 8004814:	f001 f97c 	bl	8005b10 <SM_GetEncoderValue>
 8004818:	4603      	mov	r3, r0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fdc6 	bl	80053ac <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <FuncSignalMenuInputHandler+0x28>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004826:	2304      	movs	r3, #4
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	080135e8 	.word	0x080135e8
 8004830:	20001ecb 	.word	0x20001ecb

08004834 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 8004838:	4806      	ldr	r0, [pc, #24]	; (8004854 <FuncSignalMenuExitHandler+0x20>)
 800483a:	f00a ff71 	bl	800f720 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <FuncSignalMenuExitHandler+0x24>)
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004844:	f7fc fe18 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <FuncSignalMenuExitHandler+0x28>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800484e:	2303      	movs	r3, #3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	08013614 	.word	0x08013614
 8004858:	20001ecf 	.word	0x20001ecf
 800485c:	20001ecb 	.word	0x20001ecb

08004860 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 8004866:	4815      	ldr	r0, [pc, #84]	; (80048bc <FuncSyncMenuEntryHandler+0x5c>)
 8004868:	f00a ff5a 	bl	800f720 <puts>
#endif

	DM_RefreshScreen();
 800486c:	f7fc fe04 	bl	8001478 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004870:	f000 fd88 	bl	8005384 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <FuncSyncMenuEntryHandler+0x60>)
 8004876:	2203      	movs	r2, #3
 8004878:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 800487a:	2001      	movs	r0, #1
 800487c:	f001 f932 	bl	8005ae4 <SM_GetOutputChannel>
 8004880:	4603      	mov	r3, r0
 8004882:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004886:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <FuncSyncMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	785a      	ldrb	r2, [r3, #1]
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <FuncSyncMenuEntryHandler+0x64>)
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004896:	f000 feb7 	bl	8005608 <FuncO_GetFuncPresetEncoderRange>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <FuncSyncMenuEntryHandler+0x64>)
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80048a2:	e002      	b.n	80048aa <FuncSyncMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80048a4:	4808      	ldr	r0, [pc, #32]	; (80048c8 <FuncSyncMenuEntryHandler+0x68>)
 80048a6:	f7fc fe2d 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <FuncSyncMenuEntryHandler+0x6c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80048b0:	2305      	movs	r3, #5
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	08013640 	.word	0x08013640
 80048c0:	20001ecf 	.word	0x20001ecf
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	080135b4 	.word	0x080135b4
 80048cc:	20001ecb 	.word	0x20001ecb

080048d0 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 80048d4:	4807      	ldr	r0, [pc, #28]	; (80048f4 <FuncSyncMenuInputHandler+0x24>)
 80048d6:	f00a ff23 	bl	800f720 <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80048da:	2001      	movs	r0, #1
 80048dc:	f001 f918 	bl	8005b10 <SM_GetEncoderValue>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fd9c 	bl	8005420 <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <FuncSyncMenuInputHandler+0x28>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80048ee:	2305      	movs	r3, #5
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	08013668 	.word	0x08013668
 80048f8:	20001ecb 	.word	0x20001ecb

080048fc <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 8004900:	4806      	ldr	r0, [pc, #24]	; (800491c <FuncSyncMenuExitHandler+0x20>)
 8004902:	f00a ff0d 	bl	800f720 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <FuncSyncMenuExitHandler+0x24>)
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 800490c:	f7fc fdb4 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <FuncSyncMenuExitHandler+0x28>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004916:	2303      	movs	r3, #3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	08013690 	.word	0x08013690
 8004920:	20001ecf 	.word	0x20001ecf
 8004924:	20001ecb 	.word	0x20001ecb

08004928 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <GainMenu_getStatus+0x14>)
 800492e:	781b      	ldrb	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20001ed0 	.word	0x20001ed0

08004940 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 8004944:	4806      	ldr	r0, [pc, #24]	; (8004960 <GainMainMenuEntryHandler+0x20>)
 8004946:	f00a feeb 	bl	800f720 <puts>
#endif

	DM_RefreshScreen();
 800494a:	f7fc fd95 	bl	8001478 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <GainMainMenuEntryHandler+0x24>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <GainMainMenuEntryHandler+0x28>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800495a:	2306      	movs	r3, #6
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	080136b8 	.word	0x080136b8
 8004964:	20001ed0 	.word	0x20001ed0
 8004968:	20001ecb 	.word	0x20001ecb

0800496c <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 8004970:	4808      	ldr	r0, [pc, #32]	; (8004994 <GainMainMenuExitHandler+0x28>)
 8004972:	f00a fed5 	bl	800f720 <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <GainMainMenuExitHandler+0x2c>)
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800497c:	f7fc fd7c 	bl	8001478 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004980:	4806      	ldr	r0, [pc, #24]	; (800499c <GainMainMenuExitHandler+0x30>)
 8004982:	f00a fecd 	bl	800f720 <puts>
#endif

	eNewEvent = evIdle;
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <GainMainMenuExitHandler+0x34>)
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800498c:	2301      	movs	r3, #1
}
 800498e:	4618      	mov	r0, r3
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	08013708 	.word	0x08013708
 8004998:	20001ed0 	.word	0x20001ed0
 800499c:	08013730 	.word	0x08013730
 80049a0:	20001ecb 	.word	0x20001ecb

080049a4 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 80049aa:	4813      	ldr	r0, [pc, #76]	; (80049f8 <GainSignalMenuEntryHandler+0x54>)
 80049ac:	f00a feb8 	bl	800f720 <puts>
#endif

	DM_RefreshScreen();
 80049b0:	f7fc fd62 	bl	8001478 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 80049b4:	4b11      	ldr	r3, [pc, #68]	; (80049fc <GainSignalMenuEntryHandler+0x58>)
 80049b6:	2202      	movs	r2, #2
 80049b8:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80049ba:	2000      	movs	r0, #0
 80049bc:	f001 f892 	bl	8005ae4 <SM_GetOutputChannel>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80049c6:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8b1a      	ldrh	r2, [r3, #24]
 80049d2:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <GainSignalMenuEntryHandler+0x5c>)
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80049d6:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <GainSignalMenuEntryHandler+0x5c>)
 80049d8:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80049dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80049de:	e002      	b.n	80049e6 <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80049e0:	4808      	ldr	r0, [pc, #32]	; (8004a04 <GainSignalMenuEntryHandler+0x60>)
 80049e2:	f7fc fd8f 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <GainSignalMenuEntryHandler+0x64>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80049ec:	2307      	movs	r3, #7
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	08013748 	.word	0x08013748
 80049fc:	20001ed0 	.word	0x20001ed0
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	08013774 	.word	0x08013774
 8004a08:	20001ecb 	.word	0x20001ecb

08004a0c <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 8004a10:	4807      	ldr	r0, [pc, #28]	; (8004a30 <GainSignalMenuInputHandler+0x24>)
 8004a12:	f00a fe85 	bl	800f720 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004a16:	2001      	movs	r0, #1
 8004a18:	f001 f87a 	bl	8005b10 <SM_GetEncoderValue>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 fa66 	bl	8005ef0 <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <GainSignalMenuInputHandler+0x28>)
 8004a26:	2203      	movs	r2, #3
 8004a28:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004a2a:	2307      	movs	r3, #7
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	080137ac 	.word	0x080137ac
 8004a34:	20001ecb 	.word	0x20001ecb

08004a38 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 8004a3c:	4806      	ldr	r0, [pc, #24]	; (8004a58 <GainSignalMenuExitHandler+0x20>)
 8004a3e:	f00a fe6f 	bl	800f720 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <GainSignalMenuExitHandler+0x24>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004a48:	f7fc fd16 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <GainSignalMenuExitHandler+0x28>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004a52:	2306      	movs	r3, #6
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	080137d8 	.word	0x080137d8
 8004a5c:	20001ed0 	.word	0x20001ed0
 8004a60:	20001ecb 	.word	0x20001ecb

08004a64 <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 8004a6a:	4813      	ldr	r0, [pc, #76]	; (8004ab8 <GainSyncMenuEntryHandler+0x54>)
 8004a6c:	f00a fe58 	bl	800f720 <puts>
#endif

	DM_RefreshScreen();
 8004a70:	f7fc fd02 	bl	8001478 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <GainSyncMenuEntryHandler+0x58>)
 8004a76:	2203      	movs	r2, #3
 8004a78:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f001 f832 	bl	8005ae4 <SM_GetOutputChannel>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004a86:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8b1a      	ldrh	r2, [r3, #24]
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <GainSyncMenuEntryHandler+0x5c>)
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004a96:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <GainSyncMenuEntryHandler+0x5c>)
 8004a98:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004a9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a9e:	e002      	b.n	8004aa6 <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004aa0:	4808      	ldr	r0, [pc, #32]	; (8004ac4 <GainSyncMenuEntryHandler+0x60>)
 8004aa2:	f7fc fd2f 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <GainSyncMenuEntryHandler+0x64>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004aac:	2308      	movs	r3, #8
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	08013804 	.word	0x08013804
 8004abc:	20001ed0 	.word	0x20001ed0
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	08013774 	.word	0x08013774
 8004ac8:	20001ecb 	.word	0x20001ecb

08004acc <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 8004ad0:	4807      	ldr	r0, [pc, #28]	; (8004af0 <GainSyncMenuInputHandler+0x24>)
 8004ad2:	f00a fe25 	bl	800f720 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f001 f81a 	bl	8005b10 <SM_GetEncoderValue>
 8004adc:	4603      	mov	r3, r0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 feb0 	bl	8006844 <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <GainSyncMenuInputHandler+0x28>)
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004aea:	2308      	movs	r3, #8
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	0801382c 	.word	0x0801382c
 8004af4:	20001ecb 	.word	0x20001ecb

08004af8 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 8004afc:	4806      	ldr	r0, [pc, #24]	; (8004b18 <GainSyncMenuExitHandler+0x20>)
 8004afe:	f00a fe0f 	bl	800f720 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <GainSyncMenuExitHandler+0x24>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b08:	f7fc fcb6 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <GainSyncMenuExitHandler+0x28>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004b12:	2306      	movs	r3, #6
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	08013854 	.word	0x08013854
 8004b1c:	20001ed0 	.word	0x20001ed0
 8004b20:	20001ecb 	.word	0x20001ecb

08004b24 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <ToplevelMenu_getStatus+0x14>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000008 	.word	0x20000008

08004b3c <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004b46:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <ToplevelMenu_setStatus+0x1c>)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	7013      	strb	r3, [r2, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20000008 	.word	0x20000008

08004b5c <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004b60:	4806      	ldr	r0, [pc, #24]	; (8004b7c <ToplevelOutputMenuEntryHandler+0x20>)
 8004b62:	f00a fddd 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 8004b66:	f7fc fc87 	bl	8001478 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <ToplevelOutputMenuEntryHandler+0x24>)
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004b70:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <ToplevelOutputMenuEntryHandler+0x28>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004b76:	2301      	movs	r3, #1
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08013918 	.word	0x08013918
 8004b80:	20000008 	.word	0x20000008
 8004b84:	20001ecb 	.word	0x20001ecb

08004b88 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004b8c:	4806      	ldr	r0, [pc, #24]	; (8004ba8 <ToplevelOutputMenuExitHandler+0x20>)
 8004b8e:	f00a fdc7 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 8004b92:	f7fc fc71 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <ToplevelOutputMenuExitHandler+0x24>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <ToplevelOutputMenuExitHandler+0x28>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	08013978 	.word	0x08013978
 8004bac:	20000008 	.word	0x20000008
 8004bb0:	20001ecb 	.word	0x20001ecb

08004bb4 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004bb8:	4806      	ldr	r0, [pc, #24]	; (8004bd4 <ToplevelInputMenuEntryHandler+0x20>)
 8004bba:	f00a fdb1 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 8004bbe:	f7fc fc5b 	bl	8001478 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <ToplevelInputMenuEntryHandler+0x24>)
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <ToplevelInputMenuEntryHandler+0x28>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004bce:	2302      	movs	r3, #2
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	080139a8 	.word	0x080139a8
 8004bd8:	20000008 	.word	0x20000008
 8004bdc:	20001ecb 	.word	0x20001ecb

08004be0 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 8004be4:	4806      	ldr	r0, [pc, #24]	; (8004c00 <ToplevelInputMenuExitHandler+0x20>)
 8004be6:	f00a fd9b 	bl	800f720 <puts>
	#endif

	DM_RefreshScreen();
 8004bea:	f7fc fc45 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <ToplevelInputMenuExitHandler+0x24>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004bf4:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <ToplevelInputMenuExitHandler+0x28>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	08013a08 	.word	0x08013a08
 8004c04:	20000008 	.word	0x20000008
 8004c08:	20001ecb 	.word	0x20001ecb

08004c0c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004c14:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d101      	bne.n	8004c26 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40010400 	.word	0x40010400

08004c38 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <IM_Init+0x1c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a04      	ldr	r2, [pc, #16]	; (8004c54 <IM_Init+0x1c>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6013      	str	r3, [r2, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40014400 	.word	0x40014400

08004c58 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004c5c:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d11c      	bne.n	8004ca2 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004c68:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c74:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004c76:	edd3 7a00 	vldr	s15, [r3]
 8004c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c82:	db09      	blt.n	8004c98 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004c84:	4b1f      	ldr	r3, [pc, #124]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c90:	ee17 2a90 	vmov	r2, s15
 8004c94:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004c96:	e029      	b.n	8004cec <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004c98:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	3201      	adds	r2, #1
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ca0:	e024      	b.n	8004cec <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004ca2:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d104      	bne.n	8004cb4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cb0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cb2:	e01b      	b.n	8004cec <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	ee07 3a90 	vmov	s15, r3
 8004cbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cc0:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004cc2:	edd3 7a00 	vldr	s15, [r3]
 8004cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	d809      	bhi.n	8004ce4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004cd2:	edd3 7a00 	vldr	s15, [r3]
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cdc:	ee17 2a90 	vmov	r2, s15
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ce2:	e003      	b.n	8004cec <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce8:	3a01      	subs	r2, #1
 8004cea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40000c00 	.word	0x40000c00
 8004cfc:	40013400 	.word	0x40013400
 8004d00:	20000004 	.word	0x20000004
 8004d04:	20000000 	.word	0x20000000

08004d08 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <IM_BTN1_EXTI14_Handler+0x44>)
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	4a0e      	ldr	r2, [pc, #56]	; (8004d50 <IM_BTN1_EXTI14_Handler+0x48>)
 8004d18:	8812      	ldrh	r2, [r2, #0]
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d20:	dd0c      	ble.n	8004d3c <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004d22:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004d26:	f7ff ff71 	bl	8004c0c <LL_EXTI_IsActiveFlag_0_31>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004d30:	2001      	movs	r0, #1
 8004d32:	f7ff f96b 	bl	800400c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004d36:	4807      	ldr	r0, [pc, #28]	; (8004d54 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004d38:	f00a fcf2 	bl	800f720 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004d3c:	4a04      	ldr	r2, [pc, #16]	; (8004d50 <IM_BTN1_EXTI14_Handler+0x48>)
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	8013      	strh	r3, [r2, #0]


}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	20001ed2 	.word	0x20001ed2
 8004d54:	08013a34 	.word	0x08013a34

08004d58 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <IM_BTN2_EXTI15_Handler+0x44>)
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004d64:	88fb      	ldrh	r3, [r7, #6]
 8004d66:	4a0e      	ldr	r2, [pc, #56]	; (8004da0 <IM_BTN2_EXTI15_Handler+0x48>)
 8004d68:	8812      	ldrh	r2, [r2, #0]
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d70:	dd0c      	ble.n	8004d8c <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004d72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d76:	f7ff ff49 	bl	8004c0c <LL_EXTI_IsActiveFlag_0_31>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004d80:	2003      	movs	r0, #3
 8004d82:	f7ff f943 	bl	800400c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004d86:	4807      	ldr	r0, [pc, #28]	; (8004da4 <IM_BTN2_EXTI15_Handler+0x4c>)
 8004d88:	f00a fcca 	bl	800f720 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <IM_BTN2_EXTI15_Handler+0x48>)
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	8013      	strh	r3, [r2, #0]


}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40014400 	.word	0x40014400
 8004da0:	20001ed4 	.word	0x20001ed4
 8004da4:	08013a4c 	.word	0x08013a4c

08004da8 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004dae:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <IM_BTN3_EXTI0_Handler+0x40>)
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	4a0d      	ldr	r2, [pc, #52]	; (8004dec <IM_BTN3_EXTI0_Handler+0x44>)
 8004db8:	8812      	ldrh	r2, [r2, #0]
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc0:	dd0b      	ble.n	8004dda <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	f7ff ff22 	bl	8004c0c <LL_EXTI_IsActiveFlag_0_31>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004dce:	2004      	movs	r0, #4
 8004dd0:	f7ff f91c 	bl	800400c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004dd4:	4806      	ldr	r0, [pc, #24]	; (8004df0 <IM_BTN3_EXTI0_Handler+0x48>)
 8004dd6:	f00a fca3 	bl	800f720 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004dda:	4a04      	ldr	r2, [pc, #16]	; (8004dec <IM_BTN3_EXTI0_Handler+0x44>)
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	8013      	strh	r3, [r2, #0]


}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40014400 	.word	0x40014400
 8004dec:	20001ed6 	.word	0x20001ed6
 8004df0:	08013a68 	.word	0x08013a68

08004df4 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004dfa:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <IM_BTN4_EXTI1_Handler+0x40>)
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <IM_BTN4_EXTI1_Handler+0x44>)
 8004e04:	8812      	ldrh	r2, [r2, #0]
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e0c:	dd0b      	ble.n	8004e26 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004e0e:	2002      	movs	r0, #2
 8004e10:	f7ff fefc 	bl	8004c0c <LL_EXTI_IsActiveFlag_0_31>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004e1a:	2002      	movs	r0, #2
 8004e1c:	f7ff f8f6 	bl	800400c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004e20:	4806      	ldr	r0, [pc, #24]	; (8004e3c <IM_BTN4_EXTI1_Handler+0x48>)
 8004e22:	f00a fc7d 	bl	800f720 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004e26:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <IM_BTN4_EXTI1_Handler+0x44>)
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	8013      	strh	r3, [r2, #0]


}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40014400 	.word	0x40014400
 8004e38:	20001ed8 	.word	0x20001ed8
 8004e3c:	08013a80 	.word	0x08013a80

08004e40 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <IM_ENC_EXTI2_Handler+0x40>)
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	4a0d      	ldr	r2, [pc, #52]	; (8004e84 <IM_ENC_EXTI2_Handler+0x44>)
 8004e50:	8812      	ldrh	r2, [r2, #0]
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e58:	dd0b      	ble.n	8004e72 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004e5a:	2004      	movs	r0, #4
 8004e5c:	f7ff fed6 	bl	8004c0c <LL_EXTI_IsActiveFlag_0_31>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004e66:	2006      	movs	r0, #6
 8004e68:	f7ff f8d0 	bl	800400c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004e6c:	4806      	ldr	r0, [pc, #24]	; (8004e88 <IM_ENC_EXTI2_Handler+0x48>)
 8004e6e:	f00a fc57 	bl	800f720 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004e72:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <IM_ENC_EXTI2_Handler+0x44>)
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	8013      	strh	r3, [r2, #0]


}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40014400 	.word	0x40014400
 8004e84:	20001eda 	.word	0x20001eda
 8004e88:	08013a98 	.word	0x08013a98

08004e8c <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <IM_ENC_DIRF_Handler+0x30>)
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e9c:	d10b      	bne.n	8004eb6 <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8004e9e:	2005      	movs	r0, #5
 8004ea0:	f7ff f8b4 	bl	800400c <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8004ea4:	4806      	ldr	r0, [pc, #24]	; (8004ec0 <IM_ENC_DIRF_Handler+0x34>)
 8004ea6:	f00a fc3b 	bl	800f720 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004eaa:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <IM_ENC_DIRF_Handler+0x30>)
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4a03      	ldr	r2, [pc, #12]	; (8004ebc <IM_ENC_DIRF_Handler+0x30>)
 8004eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eb4:	6113      	str	r3, [r2, #16]

	}
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	08013ab4 	.word	0x08013ab4

08004ec4 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <BO_GetBiasPolarity+0x14>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000009 	.word	0x20000009

08004edc <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004ee0:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <BO_GetDcBiasEncoderValue+0x14>)
 8004ee2:	881b      	ldrh	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	2000000a 	.word	0x2000000a

08004ef4 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004efe:	2000      	movs	r0, #0
 8004f00:	f000 fe06 	bl	8005b10 <SM_GetEncoderValue>
 8004f04:	4603      	mov	r3, r0
 8004f06:	461a      	mov	r2, r3
 8004f08:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <BO_ModifyOutput+0x84>)
 8004f0a:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004f12:	d214      	bcs.n	8004f3e <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <BO_ModifyOutput+0x88>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2110      	movs	r1, #16
 8004f2c:	4814      	ldr	r0, [pc, #80]	; (8004f80 <BO_ModifyOutput+0x8c>)
 8004f2e:	f005 fc77 	bl	800a820 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004f32:	2201      	movs	r2, #1
 8004f34:	2108      	movs	r1, #8
 8004f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f3a:	f006 fb51 	bl	800b5e0 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004f44:	d314      	bcc.n	8004f70 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <BO_ModifyOutput+0x88>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2110      	movs	r1, #16
 8004f5e:	4808      	ldr	r0, [pc, #32]	; (8004f80 <BO_ModifyOutput+0x8c>)
 8004f60:	f005 fc5e 	bl	800a820 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004f64:	2200      	movs	r2, #0
 8004f66:	2108      	movs	r1, #8
 8004f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f6c:	f006 fb38 	bl	800b5e0 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	2000000a 	.word	0x2000000a
 8004f7c:	20000009 	.word	0x20000009
 8004f80:	200025f8 	.word	0x200025f8

08004f84 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004f88:	2110      	movs	r1, #16
 8004f8a:	4803      	ldr	r0, [pc, #12]	; (8004f98 <BO_GetOutputBias+0x14>)
 8004f8c:	f005 fc8e 	bl	800a8ac <HAL_DAC_GetValue>
 8004f90:	4603      	mov	r3, r0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200025f8 	.word	0x200025f8

08004f9c <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	e06b      	b.n	8005080 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004fa8:	493a      	ldr	r1, [pc, #232]	; (8005094 <DT_InitRegister+0xf8>)
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d129      	bne.n	8005012 <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8004fbe:	4935      	ldr	r1, [pc, #212]	; (8005094 <DT_InitRegister+0xf8>)
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3304      	adds	r3, #4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a31      	ldr	r2, [pc, #196]	; (8005098 <DT_InitRegister+0xfc>)
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fde:	492d      	ldr	r1, [pc, #180]	; (8005094 <DT_InitRegister+0xf8>)
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3310      	adds	r3, #16
 8004fee:	edd3 7a00 	vldr	s15, [r3]
 8004ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ffa:	ee17 0a90 	vmov	r0, s15
 8004ffe:	4925      	ldr	r1, [pc, #148]	; (8005094 <DT_InitRegister+0xf8>)
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	330c      	adds	r3, #12
 800500e:	6018      	str	r0, [r3, #0]
 8005010:	e033      	b.n	800507a <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 8005012:	4920      	ldr	r1, [pc, #128]	; (8005094 <DT_InitRegister+0xf8>)
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	3304      	adds	r3, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <DT_InitRegister+0xfc>)
 8005026:	fbb2 f1f3 	udiv	r1, r2, r3
 800502a:	481a      	ldr	r0, [pc, #104]	; (8005094 <DT_InitRegister+0xf8>)
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4403      	add	r3, r0
 8005038:	3308      	adds	r3, #8
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005048:	4912      	ldr	r1, [pc, #72]	; (8005094 <DT_InitRegister+0xf8>)
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	3310      	adds	r3, #16
 8005058:	edd3 7a00 	vldr	s15, [r3]
 800505c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005064:	ee17 0a90 	vmov	r0, s15
 8005068:	490a      	ldr	r1, [pc, #40]	; (8005094 <DT_InitRegister+0xf8>)
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	330c      	adds	r3, #12
 8005078:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3301      	adds	r3, #1
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b0d      	cmp	r3, #13
 8005084:	dd90      	ble.n	8004fa8 <DT_InitRegister+0xc>
	}
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c
 8005098:	00155cc0 	.word	0x00155cc0

0800509c <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e016      	b.n	80050d8 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 80050aa:	4910      	ldr	r1, [pc, #64]	; (80050ec <DT_GetRegisterByEnum+0x50>)
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3304      	adds	r3, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d107      	bne.n	80050d2 <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4a07      	ldr	r2, [pc, #28]	; (80050ec <DT_GetRegisterByEnum+0x50>)
 80050ce:	4413      	add	r3, r2
 80050d0:	e006      	b.n	80050e0 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b0d      	cmp	r3, #13
 80050dc:	dde5      	ble.n	80050aa <DT_GetRegisterByEnum+0xe>

	return 0;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	2000000c 	.word	0x2000000c

080050f0 <FreqO_ResetLastEncoderValue>:
uint8_t FreqPresetEncoderRange = 56;

uint16_t freq_last_encoder_value = 0;

void FreqO_ResetLastEncoderValue()
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 80050f4:	4b03      	ldr	r3, [pc, #12]	; (8005104 <FreqO_ResetLastEncoderValue+0x14>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	801a      	strh	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	20001edc 	.word	0x20001edc

08005108 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 800510c:	2000      	movs	r0, #0
 800510e:	f000 fcff 	bl	8005b10 <SM_GetEncoderValue>
 8005112:	4603      	mov	r3, r0
 8005114:	461a      	mov	r2, r3
 8005116:	4b02      	ldr	r3, [pc, #8]	; (8005120 <FreqO_AdjustFreq+0x18>)
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40013400 	.word	0x40013400

08005124 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b38      	cmp	r3, #56	; 0x38
 8005132:	f200 80b4 	bhi.w	800529e <FreqO_ModifyOutput+0x17a>
 8005136:	a201      	add	r2, pc, #4	; (adr r2, 800513c <FreqO_ModifyOutput+0x18>)
 8005138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513c:	08005221 	.word	0x08005221
 8005140:	08005221 	.word	0x08005221
 8005144:	08005221 	.word	0x08005221
 8005148:	08005221 	.word	0x08005221
 800514c:	08005229 	.word	0x08005229
 8005150:	08005229 	.word	0x08005229
 8005154:	08005229 	.word	0x08005229
 8005158:	08005229 	.word	0x08005229
 800515c:	08005231 	.word	0x08005231
 8005160:	08005231 	.word	0x08005231
 8005164:	08005231 	.word	0x08005231
 8005168:	08005231 	.word	0x08005231
 800516c:	08005239 	.word	0x08005239
 8005170:	08005239 	.word	0x08005239
 8005174:	08005239 	.word	0x08005239
 8005178:	08005239 	.word	0x08005239
 800517c:	08005241 	.word	0x08005241
 8005180:	08005241 	.word	0x08005241
 8005184:	08005241 	.word	0x08005241
 8005188:	08005241 	.word	0x08005241
 800518c:	08005249 	.word	0x08005249
 8005190:	08005249 	.word	0x08005249
 8005194:	08005249 	.word	0x08005249
 8005198:	08005249 	.word	0x08005249
 800519c:	08005253 	.word	0x08005253
 80051a0:	08005253 	.word	0x08005253
 80051a4:	08005253 	.word	0x08005253
 80051a8:	08005253 	.word	0x08005253
 80051ac:	0800525d 	.word	0x0800525d
 80051b0:	0800525d 	.word	0x0800525d
 80051b4:	0800525d 	.word	0x0800525d
 80051b8:	0800529f 	.word	0x0800529f
 80051bc:	0800525d 	.word	0x0800525d
 80051c0:	08005267 	.word	0x08005267
 80051c4:	08005267 	.word	0x08005267
 80051c8:	08005267 	.word	0x08005267
 80051cc:	08005267 	.word	0x08005267
 80051d0:	08005271 	.word	0x08005271
 80051d4:	08005271 	.word	0x08005271
 80051d8:	08005271 	.word	0x08005271
 80051dc:	08005271 	.word	0x08005271
 80051e0:	0800527b 	.word	0x0800527b
 80051e4:	0800527b 	.word	0x0800527b
 80051e8:	0800527b 	.word	0x0800527b
 80051ec:	0800527b 	.word	0x0800527b
 80051f0:	08005285 	.word	0x08005285
 80051f4:	08005285 	.word	0x08005285
 80051f8:	08005285 	.word	0x08005285
 80051fc:	08005285 	.word	0x08005285
 8005200:	0800528f 	.word	0x0800528f
 8005204:	0800528f 	.word	0x0800528f
 8005208:	0800528f 	.word	0x0800528f
 800520c:	0800528f 	.word	0x0800528f
 8005210:	08005297 	.word	0x08005297
 8005214:	08005297 	.word	0x08005297
 8005218:	08005297 	.word	0x08005297
 800521c:	08005297 	.word	0x08005297
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8005220:	2001      	movs	r0, #1
 8005222:	f000 f845 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 8005226:	e03a      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8005228:	200a      	movs	r0, #10
 800522a:	f000 f841 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 800522e:	e036      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8005230:	2032      	movs	r0, #50	; 0x32
 8005232:	f000 f83d 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 8005236:	e032      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8005238:	2064      	movs	r0, #100	; 0x64
 800523a:	f000 f839 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 800523e:	e02e      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8005240:	20fa      	movs	r0, #250	; 0xfa
 8005242:	f000 f835 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 8005246:	e02a      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8005248:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800524c:	f000 f830 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 8005250:	e025      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8005252:	f240 20ee 	movw	r0, #750	; 0x2ee
 8005256:	f000 f82b 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 800525a:	e020      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 800525c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005260:	f000 f826 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 8005264:	e01b      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8005266:	f241 3088 	movw	r0, #5000	; 0x1388
 800526a:	f000 f821 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 800526e:	e016      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8005270:	f242 7010 	movw	r0, #10000	; 0x2710
 8005274:	f000 f81c 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 8005278:	e011      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 800527a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800527e:	f000 f817 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 8005282:	e00c      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8005284:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005288:	f000 f812 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 800528c:	e007      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 800528e:	4806      	ldr	r0, [pc, #24]	; (80052a8 <FreqO_ModifyOutput+0x184>)
 8005290:	f000 f80e 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 8005294:	e003      	b.n	800529e <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8005296:	4805      	ldr	r0, [pc, #20]	; (80052ac <FreqO_ModifyOutput+0x188>)
 8005298:	f000 f80a 	bl	80052b0 <FreqO_ApplyPreset>
			break;
 800529c:	bf00      	nop
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = FPRESET_100KHZ;
		FreqO_ApplyPreset_Fast(_FindFPresetObjectByIndex(tmpFreqIndex));
	}
	freq_last_encoder_value = pEncValue;
	*/
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	000124f8 	.word	0x000124f8
 80052ac:	000186a0 	.word	0x000186a0

080052b0 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff feef 	bl	800509c <DT_GetRegisterByEnum>
 80052be:	60f8      	str	r0, [r7, #12]
	if(tmp)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d015      	beq.n	80052f2 <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 80052c6:	4a0d      	ldr	r2, [pc, #52]	; (80052fc <FreqO_ApplyPreset+0x4c>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 80052ce:	4a0b      	ldr	r2, [pc, #44]	; (80052fc <FreqO_ApplyPreset+0x4c>)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f822 	bl	8005320 <FreqO_FindFPresetObject>
 80052dc:	60b8      	str	r0, [r7, #8]
		if(tmp)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 80052e4:	4a06      	ldr	r2, [pc, #24]	; (8005300 <FreqO_ApplyPreset+0x50>)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 80052ea:	e002      	b.n	80052f2 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 80052ec:	4805      	ldr	r0, [pc, #20]	; (8005304 <FreqO_ApplyPreset+0x54>)
 80052ee:	f7fc f909 	bl	8001504 <DM_SetErrorDebugMsg>
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40013400 	.word	0x40013400
 8005300:	20000198 	.word	0x20000198
 8005304:	08013acc 	.word	0x08013acc

08005308 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
	return freq_profile;
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <FreqO_GetFPresetObject+0x14>)
 800530e:	681b      	ldr	r3, [r3, #0]
}
 8005310:	4618      	mov	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000198 	.word	0x20000198

08005320 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e00e      	b.n	800534c <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800532e:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <FreqO_FindFPresetObject+0x44>)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d104      	bne.n	8005346 <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <FreqO_FindFPresetObject+0x44>)
 8005342:	4413      	add	r3, r2
 8005344:	e009      	b.n	800535a <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b0d      	cmp	r3, #13
 8005350:	dded      	ble.n	800532e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005352:	4805      	ldr	r0, [pc, #20]	; (8005368 <FreqO_FindFPresetObject+0x48>)
 8005354:	f7fc f8d6 	bl	8001504 <DM_SetErrorDebugMsg>
	return 0;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000128 	.word	0x20000128
 8005368:	08013af4 	.word	0x08013af4

0800536c <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8005372:	781b      	ldrb	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000124 	.word	0x20000124

08005384 <FuncO_ResetLastEncoderValue>:
uint8_t FuncPresetEncoderRange = 24;

uint16_t func_last_encoder_value = 0;

void FuncO_ResetLastEncoderValue()
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <FuncO_ResetLastEncoderValue+0x14>)
 800538a:	2200      	movs	r2, #0
 800538c:	801a      	strh	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20001f08 	.word	0x20001f08

0800539c <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80053b6:	2000      	movs	r0, #0
 80053b8:	f000 fb94 	bl	8005ae4 <SM_GetOutputChannel>
 80053bc:	4603      	mov	r3, r0
 80053be:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80053c6:	4b15      	ldr	r3, [pc, #84]	; (800541c <FuncO_ModifySignalOutput+0x70>)
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d90c      	bls.n	80053ea <FuncO_ModifySignalOutput+0x3e>
	{
		tmpFunc++;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	3301      	adds	r3, #1
 80053d4:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b06      	cmp	r3, #6
 80053da:	d901      	bls.n	80053e0 <FuncO_ModifySignalOutput+0x34>
 80053dc:	2306      	movs	r3, #6
 80053de:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f856 	bl	8005494 <FuncO_ApplyPresetToSignal>
 80053e8:	e010      	b.n	800540c <FuncO_ModifySignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <FuncO_ModifySignalOutput+0x70>)
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d20b      	bcs.n	800540c <FuncO_ModifySignalOutput+0x60>
	{
		tmpFunc--;
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b06      	cmp	r3, #6
 80053fe:	d901      	bls.n	8005404 <FuncO_ModifySignalOutput+0x58>
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f844 	bl	8005494 <FuncO_ApplyPresetToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 800540c:	4a03      	ldr	r2, [pc, #12]	; (800541c <FuncO_ModifySignalOutput+0x70>)
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	8013      	strh	r3, [r2, #0]
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20001f08 	.word	0x20001f08

08005420 <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 800542a:	2001      	movs	r0, #1
 800542c:	f000 fb5a 	bl	8005ae4 <SM_GetOutputChannel>
 8005430:	4603      	mov	r3, r0
 8005432:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 800543a:	4b15      	ldr	r3, [pc, #84]	; (8005490 <FuncO_ModifySyncOutput+0x70>)
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	429a      	cmp	r2, r3
 8005442:	d90c      	bls.n	800545e <FuncO_ModifySyncOutput+0x3e>
	{
		tmpFunc++;
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	3301      	adds	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b06      	cmp	r3, #6
 800544e:	d901      	bls.n	8005454 <FuncO_ModifySyncOutput+0x34>
 8005450:	2306      	movs	r3, #6
 8005452:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f876 	bl	8005548 <FuncO_ApplyPresetToSync>
 800545c:	e010      	b.n	8005480 <FuncO_ModifySyncOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <FuncO_ModifySyncOutput+0x70>)
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	429a      	cmp	r2, r3
 8005466:	d20b      	bcs.n	8005480 <FuncO_ModifySyncOutput+0x60>
	{
		tmpFunc--;
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	3b01      	subs	r3, #1
 800546c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	2b06      	cmp	r3, #6
 8005472:	d901      	bls.n	8005478 <FuncO_ModifySyncOutput+0x58>
 8005474:	2300      	movs	r3, #0
 8005476:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f864 	bl	8005548 <FuncO_ApplyPresetToSync>
	}
	func_last_encoder_value = pEncoderValue;
 8005480:	4a03      	ldr	r2, [pc, #12]	; (8005490 <FuncO_ModifySyncOutput+0x70>)
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	8013      	strh	r3, [r2, #0]
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20001f08 	.word	0x20001f08

08005494 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b087      	sub	sp, #28
 8005498:	af02      	add	r7, sp, #8
 800549a:	4603      	mov	r3, r0
 800549c:	71fb      	strb	r3, [r7, #7]

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800549e:	79fc      	ldrb	r4, [r7, #7]
 80054a0:	2000      	movs	r0, #0
 80054a2:	f000 fb1f 	bl	8005ae4 <SM_GetOutputChannel>
 80054a6:	4601      	mov	r1, r0
 80054a8:	00e3      	lsls	r3, r4, #3
 80054aa:	4a23      	ldr	r2, [pc, #140]	; (8005538 <FuncO_ApplyPresetToSignal+0xa4>)
 80054ac:	4413      	add	r3, r2
 80054ae:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80054b2:	79fc      	ldrb	r4, [r7, #7]
 80054b4:	2000      	movs	r0, #0
 80054b6:	f000 fb15 	bl	8005ae4 <SM_GetOutputChannel>
 80054ba:	4601      	mov	r1, r0
 80054bc:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <FuncO_ApplyPresetToSignal+0xa4>)
 80054be:	00e3      	lsls	r3, r4, #3
 80054c0:	4413      	add	r3, r2
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80054c6:	2000      	movs	r0, #0
 80054c8:	f000 fb0c 	bl	8005ae4 <SM_GetOutputChannel>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fb9f 	bl	8005c1c <VPP_ApplyPresetToSignal>

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 80054de:	4817      	ldr	r0, [pc, #92]	; (800553c <FuncO_ApplyPresetToSignal+0xa8>)
 80054e0:	f007 f9a6 	bl	800c830 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80054e4:	2100      	movs	r1, #0
 80054e6:	4816      	ldr	r0, [pc, #88]	; (8005540 <FuncO_ApplyPresetToSignal+0xac>)
 80054e8:	f005 f944 	bl	800a774 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80054ec:	2000      	movs	r0, #0
 80054ee:	f000 faf9 	bl	8005ae4 <SM_GetOutputChannel>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f103 0208 	add.w	r2, r3, #8
 80054f8:	2300      	movs	r3, #0
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2378      	movs	r3, #120	; 0x78
 80054fe:	2100      	movs	r1, #0
 8005500:	480f      	ldr	r0, [pc, #60]	; (8005540 <FuncO_ApplyPresetToSignal+0xac>)
 8005502:	f005 f875 	bl	800a5f0 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005506:	2100      	movs	r1, #0
 8005508:	480e      	ldr	r0, [pc, #56]	; (8005544 <FuncO_ApplyPresetToSignal+0xb0>)
 800550a:	f005 f933 	bl	800a774 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800550e:	2001      	movs	r0, #1
 8005510:	f000 fae8 	bl	8005ae4 <SM_GetOutputChannel>
 8005514:	4603      	mov	r3, r0
 8005516:	f103 0208 	add.w	r2, r3, #8
 800551a:	2300      	movs	r3, #0
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2378      	movs	r3, #120	; 0x78
 8005520:	2100      	movs	r1, #0
 8005522:	4808      	ldr	r0, [pc, #32]	; (8005544 <FuncO_ApplyPresetToSignal+0xb0>)
 8005524:	f005 f864 	bl	800a5f0 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8005528:	4804      	ldr	r0, [pc, #16]	; (800553c <FuncO_ApplyPresetToSignal+0xa8>)
 800552a:	f007 f953 	bl	800c7d4 <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}
 8005536:	bf00      	nop
 8005538:	200001a0 	.word	0x200001a0
 800553c:	20002730 	.word	0x20002730
 8005540:	200025f8 	.word	0x200025f8
 8005544:	200025e4 	.word	0x200025e4

08005548 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b087      	sub	sp, #28
 800554c:	af02      	add	r7, sp, #8
 800554e:	4603      	mov	r3, r0
 8005550:	71fb      	strb	r3, [r7, #7]
	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005552:	79fc      	ldrb	r4, [r7, #7]
 8005554:	2001      	movs	r0, #1
 8005556:	f000 fac5 	bl	8005ae4 <SM_GetOutputChannel>
 800555a:	4601      	mov	r1, r0
 800555c:	00e3      	lsls	r3, r4, #3
 800555e:	4a26      	ldr	r2, [pc, #152]	; (80055f8 <FuncO_ApplyPresetToSync+0xb0>)
 8005560:	4413      	add	r3, r2
 8005562:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005566:	79fc      	ldrb	r4, [r7, #7]
 8005568:	2001      	movs	r0, #1
 800556a:	f000 fabb 	bl	8005ae4 <SM_GetOutputChannel>
 800556e:	4601      	mov	r1, r0
 8005570:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <FuncO_ApplyPresetToSync+0xb0>)
 8005572:	00e3      	lsls	r3, r4, #3
 8005574:	4413      	add	r3, r2
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 800557a:	2001      	movs	r0, #1
 800557c:	f000 fab2 	bl	8005ae4 <SM_GetOutputChannel>
 8005580:	4603      	mov	r3, r0
 8005582:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fb73 	bl	8005c78 <VPP_ApplyPresetToSync>

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005592:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <FuncO_ApplyPresetToSync+0xb4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a19      	ldr	r2, [pc, #100]	; (80055fc <FuncO_ApplyPresetToSync+0xb4>)
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800559e:	2100      	movs	r1, #0
 80055a0:	4817      	ldr	r0, [pc, #92]	; (8005600 <FuncO_ApplyPresetToSync+0xb8>)
 80055a2:	f005 f8e7 	bl	800a774 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80055a6:	2001      	movs	r0, #1
 80055a8:	f000 fa9c 	bl	8005ae4 <SM_GetOutputChannel>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f103 0208 	add.w	r2, r3, #8
 80055b2:	2300      	movs	r3, #0
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	2378      	movs	r3, #120	; 0x78
 80055b8:	2100      	movs	r1, #0
 80055ba:	4811      	ldr	r0, [pc, #68]	; (8005600 <FuncO_ApplyPresetToSync+0xb8>)
 80055bc:	f005 f818 	bl	800a5f0 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80055c0:	2100      	movs	r1, #0
 80055c2:	4810      	ldr	r0, [pc, #64]	; (8005604 <FuncO_ApplyPresetToSync+0xbc>)
 80055c4:	f005 f8d6 	bl	800a774 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80055c8:	2000      	movs	r0, #0
 80055ca:	f000 fa8b 	bl	8005ae4 <SM_GetOutputChannel>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f103 0208 	add.w	r2, r3, #8
 80055d4:	2300      	movs	r3, #0
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	2378      	movs	r3, #120	; 0x78
 80055da:	2100      	movs	r1, #0
 80055dc:	4809      	ldr	r0, [pc, #36]	; (8005604 <FuncO_ApplyPresetToSync+0xbc>)
 80055de:	f005 f807 	bl	800a5f0 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <FuncO_ApplyPresetToSync+0xb4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a05      	ldr	r2, [pc, #20]	; (80055fc <FuncO_ApplyPresetToSync+0xb4>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	6013      	str	r3, [r2, #0]
}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd90      	pop	{r4, r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200001a0 	.word	0x200001a0
 80055fc:	40013400 	.word	0x40013400
 8005600:	200025e4 	.word	0x200025e4
 8005604:	200025f8 	.word	0x200025f8

08005608 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <FuncO_GetFuncPresetEncoderRange+0x14>)
 800560e:	781b      	ldrb	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	2000019c 	.word	0x2000019c

08005620 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800562a:	79fc      	ldrb	r4, [r7, #7]
 800562c:	2000      	movs	r0, #0
 800562e:	f000 fa59 	bl	8005ae4 <SM_GetOutputChannel>
 8005632:	4601      	mov	r1, r0
 8005634:	4623      	mov	r3, r4
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4423      	add	r3, r4
 800563a:	4a4f      	ldr	r2, [pc, #316]	; (8005778 <GO_ApplyPresetToSignal+0x158>)
 800563c:	4413      	add	r3, r2
 800563e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	2b07      	cmp	r3, #7
 8005646:	f200 8093 	bhi.w	8005770 <GO_ApplyPresetToSignal+0x150>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <GO_ApplyPresetToSignal+0x30>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005671 	.word	0x08005671
 8005654:	08005691 	.word	0x08005691
 8005658:	080056b1 	.word	0x080056b1
 800565c:	080056d1 	.word	0x080056d1
 8005660:	080056f1 	.word	0x080056f1
 8005664:	08005711 	.word	0x08005711
 8005668:	08005731 	.word	0x08005731
 800566c:	08005751 	.word	0x08005751
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	2101      	movs	r1, #1
 8005674:	4841      	ldr	r0, [pc, #260]	; (800577c <GO_ApplyPresetToSignal+0x15c>)
 8005676:	f005 ffb3 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800567a:	2200      	movs	r2, #0
 800567c:	2120      	movs	r1, #32
 800567e:	4840      	ldr	r0, [pc, #256]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 8005680:	f005 ffae 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005684:	2200      	movs	r2, #0
 8005686:	2110      	movs	r1, #16
 8005688:	483d      	ldr	r0, [pc, #244]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 800568a:	f005 ffa9 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 800568e:	e06f      	b.n	8005770 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005690:	2201      	movs	r2, #1
 8005692:	2101      	movs	r1, #1
 8005694:	4839      	ldr	r0, [pc, #228]	; (800577c <GO_ApplyPresetToSignal+0x15c>)
 8005696:	f005 ffa3 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800569a:	2200      	movs	r2, #0
 800569c:	2120      	movs	r1, #32
 800569e:	4838      	ldr	r0, [pc, #224]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 80056a0:	f005 ff9e 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80056a4:	2200      	movs	r2, #0
 80056a6:	2110      	movs	r1, #16
 80056a8:	4835      	ldr	r0, [pc, #212]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 80056aa:	f005 ff99 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 80056ae:	e05f      	b.n	8005770 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80056b0:	2200      	movs	r2, #0
 80056b2:	2101      	movs	r1, #1
 80056b4:	4831      	ldr	r0, [pc, #196]	; (800577c <GO_ApplyPresetToSignal+0x15c>)
 80056b6:	f005 ff93 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80056ba:	2201      	movs	r2, #1
 80056bc:	2120      	movs	r1, #32
 80056be:	4830      	ldr	r0, [pc, #192]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 80056c0:	f005 ff8e 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2110      	movs	r1, #16
 80056c8:	482d      	ldr	r0, [pc, #180]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 80056ca:	f005 ff89 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 80056ce:	e04f      	b.n	8005770 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80056d0:	2201      	movs	r2, #1
 80056d2:	2101      	movs	r1, #1
 80056d4:	4829      	ldr	r0, [pc, #164]	; (800577c <GO_ApplyPresetToSignal+0x15c>)
 80056d6:	f005 ff83 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80056da:	2201      	movs	r2, #1
 80056dc:	2120      	movs	r1, #32
 80056de:	4828      	ldr	r0, [pc, #160]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 80056e0:	f005 ff7e 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80056e4:	2200      	movs	r2, #0
 80056e6:	2110      	movs	r1, #16
 80056e8:	4825      	ldr	r0, [pc, #148]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 80056ea:	f005 ff79 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 80056ee:	e03f      	b.n	8005770 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80056f0:	2200      	movs	r2, #0
 80056f2:	2101      	movs	r1, #1
 80056f4:	4821      	ldr	r0, [pc, #132]	; (800577c <GO_ApplyPresetToSignal+0x15c>)
 80056f6:	f005 ff73 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80056fa:	2200      	movs	r2, #0
 80056fc:	2120      	movs	r1, #32
 80056fe:	4820      	ldr	r0, [pc, #128]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 8005700:	f005 ff6e 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005704:	2201      	movs	r2, #1
 8005706:	2110      	movs	r1, #16
 8005708:	481d      	ldr	r0, [pc, #116]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 800570a:	f005 ff69 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 800570e:	e02f      	b.n	8005770 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005710:	2201      	movs	r2, #1
 8005712:	2101      	movs	r1, #1
 8005714:	4819      	ldr	r0, [pc, #100]	; (800577c <GO_ApplyPresetToSignal+0x15c>)
 8005716:	f005 ff63 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800571a:	2200      	movs	r2, #0
 800571c:	2120      	movs	r1, #32
 800571e:	4818      	ldr	r0, [pc, #96]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 8005720:	f005 ff5e 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005724:	2201      	movs	r2, #1
 8005726:	2110      	movs	r1, #16
 8005728:	4815      	ldr	r0, [pc, #84]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 800572a:	f005 ff59 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 800572e:	e01f      	b.n	8005770 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005730:	2200      	movs	r2, #0
 8005732:	2101      	movs	r1, #1
 8005734:	4811      	ldr	r0, [pc, #68]	; (800577c <GO_ApplyPresetToSignal+0x15c>)
 8005736:	f005 ff53 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800573a:	2201      	movs	r2, #1
 800573c:	2120      	movs	r1, #32
 800573e:	4810      	ldr	r0, [pc, #64]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 8005740:	f005 ff4e 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005744:	2201      	movs	r2, #1
 8005746:	2110      	movs	r1, #16
 8005748:	480d      	ldr	r0, [pc, #52]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 800574a:	f005 ff49 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 800574e:	e00f      	b.n	8005770 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005750:	2201      	movs	r2, #1
 8005752:	2101      	movs	r1, #1
 8005754:	4809      	ldr	r0, [pc, #36]	; (800577c <GO_ApplyPresetToSignal+0x15c>)
 8005756:	f005 ff43 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800575a:	2201      	movs	r2, #1
 800575c:	2120      	movs	r1, #32
 800575e:	4808      	ldr	r0, [pc, #32]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 8005760:	f005 ff3e 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005764:	2201      	movs	r2, #1
 8005766:	2110      	movs	r1, #16
 8005768:	4805      	ldr	r0, [pc, #20]	; (8005780 <GO_ApplyPresetToSignal+0x160>)
 800576a:	f005 ff39 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 800576e:	bf00      	nop
	}
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bd90      	pop	{r4, r7, pc}
 8005778:	200001d8 	.word	0x200001d8
 800577c:	48000400 	.word	0x48000400
 8005780:	48000800 	.word	0x48000800

08005784 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800578e:	79fc      	ldrb	r4, [r7, #7]
 8005790:	2001      	movs	r0, #1
 8005792:	f000 f9a7 	bl	8005ae4 <SM_GetOutputChannel>
 8005796:	4601      	mov	r1, r0
 8005798:	4623      	mov	r3, r4
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4423      	add	r3, r4
 800579e:	4a4f      	ldr	r2, [pc, #316]	; (80058dc <GO_ApplyPresetToSync+0x158>)
 80057a0:	4413      	add	r3, r2
 80057a2:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	2b07      	cmp	r3, #7
 80057aa:	f200 8093 	bhi.w	80058d4 <GO_ApplyPresetToSync+0x150>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <GO_ApplyPresetToSync+0x30>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057d5 	.word	0x080057d5
 80057b8:	080057f5 	.word	0x080057f5
 80057bc:	08005815 	.word	0x08005815
 80057c0:	08005835 	.word	0x08005835
 80057c4:	08005855 	.word	0x08005855
 80057c8:	08005875 	.word	0x08005875
 80057cc:	08005895 	.word	0x08005895
 80057d0:	080058b5 	.word	0x080058b5
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80057d4:	2200      	movs	r2, #0
 80057d6:	2101      	movs	r1, #1
 80057d8:	4841      	ldr	r0, [pc, #260]	; (80058e0 <GO_ApplyPresetToSync+0x15c>)
 80057da:	f005 ff01 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80057de:	2200      	movs	r2, #0
 80057e0:	2120      	movs	r1, #32
 80057e2:	4840      	ldr	r0, [pc, #256]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 80057e4:	f005 fefc 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80057e8:	2200      	movs	r2, #0
 80057ea:	2110      	movs	r1, #16
 80057ec:	483d      	ldr	r0, [pc, #244]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 80057ee:	f005 fef7 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 80057f2:	e06f      	b.n	80058d4 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80057f4:	2201      	movs	r2, #1
 80057f6:	2101      	movs	r1, #1
 80057f8:	4839      	ldr	r0, [pc, #228]	; (80058e0 <GO_ApplyPresetToSync+0x15c>)
 80057fa:	f005 fef1 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80057fe:	2200      	movs	r2, #0
 8005800:	2120      	movs	r1, #32
 8005802:	4838      	ldr	r0, [pc, #224]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 8005804:	f005 feec 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005808:	2200      	movs	r2, #0
 800580a:	2110      	movs	r1, #16
 800580c:	4835      	ldr	r0, [pc, #212]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 800580e:	f005 fee7 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 8005812:	e05f      	b.n	80058d4 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005814:	2200      	movs	r2, #0
 8005816:	2101      	movs	r1, #1
 8005818:	4831      	ldr	r0, [pc, #196]	; (80058e0 <GO_ApplyPresetToSync+0x15c>)
 800581a:	f005 fee1 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800581e:	2201      	movs	r2, #1
 8005820:	2120      	movs	r1, #32
 8005822:	4830      	ldr	r0, [pc, #192]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 8005824:	f005 fedc 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005828:	2200      	movs	r2, #0
 800582a:	2110      	movs	r1, #16
 800582c:	482d      	ldr	r0, [pc, #180]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 800582e:	f005 fed7 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 8005832:	e04f      	b.n	80058d4 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005834:	2201      	movs	r2, #1
 8005836:	2101      	movs	r1, #1
 8005838:	4829      	ldr	r0, [pc, #164]	; (80058e0 <GO_ApplyPresetToSync+0x15c>)
 800583a:	f005 fed1 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800583e:	2201      	movs	r2, #1
 8005840:	2120      	movs	r1, #32
 8005842:	4828      	ldr	r0, [pc, #160]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 8005844:	f005 fecc 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005848:	2200      	movs	r2, #0
 800584a:	2110      	movs	r1, #16
 800584c:	4825      	ldr	r0, [pc, #148]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 800584e:	f005 fec7 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 8005852:	e03f      	b.n	80058d4 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005854:	2200      	movs	r2, #0
 8005856:	2101      	movs	r1, #1
 8005858:	4821      	ldr	r0, [pc, #132]	; (80058e0 <GO_ApplyPresetToSync+0x15c>)
 800585a:	f005 fec1 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800585e:	2200      	movs	r2, #0
 8005860:	2120      	movs	r1, #32
 8005862:	4820      	ldr	r0, [pc, #128]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 8005864:	f005 febc 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005868:	2201      	movs	r2, #1
 800586a:	2110      	movs	r1, #16
 800586c:	481d      	ldr	r0, [pc, #116]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 800586e:	f005 feb7 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 8005872:	e02f      	b.n	80058d4 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005874:	2201      	movs	r2, #1
 8005876:	2101      	movs	r1, #1
 8005878:	4819      	ldr	r0, [pc, #100]	; (80058e0 <GO_ApplyPresetToSync+0x15c>)
 800587a:	f005 feb1 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800587e:	2200      	movs	r2, #0
 8005880:	2120      	movs	r1, #32
 8005882:	4818      	ldr	r0, [pc, #96]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 8005884:	f005 feac 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005888:	2201      	movs	r2, #1
 800588a:	2110      	movs	r1, #16
 800588c:	4815      	ldr	r0, [pc, #84]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 800588e:	f005 fea7 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 8005892:	e01f      	b.n	80058d4 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005894:	2200      	movs	r2, #0
 8005896:	2101      	movs	r1, #1
 8005898:	4811      	ldr	r0, [pc, #68]	; (80058e0 <GO_ApplyPresetToSync+0x15c>)
 800589a:	f005 fea1 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800589e:	2201      	movs	r2, #1
 80058a0:	2120      	movs	r1, #32
 80058a2:	4810      	ldr	r0, [pc, #64]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 80058a4:	f005 fe9c 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80058a8:	2201      	movs	r2, #1
 80058aa:	2110      	movs	r1, #16
 80058ac:	480d      	ldr	r0, [pc, #52]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 80058ae:	f005 fe97 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 80058b2:	e00f      	b.n	80058d4 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80058b4:	2201      	movs	r2, #1
 80058b6:	2101      	movs	r1, #1
 80058b8:	4809      	ldr	r0, [pc, #36]	; (80058e0 <GO_ApplyPresetToSync+0x15c>)
 80058ba:	f005 fe91 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80058be:	2201      	movs	r2, #1
 80058c0:	2120      	movs	r1, #32
 80058c2:	4808      	ldr	r0, [pc, #32]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 80058c4:	f005 fe8c 	bl	800b5e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80058c8:	2201      	movs	r2, #1
 80058ca:	2110      	movs	r1, #16
 80058cc:	4805      	ldr	r0, [pc, #20]	; (80058e4 <GO_ApplyPresetToSync+0x160>)
 80058ce:	f005 fe87 	bl	800b5e0 <HAL_GPIO_WritePin>
			break;
 80058d2:	bf00      	nop
	}
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd90      	pop	{r4, r7, pc}
 80058dc:	200001d8 	.word	0x200001d8
 80058e0:	48000400 	.word	0x48000400
 80058e4:	48000800 	.word	0x48000800

080058e8 <SM_Init>:
void _InitOutputChannels();
void _InitNegGainCoefficients();
void _InitGainInDecibels();

void SM_Init()
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0

	_InitOutputChannels();
 80058ec:	f000 f89a 	bl	8005a24 <_InitOutputChannels>
	_InitNegGainCoefficients();
 80058f0:	f000 f850 	bl	8005994 <_InitNegGainCoefficients>
	_InitGainInDecibels();
 80058f4:	f000 f802 	bl	80058fc <_InitGainInDecibels>

}
 80058f8:	bf00      	nop
 80058fa:	bd80      	pop	{r7, pc}

080058fc <_InitGainInDecibels>:

void _InitGainInDecibels()
{
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e037      	b.n	8005978 <_InitGainInDecibels+0x7c>
	{
		float decibel_mvolt_ref = 0.001;
 8005908:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <_InitGainInDecibels+0x8c>)
 800590a:	60bb      	str	r3, [r7, #8]
		float this_amp_value = theAmpProfiles[i].amp_value;
 800590c:	491f      	ldr	r1, [pc, #124]	; (800598c <_InitGainInDecibels+0x90>)
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4613      	mov	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	3304      	adds	r3, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	607b      	str	r3, [r7, #4]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005920:	ed97 7a01 	vldr	s14, [r7, #4]
 8005924:	edd7 7a02 	vldr	s15, [r7, #8]
 8005928:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800592c:	ee16 0a90 	vmov	r0, s13
 8005930:	f7fa fe32 	bl	8000598 <__aeabi_f2d>
 8005934:	4603      	mov	r3, r0
 8005936:	460c      	mov	r4, r1
 8005938:	ec44 3b10 	vmov	d0, r3, r4
 800593c:	f00b fe48 	bl	80115d0 <log10>
 8005940:	ec51 0b10 	vmov	r0, r1, d0
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	4b11      	ldr	r3, [pc, #68]	; (8005990 <_InitGainInDecibels+0x94>)
 800594a:	f7fa fe7d 	bl	8000648 <__aeabi_dmul>
 800594e:	4603      	mov	r3, r0
 8005950:	460c      	mov	r4, r1
 8005952:	4618      	mov	r0, r3
 8005954:	4621      	mov	r1, r4
 8005956:	f7fb f96f 	bl	8000c38 <__aeabi_d2f>
 800595a:	4603      	mov	r3, r0
 800595c:	603b      	str	r3, [r7, #0]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 800595e:	490b      	ldr	r1, [pc, #44]	; (800598c <_InitGainInDecibels+0x90>)
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4613      	mov	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	330c      	adds	r3, #12
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b61      	cmp	r3, #97	; 0x61
 800597c:	ddc4      	ble.n	8005908 <_InitGainInDecibels+0xc>

	}
}
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bd90      	pop	{r4, r7, pc}
 8005986:	bf00      	nop
 8005988:	3a83126f 	.word	0x3a83126f
 800598c:	200001f0 	.word	0x200001f0
 8005990:	40340000 	.word	0x40340000

08005994 <_InitNegGainCoefficients>:

void _InitNegGainCoefficients()
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e033      	b.n	8005a08 <_InitNegGainCoefficients+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 80059a0:	491e      	ldr	r1, [pc, #120]	; (8005a1c <_InitNegGainCoefficients+0x88>)
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	3304      	adds	r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <_InitNegGainCoefficients+0x8c>)
 80059b6:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 80059b8:	4918      	ldr	r1, [pc, #96]	; (8005a1c <_InitNegGainCoefficients+0x88>)
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	3308      	adds	r3, #8
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 80059d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80059da:	edd7 7a03 	vldr	s15, [r7, #12]
 80059de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80059e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80059e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ea:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 80059ee:	490b      	ldr	r1, [pc, #44]	; (8005a1c <_InitNegGainCoefficients+0x88>)
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4613      	mov	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	3310      	adds	r3, #16
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	3301      	adds	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b61      	cmp	r3, #97	; 0x61
 8005a0c:	ddc8      	ble.n	80059a0 <_InitNegGainCoefficients+0xc>
	}
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	200001f0 	.word	0x200001f0
 8005a20:	402ccccd 	.word	0x402ccccd

08005a24 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005a2a:	4b28      	ldr	r3, [pc, #160]	; (8005acc <_InitOutputChannels+0xa8>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005a30:	4b27      	ldr	r3, [pc, #156]	; (8005ad0 <_InitOutputChannels+0xac>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4a25      	ldr	r2, [pc, #148]	; (8005acc <_InitOutputChannels+0xa8>)
 8005a36:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005a38:	4b24      	ldr	r3, [pc, #144]	; (8005acc <_InitOutputChannels+0xa8>)
 8005a3a:	4a25      	ldr	r2, [pc, #148]	; (8005ad0 <_InitOutputChannels+0xac>)
 8005a3c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a40:	2300      	movs	r3, #0
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	e00b      	b.n	8005a5e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005a46:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <_InitOutputChannels+0xb0>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a4e:	491f      	ldr	r1, [pc, #124]	; (8005acc <_InitOutputChannels+0xa8>)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3302      	adds	r3, #2
 8005a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b77      	cmp	r3, #119	; 0x77
 8005a62:	ddf0      	ble.n	8005a46 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <_InitOutputChannels+0xa8>)
 8005a66:	4a1c      	ldr	r2, [pc, #112]	; (8005ad8 <_InitOutputChannels+0xb4>)
 8005a68:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005a6c:	4b17      	ldr	r3, [pc, #92]	; (8005acc <_InitOutputChannels+0xa8>)
 8005a6e:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <_InitOutputChannels+0xb8>)
 8005a70:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <_InitOutputChannels+0xbc>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005a7a:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <_InitOutputChannels+0xac>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <_InitOutputChannels+0xbc>)
 8005a80:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005a82:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <_InitOutputChannels+0xbc>)
 8005a84:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <_InitOutputChannels+0xac>)
 8005a86:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	e00b      	b.n	8005aa8 <_InitOutputChannels+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005a90:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <_InitOutputChannels+0xb0>)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a98:	4911      	ldr	r1, [pc, #68]	; (8005ae0 <_InitOutputChannels+0xbc>)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b77      	cmp	r3, #119	; 0x77
 8005aac:	ddf0      	ble.n	8005a90 <_InitOutputChannels+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <_InitOutputChannels+0xbc>)
 8005ab0:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <_InitOutputChannels+0xb4>)
 8005ab2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <_InitOutputChannels+0xbc>)
 8005ab8:	4a08      	ldr	r2, [pc, #32]	; (8005adc <_InitOutputChannels+0xb8>)
 8005aba:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20002120 	.word	0x20002120
 8005ad0:	200001a0 	.word	0x200001a0
 8005ad4:	2000152c 	.word	0x2000152c
 8005ad8:	20000bac 	.word	0x20000bac
 8005adc:	200001db 	.word	0x200001db
 8005ae0:	20001f2c 	.word	0x20001f2c

08005ae4 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <SM_GetOutputChannel+0x24>)
 8005af6:	e000      	b.n	8005afa <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8005af8:	4b04      	ldr	r3, [pc, #16]	; (8005b0c <SM_GetOutputChannel+0x28>)
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20002120 	.word	0x20002120
 8005b0c:	20001f2c 	.word	0x20001f2c

08005b10 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8005b20:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <SM_GetEncoderValue+0x34>)
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <SM_GetEncoderValue+0x34>)
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	e002      	b.n	8005b38 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8005b32:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <SM_GetEncoderValue+0x34>)
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	b29b      	uxth	r3, r3
	}
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40012c00 	.word	0x40012c00

08005b48 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <SM_GetOutputInHertz+0x7c>)
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <SM_GetOutputInHertz+0x16>
 8005b56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	e007      	b.n	8005b6e <SM_GetOutputInHertz+0x26>
 8005b5e:	4b19      	ldr	r3, [pc, #100]	; (8005bc4 <SM_GetOutputInHertz+0x7c>)
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6a:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8005b6e:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <SM_GetOutputInHertz+0x7c>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <SM_GetOutputInHertz+0x36>
 8005b76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005b7a:	607b      	str	r3, [r7, #4]
 8005b7c:	e007      	b.n	8005b8e <SM_GetOutputInHertz+0x46>
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <SM_GetOutputInHertz+0x7c>)
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8a:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8005b8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b9a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005bc8 <SM_GetOutputInHertz+0x80>
 8005b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba2:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8005ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005baa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005bcc <SM_GetOutputInHertz+0x84>
 8005bae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bb2:	eef0 7a66 	vmov.f32	s15, s13
}
 8005bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	40013400 	.word	0x40013400
 8005bc8:	4d2037a0 	.word	0x4d2037a0
 8005bcc:	42f00000 	.word	0x42f00000

08005bd0 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8005bdc:	887b      	ldrh	r3, [r7, #2]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <SM_ConvertPeriodToHertz+0x16>
 8005be2:	2301      	movs	r3, #1
 8005be4:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8005be6:	887b      	ldrh	r3, [r7, #2]
 8005be8:	ee07 3a90 	vmov	s15, r3
 8005bec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005c18 <SM_ConvertPeriodToHertz+0x48>
 8005c02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005c06:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	4d2037a0 	.word	0x4d2037a0

08005c1c <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005c26:	79fa      	ldrb	r2, [r7, #7]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4a10      	ldr	r2, [pc, #64]	; (8005c74 <VPP_ApplyPresetToSignal+0x58>)
 8005c32:	4413      	add	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8005c36:	2000      	movs	r0, #0
 8005c38:	f7ff ff54 	bl	8005ae4 <SM_GetOutputChannel>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	7a1b      	ldrb	r3, [r3, #8]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fce9 	bl	8005620 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	ed93 7a05 	vldr	s14, [r3, #20]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8b1b      	ldrh	r3, [r3, #24]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	eef0 0a47 	vmov.f32	s1, s14
 8005c64:	eeb0 0a67 	vmov.f32	s0, s15
 8005c68:	f000 f834 	bl	8005cd4 <_ProcessSignalDataTable>


}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200001f0 	.word	0x200001f0

08005c78 <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005c82:	79fa      	ldrb	r2, [r7, #7]
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	1a9b      	subs	r3, r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <VPP_ApplyPresetToSync+0x58>)
 8005c8e:	4413      	add	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 8005c92:	2001      	movs	r0, #1
 8005c94:	f7ff ff26 	bl	8005ae4 <SM_GetOutputChannel>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	7a1b      	ldrb	r3, [r3, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff fd6d 	bl	8005784 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	ed93 7a05 	vldr	s14, [r3, #20]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8b1b      	ldrh	r3, [r3, #24]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	eef0 0a47 	vmov.f32	s1, s14
 8005cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc4:	f000 f88c 	bl	8005de0 <_ProcessSyncDataTable>



}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	200001f0 	.word	0x200001f0

08005cd4 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	; 0x28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	ed87 0a03 	vstr	s0, [r7, #12]
 8005cde:	edc7 0a02 	vstr	s1, [r7, #8]
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	f7ff fefc 	bl	8005ae4 <SM_GetOutputChannel>
 8005cec:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b06      	cmp	r3, #6
 8005cf8:	d06b      	beq.n	8005dd2 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfe:	e00c      	b.n	8005d1a <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	4933      	ldr	r1, [pc, #204]	; (8005ddc <_ProcessSignalDataTable+0x108>)
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	3301      	adds	r3, #1
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	2b77      	cmp	r3, #119	; 0x77
 8005d1e:	ddef      	ble.n	8005d00 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8005d20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005d24:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d3a:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	e02e      	b.n	8005da2 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8005d44:	4a25      	ldr	r2, [pc, #148]	; (8005ddc <_ProcessSignalDataTable+0x108>)
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4c:	ee07 3a90 	vmov	s15, r3
 8005d50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d60:	ee17 1a90 	vmov	r1, s15
 8005d64:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <_ProcessSignalDataTable+0x108>)
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8005d6c:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <_ProcessSignalDataTable+0x108>)
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d74:	ee07 3a90 	vmov	s15, r3
 8005d78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d80:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005d84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d90:	ee17 1a90 	vmov	r1, s15
 8005d94:	4a11      	ldr	r2, [pc, #68]	; (8005ddc <_ProcessSignalDataTable+0x108>)
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	2b77      	cmp	r3, #119	; 0x77
 8005da6:	ddcd      	ble.n	8005d44 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005da8:	2300      	movs	r3, #0
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	e00e      	b.n	8005dcc <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005dae:	2000      	movs	r0, #0
 8005db0:	f7ff fe98 	bl	8005ae4 <SM_GetOutputChannel>
 8005db4:	4601      	mov	r1, r0
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <_ProcessSignalDataTable+0x108>)
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b77      	cmp	r3, #119	; 0x77
 8005dd0:	dded      	ble.n	8005dae <_ProcessSignalDataTable+0xda>
		}
	}

}
 8005dd2:	bf00      	nop
 8005dd4:	3728      	adds	r7, #40	; 0x28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20002314 	.word	0x20002314

08005de0 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	ed87 0a03 	vstr	s0, [r7, #12]
 8005dea:	edc7 0a02 	vstr	s1, [r7, #8]
 8005dee:	4603      	mov	r3, r0
 8005df0:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8005df2:	2001      	movs	r0, #1
 8005df4:	f7ff fe76 	bl	8005ae4 <SM_GetOutputChannel>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b06      	cmp	r3, #6
 8005e02:	d059      	beq.n	8005eb8 <_ProcessSyncDataTable+0xd8>
	{
		// copy refer lookup datat table from SyncChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e04:	2300      	movs	r3, #0
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	e00f      	b.n	8005e2a <_ProcessSyncDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	f7ff fe6a 	bl	8005ae4 <SM_GetOutputChannel>
 8005e10:	4603      	mov	r3, r0
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4933      	ldr	r1, [pc, #204]	; (8005eec <_ProcessSyncDataTable+0x10c>)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	3301      	adds	r3, #1
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2b77      	cmp	r3, #119	; 0x77
 8005e2e:	ddec      	ble.n	8005e0a <_ProcessSyncDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8005e30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005e34:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <_ProcessSyncDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e4a:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e02e      	b.n	8005eb2 <_ProcessSyncDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8005e54:	4a25      	ldr	r2, [pc, #148]	; (8005eec <_ProcessSyncDataTable+0x10c>)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e64:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e70:	ee17 1a90 	vmov	r1, s15
 8005e74:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <_ProcessSyncDataTable+0x10c>)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <_ProcessSyncDataTable+0x10c>)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e84:	ee07 3a90 	vmov	s15, r3
 8005e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e90:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005e94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea0:	ee17 1a90 	vmov	r1, s15
 8005ea4:	4a11      	ldr	r2, [pc, #68]	; (8005eec <_ProcessSyncDataTable+0x10c>)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b77      	cmp	r3, #119	; 0x77
 8005eb6:	ddcd      	ble.n	8005e54 <_ProcessSyncDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	e00e      	b.n	8005edc <_ProcessSyncDataTable+0xfc>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	f7ff fe10 	bl	8005ae4 <SM_GetOutputChannel>
 8005ec4:	4601      	mov	r1, r0
 8005ec6:	4a09      	ldr	r2, [pc, #36]	; (8005eec <_ProcessSyncDataTable+0x10c>)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b77      	cmp	r3, #119	; 0x77
 8005ee0:	dded      	ble.n	8005ebe <_ProcessSyncDataTable+0xde>
	}
}
 8005ee2:	bf00      	nop
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20002314 	.word	0x20002314

08005ef0 <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005f00:	f200 849a 	bhi.w	8006838 <VPP_ModifySignalOutput+0x948>
 8005f04:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <VPP_ModifySignalOutput+0x1c>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08006529 	.word	0x08006529
 8005f10:	08006529 	.word	0x08006529
 8005f14:	08006529 	.word	0x08006529
 8005f18:	08006531 	.word	0x08006531
 8005f1c:	08006531 	.word	0x08006531
 8005f20:	08006531 	.word	0x08006531
 8005f24:	08006531 	.word	0x08006531
 8005f28:	08006539 	.word	0x08006539
 8005f2c:	08006539 	.word	0x08006539
 8005f30:	08006539 	.word	0x08006539
 8005f34:	08006539 	.word	0x08006539
 8005f38:	08006541 	.word	0x08006541
 8005f3c:	08006541 	.word	0x08006541
 8005f40:	08006541 	.word	0x08006541
 8005f44:	08006541 	.word	0x08006541
 8005f48:	08006549 	.word	0x08006549
 8005f4c:	08006549 	.word	0x08006549
 8005f50:	08006549 	.word	0x08006549
 8005f54:	08006549 	.word	0x08006549
 8005f58:	08006551 	.word	0x08006551
 8005f5c:	08006551 	.word	0x08006551
 8005f60:	08006551 	.word	0x08006551
 8005f64:	08006551 	.word	0x08006551
 8005f68:	08006559 	.word	0x08006559
 8005f6c:	08006559 	.word	0x08006559
 8005f70:	08006559 	.word	0x08006559
 8005f74:	08006559 	.word	0x08006559
 8005f78:	08006561 	.word	0x08006561
 8005f7c:	08006561 	.word	0x08006561
 8005f80:	08006561 	.word	0x08006561
 8005f84:	08006561 	.word	0x08006561
 8005f88:	08006569 	.word	0x08006569
 8005f8c:	08006569 	.word	0x08006569
 8005f90:	08006569 	.word	0x08006569
 8005f94:	08006569 	.word	0x08006569
 8005f98:	08006571 	.word	0x08006571
 8005f9c:	08006571 	.word	0x08006571
 8005fa0:	08006571 	.word	0x08006571
 8005fa4:	08006571 	.word	0x08006571
 8005fa8:	08006579 	.word	0x08006579
 8005fac:	08006579 	.word	0x08006579
 8005fb0:	08006579 	.word	0x08006579
 8005fb4:	08006579 	.word	0x08006579
 8005fb8:	08006581 	.word	0x08006581
 8005fbc:	08006581 	.word	0x08006581
 8005fc0:	08006581 	.word	0x08006581
 8005fc4:	08006581 	.word	0x08006581
 8005fc8:	08006589 	.word	0x08006589
 8005fcc:	08006589 	.word	0x08006589
 8005fd0:	08006589 	.word	0x08006589
 8005fd4:	08006589 	.word	0x08006589
 8005fd8:	08006591 	.word	0x08006591
 8005fdc:	08006591 	.word	0x08006591
 8005fe0:	08006591 	.word	0x08006591
 8005fe4:	08006591 	.word	0x08006591
 8005fe8:	08006599 	.word	0x08006599
 8005fec:	08006599 	.word	0x08006599
 8005ff0:	08006599 	.word	0x08006599
 8005ff4:	08006599 	.word	0x08006599
 8005ff8:	080065a1 	.word	0x080065a1
 8005ffc:	080065a1 	.word	0x080065a1
 8006000:	080065a1 	.word	0x080065a1
 8006004:	080065a1 	.word	0x080065a1
 8006008:	080065a9 	.word	0x080065a9
 800600c:	080065a9 	.word	0x080065a9
 8006010:	080065a9 	.word	0x080065a9
 8006014:	080065a9 	.word	0x080065a9
 8006018:	080065b1 	.word	0x080065b1
 800601c:	080065b1 	.word	0x080065b1
 8006020:	080065b1 	.word	0x080065b1
 8006024:	080065b1 	.word	0x080065b1
 8006028:	080065b9 	.word	0x080065b9
 800602c:	080065b9 	.word	0x080065b9
 8006030:	080065b9 	.word	0x080065b9
 8006034:	080065b9 	.word	0x080065b9
 8006038:	080065c1 	.word	0x080065c1
 800603c:	080065c1 	.word	0x080065c1
 8006040:	080065c1 	.word	0x080065c1
 8006044:	080065c1 	.word	0x080065c1
 8006048:	080065c9 	.word	0x080065c9
 800604c:	080065c9 	.word	0x080065c9
 8006050:	080065c9 	.word	0x080065c9
 8006054:	080065c9 	.word	0x080065c9
 8006058:	080065d1 	.word	0x080065d1
 800605c:	080065d1 	.word	0x080065d1
 8006060:	080065d1 	.word	0x080065d1
 8006064:	080065d1 	.word	0x080065d1
 8006068:	080065d9 	.word	0x080065d9
 800606c:	080065d9 	.word	0x080065d9
 8006070:	080065d9 	.word	0x080065d9
 8006074:	080065d9 	.word	0x080065d9
 8006078:	080065e1 	.word	0x080065e1
 800607c:	080065e1 	.word	0x080065e1
 8006080:	080065e1 	.word	0x080065e1
 8006084:	080065e1 	.word	0x080065e1
 8006088:	080065e9 	.word	0x080065e9
 800608c:	080065e9 	.word	0x080065e9
 8006090:	080065e9 	.word	0x080065e9
 8006094:	080065e9 	.word	0x080065e9
 8006098:	080065f1 	.word	0x080065f1
 800609c:	080065f1 	.word	0x080065f1
 80060a0:	080065f1 	.word	0x080065f1
 80060a4:	080065f1 	.word	0x080065f1
 80060a8:	080065f9 	.word	0x080065f9
 80060ac:	080065f9 	.word	0x080065f9
 80060b0:	080065f9 	.word	0x080065f9
 80060b4:	080065f9 	.word	0x080065f9
 80060b8:	08006601 	.word	0x08006601
 80060bc:	08006601 	.word	0x08006601
 80060c0:	08006601 	.word	0x08006601
 80060c4:	08006601 	.word	0x08006601
 80060c8:	08006609 	.word	0x08006609
 80060cc:	08006609 	.word	0x08006609
 80060d0:	08006609 	.word	0x08006609
 80060d4:	08006609 	.word	0x08006609
 80060d8:	08006611 	.word	0x08006611
 80060dc:	08006611 	.word	0x08006611
 80060e0:	08006611 	.word	0x08006611
 80060e4:	08006611 	.word	0x08006611
 80060e8:	08006619 	.word	0x08006619
 80060ec:	08006619 	.word	0x08006619
 80060f0:	08006619 	.word	0x08006619
 80060f4:	08006619 	.word	0x08006619
 80060f8:	08006621 	.word	0x08006621
 80060fc:	08006621 	.word	0x08006621
 8006100:	08006621 	.word	0x08006621
 8006104:	08006621 	.word	0x08006621
 8006108:	08006629 	.word	0x08006629
 800610c:	08006629 	.word	0x08006629
 8006110:	08006629 	.word	0x08006629
 8006114:	08006629 	.word	0x08006629
 8006118:	08006631 	.word	0x08006631
 800611c:	08006631 	.word	0x08006631
 8006120:	08006631 	.word	0x08006631
 8006124:	08006631 	.word	0x08006631
 8006128:	08006639 	.word	0x08006639
 800612c:	08006639 	.word	0x08006639
 8006130:	08006639 	.word	0x08006639
 8006134:	08006639 	.word	0x08006639
 8006138:	08006641 	.word	0x08006641
 800613c:	08006641 	.word	0x08006641
 8006140:	08006641 	.word	0x08006641
 8006144:	08006641 	.word	0x08006641
 8006148:	08006649 	.word	0x08006649
 800614c:	08006649 	.word	0x08006649
 8006150:	08006649 	.word	0x08006649
 8006154:	08006649 	.word	0x08006649
 8006158:	08006651 	.word	0x08006651
 800615c:	08006651 	.word	0x08006651
 8006160:	08006651 	.word	0x08006651
 8006164:	08006651 	.word	0x08006651
 8006168:	08006659 	.word	0x08006659
 800616c:	08006659 	.word	0x08006659
 8006170:	08006659 	.word	0x08006659
 8006174:	08006659 	.word	0x08006659
 8006178:	08006661 	.word	0x08006661
 800617c:	08006661 	.word	0x08006661
 8006180:	08006661 	.word	0x08006661
 8006184:	08006661 	.word	0x08006661
 8006188:	08006669 	.word	0x08006669
 800618c:	08006669 	.word	0x08006669
 8006190:	08006669 	.word	0x08006669
 8006194:	08006669 	.word	0x08006669
 8006198:	08006671 	.word	0x08006671
 800619c:	08006671 	.word	0x08006671
 80061a0:	08006671 	.word	0x08006671
 80061a4:	08006671 	.word	0x08006671
 80061a8:	08006679 	.word	0x08006679
 80061ac:	08006679 	.word	0x08006679
 80061b0:	08006679 	.word	0x08006679
 80061b4:	08006679 	.word	0x08006679
 80061b8:	08006681 	.word	0x08006681
 80061bc:	08006681 	.word	0x08006681
 80061c0:	08006681 	.word	0x08006681
 80061c4:	08006681 	.word	0x08006681
 80061c8:	08006689 	.word	0x08006689
 80061cc:	08006689 	.word	0x08006689
 80061d0:	08006689 	.word	0x08006689
 80061d4:	08006689 	.word	0x08006689
 80061d8:	08006691 	.word	0x08006691
 80061dc:	08006691 	.word	0x08006691
 80061e0:	08006691 	.word	0x08006691
 80061e4:	08006691 	.word	0x08006691
 80061e8:	08006699 	.word	0x08006699
 80061ec:	08006699 	.word	0x08006699
 80061f0:	08006699 	.word	0x08006699
 80061f4:	08006699 	.word	0x08006699
 80061f8:	080066a1 	.word	0x080066a1
 80061fc:	080066a1 	.word	0x080066a1
 8006200:	080066a1 	.word	0x080066a1
 8006204:	080066a1 	.word	0x080066a1
 8006208:	080066a9 	.word	0x080066a9
 800620c:	080066a9 	.word	0x080066a9
 8006210:	080066a9 	.word	0x080066a9
 8006214:	080066a9 	.word	0x080066a9
 8006218:	080066b1 	.word	0x080066b1
 800621c:	080066b1 	.word	0x080066b1
 8006220:	080066b1 	.word	0x080066b1
 8006224:	080066b1 	.word	0x080066b1
 8006228:	080066b9 	.word	0x080066b9
 800622c:	080066b9 	.word	0x080066b9
 8006230:	080066b9 	.word	0x080066b9
 8006234:	080066b9 	.word	0x080066b9
 8006238:	080066c1 	.word	0x080066c1
 800623c:	080066c1 	.word	0x080066c1
 8006240:	080066c1 	.word	0x080066c1
 8006244:	080066c1 	.word	0x080066c1
 8006248:	080066c9 	.word	0x080066c9
 800624c:	080066c9 	.word	0x080066c9
 8006250:	080066c9 	.word	0x080066c9
 8006254:	080066c9 	.word	0x080066c9
 8006258:	080066d1 	.word	0x080066d1
 800625c:	080066d1 	.word	0x080066d1
 8006260:	080066d1 	.word	0x080066d1
 8006264:	080066d1 	.word	0x080066d1
 8006268:	080066d9 	.word	0x080066d9
 800626c:	080066d9 	.word	0x080066d9
 8006270:	080066d9 	.word	0x080066d9
 8006274:	080066d9 	.word	0x080066d9
 8006278:	080066e1 	.word	0x080066e1
 800627c:	080066e1 	.word	0x080066e1
 8006280:	080066e1 	.word	0x080066e1
 8006284:	080066e1 	.word	0x080066e1
 8006288:	080066e9 	.word	0x080066e9
 800628c:	080066e9 	.word	0x080066e9
 8006290:	080066e9 	.word	0x080066e9
 8006294:	080066e9 	.word	0x080066e9
 8006298:	080066f1 	.word	0x080066f1
 800629c:	080066f1 	.word	0x080066f1
 80062a0:	080066f1 	.word	0x080066f1
 80062a4:	080066f1 	.word	0x080066f1
 80062a8:	080066f9 	.word	0x080066f9
 80062ac:	080066f9 	.word	0x080066f9
 80062b0:	080066f9 	.word	0x080066f9
 80062b4:	080066f9 	.word	0x080066f9
 80062b8:	08006701 	.word	0x08006701
 80062bc:	08006701 	.word	0x08006701
 80062c0:	08006701 	.word	0x08006701
 80062c4:	08006701 	.word	0x08006701
 80062c8:	08006709 	.word	0x08006709
 80062cc:	08006709 	.word	0x08006709
 80062d0:	08006709 	.word	0x08006709
 80062d4:	08006709 	.word	0x08006709
 80062d8:	08006711 	.word	0x08006711
 80062dc:	08006711 	.word	0x08006711
 80062e0:	08006711 	.word	0x08006711
 80062e4:	08006711 	.word	0x08006711
 80062e8:	08006719 	.word	0x08006719
 80062ec:	08006719 	.word	0x08006719
 80062f0:	08006719 	.word	0x08006719
 80062f4:	08006719 	.word	0x08006719
 80062f8:	08006721 	.word	0x08006721
 80062fc:	08006721 	.word	0x08006721
 8006300:	08006721 	.word	0x08006721
 8006304:	08006721 	.word	0x08006721
 8006308:	08006729 	.word	0x08006729
 800630c:	08006729 	.word	0x08006729
 8006310:	08006729 	.word	0x08006729
 8006314:	08006729 	.word	0x08006729
 8006318:	08006731 	.word	0x08006731
 800631c:	08006731 	.word	0x08006731
 8006320:	08006731 	.word	0x08006731
 8006324:	08006731 	.word	0x08006731
 8006328:	08006739 	.word	0x08006739
 800632c:	08006739 	.word	0x08006739
 8006330:	08006739 	.word	0x08006739
 8006334:	08006739 	.word	0x08006739
 8006338:	08006741 	.word	0x08006741
 800633c:	08006741 	.word	0x08006741
 8006340:	08006741 	.word	0x08006741
 8006344:	08006741 	.word	0x08006741
 8006348:	08006749 	.word	0x08006749
 800634c:	08006749 	.word	0x08006749
 8006350:	08006749 	.word	0x08006749
 8006354:	08006749 	.word	0x08006749
 8006358:	08006751 	.word	0x08006751
 800635c:	08006751 	.word	0x08006751
 8006360:	08006751 	.word	0x08006751
 8006364:	08006751 	.word	0x08006751
 8006368:	08006759 	.word	0x08006759
 800636c:	08006759 	.word	0x08006759
 8006370:	08006759 	.word	0x08006759
 8006374:	08006759 	.word	0x08006759
 8006378:	08006761 	.word	0x08006761
 800637c:	08006761 	.word	0x08006761
 8006380:	08006761 	.word	0x08006761
 8006384:	08006761 	.word	0x08006761
 8006388:	08006769 	.word	0x08006769
 800638c:	08006769 	.word	0x08006769
 8006390:	08006769 	.word	0x08006769
 8006394:	08006769 	.word	0x08006769
 8006398:	08006771 	.word	0x08006771
 800639c:	08006771 	.word	0x08006771
 80063a0:	08006771 	.word	0x08006771
 80063a4:	08006771 	.word	0x08006771
 80063a8:	08006779 	.word	0x08006779
 80063ac:	08006779 	.word	0x08006779
 80063b0:	08006779 	.word	0x08006779
 80063b4:	08006779 	.word	0x08006779
 80063b8:	08006781 	.word	0x08006781
 80063bc:	08006781 	.word	0x08006781
 80063c0:	08006781 	.word	0x08006781
 80063c4:	08006781 	.word	0x08006781
 80063c8:	08006789 	.word	0x08006789
 80063cc:	08006789 	.word	0x08006789
 80063d0:	08006789 	.word	0x08006789
 80063d4:	08006789 	.word	0x08006789
 80063d8:	08006791 	.word	0x08006791
 80063dc:	08006791 	.word	0x08006791
 80063e0:	08006791 	.word	0x08006791
 80063e4:	08006791 	.word	0x08006791
 80063e8:	08006799 	.word	0x08006799
 80063ec:	08006799 	.word	0x08006799
 80063f0:	08006799 	.word	0x08006799
 80063f4:	08006799 	.word	0x08006799
 80063f8:	080067a1 	.word	0x080067a1
 80063fc:	080067a1 	.word	0x080067a1
 8006400:	080067a1 	.word	0x080067a1
 8006404:	080067a1 	.word	0x080067a1
 8006408:	080067a9 	.word	0x080067a9
 800640c:	080067a9 	.word	0x080067a9
 8006410:	080067a9 	.word	0x080067a9
 8006414:	080067a9 	.word	0x080067a9
 8006418:	080067b1 	.word	0x080067b1
 800641c:	080067b1 	.word	0x080067b1
 8006420:	080067b1 	.word	0x080067b1
 8006424:	080067b1 	.word	0x080067b1
 8006428:	080067b9 	.word	0x080067b9
 800642c:	080067b9 	.word	0x080067b9
 8006430:	080067b9 	.word	0x080067b9
 8006434:	080067b9 	.word	0x080067b9
 8006438:	080067c1 	.word	0x080067c1
 800643c:	080067c1 	.word	0x080067c1
 8006440:	080067c1 	.word	0x080067c1
 8006444:	080067c1 	.word	0x080067c1
 8006448:	080067c9 	.word	0x080067c9
 800644c:	080067c9 	.word	0x080067c9
 8006450:	080067c9 	.word	0x080067c9
 8006454:	080067c9 	.word	0x080067c9
 8006458:	080067d1 	.word	0x080067d1
 800645c:	080067d1 	.word	0x080067d1
 8006460:	080067d1 	.word	0x080067d1
 8006464:	080067d1 	.word	0x080067d1
 8006468:	080067d9 	.word	0x080067d9
 800646c:	080067d9 	.word	0x080067d9
 8006470:	080067d9 	.word	0x080067d9
 8006474:	080067d9 	.word	0x080067d9
 8006478:	080067e1 	.word	0x080067e1
 800647c:	080067e1 	.word	0x080067e1
 8006480:	080067e1 	.word	0x080067e1
 8006484:	080067e1 	.word	0x080067e1
 8006488:	080067e9 	.word	0x080067e9
 800648c:	080067e9 	.word	0x080067e9
 8006490:	080067e9 	.word	0x080067e9
 8006494:	080067e9 	.word	0x080067e9
 8006498:	080067f1 	.word	0x080067f1
 800649c:	080067f1 	.word	0x080067f1
 80064a0:	080067f1 	.word	0x080067f1
 80064a4:	080067f1 	.word	0x080067f1
 80064a8:	080067f9 	.word	0x080067f9
 80064ac:	080067f9 	.word	0x080067f9
 80064b0:	080067f9 	.word	0x080067f9
 80064b4:	080067f9 	.word	0x080067f9
 80064b8:	08006801 	.word	0x08006801
 80064bc:	08006801 	.word	0x08006801
 80064c0:	08006801 	.word	0x08006801
 80064c4:	08006801 	.word	0x08006801
 80064c8:	08006809 	.word	0x08006809
 80064cc:	08006809 	.word	0x08006809
 80064d0:	08006809 	.word	0x08006809
 80064d4:	08006809 	.word	0x08006809
 80064d8:	08006811 	.word	0x08006811
 80064dc:	08006811 	.word	0x08006811
 80064e0:	08006811 	.word	0x08006811
 80064e4:	08006811 	.word	0x08006811
 80064e8:	08006819 	.word	0x08006819
 80064ec:	08006819 	.word	0x08006819
 80064f0:	08006819 	.word	0x08006819
 80064f4:	08006819 	.word	0x08006819
 80064f8:	08006821 	.word	0x08006821
 80064fc:	08006821 	.word	0x08006821
 8006500:	08006821 	.word	0x08006821
 8006504:	08006821 	.word	0x08006821
 8006508:	08006829 	.word	0x08006829
 800650c:	08006829 	.word	0x08006829
 8006510:	08006829 	.word	0x08006829
 8006514:	08006829 	.word	0x08006829
 8006518:	08006831 	.word	0x08006831
 800651c:	08006831 	.word	0x08006831
 8006520:	08006831 	.word	0x08006831
 8006524:	08006831 	.word	0x08006831
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8006528:	2000      	movs	r0, #0
 800652a:	f7ff fb77 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800652e:	e184      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 8006530:	2001      	movs	r0, #1
 8006532:	f7ff fb73 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006536:	e180      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8006538:	2002      	movs	r0, #2
 800653a:	f7ff fb6f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800653e:	e17c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8006540:	2003      	movs	r0, #3
 8006542:	f7ff fb6b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006546:	e178      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8006548:	2004      	movs	r0, #4
 800654a:	f7ff fb67 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800654e:	e174      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8006550:	2005      	movs	r0, #5
 8006552:	f7ff fb63 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006556:	e170      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8006558:	2006      	movs	r0, #6
 800655a:	f7ff fb5f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800655e:	e16c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 8006560:	2007      	movs	r0, #7
 8006562:	f7ff fb5b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006566:	e168      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8006568:	2008      	movs	r0, #8
 800656a:	f7ff fb57 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800656e:	e164      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 8006570:	2009      	movs	r0, #9
 8006572:	f7ff fb53 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006576:	e160      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8006578:	200a      	movs	r0, #10
 800657a:	f7ff fb4f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800657e:	e15c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 8006580:	200b      	movs	r0, #11
 8006582:	f7ff fb4b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006586:	e158      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8006588:	200c      	movs	r0, #12
 800658a:	f7ff fb47 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800658e:	e154      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 8006590:	200d      	movs	r0, #13
 8006592:	f7ff fb43 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006596:	e150      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8006598:	200e      	movs	r0, #14
 800659a:	f7ff fb3f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800659e:	e14c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 80065a0:	200f      	movs	r0, #15
 80065a2:	f7ff fb3b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065a6:	e148      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 80065a8:	2010      	movs	r0, #16
 80065aa:	f7ff fb37 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065ae:	e144      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 80065b0:	2011      	movs	r0, #17
 80065b2:	f7ff fb33 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065b6:	e140      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 80065b8:	2012      	movs	r0, #18
 80065ba:	f7ff fb2f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065be:	e13c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 80065c0:	2013      	movs	r0, #19
 80065c2:	f7ff fb2b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065c6:	e138      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 80065c8:	2014      	movs	r0, #20
 80065ca:	f7ff fb27 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065ce:	e134      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 80065d0:	2015      	movs	r0, #21
 80065d2:	f7ff fb23 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065d6:	e130      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 80065d8:	2016      	movs	r0, #22
 80065da:	f7ff fb1f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065de:	e12c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 80065e0:	2017      	movs	r0, #23
 80065e2:	f7ff fb1b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065e6:	e128      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 80065e8:	2018      	movs	r0, #24
 80065ea:	f7ff fb17 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065ee:	e124      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 80065f0:	2019      	movs	r0, #25
 80065f2:	f7ff fb13 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065f6:	e120      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 80065f8:	201a      	movs	r0, #26
 80065fa:	f7ff fb0f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80065fe:	e11c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 8006600:	201b      	movs	r0, #27
 8006602:	f7ff fb0b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006606:	e118      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 8006608:	201c      	movs	r0, #28
 800660a:	f7ff fb07 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800660e:	e114      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 8006610:	201d      	movs	r0, #29
 8006612:	f7ff fb03 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006616:	e110      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 8006618:	201e      	movs	r0, #30
 800661a:	f7ff faff 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800661e:	e10c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 8006620:	201f      	movs	r0, #31
 8006622:	f7ff fafb 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006626:	e108      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 8006628:	2020      	movs	r0, #32
 800662a:	f7ff faf7 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800662e:	e104      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 8006630:	2021      	movs	r0, #33	; 0x21
 8006632:	f7ff faf3 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006636:	e100      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 8006638:	2022      	movs	r0, #34	; 0x22
 800663a:	f7ff faef 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800663e:	e0fc      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 8006640:	2023      	movs	r0, #35	; 0x23
 8006642:	f7ff faeb 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006646:	e0f8      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 8006648:	2024      	movs	r0, #36	; 0x24
 800664a:	f7ff fae7 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800664e:	e0f4      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 8006650:	2025      	movs	r0, #37	; 0x25
 8006652:	f7ff fae3 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006656:	e0f0      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 8006658:	2026      	movs	r0, #38	; 0x26
 800665a:	f7ff fadf 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800665e:	e0ec      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 8006660:	2027      	movs	r0, #39	; 0x27
 8006662:	f7ff fadb 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006666:	e0e8      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 8006668:	2028      	movs	r0, #40	; 0x28
 800666a:	f7ff fad7 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800666e:	e0e4      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 8006670:	2029      	movs	r0, #41	; 0x29
 8006672:	f7ff fad3 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006676:	e0e0      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 8006678:	202a      	movs	r0, #42	; 0x2a
 800667a:	f7ff facf 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800667e:	e0dc      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 8006680:	202b      	movs	r0, #43	; 0x2b
 8006682:	f7ff facb 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006686:	e0d8      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 8006688:	202c      	movs	r0, #44	; 0x2c
 800668a:	f7ff fac7 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800668e:	e0d4      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 8006690:	202d      	movs	r0, #45	; 0x2d
 8006692:	f7ff fac3 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006696:	e0d0      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 8006698:	202e      	movs	r0, #46	; 0x2e
 800669a:	f7ff fabf 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800669e:	e0cc      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 80066a0:	202f      	movs	r0, #47	; 0x2f
 80066a2:	f7ff fabb 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066a6:	e0c8      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 80066a8:	2030      	movs	r0, #48	; 0x30
 80066aa:	f7ff fab7 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066ae:	e0c4      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 80066b0:	2031      	movs	r0, #49	; 0x31
 80066b2:	f7ff fab3 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066b6:	e0c0      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 80066b8:	2032      	movs	r0, #50	; 0x32
 80066ba:	f7ff faaf 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066be:	e0bc      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 80066c0:	2033      	movs	r0, #51	; 0x33
 80066c2:	f7ff faab 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066c6:	e0b8      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 80066c8:	2034      	movs	r0, #52	; 0x34
 80066ca:	f7ff faa7 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066ce:	e0b4      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 80066d0:	2035      	movs	r0, #53	; 0x35
 80066d2:	f7ff faa3 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066d6:	e0b0      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 80066d8:	2036      	movs	r0, #54	; 0x36
 80066da:	f7ff fa9f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066de:	e0ac      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 80066e0:	2037      	movs	r0, #55	; 0x37
 80066e2:	f7ff fa9b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066e6:	e0a8      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 80066e8:	2038      	movs	r0, #56	; 0x38
 80066ea:	f7ff fa97 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066ee:	e0a4      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 80066f0:	2039      	movs	r0, #57	; 0x39
 80066f2:	f7ff fa93 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066f6:	e0a0      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 80066f8:	203a      	movs	r0, #58	; 0x3a
 80066fa:	f7ff fa8f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80066fe:	e09c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 8006700:	203b      	movs	r0, #59	; 0x3b
 8006702:	f7ff fa8b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006706:	e098      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 8006708:	203c      	movs	r0, #60	; 0x3c
 800670a:	f7ff fa87 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800670e:	e094      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 8006710:	203d      	movs	r0, #61	; 0x3d
 8006712:	f7ff fa83 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006716:	e090      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 8006718:	203e      	movs	r0, #62	; 0x3e
 800671a:	f7ff fa7f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800671e:	e08c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 8006720:	203f      	movs	r0, #63	; 0x3f
 8006722:	f7ff fa7b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006726:	e088      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 8006728:	2040      	movs	r0, #64	; 0x40
 800672a:	f7ff fa77 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800672e:	e084      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 8006730:	2041      	movs	r0, #65	; 0x41
 8006732:	f7ff fa73 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006736:	e080      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 8006738:	2042      	movs	r0, #66	; 0x42
 800673a:	f7ff fa6f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800673e:	e07c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 8006740:	2043      	movs	r0, #67	; 0x43
 8006742:	f7ff fa6b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006746:	e078      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 8006748:	2044      	movs	r0, #68	; 0x44
 800674a:	f7ff fa67 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800674e:	e074      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 8006750:	2045      	movs	r0, #69	; 0x45
 8006752:	f7ff fa63 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006756:	e070      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 8006758:	2046      	movs	r0, #70	; 0x46
 800675a:	f7ff fa5f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800675e:	e06c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 8006760:	2047      	movs	r0, #71	; 0x47
 8006762:	f7ff fa5b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006766:	e068      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 8006768:	2048      	movs	r0, #72	; 0x48
 800676a:	f7ff fa57 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800676e:	e064      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 8006770:	2049      	movs	r0, #73	; 0x49
 8006772:	f7ff fa53 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006776:	e060      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 8006778:	204a      	movs	r0, #74	; 0x4a
 800677a:	f7ff fa4f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800677e:	e05c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 8006780:	204b      	movs	r0, #75	; 0x4b
 8006782:	f7ff fa4b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006786:	e058      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 8006788:	204c      	movs	r0, #76	; 0x4c
 800678a:	f7ff fa47 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800678e:	e054      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 8006790:	204d      	movs	r0, #77	; 0x4d
 8006792:	f7ff fa43 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006796:	e050      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 8006798:	204e      	movs	r0, #78	; 0x4e
 800679a:	f7ff fa3f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800679e:	e04c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 80067a0:	204f      	movs	r0, #79	; 0x4f
 80067a2:	f7ff fa3b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067a6:	e048      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 80067a8:	2050      	movs	r0, #80	; 0x50
 80067aa:	f7ff fa37 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067ae:	e044      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 80067b0:	2051      	movs	r0, #81	; 0x51
 80067b2:	f7ff fa33 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067b6:	e040      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 80067b8:	2052      	movs	r0, #82	; 0x52
 80067ba:	f7ff fa2f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067be:	e03c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 80067c0:	2053      	movs	r0, #83	; 0x53
 80067c2:	f7ff fa2b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067c6:	e038      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 80067c8:	2054      	movs	r0, #84	; 0x54
 80067ca:	f7ff fa27 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067ce:	e034      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 80067d0:	2055      	movs	r0, #85	; 0x55
 80067d2:	f7ff fa23 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067d6:	e030      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 80067d8:	2056      	movs	r0, #86	; 0x56
 80067da:	f7ff fa1f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067de:	e02c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 80067e0:	2057      	movs	r0, #87	; 0x57
 80067e2:	f7ff fa1b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067e6:	e028      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 80067e8:	2058      	movs	r0, #88	; 0x58
 80067ea:	f7ff fa17 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067ee:	e024      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 80067f0:	2059      	movs	r0, #89	; 0x59
 80067f2:	f7ff fa13 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067f6:	e020      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 80067f8:	205a      	movs	r0, #90	; 0x5a
 80067fa:	f7ff fa0f 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 80067fe:	e01c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 8006800:	205b      	movs	r0, #91	; 0x5b
 8006802:	f7ff fa0b 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006806:	e018      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 8006808:	205c      	movs	r0, #92	; 0x5c
 800680a:	f7ff fa07 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800680e:	e014      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 8006810:	205d      	movs	r0, #93	; 0x5d
 8006812:	f7ff fa03 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006816:	e010      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 8006818:	205e      	movs	r0, #94	; 0x5e
 800681a:	f7ff f9ff 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800681e:	e00c      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 8006820:	205f      	movs	r0, #95	; 0x5f
 8006822:	f7ff f9fb 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006826:	e008      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 8006828:	2060      	movs	r0, #96	; 0x60
 800682a:	f7ff f9f7 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 800682e:	e004      	b.n	800683a <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 8006830:	2061      	movs	r0, #97	; 0x61
 8006832:	f7ff f9f3 	bl	8005c1c <VPP_ApplyPresetToSignal>
			break;
 8006836:	e000      	b.n	800683a <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 8006838:	bf00      	nop
	}
}
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8006854:	f200 849a 	bhi.w	800718c <VPP_ModifySyncOutput+0x948>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <VPP_ModifySyncOutput+0x1c>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006e7d 	.word	0x08006e7d
 8006864:	08006e7d 	.word	0x08006e7d
 8006868:	08006e7d 	.word	0x08006e7d
 800686c:	08006e85 	.word	0x08006e85
 8006870:	08006e85 	.word	0x08006e85
 8006874:	08006e85 	.word	0x08006e85
 8006878:	08006e85 	.word	0x08006e85
 800687c:	08006e8d 	.word	0x08006e8d
 8006880:	08006e8d 	.word	0x08006e8d
 8006884:	08006e8d 	.word	0x08006e8d
 8006888:	08006e8d 	.word	0x08006e8d
 800688c:	08006e95 	.word	0x08006e95
 8006890:	08006e95 	.word	0x08006e95
 8006894:	08006e95 	.word	0x08006e95
 8006898:	08006e95 	.word	0x08006e95
 800689c:	08006e9d 	.word	0x08006e9d
 80068a0:	08006e9d 	.word	0x08006e9d
 80068a4:	08006e9d 	.word	0x08006e9d
 80068a8:	08006e9d 	.word	0x08006e9d
 80068ac:	08006ea5 	.word	0x08006ea5
 80068b0:	08006ea5 	.word	0x08006ea5
 80068b4:	08006ea5 	.word	0x08006ea5
 80068b8:	08006ea5 	.word	0x08006ea5
 80068bc:	08006ead 	.word	0x08006ead
 80068c0:	08006ead 	.word	0x08006ead
 80068c4:	08006ead 	.word	0x08006ead
 80068c8:	08006ead 	.word	0x08006ead
 80068cc:	08006eb5 	.word	0x08006eb5
 80068d0:	08006eb5 	.word	0x08006eb5
 80068d4:	08006eb5 	.word	0x08006eb5
 80068d8:	08006eb5 	.word	0x08006eb5
 80068dc:	08006ebd 	.word	0x08006ebd
 80068e0:	08006ebd 	.word	0x08006ebd
 80068e4:	08006ebd 	.word	0x08006ebd
 80068e8:	08006ebd 	.word	0x08006ebd
 80068ec:	08006ec5 	.word	0x08006ec5
 80068f0:	08006ec5 	.word	0x08006ec5
 80068f4:	08006ec5 	.word	0x08006ec5
 80068f8:	08006ec5 	.word	0x08006ec5
 80068fc:	08006ecd 	.word	0x08006ecd
 8006900:	08006ecd 	.word	0x08006ecd
 8006904:	08006ecd 	.word	0x08006ecd
 8006908:	08006ecd 	.word	0x08006ecd
 800690c:	08006ed5 	.word	0x08006ed5
 8006910:	08006ed5 	.word	0x08006ed5
 8006914:	08006ed5 	.word	0x08006ed5
 8006918:	08006ed5 	.word	0x08006ed5
 800691c:	08006edd 	.word	0x08006edd
 8006920:	08006edd 	.word	0x08006edd
 8006924:	08006edd 	.word	0x08006edd
 8006928:	08006edd 	.word	0x08006edd
 800692c:	08006ee5 	.word	0x08006ee5
 8006930:	08006ee5 	.word	0x08006ee5
 8006934:	08006ee5 	.word	0x08006ee5
 8006938:	08006ee5 	.word	0x08006ee5
 800693c:	08006eed 	.word	0x08006eed
 8006940:	08006eed 	.word	0x08006eed
 8006944:	08006eed 	.word	0x08006eed
 8006948:	08006eed 	.word	0x08006eed
 800694c:	08006ef5 	.word	0x08006ef5
 8006950:	08006ef5 	.word	0x08006ef5
 8006954:	08006ef5 	.word	0x08006ef5
 8006958:	08006ef5 	.word	0x08006ef5
 800695c:	08006efd 	.word	0x08006efd
 8006960:	08006efd 	.word	0x08006efd
 8006964:	08006efd 	.word	0x08006efd
 8006968:	08006efd 	.word	0x08006efd
 800696c:	08006f05 	.word	0x08006f05
 8006970:	08006f05 	.word	0x08006f05
 8006974:	08006f05 	.word	0x08006f05
 8006978:	08006f05 	.word	0x08006f05
 800697c:	08006f0d 	.word	0x08006f0d
 8006980:	08006f0d 	.word	0x08006f0d
 8006984:	08006f0d 	.word	0x08006f0d
 8006988:	08006f0d 	.word	0x08006f0d
 800698c:	08006f15 	.word	0x08006f15
 8006990:	08006f15 	.word	0x08006f15
 8006994:	08006f15 	.word	0x08006f15
 8006998:	08006f15 	.word	0x08006f15
 800699c:	08006f1d 	.word	0x08006f1d
 80069a0:	08006f1d 	.word	0x08006f1d
 80069a4:	08006f1d 	.word	0x08006f1d
 80069a8:	08006f1d 	.word	0x08006f1d
 80069ac:	08006f25 	.word	0x08006f25
 80069b0:	08006f25 	.word	0x08006f25
 80069b4:	08006f25 	.word	0x08006f25
 80069b8:	08006f25 	.word	0x08006f25
 80069bc:	08006f2d 	.word	0x08006f2d
 80069c0:	08006f2d 	.word	0x08006f2d
 80069c4:	08006f2d 	.word	0x08006f2d
 80069c8:	08006f2d 	.word	0x08006f2d
 80069cc:	08006f35 	.word	0x08006f35
 80069d0:	08006f35 	.word	0x08006f35
 80069d4:	08006f35 	.word	0x08006f35
 80069d8:	08006f35 	.word	0x08006f35
 80069dc:	08006f3d 	.word	0x08006f3d
 80069e0:	08006f3d 	.word	0x08006f3d
 80069e4:	08006f3d 	.word	0x08006f3d
 80069e8:	08006f3d 	.word	0x08006f3d
 80069ec:	08006f45 	.word	0x08006f45
 80069f0:	08006f45 	.word	0x08006f45
 80069f4:	08006f45 	.word	0x08006f45
 80069f8:	08006f45 	.word	0x08006f45
 80069fc:	08006f4d 	.word	0x08006f4d
 8006a00:	08006f4d 	.word	0x08006f4d
 8006a04:	08006f4d 	.word	0x08006f4d
 8006a08:	08006f4d 	.word	0x08006f4d
 8006a0c:	08006f55 	.word	0x08006f55
 8006a10:	08006f55 	.word	0x08006f55
 8006a14:	08006f55 	.word	0x08006f55
 8006a18:	08006f55 	.word	0x08006f55
 8006a1c:	08006f5d 	.word	0x08006f5d
 8006a20:	08006f5d 	.word	0x08006f5d
 8006a24:	08006f5d 	.word	0x08006f5d
 8006a28:	08006f5d 	.word	0x08006f5d
 8006a2c:	08006f65 	.word	0x08006f65
 8006a30:	08006f65 	.word	0x08006f65
 8006a34:	08006f65 	.word	0x08006f65
 8006a38:	08006f65 	.word	0x08006f65
 8006a3c:	08006f6d 	.word	0x08006f6d
 8006a40:	08006f6d 	.word	0x08006f6d
 8006a44:	08006f6d 	.word	0x08006f6d
 8006a48:	08006f6d 	.word	0x08006f6d
 8006a4c:	08006f75 	.word	0x08006f75
 8006a50:	08006f75 	.word	0x08006f75
 8006a54:	08006f75 	.word	0x08006f75
 8006a58:	08006f75 	.word	0x08006f75
 8006a5c:	08006f7d 	.word	0x08006f7d
 8006a60:	08006f7d 	.word	0x08006f7d
 8006a64:	08006f7d 	.word	0x08006f7d
 8006a68:	08006f7d 	.word	0x08006f7d
 8006a6c:	08006f85 	.word	0x08006f85
 8006a70:	08006f85 	.word	0x08006f85
 8006a74:	08006f85 	.word	0x08006f85
 8006a78:	08006f85 	.word	0x08006f85
 8006a7c:	08006f8d 	.word	0x08006f8d
 8006a80:	08006f8d 	.word	0x08006f8d
 8006a84:	08006f8d 	.word	0x08006f8d
 8006a88:	08006f8d 	.word	0x08006f8d
 8006a8c:	08006f95 	.word	0x08006f95
 8006a90:	08006f95 	.word	0x08006f95
 8006a94:	08006f95 	.word	0x08006f95
 8006a98:	08006f95 	.word	0x08006f95
 8006a9c:	08006f9d 	.word	0x08006f9d
 8006aa0:	08006f9d 	.word	0x08006f9d
 8006aa4:	08006f9d 	.word	0x08006f9d
 8006aa8:	08006f9d 	.word	0x08006f9d
 8006aac:	08006fa5 	.word	0x08006fa5
 8006ab0:	08006fa5 	.word	0x08006fa5
 8006ab4:	08006fa5 	.word	0x08006fa5
 8006ab8:	08006fa5 	.word	0x08006fa5
 8006abc:	08006fad 	.word	0x08006fad
 8006ac0:	08006fad 	.word	0x08006fad
 8006ac4:	08006fad 	.word	0x08006fad
 8006ac8:	08006fad 	.word	0x08006fad
 8006acc:	08006fb5 	.word	0x08006fb5
 8006ad0:	08006fb5 	.word	0x08006fb5
 8006ad4:	08006fb5 	.word	0x08006fb5
 8006ad8:	08006fb5 	.word	0x08006fb5
 8006adc:	08006fbd 	.word	0x08006fbd
 8006ae0:	08006fbd 	.word	0x08006fbd
 8006ae4:	08006fbd 	.word	0x08006fbd
 8006ae8:	08006fbd 	.word	0x08006fbd
 8006aec:	08006fc5 	.word	0x08006fc5
 8006af0:	08006fc5 	.word	0x08006fc5
 8006af4:	08006fc5 	.word	0x08006fc5
 8006af8:	08006fc5 	.word	0x08006fc5
 8006afc:	08006fcd 	.word	0x08006fcd
 8006b00:	08006fcd 	.word	0x08006fcd
 8006b04:	08006fcd 	.word	0x08006fcd
 8006b08:	08006fcd 	.word	0x08006fcd
 8006b0c:	08006fd5 	.word	0x08006fd5
 8006b10:	08006fd5 	.word	0x08006fd5
 8006b14:	08006fd5 	.word	0x08006fd5
 8006b18:	08006fd5 	.word	0x08006fd5
 8006b1c:	08006fdd 	.word	0x08006fdd
 8006b20:	08006fdd 	.word	0x08006fdd
 8006b24:	08006fdd 	.word	0x08006fdd
 8006b28:	08006fdd 	.word	0x08006fdd
 8006b2c:	08006fe5 	.word	0x08006fe5
 8006b30:	08006fe5 	.word	0x08006fe5
 8006b34:	08006fe5 	.word	0x08006fe5
 8006b38:	08006fe5 	.word	0x08006fe5
 8006b3c:	08006fed 	.word	0x08006fed
 8006b40:	08006fed 	.word	0x08006fed
 8006b44:	08006fed 	.word	0x08006fed
 8006b48:	08006fed 	.word	0x08006fed
 8006b4c:	08006ff5 	.word	0x08006ff5
 8006b50:	08006ff5 	.word	0x08006ff5
 8006b54:	08006ff5 	.word	0x08006ff5
 8006b58:	08006ff5 	.word	0x08006ff5
 8006b5c:	08006ffd 	.word	0x08006ffd
 8006b60:	08006ffd 	.word	0x08006ffd
 8006b64:	08006ffd 	.word	0x08006ffd
 8006b68:	08006ffd 	.word	0x08006ffd
 8006b6c:	08007005 	.word	0x08007005
 8006b70:	08007005 	.word	0x08007005
 8006b74:	08007005 	.word	0x08007005
 8006b78:	08007005 	.word	0x08007005
 8006b7c:	0800700d 	.word	0x0800700d
 8006b80:	0800700d 	.word	0x0800700d
 8006b84:	0800700d 	.word	0x0800700d
 8006b88:	0800700d 	.word	0x0800700d
 8006b8c:	08007015 	.word	0x08007015
 8006b90:	08007015 	.word	0x08007015
 8006b94:	08007015 	.word	0x08007015
 8006b98:	08007015 	.word	0x08007015
 8006b9c:	0800701d 	.word	0x0800701d
 8006ba0:	0800701d 	.word	0x0800701d
 8006ba4:	0800701d 	.word	0x0800701d
 8006ba8:	0800701d 	.word	0x0800701d
 8006bac:	08007025 	.word	0x08007025
 8006bb0:	08007025 	.word	0x08007025
 8006bb4:	08007025 	.word	0x08007025
 8006bb8:	08007025 	.word	0x08007025
 8006bbc:	0800702d 	.word	0x0800702d
 8006bc0:	0800702d 	.word	0x0800702d
 8006bc4:	0800702d 	.word	0x0800702d
 8006bc8:	0800702d 	.word	0x0800702d
 8006bcc:	08007035 	.word	0x08007035
 8006bd0:	08007035 	.word	0x08007035
 8006bd4:	08007035 	.word	0x08007035
 8006bd8:	08007035 	.word	0x08007035
 8006bdc:	0800703d 	.word	0x0800703d
 8006be0:	0800703d 	.word	0x0800703d
 8006be4:	0800703d 	.word	0x0800703d
 8006be8:	0800703d 	.word	0x0800703d
 8006bec:	08007045 	.word	0x08007045
 8006bf0:	08007045 	.word	0x08007045
 8006bf4:	08007045 	.word	0x08007045
 8006bf8:	08007045 	.word	0x08007045
 8006bfc:	0800704d 	.word	0x0800704d
 8006c00:	0800704d 	.word	0x0800704d
 8006c04:	0800704d 	.word	0x0800704d
 8006c08:	0800704d 	.word	0x0800704d
 8006c0c:	08007055 	.word	0x08007055
 8006c10:	08007055 	.word	0x08007055
 8006c14:	08007055 	.word	0x08007055
 8006c18:	08007055 	.word	0x08007055
 8006c1c:	0800705d 	.word	0x0800705d
 8006c20:	0800705d 	.word	0x0800705d
 8006c24:	0800705d 	.word	0x0800705d
 8006c28:	0800705d 	.word	0x0800705d
 8006c2c:	08007065 	.word	0x08007065
 8006c30:	08007065 	.word	0x08007065
 8006c34:	08007065 	.word	0x08007065
 8006c38:	08007065 	.word	0x08007065
 8006c3c:	0800706d 	.word	0x0800706d
 8006c40:	0800706d 	.word	0x0800706d
 8006c44:	0800706d 	.word	0x0800706d
 8006c48:	0800706d 	.word	0x0800706d
 8006c4c:	08007075 	.word	0x08007075
 8006c50:	08007075 	.word	0x08007075
 8006c54:	08007075 	.word	0x08007075
 8006c58:	08007075 	.word	0x08007075
 8006c5c:	0800707d 	.word	0x0800707d
 8006c60:	0800707d 	.word	0x0800707d
 8006c64:	0800707d 	.word	0x0800707d
 8006c68:	0800707d 	.word	0x0800707d
 8006c6c:	08007085 	.word	0x08007085
 8006c70:	08007085 	.word	0x08007085
 8006c74:	08007085 	.word	0x08007085
 8006c78:	08007085 	.word	0x08007085
 8006c7c:	0800708d 	.word	0x0800708d
 8006c80:	0800708d 	.word	0x0800708d
 8006c84:	0800708d 	.word	0x0800708d
 8006c88:	0800708d 	.word	0x0800708d
 8006c8c:	08007095 	.word	0x08007095
 8006c90:	08007095 	.word	0x08007095
 8006c94:	08007095 	.word	0x08007095
 8006c98:	08007095 	.word	0x08007095
 8006c9c:	0800709d 	.word	0x0800709d
 8006ca0:	0800709d 	.word	0x0800709d
 8006ca4:	0800709d 	.word	0x0800709d
 8006ca8:	0800709d 	.word	0x0800709d
 8006cac:	080070a5 	.word	0x080070a5
 8006cb0:	080070a5 	.word	0x080070a5
 8006cb4:	080070a5 	.word	0x080070a5
 8006cb8:	080070a5 	.word	0x080070a5
 8006cbc:	080070ad 	.word	0x080070ad
 8006cc0:	080070ad 	.word	0x080070ad
 8006cc4:	080070ad 	.word	0x080070ad
 8006cc8:	080070ad 	.word	0x080070ad
 8006ccc:	080070b5 	.word	0x080070b5
 8006cd0:	080070b5 	.word	0x080070b5
 8006cd4:	080070b5 	.word	0x080070b5
 8006cd8:	080070b5 	.word	0x080070b5
 8006cdc:	080070bd 	.word	0x080070bd
 8006ce0:	080070bd 	.word	0x080070bd
 8006ce4:	080070bd 	.word	0x080070bd
 8006ce8:	080070bd 	.word	0x080070bd
 8006cec:	080070c5 	.word	0x080070c5
 8006cf0:	080070c5 	.word	0x080070c5
 8006cf4:	080070c5 	.word	0x080070c5
 8006cf8:	080070c5 	.word	0x080070c5
 8006cfc:	080070cd 	.word	0x080070cd
 8006d00:	080070cd 	.word	0x080070cd
 8006d04:	080070cd 	.word	0x080070cd
 8006d08:	080070cd 	.word	0x080070cd
 8006d0c:	080070d5 	.word	0x080070d5
 8006d10:	080070d5 	.word	0x080070d5
 8006d14:	080070d5 	.word	0x080070d5
 8006d18:	080070d5 	.word	0x080070d5
 8006d1c:	080070dd 	.word	0x080070dd
 8006d20:	080070dd 	.word	0x080070dd
 8006d24:	080070dd 	.word	0x080070dd
 8006d28:	080070dd 	.word	0x080070dd
 8006d2c:	080070e5 	.word	0x080070e5
 8006d30:	080070e5 	.word	0x080070e5
 8006d34:	080070e5 	.word	0x080070e5
 8006d38:	080070e5 	.word	0x080070e5
 8006d3c:	080070ed 	.word	0x080070ed
 8006d40:	080070ed 	.word	0x080070ed
 8006d44:	080070ed 	.word	0x080070ed
 8006d48:	080070ed 	.word	0x080070ed
 8006d4c:	080070f5 	.word	0x080070f5
 8006d50:	080070f5 	.word	0x080070f5
 8006d54:	080070f5 	.word	0x080070f5
 8006d58:	080070f5 	.word	0x080070f5
 8006d5c:	080070fd 	.word	0x080070fd
 8006d60:	080070fd 	.word	0x080070fd
 8006d64:	080070fd 	.word	0x080070fd
 8006d68:	080070fd 	.word	0x080070fd
 8006d6c:	08007105 	.word	0x08007105
 8006d70:	08007105 	.word	0x08007105
 8006d74:	08007105 	.word	0x08007105
 8006d78:	08007105 	.word	0x08007105
 8006d7c:	0800710d 	.word	0x0800710d
 8006d80:	0800710d 	.word	0x0800710d
 8006d84:	0800710d 	.word	0x0800710d
 8006d88:	0800710d 	.word	0x0800710d
 8006d8c:	08007115 	.word	0x08007115
 8006d90:	08007115 	.word	0x08007115
 8006d94:	08007115 	.word	0x08007115
 8006d98:	08007115 	.word	0x08007115
 8006d9c:	0800711d 	.word	0x0800711d
 8006da0:	0800711d 	.word	0x0800711d
 8006da4:	0800711d 	.word	0x0800711d
 8006da8:	0800711d 	.word	0x0800711d
 8006dac:	08007125 	.word	0x08007125
 8006db0:	08007125 	.word	0x08007125
 8006db4:	08007125 	.word	0x08007125
 8006db8:	08007125 	.word	0x08007125
 8006dbc:	0800712d 	.word	0x0800712d
 8006dc0:	0800712d 	.word	0x0800712d
 8006dc4:	0800712d 	.word	0x0800712d
 8006dc8:	0800712d 	.word	0x0800712d
 8006dcc:	08007135 	.word	0x08007135
 8006dd0:	08007135 	.word	0x08007135
 8006dd4:	08007135 	.word	0x08007135
 8006dd8:	08007135 	.word	0x08007135
 8006ddc:	0800713d 	.word	0x0800713d
 8006de0:	0800713d 	.word	0x0800713d
 8006de4:	0800713d 	.word	0x0800713d
 8006de8:	0800713d 	.word	0x0800713d
 8006dec:	08007145 	.word	0x08007145
 8006df0:	08007145 	.word	0x08007145
 8006df4:	08007145 	.word	0x08007145
 8006df8:	08007145 	.word	0x08007145
 8006dfc:	0800714d 	.word	0x0800714d
 8006e00:	0800714d 	.word	0x0800714d
 8006e04:	0800714d 	.word	0x0800714d
 8006e08:	0800714d 	.word	0x0800714d
 8006e0c:	08007155 	.word	0x08007155
 8006e10:	08007155 	.word	0x08007155
 8006e14:	08007155 	.word	0x08007155
 8006e18:	08007155 	.word	0x08007155
 8006e1c:	0800715d 	.word	0x0800715d
 8006e20:	0800715d 	.word	0x0800715d
 8006e24:	0800715d 	.word	0x0800715d
 8006e28:	0800715d 	.word	0x0800715d
 8006e2c:	08007165 	.word	0x08007165
 8006e30:	08007165 	.word	0x08007165
 8006e34:	08007165 	.word	0x08007165
 8006e38:	08007165 	.word	0x08007165
 8006e3c:	0800716d 	.word	0x0800716d
 8006e40:	0800716d 	.word	0x0800716d
 8006e44:	0800716d 	.word	0x0800716d
 8006e48:	0800716d 	.word	0x0800716d
 8006e4c:	08007175 	.word	0x08007175
 8006e50:	08007175 	.word	0x08007175
 8006e54:	08007175 	.word	0x08007175
 8006e58:	08007175 	.word	0x08007175
 8006e5c:	0800717d 	.word	0x0800717d
 8006e60:	0800717d 	.word	0x0800717d
 8006e64:	0800717d 	.word	0x0800717d
 8006e68:	0800717d 	.word	0x0800717d
 8006e6c:	08007185 	.word	0x08007185
 8006e70:	08007185 	.word	0x08007185
 8006e74:	08007185 	.word	0x08007185
 8006e78:	08007185 	.word	0x08007185
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	f7fe fefb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006e82:	e184      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 8006e84:	2001      	movs	r0, #1
 8006e86:	f7fe fef7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006e8a:	e180      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 8006e8c:	2002      	movs	r0, #2
 8006e8e:	f7fe fef3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006e92:	e17c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 8006e94:	2003      	movs	r0, #3
 8006e96:	f7fe feef 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006e9a:	e178      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 8006e9c:	2004      	movs	r0, #4
 8006e9e:	f7fe feeb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006ea2:	e174      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 8006ea4:	2005      	movs	r0, #5
 8006ea6:	f7fe fee7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006eaa:	e170      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 8006eac:	2006      	movs	r0, #6
 8006eae:	f7fe fee3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006eb2:	e16c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 8006eb4:	2007      	movs	r0, #7
 8006eb6:	f7fe fedf 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006eba:	e168      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 8006ebc:	2008      	movs	r0, #8
 8006ebe:	f7fe fedb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006ec2:	e164      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8006ec4:	2009      	movs	r0, #9
 8006ec6:	f7fe fed7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006eca:	e160      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 8006ecc:	200a      	movs	r0, #10
 8006ece:	f7fe fed3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006ed2:	e15c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8006ed4:	200b      	movs	r0, #11
 8006ed6:	f7fe fecf 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006eda:	e158      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 8006edc:	200c      	movs	r0, #12
 8006ede:	f7fe fecb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006ee2:	e154      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8006ee4:	200d      	movs	r0, #13
 8006ee6:	f7fe fec7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006eea:	e150      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 8006eec:	200e      	movs	r0, #14
 8006eee:	f7fe fec3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006ef2:	e14c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8006ef4:	200f      	movs	r0, #15
 8006ef6:	f7fe febf 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006efa:	e148      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 8006efc:	2010      	movs	r0, #16
 8006efe:	f7fe febb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f02:	e144      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 8006f04:	2011      	movs	r0, #17
 8006f06:	f7fe feb7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f0a:	e140      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 8006f0c:	2012      	movs	r0, #18
 8006f0e:	f7fe feb3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f12:	e13c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 8006f14:	2013      	movs	r0, #19
 8006f16:	f7fe feaf 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f1a:	e138      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 8006f1c:	2014      	movs	r0, #20
 8006f1e:	f7fe feab 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f22:	e134      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 8006f24:	2015      	movs	r0, #21
 8006f26:	f7fe fea7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f2a:	e130      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 8006f2c:	2016      	movs	r0, #22
 8006f2e:	f7fe fea3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f32:	e12c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 8006f34:	2017      	movs	r0, #23
 8006f36:	f7fe fe9f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f3a:	e128      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 8006f3c:	2018      	movs	r0, #24
 8006f3e:	f7fe fe9b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f42:	e124      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 8006f44:	2019      	movs	r0, #25
 8006f46:	f7fe fe97 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f4a:	e120      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 8006f4c:	201a      	movs	r0, #26
 8006f4e:	f7fe fe93 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f52:	e11c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 8006f54:	201b      	movs	r0, #27
 8006f56:	f7fe fe8f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f5a:	e118      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 8006f5c:	201c      	movs	r0, #28
 8006f5e:	f7fe fe8b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f62:	e114      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 8006f64:	201d      	movs	r0, #29
 8006f66:	f7fe fe87 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f6a:	e110      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 8006f6c:	201e      	movs	r0, #30
 8006f6e:	f7fe fe83 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f72:	e10c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 8006f74:	201f      	movs	r0, #31
 8006f76:	f7fe fe7f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f7a:	e108      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 8006f7c:	2020      	movs	r0, #32
 8006f7e:	f7fe fe7b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f82:	e104      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 8006f84:	2021      	movs	r0, #33	; 0x21
 8006f86:	f7fe fe77 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f8a:	e100      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 8006f8c:	2022      	movs	r0, #34	; 0x22
 8006f8e:	f7fe fe73 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f92:	e0fc      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 8006f94:	2023      	movs	r0, #35	; 0x23
 8006f96:	f7fe fe6f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006f9a:	e0f8      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8006f9c:	2024      	movs	r0, #36	; 0x24
 8006f9e:	f7fe fe6b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006fa2:	e0f4      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8006fa4:	2025      	movs	r0, #37	; 0x25
 8006fa6:	f7fe fe67 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006faa:	e0f0      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8006fac:	2026      	movs	r0, #38	; 0x26
 8006fae:	f7fe fe63 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006fb2:	e0ec      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8006fb4:	2027      	movs	r0, #39	; 0x27
 8006fb6:	f7fe fe5f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006fba:	e0e8      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8006fbc:	2028      	movs	r0, #40	; 0x28
 8006fbe:	f7fe fe5b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006fc2:	e0e4      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8006fc4:	2029      	movs	r0, #41	; 0x29
 8006fc6:	f7fe fe57 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006fca:	e0e0      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8006fcc:	202a      	movs	r0, #42	; 0x2a
 8006fce:	f7fe fe53 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006fd2:	e0dc      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8006fd4:	202b      	movs	r0, #43	; 0x2b
 8006fd6:	f7fe fe4f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006fda:	e0d8      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8006fdc:	202c      	movs	r0, #44	; 0x2c
 8006fde:	f7fe fe4b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006fe2:	e0d4      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8006fe4:	202d      	movs	r0, #45	; 0x2d
 8006fe6:	f7fe fe47 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006fea:	e0d0      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8006fec:	202e      	movs	r0, #46	; 0x2e
 8006fee:	f7fe fe43 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006ff2:	e0cc      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8006ff4:	202f      	movs	r0, #47	; 0x2f
 8006ff6:	f7fe fe3f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8006ffa:	e0c8      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8006ffc:	2030      	movs	r0, #48	; 0x30
 8006ffe:	f7fe fe3b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007002:	e0c4      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 8007004:	2031      	movs	r0, #49	; 0x31
 8007006:	f7fe fe37 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800700a:	e0c0      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 800700c:	2032      	movs	r0, #50	; 0x32
 800700e:	f7fe fe33 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007012:	e0bc      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 8007014:	2033      	movs	r0, #51	; 0x33
 8007016:	f7fe fe2f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800701a:	e0b8      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 800701c:	2034      	movs	r0, #52	; 0x34
 800701e:	f7fe fe2b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007022:	e0b4      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 8007024:	2035      	movs	r0, #53	; 0x35
 8007026:	f7fe fe27 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800702a:	e0b0      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 800702c:	2036      	movs	r0, #54	; 0x36
 800702e:	f7fe fe23 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007032:	e0ac      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 8007034:	2037      	movs	r0, #55	; 0x37
 8007036:	f7fe fe1f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800703a:	e0a8      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 800703c:	2038      	movs	r0, #56	; 0x38
 800703e:	f7fe fe1b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007042:	e0a4      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 8007044:	2039      	movs	r0, #57	; 0x39
 8007046:	f7fe fe17 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800704a:	e0a0      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 800704c:	203a      	movs	r0, #58	; 0x3a
 800704e:	f7fe fe13 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007052:	e09c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 8007054:	203b      	movs	r0, #59	; 0x3b
 8007056:	f7fe fe0f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800705a:	e098      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 800705c:	203c      	movs	r0, #60	; 0x3c
 800705e:	f7fe fe0b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007062:	e094      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 8007064:	203d      	movs	r0, #61	; 0x3d
 8007066:	f7fe fe07 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800706a:	e090      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 800706c:	203e      	movs	r0, #62	; 0x3e
 800706e:	f7fe fe03 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007072:	e08c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8007074:	203f      	movs	r0, #63	; 0x3f
 8007076:	f7fe fdff 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800707a:	e088      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 800707c:	2040      	movs	r0, #64	; 0x40
 800707e:	f7fe fdfb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007082:	e084      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8007084:	2041      	movs	r0, #65	; 0x41
 8007086:	f7fe fdf7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800708a:	e080      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 800708c:	2042      	movs	r0, #66	; 0x42
 800708e:	f7fe fdf3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007092:	e07c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8007094:	2043      	movs	r0, #67	; 0x43
 8007096:	f7fe fdef 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800709a:	e078      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 800709c:	2044      	movs	r0, #68	; 0x44
 800709e:	f7fe fdeb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070a2:	e074      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 80070a4:	2045      	movs	r0, #69	; 0x45
 80070a6:	f7fe fde7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070aa:	e070      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 80070ac:	2046      	movs	r0, #70	; 0x46
 80070ae:	f7fe fde3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070b2:	e06c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 80070b4:	2047      	movs	r0, #71	; 0x47
 80070b6:	f7fe fddf 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070ba:	e068      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 80070bc:	2048      	movs	r0, #72	; 0x48
 80070be:	f7fe fddb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070c2:	e064      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 80070c4:	2049      	movs	r0, #73	; 0x49
 80070c6:	f7fe fdd7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070ca:	e060      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 80070cc:	204a      	movs	r0, #74	; 0x4a
 80070ce:	f7fe fdd3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070d2:	e05c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 80070d4:	204b      	movs	r0, #75	; 0x4b
 80070d6:	f7fe fdcf 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070da:	e058      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 80070dc:	204c      	movs	r0, #76	; 0x4c
 80070de:	f7fe fdcb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070e2:	e054      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 80070e4:	204d      	movs	r0, #77	; 0x4d
 80070e6:	f7fe fdc7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070ea:	e050      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 80070ec:	204e      	movs	r0, #78	; 0x4e
 80070ee:	f7fe fdc3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070f2:	e04c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 80070f4:	204f      	movs	r0, #79	; 0x4f
 80070f6:	f7fe fdbf 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 80070fa:	e048      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 80070fc:	2050      	movs	r0, #80	; 0x50
 80070fe:	f7fe fdbb 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007102:	e044      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 8007104:	2051      	movs	r0, #81	; 0x51
 8007106:	f7fe fdb7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800710a:	e040      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 800710c:	2052      	movs	r0, #82	; 0x52
 800710e:	f7fe fdb3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007112:	e03c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 8007114:	2053      	movs	r0, #83	; 0x53
 8007116:	f7fe fdaf 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800711a:	e038      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 800711c:	2054      	movs	r0, #84	; 0x54
 800711e:	f7fe fdab 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007122:	e034      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 8007124:	2055      	movs	r0, #85	; 0x55
 8007126:	f7fe fda7 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800712a:	e030      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 800712c:	2056      	movs	r0, #86	; 0x56
 800712e:	f7fe fda3 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007132:	e02c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 8007134:	2057      	movs	r0, #87	; 0x57
 8007136:	f7fe fd9f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800713a:	e028      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 800713c:	2058      	movs	r0, #88	; 0x58
 800713e:	f7fe fd9b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007142:	e024      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 8007144:	2059      	movs	r0, #89	; 0x59
 8007146:	f7fe fd97 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800714a:	e020      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 800714c:	205a      	movs	r0, #90	; 0x5a
 800714e:	f7fe fd93 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007152:	e01c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 8007154:	205b      	movs	r0, #91	; 0x5b
 8007156:	f7fe fd8f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800715a:	e018      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 800715c:	205c      	movs	r0, #92	; 0x5c
 800715e:	f7fe fd8b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007162:	e014      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 8007164:	205d      	movs	r0, #93	; 0x5d
 8007166:	f7fe fd87 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800716a:	e010      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 800716c:	205e      	movs	r0, #94	; 0x5e
 800716e:	f7fe fd83 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007172:	e00c      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8007174:	205f      	movs	r0, #95	; 0x5f
 8007176:	f7fe fd7f 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800717a:	e008      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 800717c:	2060      	movs	r0, #96	; 0x60
 800717e:	f7fe fd7b 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 8007182:	e004      	b.n	800718e <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8007184:	2061      	movs	r0, #97	; 0x61
 8007186:	f7fe fd77 	bl	8005c78 <VPP_ApplyPresetToSync>
			break;
 800718a:	e000      	b.n	800718e <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 800718c:	bf00      	nop
	}
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop

08007198 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08c      	sub	sp, #48	; 0x30
 800719c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800719e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	605a      	str	r2, [r3, #4]
 80071a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80071aa:	1d3b      	adds	r3, r7, #4
 80071ac:	2220      	movs	r2, #32
 80071ae:	2100      	movs	r1, #0
 80071b0:	4618      	mov	r0, r3
 80071b2:	f007 fdf5 	bl	800eda0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80071b6:	4b32      	ldr	r3, [pc, #200]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80071be:	4b30      	ldr	r3, [pc, #192]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80071c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80071c6:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80071cc:	4b2c      	ldr	r3, [pc, #176]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80071d2:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80071d8:	4b29      	ldr	r3, [pc, #164]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071da:	2200      	movs	r2, #0
 80071dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80071de:	4b28      	ldr	r3, [pc, #160]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071e0:	2204      	movs	r2, #4
 80071e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80071e4:	4b26      	ldr	r3, [pc, #152]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80071ea:	4b25      	ldr	r3, [pc, #148]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80071f0:	4b23      	ldr	r3, [pc, #140]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80071f6:	4b22      	ldr	r3, [pc, #136]	; (8007280 <MX_ADC1_Init+0xe8>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80071fe:	4b20      	ldr	r3, [pc, #128]	; (8007280 <MX_ADC1_Init+0xe8>)
 8007200:	2200      	movs	r2, #0
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007204:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <MX_ADC1_Init+0xe8>)
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800720a:	4b1d      	ldr	r3, [pc, #116]	; (8007280 <MX_ADC1_Init+0xe8>)
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007212:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <MX_ADC1_Init+0xe8>)
 8007214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007218:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800721a:	4b19      	ldr	r3, [pc, #100]	; (8007280 <MX_ADC1_Init+0xe8>)
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007222:	4817      	ldr	r0, [pc, #92]	; (8007280 <MX_ADC1_Init+0xe8>)
 8007224:	f001 fee2 	bl	8008fec <HAL_ADC_Init>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800722e:	f000 feaf 	bl	8007f90 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007232:	2300      	movs	r3, #0
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723a:	4619      	mov	r1, r3
 800723c:	4810      	ldr	r0, [pc, #64]	; (8007280 <MX_ADC1_Init+0xe8>)
 800723e:	f002 fc6b 	bl	8009b18 <HAL_ADCEx_MultiModeConfigChannel>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8007248:	f000 fea2 	bl	8007f90 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800724c:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <MX_ADC1_Init+0xec>)
 800724e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007250:	2306      	movs	r3, #6
 8007252:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007258:	237f      	movs	r3, #127	; 0x7f
 800725a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800725c:	2304      	movs	r3, #4
 800725e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007264:	1d3b      	adds	r3, r7, #4
 8007266:	4619      	mov	r1, r3
 8007268:	4805      	ldr	r0, [pc, #20]	; (8007280 <MX_ADC1_Init+0xe8>)
 800726a:	f002 f87f 	bl	800936c <HAL_ADC_ConfigChannel>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8007274:	f000 fe8c 	bl	8007f90 <Error_Handler>
  }

}
 8007278:	bf00      	nop
 800727a:	3730      	adds	r7, #48	; 0x30
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	200024f4 	.word	0x200024f4
 8007284:	0c900008 	.word	0x0c900008

08007288 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08a      	sub	sp, #40	; 0x28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	609a      	str	r2, [r3, #8]
 800729c:	60da      	str	r2, [r3, #12]
 800729e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072a8:	d14f      	bne.n	800734a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80072aa:	4b2a      	ldr	r3, [pc, #168]	; (8007354 <HAL_ADC_MspInit+0xcc>)
 80072ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ae:	4a29      	ldr	r2, [pc, #164]	; (8007354 <HAL_ADC_MspInit+0xcc>)
 80072b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80072b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072b6:	4b27      	ldr	r3, [pc, #156]	; (8007354 <HAL_ADC_MspInit+0xcc>)
 80072b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072c2:	4b24      	ldr	r3, [pc, #144]	; (8007354 <HAL_ADC_MspInit+0xcc>)
 80072c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c6:	4a23      	ldr	r2, [pc, #140]	; (8007354 <HAL_ADC_MspInit+0xcc>)
 80072c8:	f043 0301 	orr.w	r3, r3, #1
 80072cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072ce:	4b21      	ldr	r3, [pc, #132]	; (8007354 <HAL_ADC_MspInit+0xcc>)
 80072d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80072da:	2304      	movs	r3, #4
 80072dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072de:	2303      	movs	r3, #3
 80072e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072e6:	f107 0314 	add.w	r3, r7, #20
 80072ea:	4619      	mov	r1, r3
 80072ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072f0:	f003 fff4 	bl	800b2dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80072f4:	4b18      	ldr	r3, [pc, #96]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 80072f6:	4a19      	ldr	r2, [pc, #100]	; (800735c <HAL_ADC_MspInit+0xd4>)
 80072f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80072fa:	4b17      	ldr	r3, [pc, #92]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 80072fc:	2205      	movs	r2, #5
 80072fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007300:	4b15      	ldr	r3, [pc, #84]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 8007302:	2200      	movs	r2, #0
 8007304:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 8007308:	2200      	movs	r2, #0
 800730a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800730c:	4b12      	ldr	r3, [pc, #72]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 800730e:	2280      	movs	r2, #128	; 0x80
 8007310:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007312:	4b11      	ldr	r3, [pc, #68]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 8007314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007318:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800731a:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 800731c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007320:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007322:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 8007324:	2220      	movs	r2, #32
 8007326:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007328:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 800732a:	2200      	movs	r2, #0
 800732c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800732e:	480a      	ldr	r0, [pc, #40]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 8007330:	f003 fd08 	bl	800ad44 <HAL_DMA_Init>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800733a:	f000 fe29 	bl	8007f90 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a05      	ldr	r2, [pc, #20]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 8007342:	655a      	str	r2, [r3, #84]	; 0x54
 8007344:	4a04      	ldr	r2, [pc, #16]	; (8007358 <HAL_ADC_MspInit+0xd0>)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800734a:	bf00      	nop
 800734c:	3728      	adds	r7, #40	; 0x28
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40021000 	.word	0x40021000
 8007358:	20002560 	.word	0x20002560
 800735c:	40020008 	.word	0x40020008

08007360 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <MX_COMP1_Init+0x44>)
 8007366:	4a10      	ldr	r2, [pc, #64]	; (80073a8 <MX_COMP1_Init+0x48>)
 8007368:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800736a:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <MX_COMP1_Init+0x44>)
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8007370:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <MX_COMP1_Init+0x44>)
 8007372:	4a0e      	ldr	r2, [pc, #56]	; (80073ac <MX_COMP1_Init+0x4c>)
 8007374:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <MX_COMP1_Init+0x44>)
 8007378:	2200      	movs	r2, #0
 800737a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800737c:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <MX_COMP1_Init+0x44>)
 800737e:	2200      	movs	r2, #0
 8007380:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8007382:	4b08      	ldr	r3, [pc, #32]	; (80073a4 <MX_COMP1_Init+0x44>)
 8007384:	2200      	movs	r2, #0
 8007386:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <MX_COMP1_Init+0x44>)
 800738a:	2200      	movs	r2, #0
 800738c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800738e:	4805      	ldr	r0, [pc, #20]	; (80073a4 <MX_COMP1_Init+0x44>)
 8007390:	f002 fe16 	bl	8009fc0 <HAL_COMP_Init>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800739a:	f000 fdf9 	bl	8007f90 <Error_Handler>
  }

}
 800739e:	bf00      	nop
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	200025c0 	.word	0x200025c0
 80073a8:	40010200 	.word	0x40010200
 80073ac:	00800030 	.word	0x00800030

080073b0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	609a      	str	r2, [r3, #8]
 80073c4:	60da      	str	r2, [r3, #12]
 80073c6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a0f      	ldr	r2, [pc, #60]	; (800740c <HAL_COMP_MspInit+0x5c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d118      	bne.n	8007404 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073d2:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <HAL_COMP_MspInit+0x60>)
 80073d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d6:	4a0e      	ldr	r2, [pc, #56]	; (8007410 <HAL_COMP_MspInit+0x60>)
 80073d8:	f043 0301 	orr.w	r3, r3, #1
 80073dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073de:	4b0c      	ldr	r3, [pc, #48]	; (8007410 <HAL_COMP_MspInit+0x60>)
 80073e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80073ea:	2302      	movs	r3, #2
 80073ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073ee:	2303      	movs	r3, #3
 80073f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073f6:	f107 030c 	add.w	r3, r7, #12
 80073fa:	4619      	mov	r1, r3
 80073fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007400:	f003 ff6c 	bl	800b2dc <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8007404:	bf00      	nop
 8007406:	3720      	adds	r7, #32
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40010200 	.word	0x40010200
 8007410:	40021000 	.word	0x40021000

08007414 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08c      	sub	sp, #48	; 0x30
 8007418:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800741a:	463b      	mov	r3, r7
 800741c:	2230      	movs	r2, #48	; 0x30
 800741e:	2100      	movs	r1, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f007 fcbd 	bl	800eda0 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8007426:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <MX_DAC1_Init+0x8c>)
 8007428:	4a1e      	ldr	r2, [pc, #120]	; (80074a4 <MX_DAC1_Init+0x90>)
 800742a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800742c:	481c      	ldr	r0, [pc, #112]	; (80074a0 <MX_DAC1_Init+0x8c>)
 800742e:	f003 f86a 	bl	800a506 <HAL_DAC_Init>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007438:	f000 fdaa 	bl	8007f90 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800743c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007440:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007442:	2300      	movs	r3, #0
 8007444:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8007446:	2300      	movs	r3, #0
 8007448:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800744a:	2300      	movs	r3, #0
 800744c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800744e:	2306      	movs	r3, #6
 8007450:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007452:	2300      	movs	r3, #0
 8007454:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800745a:	2301      	movs	r3, #1
 800745c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800745e:	2300      	movs	r3, #0
 8007460:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007462:	463b      	mov	r3, r7
 8007464:	2200      	movs	r2, #0
 8007466:	4619      	mov	r1, r3
 8007468:	480d      	ldr	r0, [pc, #52]	; (80074a0 <MX_DAC1_Init+0x8c>)
 800746a:	f003 fa35 	bl	800a8d8 <HAL_DAC_ConfigChannel>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8007474:	f000 fd8c 	bl	8007f90 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800747c:	2301      	movs	r3, #1
 800747e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007480:	463b      	mov	r3, r7
 8007482:	2210      	movs	r2, #16
 8007484:	4619      	mov	r1, r3
 8007486:	4806      	ldr	r0, [pc, #24]	; (80074a0 <MX_DAC1_Init+0x8c>)
 8007488:	f003 fa26 	bl	800a8d8 <HAL_DAC_ConfigChannel>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8007492:	f000 fd7d 	bl	8007f90 <Error_Handler>
  }

}
 8007496:	bf00      	nop
 8007498:	3730      	adds	r7, #48	; 0x30
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200025f8 	.word	0x200025f8
 80074a4:	50000800 	.word	0x50000800

080074a8 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08c      	sub	sp, #48	; 0x30
 80074ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80074ae:	463b      	mov	r3, r7
 80074b0:	2230      	movs	r2, #48	; 0x30
 80074b2:	2100      	movs	r1, #0
 80074b4:	4618      	mov	r0, r3
 80074b6:	f007 fc73 	bl	800eda0 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80074ba:	4b16      	ldr	r3, [pc, #88]	; (8007514 <MX_DAC2_Init+0x6c>)
 80074bc:	4a16      	ldr	r2, [pc, #88]	; (8007518 <MX_DAC2_Init+0x70>)
 80074be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80074c0:	4814      	ldr	r0, [pc, #80]	; (8007514 <MX_DAC2_Init+0x6c>)
 80074c2:	f003 f820 	bl	800a506 <HAL_DAC_Init>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80074cc:	f000 fd60 	bl	8007f90 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80074d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074d4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80074da:	2300      	movs	r3, #0
 80074dc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80074de:	2300      	movs	r3, #0
 80074e0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80074e2:	2306      	movs	r3, #6
 80074e4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80074ee:	2301      	movs	r3, #1
 80074f0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80074f6:	463b      	mov	r3, r7
 80074f8:	2200      	movs	r2, #0
 80074fa:	4619      	mov	r1, r3
 80074fc:	4805      	ldr	r0, [pc, #20]	; (8007514 <MX_DAC2_Init+0x6c>)
 80074fe:	f003 f9eb 	bl	800a8d8 <HAL_DAC_ConfigChannel>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007508:	f000 fd42 	bl	8007f90 <Error_Handler>
  }

}
 800750c:	bf00      	nop
 800750e:	3730      	adds	r7, #48	; 0x30
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	200025e4 	.word	0x200025e4
 8007518:	50000c00 	.word	0x50000c00

0800751c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08c      	sub	sp, #48	; 0x30
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007524:	f107 031c 	add.w	r3, r7, #28
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	605a      	str	r2, [r3, #4]
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	60da      	str	r2, [r3, #12]
 8007532:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a56      	ldr	r2, [pc, #344]	; (8007694 <HAL_DAC_MspInit+0x178>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d150      	bne.n	80075e0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800753e:	4b56      	ldr	r3, [pc, #344]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 8007540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007542:	4a55      	ldr	r2, [pc, #340]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 8007544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800754a:	4b53      	ldr	r3, [pc, #332]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 800754c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007556:	4b50      	ldr	r3, [pc, #320]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 8007558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755a:	4a4f      	ldr	r2, [pc, #316]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 800755c:	f043 0301 	orr.w	r3, r3, #1
 8007560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007562:	4b4d      	ldr	r3, [pc, #308]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 8007564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800756e:	2330      	movs	r3, #48	; 0x30
 8007570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007572:	2303      	movs	r3, #3
 8007574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007576:	2300      	movs	r3, #0
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800757a:	f107 031c 	add.w	r3, r7, #28
 800757e:	4619      	mov	r1, r3
 8007580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007584:	f003 feaa 	bl	800b2dc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007588:	4b44      	ldr	r3, [pc, #272]	; (800769c <HAL_DAC_MspInit+0x180>)
 800758a:	4a45      	ldr	r2, [pc, #276]	; (80076a0 <HAL_DAC_MspInit+0x184>)
 800758c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800758e:	4b43      	ldr	r3, [pc, #268]	; (800769c <HAL_DAC_MspInit+0x180>)
 8007590:	2206      	movs	r2, #6
 8007592:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007594:	4b41      	ldr	r3, [pc, #260]	; (800769c <HAL_DAC_MspInit+0x180>)
 8007596:	2210      	movs	r2, #16
 8007598:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800759a:	4b40      	ldr	r3, [pc, #256]	; (800769c <HAL_DAC_MspInit+0x180>)
 800759c:	2200      	movs	r2, #0
 800759e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80075a0:	4b3e      	ldr	r3, [pc, #248]	; (800769c <HAL_DAC_MspInit+0x180>)
 80075a2:	2280      	movs	r2, #128	; 0x80
 80075a4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80075a6:	4b3d      	ldr	r3, [pc, #244]	; (800769c <HAL_DAC_MspInit+0x180>)
 80075a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ac:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80075ae:	4b3b      	ldr	r3, [pc, #236]	; (800769c <HAL_DAC_MspInit+0x180>)
 80075b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075b4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80075b6:	4b39      	ldr	r3, [pc, #228]	; (800769c <HAL_DAC_MspInit+0x180>)
 80075b8:	2220      	movs	r2, #32
 80075ba:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80075bc:	4b37      	ldr	r3, [pc, #220]	; (800769c <HAL_DAC_MspInit+0x180>)
 80075be:	2200      	movs	r2, #0
 80075c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80075c2:	4836      	ldr	r0, [pc, #216]	; (800769c <HAL_DAC_MspInit+0x180>)
 80075c4:	f003 fbbe 	bl	800ad44 <HAL_DMA_Init>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80075ce:	f000 fcdf 	bl	8007f90 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a31      	ldr	r2, [pc, #196]	; (800769c <HAL_DAC_MspInit+0x180>)
 80075d6:	609a      	str	r2, [r3, #8]
 80075d8:	4a30      	ldr	r2, [pc, #192]	; (800769c <HAL_DAC_MspInit+0x180>)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80075de:	e054      	b.n	800768a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2f      	ldr	r2, [pc, #188]	; (80076a4 <HAL_DAC_MspInit+0x188>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d14f      	bne.n	800768a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80075ea:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 80075ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ee:	4a2a      	ldr	r2, [pc, #168]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 80075f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075f6:	4b28      	ldr	r3, [pc, #160]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 80075f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007602:	4b25      	ldr	r3, [pc, #148]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 8007604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007606:	4a24      	ldr	r2, [pc, #144]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800760e:	4b22      	ldr	r3, [pc, #136]	; (8007698 <HAL_DAC_MspInit+0x17c>)
 8007610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800761a:	2340      	movs	r3, #64	; 0x40
 800761c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800761e:	2303      	movs	r3, #3
 8007620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007626:	f107 031c 	add.w	r3, r7, #28
 800762a:	4619      	mov	r1, r3
 800762c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007630:	f003 fe54 	bl	800b2dc <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8007634:	4b1c      	ldr	r3, [pc, #112]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 8007636:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <HAL_DAC_MspInit+0x190>)
 8007638:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800763a:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 800763c:	2229      	movs	r2, #41	; 0x29
 800763e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007640:	4b19      	ldr	r3, [pc, #100]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 8007642:	2210      	movs	r2, #16
 8007644:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007646:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 8007648:	2200      	movs	r2, #0
 800764a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800764c:	4b16      	ldr	r3, [pc, #88]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 800764e:	2280      	movs	r2, #128	; 0x80
 8007650:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 8007654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007658:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 800765c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007660:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8007662:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 8007664:	2220      	movs	r2, #32
 8007666:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007668:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 800766a:	2200      	movs	r2, #0
 800766c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800766e:	480e      	ldr	r0, [pc, #56]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 8007670:	f003 fb68 	bl	800ad44 <HAL_DMA_Init>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800767a:	f000 fc89 	bl	8007f90 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a09      	ldr	r2, [pc, #36]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 8007682:	609a      	str	r2, [r3, #8]
 8007684:	4a08      	ldr	r2, [pc, #32]	; (80076a8 <HAL_DAC_MspInit+0x18c>)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6293      	str	r3, [r2, #40]	; 0x28
}
 800768a:	bf00      	nop
 800768c:	3730      	adds	r7, #48	; 0x30
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	50000800 	.word	0x50000800
 8007698:	40021000 	.word	0x40021000
 800769c:	2000260c 	.word	0x2000260c
 80076a0:	4002001c 	.word	0x4002001c
 80076a4:	50000c00 	.word	0x50000c00
 80076a8:	2000266c 	.word	0x2000266c
 80076ac:	40020030 	.word	0x40020030

080076b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80076b6:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <MX_DMA_Init+0x70>)
 80076b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ba:	4a19      	ldr	r2, [pc, #100]	; (8007720 <MX_DMA_Init+0x70>)
 80076bc:	f043 0304 	orr.w	r3, r3, #4
 80076c0:	6493      	str	r3, [r2, #72]	; 0x48
 80076c2:	4b17      	ldr	r3, [pc, #92]	; (8007720 <MX_DMA_Init+0x70>)
 80076c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	607b      	str	r3, [r7, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80076ce:	4b14      	ldr	r3, [pc, #80]	; (8007720 <MX_DMA_Init+0x70>)
 80076d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d2:	4a13      	ldr	r2, [pc, #76]	; (8007720 <MX_DMA_Init+0x70>)
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	6493      	str	r3, [r2, #72]	; 0x48
 80076da:	4b11      	ldr	r3, [pc, #68]	; (8007720 <MX_DMA_Init+0x70>)
 80076dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80076e6:	2200      	movs	r2, #0
 80076e8:	2101      	movs	r1, #1
 80076ea:	200b      	movs	r0, #11
 80076ec:	f002 fed7 	bl	800a49e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80076f0:	200b      	movs	r0, #11
 80076f2:	f002 feee 	bl	800a4d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80076f6:	2200      	movs	r2, #0
 80076f8:	2100      	movs	r1, #0
 80076fa:	200c      	movs	r0, #12
 80076fc:	f002 fecf 	bl	800a49e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007700:	200c      	movs	r0, #12
 8007702:	f002 fee6 	bl	800a4d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	200d      	movs	r0, #13
 800770c:	f002 fec7 	bl	800a49e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007710:	200d      	movs	r0, #13
 8007712:	f002 fede 	bl	800a4d2 <HAL_NVIC_EnableIRQ>

}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40021000 	.word	0x40021000

08007724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007728:	4b04      	ldr	r3, [pc, #16]	; (800773c <__NVIC_GetPriorityGrouping+0x18>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	0a1b      	lsrs	r3, r3, #8
 800772e:	f003 0307 	and.w	r3, r3, #7
}
 8007732:	4618      	mov	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	e000ed00 	.word	0xe000ed00

08007740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800774a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800774e:	2b00      	cmp	r3, #0
 8007750:	db0b      	blt.n	800776a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	f003 021f 	and.w	r2, r3, #31
 8007758:	4907      	ldr	r1, [pc, #28]	; (8007778 <__NVIC_EnableIRQ+0x38>)
 800775a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	2001      	movs	r0, #1
 8007762:	fa00 f202 	lsl.w	r2, r0, r2
 8007766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	e000e100 	.word	0xe000e100

0800777c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	6039      	str	r1, [r7, #0]
 8007786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800778c:	2b00      	cmp	r3, #0
 800778e:	db0a      	blt.n	80077a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	b2da      	uxtb	r2, r3
 8007794:	490c      	ldr	r1, [pc, #48]	; (80077c8 <__NVIC_SetPriority+0x4c>)
 8007796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800779a:	0112      	lsls	r2, r2, #4
 800779c:	b2d2      	uxtb	r2, r2
 800779e:	440b      	add	r3, r1
 80077a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80077a4:	e00a      	b.n	80077bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	4908      	ldr	r1, [pc, #32]	; (80077cc <__NVIC_SetPriority+0x50>)
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	3b04      	subs	r3, #4
 80077b4:	0112      	lsls	r2, r2, #4
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	440b      	add	r3, r1
 80077ba:	761a      	strb	r2, [r3, #24]
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	e000e100 	.word	0xe000e100
 80077cc:	e000ed00 	.word	0xe000ed00

080077d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b089      	sub	sp, #36	; 0x24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f1c3 0307 	rsb	r3, r3, #7
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	bf28      	it	cs
 80077ee:	2304      	movcs	r3, #4
 80077f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	3304      	adds	r3, #4
 80077f6:	2b06      	cmp	r3, #6
 80077f8:	d902      	bls.n	8007800 <NVIC_EncodePriority+0x30>
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	3b03      	subs	r3, #3
 80077fe:	e000      	b.n	8007802 <NVIC_EncodePriority+0x32>
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	43da      	mvns	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	401a      	ands	r2, r3
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	fa01 f303 	lsl.w	r3, r1, r3
 8007822:	43d9      	mvns	r1, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007828:	4313      	orrs	r3, r2
         );
}
 800782a:	4618      	mov	r0, r3
 800782c:	3724      	adds	r7, #36	; 0x24
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
	...

08007838 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8007842:	4a14      	ldr	r2, [pc, #80]	; (8007894 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	3302      	adds	r3, #2
 800784c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	43db      	mvns	r3, r3
 8007856:	ea02 0103 	and.w	r1, r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	0c1b      	lsrs	r3, r3, #16
 800785e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	fa93 f3a3 	rbit	r3, r3
 8007866:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	fab3 f383 	clz	r3, r3
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	409a      	lsls	r2, r3
 8007878:	4806      	ldr	r0, [pc, #24]	; (8007894 <LL_SYSCFG_SetEXTISource+0x5c>)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	430a      	orrs	r2, r1
 8007882:	3302      	adds	r3, #2
 8007884:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	40010000 	.word	0x40010000

08007898 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007898:	b480      	push	{r7}
 800789a:	b089      	sub	sp, #36	; 0x24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	fa93 f3a3 	rbit	r3, r3
 80078b2:	613b      	str	r3, [r7, #16]
  return result;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	fab3 f383 	clz	r3, r3
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	2103      	movs	r1, #3
 80078c0:	fa01 f303 	lsl.w	r3, r1, r3
 80078c4:	43db      	mvns	r3, r3
 80078c6:	401a      	ands	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	fa93 f3a3 	rbit	r3, r3
 80078d2:	61bb      	str	r3, [r7, #24]
  return result;
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	fab3 f383 	clz	r3, r3
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	fa01 f303 	lsl.w	r3, r1, r3
 80078e4:	431a      	orrs	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	601a      	str	r2, [r3, #0]
}
 80078ea:	bf00      	nop
 80078ec:	3724      	adds	r7, #36	; 0x24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b089      	sub	sp, #36	; 0x24
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	fa93 f3a3 	rbit	r3, r3
 8007910:	613b      	str	r3, [r7, #16]
  return result;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	fab3 f383 	clz	r3, r3
 8007918:	b2db      	uxtb	r3, r3
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	2103      	movs	r1, #3
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	43db      	mvns	r3, r3
 8007924:	401a      	ands	r2, r3
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	fa93 f3a3 	rbit	r3, r3
 8007930:	61bb      	str	r3, [r7, #24]
  return result;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	fab3 f383 	clz	r3, r3
 8007938:	b2db      	uxtb	r3, r3
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	fa01 f303 	lsl.w	r3, r1, r3
 8007942:	431a      	orrs	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	60da      	str	r2, [r3, #12]
}
 8007948:	bf00      	nop
 800794a:	3724      	adds	r7, #36	; 0x24
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800797a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800797c:	4907      	ldr	r1, [pc, #28]	; (800799c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4313      	orrs	r3, r2
 8007982:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4013      	ands	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800798e:	68fb      	ldr	r3, [r7, #12]
}
 8007990:	bf00      	nop
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	40021000 	.word	0x40021000

080079a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80079a6:	f107 031c 	add.w	r3, r7, #28
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	605a      	str	r2, [r3, #4]
 80079b0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079b2:	1d3b      	adds	r3, r7, #4
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	605a      	str	r2, [r3, #4]
 80079ba:	609a      	str	r2, [r3, #8]
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	611a      	str	r2, [r3, #16]
 80079c0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80079c2:	2004      	movs	r0, #4
 80079c4:	f7ff ffd4 	bl	8007970 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80079c8:	2020      	movs	r0, #32
 80079ca:	f7ff ffd1 	bl	8007970 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80079ce:	2001      	movs	r0, #1
 80079d0:	f7ff ffce 	bl	8007970 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80079d4:	2002      	movs	r0, #2
 80079d6:	f7ff ffcb 	bl	8007970 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80079da:	2108      	movs	r1, #8
 80079dc:	48d3      	ldr	r0, [pc, #844]	; (8007d2c <MX_GPIO_Init+0x38c>)
 80079de:	f7ff ffb9 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80079e2:	2108      	movs	r1, #8
 80079e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079e8:	f7ff ffb4 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80079ec:	2110      	movs	r1, #16
 80079ee:	48cf      	ldr	r0, [pc, #828]	; (8007d2c <MX_GPIO_Init+0x38c>)
 80079f0:	f7ff ffb0 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 80079f4:	2120      	movs	r1, #32
 80079f6:	48cd      	ldr	r0, [pc, #820]	; (8007d2c <MX_GPIO_Init+0x38c>)
 80079f8:	f7ff ffac 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80079fc:	2101      	movs	r1, #1
 80079fe:	48cc      	ldr	r0, [pc, #816]	; (8007d30 <MX_GPIO_Init+0x390>)
 8007a00:	f7ff ffa8 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a08:	48c8      	ldr	r0, [pc, #800]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007a0a:	f7ff ffa3 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007a0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a12:	48c6      	ldr	r0, [pc, #792]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007a14:	f7ff ff9e 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007a18:	2140      	movs	r1, #64	; 0x40
 8007a1a:	48c5      	ldr	r0, [pc, #788]	; (8007d30 <MX_GPIO_Init+0x390>)
 8007a1c:	f7ff ff9a 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007a20:	2180      	movs	r1, #128	; 0x80
 8007a22:	48c3      	ldr	r0, [pc, #780]	; (8007d30 <MX_GPIO_Init+0x390>)
 8007a24:	f7ff ff96 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a2c:	48c0      	ldr	r0, [pc, #768]	; (8007d30 <MX_GPIO_Init+0x390>)
 8007a2e:	f7ff ff91 	bl	8007954 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007a32:	49c0      	ldr	r1, [pc, #768]	; (8007d34 <MX_GPIO_Init+0x394>)
 8007a34:	2002      	movs	r0, #2
 8007a36:	f7ff feff 	bl	8007838 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007a3a:	49bf      	ldr	r1, [pc, #764]	; (8007d38 <MX_GPIO_Init+0x398>)
 8007a3c:	2002      	movs	r0, #2
 8007a3e:	f7ff fefb 	bl	8007838 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8007a42:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007a46:	2005      	movs	r0, #5
 8007a48:	f7ff fef6 	bl	8007838 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007a4c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007a50:	2005      	movs	r0, #5
 8007a52:	f7ff fef1 	bl	8007838 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007a56:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007a5a:	2002      	movs	r0, #2
 8007a5c:	f7ff feec 	bl	8007838 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007a60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a64:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a72:	2302      	movs	r3, #2
 8007a74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a78:	f107 031c 	add.w	r3, r7, #28
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f005 fead 	bl	800d7dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a86:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a94:	2302      	movs	r3, #2
 8007a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a9a:	f107 031c 	add.w	r3, r7, #28
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f005 fe9c 	bl	800d7dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007aba:	f107 031c 	add.w	r3, r7, #28
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f005 fe8c 	bl	800d7dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007ada:	f107 031c 	add.w	r3, r7, #28
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f005 fe7c 	bl	800d7dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007aee:	2300      	movs	r3, #0
 8007af0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007af4:	2302      	movs	r3, #2
 8007af6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007afa:	f107 031c 	add.w	r3, r7, #28
 8007afe:	4618      	mov	r0, r3
 8007b00:	f005 fe6c 	bl	800d7dc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007b04:	2201      	movs	r2, #1
 8007b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b0a:	4888      	ldr	r0, [pc, #544]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007b0c:	f7ff fef3 	bl	80078f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007b10:	2201      	movs	r2, #1
 8007b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b16:	4885      	ldr	r0, [pc, #532]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007b18:	f7ff feed 	bl	80078f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	2101      	movs	r1, #1
 8007b20:	4886      	ldr	r0, [pc, #536]	; (8007d3c <MX_GPIO_Init+0x39c>)
 8007b22:	f7ff fee8 	bl	80078f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007b26:	2201      	movs	r2, #1
 8007b28:	2102      	movs	r1, #2
 8007b2a:	4884      	ldr	r0, [pc, #528]	; (8007d3c <MX_GPIO_Init+0x39c>)
 8007b2c:	f7ff fee3 	bl	80078f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8007b30:	2201      	movs	r2, #1
 8007b32:	2104      	movs	r1, #4
 8007b34:	487d      	ldr	r0, [pc, #500]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007b36:	f7ff fede 	bl	80078f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b40:	487a      	ldr	r0, [pc, #488]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007b42:	f7ff fea9 	bl	8007898 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007b46:	2200      	movs	r2, #0
 8007b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b4c:	4877      	ldr	r0, [pc, #476]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007b4e:	f7ff fea3 	bl	8007898 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007b52:	2200      	movs	r2, #0
 8007b54:	2101      	movs	r1, #1
 8007b56:	4879      	ldr	r0, [pc, #484]	; (8007d3c <MX_GPIO_Init+0x39c>)
 8007b58:	f7ff fe9e 	bl	8007898 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2102      	movs	r1, #2
 8007b60:	4876      	ldr	r0, [pc, #472]	; (8007d3c <MX_GPIO_Init+0x39c>)
 8007b62:	f7ff fe99 	bl	8007898 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8007b66:	2200      	movs	r2, #0
 8007b68:	2104      	movs	r1, #4
 8007b6a:	4870      	ldr	r0, [pc, #448]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007b6c:	f7ff fe94 	bl	8007898 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007b70:	2308      	movs	r3, #8
 8007b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b74:	2301      	movs	r3, #1
 8007b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007b80:	2302      	movs	r3, #2
 8007b82:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4868      	ldr	r0, [pc, #416]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007b8a:	f006 f81a 	bl	800dbc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8007b8e:	2308      	movs	r3, #8
 8007b90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b92:	2301      	movs	r3, #1
 8007b94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007baa:	f006 f80a 	bl	800dbc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8007bae:	2310      	movs	r3, #16
 8007bb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8007bc2:	1d3b      	adds	r3, r7, #4
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4859      	ldr	r0, [pc, #356]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007bc8:	f005 fffb 	bl	800dbc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8007bcc:	2320      	movs	r3, #32
 8007bce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8007be0:	1d3b      	adds	r3, r7, #4
 8007be2:	4619      	mov	r1, r3
 8007be4:	4851      	ldr	r0, [pc, #324]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007be6:	f005 ffec 	bl	800dbc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8007bea:	2301      	movs	r3, #1
 8007bec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8007bfe:	1d3b      	adds	r3, r7, #4
 8007c00:	4619      	mov	r1, r3
 8007c02:	484b      	ldr	r0, [pc, #300]	; (8007d30 <MX_GPIO_Init+0x390>)
 8007c04:	f005 ffdd 	bl	800dbc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007c1e:	1d3b      	adds	r3, r7, #4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4842      	ldr	r0, [pc, #264]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007c24:	f005 ffcd 	bl	800dbc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007c3e:	1d3b      	adds	r3, r7, #4
 8007c40:	4619      	mov	r1, r3
 8007c42:	483a      	ldr	r0, [pc, #232]	; (8007d2c <MX_GPIO_Init+0x38c>)
 8007c44:	f005 ffbd 	bl	800dbc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007c48:	2340      	movs	r3, #64	; 0x40
 8007c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c50:	2303      	movs	r3, #3
 8007c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007c5c:	1d3b      	adds	r3, r7, #4
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4833      	ldr	r0, [pc, #204]	; (8007d30 <MX_GPIO_Init+0x390>)
 8007c62:	f005 ffae 	bl	800dbc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007c7a:	1d3b      	adds	r3, r7, #4
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	482c      	ldr	r0, [pc, #176]	; (8007d30 <MX_GPIO_Init+0x390>)
 8007c80:	f005 ff9f 	bl	800dbc2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007c9a:	1d3b      	adds	r3, r7, #4
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4824      	ldr	r0, [pc, #144]	; (8007d30 <MX_GPIO_Init+0x390>)
 8007ca0:	f005 ff8f 	bl	800dbc2 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007ca4:	f7ff fd3e 	bl	8007724 <__NVIC_GetPriorityGrouping>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2200      	movs	r2, #0
 8007cac:	2100      	movs	r1, #0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff fd8e 	bl	80077d0 <NVIC_EncodePriority>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	2006      	movs	r0, #6
 8007cba:	f7ff fd5f 	bl	800777c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007cbe:	2006      	movs	r0, #6
 8007cc0:	f7ff fd3e 	bl	8007740 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007cc4:	f7ff fd2e 	bl	8007724 <__NVIC_GetPriorityGrouping>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2100      	movs	r1, #0
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7ff fd7e 	bl	80077d0 <NVIC_EncodePriority>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	2007      	movs	r0, #7
 8007cda:	f7ff fd4f 	bl	800777c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007cde:	2007      	movs	r0, #7
 8007ce0:	f7ff fd2e 	bl	8007740 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007ce4:	f7ff fd1e 	bl	8007724 <__NVIC_GetPriorityGrouping>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2200      	movs	r2, #0
 8007cec:	2100      	movs	r1, #0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff fd6e 	bl	80077d0 <NVIC_EncodePriority>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	2008      	movs	r0, #8
 8007cfa:	f7ff fd3f 	bl	800777c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007cfe:	2008      	movs	r0, #8
 8007d00:	f7ff fd1e 	bl	8007740 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007d04:	f7ff fd0e 	bl	8007724 <__NVIC_GetPriorityGrouping>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff fd5e 	bl	80077d0 <NVIC_EncodePriority>
 8007d14:	4603      	mov	r3, r0
 8007d16:	4619      	mov	r1, r3
 8007d18:	2028      	movs	r0, #40	; 0x28
 8007d1a:	f7ff fd2f 	bl	800777c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007d1e:	2028      	movs	r0, #40	; 0x28
 8007d20:	f7ff fd0e 	bl	8007740 <__NVIC_EnableIRQ>

}
 8007d24:	bf00      	nop
 8007d26:	3728      	adds	r7, #40	; 0x28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	e009      	b.n	8007d40 <MX_GPIO_Init+0x3a0>
 8007d2c:	48000800 	.word	0x48000800
 8007d30:	48000400 	.word	0x48000400
 8007d34:	0f000003 	.word	0x0f000003
 8007d38:	f0000003 	.word	0xf0000003
 8007d3c:	48001400 	.word	0x48001400
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop

08007d44 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007d4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007d50:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d013      	beq.n	8007d84 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007d5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007d60:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007d64:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007d6c:	e000      	b.n	8007d70 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007d6e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007d70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0f9      	beq.n	8007d6e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007d7a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007d84:	687b      	ldr	r3, [r7, #4]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b086      	sub	sp, #24
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  int i=0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	e009      	b.n	8007dbc <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	60ba      	str	r2, [r7, #8]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff ffc7 	bl	8007d44 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	3301      	adds	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	dbf1      	blt.n	8007da8 <_write+0x16>
  return len;
 8007dc4:	687b      	ldr	r3, [r7, #4]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007dd4:	f000 feb5 	bl	8008b42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007dd8:	f000 f86c 	bl	8007eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ddc:	f7ff fde0 	bl	80079a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8007de0:	f7ff fc66 	bl	80076b0 <MX_DMA_Init>
  MX_DAC1_Init();
 8007de4:	f7ff fb16 	bl	8007414 <MX_DAC1_Init>
  MX_DAC2_Init();
 8007de8:	f7ff fb5e 	bl	80074a8 <MX_DAC2_Init>
  MX_ADC1_Init();
 8007dec:	f7ff f9d4 	bl	8007198 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007df0:	f7ff fab6 	bl	8007360 <MX_COMP1_Init>
  MX_TIM2_Init();
 8007df4:	f000 fbaa 	bl	800854c <MX_TIM2_Init>
  MX_SPI3_Init();
 8007df8:	f000 f908 	bl	800800c <MX_SPI3_Init>
  MX_RNG_Init();
 8007dfc:	f000 f8f8 	bl	8007ff0 <MX_RNG_Init>
  MX_TIM1_Init();
 8007e00:	f000 fb34 	bl	800846c <MX_TIM1_Init>
  MX_TIM8_Init();
 8007e04:	f000 fc8a 	bl	800871c <MX_TIM8_Init>
  MX_TIM16_Init();
 8007e08:	f000 fd42 	bl	8008890 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007e0c:	f000 fcee 	bl	80087ec <MX_TIM15_Init>
  MX_TIM5_Init();
 8007e10:	f000 fc36 	bl	8008680 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007e14:	f000 fbe6 	bl	80085e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  DT_InitRegister();
 8007e18:	f7fd f8c0 	bl	8004f9c <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 8007e1c:	f7fd fd64 	bl	80058e8 <SM_Init>
  FuncO_Init();
 8007e20:	f7fd fabc 	bl	800539c <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8007e24:	2000      	movs	r0, #0
 8007e26:	f7fd fb35 	bl	8005494 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	f7fd fb8c 	bl	8005548 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_MAX_OUTPUT_ARR;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8007e30:	2110      	movs	r1, #16
 8007e32:	481b      	ldr	r0, [pc, #108]	; (8007ea0 <main+0xd0>)
 8007e34:	f002 fb89 	bl	800a54a <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8007e38:	4b1a      	ldr	r3, [pc, #104]	; (8007ea4 <main+0xd4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a19      	ldr	r2, [pc, #100]	; (8007ea4 <main+0xd4>)
 8007e3e:	f043 0301 	orr.w	r3, r3, #1
 8007e42:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8007e44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e48:	f7fd fa32 	bl	80052b0 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	2108      	movs	r1, #8
 8007e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e54:	f003 fbc4 	bl	800b5e0 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 8007e58:	2059      	movs	r0, #89	; 0x59
 8007e5a:	f7fd fedf 	bl	8005c1c <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007e64:	4810      	ldr	r0, [pc, #64]	; (8007ea8 <main+0xd8>)
 8007e66:	f003 fbbb 	bl	800b5e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e70:	480d      	ldr	r0, [pc, #52]	; (8007ea8 <main+0xd8>)
 8007e72:	f003 fbb5 	bl	800b5e0 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007e76:	480d      	ldr	r0, [pc, #52]	; (8007eac <main+0xdc>)
 8007e78:	f004 fcac 	bl	800c7d4 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007e7c:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <main+0xe0>)
 8007e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e82:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007e84:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <main+0xe0>)
 8007e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e8a:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8007e8c:	f7f8 ff4a 	bl	8000d24 <DM_Init>
  DM_PostInit();
 8007e90:	f7f8 ff56 	bl	8000d40 <DM_PostInit>

  IM_Init();
 8007e94:	f7fc fed0 	bl	8004c38 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007e98:	f7fb fe70 	bl	8003b7c <EM_ProcessEvent>
 8007e9c:	e7fc      	b.n	8007e98 <main+0xc8>
 8007e9e:	bf00      	nop
 8007ea0:	200025f8 	.word	0x200025f8
 8007ea4:	40013400 	.word	0x40013400
 8007ea8:	48000800 	.word	0x48000800
 8007eac:	20002860 	.word	0x20002860
 8007eb0:	40001000 	.word	0x40001000

08007eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b0a8      	sub	sp, #160	; 0xa0
 8007eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007eba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ebe:	2238      	movs	r2, #56	; 0x38
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f006 ff6c 	bl	800eda0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ec8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	609a      	str	r2, [r3, #8]
 8007ed4:	60da      	str	r2, [r3, #12]
 8007ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ed8:	463b      	mov	r3, r7
 8007eda:	2254      	movs	r2, #84	; 0x54
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f006 ff5e 	bl	800eda0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f003 fb93 	bl	800b610 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007eea:	2322      	movs	r3, #34	; 0x22
 8007eec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ef2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007efe:	2302      	movs	r3, #2
 8007f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007f04:	2302      	movs	r3, #2
 8007f06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007f10:	232a      	movs	r3, #42	; 0x2a
 8007f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8007f16:	231e      	movs	r3, #30
 8007f18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007f22:	2302      	movs	r3, #2
 8007f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f003 fc13 	bl	800b758 <HAL_RCC_OscConfig>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007f38:	f000 f82a 	bl	8007f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f3c:	230f      	movs	r3, #15
 8007f3e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f40:	2303      	movs	r3, #3
 8007f42:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f44:	2300      	movs	r3, #0
 8007f46:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007f50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007f54:	2108      	movs	r1, #8
 8007f56:	4618      	mov	r0, r3
 8007f58:	f003 ff16 	bl	800bd88 <HAL_RCC_ClockConfig>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007f62:	f000 f815 	bl	8007f90 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007f66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007f6a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f76:	463b      	mov	r3, r7
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f004 f8f5 	bl	800c168 <HAL_RCCEx_PeriphCLKConfig>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007f84:	f000 f804 	bl	8007f90 <Error_Handler>
  }
}
 8007f88:	bf00      	nop
 8007f8a:	37a0      	adds	r7, #160	; 0xa0
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007f94:	bf00      	nop
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f043 0204 	orr.w	r2, r3, #4
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	601a      	str	r2, [r3, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <LL_AHB2_GRP1_EnableClock>:
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007fc8:	4b08      	ldr	r3, [pc, #32]	; (8007fec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fcc:	4907      	ldr	r1, [pc, #28]	; (8007fec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007fde:	68fb      	ldr	r3, [r7, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40021000 	.word	0x40021000

08007ff0 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007ff4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007ff8:	f7ff ffe2 	bl	8007fc0 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007ffc:	4802      	ldr	r0, [pc, #8]	; (8008008 <MX_RNG_Init+0x18>)
 8007ffe:	f7ff ffce 	bl	8007f9e <LL_RNG_Enable>

}
 8008002:	bf00      	nop
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	50060800 	.word	0x50060800

0800800c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008010:	4b1b      	ldr	r3, [pc, #108]	; (8008080 <MX_SPI3_Init+0x74>)
 8008012:	4a1c      	ldr	r2, [pc, #112]	; (8008084 <MX_SPI3_Init+0x78>)
 8008014:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008016:	4b1a      	ldr	r3, [pc, #104]	; (8008080 <MX_SPI3_Init+0x74>)
 8008018:	f44f 7282 	mov.w	r2, #260	; 0x104
 800801c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800801e:	4b18      	ldr	r3, [pc, #96]	; (8008080 <MX_SPI3_Init+0x74>)
 8008020:	2200      	movs	r2, #0
 8008022:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008024:	4b16      	ldr	r3, [pc, #88]	; (8008080 <MX_SPI3_Init+0x74>)
 8008026:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800802a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800802c:	4b14      	ldr	r3, [pc, #80]	; (8008080 <MX_SPI3_Init+0x74>)
 800802e:	2200      	movs	r2, #0
 8008030:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008032:	4b13      	ldr	r3, [pc, #76]	; (8008080 <MX_SPI3_Init+0x74>)
 8008034:	2200      	movs	r2, #0
 8008036:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008038:	4b11      	ldr	r3, [pc, #68]	; (8008080 <MX_SPI3_Init+0x74>)
 800803a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800803e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008040:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <MX_SPI3_Init+0x74>)
 8008042:	2210      	movs	r2, #16
 8008044:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008046:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <MX_SPI3_Init+0x74>)
 8008048:	2200      	movs	r2, #0
 800804a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800804c:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <MX_SPI3_Init+0x74>)
 800804e:	2200      	movs	r2, #0
 8008050:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008052:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <MX_SPI3_Init+0x74>)
 8008054:	2200      	movs	r2, #0
 8008056:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008058:	4b09      	ldr	r3, [pc, #36]	; (8008080 <MX_SPI3_Init+0x74>)
 800805a:	2207      	movs	r2, #7
 800805c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800805e:	4b08      	ldr	r3, [pc, #32]	; (8008080 <MX_SPI3_Init+0x74>)
 8008060:	2200      	movs	r2, #0
 8008062:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008064:	4b06      	ldr	r3, [pc, #24]	; (8008080 <MX_SPI3_Init+0x74>)
 8008066:	2208      	movs	r2, #8
 8008068:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800806a:	4805      	ldr	r0, [pc, #20]	; (8008080 <MX_SPI3_Init+0x74>)
 800806c:	f004 fac8 	bl	800c600 <HAL_SPI_Init>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008076:	f7ff ff8b 	bl	8007f90 <Error_Handler>
  }

}
 800807a:	bf00      	nop
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	200026cc 	.word	0x200026cc
 8008084:	40003c00 	.word	0x40003c00

08008088 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08a      	sub	sp, #40	; 0x28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008090:	f107 0314 	add.w	r3, r7, #20
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	605a      	str	r2, [r3, #4]
 800809a:	609a      	str	r2, [r3, #8]
 800809c:	60da      	str	r2, [r3, #12]
 800809e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a17      	ldr	r2, [pc, #92]	; (8008104 <HAL_SPI_MspInit+0x7c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d128      	bne.n	80080fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80080aa:	4b17      	ldr	r3, [pc, #92]	; (8008108 <HAL_SPI_MspInit+0x80>)
 80080ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ae:	4a16      	ldr	r2, [pc, #88]	; (8008108 <HAL_SPI_MspInit+0x80>)
 80080b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080b4:	6593      	str	r3, [r2, #88]	; 0x58
 80080b6:	4b14      	ldr	r3, [pc, #80]	; (8008108 <HAL_SPI_MspInit+0x80>)
 80080b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080be:	613b      	str	r3, [r7, #16]
 80080c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080c2:	4b11      	ldr	r3, [pc, #68]	; (8008108 <HAL_SPI_MspInit+0x80>)
 80080c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c6:	4a10      	ldr	r2, [pc, #64]	; (8008108 <HAL_SPI_MspInit+0x80>)
 80080c8:	f043 0304 	orr.w	r3, r3, #4
 80080cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080ce:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <HAL_SPI_MspInit+0x80>)
 80080d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d2:	f003 0304 	and.w	r3, r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80080da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80080de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e0:	2302      	movs	r3, #2
 80080e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e4:	2300      	movs	r3, #0
 80080e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080e8:	2300      	movs	r3, #0
 80080ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80080ec:	2306      	movs	r3, #6
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080f0:	f107 0314 	add.w	r3, r7, #20
 80080f4:	4619      	mov	r1, r3
 80080f6:	4805      	ldr	r0, [pc, #20]	; (800810c <HAL_SPI_MspInit+0x84>)
 80080f8:	f003 f8f0 	bl	800b2dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80080fc:	bf00      	nop
 80080fe:	3728      	adds	r7, #40	; 0x28
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40003c00 	.word	0x40003c00
 8008108:	40021000 	.word	0x40021000
 800810c:	48000800 	.word	0x48000800

08008110 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008114:	4b05      	ldr	r3, [pc, #20]	; (800812c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	4a04      	ldr	r2, [pc, #16]	; (800812c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800811a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800811e:	6093      	str	r3, [r2, #8]
}
 8008120:	bf00      	nop
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40007000 	.word	0x40007000

08008130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008136:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <HAL_MspInit+0x44>)
 8008138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813a:	4a0e      	ldr	r2, [pc, #56]	; (8008174 <HAL_MspInit+0x44>)
 800813c:	f043 0301 	orr.w	r3, r3, #1
 8008140:	6613      	str	r3, [r2, #96]	; 0x60
 8008142:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <HAL_MspInit+0x44>)
 8008144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	607b      	str	r3, [r7, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800814e:	4b09      	ldr	r3, [pc, #36]	; (8008174 <HAL_MspInit+0x44>)
 8008150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008152:	4a08      	ldr	r2, [pc, #32]	; (8008174 <HAL_MspInit+0x44>)
 8008154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008158:	6593      	str	r3, [r2, #88]	; 0x58
 800815a:	4b06      	ldr	r3, [pc, #24]	; (8008174 <HAL_MspInit+0x44>)
 800815c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8008166:	f7ff ffd3 	bl	8008110 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800816a:	bf00      	nop
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	40021000 	.word	0x40021000

08008178 <LL_EXTI_IsActiveFlag_0_31>:
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8008182:	695a      	ldr	r2, [r3, #20]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4013      	ands	r3, r2
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	429a      	cmp	r2, r3
 800818c:	d101      	bne.n	8008192 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	40010400 	.word	0x40010400

080081a4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80081ac:	4a04      	ldr	r2, [pc, #16]	; (80081c0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6153      	str	r3, [r2, #20]
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	40010400 	.word	0x40010400

080081c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80081c8:	bf00      	nop
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081d2:	b480      	push	{r7}
 80081d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081d6:	e7fe      	b.n	80081d6 <HardFault_Handler+0x4>

080081d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081dc:	e7fe      	b.n	80081dc <MemManage_Handler+0x4>

080081de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081de:	b480      	push	{r7}
 80081e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081e2:	e7fe      	b.n	80081e2 <BusFault_Handler+0x4>

080081e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081e8:	e7fe      	b.n	80081e8 <UsageFault_Handler+0x4>

080081ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081ea:	b480      	push	{r7}
 80081ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081ee:	bf00      	nop
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081fc:	bf00      	nop
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008206:	b480      	push	{r7}
 8008208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800820a:	bf00      	nop
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008218:	f000 fce6 	bl	8008be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800821c:	bf00      	nop
 800821e:	bd80      	pop	{r7, pc}

08008220 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8008224:	f7fc fdc0 	bl	8004da8 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8008228:	2001      	movs	r0, #1
 800822a:	f7ff ffa5 	bl	8008178 <LL_EXTI_IsActiveFlag_0_31>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8008234:	2001      	movs	r0, #1
 8008236:	f7ff ffb5 	bl	80081a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800823a:	bf00      	nop
 800823c:	bd80      	pop	{r7, pc}

0800823e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8008242:	f7fc fdd7 	bl	8004df4 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8008246:	2002      	movs	r0, #2
 8008248:	f7ff ff96 	bl	8008178 <LL_EXTI_IsActiveFlag_0_31>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8008252:	2002      	movs	r0, #2
 8008254:	f7ff ffa6 	bl	80081a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008258:	bf00      	nop
 800825a:	bd80      	pop	{r7, pc}

0800825c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8008260:	f7fc fdee 	bl	8004e40 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8008264:	2004      	movs	r0, #4
 8008266:	f7ff ff87 	bl	8008178 <LL_EXTI_IsActiveFlag_0_31>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8008270:	2004      	movs	r0, #4
 8008272:	f7ff ff97 	bl	80081a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008276:	bf00      	nop
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008280:	4802      	ldr	r0, [pc, #8]	; (800828c <DMA1_Channel1_IRQHandler+0x10>)
 8008282:	f002 fedb 	bl	800b03c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008286:	bf00      	nop
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20002560 	.word	0x20002560

08008290 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008294:	4802      	ldr	r0, [pc, #8]	; (80082a0 <DMA1_Channel2_IRQHandler+0x10>)
 8008296:	f002 fed1 	bl	800b03c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800829a:	bf00      	nop
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	2000260c 	.word	0x2000260c

080082a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80082a8:	4802      	ldr	r0, [pc, #8]	; (80082b4 <DMA1_Channel3_IRQHandler+0x10>)
 80082aa:	f002 fec7 	bl	800b03c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80082ae:	bf00      	nop
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	2000266c 	.word	0x2000266c

080082b8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 80082bc:	f7f8 fd5e 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 80082c0:	f7fc fde4 	bl	8004e8c <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80082c4:	4803      	ldr	r0, [pc, #12]	; (80082d4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80082c6:	f004 fbe6 	bl	800ca96 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80082ca:	4803      	ldr	r0, [pc, #12]	; (80082d8 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80082cc:	f004 fbe3 	bl	800ca96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80082d0:	bf00      	nop
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20002860 	.word	0x20002860
 80082d8:	2000277c 	.word	0x2000277c

080082dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80082e0:	4802      	ldr	r0, [pc, #8]	; (80082ec <TIM3_IRQHandler+0x10>)
 80082e2:	f004 fbd8 	bl	800ca96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80082e6:	bf00      	nop
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20002814 	.word	0x20002814

080082f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 80082f4:	f7fc fd08 	bl	8004d08 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 80082f8:	f7fc fd2e 	bl	8004d58 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80082fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008300:	f7ff ff3a 	bl	8008178 <LL_EXTI_IsActiveFlag_0_31>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800830a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800830e:	f7ff ff49 	bl	80081a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8008312:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008316:	f7ff ff2f 	bl	8008178 <LL_EXTI_IsActiveFlag_0_31>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8008320:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008324:	f7ff ff3e 	bl	80081a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008328:	bf00      	nop
 800832a:	bd80      	pop	{r7, pc}

0800832c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8008330:	f7fc fc92 	bl	8004c58 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008334:	4802      	ldr	r0, [pc, #8]	; (8008340 <TIM5_IRQHandler+0x14>)
 8008336:	f004 fbae 	bl	800ca96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800833a:	bf00      	nop
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	200027c8 	.word	0x200027c8

08008344 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e00a      	b.n	800836c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008356:	f3af 8000 	nop.w
 800835a:	4601      	mov	r1, r0
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	60ba      	str	r2, [r7, #8]
 8008362:	b2ca      	uxtb	r2, r1
 8008364:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	3301      	adds	r3, #1
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	dbf0      	blt.n	8008356 <_read+0x12>
	}

return len;
 8008374:	687b      	ldr	r3, [r7, #4]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <_close>:
	}
	return len;
}

int _close(int file)
{
 800837e:	b480      	push	{r7}
 8008380:	b083      	sub	sp, #12
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
	return -1;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800838a:	4618      	mov	r0, r3
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80083a6:	605a      	str	r2, [r3, #4]
	return 0;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <_isatty>:

int _isatty(int file)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
	return 1;
 80083be:	2301      	movs	r3, #1
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
	return 0;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
	...

080083e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80083f0:	4b11      	ldr	r3, [pc, #68]	; (8008438 <_sbrk+0x50>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d102      	bne.n	80083fe <_sbrk+0x16>
		heap_end = &end;
 80083f8:	4b0f      	ldr	r3, [pc, #60]	; (8008438 <_sbrk+0x50>)
 80083fa:	4a10      	ldr	r2, [pc, #64]	; (800843c <_sbrk+0x54>)
 80083fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80083fe:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <_sbrk+0x50>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <_sbrk+0x50>)
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4413      	add	r3, r2
 800840c:	466a      	mov	r2, sp
 800840e:	4293      	cmp	r3, r2
 8008410:	d907      	bls.n	8008422 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008412:	f006 fc9b 	bl	800ed4c <__errno>
 8008416:	4602      	mov	r2, r0
 8008418:	230c      	movs	r3, #12
 800841a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800841c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008420:	e006      	b.n	8008430 <_sbrk+0x48>
	}

	heap_end += incr;
 8008422:	4b05      	ldr	r3, [pc, #20]	; (8008438 <_sbrk+0x50>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	4a03      	ldr	r2, [pc, #12]	; (8008438 <_sbrk+0x50>)
 800842c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800842e:	68fb      	ldr	r3, [r7, #12]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20001f0c 	.word	0x20001f0c
 800843c:	20002950 	.word	0x20002950

08008440 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008444:	4b08      	ldr	r3, [pc, #32]	; (8008468 <SystemInit+0x28>)
 8008446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844a:	4a07      	ldr	r2, [pc, #28]	; (8008468 <SystemInit+0x28>)
 800844c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008454:	4b04      	ldr	r3, [pc, #16]	; (8008468 <SystemInit+0x28>)
 8008456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800845a:	609a      	str	r2, [r3, #8]
#endif
}
 800845c:	bf00      	nop
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	e000ed00 	.word	0xe000ed00

0800846c <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b09a      	sub	sp, #104	; 0x68
 8008470:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8008472:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008476:	2224      	movs	r2, #36	; 0x24
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f006 fc90 	bl	800eda0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008480:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	605a      	str	r2, [r3, #4]
 800848a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800848c:	1d3b      	adds	r3, r7, #4
 800848e:	2234      	movs	r2, #52	; 0x34
 8008490:	2100      	movs	r1, #0
 8008492:	4618      	mov	r0, r3
 8008494:	f006 fc84 	bl	800eda0 <memset>

  htim1.Instance = TIM1;
 8008498:	4b2a      	ldr	r3, [pc, #168]	; (8008544 <MX_TIM1_Init+0xd8>)
 800849a:	4a2b      	ldr	r2, [pc, #172]	; (8008548 <MX_TIM1_Init+0xdc>)
 800849c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800849e:	4b29      	ldr	r3, [pc, #164]	; (8008544 <MX_TIM1_Init+0xd8>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80084a4:	4b27      	ldr	r3, [pc, #156]	; (8008544 <MX_TIM1_Init+0xd8>)
 80084a6:	2260      	movs	r2, #96	; 0x60
 80084a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80084aa:	4b26      	ldr	r3, [pc, #152]	; (8008544 <MX_TIM1_Init+0xd8>)
 80084ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084b2:	4b24      	ldr	r3, [pc, #144]	; (8008544 <MX_TIM1_Init+0xd8>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80084b8:	4b22      	ldr	r3, [pc, #136]	; (8008544 <MX_TIM1_Init+0xd8>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80084be:	4b21      	ldr	r3, [pc, #132]	; (8008544 <MX_TIM1_Init+0xd8>)
 80084c0:	2280      	movs	r2, #128	; 0x80
 80084c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80084c4:	2302      	movs	r3, #2
 80084c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80084c8:	2300      	movs	r3, #0
 80084ca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80084cc:	2301      	movs	r3, #1
 80084ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80084d0:	2300      	movs	r3, #0
 80084d2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80084d8:	2300      	movs	r3, #0
 80084da:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80084dc:	2301      	movs	r3, #1
 80084de:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80084e0:	2300      	movs	r3, #0
 80084e2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80084e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084ec:	4619      	mov	r1, r3
 80084ee:	4815      	ldr	r0, [pc, #84]	; (8008544 <MX_TIM1_Init+0xd8>)
 80084f0:	f004 fa2b 	bl	800c94a <HAL_TIM_Encoder_Init>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80084fa:	f7ff fd49 	bl	8007f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80084fe:	2320      	movs	r3, #32
 8008500:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008502:	2300      	movs	r3, #0
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008506:	2300      	movs	r3, #0
 8008508:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800850a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800850e:	4619      	mov	r1, r3
 8008510:	480c      	ldr	r0, [pc, #48]	; (8008544 <MX_TIM1_Init+0xd8>)
 8008512:	f004 fea5 	bl	800d260 <HAL_TIMEx_MasterConfigSynchronization>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800851c:	f7ff fd38 	bl	8007f90 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008520:	2300      	movs	r3, #0
 8008522:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008524:	2300      	movs	r3, #0
 8008526:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008528:	1d3b      	adds	r3, r7, #4
 800852a:	4619      	mov	r1, r3
 800852c:	4805      	ldr	r0, [pc, #20]	; (8008544 <MX_TIM1_Init+0xd8>)
 800852e:	f004 ff2d 	bl	800d38c <HAL_TIMEx_ConfigBreakDeadTime>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8008538:	f7ff fd2a 	bl	8007f90 <Error_Handler>
  }

}
 800853c:	bf00      	nop
 800853e:	3768      	adds	r7, #104	; 0x68
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20002860 	.word	0x20002860
 8008548:	40012c00 	.word	0x40012c00

0800854c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008552:	f107 0310 	add.w	r3, r7, #16
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	605a      	str	r2, [r3, #4]
 800855c:	609a      	str	r2, [r3, #8]
 800855e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008560:	1d3b      	adds	r3, r7, #4
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	605a      	str	r2, [r3, #4]
 8008568:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800856a:	4b1d      	ldr	r3, [pc, #116]	; (80085e0 <MX_TIM2_Init+0x94>)
 800856c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008570:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008572:	4b1b      	ldr	r3, [pc, #108]	; (80085e0 <MX_TIM2_Init+0x94>)
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008578:	4b19      	ldr	r3, [pc, #100]	; (80085e0 <MX_TIM2_Init+0x94>)
 800857a:	2200      	movs	r2, #0
 800857c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800857e:	4b18      	ldr	r3, [pc, #96]	; (80085e0 <MX_TIM2_Init+0x94>)
 8008580:	2201      	movs	r2, #1
 8008582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008584:	4b16      	ldr	r3, [pc, #88]	; (80085e0 <MX_TIM2_Init+0x94>)
 8008586:	2200      	movs	r2, #0
 8008588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800858a:	4b15      	ldr	r3, [pc, #84]	; (80085e0 <MX_TIM2_Init+0x94>)
 800858c:	2280      	movs	r2, #128	; 0x80
 800858e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008590:	4813      	ldr	r0, [pc, #76]	; (80085e0 <MX_TIM2_Init+0x94>)
 8008592:	f004 f8c7 	bl	800c724 <HAL_TIM_Base_Init>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800859c:	f7ff fcf8 	bl	8007f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80085a6:	f107 0310 	add.w	r3, r7, #16
 80085aa:	4619      	mov	r1, r3
 80085ac:	480c      	ldr	r0, [pc, #48]	; (80085e0 <MX_TIM2_Init+0x94>)
 80085ae:	f004 fbf1 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80085b8:	f7ff fcea 	bl	8007f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80085bc:	2320      	movs	r3, #32
 80085be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80085c4:	1d3b      	adds	r3, r7, #4
 80085c6:	4619      	mov	r1, r3
 80085c8:	4805      	ldr	r0, [pc, #20]	; (80085e0 <MX_TIM2_Init+0x94>)
 80085ca:	f004 fe49 	bl	800d260 <HAL_TIMEx_MasterConfigSynchronization>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80085d4:	f7ff fcdc 	bl	8007f90 <Error_Handler>
  }

}
 80085d8:	bf00      	nop
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	200028ac 	.word	0x200028ac

080085e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085ea:	f107 0310 	add.w	r3, r7, #16
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	605a      	str	r2, [r3, #4]
 80085f4:	609a      	str	r2, [r3, #8]
 80085f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085f8:	1d3b      	adds	r3, r7, #4
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	605a      	str	r2, [r3, #4]
 8008600:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8008602:	4b1d      	ldr	r3, [pc, #116]	; (8008678 <MX_TIM3_Init+0x94>)
 8008604:	4a1d      	ldr	r2, [pc, #116]	; (800867c <MX_TIM3_Init+0x98>)
 8008606:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008608:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <MX_TIM3_Init+0x94>)
 800860a:	2200      	movs	r2, #0
 800860c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800860e:	4b1a      	ldr	r3, [pc, #104]	; (8008678 <MX_TIM3_Init+0x94>)
 8008610:	2210      	movs	r2, #16
 8008612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008614:	4b18      	ldr	r3, [pc, #96]	; (8008678 <MX_TIM3_Init+0x94>)
 8008616:	2201      	movs	r2, #1
 8008618:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800861a:	4b17      	ldr	r3, [pc, #92]	; (8008678 <MX_TIM3_Init+0x94>)
 800861c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008622:	4b15      	ldr	r3, [pc, #84]	; (8008678 <MX_TIM3_Init+0x94>)
 8008624:	2200      	movs	r2, #0
 8008626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008628:	4813      	ldr	r0, [pc, #76]	; (8008678 <MX_TIM3_Init+0x94>)
 800862a:	f004 f87b 	bl	800c724 <HAL_TIM_Base_Init>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008634:	f7ff fcac 	bl	8007f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800863c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800863e:	f107 0310 	add.w	r3, r7, #16
 8008642:	4619      	mov	r1, r3
 8008644:	480c      	ldr	r0, [pc, #48]	; (8008678 <MX_TIM3_Init+0x94>)
 8008646:	f004 fba5 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8008650:	f7ff fc9e 	bl	8007f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008654:	2300      	movs	r3, #0
 8008656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008658:	2300      	movs	r3, #0
 800865a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800865c:	1d3b      	adds	r3, r7, #4
 800865e:	4619      	mov	r1, r3
 8008660:	4805      	ldr	r0, [pc, #20]	; (8008678 <MX_TIM3_Init+0x94>)
 8008662:	f004 fdfd 	bl	800d260 <HAL_TIMEx_MasterConfigSynchronization>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800866c:	f7ff fc90 	bl	8007f90 <Error_Handler>
  }

}
 8008670:	bf00      	nop
 8008672:	3720      	adds	r7, #32
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20002814 	.word	0x20002814
 800867c:	40000400 	.word	0x40000400

08008680 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008686:	f107 0310 	add.w	r3, r7, #16
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	605a      	str	r2, [r3, #4]
 8008690:	609a      	str	r2, [r3, #8]
 8008692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008694:	1d3b      	adds	r3, r7, #4
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	605a      	str	r2, [r3, #4]
 800869c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800869e:	4b1d      	ldr	r3, [pc, #116]	; (8008714 <MX_TIM5_Init+0x94>)
 80086a0:	4a1d      	ldr	r2, [pc, #116]	; (8008718 <MX_TIM5_Init+0x98>)
 80086a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80086a4:	4b1b      	ldr	r3, [pc, #108]	; (8008714 <MX_TIM5_Init+0x94>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <MX_TIM5_Init+0x94>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80086b0:	4b18      	ldr	r3, [pc, #96]	; (8008714 <MX_TIM5_Init+0x94>)
 80086b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086b8:	4b16      	ldr	r3, [pc, #88]	; (8008714 <MX_TIM5_Init+0x94>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80086be:	4b15      	ldr	r3, [pc, #84]	; (8008714 <MX_TIM5_Init+0x94>)
 80086c0:	2280      	movs	r2, #128	; 0x80
 80086c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80086c4:	4813      	ldr	r0, [pc, #76]	; (8008714 <MX_TIM5_Init+0x94>)
 80086c6:	f004 f82d 	bl	800c724 <HAL_TIM_Base_Init>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80086d0:	f7ff fc5e 	bl	8007f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80086d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80086da:	f107 0310 	add.w	r3, r7, #16
 80086de:	4619      	mov	r1, r3
 80086e0:	480c      	ldr	r0, [pc, #48]	; (8008714 <MX_TIM5_Init+0x94>)
 80086e2:	f004 fb57 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80086ec:	f7ff fc50 	bl	8007f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086f0:	2300      	movs	r3, #0
 80086f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80086f8:	1d3b      	adds	r3, r7, #4
 80086fa:	4619      	mov	r1, r3
 80086fc:	4805      	ldr	r0, [pc, #20]	; (8008714 <MX_TIM5_Init+0x94>)
 80086fe:	f004 fdaf 	bl	800d260 <HAL_TIMEx_MasterConfigSynchronization>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008708:	f7ff fc42 	bl	8007f90 <Error_Handler>
  }

}
 800870c:	bf00      	nop
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200027c8 	.word	0x200027c8
 8008718:	40000c00 	.word	0x40000c00

0800871c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b094      	sub	sp, #80	; 0x50
 8008720:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	605a      	str	r2, [r3, #4]
 800872c:	609a      	str	r2, [r3, #8]
 800872e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008730:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800873c:	463b      	mov	r3, r7
 800873e:	2234      	movs	r2, #52	; 0x34
 8008740:	2100      	movs	r1, #0
 8008742:	4618      	mov	r0, r3
 8008744:	f006 fb2c 	bl	800eda0 <memset>

  htim8.Instance = TIM8;
 8008748:	4b26      	ldr	r3, [pc, #152]	; (80087e4 <MX_TIM8_Init+0xc8>)
 800874a:	4a27      	ldr	r2, [pc, #156]	; (80087e8 <MX_TIM8_Init+0xcc>)
 800874c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800874e:	4b25      	ldr	r3, [pc, #148]	; (80087e4 <MX_TIM8_Init+0xc8>)
 8008750:	2200      	movs	r2, #0
 8008752:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008754:	4b23      	ldr	r3, [pc, #140]	; (80087e4 <MX_TIM8_Init+0xc8>)
 8008756:	2200      	movs	r2, #0
 8008758:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800875a:	4b22      	ldr	r3, [pc, #136]	; (80087e4 <MX_TIM8_Init+0xc8>)
 800875c:	2201      	movs	r2, #1
 800875e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008760:	4b20      	ldr	r3, [pc, #128]	; (80087e4 <MX_TIM8_Init+0xc8>)
 8008762:	2200      	movs	r2, #0
 8008764:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008766:	4b1f      	ldr	r3, [pc, #124]	; (80087e4 <MX_TIM8_Init+0xc8>)
 8008768:	2200      	movs	r2, #0
 800876a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800876c:	4b1d      	ldr	r3, [pc, #116]	; (80087e4 <MX_TIM8_Init+0xc8>)
 800876e:	2280      	movs	r2, #128	; 0x80
 8008770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008772:	481c      	ldr	r0, [pc, #112]	; (80087e4 <MX_TIM8_Init+0xc8>)
 8008774:	f003 ffd6 	bl	800c724 <HAL_TIM_Base_Init>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800877e:	f7ff fc07 	bl	8007f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008786:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008788:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800878c:	4619      	mov	r1, r3
 800878e:	4815      	ldr	r0, [pc, #84]	; (80087e4 <MX_TIM8_Init+0xc8>)
 8008790:	f004 fb00 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800879a:	f7ff fbf9 	bl	8007f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800879e:	2320      	movs	r3, #32
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80087a2:	2300      	movs	r3, #0
 80087a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087a6:	2300      	movs	r3, #0
 80087a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80087aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80087ae:	4619      	mov	r1, r3
 80087b0:	480c      	ldr	r0, [pc, #48]	; (80087e4 <MX_TIM8_Init+0xc8>)
 80087b2:	f004 fd55 	bl	800d260 <HAL_TIMEx_MasterConfigSynchronization>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80087bc:	f7ff fbe8 	bl	8007f90 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80087c0:	2300      	movs	r3, #0
 80087c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80087c4:	2300      	movs	r3, #0
 80087c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80087c8:	463b      	mov	r3, r7
 80087ca:	4619      	mov	r1, r3
 80087cc:	4805      	ldr	r0, [pc, #20]	; (80087e4 <MX_TIM8_Init+0xc8>)
 80087ce:	f004 fddd 	bl	800d38c <HAL_TIMEx_ConfigBreakDeadTime>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80087d8:	f7ff fbda 	bl	8007f90 <Error_Handler>
  }

}
 80087dc:	bf00      	nop
 80087de:	3750      	adds	r7, #80	; 0x50
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20002730 	.word	0x20002730
 80087e8:	40013400 	.word	0x40013400

080087ec <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80087f2:	f107 0310 	add.w	r3, r7, #16
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	605a      	str	r2, [r3, #4]
 80087fc:	609a      	str	r2, [r3, #8]
 80087fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008800:	1d3b      	adds	r3, r7, #4
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	605a      	str	r2, [r3, #4]
 8008808:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800880a:	4b1f      	ldr	r3, [pc, #124]	; (8008888 <MX_TIM15_Init+0x9c>)
 800880c:	4a1f      	ldr	r2, [pc, #124]	; (800888c <MX_TIM15_Init+0xa0>)
 800880e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008810:	4b1d      	ldr	r3, [pc, #116]	; (8008888 <MX_TIM15_Init+0x9c>)
 8008812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008816:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008818:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <MX_TIM15_Init+0x9c>)
 800881a:	2200      	movs	r2, #0
 800881c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 800881e:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <MX_TIM15_Init+0x9c>)
 8008820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008824:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008826:	4b18      	ldr	r3, [pc, #96]	; (8008888 <MX_TIM15_Init+0x9c>)
 8008828:	2200      	movs	r2, #0
 800882a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800882c:	4b16      	ldr	r3, [pc, #88]	; (8008888 <MX_TIM15_Init+0x9c>)
 800882e:	2200      	movs	r2, #0
 8008830:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008832:	4b15      	ldr	r3, [pc, #84]	; (8008888 <MX_TIM15_Init+0x9c>)
 8008834:	2200      	movs	r2, #0
 8008836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008838:	4813      	ldr	r0, [pc, #76]	; (8008888 <MX_TIM15_Init+0x9c>)
 800883a:	f003 ff73 	bl	800c724 <HAL_TIM_Base_Init>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008844:	f7ff fba4 	bl	8007f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800884c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800884e:	f107 0310 	add.w	r3, r7, #16
 8008852:	4619      	mov	r1, r3
 8008854:	480c      	ldr	r0, [pc, #48]	; (8008888 <MX_TIM15_Init+0x9c>)
 8008856:	f004 fa9d 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008860:	f7ff fb96 	bl	8007f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008864:	2300      	movs	r3, #0
 8008866:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800886c:	1d3b      	adds	r3, r7, #4
 800886e:	4619      	mov	r1, r3
 8008870:	4805      	ldr	r0, [pc, #20]	; (8008888 <MX_TIM15_Init+0x9c>)
 8008872:	f004 fcf5 	bl	800d260 <HAL_TIMEx_MasterConfigSynchronization>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800887c:	f7ff fb88 	bl	8007f90 <Error_Handler>
  }

}
 8008880:	bf00      	nop
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	2000277c 	.word	0x2000277c
 800888c:	40014000 	.word	0x40014000

08008890 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008894:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <MX_TIM16_Init+0x48>)
 8008896:	4a11      	ldr	r2, [pc, #68]	; (80088dc <MX_TIM16_Init+0x4c>)
 8008898:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 800889a:	4b0f      	ldr	r3, [pc, #60]	; (80088d8 <MX_TIM16_Init+0x48>)
 800889c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088a2:	4b0d      	ldr	r3, [pc, #52]	; (80088d8 <MX_TIM16_Init+0x48>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80088a8:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <MX_TIM16_Init+0x48>)
 80088aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088b0:	4b09      	ldr	r3, [pc, #36]	; (80088d8 <MX_TIM16_Init+0x48>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80088b6:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <MX_TIM16_Init+0x48>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80088bc:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <MX_TIM16_Init+0x48>)
 80088be:	2200      	movs	r2, #0
 80088c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80088c2:	4805      	ldr	r0, [pc, #20]	; (80088d8 <MX_TIM16_Init+0x48>)
 80088c4:	f003 ff2e 	bl	800c724 <HAL_TIM_Base_Init>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80088ce:	f7ff fb5f 	bl	8007f90 <Error_Handler>
  }

}
 80088d2:	bf00      	nop
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	200028f8 	.word	0x200028f8
 80088dc:	40014400 	.word	0x40014400

080088e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e8:	f107 0314 	add.w	r3, r7, #20
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	605a      	str	r2, [r3, #4]
 80088f2:	609a      	str	r2, [r3, #8]
 80088f4:	60da      	str	r2, [r3, #12]
 80088f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1b      	ldr	r2, [pc, #108]	; (800896c <HAL_TIM_Encoder_MspInit+0x8c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d12f      	bne.n	8008962 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008902:	4b1b      	ldr	r3, [pc, #108]	; (8008970 <HAL_TIM_Encoder_MspInit+0x90>)
 8008904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008906:	4a1a      	ldr	r2, [pc, #104]	; (8008970 <HAL_TIM_Encoder_MspInit+0x90>)
 8008908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800890c:	6613      	str	r3, [r2, #96]	; 0x60
 800890e:	4b18      	ldr	r3, [pc, #96]	; (8008970 <HAL_TIM_Encoder_MspInit+0x90>)
 8008910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800891a:	4b15      	ldr	r3, [pc, #84]	; (8008970 <HAL_TIM_Encoder_MspInit+0x90>)
 800891c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800891e:	4a14      	ldr	r2, [pc, #80]	; (8008970 <HAL_TIM_Encoder_MspInit+0x90>)
 8008920:	f043 0304 	orr.w	r3, r3, #4
 8008924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008926:	4b12      	ldr	r3, [pc, #72]	; (8008970 <HAL_TIM_Encoder_MspInit+0x90>)
 8008928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892a:	f003 0304 	and.w	r3, r3, #4
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008932:	2303      	movs	r3, #3
 8008934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008936:	2302      	movs	r3, #2
 8008938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893a:	2300      	movs	r3, #0
 800893c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800893e:	2300      	movs	r3, #0
 8008940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008942:	2302      	movs	r3, #2
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008946:	f107 0314 	add.w	r3, r7, #20
 800894a:	4619      	mov	r1, r3
 800894c:	4809      	ldr	r0, [pc, #36]	; (8008974 <HAL_TIM_Encoder_MspInit+0x94>)
 800894e:	f002 fcc5 	bl	800b2dc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	2018      	movs	r0, #24
 8008958:	f001 fda1 	bl	800a49e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800895c:	2018      	movs	r0, #24
 800895e:	f001 fdb8 	bl	800a4d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008962:	bf00      	nop
 8008964:	3728      	adds	r7, #40	; 0x28
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	40012c00 	.word	0x40012c00
 8008970:	40021000 	.word	0x40021000
 8008974:	48000800 	.word	0x48000800

08008978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08e      	sub	sp, #56	; 0x38
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	609a      	str	r2, [r3, #8]
 800898c:	60da      	str	r2, [r3, #12]
 800898e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008998:	d10c      	bne.n	80089b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800899a:	4b4f      	ldr	r3, [pc, #316]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 800899c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899e:	4a4e      	ldr	r2, [pc, #312]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 80089a0:	f043 0301 	orr.w	r3, r3, #1
 80089a4:	6593      	str	r3, [r2, #88]	; 0x58
 80089a6:	4b4c      	ldr	r3, [pc, #304]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 80089a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	623b      	str	r3, [r7, #32]
 80089b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80089b2:	e08d      	b.n	8008ad0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a48      	ldr	r2, [pc, #288]	; (8008adc <HAL_TIM_Base_MspInit+0x164>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d114      	bne.n	80089e8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80089be:	4b46      	ldr	r3, [pc, #280]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 80089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c2:	4a45      	ldr	r2, [pc, #276]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 80089c4:	f043 0302 	orr.w	r3, r3, #2
 80089c8:	6593      	str	r3, [r2, #88]	; 0x58
 80089ca:	4b43      	ldr	r3, [pc, #268]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 80089cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	61fb      	str	r3, [r7, #28]
 80089d4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80089d6:	2200      	movs	r2, #0
 80089d8:	2100      	movs	r1, #0
 80089da:	201d      	movs	r0, #29
 80089dc:	f001 fd5f 	bl	800a49e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80089e0:	201d      	movs	r0, #29
 80089e2:	f001 fd76 	bl	800a4d2 <HAL_NVIC_EnableIRQ>
}
 80089e6:	e073      	b.n	8008ad0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a3c      	ldr	r2, [pc, #240]	; (8008ae0 <HAL_TIM_Base_MspInit+0x168>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d131      	bne.n	8008a56 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80089f2:	4b39      	ldr	r3, [pc, #228]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 80089f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f6:	4a38      	ldr	r2, [pc, #224]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 80089f8:	f043 0308 	orr.w	r3, r3, #8
 80089fc:	6593      	str	r3, [r2, #88]	; 0x58
 80089fe:	4b36      	ldr	r3, [pc, #216]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	61bb      	str	r3, [r7, #24]
 8008a08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a0a:	4b33      	ldr	r3, [pc, #204]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a0e:	4a32      	ldr	r2, [pc, #200]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a10:	f043 0301 	orr.w	r3, r3, #1
 8008a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a16:	4b30      	ldr	r3, [pc, #192]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008a22:	2301      	movs	r3, #1
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a26:	2302      	movs	r3, #2
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008a32:	2302      	movs	r3, #2
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a40:	f002 fc4c 	bl	800b2dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008a44:	2200      	movs	r2, #0
 8008a46:	2102      	movs	r1, #2
 8008a48:	2032      	movs	r0, #50	; 0x32
 8008a4a:	f001 fd28 	bl	800a49e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008a4e:	2032      	movs	r0, #50	; 0x32
 8008a50:	f001 fd3f 	bl	800a4d2 <HAL_NVIC_EnableIRQ>
}
 8008a54:	e03c      	b.n	8008ad0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a22      	ldr	r2, [pc, #136]	; (8008ae4 <HAL_TIM_Base_MspInit+0x16c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10c      	bne.n	8008a7a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008a60:	4b1d      	ldr	r3, [pc, #116]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a64:	4a1c      	ldr	r2, [pc, #112]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a6a:	6613      	str	r3, [r2, #96]	; 0x60
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a74:	613b      	str	r3, [r7, #16]
 8008a76:	693b      	ldr	r3, [r7, #16]
}
 8008a78:	e02a      	b.n	8008ad0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a1a      	ldr	r2, [pc, #104]	; (8008ae8 <HAL_TIM_Base_MspInit+0x170>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d114      	bne.n	8008aae <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008a84:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a88:	4a13      	ldr	r2, [pc, #76]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a8e:	6613      	str	r3, [r2, #96]	; 0x60
 8008a90:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	2018      	movs	r0, #24
 8008aa2:	f001 fcfc 	bl	800a49e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008aa6:	2018      	movs	r0, #24
 8008aa8:	f001 fd13 	bl	800a4d2 <HAL_NVIC_EnableIRQ>
}
 8008aac:	e010      	b.n	8008ad0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a0e      	ldr	r2, [pc, #56]	; (8008aec <HAL_TIM_Base_MspInit+0x174>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d10b      	bne.n	8008ad0 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008ab8:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008abc:	4a06      	ldr	r2, [pc, #24]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac2:	6613      	str	r3, [r2, #96]	; 0x60
 8008ac4:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 8008ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008acc:	60bb      	str	r3, [r7, #8]
 8008ace:	68bb      	ldr	r3, [r7, #8]
}
 8008ad0:	bf00      	nop
 8008ad2:	3738      	adds	r7, #56	; 0x38
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	40021000 	.word	0x40021000
 8008adc:	40000400 	.word	0x40000400
 8008ae0:	40000c00 	.word	0x40000c00
 8008ae4:	40013400 	.word	0x40013400
 8008ae8:	40014000 	.word	0x40014000
 8008aec:	40014400 	.word	0x40014400

08008af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008af0:	480d      	ldr	r0, [pc, #52]	; (8008b28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008af2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008af4:	480d      	ldr	r0, [pc, #52]	; (8008b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8008af6:	490e      	ldr	r1, [pc, #56]	; (8008b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008af8:	4a0e      	ldr	r2, [pc, #56]	; (8008b34 <LoopForever+0xe>)
  movs r3, #0
 8008afa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008afc:	e002      	b.n	8008b04 <LoopCopyDataInit>

08008afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b02:	3304      	adds	r3, #4

08008b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b08:	d3f9      	bcc.n	8008afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b0a:	4a0b      	ldr	r2, [pc, #44]	; (8008b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008b0c:	4c0b      	ldr	r4, [pc, #44]	; (8008b3c <LoopForever+0x16>)
  movs r3, #0
 8008b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b10:	e001      	b.n	8008b16 <LoopFillZerobss>

08008b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b14:	3204      	adds	r2, #4

08008b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b18:	d3fb      	bcc.n	8008b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008b1a:	f7ff fc91 	bl	8008440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b1e:	f006 f91b 	bl	800ed58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008b22:	f7ff f955 	bl	8007dd0 <main>

08008b26 <LoopForever>:

LoopForever:
    b LoopForever
 8008b26:	e7fe      	b.n	8008b26 <LoopForever>
  ldr   r0, =_estack
 8008b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b30:	20001e80 	.word	0x20001e80
  ldr r2, =_sidata
 8008b34:	08014088 	.word	0x08014088
  ldr r2, =_sbss
 8008b38:	20001e80 	.word	0x20001e80
  ldr r4, =_ebss
 8008b3c:	2000294c 	.word	0x2000294c

08008b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008b40:	e7fe      	b.n	8008b40 <ADC1_2_IRQHandler>

08008b42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b4c:	2003      	movs	r0, #3
 8008b4e:	f001 fc9b 	bl	800a488 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008b52:	2000      	movs	r0, #0
 8008b54:	f000 f80e 	bl	8008b74 <HAL_InitTick>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	71fb      	strb	r3, [r7, #7]
 8008b62:	e001      	b.n	8008b68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008b64:	f7ff fae4 	bl	8008130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008b68:	79fb      	ldrb	r3, [r7, #7]

}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008b80:	4b16      	ldr	r3, [pc, #88]	; (8008bdc <HAL_InitTick+0x68>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d022      	beq.n	8008bce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008b88:	4b15      	ldr	r3, [pc, #84]	; (8008be0 <HAL_InitTick+0x6c>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <HAL_InitTick+0x68>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f001 fca6 	bl	800a4ee <HAL_SYSTICK_Config>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10f      	bne.n	8008bc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b0f      	cmp	r3, #15
 8008bac:	d809      	bhi.n	8008bc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bae:	2200      	movs	r2, #0
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bb6:	f001 fc72 	bl	800a49e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008bba:	4a0a      	ldr	r2, [pc, #40]	; (8008be4 <HAL_InitTick+0x70>)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	e007      	b.n	8008bd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	73fb      	strb	r3, [r7, #15]
 8008bc6:	e004      	b.n	8008bd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	73fb      	strb	r3, [r7, #15]
 8008bcc:	e001      	b.n	8008bd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20000cb0 	.word	0x20000cb0
 8008be0:	20000ca8 	.word	0x20000ca8
 8008be4:	20000cac 	.word	0x20000cac

08008be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008bec:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <HAL_IncTick+0x1c>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <HAL_IncTick+0x20>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	4a03      	ldr	r2, [pc, #12]	; (8008c04 <HAL_IncTick+0x1c>)
 8008bf8:	6013      	str	r3, [r2, #0]
}
 8008bfa:	bf00      	nop
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	20002944 	.word	0x20002944
 8008c08:	20000cb0 	.word	0x20000cb0

08008c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8008c10:	4b03      	ldr	r3, [pc, #12]	; (8008c20 <HAL_GetTick+0x14>)
 8008c12:	681b      	ldr	r3, [r3, #0]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	20002944 	.word	0x20002944

08008c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c2c:	f7ff ffee 	bl	8008c0c <HAL_GetTick>
 8008c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c3c:	d004      	beq.n	8008c48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <HAL_Delay+0x40>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c48:	bf00      	nop
 8008c4a:	f7ff ffdf 	bl	8008c0c <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d8f7      	bhi.n	8008c4a <HAL_Delay+0x26>
  {
  }
}
 8008c5a:	bf00      	nop
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000cb0 	.word	0x20000cb0

08008c68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	609a      	str	r2, [r3, #8]
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	609a      	str	r2, [r3, #8]
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008cd0:	b490      	push	{r4, r7}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3360      	adds	r3, #96	; 0x60
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008cec:	6822      	ldr	r2, [r4, #0]
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <LL_ADC_SetOffset+0x40>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d02:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc90      	pop	{r4, r7}
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	03fff000 	.word	0x03fff000

08008d14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008d14:	b490      	push	{r4, r7}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3360      	adds	r3, #96	; 0x60
 8008d22:	461a      	mov	r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc90      	pop	{r4, r7}
 8008d3a:	4770      	bx	lr

08008d3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008d3c:	b490      	push	{r4, r7}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3360      	adds	r3, #96	; 0x60
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bc90      	pop	{r4, r7}
 8008d6a:	4770      	bx	lr

08008d6c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008d6c:	b490      	push	{r4, r7}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3360      	adds	r3, #96	; 0x60
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc90      	pop	{r4, r7}
 8008d9a:	4770      	bx	lr

08008d9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008d9c:	b490      	push	{r4, r7}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3360      	adds	r3, #96	; 0x60
 8008dac:	461a      	mov	r2, r3
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc90      	pop	{r4, r7}
 8008dca:	4770      	bx	lr

08008dcc <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	615a      	str	r2, [r3, #20]
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008df2:	b490      	push	{r4, r7}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3330      	adds	r3, #48	; 0x30
 8008e02:	461a      	mov	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	0a1b      	lsrs	r3, r3, #8
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	4413      	add	r3, r2
 8008e10:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008e12:	6822      	ldr	r2, [r4, #0]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f003 031f 	and.w	r3, r3, #31
 8008e1a:	211f      	movs	r1, #31
 8008e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e20:	43db      	mvns	r3, r3
 8008e22:	401a      	ands	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	0e9b      	lsrs	r3, r3, #26
 8008e28:	f003 011f 	and.w	r1, r3, #31
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f003 031f 	and.w	r3, r3, #31
 8008e32:	fa01 f303 	lsl.w	r3, r1, r3
 8008e36:	4313      	orrs	r3, r2
 8008e38:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc90      	pop	{r4, r7}
 8008e42:	4770      	bx	lr

08008e44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008e44:	b490      	push	{r4, r7}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3314      	adds	r3, #20
 8008e54:	461a      	mov	r2, r3
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	0e5b      	lsrs	r3, r3, #25
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	4413      	add	r3, r2
 8008e62:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008e64:	6822      	ldr	r2, [r4, #0]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	0d1b      	lsrs	r3, r3, #20
 8008e6a:	f003 031f 	and.w	r3, r3, #31
 8008e6e:	2107      	movs	r1, #7
 8008e70:	fa01 f303 	lsl.w	r3, r1, r3
 8008e74:	43db      	mvns	r3, r3
 8008e76:	401a      	ands	r2, r3
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	0d1b      	lsrs	r3, r3, #20
 8008e7c:	f003 031f 	and.w	r3, r3, #31
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	fa01 f303 	lsl.w	r3, r1, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008e8a:	bf00      	nop
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc90      	pop	{r4, r7}
 8008e92:	4770      	bx	lr

08008e94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eac:	43db      	mvns	r3, r3
 8008eae:	401a      	ands	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f003 0318 	and.w	r3, r3, #24
 8008eb6:	4908      	ldr	r1, [pc, #32]	; (8008ed8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008eb8:	40d9      	lsrs	r1, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	400b      	ands	r3, r1
 8008ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ec2:	431a      	orrs	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008eca:	bf00      	nop
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	0007ffff 	.word	0x0007ffff

08008edc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	6093      	str	r3, [r2, #8]
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f14:	d101      	bne.n	8008f1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e000      	b.n	8008f1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f64:	d101      	bne.n	8008f6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e000      	b.n	8008f6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <LL_ADC_IsEnabled+0x18>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e000      	b.n	8008f92 <LL_ADC_IsEnabled+0x1a>
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d101      	bne.n	8008fb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e000      	b.n	8008fb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f003 0308 	and.w	r3, r3, #8
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	d101      	bne.n	8008fdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
	...

08008fec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008fec:	b590      	push	{r4, r7, lr}
 8008fee:	b089      	sub	sp, #36	; 0x24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e1ad      	b.n	8009362 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009010:	2b00      	cmp	r3, #0
 8009012:	d109      	bne.n	8009028 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7fe f937 	bl	8007288 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff ff67 	bl	8008f00 <LL_ADC_IsDeepPowerDownEnabled>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff ff4d 	bl	8008edc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff ff82 	bl	8008f50 <LL_ADC_IsInternalRegulatorEnabled>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d113      	bne.n	800907a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff ff66 	bl	8008f28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800905c:	4b9e      	ldr	r3, [pc, #632]	; (80092d8 <HAL_ADC_Init+0x2ec>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	099b      	lsrs	r3, r3, #6
 8009062:	4a9e      	ldr	r2, [pc, #632]	; (80092dc <HAL_ADC_Init+0x2f0>)
 8009064:	fba2 2303 	umull	r2, r3, r2, r3
 8009068:	099b      	lsrs	r3, r3, #6
 800906a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800906c:	e002      	b.n	8009074 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	3b01      	subs	r3, #1
 8009072:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1f9      	bne.n	800906e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff ff66 	bl	8008f50 <LL_ADC_IsInternalRegulatorEnabled>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10d      	bne.n	80090a6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908e:	f043 0210 	orr.w	r2, r3, #16
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800909a:	f043 0201 	orr.w	r2, r3, #1
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff ff77 	bl	8008f9e <LL_ADC_REG_IsConversionOngoing>
 80090b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b6:	f003 0310 	and.w	r3, r3, #16
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f040 8148 	bne.w	8009350 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 8144 	bne.w	8009350 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80090d0:	f043 0202 	orr.w	r2, r3, #2
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff ff4b 	bl	8008f78 <LL_ADC_IsEnabled>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d141      	bne.n	800916c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090f0:	d004      	beq.n	80090fc <HAL_ADC_Init+0x110>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a7a      	ldr	r2, [pc, #488]	; (80092e0 <HAL_ADC_Init+0x2f4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d10f      	bne.n	800911c <HAL_ADC_Init+0x130>
 80090fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009100:	f7ff ff3a 	bl	8008f78 <LL_ADC_IsEnabled>
 8009104:	4604      	mov	r4, r0
 8009106:	4876      	ldr	r0, [pc, #472]	; (80092e0 <HAL_ADC_Init+0x2f4>)
 8009108:	f7ff ff36 	bl	8008f78 <LL_ADC_IsEnabled>
 800910c:	4603      	mov	r3, r0
 800910e:	4323      	orrs	r3, r4
 8009110:	2b00      	cmp	r3, #0
 8009112:	bf0c      	ite	eq
 8009114:	2301      	moveq	r3, #1
 8009116:	2300      	movne	r3, #0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	e012      	b.n	8009142 <HAL_ADC_Init+0x156>
 800911c:	4871      	ldr	r0, [pc, #452]	; (80092e4 <HAL_ADC_Init+0x2f8>)
 800911e:	f7ff ff2b 	bl	8008f78 <LL_ADC_IsEnabled>
 8009122:	4604      	mov	r4, r0
 8009124:	4870      	ldr	r0, [pc, #448]	; (80092e8 <HAL_ADC_Init+0x2fc>)
 8009126:	f7ff ff27 	bl	8008f78 <LL_ADC_IsEnabled>
 800912a:	4603      	mov	r3, r0
 800912c:	431c      	orrs	r4, r3
 800912e:	486f      	ldr	r0, [pc, #444]	; (80092ec <HAL_ADC_Init+0x300>)
 8009130:	f7ff ff22 	bl	8008f78 <LL_ADC_IsEnabled>
 8009134:	4603      	mov	r3, r0
 8009136:	4323      	orrs	r3, r4
 8009138:	2b00      	cmp	r3, #0
 800913a:	bf0c      	ite	eq
 800913c:	2301      	moveq	r3, #1
 800913e:	2300      	movne	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d012      	beq.n	800916c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800914e:	d004      	beq.n	800915a <HAL_ADC_Init+0x16e>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a62      	ldr	r2, [pc, #392]	; (80092e0 <HAL_ADC_Init+0x2f4>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d101      	bne.n	800915e <HAL_ADC_Init+0x172>
 800915a:	4a65      	ldr	r2, [pc, #404]	; (80092f0 <HAL_ADC_Init+0x304>)
 800915c:	e000      	b.n	8009160 <HAL_ADC_Init+0x174>
 800915e:	4a65      	ldr	r2, [pc, #404]	; (80092f4 <HAL_ADC_Init+0x308>)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	4619      	mov	r1, r3
 8009166:	4610      	mov	r0, r2
 8009168:	f7ff fd7e 	bl	8008c68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7f5b      	ldrb	r3, [r3, #29]
 8009170:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009176:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800917c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009182:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800918a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800918c:	4313      	orrs	r3, r2
 800918e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009196:	2b01      	cmp	r3, #1
 8009198:	d106      	bne.n	80091a8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	3b01      	subs	r3, #1
 80091a0:	045b      	lsls	r3, r3, #17
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d009      	beq.n	80091c4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	4b4b      	ldr	r3, [pc, #300]	; (80092f8 <HAL_ADC_Init+0x30c>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6812      	ldr	r2, [r2, #0]
 80091d2:	69b9      	ldr	r1, [r7, #24]
 80091d4:	430b      	orrs	r3, r1
 80091d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7ff fed3 	bl	8008f9e <LL_ADC_REG_IsConversionOngoing>
 80091f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff fee0 	bl	8008fc4 <LL_ADC_INJ_IsConversionOngoing>
 8009204:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d17f      	bne.n	800930c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d17c      	bne.n	800930c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009216:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800921e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009220:	4313      	orrs	r3, r2
 8009222:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800922e:	f023 0302 	bic.w	r3, r3, #2
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	69b9      	ldr	r1, [r7, #24]
 8009238:	430b      	orrs	r3, r1
 800923a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d017      	beq.n	8009274 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691a      	ldr	r2, [r3, #16]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009252:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800925c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009260:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6911      	ldr	r1, [r2, #16]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6812      	ldr	r2, [r2, #0]
 800926c:	430b      	orrs	r3, r1
 800926e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8009272:	e013      	b.n	800929c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691a      	ldr	r2, [r3, #16]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009282:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	6812      	ldr	r2, [r2, #0]
 8009290:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009294:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009298:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d12a      	bne.n	80092fc <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80092b0:	f023 0304 	bic.w	r3, r3, #4
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80092bc:	4311      	orrs	r1, r2
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80092c2:	4311      	orrs	r1, r2
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80092c8:	430a      	orrs	r2, r1
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0201 	orr.w	r2, r2, #1
 80092d4:	611a      	str	r2, [r3, #16]
 80092d6:	e019      	b.n	800930c <HAL_ADC_Init+0x320>
 80092d8:	20000ca8 	.word	0x20000ca8
 80092dc:	053e2d63 	.word	0x053e2d63
 80092e0:	50000100 	.word	0x50000100
 80092e4:	50000400 	.word	0x50000400
 80092e8:	50000500 	.word	0x50000500
 80092ec:	50000600 	.word	0x50000600
 80092f0:	50000300 	.word	0x50000300
 80092f4:	50000700 	.word	0x50000700
 80092f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691a      	ldr	r2, [r3, #16]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0201 	bic.w	r2, r2, #1
 800930a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d10c      	bne.n	800932e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931a:	f023 010f 	bic.w	r1, r3, #15
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	1e5a      	subs	r2, r3, #1
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	631a      	str	r2, [r3, #48]	; 0x30
 800932c:	e007      	b.n	800933e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f022 020f 	bic.w	r2, r2, #15
 800933c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009342:	f023 0303 	bic.w	r3, r3, #3
 8009346:	f043 0201 	orr.w	r2, r3, #1
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	65da      	str	r2, [r3, #92]	; 0x5c
 800934e:	e007      	b.n	8009360 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009354:	f043 0210 	orr.w	r2, r3, #16
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009360:	7ffb      	ldrb	r3, [r7, #31]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3724      	adds	r7, #36	; 0x24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd90      	pop	{r4, r7, pc}
 800936a:	bf00      	nop

0800936c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b0a6      	sub	sp, #152	; 0x98
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009386:	2b01      	cmp	r3, #1
 8009388:	d101      	bne.n	800938e <HAL_ADC_ConfigChannel+0x22>
 800938a:	2302      	movs	r3, #2
 800938c:	e38e      	b.n	8009aac <HAL_ADC_ConfigChannel+0x740>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff fdff 	bl	8008f9e <LL_ADC_REG_IsConversionOngoing>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f040 836f 	bne.w	8009a86 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	6859      	ldr	r1, [r3, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	f7ff fd1c 	bl	8008df2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff fded 	bl	8008f9e <LL_ADC_REG_IsConversionOngoing>
 80093c4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff fdf9 	bl	8008fc4 <LL_ADC_INJ_IsConversionOngoing>
 80093d2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80093d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f040 817b 	bne.w	80096d6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80093e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f040 8176 	bne.w	80096d6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093f2:	d10f      	bne.n	8009414 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2200      	movs	r2, #0
 80093fe:	4619      	mov	r1, r3
 8009400:	f7ff fd20 	bl	8008e44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff fcdd 	bl	8008dcc <LL_ADC_SetSamplingTimeCommonConfig>
 8009412:	e00e      	b.n	8009432 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6818      	ldr	r0, [r3, #0]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	6819      	ldr	r1, [r3, #0]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	461a      	mov	r2, r3
 8009422:	f7ff fd0f 	bl	8008e44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2100      	movs	r1, #0
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff fccd 	bl	8008dcc <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	695a      	ldr	r2, [r3, #20]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	08db      	lsrs	r3, r3, #3
 800943e:	f003 0303 	and.w	r3, r3, #3
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	fa02 f303 	lsl.w	r3, r2, r3
 8009448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	2b04      	cmp	r3, #4
 8009452:	d022      	beq.n	800949a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6818      	ldr	r0, [r3, #0]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	6919      	ldr	r1, [r3, #16]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009464:	f7ff fc34 	bl	8008cd0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	6919      	ldr	r1, [r3, #16]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	461a      	mov	r2, r3
 8009476:	f7ff fc79 	bl	8008d6c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	6919      	ldr	r1, [r3, #16]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	7f1b      	ldrb	r3, [r3, #28]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d102      	bne.n	8009490 <HAL_ADC_ConfigChannel+0x124>
 800948a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800948e:	e000      	b.n	8009492 <HAL_ADC_ConfigChannel+0x126>
 8009490:	2300      	movs	r3, #0
 8009492:	461a      	mov	r2, r3
 8009494:	f7ff fc82 	bl	8008d9c <LL_ADC_SetOffsetSaturation>
 8009498:	e11d      	b.n	80096d6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2100      	movs	r1, #0
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff fc37 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 80094a6:	4603      	mov	r3, r0
 80094a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10a      	bne.n	80094c6 <HAL_ADC_ConfigChannel+0x15a>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2100      	movs	r1, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff fc2c 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 80094bc:	4603      	mov	r3, r0
 80094be:	0e9b      	lsrs	r3, r3, #26
 80094c0:	f003 021f 	and.w	r2, r3, #31
 80094c4:	e012      	b.n	80094ec <HAL_ADC_ConfigChannel+0x180>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2100      	movs	r1, #0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7ff fc21 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094dc:	fa93 f3a3 	rbit	r3, r3
 80094e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80094e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094e4:	fab3 f383 	clz	r3, r3
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	461a      	mov	r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d105      	bne.n	8009504 <HAL_ADC_ConfigChannel+0x198>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	0e9b      	lsrs	r3, r3, #26
 80094fe:	f003 031f 	and.w	r3, r3, #31
 8009502:	e00a      	b.n	800951a <HAL_ADC_ConfigChannel+0x1ae>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800950c:	fa93 f3a3 	rbit	r3, r3
 8009510:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8009512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009514:	fab3 f383 	clz	r3, r3
 8009518:	b2db      	uxtb	r3, r3
 800951a:	429a      	cmp	r2, r3
 800951c:	d106      	bne.n	800952c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2200      	movs	r2, #0
 8009524:	2100      	movs	r1, #0
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff fc08 	bl	8008d3c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2101      	movs	r1, #1
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fbee 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009538:	4603      	mov	r3, r0
 800953a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <HAL_ADC_ConfigChannel+0x1ec>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2101      	movs	r1, #1
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff fbe3 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 800954e:	4603      	mov	r3, r0
 8009550:	0e9b      	lsrs	r3, r3, #26
 8009552:	f003 021f 	and.w	r2, r3, #31
 8009556:	e010      	b.n	800957a <HAL_ADC_ConfigChannel+0x20e>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2101      	movs	r1, #1
 800955e:	4618      	mov	r0, r3
 8009560:	f7ff fbd8 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009564:	4603      	mov	r3, r0
 8009566:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800956a:	fa93 f3a3 	rbit	r3, r3
 800956e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009572:	fab3 f383 	clz	r3, r3
 8009576:	b2db      	uxtb	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009582:	2b00      	cmp	r3, #0
 8009584:	d105      	bne.n	8009592 <HAL_ADC_ConfigChannel+0x226>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	0e9b      	lsrs	r3, r3, #26
 800958c:	f003 031f 	and.w	r3, r3, #31
 8009590:	e00a      	b.n	80095a8 <HAL_ADC_ConfigChannel+0x23c>
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009598:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800959a:	fa93 f3a3 	rbit	r3, r3
 800959e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80095a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095a2:	fab3 f383 	clz	r3, r3
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d106      	bne.n	80095ba <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2200      	movs	r2, #0
 80095b2:	2101      	movs	r1, #1
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff fbc1 	bl	8008d3c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2102      	movs	r1, #2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7ff fba7 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <HAL_ADC_ConfigChannel+0x27a>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2102      	movs	r1, #2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fb9c 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 80095dc:	4603      	mov	r3, r0
 80095de:	0e9b      	lsrs	r3, r3, #26
 80095e0:	f003 021f 	and.w	r2, r3, #31
 80095e4:	e010      	b.n	8009608 <HAL_ADC_ConfigChannel+0x29c>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2102      	movs	r1, #2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fb91 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 80095f2:	4603      	mov	r3, r0
 80095f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095f8:	fa93 f3a3 	rbit	r3, r3
 80095fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80095fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009600:	fab3 f383 	clz	r3, r3
 8009604:	b2db      	uxtb	r3, r3
 8009606:	461a      	mov	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009610:	2b00      	cmp	r3, #0
 8009612:	d105      	bne.n	8009620 <HAL_ADC_ConfigChannel+0x2b4>
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	0e9b      	lsrs	r3, r3, #26
 800961a:	f003 031f 	and.w	r3, r3, #31
 800961e:	e00a      	b.n	8009636 <HAL_ADC_ConfigChannel+0x2ca>
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009628:	fa93 f3a3 	rbit	r3, r3
 800962c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800962e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009630:	fab3 f383 	clz	r3, r3
 8009634:	b2db      	uxtb	r3, r3
 8009636:	429a      	cmp	r2, r3
 8009638:	d106      	bne.n	8009648 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2200      	movs	r2, #0
 8009640:	2102      	movs	r1, #2
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff fb7a 	bl	8008d3c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2103      	movs	r1, #3
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fb60 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009654:	4603      	mov	r3, r0
 8009656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <HAL_ADC_ConfigChannel+0x308>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2103      	movs	r1, #3
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff fb55 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 800966a:	4603      	mov	r3, r0
 800966c:	0e9b      	lsrs	r3, r3, #26
 800966e:	f003 021f 	and.w	r2, r3, #31
 8009672:	e010      	b.n	8009696 <HAL_ADC_ConfigChannel+0x32a>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2103      	movs	r1, #3
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff fb4a 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009680:	4603      	mov	r3, r0
 8009682:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009686:	fa93 f3a3 	rbit	r3, r3
 800968a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800968c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800968e:	fab3 f383 	clz	r3, r3
 8009692:	b2db      	uxtb	r3, r3
 8009694:	461a      	mov	r2, r3
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d105      	bne.n	80096ae <HAL_ADC_ConfigChannel+0x342>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	0e9b      	lsrs	r3, r3, #26
 80096a8:	f003 031f 	and.w	r3, r3, #31
 80096ac:	e00a      	b.n	80096c4 <HAL_ADC_ConfigChannel+0x358>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096b6:	fa93 f3a3 	rbit	r3, r3
 80096ba:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80096bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096be:	fab3 f383 	clz	r3, r3
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d106      	bne.n	80096d6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2200      	movs	r2, #0
 80096ce:	2103      	movs	r1, #3
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff fb33 	bl	8008d3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff fc4c 	bl	8008f78 <LL_ADC_IsEnabled>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f040 810c 	bne.w	8009900 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	6819      	ldr	r1, [r3, #0]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	461a      	mov	r2, r3
 80096f6:	f7ff fbcd 	bl	8008e94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	4aaf      	ldr	r2, [pc, #700]	; (80099bc <HAL_ADC_ConfigChannel+0x650>)
 8009700:	4293      	cmp	r3, r2
 8009702:	f040 80fd 	bne.w	8009900 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10b      	bne.n	800972e <HAL_ADC_ConfigChannel+0x3c2>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	0e9b      	lsrs	r3, r3, #26
 800971c:	3301      	adds	r3, #1
 800971e:	f003 031f 	and.w	r3, r3, #31
 8009722:	2b09      	cmp	r3, #9
 8009724:	bf94      	ite	ls
 8009726:	2301      	movls	r3, #1
 8009728:	2300      	movhi	r3, #0
 800972a:	b2db      	uxtb	r3, r3
 800972c:	e012      	b.n	8009754 <HAL_ADC_ConfigChannel+0x3e8>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009736:	fa93 f3a3 	rbit	r3, r3
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800973c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800973e:	fab3 f383 	clz	r3, r3
 8009742:	b2db      	uxtb	r3, r3
 8009744:	3301      	adds	r3, #1
 8009746:	f003 031f 	and.w	r3, r3, #31
 800974a:	2b09      	cmp	r3, #9
 800974c:	bf94      	ite	ls
 800974e:	2301      	movls	r3, #1
 8009750:	2300      	movhi	r3, #0
 8009752:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009754:	2b00      	cmp	r3, #0
 8009756:	d064      	beq.n	8009822 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009760:	2b00      	cmp	r3, #0
 8009762:	d107      	bne.n	8009774 <HAL_ADC_ConfigChannel+0x408>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	0e9b      	lsrs	r3, r3, #26
 800976a:	3301      	adds	r3, #1
 800976c:	069b      	lsls	r3, r3, #26
 800976e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009772:	e00e      	b.n	8009792 <HAL_ADC_ConfigChannel+0x426>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	fa93 f3a3 	rbit	r3, r3
 8009780:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009784:	fab3 f383 	clz	r3, r3
 8009788:	b2db      	uxtb	r3, r3
 800978a:	3301      	adds	r3, #1
 800978c:	069b      	lsls	r3, r3, #26
 800978e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800979a:	2b00      	cmp	r3, #0
 800979c:	d109      	bne.n	80097b2 <HAL_ADC_ConfigChannel+0x446>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	0e9b      	lsrs	r3, r3, #26
 80097a4:	3301      	adds	r3, #1
 80097a6:	f003 031f 	and.w	r3, r3, #31
 80097aa:	2101      	movs	r1, #1
 80097ac:	fa01 f303 	lsl.w	r3, r1, r3
 80097b0:	e010      	b.n	80097d4 <HAL_ADC_ConfigChannel+0x468>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ba:	fa93 f3a3 	rbit	r3, r3
 80097be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	fab3 f383 	clz	r3, r3
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	3301      	adds	r3, #1
 80097ca:	f003 031f 	and.w	r3, r3, #31
 80097ce:	2101      	movs	r1, #1
 80097d0:	fa01 f303 	lsl.w	r3, r1, r3
 80097d4:	ea42 0103 	orr.w	r1, r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <HAL_ADC_ConfigChannel+0x48e>
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	0e9b      	lsrs	r3, r3, #26
 80097ea:	3301      	adds	r3, #1
 80097ec:	f003 021f 	and.w	r2, r3, #31
 80097f0:	4613      	mov	r3, r2
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	4413      	add	r3, r2
 80097f6:	051b      	lsls	r3, r3, #20
 80097f8:	e011      	b.n	800981e <HAL_ADC_ConfigChannel+0x4b2>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	fa93 f3a3 	rbit	r3, r3
 8009806:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	fab3 f383 	clz	r3, r3
 800980e:	b2db      	uxtb	r3, r3
 8009810:	3301      	adds	r3, #1
 8009812:	f003 021f 	and.w	r2, r3, #31
 8009816:	4613      	mov	r3, r2
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	4413      	add	r3, r2
 800981c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800981e:	430b      	orrs	r3, r1
 8009820:	e069      	b.n	80098f6 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800982a:	2b00      	cmp	r3, #0
 800982c:	d107      	bne.n	800983e <HAL_ADC_ConfigChannel+0x4d2>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	0e9b      	lsrs	r3, r3, #26
 8009834:	3301      	adds	r3, #1
 8009836:	069b      	lsls	r3, r3, #26
 8009838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800983c:	e00e      	b.n	800985c <HAL_ADC_ConfigChannel+0x4f0>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	fa93 f3a3 	rbit	r3, r3
 800984a:	61fb      	str	r3, [r7, #28]
  return result;
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	fab3 f383 	clz	r3, r3
 8009852:	b2db      	uxtb	r3, r3
 8009854:	3301      	adds	r3, #1
 8009856:	069b      	lsls	r3, r3, #26
 8009858:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009864:	2b00      	cmp	r3, #0
 8009866:	d109      	bne.n	800987c <HAL_ADC_ConfigChannel+0x510>
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	0e9b      	lsrs	r3, r3, #26
 800986e:	3301      	adds	r3, #1
 8009870:	f003 031f 	and.w	r3, r3, #31
 8009874:	2101      	movs	r1, #1
 8009876:	fa01 f303 	lsl.w	r3, r1, r3
 800987a:	e010      	b.n	800989e <HAL_ADC_ConfigChannel+0x532>
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	fa93 f3a3 	rbit	r3, r3
 8009888:	617b      	str	r3, [r7, #20]
  return result;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	fab3 f383 	clz	r3, r3
 8009890:	b2db      	uxtb	r3, r3
 8009892:	3301      	adds	r3, #1
 8009894:	f003 031f 	and.w	r3, r3, #31
 8009898:	2101      	movs	r1, #1
 800989a:	fa01 f303 	lsl.w	r3, r1, r3
 800989e:	ea42 0103 	orr.w	r1, r2, r3
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10d      	bne.n	80098ca <HAL_ADC_ConfigChannel+0x55e>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	0e9b      	lsrs	r3, r3, #26
 80098b4:	3301      	adds	r3, #1
 80098b6:	f003 021f 	and.w	r2, r3, #31
 80098ba:	4613      	mov	r3, r2
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	4413      	add	r3, r2
 80098c0:	3b1e      	subs	r3, #30
 80098c2:	051b      	lsls	r3, r3, #20
 80098c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80098c8:	e014      	b.n	80098f4 <HAL_ADC_ConfigChannel+0x588>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	fa93 f3a3 	rbit	r3, r3
 80098d6:	60fb      	str	r3, [r7, #12]
  return result;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	fab3 f383 	clz	r3, r3
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	3301      	adds	r3, #1
 80098e2:	f003 021f 	and.w	r2, r3, #31
 80098e6:	4613      	mov	r3, r2
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	4413      	add	r3, r2
 80098ec:	3b1e      	subs	r3, #30
 80098ee:	051b      	lsls	r3, r3, #20
 80098f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80098f4:	430b      	orrs	r3, r1
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	6892      	ldr	r2, [r2, #8]
 80098fa:	4619      	mov	r1, r3
 80098fc:	f7ff faa2 	bl	8008e44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	4b2e      	ldr	r3, [pc, #184]	; (80099c0 <HAL_ADC_ConfigChannel+0x654>)
 8009906:	4013      	ands	r3, r2
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 80c9 	beq.w	8009aa0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009916:	d004      	beq.n	8009922 <HAL_ADC_ConfigChannel+0x5b6>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a29      	ldr	r2, [pc, #164]	; (80099c4 <HAL_ADC_ConfigChannel+0x658>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d101      	bne.n	8009926 <HAL_ADC_ConfigChannel+0x5ba>
 8009922:	4b29      	ldr	r3, [pc, #164]	; (80099c8 <HAL_ADC_ConfigChannel+0x65c>)
 8009924:	e000      	b.n	8009928 <HAL_ADC_ConfigChannel+0x5bc>
 8009926:	4b29      	ldr	r3, [pc, #164]	; (80099cc <HAL_ADC_ConfigChannel+0x660>)
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff f9c3 	bl	8008cb4 <LL_ADC_GetCommonPathInternalCh>
 800992e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a26      	ldr	r2, [pc, #152]	; (80099d0 <HAL_ADC_ConfigChannel+0x664>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d004      	beq.n	8009946 <HAL_ADC_ConfigChannel+0x5da>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a24      	ldr	r2, [pc, #144]	; (80099d4 <HAL_ADC_ConfigChannel+0x668>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d14e      	bne.n	80099e4 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800994a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d148      	bne.n	80099e4 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800995a:	d005      	beq.n	8009968 <HAL_ADC_ConfigChannel+0x5fc>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a1d      	ldr	r2, [pc, #116]	; (80099d8 <HAL_ADC_ConfigChannel+0x66c>)
 8009962:	4293      	cmp	r3, r2
 8009964:	f040 8099 	bne.w	8009a9a <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009970:	d004      	beq.n	800997c <HAL_ADC_ConfigChannel+0x610>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a13      	ldr	r2, [pc, #76]	; (80099c4 <HAL_ADC_ConfigChannel+0x658>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d101      	bne.n	8009980 <HAL_ADC_ConfigChannel+0x614>
 800997c:	4a12      	ldr	r2, [pc, #72]	; (80099c8 <HAL_ADC_ConfigChannel+0x65c>)
 800997e:	e000      	b.n	8009982 <HAL_ADC_ConfigChannel+0x616>
 8009980:	4a12      	ldr	r2, [pc, #72]	; (80099cc <HAL_ADC_ConfigChannel+0x660>)
 8009982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009986:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800998a:	4619      	mov	r1, r3
 800998c:	4610      	mov	r0, r2
 800998e:	f7ff f97e 	bl	8008c8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009992:	4b12      	ldr	r3, [pc, #72]	; (80099dc <HAL_ADC_ConfigChannel+0x670>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	099b      	lsrs	r3, r3, #6
 8009998:	4a11      	ldr	r2, [pc, #68]	; (80099e0 <HAL_ADC_ConfigChannel+0x674>)
 800999a:	fba2 2303 	umull	r2, r3, r2, r3
 800999e:	099a      	lsrs	r2, r3, #6
 80099a0:	4613      	mov	r3, r2
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	4413      	add	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80099aa:	e002      	b.n	80099b2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1f9      	bne.n	80099ac <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80099b8:	e06f      	b.n	8009a9a <HAL_ADC_ConfigChannel+0x72e>
 80099ba:	bf00      	nop
 80099bc:	407f0000 	.word	0x407f0000
 80099c0:	80080000 	.word	0x80080000
 80099c4:	50000100 	.word	0x50000100
 80099c8:	50000300 	.word	0x50000300
 80099cc:	50000700 	.word	0x50000700
 80099d0:	c3210000 	.word	0xc3210000
 80099d4:	90c00010 	.word	0x90c00010
 80099d8:	50000600 	.word	0x50000600
 80099dc:	20000ca8 	.word	0x20000ca8
 80099e0:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a32      	ldr	r2, [pc, #200]	; (8009ab4 <HAL_ADC_ConfigChannel+0x748>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d125      	bne.n	8009a3a <HAL_ADC_ConfigChannel+0x6ce>
 80099ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d11f      	bne.n	8009a3a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a2e      	ldr	r2, [pc, #184]	; (8009ab8 <HAL_ADC_ConfigChannel+0x74c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d104      	bne.n	8009a0e <HAL_ADC_ConfigChannel+0x6a2>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a2c      	ldr	r2, [pc, #176]	; (8009abc <HAL_ADC_ConfigChannel+0x750>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d047      	beq.n	8009a9e <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a16:	d004      	beq.n	8009a22 <HAL_ADC_ConfigChannel+0x6b6>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a26      	ldr	r2, [pc, #152]	; (8009ab8 <HAL_ADC_ConfigChannel+0x74c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d101      	bne.n	8009a26 <HAL_ADC_ConfigChannel+0x6ba>
 8009a22:	4a27      	ldr	r2, [pc, #156]	; (8009ac0 <HAL_ADC_ConfigChannel+0x754>)
 8009a24:	e000      	b.n	8009a28 <HAL_ADC_ConfigChannel+0x6bc>
 8009a26:	4a27      	ldr	r2, [pc, #156]	; (8009ac4 <HAL_ADC_ConfigChannel+0x758>)
 8009a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f7ff f92b 	bl	8008c8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009a38:	e031      	b.n	8009a9e <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a22      	ldr	r2, [pc, #136]	; (8009ac8 <HAL_ADC_ConfigChannel+0x75c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d12d      	bne.n	8009aa0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d127      	bne.n	8009aa0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <HAL_ADC_ConfigChannel+0x74c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d022      	beq.n	8009aa0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a62:	d004      	beq.n	8009a6e <HAL_ADC_ConfigChannel+0x702>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a13      	ldr	r2, [pc, #76]	; (8009ab8 <HAL_ADC_ConfigChannel+0x74c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d101      	bne.n	8009a72 <HAL_ADC_ConfigChannel+0x706>
 8009a6e:	4a14      	ldr	r2, [pc, #80]	; (8009ac0 <HAL_ADC_ConfigChannel+0x754>)
 8009a70:	e000      	b.n	8009a74 <HAL_ADC_ConfigChannel+0x708>
 8009a72:	4a14      	ldr	r2, [pc, #80]	; (8009ac4 <HAL_ADC_ConfigChannel+0x758>)
 8009a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f7ff f905 	bl	8008c8e <LL_ADC_SetCommonPathInternalCh>
 8009a84:	e00c      	b.n	8009aa0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a8a:	f043 0220 	orr.w	r2, r3, #32
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009a98:	e002      	b.n	8009aa0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009a9a:	bf00      	nop
 8009a9c:	e000      	b.n	8009aa0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009a9e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009aa8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3798      	adds	r7, #152	; 0x98
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	c7520000 	.word	0xc7520000
 8009ab8:	50000100 	.word	0x50000100
 8009abc:	50000500 	.word	0x50000500
 8009ac0:	50000300 	.word	0x50000300
 8009ac4:	50000700 	.word	0x50000700
 8009ac8:	cb840000 	.word	0xcb840000

08009acc <LL_ADC_IsEnabled>:
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d101      	bne.n	8009ae4 <LL_ADC_IsEnabled+0x18>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e000      	b.n	8009ae6 <LL_ADC_IsEnabled+0x1a>
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <LL_ADC_REG_IsConversionOngoing>:
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f003 0304 	and.w	r3, r3, #4
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d101      	bne.n	8009b0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e000      	b.n	8009b0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009b18:	b590      	push	{r4, r7, lr}
 8009b1a:	b0a1      	sub	sp, #132	; 0x84
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d101      	bne.n	8009b36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009b32:	2302      	movs	r3, #2
 8009b34:	e0e3      	b.n	8009cfe <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b46:	d102      	bne.n	8009b4e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8009b48:	4b6f      	ldr	r3, [pc, #444]	; (8009d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009b4a:	60bb      	str	r3, [r7, #8]
 8009b4c:	e009      	b.n	8009b62 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a6e      	ldr	r2, [pc, #440]	; (8009d0c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d102      	bne.n	8009b5e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009b58:	4b6d      	ldr	r3, [pc, #436]	; (8009d10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009b5a:	60bb      	str	r3, [r7, #8]
 8009b5c:	e001      	b.n	8009b62 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10b      	bne.n	8009b80 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b6c:	f043 0220 	orr.w	r2, r3, #32
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e0be      	b.n	8009cfe <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff ffb5 	bl	8009af2 <LL_ADC_REG_IsConversionOngoing>
 8009b88:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff ffaf 	bl	8009af2 <LL_ADC_REG_IsConversionOngoing>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f040 80a0 	bne.w	8009cdc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f040 809c 	bne.w	8009cdc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bac:	d004      	beq.n	8009bb8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a55      	ldr	r2, [pc, #340]	; (8009d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d101      	bne.n	8009bbc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009bb8:	4b56      	ldr	r3, [pc, #344]	; (8009d14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009bba:	e000      	b.n	8009bbe <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009bbc:	4b56      	ldr	r3, [pc, #344]	; (8009d18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009bbe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d04b      	beq.n	8009c60 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	6859      	ldr	r1, [r3, #4]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009bda:	035b      	lsls	r3, r3, #13
 8009bdc:	430b      	orrs	r3, r1
 8009bde:	431a      	orrs	r2, r3
 8009be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009be2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bec:	d004      	beq.n	8009bf8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a45      	ldr	r2, [pc, #276]	; (8009d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d10f      	bne.n	8009c18 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009bf8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009bfc:	f7ff ff66 	bl	8009acc <LL_ADC_IsEnabled>
 8009c00:	4604      	mov	r4, r0
 8009c02:	4841      	ldr	r0, [pc, #260]	; (8009d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009c04:	f7ff ff62 	bl	8009acc <LL_ADC_IsEnabled>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	4323      	orrs	r3, r4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bf0c      	ite	eq
 8009c10:	2301      	moveq	r3, #1
 8009c12:	2300      	movne	r3, #0
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	e012      	b.n	8009c3e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009c18:	483c      	ldr	r0, [pc, #240]	; (8009d0c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009c1a:	f7ff ff57 	bl	8009acc <LL_ADC_IsEnabled>
 8009c1e:	4604      	mov	r4, r0
 8009c20:	483b      	ldr	r0, [pc, #236]	; (8009d10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009c22:	f7ff ff53 	bl	8009acc <LL_ADC_IsEnabled>
 8009c26:	4603      	mov	r3, r0
 8009c28:	431c      	orrs	r4, r3
 8009c2a:	483c      	ldr	r0, [pc, #240]	; (8009d1c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009c2c:	f7ff ff4e 	bl	8009acc <LL_ADC_IsEnabled>
 8009c30:	4603      	mov	r3, r0
 8009c32:	4323      	orrs	r3, r4
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bf0c      	ite	eq
 8009c38:	2301      	moveq	r3, #1
 8009c3a:	2300      	movne	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d056      	beq.n	8009cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009c4a:	f023 030f 	bic.w	r3, r3, #15
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	6811      	ldr	r1, [r2, #0]
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	6892      	ldr	r2, [r2, #8]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009c5e:	e047      	b.n	8009cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c74:	d004      	beq.n	8009c80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a23      	ldr	r2, [pc, #140]	; (8009d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d10f      	bne.n	8009ca0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009c80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009c84:	f7ff ff22 	bl	8009acc <LL_ADC_IsEnabled>
 8009c88:	4604      	mov	r4, r0
 8009c8a:	481f      	ldr	r0, [pc, #124]	; (8009d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009c8c:	f7ff ff1e 	bl	8009acc <LL_ADC_IsEnabled>
 8009c90:	4603      	mov	r3, r0
 8009c92:	4323      	orrs	r3, r4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bf0c      	ite	eq
 8009c98:	2301      	moveq	r3, #1
 8009c9a:	2300      	movne	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	e012      	b.n	8009cc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009ca0:	481a      	ldr	r0, [pc, #104]	; (8009d0c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009ca2:	f7ff ff13 	bl	8009acc <LL_ADC_IsEnabled>
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	4819      	ldr	r0, [pc, #100]	; (8009d10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009caa:	f7ff ff0f 	bl	8009acc <LL_ADC_IsEnabled>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	431c      	orrs	r4, r3
 8009cb2:	481a      	ldr	r0, [pc, #104]	; (8009d1c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009cb4:	f7ff ff0a 	bl	8009acc <LL_ADC_IsEnabled>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	4323      	orrs	r3, r4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bf0c      	ite	eq
 8009cc0:	2301      	moveq	r3, #1
 8009cc2:	2300      	movne	r3, #0
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d012      	beq.n	8009cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009cd2:	f023 030f 	bic.w	r3, r3, #15
 8009cd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009cd8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009cda:	e009      	b.n	8009cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ce0:	f043 0220 	orr.w	r2, r3, #32
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009cee:	e000      	b.n	8009cf2 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009cf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009cfa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3784      	adds	r7, #132	; 0x84
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd90      	pop	{r4, r7, pc}
 8009d06:	bf00      	nop
 8009d08:	50000100 	.word	0x50000100
 8009d0c:	50000400 	.word	0x50000400
 8009d10:	50000500 	.word	0x50000500
 8009d14:	50000300 	.word	0x50000300
 8009d18:	50000700 	.word	0x50000700
 8009d1c:	50000600 	.word	0x50000600

08009d20 <LL_EXTI_EnableIT_0_31>:
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <LL_EXTI_EnableIT_0_31+0x20>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	4904      	ldr	r1, [pc, #16]	; (8009d40 <LL_EXTI_EnableIT_0_31+0x20>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	600b      	str	r3, [r1, #0]
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	40010400 	.word	0x40010400

08009d44 <LL_EXTI_EnableIT_32_63>:
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009d4c:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <LL_EXTI_EnableIT_32_63+0x20>)
 8009d4e:	6a1a      	ldr	r2, [r3, #32]
 8009d50:	4904      	ldr	r1, [pc, #16]	; (8009d64 <LL_EXTI_EnableIT_32_63+0x20>)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	620b      	str	r3, [r1, #32]
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	40010400 	.word	0x40010400

08009d68 <LL_EXTI_DisableIT_0_31>:
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009d70:	4b06      	ldr	r3, [pc, #24]	; (8009d8c <LL_EXTI_DisableIT_0_31+0x24>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	43db      	mvns	r3, r3
 8009d78:	4904      	ldr	r1, [pc, #16]	; (8009d8c <LL_EXTI_DisableIT_0_31+0x24>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	600b      	str	r3, [r1, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	40010400 	.word	0x40010400

08009d90 <LL_EXTI_DisableIT_32_63>:
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009d98:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <LL_EXTI_DisableIT_32_63+0x24>)
 8009d9a:	6a1a      	ldr	r2, [r3, #32]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	43db      	mvns	r3, r3
 8009da0:	4904      	ldr	r1, [pc, #16]	; (8009db4 <LL_EXTI_DisableIT_32_63+0x24>)
 8009da2:	4013      	ands	r3, r2
 8009da4:	620b      	str	r3, [r1, #32]
}
 8009da6:	bf00      	nop
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	40010400 	.word	0x40010400

08009db8 <LL_EXTI_EnableEvent_0_31>:
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009dc0:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	4904      	ldr	r1, [pc, #16]	; (8009dd8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	604b      	str	r3, [r1, #4]
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	40010400 	.word	0x40010400

08009ddc <LL_EXTI_EnableEvent_32_63>:
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009de4:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <LL_EXTI_EnableEvent_32_63+0x20>)
 8009de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009de8:	4904      	ldr	r1, [pc, #16]	; (8009dfc <LL_EXTI_EnableEvent_32_63+0x20>)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	40010400 	.word	0x40010400

08009e00 <LL_EXTI_DisableEvent_0_31>:
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009e08:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	43db      	mvns	r3, r3
 8009e10:	4904      	ldr	r1, [pc, #16]	; (8009e24 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009e12:	4013      	ands	r3, r2
 8009e14:	604b      	str	r3, [r1, #4]
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	40010400 	.word	0x40010400

08009e28 <LL_EXTI_DisableEvent_32_63>:
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009e30:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <LL_EXTI_DisableEvent_32_63+0x24>)
 8009e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	43db      	mvns	r3, r3
 8009e38:	4904      	ldr	r1, [pc, #16]	; (8009e4c <LL_EXTI_DisableEvent_32_63+0x24>)
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	40010400 	.word	0x40010400

08009e50 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	4904      	ldr	r1, [pc, #16]	; (8009e70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	608b      	str	r3, [r1, #8]
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	40010400 	.word	0x40010400

08009e74 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009e7c:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e80:	4904      	ldr	r1, [pc, #16]	; (8009e94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	40010400 	.word	0x40010400

08009e98 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009ea0:	4b06      	ldr	r3, [pc, #24]	; (8009ebc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	43db      	mvns	r3, r3
 8009ea8:	4904      	ldr	r1, [pc, #16]	; (8009ebc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009eaa:	4013      	ands	r3, r2
 8009eac:	608b      	str	r3, [r1, #8]
}
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40010400 	.word	0x40010400

08009ec0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009ec8:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	43db      	mvns	r3, r3
 8009ed0:	4904      	ldr	r1, [pc, #16]	; (8009ee4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009ed6:	bf00      	nop
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	40010400 	.word	0x40010400

08009ee8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009ef0:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009ef2:	68da      	ldr	r2, [r3, #12]
 8009ef4:	4904      	ldr	r1, [pc, #16]	; (8009f08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60cb      	str	r3, [r1, #12]
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	40010400 	.word	0x40010400

08009f0c <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009f14:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f18:	4904      	ldr	r1, [pc, #16]	; (8009f2c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	40010400 	.word	0x40010400

08009f30 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009f38:	4b06      	ldr	r3, [pc, #24]	; (8009f54 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	43db      	mvns	r3, r3
 8009f40:	4904      	ldr	r1, [pc, #16]	; (8009f54 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009f42:	4013      	ands	r3, r2
 8009f44:	60cb      	str	r3, [r1, #12]
}
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	40010400 	.word	0x40010400

08009f58 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009f60:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	43db      	mvns	r3, r3
 8009f68:	4904      	ldr	r1, [pc, #16]	; (8009f7c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009f6e:	bf00      	nop
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	40010400 	.word	0x40010400

08009f80 <LL_EXTI_ClearFlag_0_31>:
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009f88:	4a04      	ldr	r2, [pc, #16]	; (8009f9c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6153      	str	r3, [r2, #20]
}
 8009f8e:	bf00      	nop
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	40010400 	.word	0x40010400

08009fa0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009fa8:	4a04      	ldr	r2, [pc, #16]	; (8009fbc <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009fae:	bf00      	nop
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	40010400 	.word	0x40010400

08009fc0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	77fb      	strb	r3, [r7, #31]
 8009fda:	e180      	b.n	800a2de <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fea:	d102      	bne.n	8009ff2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	77fb      	strb	r3, [r7, #31]
 8009ff0:	e175      	b.n	800a2de <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	7f5b      	ldrb	r3, [r3, #29]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d108      	bne.n	800a00e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7fd f9d1 	bl	80073b0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a018:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800a034:	4313      	orrs	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	4b98      	ldr	r3, [pc, #608]	; (800a2a0 <HAL_COMP_Init+0x2e0>)
 800a040:	4013      	ands	r3, r2
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	6812      	ldr	r2, [r2, #0]
 800a046:	6979      	ldr	r1, [r7, #20]
 800a048:	430b      	orrs	r3, r1
 800a04a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d015      	beq.n	800a086 <HAL_COMP_Init+0xc6>
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d112      	bne.n	800a086 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a060:	4b90      	ldr	r3, [pc, #576]	; (800a2a4 <HAL_COMP_Init+0x2e4>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	099b      	lsrs	r3, r3, #6
 800a066:	4a90      	ldr	r2, [pc, #576]	; (800a2a8 <HAL_COMP_Init+0x2e8>)
 800a068:	fba2 2303 	umull	r2, r3, r2, r3
 800a06c:	099a      	lsrs	r2, r3, #6
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a078:	e002      	b.n	800a080 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1f9      	bne.n	800a07a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a88      	ldr	r2, [pc, #544]	; (800a2ac <HAL_COMP_Init+0x2ec>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d028      	beq.n	800a0e2 <HAL_COMP_Init+0x122>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a86      	ldr	r2, [pc, #536]	; (800a2b0 <HAL_COMP_Init+0x2f0>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d020      	beq.n	800a0dc <HAL_COMP_Init+0x11c>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a85      	ldr	r2, [pc, #532]	; (800a2b4 <HAL_COMP_Init+0x2f4>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d018      	beq.n	800a0d6 <HAL_COMP_Init+0x116>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a83      	ldr	r2, [pc, #524]	; (800a2b8 <HAL_COMP_Init+0x2f8>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d010      	beq.n	800a0d0 <HAL_COMP_Init+0x110>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a82      	ldr	r2, [pc, #520]	; (800a2bc <HAL_COMP_Init+0x2fc>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d008      	beq.n	800a0ca <HAL_COMP_Init+0x10a>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a80      	ldr	r2, [pc, #512]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d101      	bne.n	800a0c6 <HAL_COMP_Init+0x106>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e00f      	b.n	800a0e6 <HAL_COMP_Init+0x126>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e00d      	b.n	800a0e6 <HAL_COMP_Init+0x126>
 800a0ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0ce:	e00a      	b.n	800a0e6 <HAL_COMP_Init+0x126>
 800a0d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0d4:	e007      	b.n	800a0e6 <HAL_COMP_Init+0x126>
 800a0d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a0da:	e004      	b.n	800a0e6 <HAL_COMP_Init+0x126>
 800a0dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0e0:	e001      	b.n	800a0e6 <HAL_COMP_Init+0x126>
 800a0e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a0e6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	f003 0303 	and.w	r3, r3, #3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 80b6 	beq.w	800a262 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	f003 0310 	and.w	r3, r3, #16
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d011      	beq.n	800a126 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a6e      	ldr	r2, [pc, #440]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d004      	beq.n	800a116 <HAL_COMP_Init+0x156>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a6c      	ldr	r2, [pc, #432]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d103      	bne.n	800a11e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800a116:	6938      	ldr	r0, [r7, #16]
 800a118:	f7ff feac 	bl	8009e74 <LL_EXTI_EnableRisingTrig_32_63>
 800a11c:	e014      	b.n	800a148 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800a11e:	6938      	ldr	r0, [r7, #16]
 800a120:	f7ff fe96 	bl	8009e50 <LL_EXTI_EnableRisingTrig_0_31>
 800a124:	e010      	b.n	800a148 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a65      	ldr	r2, [pc, #404]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d004      	beq.n	800a13a <HAL_COMP_Init+0x17a>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a63      	ldr	r2, [pc, #396]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d103      	bne.n	800a142 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800a13a:	6938      	ldr	r0, [r7, #16]
 800a13c:	f7ff fec0 	bl	8009ec0 <LL_EXTI_DisableRisingTrig_32_63>
 800a140:	e002      	b.n	800a148 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800a142:	6938      	ldr	r0, [r7, #16]
 800a144:	f7ff fea8 	bl	8009e98 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	d011      	beq.n	800a178 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a59      	ldr	r2, [pc, #356]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d004      	beq.n	800a168 <HAL_COMP_Init+0x1a8>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a58      	ldr	r2, [pc, #352]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d103      	bne.n	800a170 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800a168:	6938      	ldr	r0, [r7, #16]
 800a16a:	f7ff fecf 	bl	8009f0c <LL_EXTI_EnableFallingTrig_32_63>
 800a16e:	e014      	b.n	800a19a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800a170:	6938      	ldr	r0, [r7, #16]
 800a172:	f7ff feb9 	bl	8009ee8 <LL_EXTI_EnableFallingTrig_0_31>
 800a176:	e010      	b.n	800a19a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a50      	ldr	r2, [pc, #320]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d004      	beq.n	800a18c <HAL_COMP_Init+0x1cc>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a4f      	ldr	r2, [pc, #316]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d103      	bne.n	800a194 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800a18c:	6938      	ldr	r0, [r7, #16]
 800a18e:	f7ff fee3 	bl	8009f58 <LL_EXTI_DisableFallingTrig_32_63>
 800a192:	e002      	b.n	800a19a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800a194:	6938      	ldr	r0, [r7, #16]
 800a196:	f7ff fecb 	bl	8009f30 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a48      	ldr	r2, [pc, #288]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d004      	beq.n	800a1ae <HAL_COMP_Init+0x1ee>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a46      	ldr	r2, [pc, #280]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d103      	bne.n	800a1b6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800a1ae:	6938      	ldr	r0, [r7, #16]
 800a1b0:	f7ff fef6 	bl	8009fa0 <LL_EXTI_ClearFlag_32_63>
 800a1b4:	e002      	b.n	800a1bc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800a1b6:	6938      	ldr	r0, [r7, #16]
 800a1b8:	f7ff fee2 	bl	8009f80 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f003 0302 	and.w	r3, r3, #2
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d011      	beq.n	800a1ec <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a3c      	ldr	r2, [pc, #240]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d004      	beq.n	800a1dc <HAL_COMP_Init+0x21c>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a3b      	ldr	r2, [pc, #236]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d103      	bne.n	800a1e4 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800a1dc:	6938      	ldr	r0, [r7, #16]
 800a1de:	f7ff fdfd 	bl	8009ddc <LL_EXTI_EnableEvent_32_63>
 800a1e2:	e014      	b.n	800a20e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800a1e4:	6938      	ldr	r0, [r7, #16]
 800a1e6:	f7ff fde7 	bl	8009db8 <LL_EXTI_EnableEvent_0_31>
 800a1ea:	e010      	b.n	800a20e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a33      	ldr	r2, [pc, #204]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d004      	beq.n	800a200 <HAL_COMP_Init+0x240>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a32      	ldr	r2, [pc, #200]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d103      	bne.n	800a208 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800a200:	6938      	ldr	r0, [r7, #16]
 800a202:	f7ff fe11 	bl	8009e28 <LL_EXTI_DisableEvent_32_63>
 800a206:	e002      	b.n	800a20e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800a208:	6938      	ldr	r0, [r7, #16]
 800a20a:	f7ff fdf9 	bl	8009e00 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d011      	beq.n	800a23e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a28      	ldr	r2, [pc, #160]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d004      	beq.n	800a22e <HAL_COMP_Init+0x26e>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a26      	ldr	r2, [pc, #152]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d103      	bne.n	800a236 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800a22e:	6938      	ldr	r0, [r7, #16]
 800a230:	f7ff fd88 	bl	8009d44 <LL_EXTI_EnableIT_32_63>
 800a234:	e04b      	b.n	800a2ce <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800a236:	6938      	ldr	r0, [r7, #16]
 800a238:	f7ff fd72 	bl	8009d20 <LL_EXTI_EnableIT_0_31>
 800a23c:	e047      	b.n	800a2ce <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a1f      	ldr	r2, [pc, #124]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d004      	beq.n	800a252 <HAL_COMP_Init+0x292>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a1d      	ldr	r2, [pc, #116]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d103      	bne.n	800a25a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800a252:	6938      	ldr	r0, [r7, #16]
 800a254:	f7ff fd9c 	bl	8009d90 <LL_EXTI_DisableIT_32_63>
 800a258:	e039      	b.n	800a2ce <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800a25a:	6938      	ldr	r0, [r7, #16]
 800a25c:	f7ff fd84 	bl	8009d68 <LL_EXTI_DisableIT_0_31>
 800a260:	e035      	b.n	800a2ce <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a16      	ldr	r2, [pc, #88]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d004      	beq.n	800a276 <HAL_COMP_Init+0x2b6>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a14      	ldr	r2, [pc, #80]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d103      	bne.n	800a27e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800a276:	6938      	ldr	r0, [r7, #16]
 800a278:	f7ff fdd6 	bl	8009e28 <LL_EXTI_DisableEvent_32_63>
 800a27c:	e002      	b.n	800a284 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800a27e:	6938      	ldr	r0, [r7, #16]
 800a280:	f7ff fdbe 	bl	8009e00 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a0d      	ldr	r2, [pc, #52]	; (800a2c0 <HAL_COMP_Init+0x300>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d004      	beq.n	800a298 <HAL_COMP_Init+0x2d8>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a0c      	ldr	r2, [pc, #48]	; (800a2c4 <HAL_COMP_Init+0x304>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d117      	bne.n	800a2c8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800a298:	6938      	ldr	r0, [r7, #16]
 800a29a:	f7ff fd79 	bl	8009d90 <LL_EXTI_DisableIT_32_63>
 800a29e:	e016      	b.n	800a2ce <HAL_COMP_Init+0x30e>
 800a2a0:	ff007e0f 	.word	0xff007e0f
 800a2a4:	20000ca8 	.word	0x20000ca8
 800a2a8:	053e2d63 	.word	0x053e2d63
 800a2ac:	40010200 	.word	0x40010200
 800a2b0:	40010204 	.word	0x40010204
 800a2b4:	40010208 	.word	0x40010208
 800a2b8:	4001020c 	.word	0x4001020c
 800a2bc:	40010210 	.word	0x40010210
 800a2c0:	40010214 	.word	0x40010214
 800a2c4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800a2c8:	6938      	ldr	r0, [r7, #16]
 800a2ca:	f7ff fd4d 	bl	8009d68 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	7f5b      	ldrb	r3, [r3, #29]
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800a2de:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3720      	adds	r7, #32
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <__NVIC_SetPriorityGrouping>:
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <__NVIC_SetPriorityGrouping+0x44>)
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a304:	4013      	ands	r3, r2
 800a306:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a31a:	4a04      	ldr	r2, [pc, #16]	; (800a32c <__NVIC_SetPriorityGrouping+0x44>)
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	60d3      	str	r3, [r2, #12]
}
 800a320:	bf00      	nop
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	e000ed00 	.word	0xe000ed00

0800a330 <__NVIC_GetPriorityGrouping>:
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a334:	4b04      	ldr	r3, [pc, #16]	; (800a348 <__NVIC_GetPriorityGrouping+0x18>)
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	0a1b      	lsrs	r3, r3, #8
 800a33a:	f003 0307 	and.w	r3, r3, #7
}
 800a33e:	4618      	mov	r0, r3
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	e000ed00 	.word	0xe000ed00

0800a34c <__NVIC_EnableIRQ>:
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	db0b      	blt.n	800a376 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	f003 021f 	and.w	r2, r3, #31
 800a364:	4907      	ldr	r1, [pc, #28]	; (800a384 <__NVIC_EnableIRQ+0x38>)
 800a366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a36a:	095b      	lsrs	r3, r3, #5
 800a36c:	2001      	movs	r0, #1
 800a36e:	fa00 f202 	lsl.w	r2, r0, r2
 800a372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	e000e100 	.word	0xe000e100

0800a388 <__NVIC_SetPriority>:
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	6039      	str	r1, [r7, #0]
 800a392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	db0a      	blt.n	800a3b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	490c      	ldr	r1, [pc, #48]	; (800a3d4 <__NVIC_SetPriority+0x4c>)
 800a3a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3a6:	0112      	lsls	r2, r2, #4
 800a3a8:	b2d2      	uxtb	r2, r2
 800a3aa:	440b      	add	r3, r1
 800a3ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a3b0:	e00a      	b.n	800a3c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	4908      	ldr	r1, [pc, #32]	; (800a3d8 <__NVIC_SetPriority+0x50>)
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	f003 030f 	and.w	r3, r3, #15
 800a3be:	3b04      	subs	r3, #4
 800a3c0:	0112      	lsls	r2, r2, #4
 800a3c2:	b2d2      	uxtb	r2, r2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	761a      	strb	r2, [r3, #24]
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	e000e100 	.word	0xe000e100
 800a3d8:	e000ed00 	.word	0xe000ed00

0800a3dc <NVIC_EncodePriority>:
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b089      	sub	sp, #36	; 0x24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f003 0307 	and.w	r3, r3, #7
 800a3ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	f1c3 0307 	rsb	r3, r3, #7
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	bf28      	it	cs
 800a3fa:	2304      	movcs	r3, #4
 800a3fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	3304      	adds	r3, #4
 800a402:	2b06      	cmp	r3, #6
 800a404:	d902      	bls.n	800a40c <NVIC_EncodePriority+0x30>
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	3b03      	subs	r3, #3
 800a40a:	e000      	b.n	800a40e <NVIC_EncodePriority+0x32>
 800a40c:	2300      	movs	r3, #0
 800a40e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	fa02 f303 	lsl.w	r3, r2, r3
 800a41a:	43da      	mvns	r2, r3
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	401a      	ands	r2, r3
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	fa01 f303 	lsl.w	r3, r1, r3
 800a42e:	43d9      	mvns	r1, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a434:	4313      	orrs	r3, r2
}
 800a436:	4618      	mov	r0, r3
 800a438:	3724      	adds	r7, #36	; 0x24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
	...

0800a444 <SysTick_Config>:
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3b01      	subs	r3, #1
 800a450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a454:	d301      	bcc.n	800a45a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800a456:	2301      	movs	r3, #1
 800a458:	e00f      	b.n	800a47a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a45a:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <SysTick_Config+0x40>)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3b01      	subs	r3, #1
 800a460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a462:	210f      	movs	r1, #15
 800a464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a468:	f7ff ff8e 	bl	800a388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a46c:	4b05      	ldr	r3, [pc, #20]	; (800a484 <SysTick_Config+0x40>)
 800a46e:	2200      	movs	r2, #0
 800a470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a472:	4b04      	ldr	r3, [pc, #16]	; (800a484 <SysTick_Config+0x40>)
 800a474:	2207      	movs	r2, #7
 800a476:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	e000e010 	.word	0xe000e010

0800a488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff ff29 	bl	800a2e8 <__NVIC_SetPriorityGrouping>
}
 800a496:	bf00      	nop
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b086      	sub	sp, #24
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	607a      	str	r2, [r7, #4]
 800a4aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a4ac:	f7ff ff40 	bl	800a330 <__NVIC_GetPriorityGrouping>
 800a4b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	68b9      	ldr	r1, [r7, #8]
 800a4b6:	6978      	ldr	r0, [r7, #20]
 800a4b8:	f7ff ff90 	bl	800a3dc <NVIC_EncodePriority>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff ff5f 	bl	800a388 <__NVIC_SetPriority>
}
 800a4ca:	bf00      	nop
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	4603      	mov	r3, r0
 800a4da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a4dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff ff33 	bl	800a34c <__NVIC_EnableIRQ>
}
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff ffa4 	bl	800a444 <SysTick_Config>
 800a4fc:	4603      	mov	r3, r0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e014      	b.n	800a542 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	791b      	ldrb	r3, [r3, #4]
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d105      	bne.n	800a52e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7fc fff7 	bl	800751c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2202      	movs	r2, #2
 800a532:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	795b      	ldrb	r3, [r3, #5]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d101      	bne.n	800a560 <HAL_DAC_Start+0x16>
 800a55c:	2302      	movs	r3, #2
 800a55e:	e043      	b.n	800a5e8 <HAL_DAC_Start+0x9e>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2202      	movs	r2, #2
 800a56a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6819      	ldr	r1, [r3, #0]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	f003 0310 	and.w	r3, r3, #16
 800a578:	2201      	movs	r2, #1
 800a57a:	409a      	lsls	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800a584:	2001      	movs	r0, #1
 800a586:	f7fe fb4d 	bl	8008c24 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10f      	bne.n	800a5b0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d11d      	bne.n	800a5da <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f042 0201 	orr.w	r2, r2, #1
 800a5ac:	605a      	str	r2, [r3, #4]
 800a5ae:	e014      	b.n	800a5da <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	f003 0310 	and.w	r3, r3, #16
 800a5c0:	2102      	movs	r1, #2
 800a5c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d107      	bne.n	800a5da <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f042 0202 	orr.w	r2, r2, #2
 800a5d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
 800a5fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	795b      	ldrb	r3, [r3, #5]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d101      	bne.n	800a60e <HAL_DAC_Start_DMA+0x1e>
 800a60a:	2302      	movs	r3, #2
 800a60c:	e0a1      	b.n	800a752 <HAL_DAC_Start_DMA+0x162>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2201      	movs	r2, #1
 800a612:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2202      	movs	r2, #2
 800a618:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d12a      	bne.n	800a676 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	4a4d      	ldr	r2, [pc, #308]	; (800a75c <HAL_DAC_Start_DMA+0x16c>)
 800a626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	4a4c      	ldr	r2, [pc, #304]	; (800a760 <HAL_DAC_Start_DMA+0x170>)
 800a62e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	4a4b      	ldr	r2, [pc, #300]	; (800a764 <HAL_DAC_Start_DMA+0x174>)
 800a636:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a646:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d009      	beq.n	800a662 <HAL_DAC_Start_DMA+0x72>
 800a64e:	2b08      	cmp	r3, #8
 800a650:	d00c      	beq.n	800a66c <HAL_DAC_Start_DMA+0x7c>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d000      	beq.n	800a658 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800a656:	e039      	b.n	800a6cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3308      	adds	r3, #8
 800a65e:	613b      	str	r3, [r7, #16]
        break;
 800a660:	e034      	b.n	800a6cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	330c      	adds	r3, #12
 800a668:	613b      	str	r3, [r7, #16]
        break;
 800a66a:	e02f      	b.n	800a6cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3310      	adds	r3, #16
 800a672:	613b      	str	r3, [r7, #16]
        break;
 800a674:	e02a      	b.n	800a6cc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	4a3b      	ldr	r2, [pc, #236]	; (800a768 <HAL_DAC_Start_DMA+0x178>)
 800a67c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	4a3a      	ldr	r2, [pc, #232]	; (800a76c <HAL_DAC_Start_DMA+0x17c>)
 800a684:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	4a39      	ldr	r2, [pc, #228]	; (800a770 <HAL_DAC_Start_DMA+0x180>)
 800a68c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a69c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d009      	beq.n	800a6b8 <HAL_DAC_Start_DMA+0xc8>
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d00c      	beq.n	800a6c2 <HAL_DAC_Start_DMA+0xd2>
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d000      	beq.n	800a6ae <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800a6ac:	e00e      	b.n	800a6cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3314      	adds	r3, #20
 800a6b4:	613b      	str	r3, [r7, #16]
        break;
 800a6b6:	e009      	b.n	800a6cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3318      	adds	r3, #24
 800a6be:	613b      	str	r3, [r7, #16]
        break;
 800a6c0:	e004      	b.n	800a6cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	331c      	adds	r3, #28
 800a6c8:	613b      	str	r3, [r7, #16]
        break;
 800a6ca:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d111      	bne.n	800a6f6 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6898      	ldr	r0, [r3, #8]
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	f000 fbd2 	bl	800ae94 <HAL_DMA_Start_IT>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	75fb      	strb	r3, [r7, #23]
 800a6f4:	e010      	b.n	800a718 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a704:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	68d8      	ldr	r0, [r3, #12]
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	f000 fbc0 	bl	800ae94 <HAL_DMA_Start_IT>
 800a714:	4603      	mov	r3, r0
 800a716:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10f      	bne.n	800a744 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6819      	ldr	r1, [r3, #0]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	f003 0310 	and.w	r3, r3, #16
 800a730:	2201      	movs	r2, #1
 800a732:	409a      	lsls	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a73c:	2001      	movs	r0, #1
 800a73e:	f7fe fa71 	bl	8008c24 <HAL_Delay>
 800a742:	e005      	b.n	800a750 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	f043 0204 	orr.w	r2, r3, #4
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a750:	7dfb      	ldrb	r3, [r7, #23]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	0800ac31 	.word	0x0800ac31
 800a760:	0800ac53 	.word	0x0800ac53
 800a764:	0800ac6f 	.word	0x0800ac6f
 800a768:	0800acd9 	.word	0x0800acd9
 800a76c:	0800acfb 	.word	0x0800acfb
 800a770:	0800ad17 	.word	0x0800ad17

0800a774 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	f003 0310 	and.w	r3, r3, #16
 800a78a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a78e:	fa02 f303 	lsl.w	r3, r2, r3
 800a792:	43da      	mvns	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	400a      	ands	r2, r1
 800a79a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6819      	ldr	r1, [r3, #0]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	f003 0310 	and.w	r3, r3, #16
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ae:	43da      	mvns	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	400a      	ands	r2, r1
 800a7b6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	f7fe fa33 	bl	8008c24 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10f      	bne.n	800a7e4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 fbde 	bl	800af8a <HAL_DMA_Abort>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e00e      	b.n	800a802 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fbce 	bl	800af8a <HAL_DMA_Abort>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a800:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d003      	beq.n	800a810 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2204      	movs	r2, #4
 800a80c:	711a      	strb	r2, [r3, #4]
 800a80e:	e002      	b.n	800a816 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d105      	bne.n	800a850 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4413      	add	r3, r2
 800a84a:	3308      	adds	r3, #8
 800a84c:	617b      	str	r3, [r7, #20]
 800a84e:	e004      	b.n	800a85a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4413      	add	r3, r2
 800a856:	3314      	adds	r3, #20
 800a858:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	461a      	mov	r2, r3
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	371c      	adds	r7, #28
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d103      	bne.n	800a8c4 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c2:	e002      	b.n	800a8ca <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
	...

0800a8d8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08a      	sub	sp, #40	; 0x28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	795b      	ldrb	r3, [r3, #5]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d101      	bne.n	800a8f4 <HAL_DAC_ConfigChannel+0x1c>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e194      	b.n	800ac1e <HAL_DAC_ConfigChannel+0x346>
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	2b04      	cmp	r3, #4
 800a906:	d174      	bne.n	800a9f2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d137      	bne.n	800a97e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a90e:	f7fe f97d 	bl	8008c0c <HAL_GetTick>
 800a912:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a914:	e011      	b.n	800a93a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a916:	f7fe f979 	bl	8008c0c <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	2b01      	cmp	r3, #1
 800a922:	d90a      	bls.n	800a93a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	f043 0208 	orr.w	r2, r3, #8
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2203      	movs	r2, #3
 800a934:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	e171      	b.n	800ac1e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e6      	bne.n	800a916 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a948:	2001      	movs	r0, #1
 800a94a:	f7fe f96b 	bl	8008c24 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a956:	641a      	str	r2, [r3, #64]	; 0x40
 800a958:	e01e      	b.n	800a998 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a95a:	f7fe f957 	bl	8008c0c <HAL_GetTick>
 800a95e:	4602      	mov	r2, r0
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	2b01      	cmp	r3, #1
 800a966:	d90a      	bls.n	800a97e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	f043 0208 	orr.w	r2, r3, #8
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2203      	movs	r2, #3
 800a978:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e14f      	b.n	800ac1e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a984:	2b00      	cmp	r3, #0
 800a986:	dbe8      	blt.n	800a95a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a988:	2001      	movs	r0, #1
 800a98a:	f7fe f94b 	bl	8008c24 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a996:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f003 0310 	and.w	r3, r3, #16
 800a9a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a9a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ac:	43db      	mvns	r3, r3
 800a9ae:	ea02 0103 	and.w	r1, r2, r3
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f003 0310 	and.w	r3, r3, #16
 800a9bc:	409a      	lsls	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f003 0310 	and.w	r3, r3, #16
 800a9d2:	21ff      	movs	r1, #255	; 0xff
 800a9d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d8:	43db      	mvns	r3, r3
 800a9da:	ea02 0103 	and.w	r1, r2, r3
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f003 0310 	and.w	r3, r3, #16
 800a9e8:	409a      	lsls	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d11d      	bne.n	800aa36 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f003 0310 	and.w	r3, r3, #16
 800aa08:	221f      	movs	r2, #31
 800aa0a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa0e:	43db      	mvns	r3, r3
 800aa10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa12:	4013      	ands	r3, r2
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f003 0310 	and.w	r3, r3, #16
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	fa02 f303 	lsl.w	r3, r2, r3
 800aa28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa34:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f003 0310 	and.w	r3, r3, #16
 800aa44:	2207      	movs	r2, #7
 800aa46:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4a:	43db      	mvns	r3, r3
 800aa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4e:	4013      	ands	r3, r2
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	623b      	str	r3, [r7, #32]
 800aa62:	e011      	b.n	800aa88 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800aa70:	2301      	movs	r3, #1
 800aa72:	623b      	str	r3, [r7, #32]
 800aa74:	e008      	b.n	800aa88 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d102      	bne.n	800aa84 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	623b      	str	r3, [r7, #32]
 800aa82:	e001      	b.n	800aa88 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800aa84:	2300      	movs	r3, #0
 800aa86:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	689a      	ldr	r2, [r3, #8]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	6a3a      	ldr	r2, [r7, #32]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f003 0310 	and.w	r3, r3, #16
 800aa9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aaa2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa6:	43db      	mvns	r3, r3
 800aaa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaaa:	4013      	ands	r3, r2
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	791b      	ldrb	r3, [r3, #4]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d102      	bne.n	800aabc <HAL_DAC_ConfigChannel+0x1e4>
 800aab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaba:	e000      	b.n	800aabe <HAL_DAC_ConfigChannel+0x1e6>
 800aabc:	2300      	movs	r3, #0
 800aabe:	69ba      	ldr	r2, [r7, #24]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f003 0310 	and.w	r3, r3, #16
 800aaca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aace:	fa02 f303 	lsl.w	r3, r2, r3
 800aad2:	43db      	mvns	r3, r3
 800aad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad6:	4013      	ands	r3, r2
 800aad8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	795b      	ldrb	r3, [r3, #5]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d102      	bne.n	800aae8 <HAL_DAC_ConfigChannel+0x210>
 800aae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aae6:	e000      	b.n	800aaea <HAL_DAC_ConfigChannel+0x212>
 800aae8:	2300      	movs	r3, #0
 800aaea:	69ba      	ldr	r2, [r7, #24]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d114      	bne.n	800ab2a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800ab00:	f001 fae0 	bl	800c0c4 <HAL_RCC_GetHCLKFreq>
 800ab04:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	4a47      	ldr	r2, [pc, #284]	; (800ac28 <HAL_DAC_ConfigChannel+0x350>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d904      	bls.n	800ab18 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab14:	627b      	str	r3, [r7, #36]	; 0x24
 800ab16:	e00d      	b.n	800ab34 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	4a44      	ldr	r2, [pc, #272]	; (800ac2c <HAL_DAC_ConfigChannel+0x354>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d909      	bls.n	800ab34 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab26:	627b      	str	r3, [r7, #36]	; 0x24
 800ab28:	e004      	b.n	800ab34 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab30:	4313      	orrs	r3, r2
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f003 0310 	and.w	r3, r3, #16
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab42:	4313      	orrs	r3, r2
 800ab44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6819      	ldr	r1, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f003 0310 	and.w	r3, r3, #16
 800ab5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab62:	43da      	mvns	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	400a      	ands	r2, r1
 800ab6a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f003 0310 	and.w	r3, r3, #16
 800ab7a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800ab7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab82:	43db      	mvns	r3, r3
 800ab84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab86:	4013      	ands	r3, r2
 800ab88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f003 0310 	and.w	r3, r3, #16
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6819      	ldr	r1, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f003 0310 	and.w	r3, r3, #16
 800abb6:	22c0      	movs	r2, #192	; 0xc0
 800abb8:	fa02 f303 	lsl.w	r3, r2, r3
 800abbc:	43da      	mvns	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	400a      	ands	r2, r1
 800abc4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	089b      	lsrs	r3, r3, #2
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	089b      	lsrs	r3, r3, #2
 800abd8:	021b      	lsls	r3, r3, #8
 800abda:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800abde:	69ba      	ldr	r2, [r7, #24]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f003 0310 	and.w	r3, r3, #16
 800abf0:	f640 710f 	movw	r1, #3855	; 0xf0f
 800abf4:	fa01 f303 	lsl.w	r3, r1, r3
 800abf8:	43db      	mvns	r3, r3
 800abfa:	ea02 0103 	and.w	r1, r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f003 0310 	and.w	r3, r3, #16
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	409a      	lsls	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2201      	movs	r2, #1
 800ac14:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3728      	adds	r7, #40	; 0x28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	09896800 	.word	0x09896800
 800ac2c:	04c4b400 	.word	0x04c4b400

0800ac30 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7ff fe16 	bl	800a870 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	711a      	strb	r2, [r3, #4]
}
 800ac4a:	bf00      	nop
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f7ff fe0f 	bl	800a884 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800ac66:	bf00      	nop
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	f043 0204 	orr.w	r2, r3, #4
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f7ff fe05 	bl	800a898 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	711a      	strb	r2, [r3, #4]
}
 800ac94:	bf00      	nop
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7ff ffd8 	bl	800ac9c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2201      	movs	r2, #1
 800acf0:	711a      	strb	r2, [r3, #4]
}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad06:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f7ff ffd1 	bl	800acb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800ad0e:	bf00      	nop
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	f043 0204 	orr.w	r2, r3, #4
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f7ff ffc7 	bl	800acc4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	711a      	strb	r2, [r3, #4]
}
 800ad3c:	bf00      	nop
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e08d      	b.n	800ae72 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4b47      	ldr	r3, [pc, #284]	; (800ae7c <HAL_DMA_Init+0x138>)
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d80f      	bhi.n	800ad82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	4b45      	ldr	r3, [pc, #276]	; (800ae80 <HAL_DMA_Init+0x13c>)
 800ad6a:	4413      	add	r3, r2
 800ad6c:	4a45      	ldr	r2, [pc, #276]	; (800ae84 <HAL_DMA_Init+0x140>)
 800ad6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad72:	091b      	lsrs	r3, r3, #4
 800ad74:	009a      	lsls	r2, r3, #2
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a42      	ldr	r2, [pc, #264]	; (800ae88 <HAL_DMA_Init+0x144>)
 800ad7e:	641a      	str	r2, [r3, #64]	; 0x40
 800ad80:	e00e      	b.n	800ada0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	461a      	mov	r2, r3
 800ad88:	4b40      	ldr	r3, [pc, #256]	; (800ae8c <HAL_DMA_Init+0x148>)
 800ad8a:	4413      	add	r3, r2
 800ad8c:	4a3d      	ldr	r2, [pc, #244]	; (800ae84 <HAL_DMA_Init+0x140>)
 800ad8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad92:	091b      	lsrs	r3, r3, #4
 800ad94:	009a      	lsls	r2, r3, #2
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a3c      	ldr	r2, [pc, #240]	; (800ae90 <HAL_DMA_Init+0x14c>)
 800ad9e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2202      	movs	r2, #2
 800ada4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800adb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800adc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800add0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800addc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa10 	bl	800b218 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae00:	d102      	bne.n	800ae08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae10:	b2d2      	uxtb	r2, r2
 800ae12:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ae1c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d010      	beq.n	800ae48 <HAL_DMA_Init+0x104>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	2b04      	cmp	r3, #4
 800ae2c:	d80c      	bhi.n	800ae48 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fa30 	bl	800b294 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ae44:	605a      	str	r2, [r3, #4]
 800ae46:	e008      	b.n	800ae5a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	40020407 	.word	0x40020407
 800ae80:	bffdfff8 	.word	0xbffdfff8
 800ae84:	cccccccd 	.word	0xcccccccd
 800ae88:	40020000 	.word	0x40020000
 800ae8c:	bffdfbf8 	.word	0xbffdfbf8
 800ae90:	40020400 	.word	0x40020400

0800ae94 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_DMA_Start_IT+0x20>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e066      	b.n	800af82 <HAL_DMA_Start_IT+0xee>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d155      	bne.n	800af74 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2202      	movs	r2, #2
 800aecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f022 0201 	bic.w	r2, r2, #1
 800aee4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	68b9      	ldr	r1, [r7, #8]
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 f954 	bl	800b19a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d008      	beq.n	800af0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f042 020e 	orr.w	r2, r2, #14
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	e00f      	b.n	800af2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f022 0204 	bic.w	r2, r2, #4
 800af1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f042 020a 	orr.w	r2, r2, #10
 800af2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d007      	beq.n	800af4a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af48:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d007      	beq.n	800af62 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f042 0201 	orr.w	r2, r2, #1
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	e005      	b.n	800af80 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800af7c:	2302      	movs	r3, #2
 800af7e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b085      	sub	sp, #20
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d005      	beq.n	800afae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2204      	movs	r2, #4
 800afa6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	73fb      	strb	r3, [r7, #15]
 800afac:	e037      	b.n	800b01e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f022 020e 	bic.w	r2, r2, #14
 800afbc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afcc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f022 0201 	bic.w	r2, r2, #1
 800afdc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe2:	f003 021f 	and.w	r2, r3, #31
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afea:	2101      	movs	r1, #1
 800afec:	fa01 f202 	lsl.w	r2, r1, r2
 800aff0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800affa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00c      	beq.n	800b01e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b00e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b012:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b01c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b058:	f003 031f 	and.w	r3, r3, #31
 800b05c:	2204      	movs	r2, #4
 800b05e:	409a      	lsls	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4013      	ands	r3, r2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d026      	beq.n	800b0b6 <HAL_DMA_IRQHandler+0x7a>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f003 0304 	and.w	r3, r3, #4
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d021      	beq.n	800b0b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0320 	and.w	r3, r3, #32
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d107      	bne.n	800b090 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f022 0204 	bic.w	r2, r2, #4
 800b08e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b094:	f003 021f 	and.w	r2, r3, #31
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09c:	2104      	movs	r1, #4
 800b09e:	fa01 f202 	lsl.w	r2, r1, r2
 800b0a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d071      	beq.n	800b190 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b0b4:	e06c      	b.n	800b190 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ba:	f003 031f 	and.w	r3, r3, #31
 800b0be:	2202      	movs	r2, #2
 800b0c0:	409a      	lsls	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d02e      	beq.n	800b128 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d029      	beq.n	800b128 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0320 	and.w	r3, r3, #32
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10b      	bne.n	800b0fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 020a 	bic.w	r2, r2, #10
 800b0f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fe:	f003 021f 	and.w	r2, r3, #31
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	2102      	movs	r1, #2
 800b108:	fa01 f202 	lsl.w	r2, r1, r2
 800b10c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d038      	beq.n	800b190 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b126:	e033      	b.n	800b190 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b12c:	f003 031f 	and.w	r3, r3, #31
 800b130:	2208      	movs	r2, #8
 800b132:	409a      	lsls	r2, r3
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	4013      	ands	r3, r2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d02a      	beq.n	800b192 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f003 0308 	and.w	r3, r3, #8
 800b142:	2b00      	cmp	r3, #0
 800b144:	d025      	beq.n	800b192 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f022 020e 	bic.w	r2, r2, #14
 800b154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b15a:	f003 021f 	and.w	r2, r3, #31
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	2101      	movs	r1, #1
 800b164:	fa01 f202 	lsl.w	r2, r1, r2
 800b168:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b184:	2b00      	cmp	r3, #0
 800b186:	d004      	beq.n	800b192 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b190:	bf00      	nop
 800b192:	bf00      	nop
}
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b19a:	b480      	push	{r7}
 800b19c:	b085      	sub	sp, #20
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	60f8      	str	r0, [r7, #12]
 800b1a2:	60b9      	str	r1, [r7, #8]
 800b1a4:	607a      	str	r2, [r7, #4]
 800b1a6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b1b0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d004      	beq.n	800b1c4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b1c2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c8:	f003 021f 	and.w	r2, r3, #31
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	fa01 f202 	lsl.w	r2, r1, r2
 800b1d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	2b10      	cmp	r3, #16
 800b1e6:	d108      	bne.n	800b1fa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b1f8:	e007      	b.n	800b20a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	60da      	str	r2, [r3, #12]
}
 800b20a:	bf00      	nop
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
	...

0800b218 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b218:	b480      	push	{r7}
 800b21a:	b087      	sub	sp, #28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	461a      	mov	r2, r3
 800b226:	4b16      	ldr	r3, [pc, #88]	; (800b280 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b228:	429a      	cmp	r2, r3
 800b22a:	d802      	bhi.n	800b232 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b22c:	4b15      	ldr	r3, [pc, #84]	; (800b284 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b22e:	617b      	str	r3, [r7, #20]
 800b230:	e001      	b.n	800b236 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b232:	4b15      	ldr	r3, [pc, #84]	; (800b288 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b234:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	3b08      	subs	r3, #8
 800b242:	4a12      	ldr	r2, [pc, #72]	; (800b28c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b244:	fba2 2303 	umull	r2, r3, r2, r3
 800b248:	091b      	lsrs	r3, r3, #4
 800b24a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b250:	089b      	lsrs	r3, r3, #2
 800b252:	009a      	lsls	r2, r3, #2
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	4413      	add	r3, r2
 800b258:	461a      	mov	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a0b      	ldr	r2, [pc, #44]	; (800b290 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b262:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f003 031f 	and.w	r3, r3, #31
 800b26a:	2201      	movs	r2, #1
 800b26c:	409a      	lsls	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b272:	bf00      	nop
 800b274:	371c      	adds	r7, #28
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	40020407 	.word	0x40020407
 800b284:	40020800 	.word	0x40020800
 800b288:	40020820 	.word	0x40020820
 800b28c:	cccccccd 	.word	0xcccccccd
 800b290:	40020880 	.word	0x40020880

0800b294 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4b0b      	ldr	r3, [pc, #44]	; (800b2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a08      	ldr	r2, [pc, #32]	; (800b2d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b2b6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	f003 031f 	and.w	r3, r3, #31
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	409a      	lsls	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b2c8:	bf00      	nop
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	1000823f 	.word	0x1000823f
 800b2d8:	40020940 	.word	0x40020940

0800b2dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b2ea:	e15a      	b.n	800b5a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 814c 	beq.w	800b59c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d00b      	beq.n	800b324 <HAL_GPIO_Init+0x48>
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	2b02      	cmp	r3, #2
 800b312:	d007      	beq.n	800b324 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b318:	2b11      	cmp	r3, #17
 800b31a:	d003      	beq.n	800b324 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	2b12      	cmp	r3, #18
 800b322:	d130      	bne.n	800b386 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	2203      	movs	r2, #3
 800b330:	fa02 f303 	lsl.w	r3, r2, r3
 800b334:	43db      	mvns	r3, r3
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	4013      	ands	r3, r2
 800b33a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	68da      	ldr	r2, [r3, #12]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	fa02 f303 	lsl.w	r3, r2, r3
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b35a:	2201      	movs	r2, #1
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	fa02 f303 	lsl.w	r3, r2, r3
 800b362:	43db      	mvns	r3, r3
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	4013      	ands	r3, r2
 800b368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	091b      	lsrs	r3, r3, #4
 800b370:	f003 0201 	and.w	r2, r3, #1
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	fa02 f303 	lsl.w	r3, r2, r3
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	2203      	movs	r2, #3
 800b392:	fa02 f303 	lsl.w	r3, r2, r3
 800b396:	43db      	mvns	r3, r3
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	4013      	ands	r3, r2
 800b39c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	689a      	ldr	r2, [r3, #8]
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	005b      	lsls	r3, r3, #1
 800b3a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d003      	beq.n	800b3c6 <HAL_GPIO_Init+0xea>
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	2b12      	cmp	r3, #18
 800b3c4:	d123      	bne.n	800b40e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	08da      	lsrs	r2, r3, #3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3208      	adds	r2, #8
 800b3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	f003 0307 	and.w	r3, r3, #7
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	220f      	movs	r2, #15
 800b3de:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e2:	43db      	mvns	r3, r3
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	691a      	ldr	r2, [r3, #16]
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f003 0307 	and.w	r3, r3, #7
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	08da      	lsrs	r2, r3, #3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3208      	adds	r2, #8
 800b408:	6939      	ldr	r1, [r7, #16]
 800b40a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	2203      	movs	r2, #3
 800b41a:	fa02 f303 	lsl.w	r3, r2, r3
 800b41e:	43db      	mvns	r3, r3
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	4013      	ands	r3, r2
 800b424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f003 0203 	and.w	r2, r3, #3
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	fa02 f303 	lsl.w	r3, r2, r3
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	4313      	orrs	r3, r2
 800b43a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	693a      	ldr	r2, [r7, #16]
 800b440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 80a6 	beq.w	800b59c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b450:	4b5b      	ldr	r3, [pc, #364]	; (800b5c0 <HAL_GPIO_Init+0x2e4>)
 800b452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b454:	4a5a      	ldr	r2, [pc, #360]	; (800b5c0 <HAL_GPIO_Init+0x2e4>)
 800b456:	f043 0301 	orr.w	r3, r3, #1
 800b45a:	6613      	str	r3, [r2, #96]	; 0x60
 800b45c:	4b58      	ldr	r3, [pc, #352]	; (800b5c0 <HAL_GPIO_Init+0x2e4>)
 800b45e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	60bb      	str	r3, [r7, #8]
 800b466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b468:	4a56      	ldr	r2, [pc, #344]	; (800b5c4 <HAL_GPIO_Init+0x2e8>)
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	089b      	lsrs	r3, r3, #2
 800b46e:	3302      	adds	r3, #2
 800b470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f003 0303 	and.w	r3, r3, #3
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	220f      	movs	r2, #15
 800b480:	fa02 f303 	lsl.w	r3, r2, r3
 800b484:	43db      	mvns	r3, r3
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	4013      	ands	r3, r2
 800b48a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b492:	d01f      	beq.n	800b4d4 <HAL_GPIO_Init+0x1f8>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a4c      	ldr	r2, [pc, #304]	; (800b5c8 <HAL_GPIO_Init+0x2ec>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d019      	beq.n	800b4d0 <HAL_GPIO_Init+0x1f4>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a4b      	ldr	r2, [pc, #300]	; (800b5cc <HAL_GPIO_Init+0x2f0>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d013      	beq.n	800b4cc <HAL_GPIO_Init+0x1f0>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a4a      	ldr	r2, [pc, #296]	; (800b5d0 <HAL_GPIO_Init+0x2f4>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d00d      	beq.n	800b4c8 <HAL_GPIO_Init+0x1ec>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a49      	ldr	r2, [pc, #292]	; (800b5d4 <HAL_GPIO_Init+0x2f8>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d007      	beq.n	800b4c4 <HAL_GPIO_Init+0x1e8>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a48      	ldr	r2, [pc, #288]	; (800b5d8 <HAL_GPIO_Init+0x2fc>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d101      	bne.n	800b4c0 <HAL_GPIO_Init+0x1e4>
 800b4bc:	2305      	movs	r3, #5
 800b4be:	e00a      	b.n	800b4d6 <HAL_GPIO_Init+0x1fa>
 800b4c0:	2306      	movs	r3, #6
 800b4c2:	e008      	b.n	800b4d6 <HAL_GPIO_Init+0x1fa>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	e006      	b.n	800b4d6 <HAL_GPIO_Init+0x1fa>
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e004      	b.n	800b4d6 <HAL_GPIO_Init+0x1fa>
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	e002      	b.n	800b4d6 <HAL_GPIO_Init+0x1fa>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e000      	b.n	800b4d6 <HAL_GPIO_Init+0x1fa>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	f002 0203 	and.w	r2, r2, #3
 800b4dc:	0092      	lsls	r2, r2, #2
 800b4de:	4093      	lsls	r3, r2
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b4e6:	4937      	ldr	r1, [pc, #220]	; (800b5c4 <HAL_GPIO_Init+0x2e8>)
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	089b      	lsrs	r3, r3, #2
 800b4ec:	3302      	adds	r3, #2
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b4f4:	4b39      	ldr	r3, [pc, #228]	; (800b5dc <HAL_GPIO_Init+0x300>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	43db      	mvns	r3, r3
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	4013      	ands	r3, r2
 800b502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d003      	beq.n	800b518 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4313      	orrs	r3, r2
 800b516:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b518:	4a30      	ldr	r2, [pc, #192]	; (800b5dc <HAL_GPIO_Init+0x300>)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800b51e:	4b2f      	ldr	r3, [pc, #188]	; (800b5dc <HAL_GPIO_Init+0x300>)
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	43db      	mvns	r3, r3
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	4013      	ands	r3, r2
 800b52c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b53a:	693a      	ldr	r2, [r7, #16]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4313      	orrs	r3, r2
 800b540:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b542:	4a26      	ldr	r2, [pc, #152]	; (800b5dc <HAL_GPIO_Init+0x300>)
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b548:	4b24      	ldr	r3, [pc, #144]	; (800b5dc <HAL_GPIO_Init+0x300>)
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	43db      	mvns	r3, r3
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	4013      	ands	r3, r2
 800b556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	4313      	orrs	r3, r2
 800b56a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b56c:	4a1b      	ldr	r2, [pc, #108]	; (800b5dc <HAL_GPIO_Init+0x300>)
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b572:	4b1a      	ldr	r3, [pc, #104]	; (800b5dc <HAL_GPIO_Init+0x300>)
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	43db      	mvns	r3, r3
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	4013      	ands	r3, r2
 800b580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	4313      	orrs	r3, r2
 800b594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b596:	4a11      	ldr	r2, [pc, #68]	; (800b5dc <HAL_GPIO_Init+0x300>)
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f47f ae9d 	bne.w	800b2ec <HAL_GPIO_Init+0x10>
  }
}
 800b5b2:	bf00      	nop
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	40021000 	.word	0x40021000
 800b5c4:	40010000 	.word	0x40010000
 800b5c8:	48000400 	.word	0x48000400
 800b5cc:	48000800 	.word	0x48000800
 800b5d0:	48000c00 	.word	0x48000c00
 800b5d4:	48001000 	.word	0x48001000
 800b5d8:	48001400 	.word	0x48001400
 800b5dc:	40010400 	.word	0x40010400

0800b5e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	807b      	strh	r3, [r7, #2]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b5f0:	787b      	ldrb	r3, [r7, #1]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b5f6:	887a      	ldrh	r2, [r7, #2]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b5fc:	e002      	b.n	800b604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b5fe:	887a      	ldrh	r2, [r7, #2]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d141      	bne.n	800b6a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b61e:	4b4b      	ldr	r3, [pc, #300]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b62a:	d131      	bne.n	800b690 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b62c:	4b47      	ldr	r3, [pc, #284]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b632:	4a46      	ldr	r2, [pc, #280]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b63c:	4b43      	ldr	r3, [pc, #268]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b644:	4a41      	ldr	r2, [pc, #260]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b64a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b64c:	4b40      	ldr	r3, [pc, #256]	; (800b750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2232      	movs	r2, #50	; 0x32
 800b652:	fb02 f303 	mul.w	r3, r2, r3
 800b656:	4a3f      	ldr	r2, [pc, #252]	; (800b754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b658:	fba2 2303 	umull	r2, r3, r2, r3
 800b65c:	0c9b      	lsrs	r3, r3, #18
 800b65e:	3301      	adds	r3, #1
 800b660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b662:	e002      	b.n	800b66a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3b01      	subs	r3, #1
 800b668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b66a:	4b38      	ldr	r3, [pc, #224]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b676:	d102      	bne.n	800b67e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1f2      	bne.n	800b664 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b67e:	4b33      	ldr	r3, [pc, #204]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b68a:	d158      	bne.n	800b73e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e057      	b.n	800b740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b690:	4b2e      	ldr	r3, [pc, #184]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b696:	4a2d      	ldr	r2, [pc, #180]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b69c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b6a0:	e04d      	b.n	800b73e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6a8:	d141      	bne.n	800b72e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b6aa:	4b28      	ldr	r3, [pc, #160]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6b6:	d131      	bne.n	800b71c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b6b8:	4b24      	ldr	r3, [pc, #144]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6be:	4a23      	ldr	r2, [pc, #140]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b6c8:	4b20      	ldr	r3, [pc, #128]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b6d0:	4a1e      	ldr	r2, [pc, #120]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b6d8:	4b1d      	ldr	r3, [pc, #116]	; (800b750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2232      	movs	r2, #50	; 0x32
 800b6de:	fb02 f303 	mul.w	r3, r2, r3
 800b6e2:	4a1c      	ldr	r2, [pc, #112]	; (800b754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b6e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e8:	0c9b      	lsrs	r3, r3, #18
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b6ee:	e002      	b.n	800b6f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b6f6:	4b15      	ldr	r3, [pc, #84]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b702:	d102      	bne.n	800b70a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1f2      	bne.n	800b6f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b70a:	4b10      	ldr	r3, [pc, #64]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b716:	d112      	bne.n	800b73e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e011      	b.n	800b740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b71c:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b722:	4a0a      	ldr	r2, [pc, #40]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b72c:	e007      	b.n	800b73e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b72e:	4b07      	ldr	r3, [pc, #28]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b736:	4a05      	ldr	r2, [pc, #20]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b73c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr
 800b74c:	40007000 	.word	0x40007000
 800b750:	20000ca8 	.word	0x20000ca8
 800b754:	431bde83 	.word	0x431bde83

0800b758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e308      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	2b00      	cmp	r3, #0
 800b774:	d075      	beq.n	800b862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b776:	4ba3      	ldr	r3, [pc, #652]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f003 030c 	and.w	r3, r3, #12
 800b77e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b780:	4ba0      	ldr	r3, [pc, #640]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	f003 0303 	and.w	r3, r3, #3
 800b788:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	2b0c      	cmp	r3, #12
 800b78e:	d102      	bne.n	800b796 <HAL_RCC_OscConfig+0x3e>
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b03      	cmp	r3, #3
 800b794:	d002      	beq.n	800b79c <HAL_RCC_OscConfig+0x44>
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	2b08      	cmp	r3, #8
 800b79a:	d10b      	bne.n	800b7b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b79c:	4b99      	ldr	r3, [pc, #612]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d05b      	beq.n	800b860 <HAL_RCC_OscConfig+0x108>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d157      	bne.n	800b860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e2e3      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7bc:	d106      	bne.n	800b7cc <HAL_RCC_OscConfig+0x74>
 800b7be:	4b91      	ldr	r3, [pc, #580]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a90      	ldr	r2, [pc, #576]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b7c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	e01d      	b.n	800b808 <HAL_RCC_OscConfig+0xb0>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7d4:	d10c      	bne.n	800b7f0 <HAL_RCC_OscConfig+0x98>
 800b7d6:	4b8b      	ldr	r3, [pc, #556]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a8a      	ldr	r2, [pc, #552]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b7dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	4b88      	ldr	r3, [pc, #544]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a87      	ldr	r2, [pc, #540]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b7e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7ec:	6013      	str	r3, [r2, #0]
 800b7ee:	e00b      	b.n	800b808 <HAL_RCC_OscConfig+0xb0>
 800b7f0:	4b84      	ldr	r3, [pc, #528]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a83      	ldr	r2, [pc, #524]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b7f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7fa:	6013      	str	r3, [r2, #0]
 800b7fc:	4b81      	ldr	r3, [pc, #516]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a80      	ldr	r2, [pc, #512]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d013      	beq.n	800b838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b810:	f7fd f9fc 	bl	8008c0c <HAL_GetTick>
 800b814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b816:	e008      	b.n	800b82a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b818:	f7fd f9f8 	bl	8008c0c <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	2b64      	cmp	r3, #100	; 0x64
 800b824:	d901      	bls.n	800b82a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b826:	2303      	movs	r3, #3
 800b828:	e2a8      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b82a:	4b76      	ldr	r3, [pc, #472]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0f0      	beq.n	800b818 <HAL_RCC_OscConfig+0xc0>
 800b836:	e014      	b.n	800b862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b838:	f7fd f9e8 	bl	8008c0c <HAL_GetTick>
 800b83c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b83e:	e008      	b.n	800b852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b840:	f7fd f9e4 	bl	8008c0c <HAL_GetTick>
 800b844:	4602      	mov	r2, r0
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	2b64      	cmp	r3, #100	; 0x64
 800b84c:	d901      	bls.n	800b852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b84e:	2303      	movs	r3, #3
 800b850:	e294      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b852:	4b6c      	ldr	r3, [pc, #432]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1f0      	bne.n	800b840 <HAL_RCC_OscConfig+0xe8>
 800b85e:	e000      	b.n	800b862 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0302 	and.w	r3, r3, #2
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d075      	beq.n	800b95a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b86e:	4b65      	ldr	r3, [pc, #404]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	f003 030c 	and.w	r3, r3, #12
 800b876:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b878:	4b62      	ldr	r3, [pc, #392]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	2b0c      	cmp	r3, #12
 800b886:	d102      	bne.n	800b88e <HAL_RCC_OscConfig+0x136>
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d002      	beq.n	800b894 <HAL_RCC_OscConfig+0x13c>
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	2b04      	cmp	r3, #4
 800b892:	d11f      	bne.n	800b8d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b894:	4b5b      	ldr	r3, [pc, #364]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d005      	beq.n	800b8ac <HAL_RCC_OscConfig+0x154>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e267      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8ac:	4b55      	ldr	r3, [pc, #340]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	061b      	lsls	r3, r3, #24
 800b8ba:	4952      	ldr	r1, [pc, #328]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b8c0:	4b51      	ldr	r3, [pc, #324]	; (800ba08 <HAL_RCC_OscConfig+0x2b0>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fd f955 	bl	8008b74 <HAL_InitTick>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d043      	beq.n	800b958 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e253      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d023      	beq.n	800b924 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b8dc:	4b49      	ldr	r3, [pc, #292]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a48      	ldr	r2, [pc, #288]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b8e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e8:	f7fd f990 	bl	8008c0c <HAL_GetTick>
 800b8ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8ee:	e008      	b.n	800b902 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8f0:	f7fd f98c 	bl	8008c0c <HAL_GetTick>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d901      	bls.n	800b902 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e23c      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b902:	4b40      	ldr	r3, [pc, #256]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d0f0      	beq.n	800b8f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b90e:	4b3d      	ldr	r3, [pc, #244]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	061b      	lsls	r3, r3, #24
 800b91c:	4939      	ldr	r1, [pc, #228]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b91e:	4313      	orrs	r3, r2
 800b920:	604b      	str	r3, [r1, #4]
 800b922:	e01a      	b.n	800b95a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b924:	4b37      	ldr	r3, [pc, #220]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a36      	ldr	r2, [pc, #216]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b92a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b92e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b930:	f7fd f96c 	bl	8008c0c <HAL_GetTick>
 800b934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b936:	e008      	b.n	800b94a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b938:	f7fd f968 	bl	8008c0c <HAL_GetTick>
 800b93c:	4602      	mov	r2, r0
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	2b02      	cmp	r3, #2
 800b944:	d901      	bls.n	800b94a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b946:	2303      	movs	r3, #3
 800b948:	e218      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b94a:	4b2e      	ldr	r3, [pc, #184]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1f0      	bne.n	800b938 <HAL_RCC_OscConfig+0x1e0>
 800b956:	e000      	b.n	800b95a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b958:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 0308 	and.w	r3, r3, #8
 800b962:	2b00      	cmp	r3, #0
 800b964:	d03c      	beq.n	800b9e0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d01c      	beq.n	800b9a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b96e:	4b25      	ldr	r3, [pc, #148]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b974:	4a23      	ldr	r2, [pc, #140]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b976:	f043 0301 	orr.w	r3, r3, #1
 800b97a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b97e:	f7fd f945 	bl	8008c0c <HAL_GetTick>
 800b982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b984:	e008      	b.n	800b998 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b986:	f7fd f941 	bl	8008c0c <HAL_GetTick>
 800b98a:	4602      	mov	r2, r0
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	2b02      	cmp	r3, #2
 800b992:	d901      	bls.n	800b998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b994:	2303      	movs	r3, #3
 800b996:	e1f1      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b998:	4b1a      	ldr	r3, [pc, #104]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b99a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0ef      	beq.n	800b986 <HAL_RCC_OscConfig+0x22e>
 800b9a6:	e01b      	b.n	800b9e0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9a8:	4b16      	ldr	r3, [pc, #88]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b9aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9ae:	4a15      	ldr	r2, [pc, #84]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b9b0:	f023 0301 	bic.w	r3, r3, #1
 800b9b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9b8:	f7fd f928 	bl	8008c0c <HAL_GetTick>
 800b9bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9be:	e008      	b.n	800b9d2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9c0:	f7fd f924 	bl	8008c0c <HAL_GetTick>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d901      	bls.n	800b9d2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e1d4      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b9d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1ef      	bne.n	800b9c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f003 0304 	and.w	r3, r3, #4
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 80ab 	beq.w	800bb44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b9f2:	4b04      	ldr	r3, [pc, #16]	; (800ba04 <HAL_RCC_OscConfig+0x2ac>)
 800b9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d106      	bne.n	800ba0c <HAL_RCC_OscConfig+0x2b4>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e005      	b.n	800ba0e <HAL_RCC_OscConfig+0x2b6>
 800ba02:	bf00      	nop
 800ba04:	40021000 	.word	0x40021000
 800ba08:	20000cac 	.word	0x20000cac
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00d      	beq.n	800ba2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba12:	4baf      	ldr	r3, [pc, #700]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800ba14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba16:	4aae      	ldr	r2, [pc, #696]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800ba18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba1c:	6593      	str	r3, [r2, #88]	; 0x58
 800ba1e:	4bac      	ldr	r3, [pc, #688]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800ba20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba2e:	4ba9      	ldr	r3, [pc, #676]	; (800bcd4 <HAL_RCC_OscConfig+0x57c>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d118      	bne.n	800ba6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba3a:	4ba6      	ldr	r3, [pc, #664]	; (800bcd4 <HAL_RCC_OscConfig+0x57c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4aa5      	ldr	r2, [pc, #660]	; (800bcd4 <HAL_RCC_OscConfig+0x57c>)
 800ba40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba46:	f7fd f8e1 	bl	8008c0c <HAL_GetTick>
 800ba4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba4c:	e008      	b.n	800ba60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba4e:	f7fd f8dd 	bl	8008c0c <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d901      	bls.n	800ba60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e18d      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba60:	4b9c      	ldr	r3, [pc, #624]	; (800bcd4 <HAL_RCC_OscConfig+0x57c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d0f0      	beq.n	800ba4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d108      	bne.n	800ba86 <HAL_RCC_OscConfig+0x32e>
 800ba74:	4b96      	ldr	r3, [pc, #600]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800ba76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba7a:	4a95      	ldr	r2, [pc, #596]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800ba7c:	f043 0301 	orr.w	r3, r3, #1
 800ba80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba84:	e024      	b.n	800bad0 <HAL_RCC_OscConfig+0x378>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	2b05      	cmp	r3, #5
 800ba8c:	d110      	bne.n	800bab0 <HAL_RCC_OscConfig+0x358>
 800ba8e:	4b90      	ldr	r3, [pc, #576]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800ba90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba94:	4a8e      	ldr	r2, [pc, #568]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800ba96:	f043 0304 	orr.w	r3, r3, #4
 800ba9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba9e:	4b8c      	ldr	r3, [pc, #560]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800baa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baa4:	4a8a      	ldr	r2, [pc, #552]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800baa6:	f043 0301 	orr.w	r3, r3, #1
 800baaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800baae:	e00f      	b.n	800bad0 <HAL_RCC_OscConfig+0x378>
 800bab0:	4b87      	ldr	r3, [pc, #540]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bab6:	4a86      	ldr	r2, [pc, #536]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bab8:	f023 0301 	bic.w	r3, r3, #1
 800babc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bac0:	4b83      	ldr	r3, [pc, #524]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bac6:	4a82      	ldr	r2, [pc, #520]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bac8:	f023 0304 	bic.w	r3, r3, #4
 800bacc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d016      	beq.n	800bb06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bad8:	f7fd f898 	bl	8008c0c <HAL_GetTick>
 800badc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bade:	e00a      	b.n	800baf6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bae0:	f7fd f894 	bl	8008c0c <HAL_GetTick>
 800bae4:	4602      	mov	r2, r0
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	f241 3288 	movw	r2, #5000	; 0x1388
 800baee:	4293      	cmp	r3, r2
 800baf0:	d901      	bls.n	800baf6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	e142      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800baf6:	4b76      	ldr	r3, [pc, #472]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800baf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bafc:	f003 0302 	and.w	r3, r3, #2
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d0ed      	beq.n	800bae0 <HAL_RCC_OscConfig+0x388>
 800bb04:	e015      	b.n	800bb32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb06:	f7fd f881 	bl	8008c0c <HAL_GetTick>
 800bb0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb0c:	e00a      	b.n	800bb24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb0e:	f7fd f87d 	bl	8008c0c <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d901      	bls.n	800bb24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e12b      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb24:	4b6a      	ldr	r3, [pc, #424]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bb26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb2a:	f003 0302 	and.w	r3, r3, #2
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1ed      	bne.n	800bb0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bb32:	7ffb      	ldrb	r3, [r7, #31]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d105      	bne.n	800bb44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb38:	4b65      	ldr	r3, [pc, #404]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bb3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb3c:	4a64      	ldr	r2, [pc, #400]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bb3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d03c      	beq.n	800bbca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d01c      	beq.n	800bb92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bb58:	4b5d      	ldr	r3, [pc, #372]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bb5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb5e:	4a5c      	ldr	r2, [pc, #368]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bb60:	f043 0301 	orr.w	r3, r3, #1
 800bb64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb68:	f7fd f850 	bl	8008c0c <HAL_GetTick>
 800bb6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb6e:	e008      	b.n	800bb82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb70:	f7fd f84c 	bl	8008c0c <HAL_GetTick>
 800bb74:	4602      	mov	r2, r0
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d901      	bls.n	800bb82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	e0fc      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb82:	4b53      	ldr	r3, [pc, #332]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bb84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb88:	f003 0302 	and.w	r3, r3, #2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0ef      	beq.n	800bb70 <HAL_RCC_OscConfig+0x418>
 800bb90:	e01b      	b.n	800bbca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bb92:	4b4f      	ldr	r3, [pc, #316]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bb94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb98:	4a4d      	ldr	r2, [pc, #308]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bb9a:	f023 0301 	bic.w	r3, r3, #1
 800bb9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bba2:	f7fd f833 	bl	8008c0c <HAL_GetTick>
 800bba6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bba8:	e008      	b.n	800bbbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bbaa:	f7fd f82f 	bl	8008c0c <HAL_GetTick>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d901      	bls.n	800bbbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	e0df      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bbbc:	4b44      	ldr	r3, [pc, #272]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bbbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbc2:	f003 0302 	and.w	r3, r3, #2
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1ef      	bne.n	800bbaa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80d3 	beq.w	800bd7a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bbd4:	4b3e      	ldr	r3, [pc, #248]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	f003 030c 	and.w	r3, r3, #12
 800bbdc:	2b0c      	cmp	r3, #12
 800bbde:	f000 808d 	beq.w	800bcfc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d15a      	bne.n	800bca0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbea:	4b39      	ldr	r3, [pc, #228]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a38      	ldr	r2, [pc, #224]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bbf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbf6:	f7fd f809 	bl	8008c0c <HAL_GetTick>
 800bbfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bbfc:	e008      	b.n	800bc10 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbfe:	f7fd f805 	bl	8008c0c <HAL_GetTick>
 800bc02:	4602      	mov	r2, r0
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d901      	bls.n	800bc10 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e0b5      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc10:	4b2f      	ldr	r3, [pc, #188]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1f0      	bne.n	800bbfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc1c:	4b2c      	ldr	r3, [pc, #176]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bc1e:	68da      	ldr	r2, [r3, #12]
 800bc20:	4b2d      	ldr	r3, [pc, #180]	; (800bcd8 <HAL_RCC_OscConfig+0x580>)
 800bc22:	4013      	ands	r3, r2
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	6a11      	ldr	r1, [r2, #32]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc2c:	3a01      	subs	r2, #1
 800bc2e:	0112      	lsls	r2, r2, #4
 800bc30:	4311      	orrs	r1, r2
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800bc36:	0212      	lsls	r2, r2, #8
 800bc38:	4311      	orrs	r1, r2
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc3e:	0852      	lsrs	r2, r2, #1
 800bc40:	3a01      	subs	r2, #1
 800bc42:	0552      	lsls	r2, r2, #21
 800bc44:	4311      	orrs	r1, r2
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bc4a:	0852      	lsrs	r2, r2, #1
 800bc4c:	3a01      	subs	r2, #1
 800bc4e:	0652      	lsls	r2, r2, #25
 800bc50:	4311      	orrs	r1, r2
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bc56:	06d2      	lsls	r2, r2, #27
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	491d      	ldr	r1, [pc, #116]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc60:	4b1b      	ldr	r3, [pc, #108]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a1a      	ldr	r2, [pc, #104]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bc66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bc6c:	4b18      	ldr	r3, [pc, #96]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	4a17      	ldr	r2, [pc, #92]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bc72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc78:	f7fc ffc8 	bl	8008c0c <HAL_GetTick>
 800bc7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc7e:	e008      	b.n	800bc92 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc80:	f7fc ffc4 	bl	8008c0c <HAL_GetTick>
 800bc84:	4602      	mov	r2, r0
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d901      	bls.n	800bc92 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e074      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc92:	4b0f      	ldr	r3, [pc, #60]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0f0      	beq.n	800bc80 <HAL_RCC_OscConfig+0x528>
 800bc9e:	e06c      	b.n	800bd7a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bca0:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a0a      	ldr	r2, [pc, #40]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcaa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800bcac:	4b08      	ldr	r3, [pc, #32]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	4a07      	ldr	r2, [pc, #28]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bcb2:	f023 0303 	bic.w	r3, r3, #3
 800bcb6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bcb8:	4b05      	ldr	r3, [pc, #20]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	4a04      	ldr	r2, [pc, #16]	; (800bcd0 <HAL_RCC_OscConfig+0x578>)
 800bcbe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bcc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc8:	f7fc ffa0 	bl	8008c0c <HAL_GetTick>
 800bccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bcce:	e00e      	b.n	800bcee <HAL_RCC_OscConfig+0x596>
 800bcd0:	40021000 	.word	0x40021000
 800bcd4:	40007000 	.word	0x40007000
 800bcd8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcdc:	f7fc ff96 	bl	8008c0c <HAL_GetTick>
 800bce0:	4602      	mov	r2, r0
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d901      	bls.n	800bcee <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e046      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bcee:	4b25      	ldr	r3, [pc, #148]	; (800bd84 <HAL_RCC_OscConfig+0x62c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1f0      	bne.n	800bcdc <HAL_RCC_OscConfig+0x584>
 800bcfa:	e03e      	b.n	800bd7a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	69db      	ldr	r3, [r3, #28]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d101      	bne.n	800bd08 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e039      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800bd08:	4b1e      	ldr	r3, [pc, #120]	; (800bd84 <HAL_RCC_OscConfig+0x62c>)
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f003 0203 	and.w	r2, r3, #3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a1b      	ldr	r3, [r3, #32]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d12c      	bne.n	800bd76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd26:	3b01      	subs	r3, #1
 800bd28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d123      	bne.n	800bd76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d11b      	bne.n	800bd76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d113      	bne.n	800bd76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd58:	085b      	lsrs	r3, r3, #1
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d109      	bne.n	800bd76 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd6c:	085b      	lsrs	r3, r3, #1
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d001      	beq.n	800bd7a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e000      	b.n	800bd7c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3720      	adds	r7, #32
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40021000 	.word	0x40021000

0800bd88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bd92:	2300      	movs	r3, #0
 800bd94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e11e      	b.n	800bfde <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bda0:	4b91      	ldr	r3, [pc, #580]	; (800bfe8 <HAL_RCC_ClockConfig+0x260>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f003 030f 	and.w	r3, r3, #15
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d910      	bls.n	800bdd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdae:	4b8e      	ldr	r3, [pc, #568]	; (800bfe8 <HAL_RCC_ClockConfig+0x260>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f023 020f 	bic.w	r2, r3, #15
 800bdb6:	498c      	ldr	r1, [pc, #560]	; (800bfe8 <HAL_RCC_ClockConfig+0x260>)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdbe:	4b8a      	ldr	r3, [pc, #552]	; (800bfe8 <HAL_RCC_ClockConfig+0x260>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f003 030f 	and.w	r3, r3, #15
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d001      	beq.n	800bdd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e106      	b.n	800bfde <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 0301 	and.w	r3, r3, #1
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d073      	beq.n	800bec4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d129      	bne.n	800be38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bde4:	4b81      	ldr	r3, [pc, #516]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e0f4      	b.n	800bfde <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800bdf4:	f000 f972 	bl	800c0dc <RCC_GetSysClockFreqFromPLLSource>
 800bdf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	4a7c      	ldr	r2, [pc, #496]	; (800bff0 <HAL_RCC_ClockConfig+0x268>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d93f      	bls.n	800be82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800be02:	4b7a      	ldr	r3, [pc, #488]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d009      	beq.n	800be22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800be16:	2b00      	cmp	r3, #0
 800be18:	d033      	beq.n	800be82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d12f      	bne.n	800be82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800be22:	4b72      	ldr	r3, [pc, #456]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be2a:	4a70      	ldr	r2, [pc, #448]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800be2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800be32:	2380      	movs	r3, #128	; 0x80
 800be34:	617b      	str	r3, [r7, #20]
 800be36:	e024      	b.n	800be82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d107      	bne.n	800be50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be40:	4b6a      	ldr	r3, [pc, #424]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d109      	bne.n	800be60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e0c6      	b.n	800bfde <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be50:	4b66      	ldr	r3, [pc, #408]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e0be      	b.n	800bfde <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800be60:	f000 f8ce 	bl	800c000 <HAL_RCC_GetSysClockFreq>
 800be64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	4a61      	ldr	r2, [pc, #388]	; (800bff0 <HAL_RCC_ClockConfig+0x268>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d909      	bls.n	800be82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800be6e:	4b5f      	ldr	r3, [pc, #380]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be76:	4a5d      	ldr	r2, [pc, #372]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800be78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800be7e:	2380      	movs	r3, #128	; 0x80
 800be80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be82:	4b5a      	ldr	r3, [pc, #360]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	f023 0203 	bic.w	r2, r3, #3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	4957      	ldr	r1, [pc, #348]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800be90:	4313      	orrs	r3, r2
 800be92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be94:	f7fc feba 	bl	8008c0c <HAL_GetTick>
 800be98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be9a:	e00a      	b.n	800beb2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be9c:	f7fc feb6 	bl	8008c0c <HAL_GetTick>
 800bea0:	4602      	mov	r2, r0
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	f241 3288 	movw	r2, #5000	; 0x1388
 800beaa:	4293      	cmp	r3, r2
 800beac:	d901      	bls.n	800beb2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e095      	b.n	800bfde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800beb2:	4b4e      	ldr	r3, [pc, #312]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	f003 020c 	and.w	r2, r3, #12
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d1eb      	bne.n	800be9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 0302 	and.w	r3, r3, #2
 800becc:	2b00      	cmp	r3, #0
 800bece:	d023      	beq.n	800bf18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f003 0304 	and.w	r3, r3, #4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d005      	beq.n	800bee8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bedc:	4b43      	ldr	r3, [pc, #268]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	4a42      	ldr	r2, [pc, #264]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bee2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bee6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0308 	and.w	r3, r3, #8
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d007      	beq.n	800bf04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bef4:	4b3d      	ldr	r3, [pc, #244]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800befc:	4a3b      	ldr	r2, [pc, #236]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800befe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bf02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf04:	4b39      	ldr	r3, [pc, #228]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	4936      	ldr	r1, [pc, #216]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bf12:	4313      	orrs	r3, r2
 800bf14:	608b      	str	r3, [r1, #8]
 800bf16:	e008      	b.n	800bf2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	2b80      	cmp	r3, #128	; 0x80
 800bf1c:	d105      	bne.n	800bf2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bf1e:	4b33      	ldr	r3, [pc, #204]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	4a32      	ldr	r2, [pc, #200]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bf24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bf2a:	4b2f      	ldr	r3, [pc, #188]	; (800bfe8 <HAL_RCC_ClockConfig+0x260>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 030f 	and.w	r3, r3, #15
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d21d      	bcs.n	800bf74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf38:	4b2b      	ldr	r3, [pc, #172]	; (800bfe8 <HAL_RCC_ClockConfig+0x260>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f023 020f 	bic.w	r2, r3, #15
 800bf40:	4929      	ldr	r1, [pc, #164]	; (800bfe8 <HAL_RCC_ClockConfig+0x260>)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bf48:	f7fc fe60 	bl	8008c0c <HAL_GetTick>
 800bf4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf4e:	e00a      	b.n	800bf66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf50:	f7fc fe5c 	bl	8008c0c <HAL_GetTick>
 800bf54:	4602      	mov	r2, r0
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d901      	bls.n	800bf66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bf62:	2303      	movs	r3, #3
 800bf64:	e03b      	b.n	800bfde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf66:	4b20      	ldr	r3, [pc, #128]	; (800bfe8 <HAL_RCC_ClockConfig+0x260>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 030f 	and.w	r3, r3, #15
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d1ed      	bne.n	800bf50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f003 0304 	and.w	r3, r3, #4
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d008      	beq.n	800bf92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bf80:	4b1a      	ldr	r3, [pc, #104]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	4917      	ldr	r1, [pc, #92]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0308 	and.w	r3, r3, #8
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d009      	beq.n	800bfb2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bf9e:	4b13      	ldr	r3, [pc, #76]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	00db      	lsls	r3, r3, #3
 800bfac:	490f      	ldr	r1, [pc, #60]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bfb2:	f000 f825 	bl	800c000 <HAL_RCC_GetSysClockFreq>
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	4b0c      	ldr	r3, [pc, #48]	; (800bfec <HAL_RCC_ClockConfig+0x264>)
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	091b      	lsrs	r3, r3, #4
 800bfbe:	f003 030f 	and.w	r3, r3, #15
 800bfc2:	4a0c      	ldr	r2, [pc, #48]	; (800bff4 <HAL_RCC_ClockConfig+0x26c>)
 800bfc4:	5cd3      	ldrb	r3, [r2, r3]
 800bfc6:	f003 031f 	and.w	r3, r3, #31
 800bfca:	fa21 f303 	lsr.w	r3, r1, r3
 800bfce:	4a0a      	ldr	r2, [pc, #40]	; (800bff8 <HAL_RCC_ClockConfig+0x270>)
 800bfd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bfd2:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <HAL_RCC_ClockConfig+0x274>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fc fdcc 	bl	8008b74 <HAL_InitTick>
 800bfdc:	4603      	mov	r3, r0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	40022000 	.word	0x40022000
 800bfec:	40021000 	.word	0x40021000
 800bff0:	04c4b400 	.word	0x04c4b400
 800bff4:	08013b24 	.word	0x08013b24
 800bff8:	20000ca8 	.word	0x20000ca8
 800bffc:	20000cac 	.word	0x20000cac

0800c000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c000:	b480      	push	{r7}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c006:	4b2c      	ldr	r3, [pc, #176]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	f003 030c 	and.w	r3, r3, #12
 800c00e:	2b04      	cmp	r3, #4
 800c010:	d102      	bne.n	800c018 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c012:	4b2a      	ldr	r3, [pc, #168]	; (800c0bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800c014:	613b      	str	r3, [r7, #16]
 800c016:	e047      	b.n	800c0a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c018:	4b27      	ldr	r3, [pc, #156]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f003 030c 	and.w	r3, r3, #12
 800c020:	2b08      	cmp	r3, #8
 800c022:	d102      	bne.n	800c02a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c024:	4b26      	ldr	r3, [pc, #152]	; (800c0c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c026:	613b      	str	r3, [r7, #16]
 800c028:	e03e      	b.n	800c0a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c02a:	4b23      	ldr	r3, [pc, #140]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	f003 030c 	and.w	r3, r3, #12
 800c032:	2b0c      	cmp	r3, #12
 800c034:	d136      	bne.n	800c0a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c036:	4b20      	ldr	r3, [pc, #128]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	f003 0303 	and.w	r3, r3, #3
 800c03e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c040:	4b1d      	ldr	r3, [pc, #116]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	091b      	lsrs	r3, r3, #4
 800c046:	f003 030f 	and.w	r3, r3, #15
 800c04a:	3301      	adds	r3, #1
 800c04c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2b03      	cmp	r3, #3
 800c052:	d10c      	bne.n	800c06e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c054:	4a1a      	ldr	r2, [pc, #104]	; (800c0c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	fbb2 f3f3 	udiv	r3, r2, r3
 800c05c:	4a16      	ldr	r2, [pc, #88]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c05e:	68d2      	ldr	r2, [r2, #12]
 800c060:	0a12      	lsrs	r2, r2, #8
 800c062:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c066:	fb02 f303 	mul.w	r3, r2, r3
 800c06a:	617b      	str	r3, [r7, #20]
      break;
 800c06c:	e00c      	b.n	800c088 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c06e:	4a13      	ldr	r2, [pc, #76]	; (800c0bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	fbb2 f3f3 	udiv	r3, r2, r3
 800c076:	4a10      	ldr	r2, [pc, #64]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c078:	68d2      	ldr	r2, [r2, #12]
 800c07a:	0a12      	lsrs	r2, r2, #8
 800c07c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c080:	fb02 f303 	mul.w	r3, r2, r3
 800c084:	617b      	str	r3, [r7, #20]
      break;
 800c086:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c088:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	0e5b      	lsrs	r3, r3, #25
 800c08e:	f003 0303 	and.w	r3, r3, #3
 800c092:	3301      	adds	r3, #1
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c098:	697a      	ldr	r2, [r7, #20]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0a0:	613b      	str	r3, [r7, #16]
 800c0a2:	e001      	b.n	800c0a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c0a8:	693b      	ldr	r3, [r7, #16]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	371c      	adds	r7, #28
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	40021000 	.word	0x40021000
 800c0bc:	00f42400 	.word	0x00f42400
 800c0c0:	007a1200 	.word	0x007a1200

0800c0c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0c8:	4b03      	ldr	r3, [pc, #12]	; (800c0d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	20000ca8 	.word	0x20000ca8

0800c0dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c0e2:	4b1e      	ldr	r3, [pc, #120]	; (800c15c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	f003 0303 	and.w	r3, r3, #3
 800c0ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c0ec:	4b1b      	ldr	r3, [pc, #108]	; (800c15c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	091b      	lsrs	r3, r3, #4
 800c0f2:	f003 030f 	and.w	r3, r3, #15
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d10c      	bne.n	800c11a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c100:	4a17      	ldr	r2, [pc, #92]	; (800c160 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	fbb2 f3f3 	udiv	r3, r2, r3
 800c108:	4a14      	ldr	r2, [pc, #80]	; (800c15c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c10a:	68d2      	ldr	r2, [r2, #12]
 800c10c:	0a12      	lsrs	r2, r2, #8
 800c10e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c112:	fb02 f303 	mul.w	r3, r2, r3
 800c116:	617b      	str	r3, [r7, #20]
    break;
 800c118:	e00c      	b.n	800c134 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c11a:	4a12      	ldr	r2, [pc, #72]	; (800c164 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c122:	4a0e      	ldr	r2, [pc, #56]	; (800c15c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c124:	68d2      	ldr	r2, [r2, #12]
 800c126:	0a12      	lsrs	r2, r2, #8
 800c128:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c12c:	fb02 f303 	mul.w	r3, r2, r3
 800c130:	617b      	str	r3, [r7, #20]
    break;
 800c132:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c134:	4b09      	ldr	r3, [pc, #36]	; (800c15c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	0e5b      	lsrs	r3, r3, #25
 800c13a:	f003 0303 	and.w	r3, r3, #3
 800c13e:	3301      	adds	r3, #1
 800c140:	005b      	lsls	r3, r3, #1
 800c142:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c144:	697a      	ldr	r2, [r7, #20]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	fbb2 f3f3 	udiv	r3, r2, r3
 800c14c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c14e:	687b      	ldr	r3, [r7, #4]
}
 800c150:	4618      	mov	r0, r3
 800c152:	371c      	adds	r7, #28
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	40021000 	.word	0x40021000
 800c160:	007a1200 	.word	0x007a1200
 800c164:	00f42400 	.word	0x00f42400

0800c168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c170:	2300      	movs	r3, #0
 800c172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c174:	2300      	movs	r3, #0
 800c176:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 8098 	beq.w	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c186:	2300      	movs	r3, #0
 800c188:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c18a:	4b43      	ldr	r3, [pc, #268]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c18c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10d      	bne.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c196:	4b40      	ldr	r3, [pc, #256]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c19a:	4a3f      	ldr	r2, [pc, #252]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c19c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1a0:	6593      	str	r3, [r2, #88]	; 0x58
 800c1a2:	4b3d      	ldr	r3, [pc, #244]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1aa:	60bb      	str	r3, [r7, #8]
 800c1ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c1b2:	4b3a      	ldr	r3, [pc, #232]	; (800c29c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a39      	ldr	r2, [pc, #228]	; (800c29c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c1b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c1be:	f7fc fd25 	bl	8008c0c <HAL_GetTick>
 800c1c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1c4:	e009      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1c6:	f7fc fd21 	bl	8008c0c <HAL_GetTick>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d902      	bls.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	74fb      	strb	r3, [r7, #19]
        break;
 800c1d8:	e005      	b.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1da:	4b30      	ldr	r3, [pc, #192]	; (800c29c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0ef      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c1e6:	7cfb      	ldrb	r3, [r7, #19]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d159      	bne.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c1ec:	4b2a      	ldr	r3, [pc, #168]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c1ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d01e      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	429a      	cmp	r2, r3
 800c206:	d019      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c208:	4b23      	ldr	r3, [pc, #140]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c20e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c212:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c214:	4b20      	ldr	r3, [pc, #128]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c21a:	4a1f      	ldr	r2, [pc, #124]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c21c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c224:	4b1c      	ldr	r3, [pc, #112]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c22a:	4a1b      	ldr	r2, [pc, #108]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c22c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c234:	4a18      	ldr	r2, [pc, #96]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	f003 0301 	and.w	r3, r3, #1
 800c242:	2b00      	cmp	r3, #0
 800c244:	d016      	beq.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c246:	f7fc fce1 	bl	8008c0c <HAL_GetTick>
 800c24a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c24c:	e00b      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c24e:	f7fc fcdd 	bl	8008c0c <HAL_GetTick>
 800c252:	4602      	mov	r2, r0
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	f241 3288 	movw	r2, #5000	; 0x1388
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d902      	bls.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c260:	2303      	movs	r3, #3
 800c262:	74fb      	strb	r3, [r7, #19]
            break;
 800c264:	e006      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c266:	4b0c      	ldr	r3, [pc, #48]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c26c:	f003 0302 	and.w	r3, r3, #2
 800c270:	2b00      	cmp	r3, #0
 800c272:	d0ec      	beq.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c274:	7cfb      	ldrb	r3, [r7, #19]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10b      	bne.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c27a:	4b07      	ldr	r3, [pc, #28]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c288:	4903      	ldr	r1, [pc, #12]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c290:	e008      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c292:	7cfb      	ldrb	r3, [r7, #19]
 800c294:	74bb      	strb	r3, [r7, #18]
 800c296:	e005      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c298:	40021000 	.word	0x40021000
 800c29c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a0:	7cfb      	ldrb	r3, [r7, #19]
 800c2a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c2a4:	7c7b      	ldrb	r3, [r7, #17]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d105      	bne.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2aa:	4baf      	ldr	r3, [pc, #700]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ae:	4aae      	ldr	r2, [pc, #696]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c2b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f003 0301 	and.w	r3, r3, #1
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00a      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c2c2:	4ba9      	ldr	r3, [pc, #676]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2c8:	f023 0203 	bic.w	r2, r3, #3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	49a5      	ldr	r1, [pc, #660]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 0302 	and.w	r3, r3, #2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00a      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c2e4:	4ba0      	ldr	r3, [pc, #640]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2ea:	f023 020c 	bic.w	r2, r3, #12
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	499d      	ldr	r1, [pc, #628]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 0304 	and.w	r3, r3, #4
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00a      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c306:	4b98      	ldr	r3, [pc, #608]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c30c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	4994      	ldr	r1, [pc, #592]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c316:	4313      	orrs	r3, r2
 800c318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0308 	and.w	r3, r3, #8
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00a      	beq.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c328:	4b8f      	ldr	r3, [pc, #572]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c32e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	691b      	ldr	r3, [r3, #16]
 800c336:	498c      	ldr	r1, [pc, #560]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c338:	4313      	orrs	r3, r2
 800c33a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0310 	and.w	r3, r3, #16
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00a      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c34a:	4b87      	ldr	r3, [pc, #540]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	4983      	ldr	r1, [pc, #524]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c35a:	4313      	orrs	r3, r2
 800c35c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0320 	and.w	r3, r3, #32
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00a      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c36c:	4b7e      	ldr	r3, [pc, #504]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c372:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	497b      	ldr	r1, [pc, #492]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c37c:	4313      	orrs	r3, r2
 800c37e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00a      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c38e:	4b76      	ldr	r3, [pc, #472]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c394:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	69db      	ldr	r3, [r3, #28]
 800c39c:	4972      	ldr	r1, [pc, #456]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00a      	beq.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c3b0:	4b6d      	ldr	r3, [pc, #436]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	496a      	ldr	r1, [pc, #424]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00a      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c3d2:	4b65      	ldr	r3, [pc, #404]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e0:	4961      	ldr	r1, [pc, #388]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00a      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c3f4:	4b5c      	ldr	r3, [pc, #368]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c3f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c3fa:	f023 0203 	bic.w	r2, r3, #3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c402:	4959      	ldr	r1, [pc, #356]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c404:	4313      	orrs	r3, r2
 800c406:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00a      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c416:	4b54      	ldr	r3, [pc, #336]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c41c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c424:	4950      	ldr	r1, [pc, #320]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c426:	4313      	orrs	r3, r2
 800c428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c434:	2b00      	cmp	r3, #0
 800c436:	d015      	beq.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c438:	4b4b      	ldr	r3, [pc, #300]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c43e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c446:	4948      	ldr	r1, [pc, #288]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c448:	4313      	orrs	r3, r2
 800c44a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c456:	d105      	bne.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c458:	4b43      	ldr	r3, [pc, #268]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	4a42      	ldr	r2, [pc, #264]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c45e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c462:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d015      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c470:	4b3d      	ldr	r3, [pc, #244]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c476:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47e:	493a      	ldr	r1, [pc, #232]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c480:	4313      	orrs	r3, r2
 800c482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c48e:	d105      	bne.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c490:	4b35      	ldr	r3, [pc, #212]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	4a34      	ldr	r2, [pc, #208]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c49a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d015      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c4a8:	4b2f      	ldr	r3, [pc, #188]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b6:	492c      	ldr	r1, [pc, #176]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c4c6:	d105      	bne.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c4c8:	4b27      	ldr	r3, [pc, #156]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	4a26      	ldr	r2, [pc, #152]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d015      	beq.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4e0:	4b21      	ldr	r3, [pc, #132]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ee:	491e      	ldr	r1, [pc, #120]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4fe:	d105      	bne.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c500:	4b19      	ldr	r3, [pc, #100]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	4a18      	ldr	r2, [pc, #96]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c50a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d015      	beq.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c518:	4b13      	ldr	r3, [pc, #76]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c51e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c526:	4910      	ldr	r1, [pc, #64]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c528:	4313      	orrs	r3, r2
 800c52a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c536:	d105      	bne.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c538:	4b0b      	ldr	r3, [pc, #44]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	4a0a      	ldr	r2, [pc, #40]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c53e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c542:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d018      	beq.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c550:	4b05      	ldr	r3, [pc, #20]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c556:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c55e:	4902      	ldr	r1, [pc, #8]	; (800c568 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c560:	4313      	orrs	r3, r2
 800c562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c566:	e001      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800c568:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c574:	d105      	bne.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c576:	4b21      	ldr	r3, [pc, #132]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	4a20      	ldr	r2, [pc, #128]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c57c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c580:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d015      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c58e:	4b1b      	ldr	r3, [pc, #108]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c594:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c59c:	4917      	ldr	r1, [pc, #92]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5ac:	d105      	bne.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c5ae:	4b13      	ldr	r3, [pc, #76]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	4a12      	ldr	r2, [pc, #72]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5b8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d015      	beq.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c5c6:	4b0d      	ldr	r3, [pc, #52]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c5cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5d4:	4909      	ldr	r1, [pc, #36]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5e4:	d105      	bne.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c5e6:	4b05      	ldr	r3, [pc, #20]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	4a04      	ldr	r2, [pc, #16]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5f0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c5f2:	7cbb      	ldrb	r3, [r7, #18]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	40021000 	.word	0x40021000

0800c600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	e084      	b.n	800c71c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b00      	cmp	r3, #0
 800c622:	d106      	bne.n	800c632 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7fb fd2b 	bl	8008088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2202      	movs	r2, #2
 800c636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c648:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c652:	d902      	bls.n	800c65a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c654:	2300      	movs	r3, #0
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	e002      	b.n	800c660 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c65a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c65e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c668:	d007      	beq.n	800c67a <HAL_SPI_Init+0x7a>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c672:	d002      	beq.n	800c67a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10b      	bne.n	800c69a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c68a:	d903      	bls.n	800c694 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2202      	movs	r2, #2
 800c690:	631a      	str	r2, [r3, #48]	; 0x30
 800c692:	e002      	b.n	800c69a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	431a      	orrs	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	695b      	ldr	r3, [r3, #20]
 800c6ae:	431a      	orrs	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c6b8:	431a      	orrs	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	69db      	ldr	r3, [r3, #28]
 800c6be:	431a      	orrs	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a1b      	ldr	r3, [r3, #32]
 800c6c4:	ea42 0103 	orr.w	r1, r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	0c1b      	lsrs	r3, r3, #16
 800c6da:	f003 0204 	and.w	r2, r3, #4
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	ea42 0103 	orr.w	r1, r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	430a      	orrs	r2, r1
 800c6fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	69da      	ldr	r2, [r3, #28]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c70a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d101      	bne.n	800c736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e049      	b.n	800c7ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7fc f914 	bl	8008978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2202      	movs	r2, #2
 800c754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	3304      	adds	r3, #4
 800c760:	4619      	mov	r1, r3
 800c762:	4610      	mov	r0, r2
 800c764:	f000 fc38 	bl	800cfd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
	...

0800c7d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d001      	beq.n	800c7ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e019      	b.n	800c820 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	689a      	ldr	r2, [r3, #8]
 800c7fa:	4b0c      	ldr	r3, [pc, #48]	; (800c82c <HAL_TIM_Base_Start+0x58>)
 800c7fc:	4013      	ands	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b06      	cmp	r3, #6
 800c804:	d00b      	beq.n	800c81e <HAL_TIM_Base_Start+0x4a>
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c80c:	d007      	beq.n	800c81e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f042 0201 	orr.w	r2, r2, #1
 800c81c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	00010007 	.word	0x00010007

0800c830 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	6a1a      	ldr	r2, [r3, #32]
 800c83e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c842:	4013      	ands	r3, r2
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10f      	bne.n	800c868 <HAL_TIM_Base_Stop+0x38>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6a1a      	ldr	r2, [r3, #32]
 800c84e:	f244 4344 	movw	r3, #17476	; 0x4444
 800c852:	4013      	ands	r3, r2
 800c854:	2b00      	cmp	r3, #0
 800c856:	d107      	bne.n	800c868 <HAL_TIM_Base_Stop+0x38>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f022 0201 	bic.w	r2, r2, #1
 800c866:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
	...

0800c880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	2b01      	cmp	r3, #1
 800c892:	d001      	beq.n	800c898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c894:	2301      	movs	r3, #1
 800c896:	e021      	b.n	800c8dc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2202      	movs	r2, #2
 800c89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68da      	ldr	r2, [r3, #12]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f042 0201 	orr.w	r2, r2, #1
 800c8ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	689a      	ldr	r2, [r3, #8]
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <HAL_TIM_Base_Start_IT+0x68>)
 800c8b8:	4013      	ands	r3, r2
 800c8ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b06      	cmp	r3, #6
 800c8c0:	d00b      	beq.n	800c8da <HAL_TIM_Base_Start_IT+0x5a>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8c8:	d007      	beq.n	800c8da <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f042 0201 	orr.w	r2, r2, #1
 800c8d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr
 800c8e8:	00010007 	.word	0x00010007

0800c8ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	68da      	ldr	r2, [r3, #12]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f022 0201 	bic.w	r2, r2, #1
 800c902:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6a1a      	ldr	r2, [r3, #32]
 800c90a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c90e:	4013      	ands	r3, r2
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10f      	bne.n	800c934 <HAL_TIM_Base_Stop_IT+0x48>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	6a1a      	ldr	r2, [r3, #32]
 800c91a:	f244 4344 	movw	r3, #17476	; 0x4444
 800c91e:	4013      	ands	r3, r2
 800c920:	2b00      	cmp	r3, #0
 800c922:	d107      	bne.n	800c934 <HAL_TIM_Base_Stop_IT+0x48>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f022 0201 	bic.w	r2, r2, #1
 800c932:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b086      	sub	sp, #24
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e097      	b.n	800ca8e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b00      	cmp	r3, #0
 800c968:	d106      	bne.n	800c978 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f7fb ffb4 	bl	80088e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2202      	movs	r2, #2
 800c97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	6812      	ldr	r2, [r2, #0]
 800c98a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c98e:	f023 0307 	bic.w	r3, r3, #7
 800c992:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4619      	mov	r1, r3
 800c99e:	4610      	mov	r0, r2
 800c9a0:	f000 fb1a 	bl	800cfd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9cc:	f023 0303 	bic.w	r3, r3, #3
 800c9d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	689a      	ldr	r2, [r3, #8]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	021b      	lsls	r3, r3, #8
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c9ea:	f023 030c 	bic.w	r3, r3, #12
 800c9ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c9f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	68da      	ldr	r2, [r3, #12]
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	021b      	lsls	r3, r3, #8
 800ca06:	4313      	orrs	r3, r2
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	011a      	lsls	r2, r3, #4
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	6a1b      	ldr	r3, [r3, #32]
 800ca18:	031b      	lsls	r3, r3, #12
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ca28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ca30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2201      	movs	r2, #1
 800ca68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca8c:	2300      	movs	r3, #0
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3718      	adds	r7, #24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b082      	sub	sp, #8
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	691b      	ldr	r3, [r3, #16]
 800caa4:	f003 0302 	and.w	r3, r3, #2
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d122      	bne.n	800caf2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	f003 0302 	and.w	r3, r3, #2
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d11b      	bne.n	800caf2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f06f 0202 	mvn.w	r2, #2
 800cac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d003      	beq.n	800cae0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fa5f 	bl	800cf9c <HAL_TIM_IC_CaptureCallback>
 800cade:	e005      	b.n	800caec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fa51 	bl	800cf88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fa62 	bl	800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	f003 0304 	and.w	r3, r3, #4
 800cafc:	2b04      	cmp	r3, #4
 800cafe:	d122      	bne.n	800cb46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	f003 0304 	and.w	r3, r3, #4
 800cb0a:	2b04      	cmp	r3, #4
 800cb0c:	d11b      	bne.n	800cb46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f06f 0204 	mvn.w	r2, #4
 800cb16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d003      	beq.n	800cb34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fa35 	bl	800cf9c <HAL_TIM_IC_CaptureCallback>
 800cb32:	e005      	b.n	800cb40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fa27 	bl	800cf88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fa38 	bl	800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	f003 0308 	and.w	r3, r3, #8
 800cb50:	2b08      	cmp	r3, #8
 800cb52:	d122      	bne.n	800cb9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	f003 0308 	and.w	r3, r3, #8
 800cb5e:	2b08      	cmp	r3, #8
 800cb60:	d11b      	bne.n	800cb9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f06f 0208 	mvn.w	r2, #8
 800cb6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2204      	movs	r2, #4
 800cb70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	69db      	ldr	r3, [r3, #28]
 800cb78:	f003 0303 	and.w	r3, r3, #3
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d003      	beq.n	800cb88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 fa0b 	bl	800cf9c <HAL_TIM_IC_CaptureCallback>
 800cb86:	e005      	b.n	800cb94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 f9fd 	bl	800cf88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 fa0e 	bl	800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	f003 0310 	and.w	r3, r3, #16
 800cba4:	2b10      	cmp	r3, #16
 800cba6:	d122      	bne.n	800cbee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	f003 0310 	and.w	r3, r3, #16
 800cbb2:	2b10      	cmp	r3, #16
 800cbb4:	d11b      	bne.n	800cbee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f06f 0210 	mvn.w	r2, #16
 800cbbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2208      	movs	r2, #8
 800cbc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	69db      	ldr	r3, [r3, #28]
 800cbcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f9e1 	bl	800cf9c <HAL_TIM_IC_CaptureCallback>
 800cbda:	e005      	b.n	800cbe8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 f9d3 	bl	800cf88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f9e4 	bl	800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	f003 0301 	and.w	r3, r3, #1
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d10e      	bne.n	800cc1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d107      	bne.n	800cc1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f06f 0201 	mvn.w	r2, #1
 800cc12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 f9ad 	bl	800cf74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc24:	2b80      	cmp	r3, #128	; 0x80
 800cc26:	d10e      	bne.n	800cc46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc32:	2b80      	cmp	r3, #128	; 0x80
 800cc34:	d107      	bne.n	800cc46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cc3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fc5f 	bl	800d504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc54:	d10e      	bne.n	800cc74 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc60:	2b80      	cmp	r3, #128	; 0x80
 800cc62:	d107      	bne.n	800cc74 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cc6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fc52 	bl	800d518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc7e:	2b40      	cmp	r3, #64	; 0x40
 800cc80:	d10e      	bne.n	800cca0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc8c:	2b40      	cmp	r3, #64	; 0x40
 800cc8e:	d107      	bne.n	800cca0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cc98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f992 	bl	800cfc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	f003 0320 	and.w	r3, r3, #32
 800ccaa:	2b20      	cmp	r3, #32
 800ccac:	d10e      	bne.n	800cccc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	f003 0320 	and.w	r3, r3, #32
 800ccb8:	2b20      	cmp	r3, #32
 800ccba:	d107      	bne.n	800cccc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f06f 0220 	mvn.w	r2, #32
 800ccc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 fc12 	bl	800d4f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ccd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccda:	d10f      	bne.n	800ccfc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccea:	d107      	bne.n	800ccfc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ccf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fc18 	bl	800d52c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd0a:	d10f      	bne.n	800cd2c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd1a:	d107      	bne.n	800cd2c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cd24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fc0a 	bl	800d540 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd3a:	d10f      	bne.n	800cd5c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd4a:	d107      	bne.n	800cd5c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cd54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fbfc 	bl	800d554 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	691b      	ldr	r3, [r3, #16]
 800cd62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd6a:	d10f      	bne.n	800cd8c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd7a:	d107      	bne.n	800cd8c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cd84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 fbee 	bl	800d568 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd8c:	bf00      	nop
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d101      	bne.n	800cdac <HAL_TIM_ConfigClockSource+0x18>
 800cda8:	2302      	movs	r3, #2
 800cdaa:	e0d2      	b.n	800cf52 <HAL_TIM_ConfigClockSource+0x1be>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800cdca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cdce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cde8:	f000 80a9 	beq.w	800cf3e <HAL_TIM_ConfigClockSource+0x1aa>
 800cdec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdf0:	d81a      	bhi.n	800ce28 <HAL_TIM_ConfigClockSource+0x94>
 800cdf2:	2b30      	cmp	r3, #48	; 0x30
 800cdf4:	f000 809a 	beq.w	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800cdf8:	2b30      	cmp	r3, #48	; 0x30
 800cdfa:	d809      	bhi.n	800ce10 <HAL_TIM_ConfigClockSource+0x7c>
 800cdfc:	2b10      	cmp	r3, #16
 800cdfe:	f000 8095 	beq.w	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce02:	2b20      	cmp	r3, #32
 800ce04:	f000 8092 	beq.w	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 808f 	beq.w	800cf2c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ce0e:	e097      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce10:	2b50      	cmp	r3, #80	; 0x50
 800ce12:	d05b      	beq.n	800cecc <HAL_TIM_ConfigClockSource+0x138>
 800ce14:	2b50      	cmp	r3, #80	; 0x50
 800ce16:	d802      	bhi.n	800ce1e <HAL_TIM_ConfigClockSource+0x8a>
 800ce18:	2b40      	cmp	r3, #64	; 0x40
 800ce1a:	d077      	beq.n	800cf0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ce1c:	e090      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce1e:	2b60      	cmp	r3, #96	; 0x60
 800ce20:	d064      	beq.n	800ceec <HAL_TIM_ConfigClockSource+0x158>
 800ce22:	2b70      	cmp	r3, #112	; 0x70
 800ce24:	d028      	beq.n	800ce78 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800ce26:	e08b      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce28:	4a4c      	ldr	r2, [pc, #304]	; (800cf5c <HAL_TIM_ConfigClockSource+0x1c8>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d07e      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce2e:	4a4b      	ldr	r2, [pc, #300]	; (800cf5c <HAL_TIM_ConfigClockSource+0x1c8>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d810      	bhi.n	800ce56 <HAL_TIM_ConfigClockSource+0xc2>
 800ce34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce38:	d078      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce3e:	d803      	bhi.n	800ce48 <HAL_TIM_ConfigClockSource+0xb4>
 800ce40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce44:	d02f      	beq.n	800cea6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ce46:	e07b      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ce4c:	d06e      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce4e:	4a44      	ldr	r2, [pc, #272]	; (800cf60 <HAL_TIM_ConfigClockSource+0x1cc>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d06b      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce54:	e074      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce56:	4a43      	ldr	r2, [pc, #268]	; (800cf64 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d067      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce5c:	4a41      	ldr	r2, [pc, #260]	; (800cf64 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d803      	bhi.n	800ce6a <HAL_TIM_ConfigClockSource+0xd6>
 800ce62:	4a41      	ldr	r2, [pc, #260]	; (800cf68 <HAL_TIM_ConfigClockSource+0x1d4>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d061      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce68:	e06a      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce6a:	4a40      	ldr	r2, [pc, #256]	; (800cf6c <HAL_TIM_ConfigClockSource+0x1d8>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d05d      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
 800ce70:	4a3f      	ldr	r2, [pc, #252]	; (800cf70 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d05a      	beq.n	800cf2c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce76:	e063      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6818      	ldr	r0, [r3, #0]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	6899      	ldr	r1, [r3, #8]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	f000 f9ca 	bl	800d220 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	609a      	str	r2, [r3, #8]
      break;
 800cea4:	e04c      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6818      	ldr	r0, [r3, #0]
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	6899      	ldr	r1, [r3, #8]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	f000 f9b3 	bl	800d220 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	689a      	ldr	r2, [r3, #8]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cec8:	609a      	str	r2, [r3, #8]
      break;
 800ceca:	e039      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6818      	ldr	r0, [r3, #0]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	6859      	ldr	r1, [r3, #4]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	461a      	mov	r2, r3
 800ceda:	f000 f925 	bl	800d128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2150      	movs	r1, #80	; 0x50
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 f97e 	bl	800d1e6 <TIM_ITRx_SetConfig>
      break;
 800ceea:	e029      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6818      	ldr	r0, [r3, #0]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	6859      	ldr	r1, [r3, #4]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	461a      	mov	r2, r3
 800cefa:	f000 f944 	bl	800d186 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2160      	movs	r1, #96	; 0x60
 800cf04:	4618      	mov	r0, r3
 800cf06:	f000 f96e 	bl	800d1e6 <TIM_ITRx_SetConfig>
      break;
 800cf0a:	e019      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6818      	ldr	r0, [r3, #0]
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	6859      	ldr	r1, [r3, #4]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	f000 f905 	bl	800d128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2140      	movs	r1, #64	; 0x40
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 f95e 	bl	800d1e6 <TIM_ITRx_SetConfig>
      break;
 800cf2a:	e009      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4619      	mov	r1, r3
 800cf36:	4610      	mov	r0, r2
 800cf38:	f000 f955 	bl	800d1e6 <TIM_ITRx_SetConfig>
      break;
 800cf3c:	e000      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800cf3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	00100030 	.word	0x00100030
 800cf60:	00100020 	.word	0x00100020
 800cf64:	00100050 	.word	0x00100050
 800cf68:	00100040 	.word	0x00100040
 800cf6c:	00100060 	.word	0x00100060
 800cf70:	00100070 	.word	0x00100070

0800cf74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a46      	ldr	r2, [pc, #280]	; (800d104 <TIM_Base_SetConfig+0x12c>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d017      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cff6:	d013      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a43      	ldr	r2, [pc, #268]	; (800d108 <TIM_Base_SetConfig+0x130>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d00f      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a42      	ldr	r2, [pc, #264]	; (800d10c <TIM_Base_SetConfig+0x134>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d00b      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a41      	ldr	r2, [pc, #260]	; (800d110 <TIM_Base_SetConfig+0x138>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d007      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a40      	ldr	r2, [pc, #256]	; (800d114 <TIM_Base_SetConfig+0x13c>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d003      	beq.n	800d020 <TIM_Base_SetConfig+0x48>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a3f      	ldr	r2, [pc, #252]	; (800d118 <TIM_Base_SetConfig+0x140>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d108      	bne.n	800d032 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a33      	ldr	r2, [pc, #204]	; (800d104 <TIM_Base_SetConfig+0x12c>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d023      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d040:	d01f      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a30      	ldr	r2, [pc, #192]	; (800d108 <TIM_Base_SetConfig+0x130>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d01b      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a2f      	ldr	r2, [pc, #188]	; (800d10c <TIM_Base_SetConfig+0x134>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d017      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a2e      	ldr	r2, [pc, #184]	; (800d110 <TIM_Base_SetConfig+0x138>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d013      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4a2d      	ldr	r2, [pc, #180]	; (800d114 <TIM_Base_SetConfig+0x13c>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d00f      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a2d      	ldr	r2, [pc, #180]	; (800d11c <TIM_Base_SetConfig+0x144>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d00b      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a2c      	ldr	r2, [pc, #176]	; (800d120 <TIM_Base_SetConfig+0x148>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d007      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4a2b      	ldr	r2, [pc, #172]	; (800d124 <TIM_Base_SetConfig+0x14c>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d003      	beq.n	800d082 <TIM_Base_SetConfig+0xaa>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a26      	ldr	r2, [pc, #152]	; (800d118 <TIM_Base_SetConfig+0x140>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d108      	bne.n	800d094 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	4313      	orrs	r3, r2
 800d092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	689a      	ldr	r2, [r3, #8]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a12      	ldr	r2, [pc, #72]	; (800d104 <TIM_Base_SetConfig+0x12c>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d013      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a14      	ldr	r2, [pc, #80]	; (800d114 <TIM_Base_SetConfig+0x13c>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d00f      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a14      	ldr	r2, [pc, #80]	; (800d11c <TIM_Base_SetConfig+0x144>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d00b      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a13      	ldr	r2, [pc, #76]	; (800d120 <TIM_Base_SetConfig+0x148>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d007      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a12      	ldr	r2, [pc, #72]	; (800d124 <TIM_Base_SetConfig+0x14c>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d003      	beq.n	800d0e8 <TIM_Base_SetConfig+0x110>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4a0d      	ldr	r2, [pc, #52]	; (800d118 <TIM_Base_SetConfig+0x140>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d103      	bne.n	800d0f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	691a      	ldr	r2, [r3, #16]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	615a      	str	r2, [r3, #20]
}
 800d0f6:	bf00      	nop
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	40012c00 	.word	0x40012c00
 800d108:	40000400 	.word	0x40000400
 800d10c:	40000800 	.word	0x40000800
 800d110:	40000c00 	.word	0x40000c00
 800d114:	40013400 	.word	0x40013400
 800d118:	40015000 	.word	0x40015000
 800d11c:	40014000 	.word	0x40014000
 800d120:	40014400 	.word	0x40014400
 800d124:	40014800 	.word	0x40014800

0800d128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d128:	b480      	push	{r7}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6a1b      	ldr	r3, [r3, #32]
 800d138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6a1b      	ldr	r3, [r3, #32]
 800d13e:	f023 0201 	bic.w	r2, r3, #1
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	699b      	ldr	r3, [r3, #24]
 800d14a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	011b      	lsls	r3, r3, #4
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	f023 030a 	bic.w	r3, r3, #10
 800d164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d166:	697a      	ldr	r2, [r7, #20]
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	693a      	ldr	r2, [r7, #16]
 800d172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	621a      	str	r2, [r3, #32]
}
 800d17a:	bf00      	nop
 800d17c:	371c      	adds	r7, #28
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d186:	b480      	push	{r7}
 800d188:	b087      	sub	sp, #28
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	60f8      	str	r0, [r7, #12]
 800d18e:	60b9      	str	r1, [r7, #8]
 800d190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6a1b      	ldr	r3, [r3, #32]
 800d196:	f023 0210 	bic.w	r2, r3, #16
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	699b      	ldr	r3, [r3, #24]
 800d1a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6a1b      	ldr	r3, [r3, #32]
 800d1a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d1b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	031b      	lsls	r3, r3, #12
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d1c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	011b      	lsls	r3, r3, #4
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	693a      	ldr	r2, [r7, #16]
 800d1d8:	621a      	str	r2, [r3, #32]
}
 800d1da:	bf00      	nop
 800d1dc:	371c      	adds	r7, #28
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr

0800d1e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d1e6:	b480      	push	{r7}
 800d1e8:	b085      	sub	sp, #20
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d1fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4313      	orrs	r3, r2
 800d208:	f043 0307 	orr.w	r3, r3, #7
 800d20c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	609a      	str	r2, [r3, #8]
}
 800d214:	bf00      	nop
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d220:	b480      	push	{r7}
 800d222:	b087      	sub	sp, #28
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
 800d22c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d23a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	021a      	lsls	r2, r3, #8
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	431a      	orrs	r2, r3
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	4313      	orrs	r3, r2
 800d248:	697a      	ldr	r2, [r7, #20]
 800d24a:	4313      	orrs	r3, r2
 800d24c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	697a      	ldr	r2, [r7, #20]
 800d252:	609a      	str	r2, [r3, #8]
}
 800d254:	bf00      	nop
 800d256:	371c      	adds	r7, #28
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d260:	b480      	push	{r7}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d270:	2b01      	cmp	r3, #1
 800d272:	d101      	bne.n	800d278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d274:	2302      	movs	r3, #2
 800d276:	e074      	b.n	800d362 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2202      	movs	r2, #2
 800d284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a34      	ldr	r2, [pc, #208]	; (800d370 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d009      	beq.n	800d2b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a33      	ldr	r2, [pc, #204]	; (800d374 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d004      	beq.n	800d2b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a31      	ldr	r2, [pc, #196]	; (800d378 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d108      	bne.n	800d2c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	68fa      	ldr	r2, [r7, #12]
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	68fa      	ldr	r2, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a21      	ldr	r2, [pc, #132]	; (800d370 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d022      	beq.n	800d336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2f8:	d01d      	beq.n	800d336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a1f      	ldr	r2, [pc, #124]	; (800d37c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d018      	beq.n	800d336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a1d      	ldr	r2, [pc, #116]	; (800d380 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d013      	beq.n	800d336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a1c      	ldr	r2, [pc, #112]	; (800d384 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d00e      	beq.n	800d336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a15      	ldr	r2, [pc, #84]	; (800d374 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d009      	beq.n	800d336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a18      	ldr	r2, [pc, #96]	; (800d388 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d004      	beq.n	800d336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a11      	ldr	r2, [pc, #68]	; (800d378 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d10c      	bne.n	800d350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d33c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	4313      	orrs	r3, r2
 800d346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d360:	2300      	movs	r3, #0
}
 800d362:	4618      	mov	r0, r3
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	40012c00 	.word	0x40012c00
 800d374:	40013400 	.word	0x40013400
 800d378:	40015000 	.word	0x40015000
 800d37c:	40000400 	.word	0x40000400
 800d380:	40000800 	.word	0x40000800
 800d384:	40000c00 	.word	0x40000c00
 800d388:	40014000 	.word	0x40014000

0800d38c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d396:	2300      	movs	r3, #0
 800d398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d101      	bne.n	800d3a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d3a4:	2302      	movs	r3, #2
 800d3a6:	e096      	b.n	800d4d6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	4313      	orrs	r3, r2
 800d402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d40e:	4313      	orrs	r3, r2
 800d410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	041b      	lsls	r3, r3, #16
 800d41e:	4313      	orrs	r3, r2
 800d420:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a2f      	ldr	r2, [pc, #188]	; (800d4e4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d009      	beq.n	800d440 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a2d      	ldr	r2, [pc, #180]	; (800d4e8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d004      	beq.n	800d440 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a2c      	ldr	r2, [pc, #176]	; (800d4ec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d106      	bne.n	800d44e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	69db      	ldr	r3, [r3, #28]
 800d44a:	4313      	orrs	r3, r2
 800d44c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a24      	ldr	r2, [pc, #144]	; (800d4e4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d009      	beq.n	800d46c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a22      	ldr	r2, [pc, #136]	; (800d4e8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d004      	beq.n	800d46c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a21      	ldr	r2, [pc, #132]	; (800d4ec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d12b      	bne.n	800d4c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d476:	051b      	lsls	r3, r3, #20
 800d478:	4313      	orrs	r3, r2
 800d47a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	6a1b      	ldr	r3, [r3, #32]
 800d486:	4313      	orrs	r3, r2
 800d488:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d494:	4313      	orrs	r3, r2
 800d496:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a11      	ldr	r2, [pc, #68]	; (800d4e4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d009      	beq.n	800d4b6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a10      	ldr	r2, [pc, #64]	; (800d4e8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d004      	beq.n	800d4b6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a0e      	ldr	r2, [pc, #56]	; (800d4ec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d106      	bne.n	800d4c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	40012c00 	.word	0x40012c00
 800d4e8:	40013400 	.word	0x40013400
 800d4ec:	40015000 	.word	0x40015000

0800d4f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d50c:	bf00      	nop
 800d50e:	370c      	adds	r7, #12
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d520:	bf00      	nop
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d534:	bf00      	nop
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d55c:	bf00      	nop
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <LL_EXTI_EnableIT_0_31>:
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800d584:	4b05      	ldr	r3, [pc, #20]	; (800d59c <LL_EXTI_EnableIT_0_31+0x20>)
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	4904      	ldr	r1, [pc, #16]	; (800d59c <LL_EXTI_EnableIT_0_31+0x20>)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	600b      	str	r3, [r1, #0]
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	40010400 	.word	0x40010400

0800d5a0 <LL_EXTI_EnableIT_32_63>:
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d5a8:	4b05      	ldr	r3, [pc, #20]	; (800d5c0 <LL_EXTI_EnableIT_32_63+0x20>)
 800d5aa:	6a1a      	ldr	r2, [r3, #32]
 800d5ac:	4904      	ldr	r1, [pc, #16]	; (800d5c0 <LL_EXTI_EnableIT_32_63+0x20>)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	620b      	str	r3, [r1, #32]
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	40010400 	.word	0x40010400

0800d5c4 <LL_EXTI_DisableIT_0_31>:
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d5cc:	4b06      	ldr	r3, [pc, #24]	; (800d5e8 <LL_EXTI_DisableIT_0_31+0x24>)
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	43db      	mvns	r3, r3
 800d5d4:	4904      	ldr	r1, [pc, #16]	; (800d5e8 <LL_EXTI_DisableIT_0_31+0x24>)
 800d5d6:	4013      	ands	r3, r2
 800d5d8:	600b      	str	r3, [r1, #0]
}
 800d5da:	bf00      	nop
 800d5dc:	370c      	adds	r7, #12
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	40010400 	.word	0x40010400

0800d5ec <LL_EXTI_DisableIT_32_63>:
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d5f4:	4b06      	ldr	r3, [pc, #24]	; (800d610 <LL_EXTI_DisableIT_32_63+0x24>)
 800d5f6:	6a1a      	ldr	r2, [r3, #32]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	43db      	mvns	r3, r3
 800d5fc:	4904      	ldr	r1, [pc, #16]	; (800d610 <LL_EXTI_DisableIT_32_63+0x24>)
 800d5fe:	4013      	ands	r3, r2
 800d600:	620b      	str	r3, [r1, #32]
}
 800d602:	bf00      	nop
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	40010400 	.word	0x40010400

0800d614 <LL_EXTI_EnableEvent_0_31>:
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d61c:	4b05      	ldr	r3, [pc, #20]	; (800d634 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d61e:	685a      	ldr	r2, [r3, #4]
 800d620:	4904      	ldr	r1, [pc, #16]	; (800d634 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4313      	orrs	r3, r2
 800d626:	604b      	str	r3, [r1, #4]
}
 800d628:	bf00      	nop
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	40010400 	.word	0x40010400

0800d638 <LL_EXTI_EnableEvent_32_63>:
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d640:	4b05      	ldr	r3, [pc, #20]	; (800d658 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d644:	4904      	ldr	r1, [pc, #16]	; (800d658 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4313      	orrs	r3, r2
 800d64a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d64c:	bf00      	nop
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr
 800d658:	40010400 	.word	0x40010400

0800d65c <LL_EXTI_DisableEvent_0_31>:
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d664:	4b06      	ldr	r3, [pc, #24]	; (800d680 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	43db      	mvns	r3, r3
 800d66c:	4904      	ldr	r1, [pc, #16]	; (800d680 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d66e:	4013      	ands	r3, r2
 800d670:	604b      	str	r3, [r1, #4]
}
 800d672:	bf00      	nop
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	40010400 	.word	0x40010400

0800d684 <LL_EXTI_DisableEvent_32_63>:
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d68c:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d68e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	43db      	mvns	r3, r3
 800d694:	4904      	ldr	r1, [pc, #16]	; (800d6a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d696:	4013      	ands	r3, r2
 800d698:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d69a:	bf00      	nop
 800d69c:	370c      	adds	r7, #12
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	40010400 	.word	0x40010400

0800d6ac <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d6b4:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d6b6:	689a      	ldr	r2, [r3, #8]
 800d6b8:	4904      	ldr	r1, [pc, #16]	; (800d6cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	608b      	str	r3, [r1, #8]
}
 800d6c0:	bf00      	nop
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr
 800d6cc:	40010400 	.word	0x40010400

0800d6d0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d6d8:	4b05      	ldr	r3, [pc, #20]	; (800d6f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d6da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6dc:	4904      	ldr	r1, [pc, #16]	; (800d6f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d6e4:	bf00      	nop
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr
 800d6f0:	40010400 	.word	0x40010400

0800d6f4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d6fc:	4b06      	ldr	r3, [pc, #24]	; (800d718 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d6fe:	689a      	ldr	r2, [r3, #8]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	43db      	mvns	r3, r3
 800d704:	4904      	ldr	r1, [pc, #16]	; (800d718 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d706:	4013      	ands	r3, r2
 800d708:	608b      	str	r3, [r1, #8]
}
 800d70a:	bf00      	nop
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	40010400 	.word	0x40010400

0800d71c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d724:	4b06      	ldr	r3, [pc, #24]	; (800d740 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d726:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	43db      	mvns	r3, r3
 800d72c:	4904      	ldr	r1, [pc, #16]	; (800d740 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d72e:	4013      	ands	r3, r2
 800d730:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d732:	bf00      	nop
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	40010400 	.word	0x40010400

0800d744 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d74c:	4b05      	ldr	r3, [pc, #20]	; (800d764 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d74e:	68da      	ldr	r2, [r3, #12]
 800d750:	4904      	ldr	r1, [pc, #16]	; (800d764 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4313      	orrs	r3, r2
 800d756:	60cb      	str	r3, [r1, #12]
}
 800d758:	bf00      	nop
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr
 800d764:	40010400 	.word	0x40010400

0800d768 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d770:	4b05      	ldr	r3, [pc, #20]	; (800d788 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d774:	4904      	ldr	r1, [pc, #16]	; (800d788 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4313      	orrs	r3, r2
 800d77a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr
 800d788:	40010400 	.word	0x40010400

0800d78c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d794:	4b06      	ldr	r3, [pc, #24]	; (800d7b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d796:	68da      	ldr	r2, [r3, #12]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	43db      	mvns	r3, r3
 800d79c:	4904      	ldr	r1, [pc, #16]	; (800d7b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d79e:	4013      	ands	r3, r2
 800d7a0:	60cb      	str	r3, [r1, #12]
}
 800d7a2:	bf00      	nop
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	40010400 	.word	0x40010400

0800d7b4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d7bc:	4b06      	ldr	r3, [pc, #24]	; (800d7d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	43db      	mvns	r3, r3
 800d7c4:	4904      	ldr	r1, [pc, #16]	; (800d7d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d7ca:	bf00      	nop
 800d7cc:	370c      	adds	r7, #12
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	40010400 	.word	0x40010400

0800d7dc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	7a1b      	ldrb	r3, [r3, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f000 80c8 	beq.w	800d982 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d05d      	beq.n	800d8b6 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	7a5b      	ldrb	r3, [r3, #9]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d00e      	beq.n	800d820 <LL_EXTI_Init+0x44>
 800d802:	2b02      	cmp	r3, #2
 800d804:	d017      	beq.n	800d836 <LL_EXTI_Init+0x5a>
 800d806:	2b00      	cmp	r3, #0
 800d808:	d120      	bne.n	800d84c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4618      	mov	r0, r3
 800d810:	f7ff ff24 	bl	800d65c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff feaf 	bl	800d57c <LL_EXTI_EnableIT_0_31>
          break;
 800d81e:	e018      	b.n	800d852 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff fecd 	bl	800d5c4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff fef0 	bl	800d614 <LL_EXTI_EnableEvent_0_31>
          break;
 800d834:	e00d      	b.n	800d852 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff fe9e 	bl	800d57c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4618      	mov	r0, r3
 800d846:	f7ff fee5 	bl	800d614 <LL_EXTI_EnableEvent_0_31>
          break;
 800d84a:	e002      	b.n	800d852 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d84c:	2301      	movs	r3, #1
 800d84e:	60fb      	str	r3, [r7, #12]
          break;
 800d850:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	7a9b      	ldrb	r3, [r3, #10]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d02d      	beq.n	800d8b6 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	7a9b      	ldrb	r3, [r3, #10]
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d00e      	beq.n	800d880 <LL_EXTI_Init+0xa4>
 800d862:	2b03      	cmp	r3, #3
 800d864:	d017      	beq.n	800d896 <LL_EXTI_Init+0xba>
 800d866:	2b01      	cmp	r3, #1
 800d868:	d120      	bne.n	800d8ac <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff ff8c 	bl	800d78c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4618      	mov	r0, r3
 800d87a:	f7ff ff17 	bl	800d6ac <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d87e:	e01b      	b.n	800d8b8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff ff35 	bl	800d6f4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4618      	mov	r0, r3
 800d890:	f7ff ff58 	bl	800d744 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d894:	e010      	b.n	800d8b8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7ff ff06 	bl	800d6ac <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7ff ff4d 	bl	800d744 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d8aa:	e005      	b.n	800d8b8 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f043 0302 	orr.w	r3, r3, #2
 800d8b2:	60fb      	str	r3, [r7, #12]
            break;
 800d8b4:	e000      	b.n	800d8b8 <LL_EXTI_Init+0xdc>
        }
      }
 800d8b6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d075      	beq.n	800d9ac <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7a5b      	ldrb	r3, [r3, #9]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d00e      	beq.n	800d8e6 <LL_EXTI_Init+0x10a>
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d017      	beq.n	800d8fc <LL_EXTI_Init+0x120>
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d120      	bne.n	800d912 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7ff fed5 	bl	800d684 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fe5e 	bl	800d5a0 <LL_EXTI_EnableIT_32_63>
          break;
 800d8e4:	e01a      	b.n	800d91c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff fe7e 	bl	800d5ec <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7ff fe9f 	bl	800d638 <LL_EXTI_EnableEvent_32_63>
          break;
 800d8fa:	e00f      	b.n	800d91c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff fe4d 	bl	800d5a0 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7ff fe94 	bl	800d638 <LL_EXTI_EnableEvent_32_63>
          break;
 800d910:	e004      	b.n	800d91c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f043 0304 	orr.w	r3, r3, #4
 800d918:	60fb      	str	r3, [r7, #12]
          break;
 800d91a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	7a9b      	ldrb	r3, [r3, #10]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d043      	beq.n	800d9ac <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	7a9b      	ldrb	r3, [r3, #10]
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d00e      	beq.n	800d94a <LL_EXTI_Init+0x16e>
 800d92c:	2b03      	cmp	r3, #3
 800d92e:	d017      	beq.n	800d960 <LL_EXTI_Init+0x184>
 800d930:	2b01      	cmp	r3, #1
 800d932:	d120      	bne.n	800d976 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	4618      	mov	r0, r3
 800d93a:	f7ff ff3b 	bl	800d7b4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	4618      	mov	r0, r3
 800d944:	f7ff fec4 	bl	800d6d0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d948:	e031      	b.n	800d9ae <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	4618      	mov	r0, r3
 800d950:	f7ff fee4 	bl	800d71c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff ff05 	bl	800d768 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d95e:	e026      	b.n	800d9ae <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	4618      	mov	r0, r3
 800d966:	f7ff feb3 	bl	800d6d0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	4618      	mov	r0, r3
 800d970:	f7ff fefa 	bl	800d768 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d974:	e01b      	b.n	800d9ae <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f043 0305 	orr.w	r3, r3, #5
 800d97c:	60fb      	str	r3, [r7, #12]
            break;
 800d97e:	bf00      	nop
 800d980:	e015      	b.n	800d9ae <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4618      	mov	r0, r3
 800d988:	f7ff fe1c 	bl	800d5c4 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff fe63 	bl	800d65c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff fe26 	bl	800d5ec <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff fe6d 	bl	800d684 <LL_EXTI_DisableEvent_32_63>
 800d9aa:	e000      	b.n	800d9ae <LL_EXTI_Init+0x1d2>
      }
 800d9ac:	bf00      	nop
  }

  return status;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3710      	adds	r7, #16
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <LL_GPIO_SetPinMode>:
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b089      	sub	sp, #36	; 0x24
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	fa93 f3a3 	rbit	r3, r3
 800d9d2:	613b      	str	r3, [r7, #16]
  return result;
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	fab3 f383 	clz	r3, r3
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	005b      	lsls	r3, r3, #1
 800d9de:	2103      	movs	r1, #3
 800d9e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d9e4:	43db      	mvns	r3, r3
 800d9e6:	401a      	ands	r2, r3
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	fa93 f3a3 	rbit	r3, r3
 800d9f2:	61bb      	str	r3, [r7, #24]
  return result;
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	fab3 f383 	clz	r3, r3
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	6879      	ldr	r1, [r7, #4]
 800da00:	fa01 f303 	lsl.w	r3, r1, r3
 800da04:	431a      	orrs	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	601a      	str	r2, [r3, #0]
}
 800da0a:	bf00      	nop
 800da0c:	3724      	adds	r7, #36	; 0x24
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr

0800da16 <LL_GPIO_SetPinOutputType>:
{
 800da16:	b480      	push	{r7}
 800da18:	b085      	sub	sp, #20
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	60f8      	str	r0, [r7, #12]
 800da1e:	60b9      	str	r1, [r7, #8]
 800da20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	685a      	ldr	r2, [r3, #4]
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	43db      	mvns	r3, r3
 800da2a:	401a      	ands	r2, r3
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	6879      	ldr	r1, [r7, #4]
 800da30:	fb01 f303 	mul.w	r3, r1, r3
 800da34:	431a      	orrs	r2, r3
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	605a      	str	r2, [r3, #4]
}
 800da3a:	bf00      	nop
 800da3c:	3714      	adds	r7, #20
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <LL_GPIO_SetPinSpeed>:
{
 800da46:	b480      	push	{r7}
 800da48:	b089      	sub	sp, #36	; 0x24
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	60f8      	str	r0, [r7, #12]
 800da4e:	60b9      	str	r1, [r7, #8]
 800da50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	689a      	ldr	r2, [r3, #8]
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	fa93 f3a3 	rbit	r3, r3
 800da60:	613b      	str	r3, [r7, #16]
  return result;
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	fab3 f383 	clz	r3, r3
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	2103      	movs	r1, #3
 800da6e:	fa01 f303 	lsl.w	r3, r1, r3
 800da72:	43db      	mvns	r3, r3
 800da74:	401a      	ands	r2, r3
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	fa93 f3a3 	rbit	r3, r3
 800da80:	61bb      	str	r3, [r7, #24]
  return result;
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	fab3 f383 	clz	r3, r3
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	fa01 f303 	lsl.w	r3, r1, r3
 800da92:	431a      	orrs	r2, r3
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	609a      	str	r2, [r3, #8]
}
 800da98:	bf00      	nop
 800da9a:	3724      	adds	r7, #36	; 0x24
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <LL_GPIO_SetPinPull>:
{
 800daa4:	b480      	push	{r7}
 800daa6:	b089      	sub	sp, #36	; 0x24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	68da      	ldr	r2, [r3, #12]
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	fa93 f3a3 	rbit	r3, r3
 800dabe:	613b      	str	r3, [r7, #16]
  return result;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	fab3 f383 	clz	r3, r3
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	2103      	movs	r1, #3
 800dacc:	fa01 f303 	lsl.w	r3, r1, r3
 800dad0:	43db      	mvns	r3, r3
 800dad2:	401a      	ands	r2, r3
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	fa93 f3a3 	rbit	r3, r3
 800dade:	61bb      	str	r3, [r7, #24]
  return result;
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	fab3 f383 	clz	r3, r3
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	6879      	ldr	r1, [r7, #4]
 800daec:	fa01 f303 	lsl.w	r3, r1, r3
 800daf0:	431a      	orrs	r2, r3
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	60da      	str	r2, [r3, #12]
}
 800daf6:	bf00      	nop
 800daf8:	3724      	adds	r7, #36	; 0x24
 800dafa:	46bd      	mov	sp, r7
 800dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db00:	4770      	bx	lr

0800db02 <LL_GPIO_SetAFPin_0_7>:
{
 800db02:	b480      	push	{r7}
 800db04:	b089      	sub	sp, #36	; 0x24
 800db06:	af00      	add	r7, sp, #0
 800db08:	60f8      	str	r0, [r7, #12]
 800db0a:	60b9      	str	r1, [r7, #8]
 800db0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6a1a      	ldr	r2, [r3, #32]
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	fa93 f3a3 	rbit	r3, r3
 800db1c:	613b      	str	r3, [r7, #16]
  return result;
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	fab3 f383 	clz	r3, r3
 800db24:	b2db      	uxtb	r3, r3
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	210f      	movs	r1, #15
 800db2a:	fa01 f303 	lsl.w	r3, r1, r3
 800db2e:	43db      	mvns	r3, r3
 800db30:	401a      	ands	r2, r3
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	fa93 f3a3 	rbit	r3, r3
 800db3c:	61bb      	str	r3, [r7, #24]
  return result;
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	fab3 f383 	clz	r3, r3
 800db44:	b2db      	uxtb	r3, r3
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	6879      	ldr	r1, [r7, #4]
 800db4a:	fa01 f303 	lsl.w	r3, r1, r3
 800db4e:	431a      	orrs	r2, r3
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	621a      	str	r2, [r3, #32]
}
 800db54:	bf00      	nop
 800db56:	3724      	adds	r7, #36	; 0x24
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <LL_GPIO_SetAFPin_8_15>:
{
 800db60:	b480      	push	{r7}
 800db62:	b089      	sub	sp, #36	; 0x24
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	0a1b      	lsrs	r3, r3, #8
 800db74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	fa93 f3a3 	rbit	r3, r3
 800db7c:	613b      	str	r3, [r7, #16]
  return result;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	fab3 f383 	clz	r3, r3
 800db84:	b2db      	uxtb	r3, r3
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	210f      	movs	r1, #15
 800db8a:	fa01 f303 	lsl.w	r3, r1, r3
 800db8e:	43db      	mvns	r3, r3
 800db90:	401a      	ands	r2, r3
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	0a1b      	lsrs	r3, r3, #8
 800db96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	fa93 f3a3 	rbit	r3, r3
 800db9e:	61bb      	str	r3, [r7, #24]
  return result;
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	fab3 f383 	clz	r3, r3
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	6879      	ldr	r1, [r7, #4]
 800dbac:	fa01 f303 	lsl.w	r3, r1, r3
 800dbb0:	431a      	orrs	r2, r3
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dbb6:	bf00      	nop
 800dbb8:	3724      	adds	r7, #36	; 0x24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr

0800dbc2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b086      	sub	sp, #24
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
 800dbca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	fa93 f3a3 	rbit	r3, r3
 800dbd8:	60bb      	str	r3, [r7, #8]
  return result;
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	fab3 f383 	clz	r3, r3
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800dbe4:	e040      	b.n	800dc68 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	2101      	movs	r1, #1
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	fa01 f303 	lsl.w	r3, r1, r3
 800dbf2:	4013      	ands	r3, r2
 800dbf4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d032      	beq.n	800dc62 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	461a      	mov	r2, r3
 800dc02:	6939      	ldr	r1, [r7, #16]
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7ff fed7 	bl	800d9b8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d003      	beq.n	800dc1a <LL_GPIO_Init+0x58>
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d106      	bne.n	800dc28 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	6939      	ldr	r1, [r7, #16]
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7ff ff0f 	bl	800da46 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	691b      	ldr	r3, [r3, #16]
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	6939      	ldr	r1, [r7, #16]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7ff ff37 	bl	800daa4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d111      	bne.n	800dc62 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	2bff      	cmp	r3, #255	; 0xff
 800dc42:	d807      	bhi.n	800dc54 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	695b      	ldr	r3, [r3, #20]
 800dc48:	461a      	mov	r2, r3
 800dc4a:	6939      	ldr	r1, [r7, #16]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7ff ff58 	bl	800db02 <LL_GPIO_SetAFPin_0_7>
 800dc52:	e006      	b.n	800dc62 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	695b      	ldr	r3, [r3, #20]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	6939      	ldr	r1, [r7, #16]
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f7ff ff7f 	bl	800db60 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	3301      	adds	r3, #1
 800dc66:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	fa22 f303 	lsr.w	r3, r2, r3
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d1b7      	bne.n	800dbe6 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d003      	beq.n	800dc86 <LL_GPIO_Init+0xc4>
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d107      	bne.n	800dc96 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	6819      	ldr	r1, [r3, #0]
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff fec0 	bl	800da16 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800dca0:	b590      	push	{r4, r7, lr}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	4604      	mov	r4, r0
 800dca8:	4608      	mov	r0, r1
 800dcaa:	4611      	mov	r1, r2
 800dcac:	461a      	mov	r2, r3
 800dcae:	4623      	mov	r3, r4
 800dcb0:	80fb      	strh	r3, [r7, #6]
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	80bb      	strh	r3, [r7, #4]
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	70fb      	strb	r3, [r7, #3]
 800dcba:	4613      	mov	r3, r2
 800dcbc:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	60fb      	str	r3, [r7, #12]
 800dcc2:	e026      	b.n	800dd12 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	60bb      	str	r3, [r7, #8]
 800dcc8:	e01c      	b.n	800dd04 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	b29a      	uxth	r2, r3
 800dcce:	88fb      	ldrh	r3, [r7, #6]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	b298      	uxth	r0, r3
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcda:	4413      	add	r3, r2
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dce2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	88bb      	ldrh	r3, [r7, #4]
 800dcea:	4413      	add	r3, r2
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	4413      	add	r3, r2
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	883a      	ldrh	r2, [r7, #0]
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	f000 fc1f 	bl	800e53c <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	3301      	adds	r3, #1
 800dd02:	60bb      	str	r3, [r7, #8]
 800dd04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	dbde      	blt.n	800dcca <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	60fb      	str	r3, [r7, #12]
 800dd12:	78fb      	ldrb	r3, [r7, #3]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	dbd4      	blt.n	800dcc4 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800dd1a:	bf00      	nop
 800dd1c:	3714      	adds	r7, #20
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd90      	pop	{r4, r7, pc}

0800dd22 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800dd22:	b590      	push	{r4, r7, lr}
 800dd24:	b087      	sub	sp, #28
 800dd26:	af02      	add	r7, sp, #8
 800dd28:	4604      	mov	r4, r0
 800dd2a:	4608      	mov	r0, r1
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	461a      	mov	r2, r3
 800dd30:	4623      	mov	r3, r4
 800dd32:	80fb      	strh	r3, [r7, #6]
 800dd34:	4603      	mov	r3, r0
 800dd36:	80bb      	strh	r3, [r7, #4]
 800dd38:	460b      	mov	r3, r1
 800dd3a:	807b      	strh	r3, [r7, #2]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800dd40:	2300      	movs	r3, #0
 800dd42:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800dd44:	7bfa      	ldrb	r2, [r7, #15]
 800dd46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d939      	bls.n	800ddc2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800dd4e:	88ba      	ldrh	r2, [r7, #4]
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
 800dd52:	441a      	add	r2, r3
 800dd54:	88b9      	ldrh	r1, [r7, #4]
 800dd56:	883b      	ldrh	r3, [r7, #0]
 800dd58:	4419      	add	r1, r3
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
 800dd5c:	1acb      	subs	r3, r1, r3
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	f000 8089 	beq.w	800de76 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800dd64:	88fa      	ldrh	r2, [r7, #6]
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	441a      	add	r2, r3
 800dd6a:	88f9      	ldrh	r1, [r7, #6]
 800dd6c:	887b      	ldrh	r3, [r7, #2]
 800dd6e:	4419      	add	r1, r3
 800dd70:	7bfb      	ldrb	r3, [r7, #15]
 800dd72:	1acb      	subs	r3, r1, r3
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d07e      	beq.n	800de76 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	88fb      	ldrh	r3, [r7, #6]
 800dd7e:	4413      	add	r3, r2
 800dd80:	b298      	uxth	r0, r3
 800dd82:	7bfb      	ldrb	r3, [r7, #15]
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	88bb      	ldrh	r3, [r7, #4]
 800dd88:	4413      	add	r3, r2
 800dd8a:	b299      	uxth	r1, r3
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	887a      	ldrh	r2, [r7, #2]
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	b29c      	uxth	r4, r3
 800dd9e:	7bfb      	ldrb	r3, [r7, #15]
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	005b      	lsls	r3, r3, #1
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	883a      	ldrh	r2, [r7, #0]
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	3301      	adds	r3, #1
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	2304      	movs	r3, #4
 800ddb2:	9301      	str	r3, [sp, #4]
 800ddb4:	8c3b      	ldrh	r3, [r7, #32]
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	4613      	mov	r3, r2
 800ddba:	4622      	mov	r2, r4
 800ddbc:	f000 fd18 	bl	800e7f0 <ILI9341_Draw_Rectangle>
				goto finish;
 800ddc0:	e05a      	b.n	800de78 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800ddc2:	7bfb      	ldrb	r3, [r7, #15]
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	88fb      	ldrh	r3, [r7, #6]
 800ddc8:	4413      	add	r3, r2
 800ddca:	b298      	uxth	r0, r3
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	88bb      	ldrh	r3, [r7, #4]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	887a      	ldrh	r2, [r7, #2]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800dde0:	3301      	adds	r3, #1
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dde6:	f000 fa6b 	bl	800e2c0 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800ddea:	7bfb      	ldrb	r3, [r7, #15]
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	88fb      	ldrh	r3, [r7, #6]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	b298      	uxth	r0, r3
										(y + h) - b,
 800ddf4:	88ba      	ldrh	r2, [r7, #4]
 800ddf6:	883b      	ldrh	r3, [r7, #0]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	b299      	uxth	r1, r3
										(w - b)+1,
 800de04:	7bfb      	ldrb	r3, [r7, #15]
 800de06:	b29b      	uxth	r3, r3
 800de08:	887a      	ldrh	r2, [r7, #2]
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800de0e:	3301      	adds	r3, #1
 800de10:	b29a      	uxth	r2, r3
 800de12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de14:	f000 fa54 	bl	800e2c0 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800de18:	7bfb      	ldrb	r3, [r7, #15]
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	88fb      	ldrh	r3, [r7, #6]
 800de1e:	4413      	add	r3, r2
 800de20:	b298      	uxth	r0, r3
 800de22:	7bfb      	ldrb	r3, [r7, #15]
 800de24:	b29a      	uxth	r2, r3
 800de26:	88bb      	ldrh	r3, [r7, #4]
 800de28:	4413      	add	r3, r2
 800de2a:	b299      	uxth	r1, r3
 800de2c:	7bfb      	ldrb	r3, [r7, #15]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	005b      	lsls	r3, r3, #1
 800de32:	b29b      	uxth	r3, r3
 800de34:	883a      	ldrh	r2, [r7, #0]
 800de36:	1ad3      	subs	r3, r2, r3
 800de38:	b29a      	uxth	r2, r3
 800de3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de3c:	f000 faa4 	bl	800e388 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800de40:	88fa      	ldrh	r2, [r7, #6]
 800de42:	887b      	ldrh	r3, [r7, #2]
 800de44:	4413      	add	r3, r2
 800de46:	b29a      	uxth	r2, r3
 800de48:	7bfb      	ldrb	r3, [r7, #15]
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	1ad3      	subs	r3, r2, r3
 800de4e:	b298      	uxth	r0, r3
 800de50:	7bfb      	ldrb	r3, [r7, #15]
 800de52:	b29a      	uxth	r2, r3
 800de54:	88bb      	ldrh	r3, [r7, #4]
 800de56:	4413      	add	r3, r2
 800de58:	b299      	uxth	r1, r3
 800de5a:	7bfb      	ldrb	r3, [r7, #15]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	b29b      	uxth	r3, r3
 800de62:	883a      	ldrh	r2, [r7, #0]
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	b29a      	uxth	r2, r3
 800de68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de6a:	f000 fa8d 	bl	800e388 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800de6e:	7bfb      	ldrb	r3, [r7, #15]
 800de70:	3301      	adds	r3, #1
 800de72:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800de74:	e766      	b.n	800dd44 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800de76:	bf00      	nop
	// done
	return;
 800de78:	bf00      	nop
}
 800de7a:	3714      	adds	r7, #20
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd90      	pop	{r4, r7, pc}

0800de80 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800de80:	b590      	push	{r4, r7, lr}
 800de82:	b089      	sub	sp, #36	; 0x24
 800de84:	af02      	add	r7, sp, #8
 800de86:	4604      	mov	r4, r0
 800de88:	4608      	mov	r0, r1
 800de8a:	4611      	mov	r1, r2
 800de8c:	461a      	mov	r2, r3
 800de8e:	4623      	mov	r3, r4
 800de90:	71fb      	strb	r3, [r7, #7]
 800de92:	4603      	mov	r3, r0
 800de94:	80bb      	strh	r3, [r7, #4]
 800de96:	460b      	mov	r3, r1
 800de98:	807b      	strh	r3, [r7, #2]
 800de9a:	4613      	mov	r3, r2
 800de9c:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800de9e:	79fb      	ldrb	r3, [r7, #7]
 800dea0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800dea2:	7dfb      	ldrb	r3, [r7, #23]
 800dea4:	2b1f      	cmp	r3, #31
 800dea6:	d802      	bhi.n	800deae <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	71fb      	strb	r3, [r7, #7]
 800deac:	e002      	b.n	800deb4 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800deae:	7dfb      	ldrb	r3, [r7, #23]
 800deb0:	3b20      	subs	r3, #32
 800deb2:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800deb4:	2300      	movs	r3, #0
 800deb6:	753b      	strb	r3, [r7, #20]
 800deb8:	e012      	b.n	800dee0 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800deba:	7dfa      	ldrb	r2, [r7, #23]
 800debc:	7d38      	ldrb	r0, [r7, #20]
 800debe:	7d39      	ldrb	r1, [r7, #20]
 800dec0:	4c48      	ldr	r4, [pc, #288]	; (800dfe4 <ILI9341_Draw_Char+0x164>)
 800dec2:	4613      	mov	r3, r2
 800dec4:	005b      	lsls	r3, r3, #1
 800dec6:	4413      	add	r3, r2
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	4423      	add	r3, r4
 800decc:	4403      	add	r3, r0
 800dece:	781a      	ldrb	r2, [r3, #0]
 800ded0:	f107 0318 	add.w	r3, r7, #24
 800ded4:	440b      	add	r3, r1
 800ded6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800deda:	7d3b      	ldrb	r3, [r7, #20]
 800dedc:	3301      	adds	r3, #1
 800dede:	753b      	strb	r3, [r7, #20]
 800dee0:	7d3b      	ldrb	r3, [r7, #20]
 800dee2:	2b05      	cmp	r3, #5
 800dee4:	d9e9      	bls.n	800deba <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800dee6:	2300      	movs	r3, #0
 800dee8:	757b      	strb	r3, [r7, #21]
 800deea:	e074      	b.n	800dfd6 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800deec:	2300      	movs	r3, #0
 800deee:	75bb      	strb	r3, [r7, #22]
 800def0:	e06b      	b.n	800dfca <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800def2:	7d7b      	ldrb	r3, [r7, #21]
 800def4:	f107 0218 	add.w	r2, r7, #24
 800def8:	4413      	add	r3, r2
 800defa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800defe:	461a      	mov	r2, r3
 800df00:	7dbb      	ldrb	r3, [r7, #22]
 800df02:	fa42 f303 	asr.w	r3, r2, r3
 800df06:	f003 0301 	and.w	r3, r3, #1
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d02d      	beq.n	800df6a <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800df0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df10:	2b01      	cmp	r3, #1
 800df12:	d10e      	bne.n	800df32 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800df14:	7d7b      	ldrb	r3, [r7, #21]
 800df16:	b29a      	uxth	r2, r3
 800df18:	88bb      	ldrh	r3, [r7, #4]
 800df1a:	4413      	add	r3, r2
 800df1c:	b298      	uxth	r0, r3
 800df1e:	7dbb      	ldrb	r3, [r7, #22]
 800df20:	b29a      	uxth	r2, r3
 800df22:	887b      	ldrh	r3, [r7, #2]
 800df24:	4413      	add	r3, r2
 800df26:	b29b      	uxth	r3, r3
 800df28:	883a      	ldrh	r2, [r7, #0]
 800df2a:	4619      	mov	r1, r3
 800df2c:	f000 fb06 	bl	800e53c <ILI9341_Draw_Pixel>
 800df30:	e048      	b.n	800dfc4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800df32:	7d7b      	ldrb	r3, [r7, #21]
 800df34:	b29b      	uxth	r3, r3
 800df36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800df38:	fb12 f303 	smulbb	r3, r2, r3
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	88bb      	ldrh	r3, [r7, #4]
 800df40:	4413      	add	r3, r2
 800df42:	b298      	uxth	r0, r3
 800df44:	7dbb      	ldrb	r3, [r7, #22]
 800df46:	b29b      	uxth	r3, r3
 800df48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800df4a:	fb12 f303 	smulbb	r3, r2, r3
 800df4e:	b29a      	uxth	r2, r3
 800df50:	887b      	ldrh	r3, [r7, #2]
 800df52:	4413      	add	r3, r2
 800df54:	b299      	uxth	r1, r3
 800df56:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800df58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800df5a:	2301      	movs	r3, #1
 800df5c:	9301      	str	r3, [sp, #4]
 800df5e:	883b      	ldrh	r3, [r7, #0]
 800df60:	9300      	str	r3, [sp, #0]
 800df62:	4623      	mov	r3, r4
 800df64:	f000 fc44 	bl	800e7f0 <ILI9341_Draw_Rectangle>
 800df68:	e02c      	b.n	800dfc4 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800df6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d10e      	bne.n	800df8e <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800df70:	7d7b      	ldrb	r3, [r7, #21]
 800df72:	b29a      	uxth	r2, r3
 800df74:	88bb      	ldrh	r3, [r7, #4]
 800df76:	4413      	add	r3, r2
 800df78:	b298      	uxth	r0, r3
 800df7a:	7dbb      	ldrb	r3, [r7, #22]
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	887b      	ldrh	r3, [r7, #2]
 800df80:	4413      	add	r3, r2
 800df82:	b29b      	uxth	r3, r3
 800df84:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800df86:	4619      	mov	r1, r3
 800df88:	f000 fad8 	bl	800e53c <ILI9341_Draw_Pixel>
 800df8c:	e01a      	b.n	800dfc4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800df8e:	7d7b      	ldrb	r3, [r7, #21]
 800df90:	b29b      	uxth	r3, r3
 800df92:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800df94:	fb12 f303 	smulbb	r3, r2, r3
 800df98:	b29a      	uxth	r2, r3
 800df9a:	88bb      	ldrh	r3, [r7, #4]
 800df9c:	4413      	add	r3, r2
 800df9e:	b298      	uxth	r0, r3
 800dfa0:	7dbb      	ldrb	r3, [r7, #22]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dfa6:	fb12 f303 	smulbb	r3, r2, r3
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	887b      	ldrh	r3, [r7, #2]
 800dfae:	4413      	add	r3, r2
 800dfb0:	b299      	uxth	r1, r3
 800dfb2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800dfb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	9301      	str	r3, [sp, #4]
 800dfba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	4623      	mov	r3, r4
 800dfc0:	f000 fc16 	bl	800e7f0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800dfc4:	7dbb      	ldrb	r3, [r7, #22]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	75bb      	strb	r3, [r7, #22]
 800dfca:	7dbb      	ldrb	r3, [r7, #22]
 800dfcc:	2b07      	cmp	r3, #7
 800dfce:	d990      	bls.n	800def2 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800dfd0:	7d7b      	ldrb	r3, [r7, #21]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	757b      	strb	r3, [r7, #21]
 800dfd6:	7d7b      	ldrb	r3, [r7, #21]
 800dfd8:	2b05      	cmp	r3, #5
 800dfda:	d987      	bls.n	800deec <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800dfdc:	bf00      	nop
 800dfde:	371c      	adds	r7, #28
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd90      	pop	{r4, r7, pc}
 800dfe4:	08013b34 	.word	0x08013b34

0800dfe8 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800dfe8:	b590      	push	{r4, r7, lr}
 800dfea:	b087      	sub	sp, #28
 800dfec:	af02      	add	r7, sp, #8
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	4608      	mov	r0, r1
 800dff2:	4611      	mov	r1, r2
 800dff4:	461a      	mov	r2, r3
 800dff6:	4603      	mov	r3, r0
 800dff8:	817b      	strh	r3, [r7, #10]
 800dffa:	460b      	mov	r3, r1
 800dffc:	813b      	strh	r3, [r7, #8]
 800dffe:	4613      	mov	r3, r2
 800e000:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800e002:	897b      	ldrh	r3, [r7, #10]
 800e004:	3b01      	subs	r3, #1
 800e006:	b298      	uxth	r0, r3
 800e008:	8c3b      	ldrh	r3, [r7, #32]
 800e00a:	00db      	lsls	r3, r3, #3
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e010:	8939      	ldrh	r1, [r7, #8]
 800e012:	f000 f9b9 	bl	800e388 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800e016:	897b      	ldrh	r3, [r7, #10]
 800e018:	3b02      	subs	r3, #2
 800e01a:	b298      	uxth	r0, r3
 800e01c:	8c3b      	ldrh	r3, [r7, #32]
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	b29a      	uxth	r2, r3
 800e022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e024:	8939      	ldrh	r1, [r7, #8]
 800e026:	f000 f9af 	bl	800e388 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800e02a:	e016      	b.n	800e05a <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	60fa      	str	r2, [r7, #12]
 800e032:	7818      	ldrb	r0, [r3, #0]
 800e034:	88fc      	ldrh	r4, [r7, #6]
 800e036:	893a      	ldrh	r2, [r7, #8]
 800e038:	8979      	ldrh	r1, [r7, #10]
 800e03a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	8c3b      	ldrh	r3, [r7, #32]
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	4623      	mov	r3, r4
 800e044:	f7ff ff1c 	bl	800de80 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800e048:	8c3b      	ldrh	r3, [r7, #32]
 800e04a:	461a      	mov	r2, r3
 800e04c:	0052      	lsls	r2, r2, #1
 800e04e:	4413      	add	r3, r2
 800e050:	005b      	lsls	r3, r3, #1
 800e052:	b29a      	uxth	r2, r3
 800e054:	897b      	ldrh	r3, [r7, #10]
 800e056:	4413      	add	r3, r2
 800e058:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1e4      	bne.n	800e02c <ILI9341_Draw_Text+0x44>
    }


}
 800e062:	bf00      	nop
 800e064:	3714      	adds	r7, #20
 800e066:	46bd      	mov	sp, r7
 800e068:	bd90      	pop	{r4, r7, pc}

0800e06a <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800e06e:	f000 fca3 	bl	800e9b8 <_LCD_Enable>
	ILI9341_SPI_Init();
 800e072:	f000 f907 	bl	800e284 <ILI9341_SPI_Init>
	_LCD_Reset();
 800e076:	f000 fcaf 	bl	800e9d8 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800e07a:	2001      	movs	r0, #1
 800e07c:	f000 fd7a 	bl	800eb74 <_LCD_SendCommand>
	HAL_Delay(2000);
 800e080:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e084:	f7fa fdce 	bl	8008c24 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800e088:	20cb      	movs	r0, #203	; 0xcb
 800e08a:	f000 fd73 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800e08e:	2039      	movs	r0, #57	; 0x39
 800e090:	f000 fda2 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800e094:	202c      	movs	r0, #44	; 0x2c
 800e096:	f000 fd9f 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e09a:	2000      	movs	r0, #0
 800e09c:	f000 fd9c 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x34);
 800e0a0:	2034      	movs	r0, #52	; 0x34
 800e0a2:	f000 fd99 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x02);
 800e0a6:	2002      	movs	r0, #2
 800e0a8:	f000 fd96 	bl	800ebd8 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800e0ac:	20cf      	movs	r0, #207	; 0xcf
 800e0ae:	f000 fd61 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	f000 fd90 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e0b8:	20c1      	movs	r0, #193	; 0xc1
 800e0ba:	f000 fd8d 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x30);
 800e0be:	2030      	movs	r0, #48	; 0x30
 800e0c0:	f000 fd8a 	bl	800ebd8 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800e0c4:	20e8      	movs	r0, #232	; 0xe8
 800e0c6:	f000 fd55 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800e0ca:	2085      	movs	r0, #133	; 0x85
 800e0cc:	f000 fd84 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	f000 fd81 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x78);
 800e0d6:	2078      	movs	r0, #120	; 0x78
 800e0d8:	f000 fd7e 	bl	800ebd8 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800e0dc:	20ea      	movs	r0, #234	; 0xea
 800e0de:	f000 fd49 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	f000 fd78 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	f000 fd75 	bl	800ebd8 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800e0ee:	20ed      	movs	r0, #237	; 0xed
 800e0f0:	f000 fd40 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800e0f4:	2064      	movs	r0, #100	; 0x64
 800e0f6:	f000 fd6f 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e0fa:	2003      	movs	r0, #3
 800e0fc:	f000 fd6c 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x12);
 800e100:	2012      	movs	r0, #18
 800e102:	f000 fd69 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x81);
 800e106:	2081      	movs	r0, #129	; 0x81
 800e108:	f000 fd66 	bl	800ebd8 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800e10c:	20f7      	movs	r0, #247	; 0xf7
 800e10e:	f000 fd31 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800e112:	2020      	movs	r0, #32
 800e114:	f000 fd60 	bl	800ebd8 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800e118:	20c0      	movs	r0, #192	; 0xc0
 800e11a:	f000 fd2b 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800e11e:	2023      	movs	r0, #35	; 0x23
 800e120:	f000 fd5a 	bl	800ebd8 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800e124:	20c1      	movs	r0, #193	; 0xc1
 800e126:	f000 fd25 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800e12a:	2010      	movs	r0, #16
 800e12c:	f000 fd54 	bl	800ebd8 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800e130:	20c5      	movs	r0, #197	; 0xc5
 800e132:	f000 fd1f 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800e136:	203e      	movs	r0, #62	; 0x3e
 800e138:	f000 fd4e 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x28);
 800e13c:	2028      	movs	r0, #40	; 0x28
 800e13e:	f000 fd4b 	bl	800ebd8 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800e142:	20c7      	movs	r0, #199	; 0xc7
 800e144:	f000 fd16 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800e148:	2086      	movs	r0, #134	; 0x86
 800e14a:	f000 fd45 	bl	800ebd8 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800e14e:	2036      	movs	r0, #54	; 0x36
 800e150:	f000 fd10 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800e154:	2048      	movs	r0, #72	; 0x48
 800e156:	f000 fd3f 	bl	800ebd8 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800e15a:	203a      	movs	r0, #58	; 0x3a
 800e15c:	f000 fd0a 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800e160:	2055      	movs	r0, #85	; 0x55
 800e162:	f000 fd39 	bl	800ebd8 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800e166:	20b1      	movs	r0, #177	; 0xb1
 800e168:	f000 fd04 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e16c:	2000      	movs	r0, #0
 800e16e:	f000 fd33 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x18);
 800e172:	2018      	movs	r0, #24
 800e174:	f000 fd30 	bl	800ebd8 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800e178:	20b6      	movs	r0, #182	; 0xb6
 800e17a:	f000 fcfb 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800e17e:	2008      	movs	r0, #8
 800e180:	f000 fd2a 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x82);
 800e184:	2082      	movs	r0, #130	; 0x82
 800e186:	f000 fd27 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x27);
 800e18a:	2027      	movs	r0, #39	; 0x27
 800e18c:	f000 fd24 	bl	800ebd8 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800e190:	20f2      	movs	r0, #242	; 0xf2
 800e192:	f000 fcef 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e196:	2000      	movs	r0, #0
 800e198:	f000 fd1e 	bl	800ebd8 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800e19c:	2026      	movs	r0, #38	; 0x26
 800e19e:	f000 fce9 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800e1a2:	2001      	movs	r0, #1
 800e1a4:	f000 fd18 	bl	800ebd8 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800e1a8:	20e0      	movs	r0, #224	; 0xe0
 800e1aa:	f000 fce3 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800e1ae:	200f      	movs	r0, #15
 800e1b0:	f000 fd12 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e1b4:	2031      	movs	r0, #49	; 0x31
 800e1b6:	f000 fd0f 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800e1ba:	202b      	movs	r0, #43	; 0x2b
 800e1bc:	f000 fd0c 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e1c0:	200c      	movs	r0, #12
 800e1c2:	f000 fd09 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e1c6:	200e      	movs	r0, #14
 800e1c8:	f000 fd06 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e1cc:	2008      	movs	r0, #8
 800e1ce:	f000 fd03 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800e1d2:	204e      	movs	r0, #78	; 0x4e
 800e1d4:	f000 fd00 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800e1d8:	20f1      	movs	r0, #241	; 0xf1
 800e1da:	f000 fcfd 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x37);
 800e1de:	2037      	movs	r0, #55	; 0x37
 800e1e0:	f000 fcfa 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e1e4:	2007      	movs	r0, #7
 800e1e6:	f000 fcf7 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x10);
 800e1ea:	2010      	movs	r0, #16
 800e1ec:	f000 fcf4 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e1f0:	2003      	movs	r0, #3
 800e1f2:	f000 fcf1 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e1f6:	200e      	movs	r0, #14
 800e1f8:	f000 fcee 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x09);
 800e1fc:	2009      	movs	r0, #9
 800e1fe:	f000 fceb 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e202:	2000      	movs	r0, #0
 800e204:	f000 fce8 	bl	800ebd8 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800e208:	20e1      	movs	r0, #225	; 0xe1
 800e20a:	f000 fcb3 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e20e:	2000      	movs	r0, #0
 800e210:	f000 fce2 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e214:	200e      	movs	r0, #14
 800e216:	f000 fcdf 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x14);
 800e21a:	2014      	movs	r0, #20
 800e21c:	f000 fcdc 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e220:	2003      	movs	r0, #3
 800e222:	f000 fcd9 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x11);
 800e226:	2011      	movs	r0, #17
 800e228:	f000 fcd6 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e22c:	2007      	movs	r0, #7
 800e22e:	f000 fcd3 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e232:	2031      	movs	r0, #49	; 0x31
 800e234:	f000 fcd0 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e238:	20c1      	movs	r0, #193	; 0xc1
 800e23a:	f000 fccd 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x48);
 800e23e:	2048      	movs	r0, #72	; 0x48
 800e240:	f000 fcca 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e244:	2008      	movs	r0, #8
 800e246:	f000 fcc7 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e24a:	200f      	movs	r0, #15
 800e24c:	f000 fcc4 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e250:	200c      	movs	r0, #12
 800e252:	f000 fcc1 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e256:	2031      	movs	r0, #49	; 0x31
 800e258:	f000 fcbe 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x36);
 800e25c:	2036      	movs	r0, #54	; 0x36
 800e25e:	f000 fcbb 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e262:	200f      	movs	r0, #15
 800e264:	f000 fcb8 	bl	800ebd8 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800e268:	2011      	movs	r0, #17
 800e26a:	f000 fc83 	bl	800eb74 <_LCD_SendCommand>
	HAL_Delay(240);
 800e26e:	20f0      	movs	r0, #240	; 0xf0
 800e270:	f7fa fcd8 	bl	8008c24 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800e274:	2029      	movs	r0, #41	; 0x29
 800e276:	f000 fc7d 	bl	800eb74 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800e27a:	2000      	movs	r0, #0
 800e27c:	f000 fb4e 	bl	800e91c <ILI9341_Set_Rotation>
}
 800e280:	bf00      	nop
 800e282:	bd80      	pop	{r7, pc}

0800e284 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800e284:	b480      	push	{r7}
 800e286:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e288:	4b0b      	ldr	r3, [pc, #44]	; (800e2b8 <ILI9341_SPI_Init+0x34>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e290:	2b40      	cmp	r3, #64	; 0x40
 800e292:	d005      	beq.n	800e2a0 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800e294:	4b08      	ldr	r3, [pc, #32]	; (800e2b8 <ILI9341_SPI_Init+0x34>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a07      	ldr	r2, [pc, #28]	; (800e2b8 <ILI9341_SPI_Init+0x34>)
 800e29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e29e:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e2a0:	4b06      	ldr	r3, [pc, #24]	; (800e2bc <ILI9341_SPI_Init+0x38>)
 800e2a2:	695b      	ldr	r3, [r3, #20]
 800e2a4:	4a05      	ldr	r2, [pc, #20]	; (800e2bc <ILI9341_SPI_Init+0x38>)
 800e2a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2aa:	6153      	str	r3, [r2, #20]
}
 800e2ac:	bf00      	nop
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	40003c00 	.word	0x40003c00
 800e2bc:	48000400 	.word	0x48000400

0800e2c0 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800e2c0:	b590      	push	{r4, r7, lr}
 800e2c2:	b087      	sub	sp, #28
 800e2c4:	af02      	add	r7, sp, #8
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	4608      	mov	r0, r1
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	4623      	mov	r3, r4
 800e2d0:	80fb      	strh	r3, [r7, #6]
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	80bb      	strh	r3, [r7, #4]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	807b      	strh	r3, [r7, #2]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e2de:	4b28      	ldr	r3, [pc, #160]	; (800e380 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e2e0:	881b      	ldrh	r3, [r3, #0]
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	88fa      	ldrh	r2, [r7, #6]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d246      	bcs.n	800e378 <ILI9341_Draw_Horizontal_Line+0xb8>
 800e2ea:	4b26      	ldr	r3, [pc, #152]	; (800e384 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800e2ec:	881b      	ldrh	r3, [r3, #0]
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	88ba      	ldrh	r2, [r7, #4]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d240      	bcs.n	800e378 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800e2f6:	88fa      	ldrh	r2, [r7, #6]
 800e2f8:	887b      	ldrh	r3, [r7, #2]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	4a20      	ldr	r2, [pc, #128]	; (800e380 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e300:	8812      	ldrh	r2, [r2, #0]
 800e302:	b292      	uxth	r2, r2
 800e304:	4293      	cmp	r3, r2
 800e306:	db05      	blt.n	800e314 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800e308:	4b1d      	ldr	r3, [pc, #116]	; (800e380 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e30a:	881b      	ldrh	r3, [r3, #0]
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	88fb      	ldrh	r3, [r7, #6]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800e314:	88fa      	ldrh	r2, [r7, #6]
 800e316:	887b      	ldrh	r3, [r7, #2]
 800e318:	4413      	add	r3, r2
 800e31a:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e31c:	3b01      	subs	r3, #1
 800e31e:	b29a      	uxth	r2, r3
 800e320:	88bb      	ldrh	r3, [r7, #4]
 800e322:	88b9      	ldrh	r1, [r7, #4]
 800e324:	88f8      	ldrh	r0, [r7, #6]
 800e326:	f000 f893 	bl	800e450 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800e32e:	887b      	ldrh	r3, [r7, #2]
 800e330:	f003 0301 	and.w	r3, r3, #1
 800e334:	2b00      	cmp	r3, #0
 800e336:	d009      	beq.n	800e34c <ILI9341_Draw_Horizontal_Line+0x8c>
 800e338:	887b      	ldrh	r3, [r7, #2]
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d906      	bls.n	800e34c <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800e33e:	2301      	movs	r3, #1
 800e340:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800e342:	887b      	ldrh	r3, [r7, #2]
 800e344:	085b      	lsrs	r3, r3, #1
 800e346:	b29b      	uxth	r3, r3
 800e348:	005b      	lsls	r3, r3, #1
 800e34a:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800e34c:	887c      	ldrh	r4, [r7, #2]
 800e34e:	883a      	ldrh	r2, [r7, #0]
 800e350:	88b9      	ldrh	r1, [r7, #4]
 800e352:	88f8      	ldrh	r0, [r7, #6]
 800e354:	2303      	movs	r3, #3
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	4623      	mov	r3, r4
 800e35a:	f000 fb5b 	bl	800ea14 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800e35e:	7bfb      	ldrb	r3, [r7, #15]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00a      	beq.n	800e37a <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800e364:	88fa      	ldrh	r2, [r7, #6]
 800e366:	887b      	ldrh	r3, [r7, #2]
 800e368:	4413      	add	r3, r2
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	883a      	ldrh	r2, [r7, #0]
 800e36e:	88b9      	ldrh	r1, [r7, #4]
 800e370:	4618      	mov	r0, r3
 800e372:	f000 f8e3 	bl	800e53c <ILI9341_Draw_Pixel>
 800e376:	e000      	b.n	800e37a <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e378:	bf00      	nop
							(ypos),
							colour);
	}


}
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd90      	pop	{r4, r7, pc}
 800e380:	20000cb6 	.word	0x20000cb6
 800e384:	20000cb4 	.word	0x20000cb4

0800e388 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800e388:	b590      	push	{r4, r7, lr}
 800e38a:	b087      	sub	sp, #28
 800e38c:	af02      	add	r7, sp, #8
 800e38e:	4604      	mov	r4, r0
 800e390:	4608      	mov	r0, r1
 800e392:	4611      	mov	r1, r2
 800e394:	461a      	mov	r2, r3
 800e396:	4623      	mov	r3, r4
 800e398:	80fb      	strh	r3, [r7, #6]
 800e39a:	4603      	mov	r3, r0
 800e39c:	80bb      	strh	r3, [r7, #4]
 800e39e:	460b      	mov	r3, r1
 800e3a0:	807b      	strh	r3, [r7, #2]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e3a6:	4b28      	ldr	r3, [pc, #160]	; (800e448 <ILI9341_Draw_Vertical_Line+0xc0>)
 800e3a8:	881b      	ldrh	r3, [r3, #0]
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	88fa      	ldrh	r2, [r7, #6]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d246      	bcs.n	800e440 <ILI9341_Draw_Vertical_Line+0xb8>
 800e3b2:	4b26      	ldr	r3, [pc, #152]	; (800e44c <ILI9341_Draw_Vertical_Line+0xc4>)
 800e3b4:	881b      	ldrh	r3, [r3, #0]
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	88ba      	ldrh	r2, [r7, #4]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d240      	bcs.n	800e440 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800e3be:	88ba      	ldrh	r2, [r7, #4]
 800e3c0:	887b      	ldrh	r3, [r7, #2]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	4a21      	ldr	r2, [pc, #132]	; (800e44c <ILI9341_Draw_Vertical_Line+0xc4>)
 800e3c8:	8812      	ldrh	r2, [r2, #0]
 800e3ca:	b292      	uxth	r2, r2
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	db05      	blt.n	800e3dc <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800e3d0:	4b1e      	ldr	r3, [pc, #120]	; (800e44c <ILI9341_Draw_Vertical_Line+0xc4>)
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	88bb      	ldrh	r3, [r7, #4]
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800e3dc:	88ba      	ldrh	r2, [r7, #4]
 800e3de:	887b      	ldrh	r3, [r7, #2]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	88fa      	ldrh	r2, [r7, #6]
 800e3ea:	88b9      	ldrh	r1, [r7, #4]
 800e3ec:	88f8      	ldrh	r0, [r7, #6]
 800e3ee:	f000 f82f 	bl	800e450 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800e3f6:	887b      	ldrh	r3, [r7, #2]
 800e3f8:	f003 0301 	and.w	r3, r3, #1
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d009      	beq.n	800e414 <ILI9341_Draw_Vertical_Line+0x8c>
 800e400:	887b      	ldrh	r3, [r7, #2]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d906      	bls.n	800e414 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800e406:	2301      	movs	r3, #1
 800e408:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800e40a:	887b      	ldrh	r3, [r7, #2]
 800e40c:	085b      	lsrs	r3, r3, #1
 800e40e:	b29b      	uxth	r3, r3
 800e410:	005b      	lsls	r3, r3, #1
 800e412:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800e414:	7bfb      	ldrb	r3, [r7, #15]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d008      	beq.n	800e42c <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800e41a:	88ba      	ldrh	r2, [r7, #4]
 800e41c:	887b      	ldrh	r3, [r7, #2]
 800e41e:	4413      	add	r3, r2
 800e420:	b299      	uxth	r1, r3
 800e422:	883a      	ldrh	r2, [r7, #0]
 800e424:	88fb      	ldrh	r3, [r7, #6]
 800e426:	4618      	mov	r0, r3
 800e428:	f000 f888 	bl	800e53c <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800e42c:	887c      	ldrh	r4, [r7, #2]
 800e42e:	883a      	ldrh	r2, [r7, #0]
 800e430:	88b9      	ldrh	r1, [r7, #4]
 800e432:	88f8      	ldrh	r0, [r7, #6]
 800e434:	2303      	movs	r3, #3
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	4623      	mov	r3, r4
 800e43a:	f000 faeb 	bl	800ea14 <_LCD_Write_Frame>
 800e43e:	e000      	b.n	800e442 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e440:	bf00      	nop
}
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	bd90      	pop	{r4, r7, pc}
 800e448:	20000cb6 	.word	0x20000cb6
 800e44c:	20000cb4 	.word	0x20000cb4

0800e450 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800e450:	b590      	push	{r4, r7, lr}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	4604      	mov	r4, r0
 800e458:	4608      	mov	r0, r1
 800e45a:	4611      	mov	r1, r2
 800e45c:	461a      	mov	r2, r3
 800e45e:	4623      	mov	r3, r4
 800e460:	80fb      	strh	r3, [r7, #6]
 800e462:	4603      	mov	r3, r0
 800e464:	80bb      	strh	r3, [r7, #4]
 800e466:	460b      	mov	r3, r1
 800e468:	807b      	strh	r3, [r7, #2]
 800e46a:	4613      	mov	r3, r2
 800e46c:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800e46e:	202a      	movs	r0, #42	; 0x2a
 800e470:	f000 fb80 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800e474:	88fb      	ldrh	r3, [r7, #6]
 800e476:	0a1b      	lsrs	r3, r3, #8
 800e478:	b29b      	uxth	r3, r3
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 fbab 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(sc);
 800e482:	88fb      	ldrh	r3, [r7, #6]
 800e484:	b2db      	uxtb	r3, r3
 800e486:	4618      	mov	r0, r3
 800e488:	f000 fba6 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800e48c:	887b      	ldrh	r3, [r7, #2]
 800e48e:	0a1b      	lsrs	r3, r3, #8
 800e490:	b29b      	uxth	r3, r3
 800e492:	b2db      	uxtb	r3, r3
 800e494:	4618      	mov	r0, r3
 800e496:	f000 fb9f 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(ec);
 800e49a:	887b      	ldrh	r3, [r7, #2]
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f000 fb9a 	bl	800ebd8 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800e4a4:	202b      	movs	r0, #43	; 0x2b
 800e4a6:	f000 fb65 	bl	800eb74 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800e4aa:	88bb      	ldrh	r3, [r7, #4]
 800e4ac:	0a1b      	lsrs	r3, r3, #8
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f000 fb90 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(sp);
 800e4b8:	88bb      	ldrh	r3, [r7, #4]
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 fb8b 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800e4c2:	883b      	ldrh	r3, [r7, #0]
 800e4c4:	0a1b      	lsrs	r3, r3, #8
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f000 fb84 	bl	800ebd8 <_LCD_SendData>
	_LCD_SendData(ep);
 800e4d0:	883b      	ldrh	r3, [r7, #0]
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f000 fb7f 	bl	800ebd8 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800e4da:	202c      	movs	r0, #44	; 0x2c
 800e4dc:	f000 fb4a 	bl	800eb74 <_LCD_SendCommand>
}
 800e4e0:	bf00      	nop
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd90      	pop	{r4, r7, pc}

0800e4e8 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af02      	add	r7, sp, #8
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800e4f2:	4b10      	ldr	r3, [pc, #64]	; (800e534 <ILI9341_Fill_Screen+0x4c>)
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	4b0f      	ldr	r3, [pc, #60]	; (800e538 <ILI9341_Fill_Screen+0x50>)
 800e4fa:	881b      	ldrh	r3, [r3, #0]
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	2100      	movs	r1, #0
 800e500:	2000      	movs	r0, #0
 800e502:	f7ff ffa5 	bl	800e450 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800e506:	4b0b      	ldr	r3, [pc, #44]	; (800e534 <ILI9341_Fill_Screen+0x4c>)
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	461a      	mov	r2, r3
 800e50e:	4b0a      	ldr	r3, [pc, #40]	; (800e538 <ILI9341_Fill_Screen+0x50>)
 800e510:	881b      	ldrh	r3, [r3, #0]
 800e512:	b29b      	uxth	r3, r3
 800e514:	fb03 f302 	mul.w	r3, r3, r2
 800e518:	4619      	mov	r1, r3
 800e51a:	88fa      	ldrh	r2, [r7, #6]
 800e51c:	2304      	movs	r3, #4
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	460b      	mov	r3, r1
 800e522:	2100      	movs	r1, #0
 800e524:	2000      	movs	r0, #0
 800e526:	f000 fa75 	bl	800ea14 <_LCD_Write_Frame>
}
 800e52a:	bf00      	nop
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	20000cb6 	.word	0x20000cb6
 800e538:	20000cb4 	.word	0x20000cb4

0800e53c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b08e      	sub	sp, #56	; 0x38
 800e540:	af00      	add	r7, sp, #0
 800e542:	4603      	mov	r3, r0
 800e544:	80fb      	strh	r3, [r7, #6]
 800e546:	460b      	mov	r3, r1
 800e548:	80bb      	strh	r3, [r7, #4]
 800e54a:	4613      	mov	r3, r2
 800e54c:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e54e:	4b98      	ldr	r3, [pc, #608]	; (800e7b0 <ILI9341_Draw_Pixel+0x274>)
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	b29b      	uxth	r3, r3
 800e554:	88fa      	ldrh	r2, [r7, #6]
 800e556:	429a      	cmp	r2, r3
 800e558:	f080 8143 	bcs.w	800e7e2 <ILI9341_Draw_Pixel+0x2a6>
 800e55c:	4b95      	ldr	r3, [pc, #596]	; (800e7b4 <ILI9341_Draw_Pixel+0x278>)
 800e55e:	881b      	ldrh	r3, [r3, #0]
 800e560:	b29b      	uxth	r3, r3
 800e562:	88ba      	ldrh	r2, [r7, #4]
 800e564:	429a      	cmp	r2, r3
 800e566:	f080 813c 	bcs.w	800e7e2 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e56a:	4b93      	ldr	r3, [pc, #588]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e56c:	695b      	ldr	r3, [r3, #20]
 800e56e:	4a92      	ldr	r2, [pc, #584]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e574:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e576:	4b90      	ldr	r3, [pc, #576]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	4a8f      	ldr	r2, [pc, #572]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e57c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e580:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800e582:	220a      	movs	r2, #10
 800e584:	2100      	movs	r1, #0
 800e586:	202a      	movs	r0, #42	; 0x2a
 800e588:	f000 fb58 	bl	800ec3c <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e58c:	2300      	movs	r3, #0
 800e58e:	637b      	str	r3, [r7, #52]	; 0x34
 800e590:	e008      	b.n	800e5a4 <ILI9341_Draw_Pixel+0x68>
 800e592:	4b89      	ldr	r3, [pc, #548]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e594:	695b      	ldr	r3, [r3, #20]
 800e596:	4a88      	ldr	r2, [pc, #544]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e59c:	6153      	str	r3, [r2, #20]
 800e59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	ddf3      	ble.n	800e592 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e5aa:	4b83      	ldr	r3, [pc, #524]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e5ac:	695b      	ldr	r3, [r3, #20]
 800e5ae:	4a82      	ldr	r2, [pc, #520]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e5b6:	4b80      	ldr	r3, [pc, #512]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e5b8:	695b      	ldr	r3, [r3, #20]
 800e5ba:	4a7f      	ldr	r2, [pc, #508]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5c0:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e5c2:	4b7d      	ldr	r3, [pc, #500]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e5c4:	695b      	ldr	r3, [r3, #20]
 800e5c6:	4a7c      	ldr	r2, [pc, #496]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e5c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5cc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800e5ce:	88fb      	ldrh	r3, [r7, #6]
 800e5d0:	0a1b      	lsrs	r3, r3, #8
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	753b      	strb	r3, [r7, #20]
 800e5d8:	88fb      	ldrh	r3, [r7, #6]
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	757b      	strb	r3, [r7, #21]
 800e5de:	88fb      	ldrh	r3, [r7, #6]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	121b      	asrs	r3, r3, #8
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	75bb      	strb	r3, [r7, #22]
 800e5e8:	88fb      	ldrh	r3, [r7, #6]
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800e5f2:	f107 0014 	add.w	r0, r7, #20
 800e5f6:	230a      	movs	r3, #10
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2104      	movs	r1, #4
 800e5fc:	f000 fb50 	bl	800eca0 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e600:	2300      	movs	r3, #0
 800e602:	633b      	str	r3, [r7, #48]	; 0x30
 800e604:	e008      	b.n	800e618 <ILI9341_Draw_Pixel+0xdc>
 800e606:	4b6c      	ldr	r3, [pc, #432]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e608:	695b      	ldr	r3, [r3, #20]
 800e60a:	4a6b      	ldr	r2, [pc, #428]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e60c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e610:	6153      	str	r3, [r2, #20]
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	3301      	adds	r3, #1
 800e616:	633b      	str	r3, [r7, #48]	; 0x30
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	ddf3      	ble.n	800e606 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e61e:	4b66      	ldr	r3, [pc, #408]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e620:	695b      	ldr	r3, [r3, #20]
 800e622:	4a65      	ldr	r2, [pc, #404]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e628:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e62a:	4b63      	ldr	r3, [pc, #396]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e62c:	695b      	ldr	r3, [r3, #20]
 800e62e:	4a62      	ldr	r2, [pc, #392]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e634:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e636:	4b60      	ldr	r3, [pc, #384]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e638:	695b      	ldr	r3, [r3, #20]
 800e63a:	4a5f      	ldr	r2, [pc, #380]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e63c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e640:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800e642:	220a      	movs	r2, #10
 800e644:	2100      	movs	r1, #0
 800e646:	202b      	movs	r0, #43	; 0x2b
 800e648:	f000 faf8 	bl	800ec3c <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e64c:	2300      	movs	r3, #0
 800e64e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e650:	e008      	b.n	800e664 <ILI9341_Draw_Pixel+0x128>
 800e652:	4b59      	ldr	r3, [pc, #356]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e654:	695b      	ldr	r3, [r3, #20]
 800e656:	4a58      	ldr	r2, [pc, #352]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e65c:	6153      	str	r3, [r2, #20]
 800e65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e660:	3301      	adds	r3, #1
 800e662:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	2b02      	cmp	r3, #2
 800e668:	ddf3      	ble.n	800e652 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e66a:	4b53      	ldr	r3, [pc, #332]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e66c:	695b      	ldr	r3, [r3, #20]
 800e66e:	4a52      	ldr	r2, [pc, #328]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e674:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e676:	4b50      	ldr	r3, [pc, #320]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e678:	695b      	ldr	r3, [r3, #20]
 800e67a:	4a4f      	ldr	r2, [pc, #316]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e680:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e682:	4b4d      	ldr	r3, [pc, #308]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	4a4c      	ldr	r2, [pc, #304]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e68c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800e68e:	88bb      	ldrh	r3, [r7, #4]
 800e690:	0a1b      	lsrs	r3, r3, #8
 800e692:	b29b      	uxth	r3, r3
 800e694:	b2db      	uxtb	r3, r3
 800e696:	743b      	strb	r3, [r7, #16]
 800e698:	88bb      	ldrh	r3, [r7, #4]
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	747b      	strb	r3, [r7, #17]
 800e69e:	88bb      	ldrh	r3, [r7, #4]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	121b      	asrs	r3, r3, #8
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	74bb      	strb	r3, [r7, #18]
 800e6a8:	88bb      	ldrh	r3, [r7, #4]
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e6b2:	f107 0010 	add.w	r0, r7, #16
 800e6b6:	230a      	movs	r3, #10
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2104      	movs	r1, #4
 800e6bc:	f000 faf0 	bl	800eca0 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6c4:	e008      	b.n	800e6d8 <ILI9341_Draw_Pixel+0x19c>
 800e6c6:	4b3c      	ldr	r3, [pc, #240]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e6c8:	695b      	ldr	r3, [r3, #20]
 800e6ca:	4a3b      	ldr	r2, [pc, #236]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e6cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6d0:	6153      	str	r3, [r2, #20]
 800e6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	2b02      	cmp	r3, #2
 800e6dc:	ddf3      	ble.n	800e6c6 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e6de:	4b36      	ldr	r3, [pc, #216]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e6e0:	695b      	ldr	r3, [r3, #20]
 800e6e2:	4a35      	ldr	r2, [pc, #212]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6e8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e6ea:	4b33      	ldr	r3, [pc, #204]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e6ec:	695b      	ldr	r3, [r3, #20]
 800e6ee:	4a32      	ldr	r2, [pc, #200]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e6f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6f4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e6f6:	4b30      	ldr	r3, [pc, #192]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e6f8:	695b      	ldr	r3, [r3, #20]
 800e6fa:	4a2f      	ldr	r2, [pc, #188]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e6fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e700:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800e702:	220a      	movs	r2, #10
 800e704:	2100      	movs	r1, #0
 800e706:	202c      	movs	r0, #44	; 0x2c
 800e708:	f000 fa98 	bl	800ec3c <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e70c:	2300      	movs	r3, #0
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
 800e710:	e008      	b.n	800e724 <ILI9341_Draw_Pixel+0x1e8>
 800e712:	4b29      	ldr	r3, [pc, #164]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e714:	695b      	ldr	r3, [r3, #20]
 800e716:	4a28      	ldr	r2, [pc, #160]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e71c:	6153      	str	r3, [r2, #20]
 800e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e720:	3301      	adds	r3, #1
 800e722:	627b      	str	r3, [r7, #36]	; 0x24
 800e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e726:	2b02      	cmp	r3, #2
 800e728:	ddf3      	ble.n	800e712 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e72a:	4b23      	ldr	r3, [pc, #140]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e72c:	695b      	ldr	r3, [r3, #20]
 800e72e:	4a22      	ldr	r2, [pc, #136]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e734:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e736:	4b20      	ldr	r3, [pc, #128]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e738:	695b      	ldr	r3, [r3, #20]
 800e73a:	4a1f      	ldr	r2, [pc, #124]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e740:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e742:	4b1d      	ldr	r3, [pc, #116]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e744:	695b      	ldr	r3, [r3, #20]
 800e746:	4a1c      	ldr	r2, [pc, #112]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e74c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e74e:	887b      	ldrh	r3, [r7, #2]
 800e750:	0a1b      	lsrs	r3, r3, #8
 800e752:	b29b      	uxth	r3, r3
 800e754:	b2db      	uxtb	r3, r3
 800e756:	733b      	strb	r3, [r7, #12]
 800e758:	887b      	ldrh	r3, [r7, #2]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800e75e:	f107 000c 	add.w	r0, r7, #12
 800e762:	2301      	movs	r3, #1
 800e764:	2200      	movs	r2, #0
 800e766:	2102      	movs	r1, #2
 800e768:	f000 fa9a 	bl	800eca0 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e76c:	2300      	movs	r3, #0
 800e76e:	623b      	str	r3, [r7, #32]
 800e770:	e008      	b.n	800e784 <ILI9341_Draw_Pixel+0x248>
 800e772:	4b11      	ldr	r3, [pc, #68]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e774:	695b      	ldr	r3, [r3, #20]
 800e776:	4a10      	ldr	r2, [pc, #64]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e77c:	6153      	str	r3, [r2, #20]
 800e77e:	6a3b      	ldr	r3, [r7, #32]
 800e780:	3301      	adds	r3, #1
 800e782:	623b      	str	r3, [r7, #32]
 800e784:	6a3b      	ldr	r3, [r7, #32]
 800e786:	2b02      	cmp	r3, #2
 800e788:	ddf3      	ble.n	800e772 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e78a:	2300      	movs	r3, #0
 800e78c:	61fb      	str	r3, [r7, #28]
 800e78e:	e008      	b.n	800e7a2 <ILI9341_Draw_Pixel+0x266>
 800e790:	4b09      	ldr	r3, [pc, #36]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e792:	695b      	ldr	r3, [r3, #20]
 800e794:	4a08      	ldr	r2, [pc, #32]	; (800e7b8 <ILI9341_Draw_Pixel+0x27c>)
 800e796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e79a:	6153      	str	r3, [r2, #20]
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	61fb      	str	r3, [r7, #28]
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	2b02      	cmp	r3, #2
 800e7a6:	ddf3      	ble.n	800e790 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	61bb      	str	r3, [r7, #24]
 800e7ac:	e00f      	b.n	800e7ce <ILI9341_Draw_Pixel+0x292>
 800e7ae:	bf00      	nop
 800e7b0:	20000cb6 	.word	0x20000cb6
 800e7b4:	20000cb4 	.word	0x20000cb4
 800e7b8:	48000400 	.word	0x48000400
 800e7bc:	4b0b      	ldr	r3, [pc, #44]	; (800e7ec <ILI9341_Draw_Pixel+0x2b0>)
 800e7be:	695b      	ldr	r3, [r3, #20]
 800e7c0:	4a0a      	ldr	r2, [pc, #40]	; (800e7ec <ILI9341_Draw_Pixel+0x2b0>)
 800e7c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7c6:	6153      	str	r3, [r2, #20]
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	61bb      	str	r3, [r7, #24]
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	ddf3      	ble.n	800e7bc <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e7d4:	4b05      	ldr	r3, [pc, #20]	; (800e7ec <ILI9341_Draw_Pixel+0x2b0>)
 800e7d6:	695b      	ldr	r3, [r3, #20]
 800e7d8:	4a04      	ldr	r2, [pc, #16]	; (800e7ec <ILI9341_Draw_Pixel+0x2b0>)
 800e7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7de:	6153      	str	r3, [r2, #20]
 800e7e0:	e000      	b.n	800e7e4 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e7e2:	bf00      	nop


}
 800e7e4:	3738      	adds	r7, #56	; 0x38
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	48000400 	.word	0x48000400

0800e7f0 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800e7f0:	b590      	push	{r4, r7, lr}
 800e7f2:	b087      	sub	sp, #28
 800e7f4:	af02      	add	r7, sp, #8
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	4608      	mov	r0, r1
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	4623      	mov	r3, r4
 800e800:	80fb      	strh	r3, [r7, #6]
 800e802:	4603      	mov	r3, r0
 800e804:	80bb      	strh	r3, [r7, #4]
 800e806:	460b      	mov	r3, r1
 800e808:	807b      	strh	r3, [r7, #2]
 800e80a:	4613      	mov	r3, r2
 800e80c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e80e:	4b41      	ldr	r3, [pc, #260]	; (800e914 <ILI9341_Draw_Rectangle+0x124>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	b29b      	uxth	r3, r3
 800e814:	88fa      	ldrh	r2, [r7, #6]
 800e816:	429a      	cmp	r2, r3
 800e818:	d278      	bcs.n	800e90c <ILI9341_Draw_Rectangle+0x11c>
 800e81a:	4b3f      	ldr	r3, [pc, #252]	; (800e918 <ILI9341_Draw_Rectangle+0x128>)
 800e81c:	881b      	ldrh	r3, [r3, #0]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	88ba      	ldrh	r2, [r7, #4]
 800e822:	429a      	cmp	r2, r3
 800e824:	d272      	bcs.n	800e90c <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800e826:	88fa      	ldrh	r2, [r7, #6]
 800e828:	887b      	ldrh	r3, [r7, #2]
 800e82a:	4413      	add	r3, r2
 800e82c:	3b01      	subs	r3, #1
 800e82e:	4a39      	ldr	r2, [pc, #228]	; (800e914 <ILI9341_Draw_Rectangle+0x124>)
 800e830:	8812      	ldrh	r2, [r2, #0]
 800e832:	b292      	uxth	r2, r2
 800e834:	4293      	cmp	r3, r2
 800e836:	db05      	blt.n	800e844 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e838:	4b36      	ldr	r3, [pc, #216]	; (800e914 <ILI9341_Draw_Rectangle+0x124>)
 800e83a:	881b      	ldrh	r3, [r3, #0]
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	88fb      	ldrh	r3, [r7, #6]
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e844:	88ba      	ldrh	r2, [r7, #4]
 800e846:	883b      	ldrh	r3, [r7, #0]
 800e848:	4413      	add	r3, r2
 800e84a:	3b01      	subs	r3, #1
 800e84c:	4a32      	ldr	r2, [pc, #200]	; (800e918 <ILI9341_Draw_Rectangle+0x128>)
 800e84e:	8812      	ldrh	r2, [r2, #0]
 800e850:	b292      	uxth	r2, r2
 800e852:	4293      	cmp	r3, r2
 800e854:	db05      	blt.n	800e862 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e856:	4b30      	ldr	r3, [pc, #192]	; (800e918 <ILI9341_Draw_Rectangle+0x128>)
 800e858:	881b      	ldrh	r3, [r3, #0]
 800e85a:	b29a      	uxth	r2, r3
 800e85c:	88bb      	ldrh	r3, [r7, #4]
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e862:	88fa      	ldrh	r2, [r7, #6]
 800e864:	887b      	ldrh	r3, [r7, #2]
 800e866:	4413      	add	r3, r2
 800e868:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e86a:	3b01      	subs	r3, #1
 800e86c:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e86e:	88ba      	ldrh	r2, [r7, #4]
 800e870:	883b      	ldrh	r3, [r7, #0]
 800e872:	4413      	add	r3, r2
 800e874:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e876:	3b01      	subs	r3, #1
 800e878:	b29b      	uxth	r3, r3
 800e87a:	88b9      	ldrh	r1, [r7, #4]
 800e87c:	88f8      	ldrh	r0, [r7, #6]
 800e87e:	4622      	mov	r2, r4
 800e880:	f7ff fde6 	bl	800e450 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e884:	883a      	ldrh	r2, [r7, #0]
 800e886:	887b      	ldrh	r3, [r7, #2]
 800e888:	fb12 f303 	smulbb	r3, r2, r3
 800e88c:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e892:	89fb      	ldrh	r3, [r7, #14]
 800e894:	f003 0301 	and.w	r3, r3, #1
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d009      	beq.n	800e8b0 <ILI9341_Draw_Rectangle+0xc0>
 800e89c:	89fb      	ldrh	r3, [r7, #14]
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d906      	bls.n	800e8b0 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e8a6:	89fb      	ldrh	r3, [r7, #14]
 800e8a8:	085b      	lsrs	r3, r3, #1
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	005b      	lsls	r3, r3, #1
 800e8ae:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800e8b0:	89fc      	ldrh	r4, [r7, #14]
 800e8b2:	8c3a      	ldrh	r2, [r7, #32]
 800e8b4:	88b9      	ldrh	r1, [r7, #4]
 800e8b6:	88f8      	ldrh	r0, [r7, #6]
 800e8b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	4623      	mov	r3, r4
 800e8c0:	f000 f8a8 	bl	800ea14 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800e8c4:	7b7b      	ldrb	r3, [r7, #13]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d021      	beq.n	800e90e <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e8ca:	88fa      	ldrh	r2, [r7, #6]
 800e8cc:	887b      	ldrh	r3, [r7, #2]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	3b02      	subs	r3, #2
 800e8d4:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e8d6:	88ba      	ldrh	r2, [r7, #4]
 800e8d8:	883b      	ldrh	r3, [r7, #0]
 800e8da:	4413      	add	r3, r2
 800e8dc:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	8c3a      	ldrh	r2, [r7, #32]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	f7ff fe29 	bl	800e53c <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e8ea:	88fa      	ldrh	r2, [r7, #6]
 800e8ec:	887b      	ldrh	r3, [r7, #2]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	3b01      	subs	r3, #1
 800e8f4:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e8f6:	88ba      	ldrh	r2, [r7, #4]
 800e8f8:	883b      	ldrh	r3, [r7, #0]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e8fe:	3b01      	subs	r3, #1
 800e900:	b29b      	uxth	r3, r3
 800e902:	8c3a      	ldrh	r2, [r7, #32]
 800e904:	4619      	mov	r1, r3
 800e906:	f7ff fe19 	bl	800e53c <ILI9341_Draw_Pixel>
 800e90a:	e000      	b.n	800e90e <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e90c:	bf00      	nop
							colour);
	}
}
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	bd90      	pop	{r4, r7, pc}
 800e914:	20000cb6 	.word	0x20000cb6
 800e918:	20000cb4 	.word	0x20000cb4

0800e91c <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	4603      	mov	r3, r0
 800e924:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800e926:	79fb      	ldrb	r3, [r7, #7]
 800e928:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800e92a:	2036      	movs	r0, #54	; 0x36
 800e92c:	f000 f922 	bl	800eb74 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800e930:	7bfb      	ldrb	r3, [r7, #15]
 800e932:	2b03      	cmp	r3, #3
 800e934:	d836      	bhi.n	800e9a4 <ILI9341_Set_Rotation+0x88>
 800e936:	a201      	add	r2, pc, #4	; (adr r2, 800e93c <ILI9341_Set_Rotation+0x20>)
 800e938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e93c:	0800e94d 	.word	0x0800e94d
 800e940:	0800e963 	.word	0x0800e963
 800e944:	0800e979 	.word	0x0800e979
 800e948:	0800e98f 	.word	0x0800e98f
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800e94c:	2048      	movs	r0, #72	; 0x48
 800e94e:	f000 f943 	bl	800ebd8 <_LCD_SendData>
			LCD_WIDTH = 240;
 800e952:	4b17      	ldr	r3, [pc, #92]	; (800e9b0 <ILI9341_Set_Rotation+0x94>)
 800e954:	22f0      	movs	r2, #240	; 0xf0
 800e956:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e958:	4b16      	ldr	r3, [pc, #88]	; (800e9b4 <ILI9341_Set_Rotation+0x98>)
 800e95a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e95e:	801a      	strh	r2, [r3, #0]
			break;
 800e960:	e021      	b.n	800e9a6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800e962:	2028      	movs	r0, #40	; 0x28
 800e964:	f000 f938 	bl	800ebd8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e968:	4b11      	ldr	r3, [pc, #68]	; (800e9b0 <ILI9341_Set_Rotation+0x94>)
 800e96a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e96e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e970:	4b10      	ldr	r3, [pc, #64]	; (800e9b4 <ILI9341_Set_Rotation+0x98>)
 800e972:	22f0      	movs	r2, #240	; 0xf0
 800e974:	801a      	strh	r2, [r3, #0]
			break;
 800e976:	e016      	b.n	800e9a6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800e978:	2088      	movs	r0, #136	; 0x88
 800e97a:	f000 f92d 	bl	800ebd8 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800e97e:	4b0c      	ldr	r3, [pc, #48]	; (800e9b0 <ILI9341_Set_Rotation+0x94>)
 800e980:	22f0      	movs	r2, #240	; 0xf0
 800e982:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e984:	4b0b      	ldr	r3, [pc, #44]	; (800e9b4 <ILI9341_Set_Rotation+0x98>)
 800e986:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e98a:	801a      	strh	r2, [r3, #0]
			break;
 800e98c:	e00b      	b.n	800e9a6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800e98e:	20e8      	movs	r0, #232	; 0xe8
 800e990:	f000 f922 	bl	800ebd8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e994:	4b06      	ldr	r3, [pc, #24]	; (800e9b0 <ILI9341_Set_Rotation+0x94>)
 800e996:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e99a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e99c:	4b05      	ldr	r3, [pc, #20]	; (800e9b4 <ILI9341_Set_Rotation+0x98>)
 800e99e:	22f0      	movs	r2, #240	; 0xf0
 800e9a0:	801a      	strh	r2, [r3, #0]
			break;
 800e9a2:	e000      	b.n	800e9a6 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800e9a4:	bf00      	nop
	}
}
 800e9a6:	bf00      	nop
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20000cb6 	.word	0x20000cb6
 800e9b4:	20000cb4 	.word	0x20000cb4

0800e9b8 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e9bc:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <_LCD_Enable+0x1c>)
 800e9be:	695b      	ldr	r3, [r3, #20]
 800e9c0:	4a04      	ldr	r2, [pc, #16]	; (800e9d4 <_LCD_Enable+0x1c>)
 800e9c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e9c6:	6153      	str	r3, [r2, #20]
}
 800e9c8:	bf00      	nop
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	48000400 	.word	0x48000400

0800e9d8 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800e9dc:	4b0c      	ldr	r3, [pc, #48]	; (800ea10 <_LCD_Reset+0x38>)
 800e9de:	695b      	ldr	r3, [r3, #20]
 800e9e0:	4a0b      	ldr	r2, [pc, #44]	; (800ea10 <_LCD_Reset+0x38>)
 800e9e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e9e6:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e9e8:	20c8      	movs	r0, #200	; 0xc8
 800e9ea:	f7fa f91b 	bl	8008c24 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e9ee:	4b08      	ldr	r3, [pc, #32]	; (800ea10 <_LCD_Reset+0x38>)
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	4a07      	ldr	r2, [pc, #28]	; (800ea10 <_LCD_Reset+0x38>)
 800e9f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9f8:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e9fa:	20c8      	movs	r0, #200	; 0xc8
 800e9fc:	f7fa f912 	bl	8008c24 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ea00:	4b03      	ldr	r3, [pc, #12]	; (800ea10 <_LCD_Reset+0x38>)
 800ea02:	695b      	ldr	r3, [r3, #20]
 800ea04:	4a02      	ldr	r2, [pc, #8]	; (800ea10 <_LCD_Reset+0x38>)
 800ea06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea0a:	6153      	str	r3, [r2, #20]
}
 800ea0c:	bf00      	nop
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	48000400 	.word	0x48000400

0800ea14 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800ea14:	b5b0      	push	{r4, r5, r7, lr}
 800ea16:	b08e      	sub	sp, #56	; 0x38
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	607b      	str	r3, [r7, #4]
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	81fb      	strh	r3, [r7, #14]
 800ea20:	460b      	mov	r3, r1
 800ea22:	81bb      	strh	r3, [r7, #12]
 800ea24:	4613      	mov	r3, r2
 800ea26:	817b      	strh	r3, [r7, #10]
 800ea28:	466b      	mov	r3, sp
 800ea2a:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	005b      	lsls	r3, r3, #1
 800ea34:	4a4d      	ldr	r2, [pc, #308]	; (800eb6c <_LCD_Write_Frame+0x158>)
 800ea36:	8812      	ldrh	r2, [r2, #0]
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d202      	bcs.n	800ea42 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea40:	e002      	b.n	800ea48 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800ea42:	4b4a      	ldr	r3, [pc, #296]	; (800eb6c <_LCD_Write_Frame+0x158>)
 800ea44:	881b      	ldrh	r3, [r3, #0]
 800ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800ea48:	897b      	ldrh	r3, [r7, #10]
 800ea4a:	0a1b      	lsrs	r3, r3, #8
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800ea50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea52:	4603      	mov	r3, r0
 800ea54:	3b01      	subs	r3, #1
 800ea56:	61bb      	str	r3, [r7, #24]
 800ea58:	4601      	mov	r1, r0
 800ea5a:	f04f 0200 	mov.w	r2, #0
 800ea5e:	f04f 0300 	mov.w	r3, #0
 800ea62:	f04f 0400 	mov.w	r4, #0
 800ea66:	00d4      	lsls	r4, r2, #3
 800ea68:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ea6c:	00cb      	lsls	r3, r1, #3
 800ea6e:	4601      	mov	r1, r0
 800ea70:	f04f 0200 	mov.w	r2, #0
 800ea74:	f04f 0300 	mov.w	r3, #0
 800ea78:	f04f 0400 	mov.w	r4, #0
 800ea7c:	00d4      	lsls	r4, r2, #3
 800ea7e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ea82:	00cb      	lsls	r3, r1, #3
 800ea84:	1dc3      	adds	r3, r0, #7
 800ea86:	08db      	lsrs	r3, r3, #3
 800ea88:	00db      	lsls	r3, r3, #3
 800ea8a:	ebad 0d03 	sub.w	sp, sp, r3
 800ea8e:	466b      	mov	r3, sp
 800ea90:	3300      	adds	r3, #0
 800ea92:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800ea94:	2300      	movs	r3, #0
 800ea96:	633b      	str	r3, [r7, #48]	; 0x30
 800ea98:	e00d      	b.n	800eab6 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800ea9a:	697a      	ldr	r2, [r7, #20]
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9e:	4413      	add	r3, r2
 800eaa0:	7ffa      	ldrb	r2, [r7, #31]
 800eaa2:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	897a      	ldrh	r2, [r7, #10]
 800eaaa:	b2d1      	uxtb	r1, r2
 800eaac:	697a      	ldr	r2, [r7, #20]
 800eaae:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800eab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab2:	3302      	adds	r3, #2
 800eab4:	633b      	str	r3, [r7, #48]	; 0x30
 800eab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d3ed      	bcc.n	800ea9a <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	005b      	lsls	r3, r3, #1
 800eac2:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800eac4:	2301      	movs	r3, #1
 800eac6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00d      	beq.n	800eaee <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800ead2:	693a      	ldr	r2, [r7, #16]
 800ead4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eada:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eae0:	fbb3 f2f2 	udiv	r2, r3, r2
 800eae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eae6:	fb01 f202 	mul.w	r2, r1, r2
 800eaea:	1a9b      	subs	r3, r3, r2
 800eaec:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800eaee:	4b20      	ldr	r3, [pc, #128]	; (800eb70 <_LCD_Write_Frame+0x15c>)
 800eaf0:	695b      	ldr	r3, [r3, #20]
 800eaf2:	4a1f      	ldr	r2, [pc, #124]	; (800eb70 <_LCD_Write_Frame+0x15c>)
 800eaf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaf8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eafa:	4b1d      	ldr	r3, [pc, #116]	; (800eb70 <_LCD_Write_Frame+0x15c>)
 800eafc:	695b      	ldr	r3, [r3, #20]
 800eafe:	4a1c      	ldr	r2, [pc, #112]	; (800eb70 <_LCD_Write_Frame+0x15c>)
 800eb00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb04:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800eb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00f      	beq.n	800eb2c <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	627b      	str	r3, [r7, #36]	; 0x24
 800eb10:	e008      	b.n	800eb24 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800eb12:	6978      	ldr	r0, [r7, #20]
 800eb14:	230a      	movs	r3, #10
 800eb16:	2200      	movs	r2, #0
 800eb18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb1a:	f000 f8c1 	bl	800eca0 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800eb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb20:	3301      	adds	r3, #1
 800eb22:	627b      	str	r3, [r7, #36]	; 0x24
 800eb24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d3f2      	bcc.n	800eb12 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800eb2c:	6978      	ldr	r0, [r7, #20]
 800eb2e:	230a      	movs	r3, #10
 800eb30:	2200      	movs	r2, #0
 800eb32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb34:	f000 f8b4 	bl	800eca0 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800eb38:	2300      	movs	r3, #0
 800eb3a:	623b      	str	r3, [r7, #32]
 800eb3c:	e008      	b.n	800eb50 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb3e:	4b0c      	ldr	r3, [pc, #48]	; (800eb70 <_LCD_Write_Frame+0x15c>)
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	4a0b      	ldr	r2, [pc, #44]	; (800eb70 <_LCD_Write_Frame+0x15c>)
 800eb44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb48:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800eb4a:	6a3b      	ldr	r3, [r7, #32]
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	623b      	str	r3, [r7, #32]
 800eb50:	6a3b      	ldr	r3, [r7, #32]
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	ddf3      	ble.n	800eb3e <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800eb56:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <_LCD_Write_Frame+0x15c>)
 800eb58:	695b      	ldr	r3, [r3, #20]
 800eb5a:	4a05      	ldr	r2, [pc, #20]	; (800eb70 <_LCD_Write_Frame+0x15c>)
 800eb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb60:	6153      	str	r3, [r2, #20]
 800eb62:	46ad      	mov	sp, r5

}
 800eb64:	bf00      	nop
 800eb66:	3738      	adds	r7, #56	; 0x38
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bdb0      	pop	{r4, r5, r7, pc}
 800eb6c:	20000cb8 	.word	0x20000cb8
 800eb70:	48000400 	.word	0x48000400

0800eb74 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb7e:	4b15      	ldr	r3, [pc, #84]	; (800ebd4 <_LCD_SendCommand+0x60>)
 800eb80:	695b      	ldr	r3, [r3, #20]
 800eb82:	4a14      	ldr	r2, [pc, #80]	; (800ebd4 <_LCD_SendCommand+0x60>)
 800eb84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb88:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800eb8a:	4b12      	ldr	r3, [pc, #72]	; (800ebd4 <_LCD_SendCommand+0x60>)
 800eb8c:	695b      	ldr	r3, [r3, #20]
 800eb8e:	4a11      	ldr	r2, [pc, #68]	; (800ebd4 <_LCD_SendCommand+0x60>)
 800eb90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb94:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800eb96:	79fb      	ldrb	r3, [r7, #7]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f000 f84d 	bl	800ec3c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800eba2:	2300      	movs	r3, #0
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	e008      	b.n	800ebba <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eba8:	4b0a      	ldr	r3, [pc, #40]	; (800ebd4 <_LCD_SendCommand+0x60>)
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	4a09      	ldr	r2, [pc, #36]	; (800ebd4 <_LCD_SendCommand+0x60>)
 800ebae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebb2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	60fb      	str	r3, [r7, #12]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	ddf3      	ble.n	800eba8 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ebc0:	4b04      	ldr	r3, [pc, #16]	; (800ebd4 <_LCD_SendCommand+0x60>)
 800ebc2:	695b      	ldr	r3, [r3, #20]
 800ebc4:	4a03      	ldr	r2, [pc, #12]	; (800ebd4 <_LCD_SendCommand+0x60>)
 800ebc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebca:	6153      	str	r3, [r2, #20]
}
 800ebcc:	bf00      	nop
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	48000400 	.word	0x48000400

0800ebd8 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	4603      	mov	r3, r0
 800ebe0:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ebe2:	4b15      	ldr	r3, [pc, #84]	; (800ec38 <_LCD_SendData+0x60>)
 800ebe4:	695b      	ldr	r3, [r3, #20]
 800ebe6:	4a14      	ldr	r2, [pc, #80]	; (800ec38 <_LCD_SendData+0x60>)
 800ebe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebec:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ebee:	4b12      	ldr	r3, [pc, #72]	; (800ec38 <_LCD_SendData+0x60>)
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	4a11      	ldr	r2, [pc, #68]	; (800ec38 <_LCD_SendData+0x60>)
 800ebf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebf8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800ebfa:	79fb      	ldrb	r3, [r7, #7]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2100      	movs	r1, #0
 800ec00:	4618      	mov	r0, r3
 800ec02:	f000 f81b 	bl	800ec3c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ec06:	2300      	movs	r3, #0
 800ec08:	60fb      	str	r3, [r7, #12]
 800ec0a:	e008      	b.n	800ec1e <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec0c:	4b0a      	ldr	r3, [pc, #40]	; (800ec38 <_LCD_SendData+0x60>)
 800ec0e:	695b      	ldr	r3, [r3, #20]
 800ec10:	4a09      	ldr	r2, [pc, #36]	; (800ec38 <_LCD_SendData+0x60>)
 800ec12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec16:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	60fb      	str	r3, [r7, #12]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	ddf3      	ble.n	800ec0c <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec24:	4b04      	ldr	r3, [pc, #16]	; (800ec38 <_LCD_SendData+0x60>)
 800ec26:	695b      	ldr	r3, [r3, #20]
 800ec28:	4a03      	ldr	r2, [pc, #12]	; (800ec38 <_LCD_SendData+0x60>)
 800ec2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec2e:	6153      	str	r3, [r2, #20]
}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	48000400 	.word	0x48000400

0800ec3c <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	4603      	mov	r3, r0
 800ec44:	71fb      	strb	r3, [r7, #7]
 800ec46:	460b      	mov	r3, r1
 800ec48:	71bb      	strb	r3, [r7, #6]
 800ec4a:	4613      	mov	r3, r2
 800ec4c:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ec4e:	2300      	movs	r3, #0
 800ec50:	60fb      	str	r3, [r7, #12]
 800ec52:	e003      	b.n	800ec5c <_SPI_SendByte+0x20>
   		asm("nop");
 800ec54:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	79bb      	ldrb	r3, [r7, #6]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	dbf7      	blt.n	800ec54 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ec64:	4b0c      	ldr	r3, [pc, #48]	; (800ec98 <_SPI_SendByte+0x5c>)
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	f003 0302 	and.w	r3, r3, #2
 800ec6c:	2b02      	cmp	r3, #2
 800ec6e:	d102      	bne.n	800ec76 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800ec70:	4a0a      	ldr	r2, [pc, #40]	; (800ec9c <_SPI_SendByte+0x60>)
 800ec72:	79fb      	ldrb	r3, [r7, #7]
 800ec74:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800ec76:	2300      	movs	r3, #0
 800ec78:	60bb      	str	r3, [r7, #8]
 800ec7a:	e003      	b.n	800ec84 <_SPI_SendByte+0x48>
   		asm("nop");
 800ec7c:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	3301      	adds	r3, #1
 800ec82:	60bb      	str	r3, [r7, #8]
 800ec84:	797b      	ldrb	r3, [r7, #5]
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	dbf7      	blt.n	800ec7c <_SPI_SendByte+0x40>

#endif

}
 800ec8c:	bf00      	nop
 800ec8e:	3714      	adds	r7, #20
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr
 800ec98:	40003c00 	.word	0x40003c00
 800ec9c:	40003c0c 	.word	0x40003c0c

0800eca0 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b089      	sub	sp, #36	; 0x24
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	4611      	mov	r1, r2
 800ecac:	461a      	mov	r2, r3
 800ecae:	460b      	mov	r3, r1
 800ecb0:	71fb      	strb	r3, [r7, #7]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	61fb      	str	r3, [r7, #28]
 800ecba:	e003      	b.n	800ecc4 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800ecbc:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	61fb      	str	r3, [r7, #28]
 800ecc4:	79fb      	ldrb	r3, [r7, #7]
 800ecc6:	69fa      	ldr	r2, [r7, #28]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	dbf7      	blt.n	800ecbc <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800ecd0:	e01d      	b.n	800ed0e <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ecd2:	4b1c      	ldr	r3, [pc, #112]	; (800ed44 <_SPI_SendByteMultiByte+0xa4>)
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	f003 0302 	and.w	r3, r3, #2
 800ecda:	2b02      	cmp	r3, #2
 800ecdc:	d117      	bne.n	800ed0e <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d90a      	bls.n	800ecfa <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	881a      	ldrh	r2, [r3, #0]
 800ece8:	4b16      	ldr	r3, [pc, #88]	; (800ed44 <_SPI_SendByteMultiByte+0xa4>)
 800ecea:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	3302      	adds	r3, #2
 800ecf0:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	3b02      	subs	r3, #2
 800ecf6:	60bb      	str	r3, [r7, #8]
 800ecf8:	e009      	b.n	800ed0e <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800ecfa:	4a13      	ldr	r2, [pc, #76]	; (800ed48 <_SPI_SendByteMultiByte+0xa8>)
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	3301      	adds	r3, #1
 800ed06:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1de      	bne.n	800ecd2 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800ed14:	4b0b      	ldr	r3, [pc, #44]	; (800ed44 <_SPI_SendByteMultiByte+0xa4>)
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	4a0a      	ldr	r2, [pc, #40]	; (800ed44 <_SPI_SendByteMultiByte+0xa4>)
 800ed1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed1e:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800ed20:	2300      	movs	r3, #0
 800ed22:	617b      	str	r3, [r7, #20]
 800ed24:	e003      	b.n	800ed2e <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800ed26:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	617b      	str	r3, [r7, #20]
 800ed2e:	79bb      	ldrb	r3, [r7, #6]
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	dbf7      	blt.n	800ed26 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800ed36:	bf00      	nop
 800ed38:	3724      	adds	r7, #36	; 0x24
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	40003c00 	.word	0x40003c00
 800ed48:	40003c0c 	.word	0x40003c0c

0800ed4c <__errno>:
 800ed4c:	4b01      	ldr	r3, [pc, #4]	; (800ed54 <__errno+0x8>)
 800ed4e:	6818      	ldr	r0, [r3, #0]
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	20001cac 	.word	0x20001cac

0800ed58 <__libc_init_array>:
 800ed58:	b570      	push	{r4, r5, r6, lr}
 800ed5a:	4e0d      	ldr	r6, [pc, #52]	; (800ed90 <__libc_init_array+0x38>)
 800ed5c:	4c0d      	ldr	r4, [pc, #52]	; (800ed94 <__libc_init_array+0x3c>)
 800ed5e:	1ba4      	subs	r4, r4, r6
 800ed60:	10a4      	asrs	r4, r4, #2
 800ed62:	2500      	movs	r5, #0
 800ed64:	42a5      	cmp	r5, r4
 800ed66:	d109      	bne.n	800ed7c <__libc_init_array+0x24>
 800ed68:	4e0b      	ldr	r6, [pc, #44]	; (800ed98 <__libc_init_array+0x40>)
 800ed6a:	4c0c      	ldr	r4, [pc, #48]	; (800ed9c <__libc_init_array+0x44>)
 800ed6c:	f003 ff46 	bl	8012bfc <_init>
 800ed70:	1ba4      	subs	r4, r4, r6
 800ed72:	10a4      	asrs	r4, r4, #2
 800ed74:	2500      	movs	r5, #0
 800ed76:	42a5      	cmp	r5, r4
 800ed78:	d105      	bne.n	800ed86 <__libc_init_array+0x2e>
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed80:	4798      	blx	r3
 800ed82:	3501      	adds	r5, #1
 800ed84:	e7ee      	b.n	800ed64 <__libc_init_array+0xc>
 800ed86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed8a:	4798      	blx	r3
 800ed8c:	3501      	adds	r5, #1
 800ed8e:	e7f2      	b.n	800ed76 <__libc_init_array+0x1e>
 800ed90:	08014080 	.word	0x08014080
 800ed94:	08014080 	.word	0x08014080
 800ed98:	08014080 	.word	0x08014080
 800ed9c:	08014084 	.word	0x08014084

0800eda0 <memset>:
 800eda0:	4402      	add	r2, r0
 800eda2:	4603      	mov	r3, r0
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d100      	bne.n	800edaa <memset+0xa>
 800eda8:	4770      	bx	lr
 800edaa:	f803 1b01 	strb.w	r1, [r3], #1
 800edae:	e7f9      	b.n	800eda4 <memset+0x4>

0800edb0 <__cvt>:
 800edb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edb4:	ec55 4b10 	vmov	r4, r5, d0
 800edb8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800edba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800edbe:	2d00      	cmp	r5, #0
 800edc0:	460e      	mov	r6, r1
 800edc2:	4691      	mov	r9, r2
 800edc4:	4619      	mov	r1, r3
 800edc6:	bfb8      	it	lt
 800edc8:	4622      	movlt	r2, r4
 800edca:	462b      	mov	r3, r5
 800edcc:	f027 0720 	bic.w	r7, r7, #32
 800edd0:	bfbb      	ittet	lt
 800edd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800edd6:	461d      	movlt	r5, r3
 800edd8:	2300      	movge	r3, #0
 800edda:	232d      	movlt	r3, #45	; 0x2d
 800eddc:	bfb8      	it	lt
 800edde:	4614      	movlt	r4, r2
 800ede0:	2f46      	cmp	r7, #70	; 0x46
 800ede2:	700b      	strb	r3, [r1, #0]
 800ede4:	d004      	beq.n	800edf0 <__cvt+0x40>
 800ede6:	2f45      	cmp	r7, #69	; 0x45
 800ede8:	d100      	bne.n	800edec <__cvt+0x3c>
 800edea:	3601      	adds	r6, #1
 800edec:	2102      	movs	r1, #2
 800edee:	e000      	b.n	800edf2 <__cvt+0x42>
 800edf0:	2103      	movs	r1, #3
 800edf2:	ab03      	add	r3, sp, #12
 800edf4:	9301      	str	r3, [sp, #4]
 800edf6:	ab02      	add	r3, sp, #8
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	4632      	mov	r2, r6
 800edfc:	4653      	mov	r3, sl
 800edfe:	ec45 4b10 	vmov	d0, r4, r5
 800ee02:	f000 fe25 	bl	800fa50 <_dtoa_r>
 800ee06:	2f47      	cmp	r7, #71	; 0x47
 800ee08:	4680      	mov	r8, r0
 800ee0a:	d102      	bne.n	800ee12 <__cvt+0x62>
 800ee0c:	f019 0f01 	tst.w	r9, #1
 800ee10:	d026      	beq.n	800ee60 <__cvt+0xb0>
 800ee12:	2f46      	cmp	r7, #70	; 0x46
 800ee14:	eb08 0906 	add.w	r9, r8, r6
 800ee18:	d111      	bne.n	800ee3e <__cvt+0x8e>
 800ee1a:	f898 3000 	ldrb.w	r3, [r8]
 800ee1e:	2b30      	cmp	r3, #48	; 0x30
 800ee20:	d10a      	bne.n	800ee38 <__cvt+0x88>
 800ee22:	2200      	movs	r2, #0
 800ee24:	2300      	movs	r3, #0
 800ee26:	4620      	mov	r0, r4
 800ee28:	4629      	mov	r1, r5
 800ee2a:	f7f1 fe75 	bl	8000b18 <__aeabi_dcmpeq>
 800ee2e:	b918      	cbnz	r0, 800ee38 <__cvt+0x88>
 800ee30:	f1c6 0601 	rsb	r6, r6, #1
 800ee34:	f8ca 6000 	str.w	r6, [sl]
 800ee38:	f8da 3000 	ldr.w	r3, [sl]
 800ee3c:	4499      	add	r9, r3
 800ee3e:	2200      	movs	r2, #0
 800ee40:	2300      	movs	r3, #0
 800ee42:	4620      	mov	r0, r4
 800ee44:	4629      	mov	r1, r5
 800ee46:	f7f1 fe67 	bl	8000b18 <__aeabi_dcmpeq>
 800ee4a:	b938      	cbnz	r0, 800ee5c <__cvt+0xac>
 800ee4c:	2230      	movs	r2, #48	; 0x30
 800ee4e:	9b03      	ldr	r3, [sp, #12]
 800ee50:	454b      	cmp	r3, r9
 800ee52:	d205      	bcs.n	800ee60 <__cvt+0xb0>
 800ee54:	1c59      	adds	r1, r3, #1
 800ee56:	9103      	str	r1, [sp, #12]
 800ee58:	701a      	strb	r2, [r3, #0]
 800ee5a:	e7f8      	b.n	800ee4e <__cvt+0x9e>
 800ee5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee60:	9b03      	ldr	r3, [sp, #12]
 800ee62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee64:	eba3 0308 	sub.w	r3, r3, r8
 800ee68:	4640      	mov	r0, r8
 800ee6a:	6013      	str	r3, [r2, #0]
 800ee6c:	b004      	add	sp, #16
 800ee6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ee72 <__exponent>:
 800ee72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee74:	2900      	cmp	r1, #0
 800ee76:	4604      	mov	r4, r0
 800ee78:	bfba      	itte	lt
 800ee7a:	4249      	neglt	r1, r1
 800ee7c:	232d      	movlt	r3, #45	; 0x2d
 800ee7e:	232b      	movge	r3, #43	; 0x2b
 800ee80:	2909      	cmp	r1, #9
 800ee82:	f804 2b02 	strb.w	r2, [r4], #2
 800ee86:	7043      	strb	r3, [r0, #1]
 800ee88:	dd20      	ble.n	800eecc <__exponent+0x5a>
 800ee8a:	f10d 0307 	add.w	r3, sp, #7
 800ee8e:	461f      	mov	r7, r3
 800ee90:	260a      	movs	r6, #10
 800ee92:	fb91 f5f6 	sdiv	r5, r1, r6
 800ee96:	fb06 1115 	mls	r1, r6, r5, r1
 800ee9a:	3130      	adds	r1, #48	; 0x30
 800ee9c:	2d09      	cmp	r5, #9
 800ee9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eea2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800eea6:	4629      	mov	r1, r5
 800eea8:	dc09      	bgt.n	800eebe <__exponent+0x4c>
 800eeaa:	3130      	adds	r1, #48	; 0x30
 800eeac:	3b02      	subs	r3, #2
 800eeae:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eeb2:	42bb      	cmp	r3, r7
 800eeb4:	4622      	mov	r2, r4
 800eeb6:	d304      	bcc.n	800eec2 <__exponent+0x50>
 800eeb8:	1a10      	subs	r0, r2, r0
 800eeba:	b003      	add	sp, #12
 800eebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eebe:	4613      	mov	r3, r2
 800eec0:	e7e7      	b.n	800ee92 <__exponent+0x20>
 800eec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eec6:	f804 2b01 	strb.w	r2, [r4], #1
 800eeca:	e7f2      	b.n	800eeb2 <__exponent+0x40>
 800eecc:	2330      	movs	r3, #48	; 0x30
 800eece:	4419      	add	r1, r3
 800eed0:	7083      	strb	r3, [r0, #2]
 800eed2:	1d02      	adds	r2, r0, #4
 800eed4:	70c1      	strb	r1, [r0, #3]
 800eed6:	e7ef      	b.n	800eeb8 <__exponent+0x46>

0800eed8 <_printf_float>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	b08d      	sub	sp, #52	; 0x34
 800eede:	460c      	mov	r4, r1
 800eee0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800eee4:	4616      	mov	r6, r2
 800eee6:	461f      	mov	r7, r3
 800eee8:	4605      	mov	r5, r0
 800eeea:	f001 fce3 	bl	80108b4 <_localeconv_r>
 800eeee:	6803      	ldr	r3, [r0, #0]
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7f1 f994 	bl	8000220 <strlen>
 800eef8:	2300      	movs	r3, #0
 800eefa:	930a      	str	r3, [sp, #40]	; 0x28
 800eefc:	f8d8 3000 	ldr.w	r3, [r8]
 800ef00:	9005      	str	r0, [sp, #20]
 800ef02:	3307      	adds	r3, #7
 800ef04:	f023 0307 	bic.w	r3, r3, #7
 800ef08:	f103 0208 	add.w	r2, r3, #8
 800ef0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ef10:	f8d4 b000 	ldr.w	fp, [r4]
 800ef14:	f8c8 2000 	str.w	r2, [r8]
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ef20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef28:	9307      	str	r3, [sp, #28]
 800ef2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef32:	4ba7      	ldr	r3, [pc, #668]	; (800f1d0 <_printf_float+0x2f8>)
 800ef34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef38:	f7f1 fe20 	bl	8000b7c <__aeabi_dcmpun>
 800ef3c:	bb70      	cbnz	r0, 800ef9c <_printf_float+0xc4>
 800ef3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef42:	4ba3      	ldr	r3, [pc, #652]	; (800f1d0 <_printf_float+0x2f8>)
 800ef44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef48:	f7f1 fdfa 	bl	8000b40 <__aeabi_dcmple>
 800ef4c:	bb30      	cbnz	r0, 800ef9c <_printf_float+0xc4>
 800ef4e:	2200      	movs	r2, #0
 800ef50:	2300      	movs	r3, #0
 800ef52:	4640      	mov	r0, r8
 800ef54:	4649      	mov	r1, r9
 800ef56:	f7f1 fde9 	bl	8000b2c <__aeabi_dcmplt>
 800ef5a:	b110      	cbz	r0, 800ef62 <_printf_float+0x8a>
 800ef5c:	232d      	movs	r3, #45	; 0x2d
 800ef5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef62:	4a9c      	ldr	r2, [pc, #624]	; (800f1d4 <_printf_float+0x2fc>)
 800ef64:	4b9c      	ldr	r3, [pc, #624]	; (800f1d8 <_printf_float+0x300>)
 800ef66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ef6a:	bf8c      	ite	hi
 800ef6c:	4690      	movhi	r8, r2
 800ef6e:	4698      	movls	r8, r3
 800ef70:	2303      	movs	r3, #3
 800ef72:	f02b 0204 	bic.w	r2, fp, #4
 800ef76:	6123      	str	r3, [r4, #16]
 800ef78:	6022      	str	r2, [r4, #0]
 800ef7a:	f04f 0900 	mov.w	r9, #0
 800ef7e:	9700      	str	r7, [sp, #0]
 800ef80:	4633      	mov	r3, r6
 800ef82:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef84:	4621      	mov	r1, r4
 800ef86:	4628      	mov	r0, r5
 800ef88:	f000 f9e6 	bl	800f358 <_printf_common>
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	f040 808d 	bne.w	800f0ac <_printf_float+0x1d4>
 800ef92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef96:	b00d      	add	sp, #52	; 0x34
 800ef98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9c:	4642      	mov	r2, r8
 800ef9e:	464b      	mov	r3, r9
 800efa0:	4640      	mov	r0, r8
 800efa2:	4649      	mov	r1, r9
 800efa4:	f7f1 fdea 	bl	8000b7c <__aeabi_dcmpun>
 800efa8:	b110      	cbz	r0, 800efb0 <_printf_float+0xd8>
 800efaa:	4a8c      	ldr	r2, [pc, #560]	; (800f1dc <_printf_float+0x304>)
 800efac:	4b8c      	ldr	r3, [pc, #560]	; (800f1e0 <_printf_float+0x308>)
 800efae:	e7da      	b.n	800ef66 <_printf_float+0x8e>
 800efb0:	6861      	ldr	r1, [r4, #4]
 800efb2:	1c4b      	adds	r3, r1, #1
 800efb4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800efb8:	a80a      	add	r0, sp, #40	; 0x28
 800efba:	d13e      	bne.n	800f03a <_printf_float+0x162>
 800efbc:	2306      	movs	r3, #6
 800efbe:	6063      	str	r3, [r4, #4]
 800efc0:	2300      	movs	r3, #0
 800efc2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800efc6:	ab09      	add	r3, sp, #36	; 0x24
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	ec49 8b10 	vmov	d0, r8, r9
 800efce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800efd2:	6022      	str	r2, [r4, #0]
 800efd4:	f8cd a004 	str.w	sl, [sp, #4]
 800efd8:	6861      	ldr	r1, [r4, #4]
 800efda:	4628      	mov	r0, r5
 800efdc:	f7ff fee8 	bl	800edb0 <__cvt>
 800efe0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800efe4:	2b47      	cmp	r3, #71	; 0x47
 800efe6:	4680      	mov	r8, r0
 800efe8:	d109      	bne.n	800effe <_printf_float+0x126>
 800efea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efec:	1cd8      	adds	r0, r3, #3
 800efee:	db02      	blt.n	800eff6 <_printf_float+0x11e>
 800eff0:	6862      	ldr	r2, [r4, #4]
 800eff2:	4293      	cmp	r3, r2
 800eff4:	dd47      	ble.n	800f086 <_printf_float+0x1ae>
 800eff6:	f1aa 0a02 	sub.w	sl, sl, #2
 800effa:	fa5f fa8a 	uxtb.w	sl, sl
 800effe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f002:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f004:	d824      	bhi.n	800f050 <_printf_float+0x178>
 800f006:	3901      	subs	r1, #1
 800f008:	4652      	mov	r2, sl
 800f00a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f00e:	9109      	str	r1, [sp, #36]	; 0x24
 800f010:	f7ff ff2f 	bl	800ee72 <__exponent>
 800f014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f016:	1813      	adds	r3, r2, r0
 800f018:	2a01      	cmp	r2, #1
 800f01a:	4681      	mov	r9, r0
 800f01c:	6123      	str	r3, [r4, #16]
 800f01e:	dc02      	bgt.n	800f026 <_printf_float+0x14e>
 800f020:	6822      	ldr	r2, [r4, #0]
 800f022:	07d1      	lsls	r1, r2, #31
 800f024:	d501      	bpl.n	800f02a <_printf_float+0x152>
 800f026:	3301      	adds	r3, #1
 800f028:	6123      	str	r3, [r4, #16]
 800f02a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d0a5      	beq.n	800ef7e <_printf_float+0xa6>
 800f032:	232d      	movs	r3, #45	; 0x2d
 800f034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f038:	e7a1      	b.n	800ef7e <_printf_float+0xa6>
 800f03a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f03e:	f000 8177 	beq.w	800f330 <_printf_float+0x458>
 800f042:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f046:	d1bb      	bne.n	800efc0 <_printf_float+0xe8>
 800f048:	2900      	cmp	r1, #0
 800f04a:	d1b9      	bne.n	800efc0 <_printf_float+0xe8>
 800f04c:	2301      	movs	r3, #1
 800f04e:	e7b6      	b.n	800efbe <_printf_float+0xe6>
 800f050:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f054:	d119      	bne.n	800f08a <_printf_float+0x1b2>
 800f056:	2900      	cmp	r1, #0
 800f058:	6863      	ldr	r3, [r4, #4]
 800f05a:	dd0c      	ble.n	800f076 <_printf_float+0x19e>
 800f05c:	6121      	str	r1, [r4, #16]
 800f05e:	b913      	cbnz	r3, 800f066 <_printf_float+0x18e>
 800f060:	6822      	ldr	r2, [r4, #0]
 800f062:	07d2      	lsls	r2, r2, #31
 800f064:	d502      	bpl.n	800f06c <_printf_float+0x194>
 800f066:	3301      	adds	r3, #1
 800f068:	440b      	add	r3, r1
 800f06a:	6123      	str	r3, [r4, #16]
 800f06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f06e:	65a3      	str	r3, [r4, #88]	; 0x58
 800f070:	f04f 0900 	mov.w	r9, #0
 800f074:	e7d9      	b.n	800f02a <_printf_float+0x152>
 800f076:	b913      	cbnz	r3, 800f07e <_printf_float+0x1a6>
 800f078:	6822      	ldr	r2, [r4, #0]
 800f07a:	07d0      	lsls	r0, r2, #31
 800f07c:	d501      	bpl.n	800f082 <_printf_float+0x1aa>
 800f07e:	3302      	adds	r3, #2
 800f080:	e7f3      	b.n	800f06a <_printf_float+0x192>
 800f082:	2301      	movs	r3, #1
 800f084:	e7f1      	b.n	800f06a <_printf_float+0x192>
 800f086:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f08a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f08e:	4293      	cmp	r3, r2
 800f090:	db05      	blt.n	800f09e <_printf_float+0x1c6>
 800f092:	6822      	ldr	r2, [r4, #0]
 800f094:	6123      	str	r3, [r4, #16]
 800f096:	07d1      	lsls	r1, r2, #31
 800f098:	d5e8      	bpl.n	800f06c <_printf_float+0x194>
 800f09a:	3301      	adds	r3, #1
 800f09c:	e7e5      	b.n	800f06a <_printf_float+0x192>
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	bfd4      	ite	le
 800f0a2:	f1c3 0302 	rsble	r3, r3, #2
 800f0a6:	2301      	movgt	r3, #1
 800f0a8:	4413      	add	r3, r2
 800f0aa:	e7de      	b.n	800f06a <_printf_float+0x192>
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	055a      	lsls	r2, r3, #21
 800f0b0:	d407      	bmi.n	800f0c2 <_printf_float+0x1ea>
 800f0b2:	6923      	ldr	r3, [r4, #16]
 800f0b4:	4642      	mov	r2, r8
 800f0b6:	4631      	mov	r1, r6
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	47b8      	blx	r7
 800f0bc:	3001      	adds	r0, #1
 800f0be:	d12b      	bne.n	800f118 <_printf_float+0x240>
 800f0c0:	e767      	b.n	800ef92 <_printf_float+0xba>
 800f0c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f0c6:	f240 80dc 	bls.w	800f282 <_printf_float+0x3aa>
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0d2:	f7f1 fd21 	bl	8000b18 <__aeabi_dcmpeq>
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d033      	beq.n	800f142 <_printf_float+0x26a>
 800f0da:	2301      	movs	r3, #1
 800f0dc:	4a41      	ldr	r2, [pc, #260]	; (800f1e4 <_printf_float+0x30c>)
 800f0de:	4631      	mov	r1, r6
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	47b8      	blx	r7
 800f0e4:	3001      	adds	r0, #1
 800f0e6:	f43f af54 	beq.w	800ef92 <_printf_float+0xba>
 800f0ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	db02      	blt.n	800f0f8 <_printf_float+0x220>
 800f0f2:	6823      	ldr	r3, [r4, #0]
 800f0f4:	07d8      	lsls	r0, r3, #31
 800f0f6:	d50f      	bpl.n	800f118 <_printf_float+0x240>
 800f0f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4628      	mov	r0, r5
 800f100:	47b8      	blx	r7
 800f102:	3001      	adds	r0, #1
 800f104:	f43f af45 	beq.w	800ef92 <_printf_float+0xba>
 800f108:	f04f 0800 	mov.w	r8, #0
 800f10c:	f104 091a 	add.w	r9, r4, #26
 800f110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f112:	3b01      	subs	r3, #1
 800f114:	4543      	cmp	r3, r8
 800f116:	dc09      	bgt.n	800f12c <_printf_float+0x254>
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	079b      	lsls	r3, r3, #30
 800f11c:	f100 8103 	bmi.w	800f326 <_printf_float+0x44e>
 800f120:	68e0      	ldr	r0, [r4, #12]
 800f122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f124:	4298      	cmp	r0, r3
 800f126:	bfb8      	it	lt
 800f128:	4618      	movlt	r0, r3
 800f12a:	e734      	b.n	800ef96 <_printf_float+0xbe>
 800f12c:	2301      	movs	r3, #1
 800f12e:	464a      	mov	r2, r9
 800f130:	4631      	mov	r1, r6
 800f132:	4628      	mov	r0, r5
 800f134:	47b8      	blx	r7
 800f136:	3001      	adds	r0, #1
 800f138:	f43f af2b 	beq.w	800ef92 <_printf_float+0xba>
 800f13c:	f108 0801 	add.w	r8, r8, #1
 800f140:	e7e6      	b.n	800f110 <_printf_float+0x238>
 800f142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f144:	2b00      	cmp	r3, #0
 800f146:	dc2b      	bgt.n	800f1a0 <_printf_float+0x2c8>
 800f148:	2301      	movs	r3, #1
 800f14a:	4a26      	ldr	r2, [pc, #152]	; (800f1e4 <_printf_float+0x30c>)
 800f14c:	4631      	mov	r1, r6
 800f14e:	4628      	mov	r0, r5
 800f150:	47b8      	blx	r7
 800f152:	3001      	adds	r0, #1
 800f154:	f43f af1d 	beq.w	800ef92 <_printf_float+0xba>
 800f158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f15a:	b923      	cbnz	r3, 800f166 <_printf_float+0x28e>
 800f15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f15e:	b913      	cbnz	r3, 800f166 <_printf_float+0x28e>
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	07d9      	lsls	r1, r3, #31
 800f164:	d5d8      	bpl.n	800f118 <_printf_float+0x240>
 800f166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f16a:	4631      	mov	r1, r6
 800f16c:	4628      	mov	r0, r5
 800f16e:	47b8      	blx	r7
 800f170:	3001      	adds	r0, #1
 800f172:	f43f af0e 	beq.w	800ef92 <_printf_float+0xba>
 800f176:	f04f 0900 	mov.w	r9, #0
 800f17a:	f104 0a1a 	add.w	sl, r4, #26
 800f17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f180:	425b      	negs	r3, r3
 800f182:	454b      	cmp	r3, r9
 800f184:	dc01      	bgt.n	800f18a <_printf_float+0x2b2>
 800f186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f188:	e794      	b.n	800f0b4 <_printf_float+0x1dc>
 800f18a:	2301      	movs	r3, #1
 800f18c:	4652      	mov	r2, sl
 800f18e:	4631      	mov	r1, r6
 800f190:	4628      	mov	r0, r5
 800f192:	47b8      	blx	r7
 800f194:	3001      	adds	r0, #1
 800f196:	f43f aefc 	beq.w	800ef92 <_printf_float+0xba>
 800f19a:	f109 0901 	add.w	r9, r9, #1
 800f19e:	e7ee      	b.n	800f17e <_printf_float+0x2a6>
 800f1a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	bfa8      	it	ge
 800f1a8:	461a      	movge	r2, r3
 800f1aa:	2a00      	cmp	r2, #0
 800f1ac:	4691      	mov	r9, r2
 800f1ae:	dd07      	ble.n	800f1c0 <_printf_float+0x2e8>
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	4631      	mov	r1, r6
 800f1b4:	4642      	mov	r2, r8
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	47b8      	blx	r7
 800f1ba:	3001      	adds	r0, #1
 800f1bc:	f43f aee9 	beq.w	800ef92 <_printf_float+0xba>
 800f1c0:	f104 031a 	add.w	r3, r4, #26
 800f1c4:	f04f 0b00 	mov.w	fp, #0
 800f1c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1cc:	9306      	str	r3, [sp, #24]
 800f1ce:	e015      	b.n	800f1fc <_printf_float+0x324>
 800f1d0:	7fefffff 	.word	0x7fefffff
 800f1d4:	08013d7c 	.word	0x08013d7c
 800f1d8:	08013d78 	.word	0x08013d78
 800f1dc:	08013d84 	.word	0x08013d84
 800f1e0:	08013d80 	.word	0x08013d80
 800f1e4:	08014034 	.word	0x08014034
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	9a06      	ldr	r2, [sp, #24]
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	47b8      	blx	r7
 800f1f2:	3001      	adds	r0, #1
 800f1f4:	f43f aecd 	beq.w	800ef92 <_printf_float+0xba>
 800f1f8:	f10b 0b01 	add.w	fp, fp, #1
 800f1fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f200:	ebaa 0309 	sub.w	r3, sl, r9
 800f204:	455b      	cmp	r3, fp
 800f206:	dcef      	bgt.n	800f1e8 <_printf_float+0x310>
 800f208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f20c:	429a      	cmp	r2, r3
 800f20e:	44d0      	add	r8, sl
 800f210:	db15      	blt.n	800f23e <_printf_float+0x366>
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	07da      	lsls	r2, r3, #31
 800f216:	d412      	bmi.n	800f23e <_printf_float+0x366>
 800f218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f21a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f21c:	eba3 020a 	sub.w	r2, r3, sl
 800f220:	eba3 0a01 	sub.w	sl, r3, r1
 800f224:	4592      	cmp	sl, r2
 800f226:	bfa8      	it	ge
 800f228:	4692      	movge	sl, r2
 800f22a:	f1ba 0f00 	cmp.w	sl, #0
 800f22e:	dc0e      	bgt.n	800f24e <_printf_float+0x376>
 800f230:	f04f 0800 	mov.w	r8, #0
 800f234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f238:	f104 091a 	add.w	r9, r4, #26
 800f23c:	e019      	b.n	800f272 <_printf_float+0x39a>
 800f23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f242:	4631      	mov	r1, r6
 800f244:	4628      	mov	r0, r5
 800f246:	47b8      	blx	r7
 800f248:	3001      	adds	r0, #1
 800f24a:	d1e5      	bne.n	800f218 <_printf_float+0x340>
 800f24c:	e6a1      	b.n	800ef92 <_printf_float+0xba>
 800f24e:	4653      	mov	r3, sl
 800f250:	4642      	mov	r2, r8
 800f252:	4631      	mov	r1, r6
 800f254:	4628      	mov	r0, r5
 800f256:	47b8      	blx	r7
 800f258:	3001      	adds	r0, #1
 800f25a:	d1e9      	bne.n	800f230 <_printf_float+0x358>
 800f25c:	e699      	b.n	800ef92 <_printf_float+0xba>
 800f25e:	2301      	movs	r3, #1
 800f260:	464a      	mov	r2, r9
 800f262:	4631      	mov	r1, r6
 800f264:	4628      	mov	r0, r5
 800f266:	47b8      	blx	r7
 800f268:	3001      	adds	r0, #1
 800f26a:	f43f ae92 	beq.w	800ef92 <_printf_float+0xba>
 800f26e:	f108 0801 	add.w	r8, r8, #1
 800f272:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f276:	1a9b      	subs	r3, r3, r2
 800f278:	eba3 030a 	sub.w	r3, r3, sl
 800f27c:	4543      	cmp	r3, r8
 800f27e:	dcee      	bgt.n	800f25e <_printf_float+0x386>
 800f280:	e74a      	b.n	800f118 <_printf_float+0x240>
 800f282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f284:	2a01      	cmp	r2, #1
 800f286:	dc01      	bgt.n	800f28c <_printf_float+0x3b4>
 800f288:	07db      	lsls	r3, r3, #31
 800f28a:	d53a      	bpl.n	800f302 <_printf_float+0x42a>
 800f28c:	2301      	movs	r3, #1
 800f28e:	4642      	mov	r2, r8
 800f290:	4631      	mov	r1, r6
 800f292:	4628      	mov	r0, r5
 800f294:	47b8      	blx	r7
 800f296:	3001      	adds	r0, #1
 800f298:	f43f ae7b 	beq.w	800ef92 <_printf_float+0xba>
 800f29c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2a0:	4631      	mov	r1, r6
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	47b8      	blx	r7
 800f2a6:	3001      	adds	r0, #1
 800f2a8:	f108 0801 	add.w	r8, r8, #1
 800f2ac:	f43f ae71 	beq.w	800ef92 <_printf_float+0xba>
 800f2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f2b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2bc:	2300      	movs	r3, #0
 800f2be:	f7f1 fc2b 	bl	8000b18 <__aeabi_dcmpeq>
 800f2c2:	b9c8      	cbnz	r0, 800f2f8 <_printf_float+0x420>
 800f2c4:	4653      	mov	r3, sl
 800f2c6:	4642      	mov	r2, r8
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	47b8      	blx	r7
 800f2ce:	3001      	adds	r0, #1
 800f2d0:	d10e      	bne.n	800f2f0 <_printf_float+0x418>
 800f2d2:	e65e      	b.n	800ef92 <_printf_float+0xba>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	4652      	mov	r2, sl
 800f2d8:	4631      	mov	r1, r6
 800f2da:	4628      	mov	r0, r5
 800f2dc:	47b8      	blx	r7
 800f2de:	3001      	adds	r0, #1
 800f2e0:	f43f ae57 	beq.w	800ef92 <_printf_float+0xba>
 800f2e4:	f108 0801 	add.w	r8, r8, #1
 800f2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2ea:	3b01      	subs	r3, #1
 800f2ec:	4543      	cmp	r3, r8
 800f2ee:	dcf1      	bgt.n	800f2d4 <_printf_float+0x3fc>
 800f2f0:	464b      	mov	r3, r9
 800f2f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f2f6:	e6de      	b.n	800f0b6 <_printf_float+0x1de>
 800f2f8:	f04f 0800 	mov.w	r8, #0
 800f2fc:	f104 0a1a 	add.w	sl, r4, #26
 800f300:	e7f2      	b.n	800f2e8 <_printf_float+0x410>
 800f302:	2301      	movs	r3, #1
 800f304:	e7df      	b.n	800f2c6 <_printf_float+0x3ee>
 800f306:	2301      	movs	r3, #1
 800f308:	464a      	mov	r2, r9
 800f30a:	4631      	mov	r1, r6
 800f30c:	4628      	mov	r0, r5
 800f30e:	47b8      	blx	r7
 800f310:	3001      	adds	r0, #1
 800f312:	f43f ae3e 	beq.w	800ef92 <_printf_float+0xba>
 800f316:	f108 0801 	add.w	r8, r8, #1
 800f31a:	68e3      	ldr	r3, [r4, #12]
 800f31c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f31e:	1a9b      	subs	r3, r3, r2
 800f320:	4543      	cmp	r3, r8
 800f322:	dcf0      	bgt.n	800f306 <_printf_float+0x42e>
 800f324:	e6fc      	b.n	800f120 <_printf_float+0x248>
 800f326:	f04f 0800 	mov.w	r8, #0
 800f32a:	f104 0919 	add.w	r9, r4, #25
 800f32e:	e7f4      	b.n	800f31a <_printf_float+0x442>
 800f330:	2900      	cmp	r1, #0
 800f332:	f43f ae8b 	beq.w	800f04c <_printf_float+0x174>
 800f336:	2300      	movs	r3, #0
 800f338:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f33c:	ab09      	add	r3, sp, #36	; 0x24
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	ec49 8b10 	vmov	d0, r8, r9
 800f344:	6022      	str	r2, [r4, #0]
 800f346:	f8cd a004 	str.w	sl, [sp, #4]
 800f34a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f34e:	4628      	mov	r0, r5
 800f350:	f7ff fd2e 	bl	800edb0 <__cvt>
 800f354:	4680      	mov	r8, r0
 800f356:	e648      	b.n	800efea <_printf_float+0x112>

0800f358 <_printf_common>:
 800f358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f35c:	4691      	mov	r9, r2
 800f35e:	461f      	mov	r7, r3
 800f360:	688a      	ldr	r2, [r1, #8]
 800f362:	690b      	ldr	r3, [r1, #16]
 800f364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f368:	4293      	cmp	r3, r2
 800f36a:	bfb8      	it	lt
 800f36c:	4613      	movlt	r3, r2
 800f36e:	f8c9 3000 	str.w	r3, [r9]
 800f372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f376:	4606      	mov	r6, r0
 800f378:	460c      	mov	r4, r1
 800f37a:	b112      	cbz	r2, 800f382 <_printf_common+0x2a>
 800f37c:	3301      	adds	r3, #1
 800f37e:	f8c9 3000 	str.w	r3, [r9]
 800f382:	6823      	ldr	r3, [r4, #0]
 800f384:	0699      	lsls	r1, r3, #26
 800f386:	bf42      	ittt	mi
 800f388:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f38c:	3302      	addmi	r3, #2
 800f38e:	f8c9 3000 	strmi.w	r3, [r9]
 800f392:	6825      	ldr	r5, [r4, #0]
 800f394:	f015 0506 	ands.w	r5, r5, #6
 800f398:	d107      	bne.n	800f3aa <_printf_common+0x52>
 800f39a:	f104 0a19 	add.w	sl, r4, #25
 800f39e:	68e3      	ldr	r3, [r4, #12]
 800f3a0:	f8d9 2000 	ldr.w	r2, [r9]
 800f3a4:	1a9b      	subs	r3, r3, r2
 800f3a6:	42ab      	cmp	r3, r5
 800f3a8:	dc28      	bgt.n	800f3fc <_printf_common+0xa4>
 800f3aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f3ae:	6822      	ldr	r2, [r4, #0]
 800f3b0:	3300      	adds	r3, #0
 800f3b2:	bf18      	it	ne
 800f3b4:	2301      	movne	r3, #1
 800f3b6:	0692      	lsls	r2, r2, #26
 800f3b8:	d42d      	bmi.n	800f416 <_printf_common+0xbe>
 800f3ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3be:	4639      	mov	r1, r7
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	47c0      	blx	r8
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	d020      	beq.n	800f40a <_printf_common+0xb2>
 800f3c8:	6823      	ldr	r3, [r4, #0]
 800f3ca:	68e5      	ldr	r5, [r4, #12]
 800f3cc:	f8d9 2000 	ldr.w	r2, [r9]
 800f3d0:	f003 0306 	and.w	r3, r3, #6
 800f3d4:	2b04      	cmp	r3, #4
 800f3d6:	bf08      	it	eq
 800f3d8:	1aad      	subeq	r5, r5, r2
 800f3da:	68a3      	ldr	r3, [r4, #8]
 800f3dc:	6922      	ldr	r2, [r4, #16]
 800f3de:	bf0c      	ite	eq
 800f3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3e4:	2500      	movne	r5, #0
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	bfc4      	itt	gt
 800f3ea:	1a9b      	subgt	r3, r3, r2
 800f3ec:	18ed      	addgt	r5, r5, r3
 800f3ee:	f04f 0900 	mov.w	r9, #0
 800f3f2:	341a      	adds	r4, #26
 800f3f4:	454d      	cmp	r5, r9
 800f3f6:	d11a      	bne.n	800f42e <_printf_common+0xd6>
 800f3f8:	2000      	movs	r0, #0
 800f3fa:	e008      	b.n	800f40e <_printf_common+0xb6>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	4652      	mov	r2, sl
 800f400:	4639      	mov	r1, r7
 800f402:	4630      	mov	r0, r6
 800f404:	47c0      	blx	r8
 800f406:	3001      	adds	r0, #1
 800f408:	d103      	bne.n	800f412 <_printf_common+0xba>
 800f40a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f412:	3501      	adds	r5, #1
 800f414:	e7c3      	b.n	800f39e <_printf_common+0x46>
 800f416:	18e1      	adds	r1, r4, r3
 800f418:	1c5a      	adds	r2, r3, #1
 800f41a:	2030      	movs	r0, #48	; 0x30
 800f41c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f420:	4422      	add	r2, r4
 800f422:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f42a:	3302      	adds	r3, #2
 800f42c:	e7c5      	b.n	800f3ba <_printf_common+0x62>
 800f42e:	2301      	movs	r3, #1
 800f430:	4622      	mov	r2, r4
 800f432:	4639      	mov	r1, r7
 800f434:	4630      	mov	r0, r6
 800f436:	47c0      	blx	r8
 800f438:	3001      	adds	r0, #1
 800f43a:	d0e6      	beq.n	800f40a <_printf_common+0xb2>
 800f43c:	f109 0901 	add.w	r9, r9, #1
 800f440:	e7d8      	b.n	800f3f4 <_printf_common+0x9c>
	...

0800f444 <_printf_i>:
 800f444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f448:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f44c:	460c      	mov	r4, r1
 800f44e:	7e09      	ldrb	r1, [r1, #24]
 800f450:	b085      	sub	sp, #20
 800f452:	296e      	cmp	r1, #110	; 0x6e
 800f454:	4617      	mov	r7, r2
 800f456:	4606      	mov	r6, r0
 800f458:	4698      	mov	r8, r3
 800f45a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f45c:	f000 80b3 	beq.w	800f5c6 <_printf_i+0x182>
 800f460:	d822      	bhi.n	800f4a8 <_printf_i+0x64>
 800f462:	2963      	cmp	r1, #99	; 0x63
 800f464:	d036      	beq.n	800f4d4 <_printf_i+0x90>
 800f466:	d80a      	bhi.n	800f47e <_printf_i+0x3a>
 800f468:	2900      	cmp	r1, #0
 800f46a:	f000 80b9 	beq.w	800f5e0 <_printf_i+0x19c>
 800f46e:	2958      	cmp	r1, #88	; 0x58
 800f470:	f000 8083 	beq.w	800f57a <_printf_i+0x136>
 800f474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f478:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f47c:	e032      	b.n	800f4e4 <_printf_i+0xa0>
 800f47e:	2964      	cmp	r1, #100	; 0x64
 800f480:	d001      	beq.n	800f486 <_printf_i+0x42>
 800f482:	2969      	cmp	r1, #105	; 0x69
 800f484:	d1f6      	bne.n	800f474 <_printf_i+0x30>
 800f486:	6820      	ldr	r0, [r4, #0]
 800f488:	6813      	ldr	r3, [r2, #0]
 800f48a:	0605      	lsls	r5, r0, #24
 800f48c:	f103 0104 	add.w	r1, r3, #4
 800f490:	d52a      	bpl.n	800f4e8 <_printf_i+0xa4>
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	6011      	str	r1, [r2, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	da03      	bge.n	800f4a2 <_printf_i+0x5e>
 800f49a:	222d      	movs	r2, #45	; 0x2d
 800f49c:	425b      	negs	r3, r3
 800f49e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f4a2:	486f      	ldr	r0, [pc, #444]	; (800f660 <_printf_i+0x21c>)
 800f4a4:	220a      	movs	r2, #10
 800f4a6:	e039      	b.n	800f51c <_printf_i+0xd8>
 800f4a8:	2973      	cmp	r1, #115	; 0x73
 800f4aa:	f000 809d 	beq.w	800f5e8 <_printf_i+0x1a4>
 800f4ae:	d808      	bhi.n	800f4c2 <_printf_i+0x7e>
 800f4b0:	296f      	cmp	r1, #111	; 0x6f
 800f4b2:	d020      	beq.n	800f4f6 <_printf_i+0xb2>
 800f4b4:	2970      	cmp	r1, #112	; 0x70
 800f4b6:	d1dd      	bne.n	800f474 <_printf_i+0x30>
 800f4b8:	6823      	ldr	r3, [r4, #0]
 800f4ba:	f043 0320 	orr.w	r3, r3, #32
 800f4be:	6023      	str	r3, [r4, #0]
 800f4c0:	e003      	b.n	800f4ca <_printf_i+0x86>
 800f4c2:	2975      	cmp	r1, #117	; 0x75
 800f4c4:	d017      	beq.n	800f4f6 <_printf_i+0xb2>
 800f4c6:	2978      	cmp	r1, #120	; 0x78
 800f4c8:	d1d4      	bne.n	800f474 <_printf_i+0x30>
 800f4ca:	2378      	movs	r3, #120	; 0x78
 800f4cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f4d0:	4864      	ldr	r0, [pc, #400]	; (800f664 <_printf_i+0x220>)
 800f4d2:	e055      	b.n	800f580 <_printf_i+0x13c>
 800f4d4:	6813      	ldr	r3, [r2, #0]
 800f4d6:	1d19      	adds	r1, r3, #4
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	6011      	str	r1, [r2, #0]
 800f4dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	e08c      	b.n	800f602 <_printf_i+0x1be>
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	6011      	str	r1, [r2, #0]
 800f4ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4f0:	bf18      	it	ne
 800f4f2:	b21b      	sxthne	r3, r3
 800f4f4:	e7cf      	b.n	800f496 <_printf_i+0x52>
 800f4f6:	6813      	ldr	r3, [r2, #0]
 800f4f8:	6825      	ldr	r5, [r4, #0]
 800f4fa:	1d18      	adds	r0, r3, #4
 800f4fc:	6010      	str	r0, [r2, #0]
 800f4fe:	0628      	lsls	r0, r5, #24
 800f500:	d501      	bpl.n	800f506 <_printf_i+0xc2>
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	e002      	b.n	800f50c <_printf_i+0xc8>
 800f506:	0668      	lsls	r0, r5, #25
 800f508:	d5fb      	bpl.n	800f502 <_printf_i+0xbe>
 800f50a:	881b      	ldrh	r3, [r3, #0]
 800f50c:	4854      	ldr	r0, [pc, #336]	; (800f660 <_printf_i+0x21c>)
 800f50e:	296f      	cmp	r1, #111	; 0x6f
 800f510:	bf14      	ite	ne
 800f512:	220a      	movne	r2, #10
 800f514:	2208      	moveq	r2, #8
 800f516:	2100      	movs	r1, #0
 800f518:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f51c:	6865      	ldr	r5, [r4, #4]
 800f51e:	60a5      	str	r5, [r4, #8]
 800f520:	2d00      	cmp	r5, #0
 800f522:	f2c0 8095 	blt.w	800f650 <_printf_i+0x20c>
 800f526:	6821      	ldr	r1, [r4, #0]
 800f528:	f021 0104 	bic.w	r1, r1, #4
 800f52c:	6021      	str	r1, [r4, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d13d      	bne.n	800f5ae <_printf_i+0x16a>
 800f532:	2d00      	cmp	r5, #0
 800f534:	f040 808e 	bne.w	800f654 <_printf_i+0x210>
 800f538:	4665      	mov	r5, ip
 800f53a:	2a08      	cmp	r2, #8
 800f53c:	d10b      	bne.n	800f556 <_printf_i+0x112>
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	07db      	lsls	r3, r3, #31
 800f542:	d508      	bpl.n	800f556 <_printf_i+0x112>
 800f544:	6923      	ldr	r3, [r4, #16]
 800f546:	6862      	ldr	r2, [r4, #4]
 800f548:	429a      	cmp	r2, r3
 800f54a:	bfde      	ittt	le
 800f54c:	2330      	movle	r3, #48	; 0x30
 800f54e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f552:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f556:	ebac 0305 	sub.w	r3, ip, r5
 800f55a:	6123      	str	r3, [r4, #16]
 800f55c:	f8cd 8000 	str.w	r8, [sp]
 800f560:	463b      	mov	r3, r7
 800f562:	aa03      	add	r2, sp, #12
 800f564:	4621      	mov	r1, r4
 800f566:	4630      	mov	r0, r6
 800f568:	f7ff fef6 	bl	800f358 <_printf_common>
 800f56c:	3001      	adds	r0, #1
 800f56e:	d14d      	bne.n	800f60c <_printf_i+0x1c8>
 800f570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f574:	b005      	add	sp, #20
 800f576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f57a:	4839      	ldr	r0, [pc, #228]	; (800f660 <_printf_i+0x21c>)
 800f57c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f580:	6813      	ldr	r3, [r2, #0]
 800f582:	6821      	ldr	r1, [r4, #0]
 800f584:	1d1d      	adds	r5, r3, #4
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	6015      	str	r5, [r2, #0]
 800f58a:	060a      	lsls	r2, r1, #24
 800f58c:	d50b      	bpl.n	800f5a6 <_printf_i+0x162>
 800f58e:	07ca      	lsls	r2, r1, #31
 800f590:	bf44      	itt	mi
 800f592:	f041 0120 	orrmi.w	r1, r1, #32
 800f596:	6021      	strmi	r1, [r4, #0]
 800f598:	b91b      	cbnz	r3, 800f5a2 <_printf_i+0x15e>
 800f59a:	6822      	ldr	r2, [r4, #0]
 800f59c:	f022 0220 	bic.w	r2, r2, #32
 800f5a0:	6022      	str	r2, [r4, #0]
 800f5a2:	2210      	movs	r2, #16
 800f5a4:	e7b7      	b.n	800f516 <_printf_i+0xd2>
 800f5a6:	064d      	lsls	r5, r1, #25
 800f5a8:	bf48      	it	mi
 800f5aa:	b29b      	uxthmi	r3, r3
 800f5ac:	e7ef      	b.n	800f58e <_printf_i+0x14a>
 800f5ae:	4665      	mov	r5, ip
 800f5b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5b4:	fb02 3311 	mls	r3, r2, r1, r3
 800f5b8:	5cc3      	ldrb	r3, [r0, r3]
 800f5ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f5be:	460b      	mov	r3, r1
 800f5c0:	2900      	cmp	r1, #0
 800f5c2:	d1f5      	bne.n	800f5b0 <_printf_i+0x16c>
 800f5c4:	e7b9      	b.n	800f53a <_printf_i+0xf6>
 800f5c6:	6813      	ldr	r3, [r2, #0]
 800f5c8:	6825      	ldr	r5, [r4, #0]
 800f5ca:	6961      	ldr	r1, [r4, #20]
 800f5cc:	1d18      	adds	r0, r3, #4
 800f5ce:	6010      	str	r0, [r2, #0]
 800f5d0:	0628      	lsls	r0, r5, #24
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	d501      	bpl.n	800f5da <_printf_i+0x196>
 800f5d6:	6019      	str	r1, [r3, #0]
 800f5d8:	e002      	b.n	800f5e0 <_printf_i+0x19c>
 800f5da:	066a      	lsls	r2, r5, #25
 800f5dc:	d5fb      	bpl.n	800f5d6 <_printf_i+0x192>
 800f5de:	8019      	strh	r1, [r3, #0]
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	6123      	str	r3, [r4, #16]
 800f5e4:	4665      	mov	r5, ip
 800f5e6:	e7b9      	b.n	800f55c <_printf_i+0x118>
 800f5e8:	6813      	ldr	r3, [r2, #0]
 800f5ea:	1d19      	adds	r1, r3, #4
 800f5ec:	6011      	str	r1, [r2, #0]
 800f5ee:	681d      	ldr	r5, [r3, #0]
 800f5f0:	6862      	ldr	r2, [r4, #4]
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	f7f0 fe1b 	bl	8000230 <memchr>
 800f5fa:	b108      	cbz	r0, 800f600 <_printf_i+0x1bc>
 800f5fc:	1b40      	subs	r0, r0, r5
 800f5fe:	6060      	str	r0, [r4, #4]
 800f600:	6863      	ldr	r3, [r4, #4]
 800f602:	6123      	str	r3, [r4, #16]
 800f604:	2300      	movs	r3, #0
 800f606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f60a:	e7a7      	b.n	800f55c <_printf_i+0x118>
 800f60c:	6923      	ldr	r3, [r4, #16]
 800f60e:	462a      	mov	r2, r5
 800f610:	4639      	mov	r1, r7
 800f612:	4630      	mov	r0, r6
 800f614:	47c0      	blx	r8
 800f616:	3001      	adds	r0, #1
 800f618:	d0aa      	beq.n	800f570 <_printf_i+0x12c>
 800f61a:	6823      	ldr	r3, [r4, #0]
 800f61c:	079b      	lsls	r3, r3, #30
 800f61e:	d413      	bmi.n	800f648 <_printf_i+0x204>
 800f620:	68e0      	ldr	r0, [r4, #12]
 800f622:	9b03      	ldr	r3, [sp, #12]
 800f624:	4298      	cmp	r0, r3
 800f626:	bfb8      	it	lt
 800f628:	4618      	movlt	r0, r3
 800f62a:	e7a3      	b.n	800f574 <_printf_i+0x130>
 800f62c:	2301      	movs	r3, #1
 800f62e:	464a      	mov	r2, r9
 800f630:	4639      	mov	r1, r7
 800f632:	4630      	mov	r0, r6
 800f634:	47c0      	blx	r8
 800f636:	3001      	adds	r0, #1
 800f638:	d09a      	beq.n	800f570 <_printf_i+0x12c>
 800f63a:	3501      	adds	r5, #1
 800f63c:	68e3      	ldr	r3, [r4, #12]
 800f63e:	9a03      	ldr	r2, [sp, #12]
 800f640:	1a9b      	subs	r3, r3, r2
 800f642:	42ab      	cmp	r3, r5
 800f644:	dcf2      	bgt.n	800f62c <_printf_i+0x1e8>
 800f646:	e7eb      	b.n	800f620 <_printf_i+0x1dc>
 800f648:	2500      	movs	r5, #0
 800f64a:	f104 0919 	add.w	r9, r4, #25
 800f64e:	e7f5      	b.n	800f63c <_printf_i+0x1f8>
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1ac      	bne.n	800f5ae <_printf_i+0x16a>
 800f654:	7803      	ldrb	r3, [r0, #0]
 800f656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f65a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f65e:	e76c      	b.n	800f53a <_printf_i+0xf6>
 800f660:	08013d88 	.word	0x08013d88
 800f664:	08013d99 	.word	0x08013d99

0800f668 <_puts_r>:
 800f668:	b570      	push	{r4, r5, r6, lr}
 800f66a:	460e      	mov	r6, r1
 800f66c:	4605      	mov	r5, r0
 800f66e:	b118      	cbz	r0, 800f678 <_puts_r+0x10>
 800f670:	6983      	ldr	r3, [r0, #24]
 800f672:	b90b      	cbnz	r3, 800f678 <_puts_r+0x10>
 800f674:	f001 f894 	bl	80107a0 <__sinit>
 800f678:	69ab      	ldr	r3, [r5, #24]
 800f67a:	68ac      	ldr	r4, [r5, #8]
 800f67c:	b913      	cbnz	r3, 800f684 <_puts_r+0x1c>
 800f67e:	4628      	mov	r0, r5
 800f680:	f001 f88e 	bl	80107a0 <__sinit>
 800f684:	4b23      	ldr	r3, [pc, #140]	; (800f714 <_puts_r+0xac>)
 800f686:	429c      	cmp	r4, r3
 800f688:	d117      	bne.n	800f6ba <_puts_r+0x52>
 800f68a:	686c      	ldr	r4, [r5, #4]
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	071b      	lsls	r3, r3, #28
 800f690:	d51d      	bpl.n	800f6ce <_puts_r+0x66>
 800f692:	6923      	ldr	r3, [r4, #16]
 800f694:	b1db      	cbz	r3, 800f6ce <_puts_r+0x66>
 800f696:	3e01      	subs	r6, #1
 800f698:	68a3      	ldr	r3, [r4, #8]
 800f69a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	60a3      	str	r3, [r4, #8]
 800f6a2:	b9e9      	cbnz	r1, 800f6e0 <_puts_r+0x78>
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	da2e      	bge.n	800f706 <_puts_r+0x9e>
 800f6a8:	4622      	mov	r2, r4
 800f6aa:	210a      	movs	r1, #10
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	f000 f883 	bl	800f7b8 <__swbuf_r>
 800f6b2:	3001      	adds	r0, #1
 800f6b4:	d011      	beq.n	800f6da <_puts_r+0x72>
 800f6b6:	200a      	movs	r0, #10
 800f6b8:	e011      	b.n	800f6de <_puts_r+0x76>
 800f6ba:	4b17      	ldr	r3, [pc, #92]	; (800f718 <_puts_r+0xb0>)
 800f6bc:	429c      	cmp	r4, r3
 800f6be:	d101      	bne.n	800f6c4 <_puts_r+0x5c>
 800f6c0:	68ac      	ldr	r4, [r5, #8]
 800f6c2:	e7e3      	b.n	800f68c <_puts_r+0x24>
 800f6c4:	4b15      	ldr	r3, [pc, #84]	; (800f71c <_puts_r+0xb4>)
 800f6c6:	429c      	cmp	r4, r3
 800f6c8:	bf08      	it	eq
 800f6ca:	68ec      	ldreq	r4, [r5, #12]
 800f6cc:	e7de      	b.n	800f68c <_puts_r+0x24>
 800f6ce:	4621      	mov	r1, r4
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	f000 f8c3 	bl	800f85c <__swsetup_r>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d0dd      	beq.n	800f696 <_puts_r+0x2e>
 800f6da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6de:	bd70      	pop	{r4, r5, r6, pc}
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	da04      	bge.n	800f6ee <_puts_r+0x86>
 800f6e4:	69a2      	ldr	r2, [r4, #24]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	dc06      	bgt.n	800f6f8 <_puts_r+0x90>
 800f6ea:	290a      	cmp	r1, #10
 800f6ec:	d004      	beq.n	800f6f8 <_puts_r+0x90>
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	1c5a      	adds	r2, r3, #1
 800f6f2:	6022      	str	r2, [r4, #0]
 800f6f4:	7019      	strb	r1, [r3, #0]
 800f6f6:	e7cf      	b.n	800f698 <_puts_r+0x30>
 800f6f8:	4622      	mov	r2, r4
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f000 f85c 	bl	800f7b8 <__swbuf_r>
 800f700:	3001      	adds	r0, #1
 800f702:	d1c9      	bne.n	800f698 <_puts_r+0x30>
 800f704:	e7e9      	b.n	800f6da <_puts_r+0x72>
 800f706:	6823      	ldr	r3, [r4, #0]
 800f708:	200a      	movs	r0, #10
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	6022      	str	r2, [r4, #0]
 800f70e:	7018      	strb	r0, [r3, #0]
 800f710:	e7e5      	b.n	800f6de <_puts_r+0x76>
 800f712:	bf00      	nop
 800f714:	08013dd8 	.word	0x08013dd8
 800f718:	08013df8 	.word	0x08013df8
 800f71c:	08013db8 	.word	0x08013db8

0800f720 <puts>:
 800f720:	4b02      	ldr	r3, [pc, #8]	; (800f72c <puts+0xc>)
 800f722:	4601      	mov	r1, r0
 800f724:	6818      	ldr	r0, [r3, #0]
 800f726:	f7ff bf9f 	b.w	800f668 <_puts_r>
 800f72a:	bf00      	nop
 800f72c:	20001cac 	.word	0x20001cac

0800f730 <sniprintf>:
 800f730:	b40c      	push	{r2, r3}
 800f732:	b530      	push	{r4, r5, lr}
 800f734:	4b17      	ldr	r3, [pc, #92]	; (800f794 <sniprintf+0x64>)
 800f736:	1e0c      	subs	r4, r1, #0
 800f738:	b09d      	sub	sp, #116	; 0x74
 800f73a:	681d      	ldr	r5, [r3, #0]
 800f73c:	da08      	bge.n	800f750 <sniprintf+0x20>
 800f73e:	238b      	movs	r3, #139	; 0x8b
 800f740:	602b      	str	r3, [r5, #0]
 800f742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f746:	b01d      	add	sp, #116	; 0x74
 800f748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f74c:	b002      	add	sp, #8
 800f74e:	4770      	bx	lr
 800f750:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f754:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f758:	bf14      	ite	ne
 800f75a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f75e:	4623      	moveq	r3, r4
 800f760:	9304      	str	r3, [sp, #16]
 800f762:	9307      	str	r3, [sp, #28]
 800f764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f768:	9002      	str	r0, [sp, #8]
 800f76a:	9006      	str	r0, [sp, #24]
 800f76c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f770:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f772:	ab21      	add	r3, sp, #132	; 0x84
 800f774:	a902      	add	r1, sp, #8
 800f776:	4628      	mov	r0, r5
 800f778:	9301      	str	r3, [sp, #4]
 800f77a:	f001 fd0b 	bl	8011194 <_svfiprintf_r>
 800f77e:	1c43      	adds	r3, r0, #1
 800f780:	bfbc      	itt	lt
 800f782:	238b      	movlt	r3, #139	; 0x8b
 800f784:	602b      	strlt	r3, [r5, #0]
 800f786:	2c00      	cmp	r4, #0
 800f788:	d0dd      	beq.n	800f746 <sniprintf+0x16>
 800f78a:	9b02      	ldr	r3, [sp, #8]
 800f78c:	2200      	movs	r2, #0
 800f78e:	701a      	strb	r2, [r3, #0]
 800f790:	e7d9      	b.n	800f746 <sniprintf+0x16>
 800f792:	bf00      	nop
 800f794:	20001cac 	.word	0x20001cac

0800f798 <strcat>:
 800f798:	b510      	push	{r4, lr}
 800f79a:	4603      	mov	r3, r0
 800f79c:	781a      	ldrb	r2, [r3, #0]
 800f79e:	1c5c      	adds	r4, r3, #1
 800f7a0:	b93a      	cbnz	r2, 800f7b2 <strcat+0x1a>
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7ac:	2a00      	cmp	r2, #0
 800f7ae:	d1f9      	bne.n	800f7a4 <strcat+0xc>
 800f7b0:	bd10      	pop	{r4, pc}
 800f7b2:	4623      	mov	r3, r4
 800f7b4:	e7f2      	b.n	800f79c <strcat+0x4>
	...

0800f7b8 <__swbuf_r>:
 800f7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ba:	460e      	mov	r6, r1
 800f7bc:	4614      	mov	r4, r2
 800f7be:	4605      	mov	r5, r0
 800f7c0:	b118      	cbz	r0, 800f7ca <__swbuf_r+0x12>
 800f7c2:	6983      	ldr	r3, [r0, #24]
 800f7c4:	b90b      	cbnz	r3, 800f7ca <__swbuf_r+0x12>
 800f7c6:	f000 ffeb 	bl	80107a0 <__sinit>
 800f7ca:	4b21      	ldr	r3, [pc, #132]	; (800f850 <__swbuf_r+0x98>)
 800f7cc:	429c      	cmp	r4, r3
 800f7ce:	d12a      	bne.n	800f826 <__swbuf_r+0x6e>
 800f7d0:	686c      	ldr	r4, [r5, #4]
 800f7d2:	69a3      	ldr	r3, [r4, #24]
 800f7d4:	60a3      	str	r3, [r4, #8]
 800f7d6:	89a3      	ldrh	r3, [r4, #12]
 800f7d8:	071a      	lsls	r2, r3, #28
 800f7da:	d52e      	bpl.n	800f83a <__swbuf_r+0x82>
 800f7dc:	6923      	ldr	r3, [r4, #16]
 800f7de:	b363      	cbz	r3, 800f83a <__swbuf_r+0x82>
 800f7e0:	6923      	ldr	r3, [r4, #16]
 800f7e2:	6820      	ldr	r0, [r4, #0]
 800f7e4:	1ac0      	subs	r0, r0, r3
 800f7e6:	6963      	ldr	r3, [r4, #20]
 800f7e8:	b2f6      	uxtb	r6, r6
 800f7ea:	4283      	cmp	r3, r0
 800f7ec:	4637      	mov	r7, r6
 800f7ee:	dc04      	bgt.n	800f7fa <__swbuf_r+0x42>
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	f000 ff6a 	bl	80106cc <_fflush_r>
 800f7f8:	bb28      	cbnz	r0, 800f846 <__swbuf_r+0x8e>
 800f7fa:	68a3      	ldr	r3, [r4, #8]
 800f7fc:	3b01      	subs	r3, #1
 800f7fe:	60a3      	str	r3, [r4, #8]
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	1c5a      	adds	r2, r3, #1
 800f804:	6022      	str	r2, [r4, #0]
 800f806:	701e      	strb	r6, [r3, #0]
 800f808:	6963      	ldr	r3, [r4, #20]
 800f80a:	3001      	adds	r0, #1
 800f80c:	4283      	cmp	r3, r0
 800f80e:	d004      	beq.n	800f81a <__swbuf_r+0x62>
 800f810:	89a3      	ldrh	r3, [r4, #12]
 800f812:	07db      	lsls	r3, r3, #31
 800f814:	d519      	bpl.n	800f84a <__swbuf_r+0x92>
 800f816:	2e0a      	cmp	r6, #10
 800f818:	d117      	bne.n	800f84a <__swbuf_r+0x92>
 800f81a:	4621      	mov	r1, r4
 800f81c:	4628      	mov	r0, r5
 800f81e:	f000 ff55 	bl	80106cc <_fflush_r>
 800f822:	b190      	cbz	r0, 800f84a <__swbuf_r+0x92>
 800f824:	e00f      	b.n	800f846 <__swbuf_r+0x8e>
 800f826:	4b0b      	ldr	r3, [pc, #44]	; (800f854 <__swbuf_r+0x9c>)
 800f828:	429c      	cmp	r4, r3
 800f82a:	d101      	bne.n	800f830 <__swbuf_r+0x78>
 800f82c:	68ac      	ldr	r4, [r5, #8]
 800f82e:	e7d0      	b.n	800f7d2 <__swbuf_r+0x1a>
 800f830:	4b09      	ldr	r3, [pc, #36]	; (800f858 <__swbuf_r+0xa0>)
 800f832:	429c      	cmp	r4, r3
 800f834:	bf08      	it	eq
 800f836:	68ec      	ldreq	r4, [r5, #12]
 800f838:	e7cb      	b.n	800f7d2 <__swbuf_r+0x1a>
 800f83a:	4621      	mov	r1, r4
 800f83c:	4628      	mov	r0, r5
 800f83e:	f000 f80d 	bl	800f85c <__swsetup_r>
 800f842:	2800      	cmp	r0, #0
 800f844:	d0cc      	beq.n	800f7e0 <__swbuf_r+0x28>
 800f846:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f84a:	4638      	mov	r0, r7
 800f84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f84e:	bf00      	nop
 800f850:	08013dd8 	.word	0x08013dd8
 800f854:	08013df8 	.word	0x08013df8
 800f858:	08013db8 	.word	0x08013db8

0800f85c <__swsetup_r>:
 800f85c:	4b32      	ldr	r3, [pc, #200]	; (800f928 <__swsetup_r+0xcc>)
 800f85e:	b570      	push	{r4, r5, r6, lr}
 800f860:	681d      	ldr	r5, [r3, #0]
 800f862:	4606      	mov	r6, r0
 800f864:	460c      	mov	r4, r1
 800f866:	b125      	cbz	r5, 800f872 <__swsetup_r+0x16>
 800f868:	69ab      	ldr	r3, [r5, #24]
 800f86a:	b913      	cbnz	r3, 800f872 <__swsetup_r+0x16>
 800f86c:	4628      	mov	r0, r5
 800f86e:	f000 ff97 	bl	80107a0 <__sinit>
 800f872:	4b2e      	ldr	r3, [pc, #184]	; (800f92c <__swsetup_r+0xd0>)
 800f874:	429c      	cmp	r4, r3
 800f876:	d10f      	bne.n	800f898 <__swsetup_r+0x3c>
 800f878:	686c      	ldr	r4, [r5, #4]
 800f87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f87e:	b29a      	uxth	r2, r3
 800f880:	0715      	lsls	r5, r2, #28
 800f882:	d42c      	bmi.n	800f8de <__swsetup_r+0x82>
 800f884:	06d0      	lsls	r0, r2, #27
 800f886:	d411      	bmi.n	800f8ac <__swsetup_r+0x50>
 800f888:	2209      	movs	r2, #9
 800f88a:	6032      	str	r2, [r6, #0]
 800f88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f890:	81a3      	strh	r3, [r4, #12]
 800f892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f896:	e03e      	b.n	800f916 <__swsetup_r+0xba>
 800f898:	4b25      	ldr	r3, [pc, #148]	; (800f930 <__swsetup_r+0xd4>)
 800f89a:	429c      	cmp	r4, r3
 800f89c:	d101      	bne.n	800f8a2 <__swsetup_r+0x46>
 800f89e:	68ac      	ldr	r4, [r5, #8]
 800f8a0:	e7eb      	b.n	800f87a <__swsetup_r+0x1e>
 800f8a2:	4b24      	ldr	r3, [pc, #144]	; (800f934 <__swsetup_r+0xd8>)
 800f8a4:	429c      	cmp	r4, r3
 800f8a6:	bf08      	it	eq
 800f8a8:	68ec      	ldreq	r4, [r5, #12]
 800f8aa:	e7e6      	b.n	800f87a <__swsetup_r+0x1e>
 800f8ac:	0751      	lsls	r1, r2, #29
 800f8ae:	d512      	bpl.n	800f8d6 <__swsetup_r+0x7a>
 800f8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8b2:	b141      	cbz	r1, 800f8c6 <__swsetup_r+0x6a>
 800f8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8b8:	4299      	cmp	r1, r3
 800f8ba:	d002      	beq.n	800f8c2 <__swsetup_r+0x66>
 800f8bc:	4630      	mov	r0, r6
 800f8be:	f001 fb67 	bl	8010f90 <_free_r>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800f8c6:	89a3      	ldrh	r3, [r4, #12]
 800f8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f8cc:	81a3      	strh	r3, [r4, #12]
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	6063      	str	r3, [r4, #4]
 800f8d2:	6923      	ldr	r3, [r4, #16]
 800f8d4:	6023      	str	r3, [r4, #0]
 800f8d6:	89a3      	ldrh	r3, [r4, #12]
 800f8d8:	f043 0308 	orr.w	r3, r3, #8
 800f8dc:	81a3      	strh	r3, [r4, #12]
 800f8de:	6923      	ldr	r3, [r4, #16]
 800f8e0:	b94b      	cbnz	r3, 800f8f6 <__swsetup_r+0x9a>
 800f8e2:	89a3      	ldrh	r3, [r4, #12]
 800f8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8ec:	d003      	beq.n	800f8f6 <__swsetup_r+0x9a>
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	f001 f811 	bl	8010918 <__smakebuf_r>
 800f8f6:	89a2      	ldrh	r2, [r4, #12]
 800f8f8:	f012 0301 	ands.w	r3, r2, #1
 800f8fc:	d00c      	beq.n	800f918 <__swsetup_r+0xbc>
 800f8fe:	2300      	movs	r3, #0
 800f900:	60a3      	str	r3, [r4, #8]
 800f902:	6963      	ldr	r3, [r4, #20]
 800f904:	425b      	negs	r3, r3
 800f906:	61a3      	str	r3, [r4, #24]
 800f908:	6923      	ldr	r3, [r4, #16]
 800f90a:	b953      	cbnz	r3, 800f922 <__swsetup_r+0xc6>
 800f90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f910:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f914:	d1ba      	bne.n	800f88c <__swsetup_r+0x30>
 800f916:	bd70      	pop	{r4, r5, r6, pc}
 800f918:	0792      	lsls	r2, r2, #30
 800f91a:	bf58      	it	pl
 800f91c:	6963      	ldrpl	r3, [r4, #20]
 800f91e:	60a3      	str	r3, [r4, #8]
 800f920:	e7f2      	b.n	800f908 <__swsetup_r+0xac>
 800f922:	2000      	movs	r0, #0
 800f924:	e7f7      	b.n	800f916 <__swsetup_r+0xba>
 800f926:	bf00      	nop
 800f928:	20001cac 	.word	0x20001cac
 800f92c:	08013dd8 	.word	0x08013dd8
 800f930:	08013df8 	.word	0x08013df8
 800f934:	08013db8 	.word	0x08013db8

0800f938 <quorem>:
 800f938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93c:	6903      	ldr	r3, [r0, #16]
 800f93e:	690c      	ldr	r4, [r1, #16]
 800f940:	42a3      	cmp	r3, r4
 800f942:	4680      	mov	r8, r0
 800f944:	f2c0 8082 	blt.w	800fa4c <quorem+0x114>
 800f948:	3c01      	subs	r4, #1
 800f94a:	f101 0714 	add.w	r7, r1, #20
 800f94e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f952:	f100 0614 	add.w	r6, r0, #20
 800f956:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f95a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f95e:	eb06 030c 	add.w	r3, r6, ip
 800f962:	3501      	adds	r5, #1
 800f964:	eb07 090c 	add.w	r9, r7, ip
 800f968:	9301      	str	r3, [sp, #4]
 800f96a:	fbb0 f5f5 	udiv	r5, r0, r5
 800f96e:	b395      	cbz	r5, 800f9d6 <quorem+0x9e>
 800f970:	f04f 0a00 	mov.w	sl, #0
 800f974:	4638      	mov	r0, r7
 800f976:	46b6      	mov	lr, r6
 800f978:	46d3      	mov	fp, sl
 800f97a:	f850 2b04 	ldr.w	r2, [r0], #4
 800f97e:	b293      	uxth	r3, r2
 800f980:	fb05 a303 	mla	r3, r5, r3, sl
 800f984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f988:	b29b      	uxth	r3, r3
 800f98a:	ebab 0303 	sub.w	r3, fp, r3
 800f98e:	0c12      	lsrs	r2, r2, #16
 800f990:	f8de b000 	ldr.w	fp, [lr]
 800f994:	fb05 a202 	mla	r2, r5, r2, sl
 800f998:	fa13 f38b 	uxtah	r3, r3, fp
 800f99c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f9a0:	fa1f fb82 	uxth.w	fp, r2
 800f9a4:	f8de 2000 	ldr.w	r2, [lr]
 800f9a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f9ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9b6:	4581      	cmp	r9, r0
 800f9b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f9bc:	f84e 3b04 	str.w	r3, [lr], #4
 800f9c0:	d2db      	bcs.n	800f97a <quorem+0x42>
 800f9c2:	f856 300c 	ldr.w	r3, [r6, ip]
 800f9c6:	b933      	cbnz	r3, 800f9d6 <quorem+0x9e>
 800f9c8:	9b01      	ldr	r3, [sp, #4]
 800f9ca:	3b04      	subs	r3, #4
 800f9cc:	429e      	cmp	r6, r3
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	d330      	bcc.n	800fa34 <quorem+0xfc>
 800f9d2:	f8c8 4010 	str.w	r4, [r8, #16]
 800f9d6:	4640      	mov	r0, r8
 800f9d8:	f001 fa06 	bl	8010de8 <__mcmp>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	db25      	blt.n	800fa2c <quorem+0xf4>
 800f9e0:	3501      	adds	r5, #1
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f04f 0c00 	mov.w	ip, #0
 800f9e8:	f857 2b04 	ldr.w	r2, [r7], #4
 800f9ec:	f8d0 e000 	ldr.w	lr, [r0]
 800f9f0:	b293      	uxth	r3, r2
 800f9f2:	ebac 0303 	sub.w	r3, ip, r3
 800f9f6:	0c12      	lsrs	r2, r2, #16
 800f9f8:	fa13 f38e 	uxtah	r3, r3, lr
 800f9fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fa00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa0a:	45b9      	cmp	r9, r7
 800fa0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fa10:	f840 3b04 	str.w	r3, [r0], #4
 800fa14:	d2e8      	bcs.n	800f9e8 <quorem+0xb0>
 800fa16:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fa1a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fa1e:	b92a      	cbnz	r2, 800fa2c <quorem+0xf4>
 800fa20:	3b04      	subs	r3, #4
 800fa22:	429e      	cmp	r6, r3
 800fa24:	461a      	mov	r2, r3
 800fa26:	d30b      	bcc.n	800fa40 <quorem+0x108>
 800fa28:	f8c8 4010 	str.w	r4, [r8, #16]
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	b003      	add	sp, #12
 800fa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa34:	6812      	ldr	r2, [r2, #0]
 800fa36:	3b04      	subs	r3, #4
 800fa38:	2a00      	cmp	r2, #0
 800fa3a:	d1ca      	bne.n	800f9d2 <quorem+0x9a>
 800fa3c:	3c01      	subs	r4, #1
 800fa3e:	e7c5      	b.n	800f9cc <quorem+0x94>
 800fa40:	6812      	ldr	r2, [r2, #0]
 800fa42:	3b04      	subs	r3, #4
 800fa44:	2a00      	cmp	r2, #0
 800fa46:	d1ef      	bne.n	800fa28 <quorem+0xf0>
 800fa48:	3c01      	subs	r4, #1
 800fa4a:	e7ea      	b.n	800fa22 <quorem+0xea>
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e7ee      	b.n	800fa2e <quorem+0xf6>

0800fa50 <_dtoa_r>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	ec57 6b10 	vmov	r6, r7, d0
 800fa58:	b097      	sub	sp, #92	; 0x5c
 800fa5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa5c:	9106      	str	r1, [sp, #24]
 800fa5e:	4604      	mov	r4, r0
 800fa60:	920b      	str	r2, [sp, #44]	; 0x2c
 800fa62:	9312      	str	r3, [sp, #72]	; 0x48
 800fa64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa68:	e9cd 6700 	strd	r6, r7, [sp]
 800fa6c:	b93d      	cbnz	r5, 800fa7e <_dtoa_r+0x2e>
 800fa6e:	2010      	movs	r0, #16
 800fa70:	f000 ff92 	bl	8010998 <malloc>
 800fa74:	6260      	str	r0, [r4, #36]	; 0x24
 800fa76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa7a:	6005      	str	r5, [r0, #0]
 800fa7c:	60c5      	str	r5, [r0, #12]
 800fa7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa80:	6819      	ldr	r1, [r3, #0]
 800fa82:	b151      	cbz	r1, 800fa9a <_dtoa_r+0x4a>
 800fa84:	685a      	ldr	r2, [r3, #4]
 800fa86:	604a      	str	r2, [r1, #4]
 800fa88:	2301      	movs	r3, #1
 800fa8a:	4093      	lsls	r3, r2
 800fa8c:	608b      	str	r3, [r1, #8]
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f000 ffc9 	bl	8010a26 <_Bfree>
 800fa94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa96:	2200      	movs	r2, #0
 800fa98:	601a      	str	r2, [r3, #0]
 800fa9a:	1e3b      	subs	r3, r7, #0
 800fa9c:	bfbb      	ittet	lt
 800fa9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800faa2:	9301      	strlt	r3, [sp, #4]
 800faa4:	2300      	movge	r3, #0
 800faa6:	2201      	movlt	r2, #1
 800faa8:	bfac      	ite	ge
 800faaa:	f8c8 3000 	strge.w	r3, [r8]
 800faae:	f8c8 2000 	strlt.w	r2, [r8]
 800fab2:	4baf      	ldr	r3, [pc, #700]	; (800fd70 <_dtoa_r+0x320>)
 800fab4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fab8:	ea33 0308 	bics.w	r3, r3, r8
 800fabc:	d114      	bne.n	800fae8 <_dtoa_r+0x98>
 800fabe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fac0:	f242 730f 	movw	r3, #9999	; 0x270f
 800fac4:	6013      	str	r3, [r2, #0]
 800fac6:	9b00      	ldr	r3, [sp, #0]
 800fac8:	b923      	cbnz	r3, 800fad4 <_dtoa_r+0x84>
 800faca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800face:	2800      	cmp	r0, #0
 800fad0:	f000 8542 	beq.w	8010558 <_dtoa_r+0xb08>
 800fad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fad6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fd84 <_dtoa_r+0x334>
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f000 8544 	beq.w	8010568 <_dtoa_r+0xb18>
 800fae0:	f10b 0303 	add.w	r3, fp, #3
 800fae4:	f000 bd3e 	b.w	8010564 <_dtoa_r+0xb14>
 800fae8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800faec:	2200      	movs	r2, #0
 800faee:	2300      	movs	r3, #0
 800faf0:	4630      	mov	r0, r6
 800faf2:	4639      	mov	r1, r7
 800faf4:	f7f1 f810 	bl	8000b18 <__aeabi_dcmpeq>
 800faf8:	4681      	mov	r9, r0
 800fafa:	b168      	cbz	r0, 800fb18 <_dtoa_r+0xc8>
 800fafc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fafe:	2301      	movs	r3, #1
 800fb00:	6013      	str	r3, [r2, #0]
 800fb02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f000 8524 	beq.w	8010552 <_dtoa_r+0xb02>
 800fb0a:	4b9a      	ldr	r3, [pc, #616]	; (800fd74 <_dtoa_r+0x324>)
 800fb0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb0e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800fb12:	6013      	str	r3, [r2, #0]
 800fb14:	f000 bd28 	b.w	8010568 <_dtoa_r+0xb18>
 800fb18:	aa14      	add	r2, sp, #80	; 0x50
 800fb1a:	a915      	add	r1, sp, #84	; 0x54
 800fb1c:	ec47 6b10 	vmov	d0, r6, r7
 800fb20:	4620      	mov	r0, r4
 800fb22:	f001 f9d8 	bl	8010ed6 <__d2b>
 800fb26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fb2a:	9004      	str	r0, [sp, #16]
 800fb2c:	2d00      	cmp	r5, #0
 800fb2e:	d07c      	beq.n	800fc2a <_dtoa_r+0x1da>
 800fb30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fb38:	46b2      	mov	sl, r6
 800fb3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fb3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fb46:	2200      	movs	r2, #0
 800fb48:	4b8b      	ldr	r3, [pc, #556]	; (800fd78 <_dtoa_r+0x328>)
 800fb4a:	4650      	mov	r0, sl
 800fb4c:	4659      	mov	r1, fp
 800fb4e:	f7f0 fbc3 	bl	80002d8 <__aeabi_dsub>
 800fb52:	a381      	add	r3, pc, #516	; (adr r3, 800fd58 <_dtoa_r+0x308>)
 800fb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb58:	f7f0 fd76 	bl	8000648 <__aeabi_dmul>
 800fb5c:	a380      	add	r3, pc, #512	; (adr r3, 800fd60 <_dtoa_r+0x310>)
 800fb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb62:	f7f0 fbbb 	bl	80002dc <__adddf3>
 800fb66:	4606      	mov	r6, r0
 800fb68:	4628      	mov	r0, r5
 800fb6a:	460f      	mov	r7, r1
 800fb6c:	f7f0 fd02 	bl	8000574 <__aeabi_i2d>
 800fb70:	a37d      	add	r3, pc, #500	; (adr r3, 800fd68 <_dtoa_r+0x318>)
 800fb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb76:	f7f0 fd67 	bl	8000648 <__aeabi_dmul>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	4630      	mov	r0, r6
 800fb80:	4639      	mov	r1, r7
 800fb82:	f7f0 fbab 	bl	80002dc <__adddf3>
 800fb86:	4606      	mov	r6, r0
 800fb88:	460f      	mov	r7, r1
 800fb8a:	f7f1 f80d 	bl	8000ba8 <__aeabi_d2iz>
 800fb8e:	2200      	movs	r2, #0
 800fb90:	4682      	mov	sl, r0
 800fb92:	2300      	movs	r3, #0
 800fb94:	4630      	mov	r0, r6
 800fb96:	4639      	mov	r1, r7
 800fb98:	f7f0 ffc8 	bl	8000b2c <__aeabi_dcmplt>
 800fb9c:	b148      	cbz	r0, 800fbb2 <_dtoa_r+0x162>
 800fb9e:	4650      	mov	r0, sl
 800fba0:	f7f0 fce8 	bl	8000574 <__aeabi_i2d>
 800fba4:	4632      	mov	r2, r6
 800fba6:	463b      	mov	r3, r7
 800fba8:	f7f0 ffb6 	bl	8000b18 <__aeabi_dcmpeq>
 800fbac:	b908      	cbnz	r0, 800fbb2 <_dtoa_r+0x162>
 800fbae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fbb2:	f1ba 0f16 	cmp.w	sl, #22
 800fbb6:	d859      	bhi.n	800fc6c <_dtoa_r+0x21c>
 800fbb8:	4970      	ldr	r1, [pc, #448]	; (800fd7c <_dtoa_r+0x32c>)
 800fbba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fbbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbc6:	f7f0 ffcf 	bl	8000b68 <__aeabi_dcmpgt>
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	d050      	beq.n	800fc70 <_dtoa_r+0x220>
 800fbce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbd8:	1b5d      	subs	r5, r3, r5
 800fbda:	f1b5 0801 	subs.w	r8, r5, #1
 800fbde:	bf49      	itett	mi
 800fbe0:	f1c5 0301 	rsbmi	r3, r5, #1
 800fbe4:	2300      	movpl	r3, #0
 800fbe6:	9305      	strmi	r3, [sp, #20]
 800fbe8:	f04f 0800 	movmi.w	r8, #0
 800fbec:	bf58      	it	pl
 800fbee:	9305      	strpl	r3, [sp, #20]
 800fbf0:	f1ba 0f00 	cmp.w	sl, #0
 800fbf4:	db3e      	blt.n	800fc74 <_dtoa_r+0x224>
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	44d0      	add	r8, sl
 800fbfa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fbfe:	9307      	str	r3, [sp, #28]
 800fc00:	9b06      	ldr	r3, [sp, #24]
 800fc02:	2b09      	cmp	r3, #9
 800fc04:	f200 8090 	bhi.w	800fd28 <_dtoa_r+0x2d8>
 800fc08:	2b05      	cmp	r3, #5
 800fc0a:	bfc4      	itt	gt
 800fc0c:	3b04      	subgt	r3, #4
 800fc0e:	9306      	strgt	r3, [sp, #24]
 800fc10:	9b06      	ldr	r3, [sp, #24]
 800fc12:	f1a3 0302 	sub.w	r3, r3, #2
 800fc16:	bfcc      	ite	gt
 800fc18:	2500      	movgt	r5, #0
 800fc1a:	2501      	movle	r5, #1
 800fc1c:	2b03      	cmp	r3, #3
 800fc1e:	f200 808f 	bhi.w	800fd40 <_dtoa_r+0x2f0>
 800fc22:	e8df f003 	tbb	[pc, r3]
 800fc26:	7f7d      	.short	0x7f7d
 800fc28:	7131      	.short	0x7131
 800fc2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fc2e:	441d      	add	r5, r3
 800fc30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fc34:	2820      	cmp	r0, #32
 800fc36:	dd13      	ble.n	800fc60 <_dtoa_r+0x210>
 800fc38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fc3c:	9b00      	ldr	r3, [sp, #0]
 800fc3e:	fa08 f800 	lsl.w	r8, r8, r0
 800fc42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fc46:	fa23 f000 	lsr.w	r0, r3, r0
 800fc4a:	ea48 0000 	orr.w	r0, r8, r0
 800fc4e:	f7f0 fc81 	bl	8000554 <__aeabi_ui2d>
 800fc52:	2301      	movs	r3, #1
 800fc54:	4682      	mov	sl, r0
 800fc56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fc5a:	3d01      	subs	r5, #1
 800fc5c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fc5e:	e772      	b.n	800fb46 <_dtoa_r+0xf6>
 800fc60:	9b00      	ldr	r3, [sp, #0]
 800fc62:	f1c0 0020 	rsb	r0, r0, #32
 800fc66:	fa03 f000 	lsl.w	r0, r3, r0
 800fc6a:	e7f0      	b.n	800fc4e <_dtoa_r+0x1fe>
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	e7b1      	b.n	800fbd4 <_dtoa_r+0x184>
 800fc70:	900f      	str	r0, [sp, #60]	; 0x3c
 800fc72:	e7b0      	b.n	800fbd6 <_dtoa_r+0x186>
 800fc74:	9b05      	ldr	r3, [sp, #20]
 800fc76:	eba3 030a 	sub.w	r3, r3, sl
 800fc7a:	9305      	str	r3, [sp, #20]
 800fc7c:	f1ca 0300 	rsb	r3, sl, #0
 800fc80:	9307      	str	r3, [sp, #28]
 800fc82:	2300      	movs	r3, #0
 800fc84:	930e      	str	r3, [sp, #56]	; 0x38
 800fc86:	e7bb      	b.n	800fc00 <_dtoa_r+0x1b0>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	930a      	str	r3, [sp, #40]	; 0x28
 800fc8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	dd59      	ble.n	800fd46 <_dtoa_r+0x2f6>
 800fc92:	9302      	str	r3, [sp, #8]
 800fc94:	4699      	mov	r9, r3
 800fc96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc98:	2200      	movs	r2, #0
 800fc9a:	6072      	str	r2, [r6, #4]
 800fc9c:	2204      	movs	r2, #4
 800fc9e:	f102 0014 	add.w	r0, r2, #20
 800fca2:	4298      	cmp	r0, r3
 800fca4:	6871      	ldr	r1, [r6, #4]
 800fca6:	d953      	bls.n	800fd50 <_dtoa_r+0x300>
 800fca8:	4620      	mov	r0, r4
 800fcaa:	f000 fe88 	bl	80109be <_Balloc>
 800fcae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcb0:	6030      	str	r0, [r6, #0]
 800fcb2:	f1b9 0f0e 	cmp.w	r9, #14
 800fcb6:	f8d3 b000 	ldr.w	fp, [r3]
 800fcba:	f200 80e6 	bhi.w	800fe8a <_dtoa_r+0x43a>
 800fcbe:	2d00      	cmp	r5, #0
 800fcc0:	f000 80e3 	beq.w	800fe8a <_dtoa_r+0x43a>
 800fcc4:	ed9d 7b00 	vldr	d7, [sp]
 800fcc8:	f1ba 0f00 	cmp.w	sl, #0
 800fccc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fcd0:	dd74      	ble.n	800fdbc <_dtoa_r+0x36c>
 800fcd2:	4a2a      	ldr	r2, [pc, #168]	; (800fd7c <_dtoa_r+0x32c>)
 800fcd4:	f00a 030f 	and.w	r3, sl, #15
 800fcd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fcdc:	ed93 7b00 	vldr	d7, [r3]
 800fce0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fce4:	06f0      	lsls	r0, r6, #27
 800fce6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fcea:	d565      	bpl.n	800fdb8 <_dtoa_r+0x368>
 800fcec:	4b24      	ldr	r3, [pc, #144]	; (800fd80 <_dtoa_r+0x330>)
 800fcee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fcf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fcf6:	f7f0 fdd1 	bl	800089c <__aeabi_ddiv>
 800fcfa:	e9cd 0100 	strd	r0, r1, [sp]
 800fcfe:	f006 060f 	and.w	r6, r6, #15
 800fd02:	2503      	movs	r5, #3
 800fd04:	4f1e      	ldr	r7, [pc, #120]	; (800fd80 <_dtoa_r+0x330>)
 800fd06:	e04c      	b.n	800fda2 <_dtoa_r+0x352>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd0e:	4453      	add	r3, sl
 800fd10:	f103 0901 	add.w	r9, r3, #1
 800fd14:	9302      	str	r3, [sp, #8]
 800fd16:	464b      	mov	r3, r9
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	bfb8      	it	lt
 800fd1c:	2301      	movlt	r3, #1
 800fd1e:	e7ba      	b.n	800fc96 <_dtoa_r+0x246>
 800fd20:	2300      	movs	r3, #0
 800fd22:	e7b2      	b.n	800fc8a <_dtoa_r+0x23a>
 800fd24:	2300      	movs	r3, #0
 800fd26:	e7f0      	b.n	800fd0a <_dtoa_r+0x2ba>
 800fd28:	2501      	movs	r5, #1
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	9306      	str	r3, [sp, #24]
 800fd2e:	950a      	str	r5, [sp, #40]	; 0x28
 800fd30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd34:	9302      	str	r3, [sp, #8]
 800fd36:	4699      	mov	r9, r3
 800fd38:	2200      	movs	r2, #0
 800fd3a:	2312      	movs	r3, #18
 800fd3c:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd3e:	e7aa      	b.n	800fc96 <_dtoa_r+0x246>
 800fd40:	2301      	movs	r3, #1
 800fd42:	930a      	str	r3, [sp, #40]	; 0x28
 800fd44:	e7f4      	b.n	800fd30 <_dtoa_r+0x2e0>
 800fd46:	2301      	movs	r3, #1
 800fd48:	9302      	str	r3, [sp, #8]
 800fd4a:	4699      	mov	r9, r3
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	e7f5      	b.n	800fd3c <_dtoa_r+0x2ec>
 800fd50:	3101      	adds	r1, #1
 800fd52:	6071      	str	r1, [r6, #4]
 800fd54:	0052      	lsls	r2, r2, #1
 800fd56:	e7a2      	b.n	800fc9e <_dtoa_r+0x24e>
 800fd58:	636f4361 	.word	0x636f4361
 800fd5c:	3fd287a7 	.word	0x3fd287a7
 800fd60:	8b60c8b3 	.word	0x8b60c8b3
 800fd64:	3fc68a28 	.word	0x3fc68a28
 800fd68:	509f79fb 	.word	0x509f79fb
 800fd6c:	3fd34413 	.word	0x3fd34413
 800fd70:	7ff00000 	.word	0x7ff00000
 800fd74:	08014035 	.word	0x08014035
 800fd78:	3ff80000 	.word	0x3ff80000
 800fd7c:	08013e40 	.word	0x08013e40
 800fd80:	08013e18 	.word	0x08013e18
 800fd84:	08013db3 	.word	0x08013db3
 800fd88:	07f1      	lsls	r1, r6, #31
 800fd8a:	d508      	bpl.n	800fd9e <_dtoa_r+0x34e>
 800fd8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fd90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd94:	f7f0 fc58 	bl	8000648 <__aeabi_dmul>
 800fd98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd9c:	3501      	adds	r5, #1
 800fd9e:	1076      	asrs	r6, r6, #1
 800fda0:	3708      	adds	r7, #8
 800fda2:	2e00      	cmp	r6, #0
 800fda4:	d1f0      	bne.n	800fd88 <_dtoa_r+0x338>
 800fda6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fdaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdae:	f7f0 fd75 	bl	800089c <__aeabi_ddiv>
 800fdb2:	e9cd 0100 	strd	r0, r1, [sp]
 800fdb6:	e01a      	b.n	800fdee <_dtoa_r+0x39e>
 800fdb8:	2502      	movs	r5, #2
 800fdba:	e7a3      	b.n	800fd04 <_dtoa_r+0x2b4>
 800fdbc:	f000 80a0 	beq.w	800ff00 <_dtoa_r+0x4b0>
 800fdc0:	f1ca 0600 	rsb	r6, sl, #0
 800fdc4:	4b9f      	ldr	r3, [pc, #636]	; (8010044 <_dtoa_r+0x5f4>)
 800fdc6:	4fa0      	ldr	r7, [pc, #640]	; (8010048 <_dtoa_r+0x5f8>)
 800fdc8:	f006 020f 	and.w	r2, r6, #15
 800fdcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fdd8:	f7f0 fc36 	bl	8000648 <__aeabi_dmul>
 800fddc:	e9cd 0100 	strd	r0, r1, [sp]
 800fde0:	1136      	asrs	r6, r6, #4
 800fde2:	2300      	movs	r3, #0
 800fde4:	2502      	movs	r5, #2
 800fde6:	2e00      	cmp	r6, #0
 800fde8:	d17f      	bne.n	800feea <_dtoa_r+0x49a>
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d1e1      	bne.n	800fdb2 <_dtoa_r+0x362>
 800fdee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	f000 8087 	beq.w	800ff04 <_dtoa_r+0x4b4>
 800fdf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	4b93      	ldr	r3, [pc, #588]	; (801004c <_dtoa_r+0x5fc>)
 800fdfe:	4630      	mov	r0, r6
 800fe00:	4639      	mov	r1, r7
 800fe02:	f7f0 fe93 	bl	8000b2c <__aeabi_dcmplt>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	d07c      	beq.n	800ff04 <_dtoa_r+0x4b4>
 800fe0a:	f1b9 0f00 	cmp.w	r9, #0
 800fe0e:	d079      	beq.n	800ff04 <_dtoa_r+0x4b4>
 800fe10:	9b02      	ldr	r3, [sp, #8]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	dd35      	ble.n	800fe82 <_dtoa_r+0x432>
 800fe16:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800fe1a:	9308      	str	r3, [sp, #32]
 800fe1c:	4639      	mov	r1, r7
 800fe1e:	2200      	movs	r2, #0
 800fe20:	4b8b      	ldr	r3, [pc, #556]	; (8010050 <_dtoa_r+0x600>)
 800fe22:	4630      	mov	r0, r6
 800fe24:	f7f0 fc10 	bl	8000648 <__aeabi_dmul>
 800fe28:	e9cd 0100 	strd	r0, r1, [sp]
 800fe2c:	9f02      	ldr	r7, [sp, #8]
 800fe2e:	3501      	adds	r5, #1
 800fe30:	4628      	mov	r0, r5
 800fe32:	f7f0 fb9f 	bl	8000574 <__aeabi_i2d>
 800fe36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe3a:	f7f0 fc05 	bl	8000648 <__aeabi_dmul>
 800fe3e:	2200      	movs	r2, #0
 800fe40:	4b84      	ldr	r3, [pc, #528]	; (8010054 <_dtoa_r+0x604>)
 800fe42:	f7f0 fa4b 	bl	80002dc <__adddf3>
 800fe46:	4605      	mov	r5, r0
 800fe48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fe4c:	2f00      	cmp	r7, #0
 800fe4e:	d15d      	bne.n	800ff0c <_dtoa_r+0x4bc>
 800fe50:	2200      	movs	r2, #0
 800fe52:	4b81      	ldr	r3, [pc, #516]	; (8010058 <_dtoa_r+0x608>)
 800fe54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe58:	f7f0 fa3e 	bl	80002d8 <__aeabi_dsub>
 800fe5c:	462a      	mov	r2, r5
 800fe5e:	4633      	mov	r3, r6
 800fe60:	e9cd 0100 	strd	r0, r1, [sp]
 800fe64:	f7f0 fe80 	bl	8000b68 <__aeabi_dcmpgt>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	f040 8288 	bne.w	801037e <_dtoa_r+0x92e>
 800fe6e:	462a      	mov	r2, r5
 800fe70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fe74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe78:	f7f0 fe58 	bl	8000b2c <__aeabi_dcmplt>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	f040 827c 	bne.w	801037a <_dtoa_r+0x92a>
 800fe82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fe86:	e9cd 2300 	strd	r2, r3, [sp]
 800fe8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f2c0 8150 	blt.w	8010132 <_dtoa_r+0x6e2>
 800fe92:	f1ba 0f0e 	cmp.w	sl, #14
 800fe96:	f300 814c 	bgt.w	8010132 <_dtoa_r+0x6e2>
 800fe9a:	4b6a      	ldr	r3, [pc, #424]	; (8010044 <_dtoa_r+0x5f4>)
 800fe9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fea0:	ed93 7b00 	vldr	d7, [r3]
 800fea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800feac:	f280 80d8 	bge.w	8010060 <_dtoa_r+0x610>
 800feb0:	f1b9 0f00 	cmp.w	r9, #0
 800feb4:	f300 80d4 	bgt.w	8010060 <_dtoa_r+0x610>
 800feb8:	f040 825e 	bne.w	8010378 <_dtoa_r+0x928>
 800febc:	2200      	movs	r2, #0
 800febe:	4b66      	ldr	r3, [pc, #408]	; (8010058 <_dtoa_r+0x608>)
 800fec0:	ec51 0b17 	vmov	r0, r1, d7
 800fec4:	f7f0 fbc0 	bl	8000648 <__aeabi_dmul>
 800fec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fecc:	f7f0 fe42 	bl	8000b54 <__aeabi_dcmpge>
 800fed0:	464f      	mov	r7, r9
 800fed2:	464e      	mov	r6, r9
 800fed4:	2800      	cmp	r0, #0
 800fed6:	f040 8234 	bne.w	8010342 <_dtoa_r+0x8f2>
 800feda:	2331      	movs	r3, #49	; 0x31
 800fedc:	f10b 0501 	add.w	r5, fp, #1
 800fee0:	f88b 3000 	strb.w	r3, [fp]
 800fee4:	f10a 0a01 	add.w	sl, sl, #1
 800fee8:	e22f      	b.n	801034a <_dtoa_r+0x8fa>
 800feea:	07f2      	lsls	r2, r6, #31
 800feec:	d505      	bpl.n	800fefa <_dtoa_r+0x4aa>
 800feee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fef2:	f7f0 fba9 	bl	8000648 <__aeabi_dmul>
 800fef6:	3501      	adds	r5, #1
 800fef8:	2301      	movs	r3, #1
 800fefa:	1076      	asrs	r6, r6, #1
 800fefc:	3708      	adds	r7, #8
 800fefe:	e772      	b.n	800fde6 <_dtoa_r+0x396>
 800ff00:	2502      	movs	r5, #2
 800ff02:	e774      	b.n	800fdee <_dtoa_r+0x39e>
 800ff04:	f8cd a020 	str.w	sl, [sp, #32]
 800ff08:	464f      	mov	r7, r9
 800ff0a:	e791      	b.n	800fe30 <_dtoa_r+0x3e0>
 800ff0c:	4b4d      	ldr	r3, [pc, #308]	; (8010044 <_dtoa_r+0x5f4>)
 800ff0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ff16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d047      	beq.n	800ffac <_dtoa_r+0x55c>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	460b      	mov	r3, r1
 800ff20:	2000      	movs	r0, #0
 800ff22:	494e      	ldr	r1, [pc, #312]	; (801005c <_dtoa_r+0x60c>)
 800ff24:	f7f0 fcba 	bl	800089c <__aeabi_ddiv>
 800ff28:	462a      	mov	r2, r5
 800ff2a:	4633      	mov	r3, r6
 800ff2c:	f7f0 f9d4 	bl	80002d8 <__aeabi_dsub>
 800ff30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff34:	465d      	mov	r5, fp
 800ff36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff3a:	f7f0 fe35 	bl	8000ba8 <__aeabi_d2iz>
 800ff3e:	4606      	mov	r6, r0
 800ff40:	f7f0 fb18 	bl	8000574 <__aeabi_i2d>
 800ff44:	4602      	mov	r2, r0
 800ff46:	460b      	mov	r3, r1
 800ff48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff4c:	f7f0 f9c4 	bl	80002d8 <__aeabi_dsub>
 800ff50:	3630      	adds	r6, #48	; 0x30
 800ff52:	f805 6b01 	strb.w	r6, [r5], #1
 800ff56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff5a:	e9cd 0100 	strd	r0, r1, [sp]
 800ff5e:	f7f0 fde5 	bl	8000b2c <__aeabi_dcmplt>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d163      	bne.n	801002e <_dtoa_r+0x5de>
 800ff66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	4937      	ldr	r1, [pc, #220]	; (801004c <_dtoa_r+0x5fc>)
 800ff6e:	f7f0 f9b3 	bl	80002d8 <__aeabi_dsub>
 800ff72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff76:	f7f0 fdd9 	bl	8000b2c <__aeabi_dcmplt>
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	f040 80b7 	bne.w	80100ee <_dtoa_r+0x69e>
 800ff80:	eba5 030b 	sub.w	r3, r5, fp
 800ff84:	429f      	cmp	r7, r3
 800ff86:	f77f af7c 	ble.w	800fe82 <_dtoa_r+0x432>
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	4b30      	ldr	r3, [pc, #192]	; (8010050 <_dtoa_r+0x600>)
 800ff8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff92:	f7f0 fb59 	bl	8000648 <__aeabi_dmul>
 800ff96:	2200      	movs	r2, #0
 800ff98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff9c:	4b2c      	ldr	r3, [pc, #176]	; (8010050 <_dtoa_r+0x600>)
 800ff9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffa2:	f7f0 fb51 	bl	8000648 <__aeabi_dmul>
 800ffa6:	e9cd 0100 	strd	r0, r1, [sp]
 800ffaa:	e7c4      	b.n	800ff36 <_dtoa_r+0x4e6>
 800ffac:	462a      	mov	r2, r5
 800ffae:	4633      	mov	r3, r6
 800ffb0:	f7f0 fb4a 	bl	8000648 <__aeabi_dmul>
 800ffb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ffb8:	eb0b 0507 	add.w	r5, fp, r7
 800ffbc:	465e      	mov	r6, fp
 800ffbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffc2:	f7f0 fdf1 	bl	8000ba8 <__aeabi_d2iz>
 800ffc6:	4607      	mov	r7, r0
 800ffc8:	f7f0 fad4 	bl	8000574 <__aeabi_i2d>
 800ffcc:	3730      	adds	r7, #48	; 0x30
 800ffce:	4602      	mov	r2, r0
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd6:	f7f0 f97f 	bl	80002d8 <__aeabi_dsub>
 800ffda:	f806 7b01 	strb.w	r7, [r6], #1
 800ffde:	42ae      	cmp	r6, r5
 800ffe0:	e9cd 0100 	strd	r0, r1, [sp]
 800ffe4:	f04f 0200 	mov.w	r2, #0
 800ffe8:	d126      	bne.n	8010038 <_dtoa_r+0x5e8>
 800ffea:	4b1c      	ldr	r3, [pc, #112]	; (801005c <_dtoa_r+0x60c>)
 800ffec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fff0:	f7f0 f974 	bl	80002dc <__adddf3>
 800fff4:	4602      	mov	r2, r0
 800fff6:	460b      	mov	r3, r1
 800fff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fffc:	f7f0 fdb4 	bl	8000b68 <__aeabi_dcmpgt>
 8010000:	2800      	cmp	r0, #0
 8010002:	d174      	bne.n	80100ee <_dtoa_r+0x69e>
 8010004:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010008:	2000      	movs	r0, #0
 801000a:	4914      	ldr	r1, [pc, #80]	; (801005c <_dtoa_r+0x60c>)
 801000c:	f7f0 f964 	bl	80002d8 <__aeabi_dsub>
 8010010:	4602      	mov	r2, r0
 8010012:	460b      	mov	r3, r1
 8010014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010018:	f7f0 fd88 	bl	8000b2c <__aeabi_dcmplt>
 801001c:	2800      	cmp	r0, #0
 801001e:	f43f af30 	beq.w	800fe82 <_dtoa_r+0x432>
 8010022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010026:	2b30      	cmp	r3, #48	; 0x30
 8010028:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801002c:	d002      	beq.n	8010034 <_dtoa_r+0x5e4>
 801002e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010032:	e04a      	b.n	80100ca <_dtoa_r+0x67a>
 8010034:	4615      	mov	r5, r2
 8010036:	e7f4      	b.n	8010022 <_dtoa_r+0x5d2>
 8010038:	4b05      	ldr	r3, [pc, #20]	; (8010050 <_dtoa_r+0x600>)
 801003a:	f7f0 fb05 	bl	8000648 <__aeabi_dmul>
 801003e:	e9cd 0100 	strd	r0, r1, [sp]
 8010042:	e7bc      	b.n	800ffbe <_dtoa_r+0x56e>
 8010044:	08013e40 	.word	0x08013e40
 8010048:	08013e18 	.word	0x08013e18
 801004c:	3ff00000 	.word	0x3ff00000
 8010050:	40240000 	.word	0x40240000
 8010054:	401c0000 	.word	0x401c0000
 8010058:	40140000 	.word	0x40140000
 801005c:	3fe00000 	.word	0x3fe00000
 8010060:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010064:	465d      	mov	r5, fp
 8010066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801006a:	4630      	mov	r0, r6
 801006c:	4639      	mov	r1, r7
 801006e:	f7f0 fc15 	bl	800089c <__aeabi_ddiv>
 8010072:	f7f0 fd99 	bl	8000ba8 <__aeabi_d2iz>
 8010076:	4680      	mov	r8, r0
 8010078:	f7f0 fa7c 	bl	8000574 <__aeabi_i2d>
 801007c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010080:	f7f0 fae2 	bl	8000648 <__aeabi_dmul>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	4630      	mov	r0, r6
 801008a:	4639      	mov	r1, r7
 801008c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010090:	f7f0 f922 	bl	80002d8 <__aeabi_dsub>
 8010094:	f805 6b01 	strb.w	r6, [r5], #1
 8010098:	eba5 060b 	sub.w	r6, r5, fp
 801009c:	45b1      	cmp	r9, r6
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	d139      	bne.n	8010118 <_dtoa_r+0x6c8>
 80100a4:	f7f0 f91a 	bl	80002dc <__adddf3>
 80100a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100ac:	4606      	mov	r6, r0
 80100ae:	460f      	mov	r7, r1
 80100b0:	f7f0 fd5a 	bl	8000b68 <__aeabi_dcmpgt>
 80100b4:	b9c8      	cbnz	r0, 80100ea <_dtoa_r+0x69a>
 80100b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100ba:	4630      	mov	r0, r6
 80100bc:	4639      	mov	r1, r7
 80100be:	f7f0 fd2b 	bl	8000b18 <__aeabi_dcmpeq>
 80100c2:	b110      	cbz	r0, 80100ca <_dtoa_r+0x67a>
 80100c4:	f018 0f01 	tst.w	r8, #1
 80100c8:	d10f      	bne.n	80100ea <_dtoa_r+0x69a>
 80100ca:	9904      	ldr	r1, [sp, #16]
 80100cc:	4620      	mov	r0, r4
 80100ce:	f000 fcaa 	bl	8010a26 <_Bfree>
 80100d2:	2300      	movs	r3, #0
 80100d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80100d6:	702b      	strb	r3, [r5, #0]
 80100d8:	f10a 0301 	add.w	r3, sl, #1
 80100dc:	6013      	str	r3, [r2, #0]
 80100de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f000 8241 	beq.w	8010568 <_dtoa_r+0xb18>
 80100e6:	601d      	str	r5, [r3, #0]
 80100e8:	e23e      	b.n	8010568 <_dtoa_r+0xb18>
 80100ea:	f8cd a020 	str.w	sl, [sp, #32]
 80100ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80100f2:	2a39      	cmp	r2, #57	; 0x39
 80100f4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80100f8:	d108      	bne.n	801010c <_dtoa_r+0x6bc>
 80100fa:	459b      	cmp	fp, r3
 80100fc:	d10a      	bne.n	8010114 <_dtoa_r+0x6c4>
 80100fe:	9b08      	ldr	r3, [sp, #32]
 8010100:	3301      	adds	r3, #1
 8010102:	9308      	str	r3, [sp, #32]
 8010104:	2330      	movs	r3, #48	; 0x30
 8010106:	f88b 3000 	strb.w	r3, [fp]
 801010a:	465b      	mov	r3, fp
 801010c:	781a      	ldrb	r2, [r3, #0]
 801010e:	3201      	adds	r2, #1
 8010110:	701a      	strb	r2, [r3, #0]
 8010112:	e78c      	b.n	801002e <_dtoa_r+0x5de>
 8010114:	461d      	mov	r5, r3
 8010116:	e7ea      	b.n	80100ee <_dtoa_r+0x69e>
 8010118:	2200      	movs	r2, #0
 801011a:	4b9b      	ldr	r3, [pc, #620]	; (8010388 <_dtoa_r+0x938>)
 801011c:	f7f0 fa94 	bl	8000648 <__aeabi_dmul>
 8010120:	2200      	movs	r2, #0
 8010122:	2300      	movs	r3, #0
 8010124:	4606      	mov	r6, r0
 8010126:	460f      	mov	r7, r1
 8010128:	f7f0 fcf6 	bl	8000b18 <__aeabi_dcmpeq>
 801012c:	2800      	cmp	r0, #0
 801012e:	d09a      	beq.n	8010066 <_dtoa_r+0x616>
 8010130:	e7cb      	b.n	80100ca <_dtoa_r+0x67a>
 8010132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010134:	2a00      	cmp	r2, #0
 8010136:	f000 808b 	beq.w	8010250 <_dtoa_r+0x800>
 801013a:	9a06      	ldr	r2, [sp, #24]
 801013c:	2a01      	cmp	r2, #1
 801013e:	dc6e      	bgt.n	801021e <_dtoa_r+0x7ce>
 8010140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010142:	2a00      	cmp	r2, #0
 8010144:	d067      	beq.n	8010216 <_dtoa_r+0x7c6>
 8010146:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801014a:	9f07      	ldr	r7, [sp, #28]
 801014c:	9d05      	ldr	r5, [sp, #20]
 801014e:	9a05      	ldr	r2, [sp, #20]
 8010150:	2101      	movs	r1, #1
 8010152:	441a      	add	r2, r3
 8010154:	4620      	mov	r0, r4
 8010156:	9205      	str	r2, [sp, #20]
 8010158:	4498      	add	r8, r3
 801015a:	f000 fd04 	bl	8010b66 <__i2b>
 801015e:	4606      	mov	r6, r0
 8010160:	2d00      	cmp	r5, #0
 8010162:	dd0c      	ble.n	801017e <_dtoa_r+0x72e>
 8010164:	f1b8 0f00 	cmp.w	r8, #0
 8010168:	dd09      	ble.n	801017e <_dtoa_r+0x72e>
 801016a:	4545      	cmp	r5, r8
 801016c:	9a05      	ldr	r2, [sp, #20]
 801016e:	462b      	mov	r3, r5
 8010170:	bfa8      	it	ge
 8010172:	4643      	movge	r3, r8
 8010174:	1ad2      	subs	r2, r2, r3
 8010176:	9205      	str	r2, [sp, #20]
 8010178:	1aed      	subs	r5, r5, r3
 801017a:	eba8 0803 	sub.w	r8, r8, r3
 801017e:	9b07      	ldr	r3, [sp, #28]
 8010180:	b1eb      	cbz	r3, 80101be <_dtoa_r+0x76e>
 8010182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010184:	2b00      	cmp	r3, #0
 8010186:	d067      	beq.n	8010258 <_dtoa_r+0x808>
 8010188:	b18f      	cbz	r7, 80101ae <_dtoa_r+0x75e>
 801018a:	4631      	mov	r1, r6
 801018c:	463a      	mov	r2, r7
 801018e:	4620      	mov	r0, r4
 8010190:	f000 fd88 	bl	8010ca4 <__pow5mult>
 8010194:	9a04      	ldr	r2, [sp, #16]
 8010196:	4601      	mov	r1, r0
 8010198:	4606      	mov	r6, r0
 801019a:	4620      	mov	r0, r4
 801019c:	f000 fcec 	bl	8010b78 <__multiply>
 80101a0:	9904      	ldr	r1, [sp, #16]
 80101a2:	9008      	str	r0, [sp, #32]
 80101a4:	4620      	mov	r0, r4
 80101a6:	f000 fc3e 	bl	8010a26 <_Bfree>
 80101aa:	9b08      	ldr	r3, [sp, #32]
 80101ac:	9304      	str	r3, [sp, #16]
 80101ae:	9b07      	ldr	r3, [sp, #28]
 80101b0:	1bda      	subs	r2, r3, r7
 80101b2:	d004      	beq.n	80101be <_dtoa_r+0x76e>
 80101b4:	9904      	ldr	r1, [sp, #16]
 80101b6:	4620      	mov	r0, r4
 80101b8:	f000 fd74 	bl	8010ca4 <__pow5mult>
 80101bc:	9004      	str	r0, [sp, #16]
 80101be:	2101      	movs	r1, #1
 80101c0:	4620      	mov	r0, r4
 80101c2:	f000 fcd0 	bl	8010b66 <__i2b>
 80101c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101c8:	4607      	mov	r7, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f000 81d0 	beq.w	8010570 <_dtoa_r+0xb20>
 80101d0:	461a      	mov	r2, r3
 80101d2:	4601      	mov	r1, r0
 80101d4:	4620      	mov	r0, r4
 80101d6:	f000 fd65 	bl	8010ca4 <__pow5mult>
 80101da:	9b06      	ldr	r3, [sp, #24]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	4607      	mov	r7, r0
 80101e0:	dc40      	bgt.n	8010264 <_dtoa_r+0x814>
 80101e2:	9b00      	ldr	r3, [sp, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d139      	bne.n	801025c <_dtoa_r+0x80c>
 80101e8:	9b01      	ldr	r3, [sp, #4]
 80101ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d136      	bne.n	8010260 <_dtoa_r+0x810>
 80101f2:	9b01      	ldr	r3, [sp, #4]
 80101f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101f8:	0d1b      	lsrs	r3, r3, #20
 80101fa:	051b      	lsls	r3, r3, #20
 80101fc:	b12b      	cbz	r3, 801020a <_dtoa_r+0x7ba>
 80101fe:	9b05      	ldr	r3, [sp, #20]
 8010200:	3301      	adds	r3, #1
 8010202:	9305      	str	r3, [sp, #20]
 8010204:	f108 0801 	add.w	r8, r8, #1
 8010208:	2301      	movs	r3, #1
 801020a:	9307      	str	r3, [sp, #28]
 801020c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801020e:	2b00      	cmp	r3, #0
 8010210:	d12a      	bne.n	8010268 <_dtoa_r+0x818>
 8010212:	2001      	movs	r0, #1
 8010214:	e030      	b.n	8010278 <_dtoa_r+0x828>
 8010216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010218:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801021c:	e795      	b.n	801014a <_dtoa_r+0x6fa>
 801021e:	9b07      	ldr	r3, [sp, #28]
 8010220:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8010224:	42bb      	cmp	r3, r7
 8010226:	bfbf      	itttt	lt
 8010228:	9b07      	ldrlt	r3, [sp, #28]
 801022a:	9707      	strlt	r7, [sp, #28]
 801022c:	1afa      	sublt	r2, r7, r3
 801022e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010230:	bfbb      	ittet	lt
 8010232:	189b      	addlt	r3, r3, r2
 8010234:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010236:	1bdf      	subge	r7, r3, r7
 8010238:	2700      	movlt	r7, #0
 801023a:	f1b9 0f00 	cmp.w	r9, #0
 801023e:	bfb5      	itete	lt
 8010240:	9b05      	ldrlt	r3, [sp, #20]
 8010242:	9d05      	ldrge	r5, [sp, #20]
 8010244:	eba3 0509 	sublt.w	r5, r3, r9
 8010248:	464b      	movge	r3, r9
 801024a:	bfb8      	it	lt
 801024c:	2300      	movlt	r3, #0
 801024e:	e77e      	b.n	801014e <_dtoa_r+0x6fe>
 8010250:	9f07      	ldr	r7, [sp, #28]
 8010252:	9d05      	ldr	r5, [sp, #20]
 8010254:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010256:	e783      	b.n	8010160 <_dtoa_r+0x710>
 8010258:	9a07      	ldr	r2, [sp, #28]
 801025a:	e7ab      	b.n	80101b4 <_dtoa_r+0x764>
 801025c:	2300      	movs	r3, #0
 801025e:	e7d4      	b.n	801020a <_dtoa_r+0x7ba>
 8010260:	9b00      	ldr	r3, [sp, #0]
 8010262:	e7d2      	b.n	801020a <_dtoa_r+0x7ba>
 8010264:	2300      	movs	r3, #0
 8010266:	9307      	str	r3, [sp, #28]
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801026e:	6918      	ldr	r0, [r3, #16]
 8010270:	f000 fc2b 	bl	8010aca <__hi0bits>
 8010274:	f1c0 0020 	rsb	r0, r0, #32
 8010278:	4440      	add	r0, r8
 801027a:	f010 001f 	ands.w	r0, r0, #31
 801027e:	d047      	beq.n	8010310 <_dtoa_r+0x8c0>
 8010280:	f1c0 0320 	rsb	r3, r0, #32
 8010284:	2b04      	cmp	r3, #4
 8010286:	dd3b      	ble.n	8010300 <_dtoa_r+0x8b0>
 8010288:	9b05      	ldr	r3, [sp, #20]
 801028a:	f1c0 001c 	rsb	r0, r0, #28
 801028e:	4403      	add	r3, r0
 8010290:	9305      	str	r3, [sp, #20]
 8010292:	4405      	add	r5, r0
 8010294:	4480      	add	r8, r0
 8010296:	9b05      	ldr	r3, [sp, #20]
 8010298:	2b00      	cmp	r3, #0
 801029a:	dd05      	ble.n	80102a8 <_dtoa_r+0x858>
 801029c:	461a      	mov	r2, r3
 801029e:	9904      	ldr	r1, [sp, #16]
 80102a0:	4620      	mov	r0, r4
 80102a2:	f000 fd4d 	bl	8010d40 <__lshift>
 80102a6:	9004      	str	r0, [sp, #16]
 80102a8:	f1b8 0f00 	cmp.w	r8, #0
 80102ac:	dd05      	ble.n	80102ba <_dtoa_r+0x86a>
 80102ae:	4639      	mov	r1, r7
 80102b0:	4642      	mov	r2, r8
 80102b2:	4620      	mov	r0, r4
 80102b4:	f000 fd44 	bl	8010d40 <__lshift>
 80102b8:	4607      	mov	r7, r0
 80102ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102bc:	b353      	cbz	r3, 8010314 <_dtoa_r+0x8c4>
 80102be:	4639      	mov	r1, r7
 80102c0:	9804      	ldr	r0, [sp, #16]
 80102c2:	f000 fd91 	bl	8010de8 <__mcmp>
 80102c6:	2800      	cmp	r0, #0
 80102c8:	da24      	bge.n	8010314 <_dtoa_r+0x8c4>
 80102ca:	2300      	movs	r3, #0
 80102cc:	220a      	movs	r2, #10
 80102ce:	9904      	ldr	r1, [sp, #16]
 80102d0:	4620      	mov	r0, r4
 80102d2:	f000 fbbf 	bl	8010a54 <__multadd>
 80102d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102d8:	9004      	str	r0, [sp, #16]
 80102da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f000 814d 	beq.w	801057e <_dtoa_r+0xb2e>
 80102e4:	2300      	movs	r3, #0
 80102e6:	4631      	mov	r1, r6
 80102e8:	220a      	movs	r2, #10
 80102ea:	4620      	mov	r0, r4
 80102ec:	f000 fbb2 	bl	8010a54 <__multadd>
 80102f0:	9b02      	ldr	r3, [sp, #8]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	4606      	mov	r6, r0
 80102f6:	dc4f      	bgt.n	8010398 <_dtoa_r+0x948>
 80102f8:	9b06      	ldr	r3, [sp, #24]
 80102fa:	2b02      	cmp	r3, #2
 80102fc:	dd4c      	ble.n	8010398 <_dtoa_r+0x948>
 80102fe:	e011      	b.n	8010324 <_dtoa_r+0x8d4>
 8010300:	d0c9      	beq.n	8010296 <_dtoa_r+0x846>
 8010302:	9a05      	ldr	r2, [sp, #20]
 8010304:	331c      	adds	r3, #28
 8010306:	441a      	add	r2, r3
 8010308:	9205      	str	r2, [sp, #20]
 801030a:	441d      	add	r5, r3
 801030c:	4498      	add	r8, r3
 801030e:	e7c2      	b.n	8010296 <_dtoa_r+0x846>
 8010310:	4603      	mov	r3, r0
 8010312:	e7f6      	b.n	8010302 <_dtoa_r+0x8b2>
 8010314:	f1b9 0f00 	cmp.w	r9, #0
 8010318:	dc38      	bgt.n	801038c <_dtoa_r+0x93c>
 801031a:	9b06      	ldr	r3, [sp, #24]
 801031c:	2b02      	cmp	r3, #2
 801031e:	dd35      	ble.n	801038c <_dtoa_r+0x93c>
 8010320:	f8cd 9008 	str.w	r9, [sp, #8]
 8010324:	9b02      	ldr	r3, [sp, #8]
 8010326:	b963      	cbnz	r3, 8010342 <_dtoa_r+0x8f2>
 8010328:	4639      	mov	r1, r7
 801032a:	2205      	movs	r2, #5
 801032c:	4620      	mov	r0, r4
 801032e:	f000 fb91 	bl	8010a54 <__multadd>
 8010332:	4601      	mov	r1, r0
 8010334:	4607      	mov	r7, r0
 8010336:	9804      	ldr	r0, [sp, #16]
 8010338:	f000 fd56 	bl	8010de8 <__mcmp>
 801033c:	2800      	cmp	r0, #0
 801033e:	f73f adcc 	bgt.w	800feda <_dtoa_r+0x48a>
 8010342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010344:	465d      	mov	r5, fp
 8010346:	ea6f 0a03 	mvn.w	sl, r3
 801034a:	f04f 0900 	mov.w	r9, #0
 801034e:	4639      	mov	r1, r7
 8010350:	4620      	mov	r0, r4
 8010352:	f000 fb68 	bl	8010a26 <_Bfree>
 8010356:	2e00      	cmp	r6, #0
 8010358:	f43f aeb7 	beq.w	80100ca <_dtoa_r+0x67a>
 801035c:	f1b9 0f00 	cmp.w	r9, #0
 8010360:	d005      	beq.n	801036e <_dtoa_r+0x91e>
 8010362:	45b1      	cmp	r9, r6
 8010364:	d003      	beq.n	801036e <_dtoa_r+0x91e>
 8010366:	4649      	mov	r1, r9
 8010368:	4620      	mov	r0, r4
 801036a:	f000 fb5c 	bl	8010a26 <_Bfree>
 801036e:	4631      	mov	r1, r6
 8010370:	4620      	mov	r0, r4
 8010372:	f000 fb58 	bl	8010a26 <_Bfree>
 8010376:	e6a8      	b.n	80100ca <_dtoa_r+0x67a>
 8010378:	2700      	movs	r7, #0
 801037a:	463e      	mov	r6, r7
 801037c:	e7e1      	b.n	8010342 <_dtoa_r+0x8f2>
 801037e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010382:	463e      	mov	r6, r7
 8010384:	e5a9      	b.n	800feda <_dtoa_r+0x48a>
 8010386:	bf00      	nop
 8010388:	40240000 	.word	0x40240000
 801038c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801038e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010392:	2b00      	cmp	r3, #0
 8010394:	f000 80fa 	beq.w	801058c <_dtoa_r+0xb3c>
 8010398:	2d00      	cmp	r5, #0
 801039a:	dd05      	ble.n	80103a8 <_dtoa_r+0x958>
 801039c:	4631      	mov	r1, r6
 801039e:	462a      	mov	r2, r5
 80103a0:	4620      	mov	r0, r4
 80103a2:	f000 fccd 	bl	8010d40 <__lshift>
 80103a6:	4606      	mov	r6, r0
 80103a8:	9b07      	ldr	r3, [sp, #28]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d04c      	beq.n	8010448 <_dtoa_r+0x9f8>
 80103ae:	6871      	ldr	r1, [r6, #4]
 80103b0:	4620      	mov	r0, r4
 80103b2:	f000 fb04 	bl	80109be <_Balloc>
 80103b6:	6932      	ldr	r2, [r6, #16]
 80103b8:	3202      	adds	r2, #2
 80103ba:	4605      	mov	r5, r0
 80103bc:	0092      	lsls	r2, r2, #2
 80103be:	f106 010c 	add.w	r1, r6, #12
 80103c2:	300c      	adds	r0, #12
 80103c4:	f000 faf0 	bl	80109a8 <memcpy>
 80103c8:	2201      	movs	r2, #1
 80103ca:	4629      	mov	r1, r5
 80103cc:	4620      	mov	r0, r4
 80103ce:	f000 fcb7 	bl	8010d40 <__lshift>
 80103d2:	9b00      	ldr	r3, [sp, #0]
 80103d4:	f8cd b014 	str.w	fp, [sp, #20]
 80103d8:	f003 0301 	and.w	r3, r3, #1
 80103dc:	46b1      	mov	r9, r6
 80103de:	9307      	str	r3, [sp, #28]
 80103e0:	4606      	mov	r6, r0
 80103e2:	4639      	mov	r1, r7
 80103e4:	9804      	ldr	r0, [sp, #16]
 80103e6:	f7ff faa7 	bl	800f938 <quorem>
 80103ea:	4649      	mov	r1, r9
 80103ec:	4605      	mov	r5, r0
 80103ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80103f2:	9804      	ldr	r0, [sp, #16]
 80103f4:	f000 fcf8 	bl	8010de8 <__mcmp>
 80103f8:	4632      	mov	r2, r6
 80103fa:	9000      	str	r0, [sp, #0]
 80103fc:	4639      	mov	r1, r7
 80103fe:	4620      	mov	r0, r4
 8010400:	f000 fd0c 	bl	8010e1c <__mdiff>
 8010404:	68c3      	ldr	r3, [r0, #12]
 8010406:	4602      	mov	r2, r0
 8010408:	bb03      	cbnz	r3, 801044c <_dtoa_r+0x9fc>
 801040a:	4601      	mov	r1, r0
 801040c:	9008      	str	r0, [sp, #32]
 801040e:	9804      	ldr	r0, [sp, #16]
 8010410:	f000 fcea 	bl	8010de8 <__mcmp>
 8010414:	9a08      	ldr	r2, [sp, #32]
 8010416:	4603      	mov	r3, r0
 8010418:	4611      	mov	r1, r2
 801041a:	4620      	mov	r0, r4
 801041c:	9308      	str	r3, [sp, #32]
 801041e:	f000 fb02 	bl	8010a26 <_Bfree>
 8010422:	9b08      	ldr	r3, [sp, #32]
 8010424:	b9a3      	cbnz	r3, 8010450 <_dtoa_r+0xa00>
 8010426:	9a06      	ldr	r2, [sp, #24]
 8010428:	b992      	cbnz	r2, 8010450 <_dtoa_r+0xa00>
 801042a:	9a07      	ldr	r2, [sp, #28]
 801042c:	b982      	cbnz	r2, 8010450 <_dtoa_r+0xa00>
 801042e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010432:	d029      	beq.n	8010488 <_dtoa_r+0xa38>
 8010434:	9b00      	ldr	r3, [sp, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	dd01      	ble.n	801043e <_dtoa_r+0x9ee>
 801043a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801043e:	9b05      	ldr	r3, [sp, #20]
 8010440:	1c5d      	adds	r5, r3, #1
 8010442:	f883 8000 	strb.w	r8, [r3]
 8010446:	e782      	b.n	801034e <_dtoa_r+0x8fe>
 8010448:	4630      	mov	r0, r6
 801044a:	e7c2      	b.n	80103d2 <_dtoa_r+0x982>
 801044c:	2301      	movs	r3, #1
 801044e:	e7e3      	b.n	8010418 <_dtoa_r+0x9c8>
 8010450:	9a00      	ldr	r2, [sp, #0]
 8010452:	2a00      	cmp	r2, #0
 8010454:	db04      	blt.n	8010460 <_dtoa_r+0xa10>
 8010456:	d125      	bne.n	80104a4 <_dtoa_r+0xa54>
 8010458:	9a06      	ldr	r2, [sp, #24]
 801045a:	bb1a      	cbnz	r2, 80104a4 <_dtoa_r+0xa54>
 801045c:	9a07      	ldr	r2, [sp, #28]
 801045e:	bb0a      	cbnz	r2, 80104a4 <_dtoa_r+0xa54>
 8010460:	2b00      	cmp	r3, #0
 8010462:	ddec      	ble.n	801043e <_dtoa_r+0x9ee>
 8010464:	2201      	movs	r2, #1
 8010466:	9904      	ldr	r1, [sp, #16]
 8010468:	4620      	mov	r0, r4
 801046a:	f000 fc69 	bl	8010d40 <__lshift>
 801046e:	4639      	mov	r1, r7
 8010470:	9004      	str	r0, [sp, #16]
 8010472:	f000 fcb9 	bl	8010de8 <__mcmp>
 8010476:	2800      	cmp	r0, #0
 8010478:	dc03      	bgt.n	8010482 <_dtoa_r+0xa32>
 801047a:	d1e0      	bne.n	801043e <_dtoa_r+0x9ee>
 801047c:	f018 0f01 	tst.w	r8, #1
 8010480:	d0dd      	beq.n	801043e <_dtoa_r+0x9ee>
 8010482:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010486:	d1d8      	bne.n	801043a <_dtoa_r+0x9ea>
 8010488:	9b05      	ldr	r3, [sp, #20]
 801048a:	9a05      	ldr	r2, [sp, #20]
 801048c:	1c5d      	adds	r5, r3, #1
 801048e:	2339      	movs	r3, #57	; 0x39
 8010490:	7013      	strb	r3, [r2, #0]
 8010492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010496:	2b39      	cmp	r3, #57	; 0x39
 8010498:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801049c:	d04f      	beq.n	801053e <_dtoa_r+0xaee>
 801049e:	3301      	adds	r3, #1
 80104a0:	7013      	strb	r3, [r2, #0]
 80104a2:	e754      	b.n	801034e <_dtoa_r+0x8fe>
 80104a4:	9a05      	ldr	r2, [sp, #20]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f102 0501 	add.w	r5, r2, #1
 80104ac:	dd06      	ble.n	80104bc <_dtoa_r+0xa6c>
 80104ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80104b2:	d0e9      	beq.n	8010488 <_dtoa_r+0xa38>
 80104b4:	f108 0801 	add.w	r8, r8, #1
 80104b8:	9b05      	ldr	r3, [sp, #20]
 80104ba:	e7c2      	b.n	8010442 <_dtoa_r+0x9f2>
 80104bc:	9a02      	ldr	r2, [sp, #8]
 80104be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80104c2:	eba5 030b 	sub.w	r3, r5, fp
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d021      	beq.n	801050e <_dtoa_r+0xabe>
 80104ca:	2300      	movs	r3, #0
 80104cc:	220a      	movs	r2, #10
 80104ce:	9904      	ldr	r1, [sp, #16]
 80104d0:	4620      	mov	r0, r4
 80104d2:	f000 fabf 	bl	8010a54 <__multadd>
 80104d6:	45b1      	cmp	r9, r6
 80104d8:	9004      	str	r0, [sp, #16]
 80104da:	f04f 0300 	mov.w	r3, #0
 80104de:	f04f 020a 	mov.w	r2, #10
 80104e2:	4649      	mov	r1, r9
 80104e4:	4620      	mov	r0, r4
 80104e6:	d105      	bne.n	80104f4 <_dtoa_r+0xaa4>
 80104e8:	f000 fab4 	bl	8010a54 <__multadd>
 80104ec:	4681      	mov	r9, r0
 80104ee:	4606      	mov	r6, r0
 80104f0:	9505      	str	r5, [sp, #20]
 80104f2:	e776      	b.n	80103e2 <_dtoa_r+0x992>
 80104f4:	f000 faae 	bl	8010a54 <__multadd>
 80104f8:	4631      	mov	r1, r6
 80104fa:	4681      	mov	r9, r0
 80104fc:	2300      	movs	r3, #0
 80104fe:	220a      	movs	r2, #10
 8010500:	4620      	mov	r0, r4
 8010502:	f000 faa7 	bl	8010a54 <__multadd>
 8010506:	4606      	mov	r6, r0
 8010508:	e7f2      	b.n	80104f0 <_dtoa_r+0xaa0>
 801050a:	f04f 0900 	mov.w	r9, #0
 801050e:	2201      	movs	r2, #1
 8010510:	9904      	ldr	r1, [sp, #16]
 8010512:	4620      	mov	r0, r4
 8010514:	f000 fc14 	bl	8010d40 <__lshift>
 8010518:	4639      	mov	r1, r7
 801051a:	9004      	str	r0, [sp, #16]
 801051c:	f000 fc64 	bl	8010de8 <__mcmp>
 8010520:	2800      	cmp	r0, #0
 8010522:	dcb6      	bgt.n	8010492 <_dtoa_r+0xa42>
 8010524:	d102      	bne.n	801052c <_dtoa_r+0xadc>
 8010526:	f018 0f01 	tst.w	r8, #1
 801052a:	d1b2      	bne.n	8010492 <_dtoa_r+0xa42>
 801052c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010530:	2b30      	cmp	r3, #48	; 0x30
 8010532:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010536:	f47f af0a 	bne.w	801034e <_dtoa_r+0x8fe>
 801053a:	4615      	mov	r5, r2
 801053c:	e7f6      	b.n	801052c <_dtoa_r+0xadc>
 801053e:	4593      	cmp	fp, r2
 8010540:	d105      	bne.n	801054e <_dtoa_r+0xafe>
 8010542:	2331      	movs	r3, #49	; 0x31
 8010544:	f10a 0a01 	add.w	sl, sl, #1
 8010548:	f88b 3000 	strb.w	r3, [fp]
 801054c:	e6ff      	b.n	801034e <_dtoa_r+0x8fe>
 801054e:	4615      	mov	r5, r2
 8010550:	e79f      	b.n	8010492 <_dtoa_r+0xa42>
 8010552:	f8df b064 	ldr.w	fp, [pc, #100]	; 80105b8 <_dtoa_r+0xb68>
 8010556:	e007      	b.n	8010568 <_dtoa_r+0xb18>
 8010558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801055a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80105bc <_dtoa_r+0xb6c>
 801055e:	b11b      	cbz	r3, 8010568 <_dtoa_r+0xb18>
 8010560:	f10b 0308 	add.w	r3, fp, #8
 8010564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010566:	6013      	str	r3, [r2, #0]
 8010568:	4658      	mov	r0, fp
 801056a:	b017      	add	sp, #92	; 0x5c
 801056c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010570:	9b06      	ldr	r3, [sp, #24]
 8010572:	2b01      	cmp	r3, #1
 8010574:	f77f ae35 	ble.w	80101e2 <_dtoa_r+0x792>
 8010578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801057a:	9307      	str	r3, [sp, #28]
 801057c:	e649      	b.n	8010212 <_dtoa_r+0x7c2>
 801057e:	9b02      	ldr	r3, [sp, #8]
 8010580:	2b00      	cmp	r3, #0
 8010582:	dc03      	bgt.n	801058c <_dtoa_r+0xb3c>
 8010584:	9b06      	ldr	r3, [sp, #24]
 8010586:	2b02      	cmp	r3, #2
 8010588:	f73f aecc 	bgt.w	8010324 <_dtoa_r+0x8d4>
 801058c:	465d      	mov	r5, fp
 801058e:	4639      	mov	r1, r7
 8010590:	9804      	ldr	r0, [sp, #16]
 8010592:	f7ff f9d1 	bl	800f938 <quorem>
 8010596:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801059a:	f805 8b01 	strb.w	r8, [r5], #1
 801059e:	9a02      	ldr	r2, [sp, #8]
 80105a0:	eba5 030b 	sub.w	r3, r5, fp
 80105a4:	429a      	cmp	r2, r3
 80105a6:	ddb0      	ble.n	801050a <_dtoa_r+0xaba>
 80105a8:	2300      	movs	r3, #0
 80105aa:	220a      	movs	r2, #10
 80105ac:	9904      	ldr	r1, [sp, #16]
 80105ae:	4620      	mov	r0, r4
 80105b0:	f000 fa50 	bl	8010a54 <__multadd>
 80105b4:	9004      	str	r0, [sp, #16]
 80105b6:	e7ea      	b.n	801058e <_dtoa_r+0xb3e>
 80105b8:	08014034 	.word	0x08014034
 80105bc:	08013daa 	.word	0x08013daa

080105c0 <__sflush_r>:
 80105c0:	898a      	ldrh	r2, [r1, #12]
 80105c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c6:	4605      	mov	r5, r0
 80105c8:	0710      	lsls	r0, r2, #28
 80105ca:	460c      	mov	r4, r1
 80105cc:	d458      	bmi.n	8010680 <__sflush_r+0xc0>
 80105ce:	684b      	ldr	r3, [r1, #4]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	dc05      	bgt.n	80105e0 <__sflush_r+0x20>
 80105d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	dc02      	bgt.n	80105e0 <__sflush_r+0x20>
 80105da:	2000      	movs	r0, #0
 80105dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105e2:	2e00      	cmp	r6, #0
 80105e4:	d0f9      	beq.n	80105da <__sflush_r+0x1a>
 80105e6:	2300      	movs	r3, #0
 80105e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105ec:	682f      	ldr	r7, [r5, #0]
 80105ee:	6a21      	ldr	r1, [r4, #32]
 80105f0:	602b      	str	r3, [r5, #0]
 80105f2:	d032      	beq.n	801065a <__sflush_r+0x9a>
 80105f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105f6:	89a3      	ldrh	r3, [r4, #12]
 80105f8:	075a      	lsls	r2, r3, #29
 80105fa:	d505      	bpl.n	8010608 <__sflush_r+0x48>
 80105fc:	6863      	ldr	r3, [r4, #4]
 80105fe:	1ac0      	subs	r0, r0, r3
 8010600:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010602:	b10b      	cbz	r3, 8010608 <__sflush_r+0x48>
 8010604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010606:	1ac0      	subs	r0, r0, r3
 8010608:	2300      	movs	r3, #0
 801060a:	4602      	mov	r2, r0
 801060c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801060e:	6a21      	ldr	r1, [r4, #32]
 8010610:	4628      	mov	r0, r5
 8010612:	47b0      	blx	r6
 8010614:	1c43      	adds	r3, r0, #1
 8010616:	89a3      	ldrh	r3, [r4, #12]
 8010618:	d106      	bne.n	8010628 <__sflush_r+0x68>
 801061a:	6829      	ldr	r1, [r5, #0]
 801061c:	291d      	cmp	r1, #29
 801061e:	d848      	bhi.n	80106b2 <__sflush_r+0xf2>
 8010620:	4a29      	ldr	r2, [pc, #164]	; (80106c8 <__sflush_r+0x108>)
 8010622:	40ca      	lsrs	r2, r1
 8010624:	07d6      	lsls	r6, r2, #31
 8010626:	d544      	bpl.n	80106b2 <__sflush_r+0xf2>
 8010628:	2200      	movs	r2, #0
 801062a:	6062      	str	r2, [r4, #4]
 801062c:	04d9      	lsls	r1, r3, #19
 801062e:	6922      	ldr	r2, [r4, #16]
 8010630:	6022      	str	r2, [r4, #0]
 8010632:	d504      	bpl.n	801063e <__sflush_r+0x7e>
 8010634:	1c42      	adds	r2, r0, #1
 8010636:	d101      	bne.n	801063c <__sflush_r+0x7c>
 8010638:	682b      	ldr	r3, [r5, #0]
 801063a:	b903      	cbnz	r3, 801063e <__sflush_r+0x7e>
 801063c:	6560      	str	r0, [r4, #84]	; 0x54
 801063e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010640:	602f      	str	r7, [r5, #0]
 8010642:	2900      	cmp	r1, #0
 8010644:	d0c9      	beq.n	80105da <__sflush_r+0x1a>
 8010646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801064a:	4299      	cmp	r1, r3
 801064c:	d002      	beq.n	8010654 <__sflush_r+0x94>
 801064e:	4628      	mov	r0, r5
 8010650:	f000 fc9e 	bl	8010f90 <_free_r>
 8010654:	2000      	movs	r0, #0
 8010656:	6360      	str	r0, [r4, #52]	; 0x34
 8010658:	e7c0      	b.n	80105dc <__sflush_r+0x1c>
 801065a:	2301      	movs	r3, #1
 801065c:	4628      	mov	r0, r5
 801065e:	47b0      	blx	r6
 8010660:	1c41      	adds	r1, r0, #1
 8010662:	d1c8      	bne.n	80105f6 <__sflush_r+0x36>
 8010664:	682b      	ldr	r3, [r5, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d0c5      	beq.n	80105f6 <__sflush_r+0x36>
 801066a:	2b1d      	cmp	r3, #29
 801066c:	d001      	beq.n	8010672 <__sflush_r+0xb2>
 801066e:	2b16      	cmp	r3, #22
 8010670:	d101      	bne.n	8010676 <__sflush_r+0xb6>
 8010672:	602f      	str	r7, [r5, #0]
 8010674:	e7b1      	b.n	80105da <__sflush_r+0x1a>
 8010676:	89a3      	ldrh	r3, [r4, #12]
 8010678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801067c:	81a3      	strh	r3, [r4, #12]
 801067e:	e7ad      	b.n	80105dc <__sflush_r+0x1c>
 8010680:	690f      	ldr	r7, [r1, #16]
 8010682:	2f00      	cmp	r7, #0
 8010684:	d0a9      	beq.n	80105da <__sflush_r+0x1a>
 8010686:	0793      	lsls	r3, r2, #30
 8010688:	680e      	ldr	r6, [r1, #0]
 801068a:	bf08      	it	eq
 801068c:	694b      	ldreq	r3, [r1, #20]
 801068e:	600f      	str	r7, [r1, #0]
 8010690:	bf18      	it	ne
 8010692:	2300      	movne	r3, #0
 8010694:	eba6 0807 	sub.w	r8, r6, r7
 8010698:	608b      	str	r3, [r1, #8]
 801069a:	f1b8 0f00 	cmp.w	r8, #0
 801069e:	dd9c      	ble.n	80105da <__sflush_r+0x1a>
 80106a0:	4643      	mov	r3, r8
 80106a2:	463a      	mov	r2, r7
 80106a4:	6a21      	ldr	r1, [r4, #32]
 80106a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106a8:	4628      	mov	r0, r5
 80106aa:	47b0      	blx	r6
 80106ac:	2800      	cmp	r0, #0
 80106ae:	dc06      	bgt.n	80106be <__sflush_r+0xfe>
 80106b0:	89a3      	ldrh	r3, [r4, #12]
 80106b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106b6:	81a3      	strh	r3, [r4, #12]
 80106b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106bc:	e78e      	b.n	80105dc <__sflush_r+0x1c>
 80106be:	4407      	add	r7, r0
 80106c0:	eba8 0800 	sub.w	r8, r8, r0
 80106c4:	e7e9      	b.n	801069a <__sflush_r+0xda>
 80106c6:	bf00      	nop
 80106c8:	20400001 	.word	0x20400001

080106cc <_fflush_r>:
 80106cc:	b538      	push	{r3, r4, r5, lr}
 80106ce:	690b      	ldr	r3, [r1, #16]
 80106d0:	4605      	mov	r5, r0
 80106d2:	460c      	mov	r4, r1
 80106d4:	b1db      	cbz	r3, 801070e <_fflush_r+0x42>
 80106d6:	b118      	cbz	r0, 80106e0 <_fflush_r+0x14>
 80106d8:	6983      	ldr	r3, [r0, #24]
 80106da:	b90b      	cbnz	r3, 80106e0 <_fflush_r+0x14>
 80106dc:	f000 f860 	bl	80107a0 <__sinit>
 80106e0:	4b0c      	ldr	r3, [pc, #48]	; (8010714 <_fflush_r+0x48>)
 80106e2:	429c      	cmp	r4, r3
 80106e4:	d109      	bne.n	80106fa <_fflush_r+0x2e>
 80106e6:	686c      	ldr	r4, [r5, #4]
 80106e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106ec:	b17b      	cbz	r3, 801070e <_fflush_r+0x42>
 80106ee:	4621      	mov	r1, r4
 80106f0:	4628      	mov	r0, r5
 80106f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106f6:	f7ff bf63 	b.w	80105c0 <__sflush_r>
 80106fa:	4b07      	ldr	r3, [pc, #28]	; (8010718 <_fflush_r+0x4c>)
 80106fc:	429c      	cmp	r4, r3
 80106fe:	d101      	bne.n	8010704 <_fflush_r+0x38>
 8010700:	68ac      	ldr	r4, [r5, #8]
 8010702:	e7f1      	b.n	80106e8 <_fflush_r+0x1c>
 8010704:	4b05      	ldr	r3, [pc, #20]	; (801071c <_fflush_r+0x50>)
 8010706:	429c      	cmp	r4, r3
 8010708:	bf08      	it	eq
 801070a:	68ec      	ldreq	r4, [r5, #12]
 801070c:	e7ec      	b.n	80106e8 <_fflush_r+0x1c>
 801070e:	2000      	movs	r0, #0
 8010710:	bd38      	pop	{r3, r4, r5, pc}
 8010712:	bf00      	nop
 8010714:	08013dd8 	.word	0x08013dd8
 8010718:	08013df8 	.word	0x08013df8
 801071c:	08013db8 	.word	0x08013db8

08010720 <std>:
 8010720:	2300      	movs	r3, #0
 8010722:	b510      	push	{r4, lr}
 8010724:	4604      	mov	r4, r0
 8010726:	e9c0 3300 	strd	r3, r3, [r0]
 801072a:	6083      	str	r3, [r0, #8]
 801072c:	8181      	strh	r1, [r0, #12]
 801072e:	6643      	str	r3, [r0, #100]	; 0x64
 8010730:	81c2      	strh	r2, [r0, #14]
 8010732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010736:	6183      	str	r3, [r0, #24]
 8010738:	4619      	mov	r1, r3
 801073a:	2208      	movs	r2, #8
 801073c:	305c      	adds	r0, #92	; 0x5c
 801073e:	f7fe fb2f 	bl	800eda0 <memset>
 8010742:	4b05      	ldr	r3, [pc, #20]	; (8010758 <std+0x38>)
 8010744:	6263      	str	r3, [r4, #36]	; 0x24
 8010746:	4b05      	ldr	r3, [pc, #20]	; (801075c <std+0x3c>)
 8010748:	62a3      	str	r3, [r4, #40]	; 0x28
 801074a:	4b05      	ldr	r3, [pc, #20]	; (8010760 <std+0x40>)
 801074c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801074e:	4b05      	ldr	r3, [pc, #20]	; (8010764 <std+0x44>)
 8010750:	6224      	str	r4, [r4, #32]
 8010752:	6323      	str	r3, [r4, #48]	; 0x30
 8010754:	bd10      	pop	{r4, pc}
 8010756:	bf00      	nop
 8010758:	080113a5 	.word	0x080113a5
 801075c:	080113c7 	.word	0x080113c7
 8010760:	080113ff 	.word	0x080113ff
 8010764:	08011423 	.word	0x08011423

08010768 <_cleanup_r>:
 8010768:	4901      	ldr	r1, [pc, #4]	; (8010770 <_cleanup_r+0x8>)
 801076a:	f000 b885 	b.w	8010878 <_fwalk_reent>
 801076e:	bf00      	nop
 8010770:	080106cd 	.word	0x080106cd

08010774 <__sfmoreglue>:
 8010774:	b570      	push	{r4, r5, r6, lr}
 8010776:	1e4a      	subs	r2, r1, #1
 8010778:	2568      	movs	r5, #104	; 0x68
 801077a:	4355      	muls	r5, r2
 801077c:	460e      	mov	r6, r1
 801077e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010782:	f000 fc53 	bl	801102c <_malloc_r>
 8010786:	4604      	mov	r4, r0
 8010788:	b140      	cbz	r0, 801079c <__sfmoreglue+0x28>
 801078a:	2100      	movs	r1, #0
 801078c:	e9c0 1600 	strd	r1, r6, [r0]
 8010790:	300c      	adds	r0, #12
 8010792:	60a0      	str	r0, [r4, #8]
 8010794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010798:	f7fe fb02 	bl	800eda0 <memset>
 801079c:	4620      	mov	r0, r4
 801079e:	bd70      	pop	{r4, r5, r6, pc}

080107a0 <__sinit>:
 80107a0:	6983      	ldr	r3, [r0, #24]
 80107a2:	b510      	push	{r4, lr}
 80107a4:	4604      	mov	r4, r0
 80107a6:	bb33      	cbnz	r3, 80107f6 <__sinit+0x56>
 80107a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80107ac:	6503      	str	r3, [r0, #80]	; 0x50
 80107ae:	4b12      	ldr	r3, [pc, #72]	; (80107f8 <__sinit+0x58>)
 80107b0:	4a12      	ldr	r2, [pc, #72]	; (80107fc <__sinit+0x5c>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	6282      	str	r2, [r0, #40]	; 0x28
 80107b6:	4298      	cmp	r0, r3
 80107b8:	bf04      	itt	eq
 80107ba:	2301      	moveq	r3, #1
 80107bc:	6183      	streq	r3, [r0, #24]
 80107be:	f000 f81f 	bl	8010800 <__sfp>
 80107c2:	6060      	str	r0, [r4, #4]
 80107c4:	4620      	mov	r0, r4
 80107c6:	f000 f81b 	bl	8010800 <__sfp>
 80107ca:	60a0      	str	r0, [r4, #8]
 80107cc:	4620      	mov	r0, r4
 80107ce:	f000 f817 	bl	8010800 <__sfp>
 80107d2:	2200      	movs	r2, #0
 80107d4:	60e0      	str	r0, [r4, #12]
 80107d6:	2104      	movs	r1, #4
 80107d8:	6860      	ldr	r0, [r4, #4]
 80107da:	f7ff ffa1 	bl	8010720 <std>
 80107de:	2201      	movs	r2, #1
 80107e0:	2109      	movs	r1, #9
 80107e2:	68a0      	ldr	r0, [r4, #8]
 80107e4:	f7ff ff9c 	bl	8010720 <std>
 80107e8:	2202      	movs	r2, #2
 80107ea:	2112      	movs	r1, #18
 80107ec:	68e0      	ldr	r0, [r4, #12]
 80107ee:	f7ff ff97 	bl	8010720 <std>
 80107f2:	2301      	movs	r3, #1
 80107f4:	61a3      	str	r3, [r4, #24]
 80107f6:	bd10      	pop	{r4, pc}
 80107f8:	08013d74 	.word	0x08013d74
 80107fc:	08010769 	.word	0x08010769

08010800 <__sfp>:
 8010800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010802:	4b1b      	ldr	r3, [pc, #108]	; (8010870 <__sfp+0x70>)
 8010804:	681e      	ldr	r6, [r3, #0]
 8010806:	69b3      	ldr	r3, [r6, #24]
 8010808:	4607      	mov	r7, r0
 801080a:	b913      	cbnz	r3, 8010812 <__sfp+0x12>
 801080c:	4630      	mov	r0, r6
 801080e:	f7ff ffc7 	bl	80107a0 <__sinit>
 8010812:	3648      	adds	r6, #72	; 0x48
 8010814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010818:	3b01      	subs	r3, #1
 801081a:	d503      	bpl.n	8010824 <__sfp+0x24>
 801081c:	6833      	ldr	r3, [r6, #0]
 801081e:	b133      	cbz	r3, 801082e <__sfp+0x2e>
 8010820:	6836      	ldr	r6, [r6, #0]
 8010822:	e7f7      	b.n	8010814 <__sfp+0x14>
 8010824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010828:	b16d      	cbz	r5, 8010846 <__sfp+0x46>
 801082a:	3468      	adds	r4, #104	; 0x68
 801082c:	e7f4      	b.n	8010818 <__sfp+0x18>
 801082e:	2104      	movs	r1, #4
 8010830:	4638      	mov	r0, r7
 8010832:	f7ff ff9f 	bl	8010774 <__sfmoreglue>
 8010836:	6030      	str	r0, [r6, #0]
 8010838:	2800      	cmp	r0, #0
 801083a:	d1f1      	bne.n	8010820 <__sfp+0x20>
 801083c:	230c      	movs	r3, #12
 801083e:	603b      	str	r3, [r7, #0]
 8010840:	4604      	mov	r4, r0
 8010842:	4620      	mov	r0, r4
 8010844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010846:	4b0b      	ldr	r3, [pc, #44]	; (8010874 <__sfp+0x74>)
 8010848:	6665      	str	r5, [r4, #100]	; 0x64
 801084a:	e9c4 5500 	strd	r5, r5, [r4]
 801084e:	60a5      	str	r5, [r4, #8]
 8010850:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010854:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010858:	2208      	movs	r2, #8
 801085a:	4629      	mov	r1, r5
 801085c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010860:	f7fe fa9e 	bl	800eda0 <memset>
 8010864:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010868:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801086c:	e7e9      	b.n	8010842 <__sfp+0x42>
 801086e:	bf00      	nop
 8010870:	08013d74 	.word	0x08013d74
 8010874:	ffff0001 	.word	0xffff0001

08010878 <_fwalk_reent>:
 8010878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801087c:	4680      	mov	r8, r0
 801087e:	4689      	mov	r9, r1
 8010880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010884:	2600      	movs	r6, #0
 8010886:	b914      	cbnz	r4, 801088e <_fwalk_reent+0x16>
 8010888:	4630      	mov	r0, r6
 801088a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801088e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010892:	3f01      	subs	r7, #1
 8010894:	d501      	bpl.n	801089a <_fwalk_reent+0x22>
 8010896:	6824      	ldr	r4, [r4, #0]
 8010898:	e7f5      	b.n	8010886 <_fwalk_reent+0xe>
 801089a:	89ab      	ldrh	r3, [r5, #12]
 801089c:	2b01      	cmp	r3, #1
 801089e:	d907      	bls.n	80108b0 <_fwalk_reent+0x38>
 80108a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108a4:	3301      	adds	r3, #1
 80108a6:	d003      	beq.n	80108b0 <_fwalk_reent+0x38>
 80108a8:	4629      	mov	r1, r5
 80108aa:	4640      	mov	r0, r8
 80108ac:	47c8      	blx	r9
 80108ae:	4306      	orrs	r6, r0
 80108b0:	3568      	adds	r5, #104	; 0x68
 80108b2:	e7ee      	b.n	8010892 <_fwalk_reent+0x1a>

080108b4 <_localeconv_r>:
 80108b4:	4b04      	ldr	r3, [pc, #16]	; (80108c8 <_localeconv_r+0x14>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	6a18      	ldr	r0, [r3, #32]
 80108ba:	4b04      	ldr	r3, [pc, #16]	; (80108cc <_localeconv_r+0x18>)
 80108bc:	2800      	cmp	r0, #0
 80108be:	bf08      	it	eq
 80108c0:	4618      	moveq	r0, r3
 80108c2:	30f0      	adds	r0, #240	; 0xf0
 80108c4:	4770      	bx	lr
 80108c6:	bf00      	nop
 80108c8:	20001cac 	.word	0x20001cac
 80108cc:	20001d10 	.word	0x20001d10

080108d0 <__swhatbuf_r>:
 80108d0:	b570      	push	{r4, r5, r6, lr}
 80108d2:	460e      	mov	r6, r1
 80108d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108d8:	2900      	cmp	r1, #0
 80108da:	b096      	sub	sp, #88	; 0x58
 80108dc:	4614      	mov	r4, r2
 80108de:	461d      	mov	r5, r3
 80108e0:	da07      	bge.n	80108f2 <__swhatbuf_r+0x22>
 80108e2:	2300      	movs	r3, #0
 80108e4:	602b      	str	r3, [r5, #0]
 80108e6:	89b3      	ldrh	r3, [r6, #12]
 80108e8:	061a      	lsls	r2, r3, #24
 80108ea:	d410      	bmi.n	801090e <__swhatbuf_r+0x3e>
 80108ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108f0:	e00e      	b.n	8010910 <__swhatbuf_r+0x40>
 80108f2:	466a      	mov	r2, sp
 80108f4:	f000 fdbc 	bl	8011470 <_fstat_r>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	dbf2      	blt.n	80108e2 <__swhatbuf_r+0x12>
 80108fc:	9a01      	ldr	r2, [sp, #4]
 80108fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010902:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010906:	425a      	negs	r2, r3
 8010908:	415a      	adcs	r2, r3
 801090a:	602a      	str	r2, [r5, #0]
 801090c:	e7ee      	b.n	80108ec <__swhatbuf_r+0x1c>
 801090e:	2340      	movs	r3, #64	; 0x40
 8010910:	2000      	movs	r0, #0
 8010912:	6023      	str	r3, [r4, #0]
 8010914:	b016      	add	sp, #88	; 0x58
 8010916:	bd70      	pop	{r4, r5, r6, pc}

08010918 <__smakebuf_r>:
 8010918:	898b      	ldrh	r3, [r1, #12]
 801091a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801091c:	079d      	lsls	r5, r3, #30
 801091e:	4606      	mov	r6, r0
 8010920:	460c      	mov	r4, r1
 8010922:	d507      	bpl.n	8010934 <__smakebuf_r+0x1c>
 8010924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010928:	6023      	str	r3, [r4, #0]
 801092a:	6123      	str	r3, [r4, #16]
 801092c:	2301      	movs	r3, #1
 801092e:	6163      	str	r3, [r4, #20]
 8010930:	b002      	add	sp, #8
 8010932:	bd70      	pop	{r4, r5, r6, pc}
 8010934:	ab01      	add	r3, sp, #4
 8010936:	466a      	mov	r2, sp
 8010938:	f7ff ffca 	bl	80108d0 <__swhatbuf_r>
 801093c:	9900      	ldr	r1, [sp, #0]
 801093e:	4605      	mov	r5, r0
 8010940:	4630      	mov	r0, r6
 8010942:	f000 fb73 	bl	801102c <_malloc_r>
 8010946:	b948      	cbnz	r0, 801095c <__smakebuf_r+0x44>
 8010948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801094c:	059a      	lsls	r2, r3, #22
 801094e:	d4ef      	bmi.n	8010930 <__smakebuf_r+0x18>
 8010950:	f023 0303 	bic.w	r3, r3, #3
 8010954:	f043 0302 	orr.w	r3, r3, #2
 8010958:	81a3      	strh	r3, [r4, #12]
 801095a:	e7e3      	b.n	8010924 <__smakebuf_r+0xc>
 801095c:	4b0d      	ldr	r3, [pc, #52]	; (8010994 <__smakebuf_r+0x7c>)
 801095e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010960:	89a3      	ldrh	r3, [r4, #12]
 8010962:	6020      	str	r0, [r4, #0]
 8010964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010968:	81a3      	strh	r3, [r4, #12]
 801096a:	9b00      	ldr	r3, [sp, #0]
 801096c:	6163      	str	r3, [r4, #20]
 801096e:	9b01      	ldr	r3, [sp, #4]
 8010970:	6120      	str	r0, [r4, #16]
 8010972:	b15b      	cbz	r3, 801098c <__smakebuf_r+0x74>
 8010974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010978:	4630      	mov	r0, r6
 801097a:	f000 fd8b 	bl	8011494 <_isatty_r>
 801097e:	b128      	cbz	r0, 801098c <__smakebuf_r+0x74>
 8010980:	89a3      	ldrh	r3, [r4, #12]
 8010982:	f023 0303 	bic.w	r3, r3, #3
 8010986:	f043 0301 	orr.w	r3, r3, #1
 801098a:	81a3      	strh	r3, [r4, #12]
 801098c:	89a3      	ldrh	r3, [r4, #12]
 801098e:	431d      	orrs	r5, r3
 8010990:	81a5      	strh	r5, [r4, #12]
 8010992:	e7cd      	b.n	8010930 <__smakebuf_r+0x18>
 8010994:	08010769 	.word	0x08010769

08010998 <malloc>:
 8010998:	4b02      	ldr	r3, [pc, #8]	; (80109a4 <malloc+0xc>)
 801099a:	4601      	mov	r1, r0
 801099c:	6818      	ldr	r0, [r3, #0]
 801099e:	f000 bb45 	b.w	801102c <_malloc_r>
 80109a2:	bf00      	nop
 80109a4:	20001cac 	.word	0x20001cac

080109a8 <memcpy>:
 80109a8:	b510      	push	{r4, lr}
 80109aa:	1e43      	subs	r3, r0, #1
 80109ac:	440a      	add	r2, r1
 80109ae:	4291      	cmp	r1, r2
 80109b0:	d100      	bne.n	80109b4 <memcpy+0xc>
 80109b2:	bd10      	pop	{r4, pc}
 80109b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109bc:	e7f7      	b.n	80109ae <memcpy+0x6>

080109be <_Balloc>:
 80109be:	b570      	push	{r4, r5, r6, lr}
 80109c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80109c2:	4604      	mov	r4, r0
 80109c4:	460e      	mov	r6, r1
 80109c6:	b93d      	cbnz	r5, 80109d8 <_Balloc+0x1a>
 80109c8:	2010      	movs	r0, #16
 80109ca:	f7ff ffe5 	bl	8010998 <malloc>
 80109ce:	6260      	str	r0, [r4, #36]	; 0x24
 80109d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109d4:	6005      	str	r5, [r0, #0]
 80109d6:	60c5      	str	r5, [r0, #12]
 80109d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80109da:	68eb      	ldr	r3, [r5, #12]
 80109dc:	b183      	cbz	r3, 8010a00 <_Balloc+0x42>
 80109de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80109e6:	b9b8      	cbnz	r0, 8010a18 <_Balloc+0x5a>
 80109e8:	2101      	movs	r1, #1
 80109ea:	fa01 f506 	lsl.w	r5, r1, r6
 80109ee:	1d6a      	adds	r2, r5, #5
 80109f0:	0092      	lsls	r2, r2, #2
 80109f2:	4620      	mov	r0, r4
 80109f4:	f000 fabe 	bl	8010f74 <_calloc_r>
 80109f8:	b160      	cbz	r0, 8010a14 <_Balloc+0x56>
 80109fa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80109fe:	e00e      	b.n	8010a1e <_Balloc+0x60>
 8010a00:	2221      	movs	r2, #33	; 0x21
 8010a02:	2104      	movs	r1, #4
 8010a04:	4620      	mov	r0, r4
 8010a06:	f000 fab5 	bl	8010f74 <_calloc_r>
 8010a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a0c:	60e8      	str	r0, [r5, #12]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d1e4      	bne.n	80109de <_Balloc+0x20>
 8010a14:	2000      	movs	r0, #0
 8010a16:	bd70      	pop	{r4, r5, r6, pc}
 8010a18:	6802      	ldr	r2, [r0, #0]
 8010a1a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010a1e:	2300      	movs	r3, #0
 8010a20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a24:	e7f7      	b.n	8010a16 <_Balloc+0x58>

08010a26 <_Bfree>:
 8010a26:	b570      	push	{r4, r5, r6, lr}
 8010a28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010a2a:	4606      	mov	r6, r0
 8010a2c:	460d      	mov	r5, r1
 8010a2e:	b93c      	cbnz	r4, 8010a40 <_Bfree+0x1a>
 8010a30:	2010      	movs	r0, #16
 8010a32:	f7ff ffb1 	bl	8010998 <malloc>
 8010a36:	6270      	str	r0, [r6, #36]	; 0x24
 8010a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a3c:	6004      	str	r4, [r0, #0]
 8010a3e:	60c4      	str	r4, [r0, #12]
 8010a40:	b13d      	cbz	r5, 8010a52 <_Bfree+0x2c>
 8010a42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010a44:	686a      	ldr	r2, [r5, #4]
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a4c:	6029      	str	r1, [r5, #0]
 8010a4e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010a52:	bd70      	pop	{r4, r5, r6, pc}

08010a54 <__multadd>:
 8010a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a58:	690d      	ldr	r5, [r1, #16]
 8010a5a:	461f      	mov	r7, r3
 8010a5c:	4606      	mov	r6, r0
 8010a5e:	460c      	mov	r4, r1
 8010a60:	f101 0c14 	add.w	ip, r1, #20
 8010a64:	2300      	movs	r3, #0
 8010a66:	f8dc 0000 	ldr.w	r0, [ip]
 8010a6a:	b281      	uxth	r1, r0
 8010a6c:	fb02 7101 	mla	r1, r2, r1, r7
 8010a70:	0c0f      	lsrs	r7, r1, #16
 8010a72:	0c00      	lsrs	r0, r0, #16
 8010a74:	fb02 7000 	mla	r0, r2, r0, r7
 8010a78:	b289      	uxth	r1, r1
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010a80:	429d      	cmp	r5, r3
 8010a82:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010a86:	f84c 1b04 	str.w	r1, [ip], #4
 8010a8a:	dcec      	bgt.n	8010a66 <__multadd+0x12>
 8010a8c:	b1d7      	cbz	r7, 8010ac4 <__multadd+0x70>
 8010a8e:	68a3      	ldr	r3, [r4, #8]
 8010a90:	42ab      	cmp	r3, r5
 8010a92:	dc12      	bgt.n	8010aba <__multadd+0x66>
 8010a94:	6861      	ldr	r1, [r4, #4]
 8010a96:	4630      	mov	r0, r6
 8010a98:	3101      	adds	r1, #1
 8010a9a:	f7ff ff90 	bl	80109be <_Balloc>
 8010a9e:	6922      	ldr	r2, [r4, #16]
 8010aa0:	3202      	adds	r2, #2
 8010aa2:	f104 010c 	add.w	r1, r4, #12
 8010aa6:	4680      	mov	r8, r0
 8010aa8:	0092      	lsls	r2, r2, #2
 8010aaa:	300c      	adds	r0, #12
 8010aac:	f7ff ff7c 	bl	80109a8 <memcpy>
 8010ab0:	4621      	mov	r1, r4
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f7ff ffb7 	bl	8010a26 <_Bfree>
 8010ab8:	4644      	mov	r4, r8
 8010aba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010abe:	3501      	adds	r5, #1
 8010ac0:	615f      	str	r7, [r3, #20]
 8010ac2:	6125      	str	r5, [r4, #16]
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010aca <__hi0bits>:
 8010aca:	0c02      	lsrs	r2, r0, #16
 8010acc:	0412      	lsls	r2, r2, #16
 8010ace:	4603      	mov	r3, r0
 8010ad0:	b9b2      	cbnz	r2, 8010b00 <__hi0bits+0x36>
 8010ad2:	0403      	lsls	r3, r0, #16
 8010ad4:	2010      	movs	r0, #16
 8010ad6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010ada:	bf04      	itt	eq
 8010adc:	021b      	lsleq	r3, r3, #8
 8010ade:	3008      	addeq	r0, #8
 8010ae0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010ae4:	bf04      	itt	eq
 8010ae6:	011b      	lsleq	r3, r3, #4
 8010ae8:	3004      	addeq	r0, #4
 8010aea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010aee:	bf04      	itt	eq
 8010af0:	009b      	lsleq	r3, r3, #2
 8010af2:	3002      	addeq	r0, #2
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	db06      	blt.n	8010b06 <__hi0bits+0x3c>
 8010af8:	005b      	lsls	r3, r3, #1
 8010afa:	d503      	bpl.n	8010b04 <__hi0bits+0x3a>
 8010afc:	3001      	adds	r0, #1
 8010afe:	4770      	bx	lr
 8010b00:	2000      	movs	r0, #0
 8010b02:	e7e8      	b.n	8010ad6 <__hi0bits+0xc>
 8010b04:	2020      	movs	r0, #32
 8010b06:	4770      	bx	lr

08010b08 <__lo0bits>:
 8010b08:	6803      	ldr	r3, [r0, #0]
 8010b0a:	f013 0207 	ands.w	r2, r3, #7
 8010b0e:	4601      	mov	r1, r0
 8010b10:	d00b      	beq.n	8010b2a <__lo0bits+0x22>
 8010b12:	07da      	lsls	r2, r3, #31
 8010b14:	d423      	bmi.n	8010b5e <__lo0bits+0x56>
 8010b16:	0798      	lsls	r0, r3, #30
 8010b18:	bf49      	itett	mi
 8010b1a:	085b      	lsrmi	r3, r3, #1
 8010b1c:	089b      	lsrpl	r3, r3, #2
 8010b1e:	2001      	movmi	r0, #1
 8010b20:	600b      	strmi	r3, [r1, #0]
 8010b22:	bf5c      	itt	pl
 8010b24:	600b      	strpl	r3, [r1, #0]
 8010b26:	2002      	movpl	r0, #2
 8010b28:	4770      	bx	lr
 8010b2a:	b298      	uxth	r0, r3
 8010b2c:	b9a8      	cbnz	r0, 8010b5a <__lo0bits+0x52>
 8010b2e:	0c1b      	lsrs	r3, r3, #16
 8010b30:	2010      	movs	r0, #16
 8010b32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010b36:	bf04      	itt	eq
 8010b38:	0a1b      	lsreq	r3, r3, #8
 8010b3a:	3008      	addeq	r0, #8
 8010b3c:	071a      	lsls	r2, r3, #28
 8010b3e:	bf04      	itt	eq
 8010b40:	091b      	lsreq	r3, r3, #4
 8010b42:	3004      	addeq	r0, #4
 8010b44:	079a      	lsls	r2, r3, #30
 8010b46:	bf04      	itt	eq
 8010b48:	089b      	lsreq	r3, r3, #2
 8010b4a:	3002      	addeq	r0, #2
 8010b4c:	07da      	lsls	r2, r3, #31
 8010b4e:	d402      	bmi.n	8010b56 <__lo0bits+0x4e>
 8010b50:	085b      	lsrs	r3, r3, #1
 8010b52:	d006      	beq.n	8010b62 <__lo0bits+0x5a>
 8010b54:	3001      	adds	r0, #1
 8010b56:	600b      	str	r3, [r1, #0]
 8010b58:	4770      	bx	lr
 8010b5a:	4610      	mov	r0, r2
 8010b5c:	e7e9      	b.n	8010b32 <__lo0bits+0x2a>
 8010b5e:	2000      	movs	r0, #0
 8010b60:	4770      	bx	lr
 8010b62:	2020      	movs	r0, #32
 8010b64:	4770      	bx	lr

08010b66 <__i2b>:
 8010b66:	b510      	push	{r4, lr}
 8010b68:	460c      	mov	r4, r1
 8010b6a:	2101      	movs	r1, #1
 8010b6c:	f7ff ff27 	bl	80109be <_Balloc>
 8010b70:	2201      	movs	r2, #1
 8010b72:	6144      	str	r4, [r0, #20]
 8010b74:	6102      	str	r2, [r0, #16]
 8010b76:	bd10      	pop	{r4, pc}

08010b78 <__multiply>:
 8010b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7c:	4614      	mov	r4, r2
 8010b7e:	690a      	ldr	r2, [r1, #16]
 8010b80:	6923      	ldr	r3, [r4, #16]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	bfb8      	it	lt
 8010b86:	460b      	movlt	r3, r1
 8010b88:	4688      	mov	r8, r1
 8010b8a:	bfbc      	itt	lt
 8010b8c:	46a0      	movlt	r8, r4
 8010b8e:	461c      	movlt	r4, r3
 8010b90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010b94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010b98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ba0:	eb07 0609 	add.w	r6, r7, r9
 8010ba4:	42b3      	cmp	r3, r6
 8010ba6:	bfb8      	it	lt
 8010ba8:	3101      	addlt	r1, #1
 8010baa:	f7ff ff08 	bl	80109be <_Balloc>
 8010bae:	f100 0514 	add.w	r5, r0, #20
 8010bb2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010bb6:	462b      	mov	r3, r5
 8010bb8:	2200      	movs	r2, #0
 8010bba:	4573      	cmp	r3, lr
 8010bbc:	d316      	bcc.n	8010bec <__multiply+0x74>
 8010bbe:	f104 0214 	add.w	r2, r4, #20
 8010bc2:	f108 0114 	add.w	r1, r8, #20
 8010bc6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010bca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	9b00      	ldr	r3, [sp, #0]
 8010bd2:	9201      	str	r2, [sp, #4]
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d80c      	bhi.n	8010bf2 <__multiply+0x7a>
 8010bd8:	2e00      	cmp	r6, #0
 8010bda:	dd03      	ble.n	8010be4 <__multiply+0x6c>
 8010bdc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d05d      	beq.n	8010ca0 <__multiply+0x128>
 8010be4:	6106      	str	r6, [r0, #16]
 8010be6:	b003      	add	sp, #12
 8010be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bec:	f843 2b04 	str.w	r2, [r3], #4
 8010bf0:	e7e3      	b.n	8010bba <__multiply+0x42>
 8010bf2:	f8b2 b000 	ldrh.w	fp, [r2]
 8010bf6:	f1bb 0f00 	cmp.w	fp, #0
 8010bfa:	d023      	beq.n	8010c44 <__multiply+0xcc>
 8010bfc:	4689      	mov	r9, r1
 8010bfe:	46ac      	mov	ip, r5
 8010c00:	f04f 0800 	mov.w	r8, #0
 8010c04:	f859 4b04 	ldr.w	r4, [r9], #4
 8010c08:	f8dc a000 	ldr.w	sl, [ip]
 8010c0c:	b2a3      	uxth	r3, r4
 8010c0e:	fa1f fa8a 	uxth.w	sl, sl
 8010c12:	fb0b a303 	mla	r3, fp, r3, sl
 8010c16:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010c1a:	f8dc 4000 	ldr.w	r4, [ip]
 8010c1e:	4443      	add	r3, r8
 8010c20:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010c24:	fb0b 840a 	mla	r4, fp, sl, r8
 8010c28:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010c2c:	46e2      	mov	sl, ip
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010c34:	454f      	cmp	r7, r9
 8010c36:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010c3a:	f84a 3b04 	str.w	r3, [sl], #4
 8010c3e:	d82b      	bhi.n	8010c98 <__multiply+0x120>
 8010c40:	f8cc 8004 	str.w	r8, [ip, #4]
 8010c44:	9b01      	ldr	r3, [sp, #4]
 8010c46:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010c4a:	3204      	adds	r2, #4
 8010c4c:	f1ba 0f00 	cmp.w	sl, #0
 8010c50:	d020      	beq.n	8010c94 <__multiply+0x11c>
 8010c52:	682b      	ldr	r3, [r5, #0]
 8010c54:	4689      	mov	r9, r1
 8010c56:	46a8      	mov	r8, r5
 8010c58:	f04f 0b00 	mov.w	fp, #0
 8010c5c:	f8b9 c000 	ldrh.w	ip, [r9]
 8010c60:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010c64:	fb0a 440c 	mla	r4, sl, ip, r4
 8010c68:	445c      	add	r4, fp
 8010c6a:	46c4      	mov	ip, r8
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010c72:	f84c 3b04 	str.w	r3, [ip], #4
 8010c76:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c7a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010c7e:	0c1b      	lsrs	r3, r3, #16
 8010c80:	fb0a b303 	mla	r3, sl, r3, fp
 8010c84:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010c88:	454f      	cmp	r7, r9
 8010c8a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010c8e:	d805      	bhi.n	8010c9c <__multiply+0x124>
 8010c90:	f8c8 3004 	str.w	r3, [r8, #4]
 8010c94:	3504      	adds	r5, #4
 8010c96:	e79b      	b.n	8010bd0 <__multiply+0x58>
 8010c98:	46d4      	mov	ip, sl
 8010c9a:	e7b3      	b.n	8010c04 <__multiply+0x8c>
 8010c9c:	46e0      	mov	r8, ip
 8010c9e:	e7dd      	b.n	8010c5c <__multiply+0xe4>
 8010ca0:	3e01      	subs	r6, #1
 8010ca2:	e799      	b.n	8010bd8 <__multiply+0x60>

08010ca4 <__pow5mult>:
 8010ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ca8:	4615      	mov	r5, r2
 8010caa:	f012 0203 	ands.w	r2, r2, #3
 8010cae:	4606      	mov	r6, r0
 8010cb0:	460f      	mov	r7, r1
 8010cb2:	d007      	beq.n	8010cc4 <__pow5mult+0x20>
 8010cb4:	3a01      	subs	r2, #1
 8010cb6:	4c21      	ldr	r4, [pc, #132]	; (8010d3c <__pow5mult+0x98>)
 8010cb8:	2300      	movs	r3, #0
 8010cba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010cbe:	f7ff fec9 	bl	8010a54 <__multadd>
 8010cc2:	4607      	mov	r7, r0
 8010cc4:	10ad      	asrs	r5, r5, #2
 8010cc6:	d035      	beq.n	8010d34 <__pow5mult+0x90>
 8010cc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010cca:	b93c      	cbnz	r4, 8010cdc <__pow5mult+0x38>
 8010ccc:	2010      	movs	r0, #16
 8010cce:	f7ff fe63 	bl	8010998 <malloc>
 8010cd2:	6270      	str	r0, [r6, #36]	; 0x24
 8010cd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010cd8:	6004      	str	r4, [r0, #0]
 8010cda:	60c4      	str	r4, [r0, #12]
 8010cdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010ce0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ce4:	b94c      	cbnz	r4, 8010cfa <__pow5mult+0x56>
 8010ce6:	f240 2171 	movw	r1, #625	; 0x271
 8010cea:	4630      	mov	r0, r6
 8010cec:	f7ff ff3b 	bl	8010b66 <__i2b>
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f8c8 0008 	str.w	r0, [r8, #8]
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	6003      	str	r3, [r0, #0]
 8010cfa:	f04f 0800 	mov.w	r8, #0
 8010cfe:	07eb      	lsls	r3, r5, #31
 8010d00:	d50a      	bpl.n	8010d18 <__pow5mult+0x74>
 8010d02:	4639      	mov	r1, r7
 8010d04:	4622      	mov	r2, r4
 8010d06:	4630      	mov	r0, r6
 8010d08:	f7ff ff36 	bl	8010b78 <__multiply>
 8010d0c:	4639      	mov	r1, r7
 8010d0e:	4681      	mov	r9, r0
 8010d10:	4630      	mov	r0, r6
 8010d12:	f7ff fe88 	bl	8010a26 <_Bfree>
 8010d16:	464f      	mov	r7, r9
 8010d18:	106d      	asrs	r5, r5, #1
 8010d1a:	d00b      	beq.n	8010d34 <__pow5mult+0x90>
 8010d1c:	6820      	ldr	r0, [r4, #0]
 8010d1e:	b938      	cbnz	r0, 8010d30 <__pow5mult+0x8c>
 8010d20:	4622      	mov	r2, r4
 8010d22:	4621      	mov	r1, r4
 8010d24:	4630      	mov	r0, r6
 8010d26:	f7ff ff27 	bl	8010b78 <__multiply>
 8010d2a:	6020      	str	r0, [r4, #0]
 8010d2c:	f8c0 8000 	str.w	r8, [r0]
 8010d30:	4604      	mov	r4, r0
 8010d32:	e7e4      	b.n	8010cfe <__pow5mult+0x5a>
 8010d34:	4638      	mov	r0, r7
 8010d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d3a:	bf00      	nop
 8010d3c:	08013f08 	.word	0x08013f08

08010d40 <__lshift>:
 8010d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d44:	460c      	mov	r4, r1
 8010d46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d4a:	6923      	ldr	r3, [r4, #16]
 8010d4c:	6849      	ldr	r1, [r1, #4]
 8010d4e:	eb0a 0903 	add.w	r9, sl, r3
 8010d52:	68a3      	ldr	r3, [r4, #8]
 8010d54:	4607      	mov	r7, r0
 8010d56:	4616      	mov	r6, r2
 8010d58:	f109 0501 	add.w	r5, r9, #1
 8010d5c:	42ab      	cmp	r3, r5
 8010d5e:	db32      	blt.n	8010dc6 <__lshift+0x86>
 8010d60:	4638      	mov	r0, r7
 8010d62:	f7ff fe2c 	bl	80109be <_Balloc>
 8010d66:	2300      	movs	r3, #0
 8010d68:	4680      	mov	r8, r0
 8010d6a:	f100 0114 	add.w	r1, r0, #20
 8010d6e:	461a      	mov	r2, r3
 8010d70:	4553      	cmp	r3, sl
 8010d72:	db2b      	blt.n	8010dcc <__lshift+0x8c>
 8010d74:	6920      	ldr	r0, [r4, #16]
 8010d76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d7a:	f104 0314 	add.w	r3, r4, #20
 8010d7e:	f016 021f 	ands.w	r2, r6, #31
 8010d82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d8a:	d025      	beq.n	8010dd8 <__lshift+0x98>
 8010d8c:	f1c2 0e20 	rsb	lr, r2, #32
 8010d90:	2000      	movs	r0, #0
 8010d92:	681e      	ldr	r6, [r3, #0]
 8010d94:	468a      	mov	sl, r1
 8010d96:	4096      	lsls	r6, r2
 8010d98:	4330      	orrs	r0, r6
 8010d9a:	f84a 0b04 	str.w	r0, [sl], #4
 8010d9e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010da2:	459c      	cmp	ip, r3
 8010da4:	fa20 f00e 	lsr.w	r0, r0, lr
 8010da8:	d814      	bhi.n	8010dd4 <__lshift+0x94>
 8010daa:	6048      	str	r0, [r1, #4]
 8010dac:	b108      	cbz	r0, 8010db2 <__lshift+0x72>
 8010dae:	f109 0502 	add.w	r5, r9, #2
 8010db2:	3d01      	subs	r5, #1
 8010db4:	4638      	mov	r0, r7
 8010db6:	f8c8 5010 	str.w	r5, [r8, #16]
 8010dba:	4621      	mov	r1, r4
 8010dbc:	f7ff fe33 	bl	8010a26 <_Bfree>
 8010dc0:	4640      	mov	r0, r8
 8010dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dc6:	3101      	adds	r1, #1
 8010dc8:	005b      	lsls	r3, r3, #1
 8010dca:	e7c7      	b.n	8010d5c <__lshift+0x1c>
 8010dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	e7cd      	b.n	8010d70 <__lshift+0x30>
 8010dd4:	4651      	mov	r1, sl
 8010dd6:	e7dc      	b.n	8010d92 <__lshift+0x52>
 8010dd8:	3904      	subs	r1, #4
 8010dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dde:	f841 2f04 	str.w	r2, [r1, #4]!
 8010de2:	459c      	cmp	ip, r3
 8010de4:	d8f9      	bhi.n	8010dda <__lshift+0x9a>
 8010de6:	e7e4      	b.n	8010db2 <__lshift+0x72>

08010de8 <__mcmp>:
 8010de8:	6903      	ldr	r3, [r0, #16]
 8010dea:	690a      	ldr	r2, [r1, #16]
 8010dec:	1a9b      	subs	r3, r3, r2
 8010dee:	b530      	push	{r4, r5, lr}
 8010df0:	d10c      	bne.n	8010e0c <__mcmp+0x24>
 8010df2:	0092      	lsls	r2, r2, #2
 8010df4:	3014      	adds	r0, #20
 8010df6:	3114      	adds	r1, #20
 8010df8:	1884      	adds	r4, r0, r2
 8010dfa:	4411      	add	r1, r2
 8010dfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010e00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010e04:	4295      	cmp	r5, r2
 8010e06:	d003      	beq.n	8010e10 <__mcmp+0x28>
 8010e08:	d305      	bcc.n	8010e16 <__mcmp+0x2e>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	bd30      	pop	{r4, r5, pc}
 8010e10:	42a0      	cmp	r0, r4
 8010e12:	d3f3      	bcc.n	8010dfc <__mcmp+0x14>
 8010e14:	e7fa      	b.n	8010e0c <__mcmp+0x24>
 8010e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e1a:	e7f7      	b.n	8010e0c <__mcmp+0x24>

08010e1c <__mdiff>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	460d      	mov	r5, r1
 8010e22:	4607      	mov	r7, r0
 8010e24:	4611      	mov	r1, r2
 8010e26:	4628      	mov	r0, r5
 8010e28:	4614      	mov	r4, r2
 8010e2a:	f7ff ffdd 	bl	8010de8 <__mcmp>
 8010e2e:	1e06      	subs	r6, r0, #0
 8010e30:	d108      	bne.n	8010e44 <__mdiff+0x28>
 8010e32:	4631      	mov	r1, r6
 8010e34:	4638      	mov	r0, r7
 8010e36:	f7ff fdc2 	bl	80109be <_Balloc>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e44:	bfa4      	itt	ge
 8010e46:	4623      	movge	r3, r4
 8010e48:	462c      	movge	r4, r5
 8010e4a:	4638      	mov	r0, r7
 8010e4c:	6861      	ldr	r1, [r4, #4]
 8010e4e:	bfa6      	itte	ge
 8010e50:	461d      	movge	r5, r3
 8010e52:	2600      	movge	r6, #0
 8010e54:	2601      	movlt	r6, #1
 8010e56:	f7ff fdb2 	bl	80109be <_Balloc>
 8010e5a:	692b      	ldr	r3, [r5, #16]
 8010e5c:	60c6      	str	r6, [r0, #12]
 8010e5e:	6926      	ldr	r6, [r4, #16]
 8010e60:	f105 0914 	add.w	r9, r5, #20
 8010e64:	f104 0214 	add.w	r2, r4, #20
 8010e68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010e6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010e70:	f100 0514 	add.w	r5, r0, #20
 8010e74:	f04f 0e00 	mov.w	lr, #0
 8010e78:	f852 ab04 	ldr.w	sl, [r2], #4
 8010e7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010e80:	fa1e f18a 	uxtah	r1, lr, sl
 8010e84:	b2a3      	uxth	r3, r4
 8010e86:	1ac9      	subs	r1, r1, r3
 8010e88:	0c23      	lsrs	r3, r4, #16
 8010e8a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010e8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010e92:	b289      	uxth	r1, r1
 8010e94:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010e98:	45c8      	cmp	r8, r9
 8010e9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010e9e:	4694      	mov	ip, r2
 8010ea0:	f845 3b04 	str.w	r3, [r5], #4
 8010ea4:	d8e8      	bhi.n	8010e78 <__mdiff+0x5c>
 8010ea6:	45bc      	cmp	ip, r7
 8010ea8:	d304      	bcc.n	8010eb4 <__mdiff+0x98>
 8010eaa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010eae:	b183      	cbz	r3, 8010ed2 <__mdiff+0xb6>
 8010eb0:	6106      	str	r6, [r0, #16]
 8010eb2:	e7c5      	b.n	8010e40 <__mdiff+0x24>
 8010eb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010eb8:	fa1e f381 	uxtah	r3, lr, r1
 8010ebc:	141a      	asrs	r2, r3, #16
 8010ebe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ec8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010ecc:	f845 3b04 	str.w	r3, [r5], #4
 8010ed0:	e7e9      	b.n	8010ea6 <__mdiff+0x8a>
 8010ed2:	3e01      	subs	r6, #1
 8010ed4:	e7e9      	b.n	8010eaa <__mdiff+0x8e>

08010ed6 <__d2b>:
 8010ed6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010eda:	460e      	mov	r6, r1
 8010edc:	2101      	movs	r1, #1
 8010ede:	ec59 8b10 	vmov	r8, r9, d0
 8010ee2:	4615      	mov	r5, r2
 8010ee4:	f7ff fd6b 	bl	80109be <_Balloc>
 8010ee8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010eec:	4607      	mov	r7, r0
 8010eee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ef2:	bb34      	cbnz	r4, 8010f42 <__d2b+0x6c>
 8010ef4:	9301      	str	r3, [sp, #4]
 8010ef6:	f1b8 0300 	subs.w	r3, r8, #0
 8010efa:	d027      	beq.n	8010f4c <__d2b+0x76>
 8010efc:	a802      	add	r0, sp, #8
 8010efe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010f02:	f7ff fe01 	bl	8010b08 <__lo0bits>
 8010f06:	9900      	ldr	r1, [sp, #0]
 8010f08:	b1f0      	cbz	r0, 8010f48 <__d2b+0x72>
 8010f0a:	9a01      	ldr	r2, [sp, #4]
 8010f0c:	f1c0 0320 	rsb	r3, r0, #32
 8010f10:	fa02 f303 	lsl.w	r3, r2, r3
 8010f14:	430b      	orrs	r3, r1
 8010f16:	40c2      	lsrs	r2, r0
 8010f18:	617b      	str	r3, [r7, #20]
 8010f1a:	9201      	str	r2, [sp, #4]
 8010f1c:	9b01      	ldr	r3, [sp, #4]
 8010f1e:	61bb      	str	r3, [r7, #24]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	bf14      	ite	ne
 8010f24:	2102      	movne	r1, #2
 8010f26:	2101      	moveq	r1, #1
 8010f28:	6139      	str	r1, [r7, #16]
 8010f2a:	b1c4      	cbz	r4, 8010f5e <__d2b+0x88>
 8010f2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010f30:	4404      	add	r4, r0
 8010f32:	6034      	str	r4, [r6, #0]
 8010f34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f38:	6028      	str	r0, [r5, #0]
 8010f3a:	4638      	mov	r0, r7
 8010f3c:	b003      	add	sp, #12
 8010f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f46:	e7d5      	b.n	8010ef4 <__d2b+0x1e>
 8010f48:	6179      	str	r1, [r7, #20]
 8010f4a:	e7e7      	b.n	8010f1c <__d2b+0x46>
 8010f4c:	a801      	add	r0, sp, #4
 8010f4e:	f7ff fddb 	bl	8010b08 <__lo0bits>
 8010f52:	9b01      	ldr	r3, [sp, #4]
 8010f54:	617b      	str	r3, [r7, #20]
 8010f56:	2101      	movs	r1, #1
 8010f58:	6139      	str	r1, [r7, #16]
 8010f5a:	3020      	adds	r0, #32
 8010f5c:	e7e5      	b.n	8010f2a <__d2b+0x54>
 8010f5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010f62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010f66:	6030      	str	r0, [r6, #0]
 8010f68:	6918      	ldr	r0, [r3, #16]
 8010f6a:	f7ff fdae 	bl	8010aca <__hi0bits>
 8010f6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010f72:	e7e1      	b.n	8010f38 <__d2b+0x62>

08010f74 <_calloc_r>:
 8010f74:	b538      	push	{r3, r4, r5, lr}
 8010f76:	fb02 f401 	mul.w	r4, r2, r1
 8010f7a:	4621      	mov	r1, r4
 8010f7c:	f000 f856 	bl	801102c <_malloc_r>
 8010f80:	4605      	mov	r5, r0
 8010f82:	b118      	cbz	r0, 8010f8c <_calloc_r+0x18>
 8010f84:	4622      	mov	r2, r4
 8010f86:	2100      	movs	r1, #0
 8010f88:	f7fd ff0a 	bl	800eda0 <memset>
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	bd38      	pop	{r3, r4, r5, pc}

08010f90 <_free_r>:
 8010f90:	b538      	push	{r3, r4, r5, lr}
 8010f92:	4605      	mov	r5, r0
 8010f94:	2900      	cmp	r1, #0
 8010f96:	d045      	beq.n	8011024 <_free_r+0x94>
 8010f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f9c:	1f0c      	subs	r4, r1, #4
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	bfb8      	it	lt
 8010fa2:	18e4      	addlt	r4, r4, r3
 8010fa4:	f000 fac3 	bl	801152e <__malloc_lock>
 8010fa8:	4a1f      	ldr	r2, [pc, #124]	; (8011028 <_free_r+0x98>)
 8010faa:	6813      	ldr	r3, [r2, #0]
 8010fac:	4610      	mov	r0, r2
 8010fae:	b933      	cbnz	r3, 8010fbe <_free_r+0x2e>
 8010fb0:	6063      	str	r3, [r4, #4]
 8010fb2:	6014      	str	r4, [r2, #0]
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fba:	f000 bab9 	b.w	8011530 <__malloc_unlock>
 8010fbe:	42a3      	cmp	r3, r4
 8010fc0:	d90c      	bls.n	8010fdc <_free_r+0x4c>
 8010fc2:	6821      	ldr	r1, [r4, #0]
 8010fc4:	1862      	adds	r2, r4, r1
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	bf04      	itt	eq
 8010fca:	681a      	ldreq	r2, [r3, #0]
 8010fcc:	685b      	ldreq	r3, [r3, #4]
 8010fce:	6063      	str	r3, [r4, #4]
 8010fd0:	bf04      	itt	eq
 8010fd2:	1852      	addeq	r2, r2, r1
 8010fd4:	6022      	streq	r2, [r4, #0]
 8010fd6:	6004      	str	r4, [r0, #0]
 8010fd8:	e7ec      	b.n	8010fb4 <_free_r+0x24>
 8010fda:	4613      	mov	r3, r2
 8010fdc:	685a      	ldr	r2, [r3, #4]
 8010fde:	b10a      	cbz	r2, 8010fe4 <_free_r+0x54>
 8010fe0:	42a2      	cmp	r2, r4
 8010fe2:	d9fa      	bls.n	8010fda <_free_r+0x4a>
 8010fe4:	6819      	ldr	r1, [r3, #0]
 8010fe6:	1858      	adds	r0, r3, r1
 8010fe8:	42a0      	cmp	r0, r4
 8010fea:	d10b      	bne.n	8011004 <_free_r+0x74>
 8010fec:	6820      	ldr	r0, [r4, #0]
 8010fee:	4401      	add	r1, r0
 8010ff0:	1858      	adds	r0, r3, r1
 8010ff2:	4282      	cmp	r2, r0
 8010ff4:	6019      	str	r1, [r3, #0]
 8010ff6:	d1dd      	bne.n	8010fb4 <_free_r+0x24>
 8010ff8:	6810      	ldr	r0, [r2, #0]
 8010ffa:	6852      	ldr	r2, [r2, #4]
 8010ffc:	605a      	str	r2, [r3, #4]
 8010ffe:	4401      	add	r1, r0
 8011000:	6019      	str	r1, [r3, #0]
 8011002:	e7d7      	b.n	8010fb4 <_free_r+0x24>
 8011004:	d902      	bls.n	801100c <_free_r+0x7c>
 8011006:	230c      	movs	r3, #12
 8011008:	602b      	str	r3, [r5, #0]
 801100a:	e7d3      	b.n	8010fb4 <_free_r+0x24>
 801100c:	6820      	ldr	r0, [r4, #0]
 801100e:	1821      	adds	r1, r4, r0
 8011010:	428a      	cmp	r2, r1
 8011012:	bf04      	itt	eq
 8011014:	6811      	ldreq	r1, [r2, #0]
 8011016:	6852      	ldreq	r2, [r2, #4]
 8011018:	6062      	str	r2, [r4, #4]
 801101a:	bf04      	itt	eq
 801101c:	1809      	addeq	r1, r1, r0
 801101e:	6021      	streq	r1, [r4, #0]
 8011020:	605c      	str	r4, [r3, #4]
 8011022:	e7c7      	b.n	8010fb4 <_free_r+0x24>
 8011024:	bd38      	pop	{r3, r4, r5, pc}
 8011026:	bf00      	nop
 8011028:	20001f10 	.word	0x20001f10

0801102c <_malloc_r>:
 801102c:	b570      	push	{r4, r5, r6, lr}
 801102e:	1ccd      	adds	r5, r1, #3
 8011030:	f025 0503 	bic.w	r5, r5, #3
 8011034:	3508      	adds	r5, #8
 8011036:	2d0c      	cmp	r5, #12
 8011038:	bf38      	it	cc
 801103a:	250c      	movcc	r5, #12
 801103c:	2d00      	cmp	r5, #0
 801103e:	4606      	mov	r6, r0
 8011040:	db01      	blt.n	8011046 <_malloc_r+0x1a>
 8011042:	42a9      	cmp	r1, r5
 8011044:	d903      	bls.n	801104e <_malloc_r+0x22>
 8011046:	230c      	movs	r3, #12
 8011048:	6033      	str	r3, [r6, #0]
 801104a:	2000      	movs	r0, #0
 801104c:	bd70      	pop	{r4, r5, r6, pc}
 801104e:	f000 fa6e 	bl	801152e <__malloc_lock>
 8011052:	4a21      	ldr	r2, [pc, #132]	; (80110d8 <_malloc_r+0xac>)
 8011054:	6814      	ldr	r4, [r2, #0]
 8011056:	4621      	mov	r1, r4
 8011058:	b991      	cbnz	r1, 8011080 <_malloc_r+0x54>
 801105a:	4c20      	ldr	r4, [pc, #128]	; (80110dc <_malloc_r+0xb0>)
 801105c:	6823      	ldr	r3, [r4, #0]
 801105e:	b91b      	cbnz	r3, 8011068 <_malloc_r+0x3c>
 8011060:	4630      	mov	r0, r6
 8011062:	f000 f98f 	bl	8011384 <_sbrk_r>
 8011066:	6020      	str	r0, [r4, #0]
 8011068:	4629      	mov	r1, r5
 801106a:	4630      	mov	r0, r6
 801106c:	f000 f98a 	bl	8011384 <_sbrk_r>
 8011070:	1c43      	adds	r3, r0, #1
 8011072:	d124      	bne.n	80110be <_malloc_r+0x92>
 8011074:	230c      	movs	r3, #12
 8011076:	6033      	str	r3, [r6, #0]
 8011078:	4630      	mov	r0, r6
 801107a:	f000 fa59 	bl	8011530 <__malloc_unlock>
 801107e:	e7e4      	b.n	801104a <_malloc_r+0x1e>
 8011080:	680b      	ldr	r3, [r1, #0]
 8011082:	1b5b      	subs	r3, r3, r5
 8011084:	d418      	bmi.n	80110b8 <_malloc_r+0x8c>
 8011086:	2b0b      	cmp	r3, #11
 8011088:	d90f      	bls.n	80110aa <_malloc_r+0x7e>
 801108a:	600b      	str	r3, [r1, #0]
 801108c:	50cd      	str	r5, [r1, r3]
 801108e:	18cc      	adds	r4, r1, r3
 8011090:	4630      	mov	r0, r6
 8011092:	f000 fa4d 	bl	8011530 <__malloc_unlock>
 8011096:	f104 000b 	add.w	r0, r4, #11
 801109a:	1d23      	adds	r3, r4, #4
 801109c:	f020 0007 	bic.w	r0, r0, #7
 80110a0:	1ac3      	subs	r3, r0, r3
 80110a2:	d0d3      	beq.n	801104c <_malloc_r+0x20>
 80110a4:	425a      	negs	r2, r3
 80110a6:	50e2      	str	r2, [r4, r3]
 80110a8:	e7d0      	b.n	801104c <_malloc_r+0x20>
 80110aa:	428c      	cmp	r4, r1
 80110ac:	684b      	ldr	r3, [r1, #4]
 80110ae:	bf16      	itet	ne
 80110b0:	6063      	strne	r3, [r4, #4]
 80110b2:	6013      	streq	r3, [r2, #0]
 80110b4:	460c      	movne	r4, r1
 80110b6:	e7eb      	b.n	8011090 <_malloc_r+0x64>
 80110b8:	460c      	mov	r4, r1
 80110ba:	6849      	ldr	r1, [r1, #4]
 80110bc:	e7cc      	b.n	8011058 <_malloc_r+0x2c>
 80110be:	1cc4      	adds	r4, r0, #3
 80110c0:	f024 0403 	bic.w	r4, r4, #3
 80110c4:	42a0      	cmp	r0, r4
 80110c6:	d005      	beq.n	80110d4 <_malloc_r+0xa8>
 80110c8:	1a21      	subs	r1, r4, r0
 80110ca:	4630      	mov	r0, r6
 80110cc:	f000 f95a 	bl	8011384 <_sbrk_r>
 80110d0:	3001      	adds	r0, #1
 80110d2:	d0cf      	beq.n	8011074 <_malloc_r+0x48>
 80110d4:	6025      	str	r5, [r4, #0]
 80110d6:	e7db      	b.n	8011090 <_malloc_r+0x64>
 80110d8:	20001f10 	.word	0x20001f10
 80110dc:	20001f14 	.word	0x20001f14

080110e0 <__ssputs_r>:
 80110e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110e4:	688e      	ldr	r6, [r1, #8]
 80110e6:	429e      	cmp	r6, r3
 80110e8:	4682      	mov	sl, r0
 80110ea:	460c      	mov	r4, r1
 80110ec:	4690      	mov	r8, r2
 80110ee:	4699      	mov	r9, r3
 80110f0:	d837      	bhi.n	8011162 <__ssputs_r+0x82>
 80110f2:	898a      	ldrh	r2, [r1, #12]
 80110f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80110f8:	d031      	beq.n	801115e <__ssputs_r+0x7e>
 80110fa:	6825      	ldr	r5, [r4, #0]
 80110fc:	6909      	ldr	r1, [r1, #16]
 80110fe:	1a6f      	subs	r7, r5, r1
 8011100:	6965      	ldr	r5, [r4, #20]
 8011102:	2302      	movs	r3, #2
 8011104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011108:	fb95 f5f3 	sdiv	r5, r5, r3
 801110c:	f109 0301 	add.w	r3, r9, #1
 8011110:	443b      	add	r3, r7
 8011112:	429d      	cmp	r5, r3
 8011114:	bf38      	it	cc
 8011116:	461d      	movcc	r5, r3
 8011118:	0553      	lsls	r3, r2, #21
 801111a:	d530      	bpl.n	801117e <__ssputs_r+0x9e>
 801111c:	4629      	mov	r1, r5
 801111e:	f7ff ff85 	bl	801102c <_malloc_r>
 8011122:	4606      	mov	r6, r0
 8011124:	b950      	cbnz	r0, 801113c <__ssputs_r+0x5c>
 8011126:	230c      	movs	r3, #12
 8011128:	f8ca 3000 	str.w	r3, [sl]
 801112c:	89a3      	ldrh	r3, [r4, #12]
 801112e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011132:	81a3      	strh	r3, [r4, #12]
 8011134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801113c:	463a      	mov	r2, r7
 801113e:	6921      	ldr	r1, [r4, #16]
 8011140:	f7ff fc32 	bl	80109a8 <memcpy>
 8011144:	89a3      	ldrh	r3, [r4, #12]
 8011146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801114a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801114e:	81a3      	strh	r3, [r4, #12]
 8011150:	6126      	str	r6, [r4, #16]
 8011152:	6165      	str	r5, [r4, #20]
 8011154:	443e      	add	r6, r7
 8011156:	1bed      	subs	r5, r5, r7
 8011158:	6026      	str	r6, [r4, #0]
 801115a:	60a5      	str	r5, [r4, #8]
 801115c:	464e      	mov	r6, r9
 801115e:	454e      	cmp	r6, r9
 8011160:	d900      	bls.n	8011164 <__ssputs_r+0x84>
 8011162:	464e      	mov	r6, r9
 8011164:	4632      	mov	r2, r6
 8011166:	4641      	mov	r1, r8
 8011168:	6820      	ldr	r0, [r4, #0]
 801116a:	f000 f9c7 	bl	80114fc <memmove>
 801116e:	68a3      	ldr	r3, [r4, #8]
 8011170:	1b9b      	subs	r3, r3, r6
 8011172:	60a3      	str	r3, [r4, #8]
 8011174:	6823      	ldr	r3, [r4, #0]
 8011176:	441e      	add	r6, r3
 8011178:	6026      	str	r6, [r4, #0]
 801117a:	2000      	movs	r0, #0
 801117c:	e7dc      	b.n	8011138 <__ssputs_r+0x58>
 801117e:	462a      	mov	r2, r5
 8011180:	f000 f9d7 	bl	8011532 <_realloc_r>
 8011184:	4606      	mov	r6, r0
 8011186:	2800      	cmp	r0, #0
 8011188:	d1e2      	bne.n	8011150 <__ssputs_r+0x70>
 801118a:	6921      	ldr	r1, [r4, #16]
 801118c:	4650      	mov	r0, sl
 801118e:	f7ff feff 	bl	8010f90 <_free_r>
 8011192:	e7c8      	b.n	8011126 <__ssputs_r+0x46>

08011194 <_svfiprintf_r>:
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	461d      	mov	r5, r3
 801119a:	898b      	ldrh	r3, [r1, #12]
 801119c:	061f      	lsls	r7, r3, #24
 801119e:	b09d      	sub	sp, #116	; 0x74
 80111a0:	4680      	mov	r8, r0
 80111a2:	460c      	mov	r4, r1
 80111a4:	4616      	mov	r6, r2
 80111a6:	d50f      	bpl.n	80111c8 <_svfiprintf_r+0x34>
 80111a8:	690b      	ldr	r3, [r1, #16]
 80111aa:	b96b      	cbnz	r3, 80111c8 <_svfiprintf_r+0x34>
 80111ac:	2140      	movs	r1, #64	; 0x40
 80111ae:	f7ff ff3d 	bl	801102c <_malloc_r>
 80111b2:	6020      	str	r0, [r4, #0]
 80111b4:	6120      	str	r0, [r4, #16]
 80111b6:	b928      	cbnz	r0, 80111c4 <_svfiprintf_r+0x30>
 80111b8:	230c      	movs	r3, #12
 80111ba:	f8c8 3000 	str.w	r3, [r8]
 80111be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111c2:	e0c8      	b.n	8011356 <_svfiprintf_r+0x1c2>
 80111c4:	2340      	movs	r3, #64	; 0x40
 80111c6:	6163      	str	r3, [r4, #20]
 80111c8:	2300      	movs	r3, #0
 80111ca:	9309      	str	r3, [sp, #36]	; 0x24
 80111cc:	2320      	movs	r3, #32
 80111ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111d2:	2330      	movs	r3, #48	; 0x30
 80111d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111d8:	9503      	str	r5, [sp, #12]
 80111da:	f04f 0b01 	mov.w	fp, #1
 80111de:	4637      	mov	r7, r6
 80111e0:	463d      	mov	r5, r7
 80111e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80111e6:	b10b      	cbz	r3, 80111ec <_svfiprintf_r+0x58>
 80111e8:	2b25      	cmp	r3, #37	; 0x25
 80111ea:	d13e      	bne.n	801126a <_svfiprintf_r+0xd6>
 80111ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80111f0:	d00b      	beq.n	801120a <_svfiprintf_r+0x76>
 80111f2:	4653      	mov	r3, sl
 80111f4:	4632      	mov	r2, r6
 80111f6:	4621      	mov	r1, r4
 80111f8:	4640      	mov	r0, r8
 80111fa:	f7ff ff71 	bl	80110e0 <__ssputs_r>
 80111fe:	3001      	adds	r0, #1
 8011200:	f000 80a4 	beq.w	801134c <_svfiprintf_r+0x1b8>
 8011204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011206:	4453      	add	r3, sl
 8011208:	9309      	str	r3, [sp, #36]	; 0x24
 801120a:	783b      	ldrb	r3, [r7, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	f000 809d 	beq.w	801134c <_svfiprintf_r+0x1b8>
 8011212:	2300      	movs	r3, #0
 8011214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801121c:	9304      	str	r3, [sp, #16]
 801121e:	9307      	str	r3, [sp, #28]
 8011220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011224:	931a      	str	r3, [sp, #104]	; 0x68
 8011226:	462f      	mov	r7, r5
 8011228:	2205      	movs	r2, #5
 801122a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801122e:	4850      	ldr	r0, [pc, #320]	; (8011370 <_svfiprintf_r+0x1dc>)
 8011230:	f7ee fffe 	bl	8000230 <memchr>
 8011234:	9b04      	ldr	r3, [sp, #16]
 8011236:	b9d0      	cbnz	r0, 801126e <_svfiprintf_r+0xda>
 8011238:	06d9      	lsls	r1, r3, #27
 801123a:	bf44      	itt	mi
 801123c:	2220      	movmi	r2, #32
 801123e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011242:	071a      	lsls	r2, r3, #28
 8011244:	bf44      	itt	mi
 8011246:	222b      	movmi	r2, #43	; 0x2b
 8011248:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801124c:	782a      	ldrb	r2, [r5, #0]
 801124e:	2a2a      	cmp	r2, #42	; 0x2a
 8011250:	d015      	beq.n	801127e <_svfiprintf_r+0xea>
 8011252:	9a07      	ldr	r2, [sp, #28]
 8011254:	462f      	mov	r7, r5
 8011256:	2000      	movs	r0, #0
 8011258:	250a      	movs	r5, #10
 801125a:	4639      	mov	r1, r7
 801125c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011260:	3b30      	subs	r3, #48	; 0x30
 8011262:	2b09      	cmp	r3, #9
 8011264:	d94d      	bls.n	8011302 <_svfiprintf_r+0x16e>
 8011266:	b1b8      	cbz	r0, 8011298 <_svfiprintf_r+0x104>
 8011268:	e00f      	b.n	801128a <_svfiprintf_r+0xf6>
 801126a:	462f      	mov	r7, r5
 801126c:	e7b8      	b.n	80111e0 <_svfiprintf_r+0x4c>
 801126e:	4a40      	ldr	r2, [pc, #256]	; (8011370 <_svfiprintf_r+0x1dc>)
 8011270:	1a80      	subs	r0, r0, r2
 8011272:	fa0b f000 	lsl.w	r0, fp, r0
 8011276:	4318      	orrs	r0, r3
 8011278:	9004      	str	r0, [sp, #16]
 801127a:	463d      	mov	r5, r7
 801127c:	e7d3      	b.n	8011226 <_svfiprintf_r+0x92>
 801127e:	9a03      	ldr	r2, [sp, #12]
 8011280:	1d11      	adds	r1, r2, #4
 8011282:	6812      	ldr	r2, [r2, #0]
 8011284:	9103      	str	r1, [sp, #12]
 8011286:	2a00      	cmp	r2, #0
 8011288:	db01      	blt.n	801128e <_svfiprintf_r+0xfa>
 801128a:	9207      	str	r2, [sp, #28]
 801128c:	e004      	b.n	8011298 <_svfiprintf_r+0x104>
 801128e:	4252      	negs	r2, r2
 8011290:	f043 0302 	orr.w	r3, r3, #2
 8011294:	9207      	str	r2, [sp, #28]
 8011296:	9304      	str	r3, [sp, #16]
 8011298:	783b      	ldrb	r3, [r7, #0]
 801129a:	2b2e      	cmp	r3, #46	; 0x2e
 801129c:	d10c      	bne.n	80112b8 <_svfiprintf_r+0x124>
 801129e:	787b      	ldrb	r3, [r7, #1]
 80112a0:	2b2a      	cmp	r3, #42	; 0x2a
 80112a2:	d133      	bne.n	801130c <_svfiprintf_r+0x178>
 80112a4:	9b03      	ldr	r3, [sp, #12]
 80112a6:	1d1a      	adds	r2, r3, #4
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	9203      	str	r2, [sp, #12]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	bfb8      	it	lt
 80112b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80112b4:	3702      	adds	r7, #2
 80112b6:	9305      	str	r3, [sp, #20]
 80112b8:	4d2e      	ldr	r5, [pc, #184]	; (8011374 <_svfiprintf_r+0x1e0>)
 80112ba:	7839      	ldrb	r1, [r7, #0]
 80112bc:	2203      	movs	r2, #3
 80112be:	4628      	mov	r0, r5
 80112c0:	f7ee ffb6 	bl	8000230 <memchr>
 80112c4:	b138      	cbz	r0, 80112d6 <_svfiprintf_r+0x142>
 80112c6:	2340      	movs	r3, #64	; 0x40
 80112c8:	1b40      	subs	r0, r0, r5
 80112ca:	fa03 f000 	lsl.w	r0, r3, r0
 80112ce:	9b04      	ldr	r3, [sp, #16]
 80112d0:	4303      	orrs	r3, r0
 80112d2:	3701      	adds	r7, #1
 80112d4:	9304      	str	r3, [sp, #16]
 80112d6:	7839      	ldrb	r1, [r7, #0]
 80112d8:	4827      	ldr	r0, [pc, #156]	; (8011378 <_svfiprintf_r+0x1e4>)
 80112da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112de:	2206      	movs	r2, #6
 80112e0:	1c7e      	adds	r6, r7, #1
 80112e2:	f7ee ffa5 	bl	8000230 <memchr>
 80112e6:	2800      	cmp	r0, #0
 80112e8:	d038      	beq.n	801135c <_svfiprintf_r+0x1c8>
 80112ea:	4b24      	ldr	r3, [pc, #144]	; (801137c <_svfiprintf_r+0x1e8>)
 80112ec:	bb13      	cbnz	r3, 8011334 <_svfiprintf_r+0x1a0>
 80112ee:	9b03      	ldr	r3, [sp, #12]
 80112f0:	3307      	adds	r3, #7
 80112f2:	f023 0307 	bic.w	r3, r3, #7
 80112f6:	3308      	adds	r3, #8
 80112f8:	9303      	str	r3, [sp, #12]
 80112fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112fc:	444b      	add	r3, r9
 80112fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011300:	e76d      	b.n	80111de <_svfiprintf_r+0x4a>
 8011302:	fb05 3202 	mla	r2, r5, r2, r3
 8011306:	2001      	movs	r0, #1
 8011308:	460f      	mov	r7, r1
 801130a:	e7a6      	b.n	801125a <_svfiprintf_r+0xc6>
 801130c:	2300      	movs	r3, #0
 801130e:	3701      	adds	r7, #1
 8011310:	9305      	str	r3, [sp, #20]
 8011312:	4619      	mov	r1, r3
 8011314:	250a      	movs	r5, #10
 8011316:	4638      	mov	r0, r7
 8011318:	f810 2b01 	ldrb.w	r2, [r0], #1
 801131c:	3a30      	subs	r2, #48	; 0x30
 801131e:	2a09      	cmp	r2, #9
 8011320:	d903      	bls.n	801132a <_svfiprintf_r+0x196>
 8011322:	2b00      	cmp	r3, #0
 8011324:	d0c8      	beq.n	80112b8 <_svfiprintf_r+0x124>
 8011326:	9105      	str	r1, [sp, #20]
 8011328:	e7c6      	b.n	80112b8 <_svfiprintf_r+0x124>
 801132a:	fb05 2101 	mla	r1, r5, r1, r2
 801132e:	2301      	movs	r3, #1
 8011330:	4607      	mov	r7, r0
 8011332:	e7f0      	b.n	8011316 <_svfiprintf_r+0x182>
 8011334:	ab03      	add	r3, sp, #12
 8011336:	9300      	str	r3, [sp, #0]
 8011338:	4622      	mov	r2, r4
 801133a:	4b11      	ldr	r3, [pc, #68]	; (8011380 <_svfiprintf_r+0x1ec>)
 801133c:	a904      	add	r1, sp, #16
 801133e:	4640      	mov	r0, r8
 8011340:	f7fd fdca 	bl	800eed8 <_printf_float>
 8011344:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011348:	4681      	mov	r9, r0
 801134a:	d1d6      	bne.n	80112fa <_svfiprintf_r+0x166>
 801134c:	89a3      	ldrh	r3, [r4, #12]
 801134e:	065b      	lsls	r3, r3, #25
 8011350:	f53f af35 	bmi.w	80111be <_svfiprintf_r+0x2a>
 8011354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011356:	b01d      	add	sp, #116	; 0x74
 8011358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135c:	ab03      	add	r3, sp, #12
 801135e:	9300      	str	r3, [sp, #0]
 8011360:	4622      	mov	r2, r4
 8011362:	4b07      	ldr	r3, [pc, #28]	; (8011380 <_svfiprintf_r+0x1ec>)
 8011364:	a904      	add	r1, sp, #16
 8011366:	4640      	mov	r0, r8
 8011368:	f7fe f86c 	bl	800f444 <_printf_i>
 801136c:	e7ea      	b.n	8011344 <_svfiprintf_r+0x1b0>
 801136e:	bf00      	nop
 8011370:	08013f14 	.word	0x08013f14
 8011374:	08013f1a 	.word	0x08013f1a
 8011378:	08013f1e 	.word	0x08013f1e
 801137c:	0800eed9 	.word	0x0800eed9
 8011380:	080110e1 	.word	0x080110e1

08011384 <_sbrk_r>:
 8011384:	b538      	push	{r3, r4, r5, lr}
 8011386:	4c06      	ldr	r4, [pc, #24]	; (80113a0 <_sbrk_r+0x1c>)
 8011388:	2300      	movs	r3, #0
 801138a:	4605      	mov	r5, r0
 801138c:	4608      	mov	r0, r1
 801138e:	6023      	str	r3, [r4, #0]
 8011390:	f7f7 f82a 	bl	80083e8 <_sbrk>
 8011394:	1c43      	adds	r3, r0, #1
 8011396:	d102      	bne.n	801139e <_sbrk_r+0x1a>
 8011398:	6823      	ldr	r3, [r4, #0]
 801139a:	b103      	cbz	r3, 801139e <_sbrk_r+0x1a>
 801139c:	602b      	str	r3, [r5, #0]
 801139e:	bd38      	pop	{r3, r4, r5, pc}
 80113a0:	20002948 	.word	0x20002948

080113a4 <__sread>:
 80113a4:	b510      	push	{r4, lr}
 80113a6:	460c      	mov	r4, r1
 80113a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113ac:	f000 f8e8 	bl	8011580 <_read_r>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	bfab      	itete	ge
 80113b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80113b6:	89a3      	ldrhlt	r3, [r4, #12]
 80113b8:	181b      	addge	r3, r3, r0
 80113ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80113be:	bfac      	ite	ge
 80113c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80113c2:	81a3      	strhlt	r3, [r4, #12]
 80113c4:	bd10      	pop	{r4, pc}

080113c6 <__swrite>:
 80113c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ca:	461f      	mov	r7, r3
 80113cc:	898b      	ldrh	r3, [r1, #12]
 80113ce:	05db      	lsls	r3, r3, #23
 80113d0:	4605      	mov	r5, r0
 80113d2:	460c      	mov	r4, r1
 80113d4:	4616      	mov	r6, r2
 80113d6:	d505      	bpl.n	80113e4 <__swrite+0x1e>
 80113d8:	2302      	movs	r3, #2
 80113da:	2200      	movs	r2, #0
 80113dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113e0:	f000 f868 	bl	80114b4 <_lseek_r>
 80113e4:	89a3      	ldrh	r3, [r4, #12]
 80113e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80113ee:	81a3      	strh	r3, [r4, #12]
 80113f0:	4632      	mov	r2, r6
 80113f2:	463b      	mov	r3, r7
 80113f4:	4628      	mov	r0, r5
 80113f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113fa:	f000 b817 	b.w	801142c <_write_r>

080113fe <__sseek>:
 80113fe:	b510      	push	{r4, lr}
 8011400:	460c      	mov	r4, r1
 8011402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011406:	f000 f855 	bl	80114b4 <_lseek_r>
 801140a:	1c43      	adds	r3, r0, #1
 801140c:	89a3      	ldrh	r3, [r4, #12]
 801140e:	bf15      	itete	ne
 8011410:	6560      	strne	r0, [r4, #84]	; 0x54
 8011412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801141a:	81a3      	strheq	r3, [r4, #12]
 801141c:	bf18      	it	ne
 801141e:	81a3      	strhne	r3, [r4, #12]
 8011420:	bd10      	pop	{r4, pc}

08011422 <__sclose>:
 8011422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011426:	f000 b813 	b.w	8011450 <_close_r>
	...

0801142c <_write_r>:
 801142c:	b538      	push	{r3, r4, r5, lr}
 801142e:	4c07      	ldr	r4, [pc, #28]	; (801144c <_write_r+0x20>)
 8011430:	4605      	mov	r5, r0
 8011432:	4608      	mov	r0, r1
 8011434:	4611      	mov	r1, r2
 8011436:	2200      	movs	r2, #0
 8011438:	6022      	str	r2, [r4, #0]
 801143a:	461a      	mov	r2, r3
 801143c:	f7f6 fca9 	bl	8007d92 <_write>
 8011440:	1c43      	adds	r3, r0, #1
 8011442:	d102      	bne.n	801144a <_write_r+0x1e>
 8011444:	6823      	ldr	r3, [r4, #0]
 8011446:	b103      	cbz	r3, 801144a <_write_r+0x1e>
 8011448:	602b      	str	r3, [r5, #0]
 801144a:	bd38      	pop	{r3, r4, r5, pc}
 801144c:	20002948 	.word	0x20002948

08011450 <_close_r>:
 8011450:	b538      	push	{r3, r4, r5, lr}
 8011452:	4c06      	ldr	r4, [pc, #24]	; (801146c <_close_r+0x1c>)
 8011454:	2300      	movs	r3, #0
 8011456:	4605      	mov	r5, r0
 8011458:	4608      	mov	r0, r1
 801145a:	6023      	str	r3, [r4, #0]
 801145c:	f7f6 ff8f 	bl	800837e <_close>
 8011460:	1c43      	adds	r3, r0, #1
 8011462:	d102      	bne.n	801146a <_close_r+0x1a>
 8011464:	6823      	ldr	r3, [r4, #0]
 8011466:	b103      	cbz	r3, 801146a <_close_r+0x1a>
 8011468:	602b      	str	r3, [r5, #0]
 801146a:	bd38      	pop	{r3, r4, r5, pc}
 801146c:	20002948 	.word	0x20002948

08011470 <_fstat_r>:
 8011470:	b538      	push	{r3, r4, r5, lr}
 8011472:	4c07      	ldr	r4, [pc, #28]	; (8011490 <_fstat_r+0x20>)
 8011474:	2300      	movs	r3, #0
 8011476:	4605      	mov	r5, r0
 8011478:	4608      	mov	r0, r1
 801147a:	4611      	mov	r1, r2
 801147c:	6023      	str	r3, [r4, #0]
 801147e:	f7f6 ff8a 	bl	8008396 <_fstat>
 8011482:	1c43      	adds	r3, r0, #1
 8011484:	d102      	bne.n	801148c <_fstat_r+0x1c>
 8011486:	6823      	ldr	r3, [r4, #0]
 8011488:	b103      	cbz	r3, 801148c <_fstat_r+0x1c>
 801148a:	602b      	str	r3, [r5, #0]
 801148c:	bd38      	pop	{r3, r4, r5, pc}
 801148e:	bf00      	nop
 8011490:	20002948 	.word	0x20002948

08011494 <_isatty_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	4c06      	ldr	r4, [pc, #24]	; (80114b0 <_isatty_r+0x1c>)
 8011498:	2300      	movs	r3, #0
 801149a:	4605      	mov	r5, r0
 801149c:	4608      	mov	r0, r1
 801149e:	6023      	str	r3, [r4, #0]
 80114a0:	f7f6 ff89 	bl	80083b6 <_isatty>
 80114a4:	1c43      	adds	r3, r0, #1
 80114a6:	d102      	bne.n	80114ae <_isatty_r+0x1a>
 80114a8:	6823      	ldr	r3, [r4, #0]
 80114aa:	b103      	cbz	r3, 80114ae <_isatty_r+0x1a>
 80114ac:	602b      	str	r3, [r5, #0]
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	20002948 	.word	0x20002948

080114b4 <_lseek_r>:
 80114b4:	b538      	push	{r3, r4, r5, lr}
 80114b6:	4c07      	ldr	r4, [pc, #28]	; (80114d4 <_lseek_r+0x20>)
 80114b8:	4605      	mov	r5, r0
 80114ba:	4608      	mov	r0, r1
 80114bc:	4611      	mov	r1, r2
 80114be:	2200      	movs	r2, #0
 80114c0:	6022      	str	r2, [r4, #0]
 80114c2:	461a      	mov	r2, r3
 80114c4:	f7f6 ff82 	bl	80083cc <_lseek>
 80114c8:	1c43      	adds	r3, r0, #1
 80114ca:	d102      	bne.n	80114d2 <_lseek_r+0x1e>
 80114cc:	6823      	ldr	r3, [r4, #0]
 80114ce:	b103      	cbz	r3, 80114d2 <_lseek_r+0x1e>
 80114d0:	602b      	str	r3, [r5, #0]
 80114d2:	bd38      	pop	{r3, r4, r5, pc}
 80114d4:	20002948 	.word	0x20002948

080114d8 <__ascii_mbtowc>:
 80114d8:	b082      	sub	sp, #8
 80114da:	b901      	cbnz	r1, 80114de <__ascii_mbtowc+0x6>
 80114dc:	a901      	add	r1, sp, #4
 80114de:	b142      	cbz	r2, 80114f2 <__ascii_mbtowc+0x1a>
 80114e0:	b14b      	cbz	r3, 80114f6 <__ascii_mbtowc+0x1e>
 80114e2:	7813      	ldrb	r3, [r2, #0]
 80114e4:	600b      	str	r3, [r1, #0]
 80114e6:	7812      	ldrb	r2, [r2, #0]
 80114e8:	1c10      	adds	r0, r2, #0
 80114ea:	bf18      	it	ne
 80114ec:	2001      	movne	r0, #1
 80114ee:	b002      	add	sp, #8
 80114f0:	4770      	bx	lr
 80114f2:	4610      	mov	r0, r2
 80114f4:	e7fb      	b.n	80114ee <__ascii_mbtowc+0x16>
 80114f6:	f06f 0001 	mvn.w	r0, #1
 80114fa:	e7f8      	b.n	80114ee <__ascii_mbtowc+0x16>

080114fc <memmove>:
 80114fc:	4288      	cmp	r0, r1
 80114fe:	b510      	push	{r4, lr}
 8011500:	eb01 0302 	add.w	r3, r1, r2
 8011504:	d807      	bhi.n	8011516 <memmove+0x1a>
 8011506:	1e42      	subs	r2, r0, #1
 8011508:	4299      	cmp	r1, r3
 801150a:	d00a      	beq.n	8011522 <memmove+0x26>
 801150c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011510:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011514:	e7f8      	b.n	8011508 <memmove+0xc>
 8011516:	4283      	cmp	r3, r0
 8011518:	d9f5      	bls.n	8011506 <memmove+0xa>
 801151a:	1881      	adds	r1, r0, r2
 801151c:	1ad2      	subs	r2, r2, r3
 801151e:	42d3      	cmn	r3, r2
 8011520:	d100      	bne.n	8011524 <memmove+0x28>
 8011522:	bd10      	pop	{r4, pc}
 8011524:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011528:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801152c:	e7f7      	b.n	801151e <memmove+0x22>

0801152e <__malloc_lock>:
 801152e:	4770      	bx	lr

08011530 <__malloc_unlock>:
 8011530:	4770      	bx	lr

08011532 <_realloc_r>:
 8011532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011534:	4607      	mov	r7, r0
 8011536:	4614      	mov	r4, r2
 8011538:	460e      	mov	r6, r1
 801153a:	b921      	cbnz	r1, 8011546 <_realloc_r+0x14>
 801153c:	4611      	mov	r1, r2
 801153e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011542:	f7ff bd73 	b.w	801102c <_malloc_r>
 8011546:	b922      	cbnz	r2, 8011552 <_realloc_r+0x20>
 8011548:	f7ff fd22 	bl	8010f90 <_free_r>
 801154c:	4625      	mov	r5, r4
 801154e:	4628      	mov	r0, r5
 8011550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011552:	f000 f834 	bl	80115be <_malloc_usable_size_r>
 8011556:	42a0      	cmp	r0, r4
 8011558:	d20f      	bcs.n	801157a <_realloc_r+0x48>
 801155a:	4621      	mov	r1, r4
 801155c:	4638      	mov	r0, r7
 801155e:	f7ff fd65 	bl	801102c <_malloc_r>
 8011562:	4605      	mov	r5, r0
 8011564:	2800      	cmp	r0, #0
 8011566:	d0f2      	beq.n	801154e <_realloc_r+0x1c>
 8011568:	4631      	mov	r1, r6
 801156a:	4622      	mov	r2, r4
 801156c:	f7ff fa1c 	bl	80109a8 <memcpy>
 8011570:	4631      	mov	r1, r6
 8011572:	4638      	mov	r0, r7
 8011574:	f7ff fd0c 	bl	8010f90 <_free_r>
 8011578:	e7e9      	b.n	801154e <_realloc_r+0x1c>
 801157a:	4635      	mov	r5, r6
 801157c:	e7e7      	b.n	801154e <_realloc_r+0x1c>
	...

08011580 <_read_r>:
 8011580:	b538      	push	{r3, r4, r5, lr}
 8011582:	4c07      	ldr	r4, [pc, #28]	; (80115a0 <_read_r+0x20>)
 8011584:	4605      	mov	r5, r0
 8011586:	4608      	mov	r0, r1
 8011588:	4611      	mov	r1, r2
 801158a:	2200      	movs	r2, #0
 801158c:	6022      	str	r2, [r4, #0]
 801158e:	461a      	mov	r2, r3
 8011590:	f7f6 fed8 	bl	8008344 <_read>
 8011594:	1c43      	adds	r3, r0, #1
 8011596:	d102      	bne.n	801159e <_read_r+0x1e>
 8011598:	6823      	ldr	r3, [r4, #0]
 801159a:	b103      	cbz	r3, 801159e <_read_r+0x1e>
 801159c:	602b      	str	r3, [r5, #0]
 801159e:	bd38      	pop	{r3, r4, r5, pc}
 80115a0:	20002948 	.word	0x20002948

080115a4 <__ascii_wctomb>:
 80115a4:	b149      	cbz	r1, 80115ba <__ascii_wctomb+0x16>
 80115a6:	2aff      	cmp	r2, #255	; 0xff
 80115a8:	bf85      	ittet	hi
 80115aa:	238a      	movhi	r3, #138	; 0x8a
 80115ac:	6003      	strhi	r3, [r0, #0]
 80115ae:	700a      	strbls	r2, [r1, #0]
 80115b0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80115b4:	bf98      	it	ls
 80115b6:	2001      	movls	r0, #1
 80115b8:	4770      	bx	lr
 80115ba:	4608      	mov	r0, r1
 80115bc:	4770      	bx	lr

080115be <_malloc_usable_size_r>:
 80115be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115c2:	1f18      	subs	r0, r3, #4
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	bfbc      	itt	lt
 80115c8:	580b      	ldrlt	r3, [r1, r0]
 80115ca:	18c0      	addlt	r0, r0, r3
 80115cc:	4770      	bx	lr
	...

080115d0 <log10>:
 80115d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115d2:	ed2d 8b02 	vpush	{d8}
 80115d6:	b08b      	sub	sp, #44	; 0x2c
 80115d8:	ec55 4b10 	vmov	r4, r5, d0
 80115dc:	f000 f9e8 	bl	80119b0 <__ieee754_log10>
 80115e0:	4b36      	ldr	r3, [pc, #216]	; (80116bc <log10+0xec>)
 80115e2:	eeb0 8a40 	vmov.f32	s16, s0
 80115e6:	eef0 8a60 	vmov.f32	s17, s1
 80115ea:	f993 6000 	ldrsb.w	r6, [r3]
 80115ee:	1c73      	adds	r3, r6, #1
 80115f0:	d05c      	beq.n	80116ac <log10+0xdc>
 80115f2:	4622      	mov	r2, r4
 80115f4:	462b      	mov	r3, r5
 80115f6:	4620      	mov	r0, r4
 80115f8:	4629      	mov	r1, r5
 80115fa:	f7ef fabf 	bl	8000b7c <__aeabi_dcmpun>
 80115fe:	4607      	mov	r7, r0
 8011600:	2800      	cmp	r0, #0
 8011602:	d153      	bne.n	80116ac <log10+0xdc>
 8011604:	2200      	movs	r2, #0
 8011606:	2300      	movs	r3, #0
 8011608:	4620      	mov	r0, r4
 801160a:	4629      	mov	r1, r5
 801160c:	f7ef fa98 	bl	8000b40 <__aeabi_dcmple>
 8011610:	2800      	cmp	r0, #0
 8011612:	d04b      	beq.n	80116ac <log10+0xdc>
 8011614:	4b2a      	ldr	r3, [pc, #168]	; (80116c0 <log10+0xf0>)
 8011616:	9301      	str	r3, [sp, #4]
 8011618:	9708      	str	r7, [sp, #32]
 801161a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801161e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011622:	b9a6      	cbnz	r6, 801164e <log10+0x7e>
 8011624:	4b27      	ldr	r3, [pc, #156]	; (80116c4 <log10+0xf4>)
 8011626:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801162a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801162e:	4620      	mov	r0, r4
 8011630:	2200      	movs	r2, #0
 8011632:	2300      	movs	r3, #0
 8011634:	4629      	mov	r1, r5
 8011636:	f7ef fa6f 	bl	8000b18 <__aeabi_dcmpeq>
 801163a:	bb40      	cbnz	r0, 801168e <log10+0xbe>
 801163c:	2301      	movs	r3, #1
 801163e:	2e02      	cmp	r6, #2
 8011640:	9300      	str	r3, [sp, #0]
 8011642:	d119      	bne.n	8011678 <log10+0xa8>
 8011644:	f7fd fb82 	bl	800ed4c <__errno>
 8011648:	2321      	movs	r3, #33	; 0x21
 801164a:	6003      	str	r3, [r0, #0]
 801164c:	e019      	b.n	8011682 <log10+0xb2>
 801164e:	4b1e      	ldr	r3, [pc, #120]	; (80116c8 <log10+0xf8>)
 8011650:	2200      	movs	r2, #0
 8011652:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011656:	4620      	mov	r0, r4
 8011658:	2200      	movs	r2, #0
 801165a:	2300      	movs	r3, #0
 801165c:	4629      	mov	r1, r5
 801165e:	f7ef fa5b 	bl	8000b18 <__aeabi_dcmpeq>
 8011662:	2800      	cmp	r0, #0
 8011664:	d0ea      	beq.n	801163c <log10+0x6c>
 8011666:	2302      	movs	r3, #2
 8011668:	429e      	cmp	r6, r3
 801166a:	9300      	str	r3, [sp, #0]
 801166c:	d111      	bne.n	8011692 <log10+0xc2>
 801166e:	f7fd fb6d 	bl	800ed4c <__errno>
 8011672:	2322      	movs	r3, #34	; 0x22
 8011674:	6003      	str	r3, [r0, #0]
 8011676:	e011      	b.n	801169c <log10+0xcc>
 8011678:	4668      	mov	r0, sp
 801167a:	f000 fff4 	bl	8012666 <matherr>
 801167e:	2800      	cmp	r0, #0
 8011680:	d0e0      	beq.n	8011644 <log10+0x74>
 8011682:	4812      	ldr	r0, [pc, #72]	; (80116cc <log10+0xfc>)
 8011684:	f000 fff4 	bl	8012670 <nan>
 8011688:	ed8d 0b06 	vstr	d0, [sp, #24]
 801168c:	e006      	b.n	801169c <log10+0xcc>
 801168e:	2302      	movs	r3, #2
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	4668      	mov	r0, sp
 8011694:	f000 ffe7 	bl	8012666 <matherr>
 8011698:	2800      	cmp	r0, #0
 801169a:	d0e8      	beq.n	801166e <log10+0x9e>
 801169c:	9b08      	ldr	r3, [sp, #32]
 801169e:	b11b      	cbz	r3, 80116a8 <log10+0xd8>
 80116a0:	f7fd fb54 	bl	800ed4c <__errno>
 80116a4:	9b08      	ldr	r3, [sp, #32]
 80116a6:	6003      	str	r3, [r0, #0]
 80116a8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80116ac:	eeb0 0a48 	vmov.f32	s0, s16
 80116b0:	eef0 0a68 	vmov.f32	s1, s17
 80116b4:	b00b      	add	sp, #44	; 0x2c
 80116b6:	ecbd 8b02 	vpop	{d8}
 80116ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116bc:	20001e7c 	.word	0x20001e7c
 80116c0:	08014030 	.word	0x08014030
 80116c4:	c7efffff 	.word	0xc7efffff
 80116c8:	fff00000 	.word	0xfff00000
 80116cc:	08013f19 	.word	0x08013f19

080116d0 <pow>:
 80116d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	ed2d 8b04 	vpush	{d8-d9}
 80116d8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80119ac <pow+0x2dc>
 80116dc:	b08d      	sub	sp, #52	; 0x34
 80116de:	ec57 6b10 	vmov	r6, r7, d0
 80116e2:	ec55 4b11 	vmov	r4, r5, d1
 80116e6:	f000 f9ef 	bl	8011ac8 <__ieee754_pow>
 80116ea:	f999 3000 	ldrsb.w	r3, [r9]
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	3301      	adds	r3, #1
 80116f2:	eeb0 8a40 	vmov.f32	s16, s0
 80116f6:	eef0 8a60 	vmov.f32	s17, s1
 80116fa:	46c8      	mov	r8, r9
 80116fc:	d05f      	beq.n	80117be <pow+0xee>
 80116fe:	4622      	mov	r2, r4
 8011700:	462b      	mov	r3, r5
 8011702:	4620      	mov	r0, r4
 8011704:	4629      	mov	r1, r5
 8011706:	f7ef fa39 	bl	8000b7c <__aeabi_dcmpun>
 801170a:	4683      	mov	fp, r0
 801170c:	2800      	cmp	r0, #0
 801170e:	d156      	bne.n	80117be <pow+0xee>
 8011710:	4632      	mov	r2, r6
 8011712:	463b      	mov	r3, r7
 8011714:	4630      	mov	r0, r6
 8011716:	4639      	mov	r1, r7
 8011718:	f7ef fa30 	bl	8000b7c <__aeabi_dcmpun>
 801171c:	9001      	str	r0, [sp, #4]
 801171e:	b1e8      	cbz	r0, 801175c <pow+0x8c>
 8011720:	2200      	movs	r2, #0
 8011722:	2300      	movs	r3, #0
 8011724:	4620      	mov	r0, r4
 8011726:	4629      	mov	r1, r5
 8011728:	f7ef f9f6 	bl	8000b18 <__aeabi_dcmpeq>
 801172c:	2800      	cmp	r0, #0
 801172e:	d046      	beq.n	80117be <pow+0xee>
 8011730:	2301      	movs	r3, #1
 8011732:	9302      	str	r3, [sp, #8]
 8011734:	4b96      	ldr	r3, [pc, #600]	; (8011990 <pow+0x2c0>)
 8011736:	9303      	str	r3, [sp, #12]
 8011738:	4b96      	ldr	r3, [pc, #600]	; (8011994 <pow+0x2c4>)
 801173a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801173e:	2200      	movs	r2, #0
 8011740:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011744:	9b00      	ldr	r3, [sp, #0]
 8011746:	2b02      	cmp	r3, #2
 8011748:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801174c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011750:	d033      	beq.n	80117ba <pow+0xea>
 8011752:	a802      	add	r0, sp, #8
 8011754:	f000 ff87 	bl	8012666 <matherr>
 8011758:	bb48      	cbnz	r0, 80117ae <pow+0xde>
 801175a:	e05d      	b.n	8011818 <pow+0x148>
 801175c:	f04f 0a00 	mov.w	sl, #0
 8011760:	f04f 0b00 	mov.w	fp, #0
 8011764:	4652      	mov	r2, sl
 8011766:	465b      	mov	r3, fp
 8011768:	4630      	mov	r0, r6
 801176a:	4639      	mov	r1, r7
 801176c:	f7ef f9d4 	bl	8000b18 <__aeabi_dcmpeq>
 8011770:	ec4b ab19 	vmov	d9, sl, fp
 8011774:	2800      	cmp	r0, #0
 8011776:	d054      	beq.n	8011822 <pow+0x152>
 8011778:	4652      	mov	r2, sl
 801177a:	465b      	mov	r3, fp
 801177c:	4620      	mov	r0, r4
 801177e:	4629      	mov	r1, r5
 8011780:	f7ef f9ca 	bl	8000b18 <__aeabi_dcmpeq>
 8011784:	4680      	mov	r8, r0
 8011786:	b318      	cbz	r0, 80117d0 <pow+0x100>
 8011788:	2301      	movs	r3, #1
 801178a:	9302      	str	r3, [sp, #8]
 801178c:	4b80      	ldr	r3, [pc, #512]	; (8011990 <pow+0x2c0>)
 801178e:	9303      	str	r3, [sp, #12]
 8011790:	9b01      	ldr	r3, [sp, #4]
 8011792:	930a      	str	r3, [sp, #40]	; 0x28
 8011794:	9b00      	ldr	r3, [sp, #0]
 8011796:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801179a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801179e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d0d5      	beq.n	8011752 <pow+0x82>
 80117a6:	4b7b      	ldr	r3, [pc, #492]	; (8011994 <pow+0x2c4>)
 80117a8:	2200      	movs	r2, #0
 80117aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80117ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117b0:	b11b      	cbz	r3, 80117ba <pow+0xea>
 80117b2:	f7fd facb 	bl	800ed4c <__errno>
 80117b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117b8:	6003      	str	r3, [r0, #0]
 80117ba:	ed9d 8b08 	vldr	d8, [sp, #32]
 80117be:	eeb0 0a48 	vmov.f32	s0, s16
 80117c2:	eef0 0a68 	vmov.f32	s1, s17
 80117c6:	b00d      	add	sp, #52	; 0x34
 80117c8:	ecbd 8b04 	vpop	{d8-d9}
 80117cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d0:	ec45 4b10 	vmov	d0, r4, r5
 80117d4:	f000 ff3f 	bl	8012656 <finite>
 80117d8:	2800      	cmp	r0, #0
 80117da:	d0f0      	beq.n	80117be <pow+0xee>
 80117dc:	4652      	mov	r2, sl
 80117de:	465b      	mov	r3, fp
 80117e0:	4620      	mov	r0, r4
 80117e2:	4629      	mov	r1, r5
 80117e4:	f7ef f9a2 	bl	8000b2c <__aeabi_dcmplt>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	d0e8      	beq.n	80117be <pow+0xee>
 80117ec:	2301      	movs	r3, #1
 80117ee:	9302      	str	r3, [sp, #8]
 80117f0:	4b67      	ldr	r3, [pc, #412]	; (8011990 <pow+0x2c0>)
 80117f2:	9303      	str	r3, [sp, #12]
 80117f4:	f999 3000 	ldrsb.w	r3, [r9]
 80117f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80117fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011800:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011804:	b913      	cbnz	r3, 801180c <pow+0x13c>
 8011806:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801180a:	e7a2      	b.n	8011752 <pow+0x82>
 801180c:	4962      	ldr	r1, [pc, #392]	; (8011998 <pow+0x2c8>)
 801180e:	2000      	movs	r0, #0
 8011810:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011814:	2b02      	cmp	r3, #2
 8011816:	d19c      	bne.n	8011752 <pow+0x82>
 8011818:	f7fd fa98 	bl	800ed4c <__errno>
 801181c:	2321      	movs	r3, #33	; 0x21
 801181e:	6003      	str	r3, [r0, #0]
 8011820:	e7c5      	b.n	80117ae <pow+0xde>
 8011822:	eeb0 0a48 	vmov.f32	s0, s16
 8011826:	eef0 0a68 	vmov.f32	s1, s17
 801182a:	f000 ff14 	bl	8012656 <finite>
 801182e:	9000      	str	r0, [sp, #0]
 8011830:	2800      	cmp	r0, #0
 8011832:	f040 8081 	bne.w	8011938 <pow+0x268>
 8011836:	ec47 6b10 	vmov	d0, r6, r7
 801183a:	f000 ff0c 	bl	8012656 <finite>
 801183e:	2800      	cmp	r0, #0
 8011840:	d07a      	beq.n	8011938 <pow+0x268>
 8011842:	ec45 4b10 	vmov	d0, r4, r5
 8011846:	f000 ff06 	bl	8012656 <finite>
 801184a:	2800      	cmp	r0, #0
 801184c:	d074      	beq.n	8011938 <pow+0x268>
 801184e:	ec53 2b18 	vmov	r2, r3, d8
 8011852:	ee18 0a10 	vmov	r0, s16
 8011856:	4619      	mov	r1, r3
 8011858:	f7ef f990 	bl	8000b7c <__aeabi_dcmpun>
 801185c:	f999 9000 	ldrsb.w	r9, [r9]
 8011860:	4b4b      	ldr	r3, [pc, #300]	; (8011990 <pow+0x2c0>)
 8011862:	b1b0      	cbz	r0, 8011892 <pow+0x1c2>
 8011864:	2201      	movs	r2, #1
 8011866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801186a:	9b00      	ldr	r3, [sp, #0]
 801186c:	930a      	str	r3, [sp, #40]	; 0x28
 801186e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011872:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011876:	f1b9 0f00 	cmp.w	r9, #0
 801187a:	d0c4      	beq.n	8011806 <pow+0x136>
 801187c:	4652      	mov	r2, sl
 801187e:	465b      	mov	r3, fp
 8011880:	4650      	mov	r0, sl
 8011882:	4659      	mov	r1, fp
 8011884:	f7ef f80a 	bl	800089c <__aeabi_ddiv>
 8011888:	f1b9 0f02 	cmp.w	r9, #2
 801188c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011890:	e7c1      	b.n	8011816 <pow+0x146>
 8011892:	2203      	movs	r2, #3
 8011894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011898:	900a      	str	r0, [sp, #40]	; 0x28
 801189a:	4629      	mov	r1, r5
 801189c:	4620      	mov	r0, r4
 801189e:	2200      	movs	r2, #0
 80118a0:	4b3e      	ldr	r3, [pc, #248]	; (801199c <pow+0x2cc>)
 80118a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80118a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80118aa:	f7ee fecd 	bl	8000648 <__aeabi_dmul>
 80118ae:	4604      	mov	r4, r0
 80118b0:	460d      	mov	r5, r1
 80118b2:	f1b9 0f00 	cmp.w	r9, #0
 80118b6:	d124      	bne.n	8011902 <pow+0x232>
 80118b8:	4b39      	ldr	r3, [pc, #228]	; (80119a0 <pow+0x2d0>)
 80118ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80118be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80118c2:	4630      	mov	r0, r6
 80118c4:	4652      	mov	r2, sl
 80118c6:	465b      	mov	r3, fp
 80118c8:	4639      	mov	r1, r7
 80118ca:	f7ef f92f 	bl	8000b2c <__aeabi_dcmplt>
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d056      	beq.n	8011980 <pow+0x2b0>
 80118d2:	ec45 4b10 	vmov	d0, r4, r5
 80118d6:	f000 fed3 	bl	8012680 <rint>
 80118da:	4622      	mov	r2, r4
 80118dc:	462b      	mov	r3, r5
 80118de:	ec51 0b10 	vmov	r0, r1, d0
 80118e2:	f7ef f919 	bl	8000b18 <__aeabi_dcmpeq>
 80118e6:	b920      	cbnz	r0, 80118f2 <pow+0x222>
 80118e8:	4b2e      	ldr	r3, [pc, #184]	; (80119a4 <pow+0x2d4>)
 80118ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80118ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80118f2:	f998 3000 	ldrsb.w	r3, [r8]
 80118f6:	2b02      	cmp	r3, #2
 80118f8:	d142      	bne.n	8011980 <pow+0x2b0>
 80118fa:	f7fd fa27 	bl	800ed4c <__errno>
 80118fe:	2322      	movs	r3, #34	; 0x22
 8011900:	e78d      	b.n	801181e <pow+0x14e>
 8011902:	4b29      	ldr	r3, [pc, #164]	; (80119a8 <pow+0x2d8>)
 8011904:	2200      	movs	r2, #0
 8011906:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801190a:	4630      	mov	r0, r6
 801190c:	4652      	mov	r2, sl
 801190e:	465b      	mov	r3, fp
 8011910:	4639      	mov	r1, r7
 8011912:	f7ef f90b 	bl	8000b2c <__aeabi_dcmplt>
 8011916:	2800      	cmp	r0, #0
 8011918:	d0eb      	beq.n	80118f2 <pow+0x222>
 801191a:	ec45 4b10 	vmov	d0, r4, r5
 801191e:	f000 feaf 	bl	8012680 <rint>
 8011922:	4622      	mov	r2, r4
 8011924:	462b      	mov	r3, r5
 8011926:	ec51 0b10 	vmov	r0, r1, d0
 801192a:	f7ef f8f5 	bl	8000b18 <__aeabi_dcmpeq>
 801192e:	2800      	cmp	r0, #0
 8011930:	d1df      	bne.n	80118f2 <pow+0x222>
 8011932:	2200      	movs	r2, #0
 8011934:	4b18      	ldr	r3, [pc, #96]	; (8011998 <pow+0x2c8>)
 8011936:	e7da      	b.n	80118ee <pow+0x21e>
 8011938:	2200      	movs	r2, #0
 801193a:	2300      	movs	r3, #0
 801193c:	ec51 0b18 	vmov	r0, r1, d8
 8011940:	f7ef f8ea 	bl	8000b18 <__aeabi_dcmpeq>
 8011944:	2800      	cmp	r0, #0
 8011946:	f43f af3a 	beq.w	80117be <pow+0xee>
 801194a:	ec47 6b10 	vmov	d0, r6, r7
 801194e:	f000 fe82 	bl	8012656 <finite>
 8011952:	2800      	cmp	r0, #0
 8011954:	f43f af33 	beq.w	80117be <pow+0xee>
 8011958:	ec45 4b10 	vmov	d0, r4, r5
 801195c:	f000 fe7b 	bl	8012656 <finite>
 8011960:	2800      	cmp	r0, #0
 8011962:	f43f af2c 	beq.w	80117be <pow+0xee>
 8011966:	2304      	movs	r3, #4
 8011968:	9302      	str	r3, [sp, #8]
 801196a:	4b09      	ldr	r3, [pc, #36]	; (8011990 <pow+0x2c0>)
 801196c:	9303      	str	r3, [sp, #12]
 801196e:	2300      	movs	r3, #0
 8011970:	930a      	str	r3, [sp, #40]	; 0x28
 8011972:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011976:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801197a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801197e:	e7b8      	b.n	80118f2 <pow+0x222>
 8011980:	a802      	add	r0, sp, #8
 8011982:	f000 fe70 	bl	8012666 <matherr>
 8011986:	2800      	cmp	r0, #0
 8011988:	f47f af11 	bne.w	80117ae <pow+0xde>
 801198c:	e7b5      	b.n	80118fa <pow+0x22a>
 801198e:	bf00      	nop
 8011990:	08014036 	.word	0x08014036
 8011994:	3ff00000 	.word	0x3ff00000
 8011998:	fff00000 	.word	0xfff00000
 801199c:	3fe00000 	.word	0x3fe00000
 80119a0:	47efffff 	.word	0x47efffff
 80119a4:	c7efffff 	.word	0xc7efffff
 80119a8:	7ff00000 	.word	0x7ff00000
 80119ac:	20001e7c 	.word	0x20001e7c

080119b0 <__ieee754_log10>:
 80119b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119b4:	ec55 4b10 	vmov	r4, r5, d0
 80119b8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80119bc:	462b      	mov	r3, r5
 80119be:	da2f      	bge.n	8011a20 <__ieee754_log10+0x70>
 80119c0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80119c4:	4322      	orrs	r2, r4
 80119c6:	d10a      	bne.n	80119de <__ieee754_log10+0x2e>
 80119c8:	493b      	ldr	r1, [pc, #236]	; (8011ab8 <__ieee754_log10+0x108>)
 80119ca:	2200      	movs	r2, #0
 80119cc:	2300      	movs	r3, #0
 80119ce:	2000      	movs	r0, #0
 80119d0:	f7ee ff64 	bl	800089c <__aeabi_ddiv>
 80119d4:	ec41 0b10 	vmov	d0, r0, r1
 80119d8:	b003      	add	sp, #12
 80119da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119de:	2d00      	cmp	r5, #0
 80119e0:	da08      	bge.n	80119f4 <__ieee754_log10+0x44>
 80119e2:	ee10 2a10 	vmov	r2, s0
 80119e6:	4620      	mov	r0, r4
 80119e8:	4629      	mov	r1, r5
 80119ea:	f7ee fc75 	bl	80002d8 <__aeabi_dsub>
 80119ee:	2200      	movs	r2, #0
 80119f0:	2300      	movs	r3, #0
 80119f2:	e7ed      	b.n	80119d0 <__ieee754_log10+0x20>
 80119f4:	2200      	movs	r2, #0
 80119f6:	4b31      	ldr	r3, [pc, #196]	; (8011abc <__ieee754_log10+0x10c>)
 80119f8:	4629      	mov	r1, r5
 80119fa:	ee10 0a10 	vmov	r0, s0
 80119fe:	f7ee fe23 	bl	8000648 <__aeabi_dmul>
 8011a02:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011a06:	4604      	mov	r4, r0
 8011a08:	460d      	mov	r5, r1
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	492c      	ldr	r1, [pc, #176]	; (8011ac0 <__ieee754_log10+0x110>)
 8011a0e:	428b      	cmp	r3, r1
 8011a10:	dd08      	ble.n	8011a24 <__ieee754_log10+0x74>
 8011a12:	4622      	mov	r2, r4
 8011a14:	462b      	mov	r3, r5
 8011a16:	4620      	mov	r0, r4
 8011a18:	4629      	mov	r1, r5
 8011a1a:	f7ee fc5f 	bl	80002dc <__adddf3>
 8011a1e:	e7d9      	b.n	80119d4 <__ieee754_log10+0x24>
 8011a20:	2200      	movs	r2, #0
 8011a22:	e7f3      	b.n	8011a0c <__ieee754_log10+0x5c>
 8011a24:	1518      	asrs	r0, r3, #20
 8011a26:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011a2a:	4410      	add	r0, r2
 8011a2c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8011a30:	4448      	add	r0, r9
 8011a32:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8011a36:	f7ee fd9d 	bl	8000574 <__aeabi_i2d>
 8011a3a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8011a3e:	3303      	adds	r3, #3
 8011a40:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8011a44:	ec45 4b10 	vmov	d0, r4, r5
 8011a48:	4606      	mov	r6, r0
 8011a4a:	460f      	mov	r7, r1
 8011a4c:	f000 ff14 	bl	8012878 <__ieee754_log>
 8011a50:	a313      	add	r3, pc, #76	; (adr r3, 8011aa0 <__ieee754_log10+0xf0>)
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	4630      	mov	r0, r6
 8011a58:	4639      	mov	r1, r7
 8011a5a:	ed8d 0b00 	vstr	d0, [sp]
 8011a5e:	f7ee fdf3 	bl	8000648 <__aeabi_dmul>
 8011a62:	ed9d 0b00 	vldr	d0, [sp]
 8011a66:	4604      	mov	r4, r0
 8011a68:	460d      	mov	r5, r1
 8011a6a:	a30f      	add	r3, pc, #60	; (adr r3, 8011aa8 <__ieee754_log10+0xf8>)
 8011a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a70:	ec51 0b10 	vmov	r0, r1, d0
 8011a74:	f7ee fde8 	bl	8000648 <__aeabi_dmul>
 8011a78:	4602      	mov	r2, r0
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	4629      	mov	r1, r5
 8011a80:	f7ee fc2c 	bl	80002dc <__adddf3>
 8011a84:	a30a      	add	r3, pc, #40	; (adr r3, 8011ab0 <__ieee754_log10+0x100>)
 8011a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	460d      	mov	r5, r1
 8011a8e:	4630      	mov	r0, r6
 8011a90:	4639      	mov	r1, r7
 8011a92:	f7ee fdd9 	bl	8000648 <__aeabi_dmul>
 8011a96:	4602      	mov	r2, r0
 8011a98:	460b      	mov	r3, r1
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	4629      	mov	r1, r5
 8011a9e:	e7bc      	b.n	8011a1a <__ieee754_log10+0x6a>
 8011aa0:	11f12b36 	.word	0x11f12b36
 8011aa4:	3d59fef3 	.word	0x3d59fef3
 8011aa8:	1526e50e 	.word	0x1526e50e
 8011aac:	3fdbcb7b 	.word	0x3fdbcb7b
 8011ab0:	509f6000 	.word	0x509f6000
 8011ab4:	3fd34413 	.word	0x3fd34413
 8011ab8:	c3500000 	.word	0xc3500000
 8011abc:	43500000 	.word	0x43500000
 8011ac0:	7fefffff 	.word	0x7fefffff
 8011ac4:	00000000 	.word	0x00000000

08011ac8 <__ieee754_pow>:
 8011ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011acc:	b091      	sub	sp, #68	; 0x44
 8011ace:	ed8d 1b00 	vstr	d1, [sp]
 8011ad2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011ad6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011ada:	ea58 0302 	orrs.w	r3, r8, r2
 8011ade:	ec57 6b10 	vmov	r6, r7, d0
 8011ae2:	f000 84be 	beq.w	8012462 <__ieee754_pow+0x99a>
 8011ae6:	4b7a      	ldr	r3, [pc, #488]	; (8011cd0 <__ieee754_pow+0x208>)
 8011ae8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011aec:	429c      	cmp	r4, r3
 8011aee:	463d      	mov	r5, r7
 8011af0:	ee10 aa10 	vmov	sl, s0
 8011af4:	dc09      	bgt.n	8011b0a <__ieee754_pow+0x42>
 8011af6:	d103      	bne.n	8011b00 <__ieee754_pow+0x38>
 8011af8:	b93e      	cbnz	r6, 8011b0a <__ieee754_pow+0x42>
 8011afa:	45a0      	cmp	r8, r4
 8011afc:	dc0d      	bgt.n	8011b1a <__ieee754_pow+0x52>
 8011afe:	e001      	b.n	8011b04 <__ieee754_pow+0x3c>
 8011b00:	4598      	cmp	r8, r3
 8011b02:	dc02      	bgt.n	8011b0a <__ieee754_pow+0x42>
 8011b04:	4598      	cmp	r8, r3
 8011b06:	d10e      	bne.n	8011b26 <__ieee754_pow+0x5e>
 8011b08:	b16a      	cbz	r2, 8011b26 <__ieee754_pow+0x5e>
 8011b0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011b0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011b12:	ea54 030a 	orrs.w	r3, r4, sl
 8011b16:	f000 84a4 	beq.w	8012462 <__ieee754_pow+0x99a>
 8011b1a:	486e      	ldr	r0, [pc, #440]	; (8011cd4 <__ieee754_pow+0x20c>)
 8011b1c:	b011      	add	sp, #68	; 0x44
 8011b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b22:	f000 bda5 	b.w	8012670 <nan>
 8011b26:	2d00      	cmp	r5, #0
 8011b28:	da53      	bge.n	8011bd2 <__ieee754_pow+0x10a>
 8011b2a:	4b6b      	ldr	r3, [pc, #428]	; (8011cd8 <__ieee754_pow+0x210>)
 8011b2c:	4598      	cmp	r8, r3
 8011b2e:	dc4d      	bgt.n	8011bcc <__ieee754_pow+0x104>
 8011b30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011b34:	4598      	cmp	r8, r3
 8011b36:	dd4c      	ble.n	8011bd2 <__ieee754_pow+0x10a>
 8011b38:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011b3c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011b40:	2b14      	cmp	r3, #20
 8011b42:	dd26      	ble.n	8011b92 <__ieee754_pow+0xca>
 8011b44:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011b48:	fa22 f103 	lsr.w	r1, r2, r3
 8011b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8011b50:	4293      	cmp	r3, r2
 8011b52:	d13e      	bne.n	8011bd2 <__ieee754_pow+0x10a>
 8011b54:	f001 0101 	and.w	r1, r1, #1
 8011b58:	f1c1 0b02 	rsb	fp, r1, #2
 8011b5c:	2a00      	cmp	r2, #0
 8011b5e:	d15b      	bne.n	8011c18 <__ieee754_pow+0x150>
 8011b60:	4b5b      	ldr	r3, [pc, #364]	; (8011cd0 <__ieee754_pow+0x208>)
 8011b62:	4598      	cmp	r8, r3
 8011b64:	d124      	bne.n	8011bb0 <__ieee754_pow+0xe8>
 8011b66:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011b6a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011b6e:	ea53 030a 	orrs.w	r3, r3, sl
 8011b72:	f000 8476 	beq.w	8012462 <__ieee754_pow+0x99a>
 8011b76:	4b59      	ldr	r3, [pc, #356]	; (8011cdc <__ieee754_pow+0x214>)
 8011b78:	429c      	cmp	r4, r3
 8011b7a:	dd2d      	ble.n	8011bd8 <__ieee754_pow+0x110>
 8011b7c:	f1b9 0f00 	cmp.w	r9, #0
 8011b80:	f280 8473 	bge.w	801246a <__ieee754_pow+0x9a2>
 8011b84:	2000      	movs	r0, #0
 8011b86:	2100      	movs	r1, #0
 8011b88:	ec41 0b10 	vmov	d0, r0, r1
 8011b8c:	b011      	add	sp, #68	; 0x44
 8011b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b92:	2a00      	cmp	r2, #0
 8011b94:	d13e      	bne.n	8011c14 <__ieee754_pow+0x14c>
 8011b96:	f1c3 0314 	rsb	r3, r3, #20
 8011b9a:	fa48 f103 	asr.w	r1, r8, r3
 8011b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8011ba2:	4543      	cmp	r3, r8
 8011ba4:	f040 8469 	bne.w	801247a <__ieee754_pow+0x9b2>
 8011ba8:	f001 0101 	and.w	r1, r1, #1
 8011bac:	f1c1 0b02 	rsb	fp, r1, #2
 8011bb0:	4b4b      	ldr	r3, [pc, #300]	; (8011ce0 <__ieee754_pow+0x218>)
 8011bb2:	4598      	cmp	r8, r3
 8011bb4:	d118      	bne.n	8011be8 <__ieee754_pow+0x120>
 8011bb6:	f1b9 0f00 	cmp.w	r9, #0
 8011bba:	f280 845a 	bge.w	8012472 <__ieee754_pow+0x9aa>
 8011bbe:	4948      	ldr	r1, [pc, #288]	; (8011ce0 <__ieee754_pow+0x218>)
 8011bc0:	4632      	mov	r2, r6
 8011bc2:	463b      	mov	r3, r7
 8011bc4:	2000      	movs	r0, #0
 8011bc6:	f7ee fe69 	bl	800089c <__aeabi_ddiv>
 8011bca:	e7dd      	b.n	8011b88 <__ieee754_pow+0xc0>
 8011bcc:	f04f 0b02 	mov.w	fp, #2
 8011bd0:	e7c4      	b.n	8011b5c <__ieee754_pow+0x94>
 8011bd2:	f04f 0b00 	mov.w	fp, #0
 8011bd6:	e7c1      	b.n	8011b5c <__ieee754_pow+0x94>
 8011bd8:	f1b9 0f00 	cmp.w	r9, #0
 8011bdc:	dad2      	bge.n	8011b84 <__ieee754_pow+0xbc>
 8011bde:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011be2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011be6:	e7cf      	b.n	8011b88 <__ieee754_pow+0xc0>
 8011be8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011bec:	d106      	bne.n	8011bfc <__ieee754_pow+0x134>
 8011bee:	4632      	mov	r2, r6
 8011bf0:	463b      	mov	r3, r7
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	f7ee fd27 	bl	8000648 <__aeabi_dmul>
 8011bfa:	e7c5      	b.n	8011b88 <__ieee754_pow+0xc0>
 8011bfc:	4b39      	ldr	r3, [pc, #228]	; (8011ce4 <__ieee754_pow+0x21c>)
 8011bfe:	4599      	cmp	r9, r3
 8011c00:	d10a      	bne.n	8011c18 <__ieee754_pow+0x150>
 8011c02:	2d00      	cmp	r5, #0
 8011c04:	db08      	blt.n	8011c18 <__ieee754_pow+0x150>
 8011c06:	ec47 6b10 	vmov	d0, r6, r7
 8011c0a:	b011      	add	sp, #68	; 0x44
 8011c0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c10:	f000 bc68 	b.w	80124e4 <__ieee754_sqrt>
 8011c14:	f04f 0b00 	mov.w	fp, #0
 8011c18:	ec47 6b10 	vmov	d0, r6, r7
 8011c1c:	f000 fd12 	bl	8012644 <fabs>
 8011c20:	ec51 0b10 	vmov	r0, r1, d0
 8011c24:	f1ba 0f00 	cmp.w	sl, #0
 8011c28:	d127      	bne.n	8011c7a <__ieee754_pow+0x1b2>
 8011c2a:	b124      	cbz	r4, 8011c36 <__ieee754_pow+0x16e>
 8011c2c:	4b2c      	ldr	r3, [pc, #176]	; (8011ce0 <__ieee754_pow+0x218>)
 8011c2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d121      	bne.n	8011c7a <__ieee754_pow+0x1b2>
 8011c36:	f1b9 0f00 	cmp.w	r9, #0
 8011c3a:	da05      	bge.n	8011c48 <__ieee754_pow+0x180>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	460b      	mov	r3, r1
 8011c40:	2000      	movs	r0, #0
 8011c42:	4927      	ldr	r1, [pc, #156]	; (8011ce0 <__ieee754_pow+0x218>)
 8011c44:	f7ee fe2a 	bl	800089c <__aeabi_ddiv>
 8011c48:	2d00      	cmp	r5, #0
 8011c4a:	da9d      	bge.n	8011b88 <__ieee754_pow+0xc0>
 8011c4c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011c50:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011c54:	ea54 030b 	orrs.w	r3, r4, fp
 8011c58:	d108      	bne.n	8011c6c <__ieee754_pow+0x1a4>
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	4610      	mov	r0, r2
 8011c60:	4619      	mov	r1, r3
 8011c62:	f7ee fb39 	bl	80002d8 <__aeabi_dsub>
 8011c66:	4602      	mov	r2, r0
 8011c68:	460b      	mov	r3, r1
 8011c6a:	e7ac      	b.n	8011bc6 <__ieee754_pow+0xfe>
 8011c6c:	f1bb 0f01 	cmp.w	fp, #1
 8011c70:	d18a      	bne.n	8011b88 <__ieee754_pow+0xc0>
 8011c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c76:	4619      	mov	r1, r3
 8011c78:	e786      	b.n	8011b88 <__ieee754_pow+0xc0>
 8011c7a:	0fed      	lsrs	r5, r5, #31
 8011c7c:	1e6b      	subs	r3, r5, #1
 8011c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8011c80:	ea5b 0303 	orrs.w	r3, fp, r3
 8011c84:	d102      	bne.n	8011c8c <__ieee754_pow+0x1c4>
 8011c86:	4632      	mov	r2, r6
 8011c88:	463b      	mov	r3, r7
 8011c8a:	e7e8      	b.n	8011c5e <__ieee754_pow+0x196>
 8011c8c:	4b16      	ldr	r3, [pc, #88]	; (8011ce8 <__ieee754_pow+0x220>)
 8011c8e:	4598      	cmp	r8, r3
 8011c90:	f340 80fe 	ble.w	8011e90 <__ieee754_pow+0x3c8>
 8011c94:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011c98:	4598      	cmp	r8, r3
 8011c9a:	dd0a      	ble.n	8011cb2 <__ieee754_pow+0x1ea>
 8011c9c:	4b0f      	ldr	r3, [pc, #60]	; (8011cdc <__ieee754_pow+0x214>)
 8011c9e:	429c      	cmp	r4, r3
 8011ca0:	dc0d      	bgt.n	8011cbe <__ieee754_pow+0x1f6>
 8011ca2:	f1b9 0f00 	cmp.w	r9, #0
 8011ca6:	f6bf af6d 	bge.w	8011b84 <__ieee754_pow+0xbc>
 8011caa:	a307      	add	r3, pc, #28	; (adr r3, 8011cc8 <__ieee754_pow+0x200>)
 8011cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb0:	e79f      	b.n	8011bf2 <__ieee754_pow+0x12a>
 8011cb2:	4b0e      	ldr	r3, [pc, #56]	; (8011cec <__ieee754_pow+0x224>)
 8011cb4:	429c      	cmp	r4, r3
 8011cb6:	ddf4      	ble.n	8011ca2 <__ieee754_pow+0x1da>
 8011cb8:	4b09      	ldr	r3, [pc, #36]	; (8011ce0 <__ieee754_pow+0x218>)
 8011cba:	429c      	cmp	r4, r3
 8011cbc:	dd18      	ble.n	8011cf0 <__ieee754_pow+0x228>
 8011cbe:	f1b9 0f00 	cmp.w	r9, #0
 8011cc2:	dcf2      	bgt.n	8011caa <__ieee754_pow+0x1e2>
 8011cc4:	e75e      	b.n	8011b84 <__ieee754_pow+0xbc>
 8011cc6:	bf00      	nop
 8011cc8:	8800759c 	.word	0x8800759c
 8011ccc:	7e37e43c 	.word	0x7e37e43c
 8011cd0:	7ff00000 	.word	0x7ff00000
 8011cd4:	08013f19 	.word	0x08013f19
 8011cd8:	433fffff 	.word	0x433fffff
 8011cdc:	3fefffff 	.word	0x3fefffff
 8011ce0:	3ff00000 	.word	0x3ff00000
 8011ce4:	3fe00000 	.word	0x3fe00000
 8011ce8:	41e00000 	.word	0x41e00000
 8011cec:	3feffffe 	.word	0x3feffffe
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	4b63      	ldr	r3, [pc, #396]	; (8011e80 <__ieee754_pow+0x3b8>)
 8011cf4:	f7ee faf0 	bl	80002d8 <__aeabi_dsub>
 8011cf8:	a355      	add	r3, pc, #340	; (adr r3, 8011e50 <__ieee754_pow+0x388>)
 8011cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfe:	4604      	mov	r4, r0
 8011d00:	460d      	mov	r5, r1
 8011d02:	f7ee fca1 	bl	8000648 <__aeabi_dmul>
 8011d06:	a354      	add	r3, pc, #336	; (adr r3, 8011e58 <__ieee754_pow+0x390>)
 8011d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0c:	4606      	mov	r6, r0
 8011d0e:	460f      	mov	r7, r1
 8011d10:	4620      	mov	r0, r4
 8011d12:	4629      	mov	r1, r5
 8011d14:	f7ee fc98 	bl	8000648 <__aeabi_dmul>
 8011d18:	2200      	movs	r2, #0
 8011d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d1e:	4b59      	ldr	r3, [pc, #356]	; (8011e84 <__ieee754_pow+0x3bc>)
 8011d20:	4620      	mov	r0, r4
 8011d22:	4629      	mov	r1, r5
 8011d24:	f7ee fc90 	bl	8000648 <__aeabi_dmul>
 8011d28:	4602      	mov	r2, r0
 8011d2a:	460b      	mov	r3, r1
 8011d2c:	a14c      	add	r1, pc, #304	; (adr r1, 8011e60 <__ieee754_pow+0x398>)
 8011d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d32:	f7ee fad1 	bl	80002d8 <__aeabi_dsub>
 8011d36:	4622      	mov	r2, r4
 8011d38:	462b      	mov	r3, r5
 8011d3a:	f7ee fc85 	bl	8000648 <__aeabi_dmul>
 8011d3e:	4602      	mov	r2, r0
 8011d40:	460b      	mov	r3, r1
 8011d42:	2000      	movs	r0, #0
 8011d44:	4950      	ldr	r1, [pc, #320]	; (8011e88 <__ieee754_pow+0x3c0>)
 8011d46:	f7ee fac7 	bl	80002d8 <__aeabi_dsub>
 8011d4a:	4622      	mov	r2, r4
 8011d4c:	462b      	mov	r3, r5
 8011d4e:	4680      	mov	r8, r0
 8011d50:	4689      	mov	r9, r1
 8011d52:	4620      	mov	r0, r4
 8011d54:	4629      	mov	r1, r5
 8011d56:	f7ee fc77 	bl	8000648 <__aeabi_dmul>
 8011d5a:	4602      	mov	r2, r0
 8011d5c:	460b      	mov	r3, r1
 8011d5e:	4640      	mov	r0, r8
 8011d60:	4649      	mov	r1, r9
 8011d62:	f7ee fc71 	bl	8000648 <__aeabi_dmul>
 8011d66:	a340      	add	r3, pc, #256	; (adr r3, 8011e68 <__ieee754_pow+0x3a0>)
 8011d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6c:	f7ee fc6c 	bl	8000648 <__aeabi_dmul>
 8011d70:	4602      	mov	r2, r0
 8011d72:	460b      	mov	r3, r1
 8011d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d78:	f7ee faae 	bl	80002d8 <__aeabi_dsub>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	460b      	mov	r3, r1
 8011d80:	4604      	mov	r4, r0
 8011d82:	460d      	mov	r5, r1
 8011d84:	4630      	mov	r0, r6
 8011d86:	4639      	mov	r1, r7
 8011d88:	f7ee faa8 	bl	80002dc <__adddf3>
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d92:	4632      	mov	r2, r6
 8011d94:	463b      	mov	r3, r7
 8011d96:	f7ee fa9f 	bl	80002d8 <__aeabi_dsub>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	4620      	mov	r0, r4
 8011da0:	4629      	mov	r1, r5
 8011da2:	f7ee fa99 	bl	80002d8 <__aeabi_dsub>
 8011da6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011da8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8011dac:	4313      	orrs	r3, r2
 8011dae:	4606      	mov	r6, r0
 8011db0:	460f      	mov	r7, r1
 8011db2:	f040 81eb 	bne.w	801218c <__ieee754_pow+0x6c4>
 8011db6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011e70 <__ieee754_pow+0x3a8>
 8011dba:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011dbe:	2400      	movs	r4, #0
 8011dc0:	4622      	mov	r2, r4
 8011dc2:	462b      	mov	r3, r5
 8011dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011dc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011dcc:	f7ee fa84 	bl	80002d8 <__aeabi_dsub>
 8011dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dd4:	f7ee fc38 	bl	8000648 <__aeabi_dmul>
 8011dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ddc:	4680      	mov	r8, r0
 8011dde:	4689      	mov	r9, r1
 8011de0:	4630      	mov	r0, r6
 8011de2:	4639      	mov	r1, r7
 8011de4:	f7ee fc30 	bl	8000648 <__aeabi_dmul>
 8011de8:	4602      	mov	r2, r0
 8011dea:	460b      	mov	r3, r1
 8011dec:	4640      	mov	r0, r8
 8011dee:	4649      	mov	r1, r9
 8011df0:	f7ee fa74 	bl	80002dc <__adddf3>
 8011df4:	4622      	mov	r2, r4
 8011df6:	462b      	mov	r3, r5
 8011df8:	4680      	mov	r8, r0
 8011dfa:	4689      	mov	r9, r1
 8011dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e00:	f7ee fc22 	bl	8000648 <__aeabi_dmul>
 8011e04:	460b      	mov	r3, r1
 8011e06:	4604      	mov	r4, r0
 8011e08:	460d      	mov	r5, r1
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	4649      	mov	r1, r9
 8011e0e:	4640      	mov	r0, r8
 8011e10:	e9cd 4500 	strd	r4, r5, [sp]
 8011e14:	f7ee fa62 	bl	80002dc <__adddf3>
 8011e18:	4b1c      	ldr	r3, [pc, #112]	; (8011e8c <__ieee754_pow+0x3c4>)
 8011e1a:	4299      	cmp	r1, r3
 8011e1c:	4606      	mov	r6, r0
 8011e1e:	460f      	mov	r7, r1
 8011e20:	468b      	mov	fp, r1
 8011e22:	f340 82f7 	ble.w	8012414 <__ieee754_pow+0x94c>
 8011e26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011e2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011e2e:	4303      	orrs	r3, r0
 8011e30:	f000 81ea 	beq.w	8012208 <__ieee754_pow+0x740>
 8011e34:	a310      	add	r3, pc, #64	; (adr r3, 8011e78 <__ieee754_pow+0x3b0>)
 8011e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e3e:	f7ee fc03 	bl	8000648 <__aeabi_dmul>
 8011e42:	a30d      	add	r3, pc, #52	; (adr r3, 8011e78 <__ieee754_pow+0x3b0>)
 8011e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e48:	e6d5      	b.n	8011bf6 <__ieee754_pow+0x12e>
 8011e4a:	bf00      	nop
 8011e4c:	f3af 8000 	nop.w
 8011e50:	60000000 	.word	0x60000000
 8011e54:	3ff71547 	.word	0x3ff71547
 8011e58:	f85ddf44 	.word	0xf85ddf44
 8011e5c:	3e54ae0b 	.word	0x3e54ae0b
 8011e60:	55555555 	.word	0x55555555
 8011e64:	3fd55555 	.word	0x3fd55555
 8011e68:	652b82fe 	.word	0x652b82fe
 8011e6c:	3ff71547 	.word	0x3ff71547
 8011e70:	00000000 	.word	0x00000000
 8011e74:	bff00000 	.word	0xbff00000
 8011e78:	8800759c 	.word	0x8800759c
 8011e7c:	7e37e43c 	.word	0x7e37e43c
 8011e80:	3ff00000 	.word	0x3ff00000
 8011e84:	3fd00000 	.word	0x3fd00000
 8011e88:	3fe00000 	.word	0x3fe00000
 8011e8c:	408fffff 	.word	0x408fffff
 8011e90:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011e94:	f04f 0200 	mov.w	r2, #0
 8011e98:	da05      	bge.n	8011ea6 <__ieee754_pow+0x3de>
 8011e9a:	4bd3      	ldr	r3, [pc, #844]	; (80121e8 <__ieee754_pow+0x720>)
 8011e9c:	f7ee fbd4 	bl	8000648 <__aeabi_dmul>
 8011ea0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011ea4:	460c      	mov	r4, r1
 8011ea6:	1523      	asrs	r3, r4, #20
 8011ea8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011eac:	4413      	add	r3, r2
 8011eae:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb0:	4bce      	ldr	r3, [pc, #824]	; (80121ec <__ieee754_pow+0x724>)
 8011eb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011eb6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011eba:	429c      	cmp	r4, r3
 8011ebc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011ec0:	dd08      	ble.n	8011ed4 <__ieee754_pow+0x40c>
 8011ec2:	4bcb      	ldr	r3, [pc, #812]	; (80121f0 <__ieee754_pow+0x728>)
 8011ec4:	429c      	cmp	r4, r3
 8011ec6:	f340 815e 	ble.w	8012186 <__ieee754_pow+0x6be>
 8011eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ecc:	3301      	adds	r3, #1
 8011ece:	9309      	str	r3, [sp, #36]	; 0x24
 8011ed0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011ed4:	f04f 0a00 	mov.w	sl, #0
 8011ed8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011edc:	930c      	str	r3, [sp, #48]	; 0x30
 8011ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ee0:	4bc4      	ldr	r3, [pc, #784]	; (80121f4 <__ieee754_pow+0x72c>)
 8011ee2:	4413      	add	r3, r2
 8011ee4:	ed93 7b00 	vldr	d7, [r3]
 8011ee8:	4629      	mov	r1, r5
 8011eea:	ec53 2b17 	vmov	r2, r3, d7
 8011eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011ef2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011ef6:	f7ee f9ef 	bl	80002d8 <__aeabi_dsub>
 8011efa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011efe:	4606      	mov	r6, r0
 8011f00:	460f      	mov	r7, r1
 8011f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f06:	f7ee f9e9 	bl	80002dc <__adddf3>
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	2000      	movs	r0, #0
 8011f10:	49b9      	ldr	r1, [pc, #740]	; (80121f8 <__ieee754_pow+0x730>)
 8011f12:	f7ee fcc3 	bl	800089c <__aeabi_ddiv>
 8011f16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	4630      	mov	r0, r6
 8011f20:	4639      	mov	r1, r7
 8011f22:	f7ee fb91 	bl	8000648 <__aeabi_dmul>
 8011f26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f2a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011f2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011f32:	2300      	movs	r3, #0
 8011f34:	9302      	str	r3, [sp, #8]
 8011f36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011f3a:	106d      	asrs	r5, r5, #1
 8011f3c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011f40:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011f44:	2200      	movs	r2, #0
 8011f46:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011f4a:	4640      	mov	r0, r8
 8011f4c:	4649      	mov	r1, r9
 8011f4e:	4614      	mov	r4, r2
 8011f50:	461d      	mov	r5, r3
 8011f52:	f7ee fb79 	bl	8000648 <__aeabi_dmul>
 8011f56:	4602      	mov	r2, r0
 8011f58:	460b      	mov	r3, r1
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	4639      	mov	r1, r7
 8011f5e:	f7ee f9bb 	bl	80002d8 <__aeabi_dsub>
 8011f62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f66:	4606      	mov	r6, r0
 8011f68:	460f      	mov	r7, r1
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	4629      	mov	r1, r5
 8011f6e:	f7ee f9b3 	bl	80002d8 <__aeabi_dsub>
 8011f72:	4602      	mov	r2, r0
 8011f74:	460b      	mov	r3, r1
 8011f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011f7a:	f7ee f9ad 	bl	80002d8 <__aeabi_dsub>
 8011f7e:	4642      	mov	r2, r8
 8011f80:	464b      	mov	r3, r9
 8011f82:	f7ee fb61 	bl	8000648 <__aeabi_dmul>
 8011f86:	4602      	mov	r2, r0
 8011f88:	460b      	mov	r3, r1
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	4639      	mov	r1, r7
 8011f8e:	f7ee f9a3 	bl	80002d8 <__aeabi_dsub>
 8011f92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011f96:	f7ee fb57 	bl	8000648 <__aeabi_dmul>
 8011f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011fa2:	4610      	mov	r0, r2
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	f7ee fb4f 	bl	8000648 <__aeabi_dmul>
 8011faa:	a37b      	add	r3, pc, #492	; (adr r3, 8012198 <__ieee754_pow+0x6d0>)
 8011fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb0:	4604      	mov	r4, r0
 8011fb2:	460d      	mov	r5, r1
 8011fb4:	f7ee fb48 	bl	8000648 <__aeabi_dmul>
 8011fb8:	a379      	add	r3, pc, #484	; (adr r3, 80121a0 <__ieee754_pow+0x6d8>)
 8011fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fbe:	f7ee f98d 	bl	80002dc <__adddf3>
 8011fc2:	4622      	mov	r2, r4
 8011fc4:	462b      	mov	r3, r5
 8011fc6:	f7ee fb3f 	bl	8000648 <__aeabi_dmul>
 8011fca:	a377      	add	r3, pc, #476	; (adr r3, 80121a8 <__ieee754_pow+0x6e0>)
 8011fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd0:	f7ee f984 	bl	80002dc <__adddf3>
 8011fd4:	4622      	mov	r2, r4
 8011fd6:	462b      	mov	r3, r5
 8011fd8:	f7ee fb36 	bl	8000648 <__aeabi_dmul>
 8011fdc:	a374      	add	r3, pc, #464	; (adr r3, 80121b0 <__ieee754_pow+0x6e8>)
 8011fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe2:	f7ee f97b 	bl	80002dc <__adddf3>
 8011fe6:	4622      	mov	r2, r4
 8011fe8:	462b      	mov	r3, r5
 8011fea:	f7ee fb2d 	bl	8000648 <__aeabi_dmul>
 8011fee:	a372      	add	r3, pc, #456	; (adr r3, 80121b8 <__ieee754_pow+0x6f0>)
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	f7ee f972 	bl	80002dc <__adddf3>
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	462b      	mov	r3, r5
 8011ffc:	f7ee fb24 	bl	8000648 <__aeabi_dmul>
 8012000:	a36f      	add	r3, pc, #444	; (adr r3, 80121c0 <__ieee754_pow+0x6f8>)
 8012002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012006:	f7ee f969 	bl	80002dc <__adddf3>
 801200a:	4622      	mov	r2, r4
 801200c:	4606      	mov	r6, r0
 801200e:	460f      	mov	r7, r1
 8012010:	462b      	mov	r3, r5
 8012012:	4620      	mov	r0, r4
 8012014:	4629      	mov	r1, r5
 8012016:	f7ee fb17 	bl	8000648 <__aeabi_dmul>
 801201a:	4602      	mov	r2, r0
 801201c:	460b      	mov	r3, r1
 801201e:	4630      	mov	r0, r6
 8012020:	4639      	mov	r1, r7
 8012022:	f7ee fb11 	bl	8000648 <__aeabi_dmul>
 8012026:	4642      	mov	r2, r8
 8012028:	4604      	mov	r4, r0
 801202a:	460d      	mov	r5, r1
 801202c:	464b      	mov	r3, r9
 801202e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012032:	f7ee f953 	bl	80002dc <__adddf3>
 8012036:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801203a:	f7ee fb05 	bl	8000648 <__aeabi_dmul>
 801203e:	4622      	mov	r2, r4
 8012040:	462b      	mov	r3, r5
 8012042:	f7ee f94b 	bl	80002dc <__adddf3>
 8012046:	4642      	mov	r2, r8
 8012048:	4606      	mov	r6, r0
 801204a:	460f      	mov	r7, r1
 801204c:	464b      	mov	r3, r9
 801204e:	4640      	mov	r0, r8
 8012050:	4649      	mov	r1, r9
 8012052:	f7ee faf9 	bl	8000648 <__aeabi_dmul>
 8012056:	2200      	movs	r2, #0
 8012058:	4b68      	ldr	r3, [pc, #416]	; (80121fc <__ieee754_pow+0x734>)
 801205a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801205e:	f7ee f93d 	bl	80002dc <__adddf3>
 8012062:	4632      	mov	r2, r6
 8012064:	463b      	mov	r3, r7
 8012066:	f7ee f939 	bl	80002dc <__adddf3>
 801206a:	9802      	ldr	r0, [sp, #8]
 801206c:	460d      	mov	r5, r1
 801206e:	4604      	mov	r4, r0
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	4640      	mov	r0, r8
 8012076:	4649      	mov	r1, r9
 8012078:	f7ee fae6 	bl	8000648 <__aeabi_dmul>
 801207c:	2200      	movs	r2, #0
 801207e:	4680      	mov	r8, r0
 8012080:	4689      	mov	r9, r1
 8012082:	4b5e      	ldr	r3, [pc, #376]	; (80121fc <__ieee754_pow+0x734>)
 8012084:	4620      	mov	r0, r4
 8012086:	4629      	mov	r1, r5
 8012088:	f7ee f926 	bl	80002d8 <__aeabi_dsub>
 801208c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012090:	f7ee f922 	bl	80002d8 <__aeabi_dsub>
 8012094:	4602      	mov	r2, r0
 8012096:	460b      	mov	r3, r1
 8012098:	4630      	mov	r0, r6
 801209a:	4639      	mov	r1, r7
 801209c:	f7ee f91c 	bl	80002d8 <__aeabi_dsub>
 80120a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120a4:	f7ee fad0 	bl	8000648 <__aeabi_dmul>
 80120a8:	4622      	mov	r2, r4
 80120aa:	4606      	mov	r6, r0
 80120ac:	460f      	mov	r7, r1
 80120ae:	462b      	mov	r3, r5
 80120b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120b4:	f7ee fac8 	bl	8000648 <__aeabi_dmul>
 80120b8:	4602      	mov	r2, r0
 80120ba:	460b      	mov	r3, r1
 80120bc:	4630      	mov	r0, r6
 80120be:	4639      	mov	r1, r7
 80120c0:	f7ee f90c 	bl	80002dc <__adddf3>
 80120c4:	4606      	mov	r6, r0
 80120c6:	460f      	mov	r7, r1
 80120c8:	4602      	mov	r2, r0
 80120ca:	460b      	mov	r3, r1
 80120cc:	4640      	mov	r0, r8
 80120ce:	4649      	mov	r1, r9
 80120d0:	f7ee f904 	bl	80002dc <__adddf3>
 80120d4:	9802      	ldr	r0, [sp, #8]
 80120d6:	a33c      	add	r3, pc, #240	; (adr r3, 80121c8 <__ieee754_pow+0x700>)
 80120d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120dc:	4604      	mov	r4, r0
 80120de:	460d      	mov	r5, r1
 80120e0:	f7ee fab2 	bl	8000648 <__aeabi_dmul>
 80120e4:	4642      	mov	r2, r8
 80120e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80120ea:	464b      	mov	r3, r9
 80120ec:	4620      	mov	r0, r4
 80120ee:	4629      	mov	r1, r5
 80120f0:	f7ee f8f2 	bl	80002d8 <__aeabi_dsub>
 80120f4:	4602      	mov	r2, r0
 80120f6:	460b      	mov	r3, r1
 80120f8:	4630      	mov	r0, r6
 80120fa:	4639      	mov	r1, r7
 80120fc:	f7ee f8ec 	bl	80002d8 <__aeabi_dsub>
 8012100:	a333      	add	r3, pc, #204	; (adr r3, 80121d0 <__ieee754_pow+0x708>)
 8012102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012106:	f7ee fa9f 	bl	8000648 <__aeabi_dmul>
 801210a:	a333      	add	r3, pc, #204	; (adr r3, 80121d8 <__ieee754_pow+0x710>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	4606      	mov	r6, r0
 8012112:	460f      	mov	r7, r1
 8012114:	4620      	mov	r0, r4
 8012116:	4629      	mov	r1, r5
 8012118:	f7ee fa96 	bl	8000648 <__aeabi_dmul>
 801211c:	4602      	mov	r2, r0
 801211e:	460b      	mov	r3, r1
 8012120:	4630      	mov	r0, r6
 8012122:	4639      	mov	r1, r7
 8012124:	f7ee f8da 	bl	80002dc <__adddf3>
 8012128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801212a:	4b35      	ldr	r3, [pc, #212]	; (8012200 <__ieee754_pow+0x738>)
 801212c:	4413      	add	r3, r2
 801212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012132:	f7ee f8d3 	bl	80002dc <__adddf3>
 8012136:	4604      	mov	r4, r0
 8012138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801213a:	460d      	mov	r5, r1
 801213c:	f7ee fa1a 	bl	8000574 <__aeabi_i2d>
 8012140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012142:	4b30      	ldr	r3, [pc, #192]	; (8012204 <__ieee754_pow+0x73c>)
 8012144:	4413      	add	r3, r2
 8012146:	e9d3 8900 	ldrd	r8, r9, [r3]
 801214a:	4606      	mov	r6, r0
 801214c:	460f      	mov	r7, r1
 801214e:	4622      	mov	r2, r4
 8012150:	462b      	mov	r3, r5
 8012152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012156:	f7ee f8c1 	bl	80002dc <__adddf3>
 801215a:	4642      	mov	r2, r8
 801215c:	464b      	mov	r3, r9
 801215e:	f7ee f8bd 	bl	80002dc <__adddf3>
 8012162:	4632      	mov	r2, r6
 8012164:	463b      	mov	r3, r7
 8012166:	f7ee f8b9 	bl	80002dc <__adddf3>
 801216a:	9802      	ldr	r0, [sp, #8]
 801216c:	4632      	mov	r2, r6
 801216e:	463b      	mov	r3, r7
 8012170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012174:	f7ee f8b0 	bl	80002d8 <__aeabi_dsub>
 8012178:	4642      	mov	r2, r8
 801217a:	464b      	mov	r3, r9
 801217c:	f7ee f8ac 	bl	80002d8 <__aeabi_dsub>
 8012180:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012184:	e607      	b.n	8011d96 <__ieee754_pow+0x2ce>
 8012186:	f04f 0a01 	mov.w	sl, #1
 801218a:	e6a5      	b.n	8011ed8 <__ieee754_pow+0x410>
 801218c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80121e0 <__ieee754_pow+0x718>
 8012190:	e613      	b.n	8011dba <__ieee754_pow+0x2f2>
 8012192:	bf00      	nop
 8012194:	f3af 8000 	nop.w
 8012198:	4a454eef 	.word	0x4a454eef
 801219c:	3fca7e28 	.word	0x3fca7e28
 80121a0:	93c9db65 	.word	0x93c9db65
 80121a4:	3fcd864a 	.word	0x3fcd864a
 80121a8:	a91d4101 	.word	0xa91d4101
 80121ac:	3fd17460 	.word	0x3fd17460
 80121b0:	518f264d 	.word	0x518f264d
 80121b4:	3fd55555 	.word	0x3fd55555
 80121b8:	db6fabff 	.word	0xdb6fabff
 80121bc:	3fdb6db6 	.word	0x3fdb6db6
 80121c0:	33333303 	.word	0x33333303
 80121c4:	3fe33333 	.word	0x3fe33333
 80121c8:	e0000000 	.word	0xe0000000
 80121cc:	3feec709 	.word	0x3feec709
 80121d0:	dc3a03fd 	.word	0xdc3a03fd
 80121d4:	3feec709 	.word	0x3feec709
 80121d8:	145b01f5 	.word	0x145b01f5
 80121dc:	be3e2fe0 	.word	0xbe3e2fe0
 80121e0:	00000000 	.word	0x00000000
 80121e4:	3ff00000 	.word	0x3ff00000
 80121e8:	43400000 	.word	0x43400000
 80121ec:	0003988e 	.word	0x0003988e
 80121f0:	000bb679 	.word	0x000bb679
 80121f4:	08014040 	.word	0x08014040
 80121f8:	3ff00000 	.word	0x3ff00000
 80121fc:	40080000 	.word	0x40080000
 8012200:	08014060 	.word	0x08014060
 8012204:	08014050 	.word	0x08014050
 8012208:	a3b4      	add	r3, pc, #720	; (adr r3, 80124dc <__ieee754_pow+0xa14>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	4640      	mov	r0, r8
 8012210:	4649      	mov	r1, r9
 8012212:	f7ee f863 	bl	80002dc <__adddf3>
 8012216:	4622      	mov	r2, r4
 8012218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801221c:	462b      	mov	r3, r5
 801221e:	4630      	mov	r0, r6
 8012220:	4639      	mov	r1, r7
 8012222:	f7ee f859 	bl	80002d8 <__aeabi_dsub>
 8012226:	4602      	mov	r2, r0
 8012228:	460b      	mov	r3, r1
 801222a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801222e:	f7ee fc9b 	bl	8000b68 <__aeabi_dcmpgt>
 8012232:	2800      	cmp	r0, #0
 8012234:	f47f adfe 	bne.w	8011e34 <__ieee754_pow+0x36c>
 8012238:	4aa3      	ldr	r2, [pc, #652]	; (80124c8 <__ieee754_pow+0xa00>)
 801223a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801223e:	4293      	cmp	r3, r2
 8012240:	f340 810a 	ble.w	8012458 <__ieee754_pow+0x990>
 8012244:	151b      	asrs	r3, r3, #20
 8012246:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801224a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801224e:	fa4a f303 	asr.w	r3, sl, r3
 8012252:	445b      	add	r3, fp
 8012254:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012258:	4e9c      	ldr	r6, [pc, #624]	; (80124cc <__ieee754_pow+0xa04>)
 801225a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801225e:	4116      	asrs	r6, r2
 8012260:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012264:	2000      	movs	r0, #0
 8012266:	ea23 0106 	bic.w	r1, r3, r6
 801226a:	f1c2 0214 	rsb	r2, r2, #20
 801226e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012272:	fa4a fa02 	asr.w	sl, sl, r2
 8012276:	f1bb 0f00 	cmp.w	fp, #0
 801227a:	4602      	mov	r2, r0
 801227c:	460b      	mov	r3, r1
 801227e:	4620      	mov	r0, r4
 8012280:	4629      	mov	r1, r5
 8012282:	bfb8      	it	lt
 8012284:	f1ca 0a00 	rsblt	sl, sl, #0
 8012288:	f7ee f826 	bl	80002d8 <__aeabi_dsub>
 801228c:	e9cd 0100 	strd	r0, r1, [sp]
 8012290:	4642      	mov	r2, r8
 8012292:	464b      	mov	r3, r9
 8012294:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012298:	f7ee f820 	bl	80002dc <__adddf3>
 801229c:	2000      	movs	r0, #0
 801229e:	a378      	add	r3, pc, #480	; (adr r3, 8012480 <__ieee754_pow+0x9b8>)
 80122a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a4:	4604      	mov	r4, r0
 80122a6:	460d      	mov	r5, r1
 80122a8:	f7ee f9ce 	bl	8000648 <__aeabi_dmul>
 80122ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122b0:	4606      	mov	r6, r0
 80122b2:	460f      	mov	r7, r1
 80122b4:	4620      	mov	r0, r4
 80122b6:	4629      	mov	r1, r5
 80122b8:	f7ee f80e 	bl	80002d8 <__aeabi_dsub>
 80122bc:	4602      	mov	r2, r0
 80122be:	460b      	mov	r3, r1
 80122c0:	4640      	mov	r0, r8
 80122c2:	4649      	mov	r1, r9
 80122c4:	f7ee f808 	bl	80002d8 <__aeabi_dsub>
 80122c8:	a36f      	add	r3, pc, #444	; (adr r3, 8012488 <__ieee754_pow+0x9c0>)
 80122ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ce:	f7ee f9bb 	bl	8000648 <__aeabi_dmul>
 80122d2:	a36f      	add	r3, pc, #444	; (adr r3, 8012490 <__ieee754_pow+0x9c8>)
 80122d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d8:	4680      	mov	r8, r0
 80122da:	4689      	mov	r9, r1
 80122dc:	4620      	mov	r0, r4
 80122de:	4629      	mov	r1, r5
 80122e0:	f7ee f9b2 	bl	8000648 <__aeabi_dmul>
 80122e4:	4602      	mov	r2, r0
 80122e6:	460b      	mov	r3, r1
 80122e8:	4640      	mov	r0, r8
 80122ea:	4649      	mov	r1, r9
 80122ec:	f7ed fff6 	bl	80002dc <__adddf3>
 80122f0:	4604      	mov	r4, r0
 80122f2:	460d      	mov	r5, r1
 80122f4:	4602      	mov	r2, r0
 80122f6:	460b      	mov	r3, r1
 80122f8:	4630      	mov	r0, r6
 80122fa:	4639      	mov	r1, r7
 80122fc:	f7ed ffee 	bl	80002dc <__adddf3>
 8012300:	4632      	mov	r2, r6
 8012302:	463b      	mov	r3, r7
 8012304:	4680      	mov	r8, r0
 8012306:	4689      	mov	r9, r1
 8012308:	f7ed ffe6 	bl	80002d8 <__aeabi_dsub>
 801230c:	4602      	mov	r2, r0
 801230e:	460b      	mov	r3, r1
 8012310:	4620      	mov	r0, r4
 8012312:	4629      	mov	r1, r5
 8012314:	f7ed ffe0 	bl	80002d8 <__aeabi_dsub>
 8012318:	4642      	mov	r2, r8
 801231a:	4606      	mov	r6, r0
 801231c:	460f      	mov	r7, r1
 801231e:	464b      	mov	r3, r9
 8012320:	4640      	mov	r0, r8
 8012322:	4649      	mov	r1, r9
 8012324:	f7ee f990 	bl	8000648 <__aeabi_dmul>
 8012328:	a35b      	add	r3, pc, #364	; (adr r3, 8012498 <__ieee754_pow+0x9d0>)
 801232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232e:	4604      	mov	r4, r0
 8012330:	460d      	mov	r5, r1
 8012332:	f7ee f989 	bl	8000648 <__aeabi_dmul>
 8012336:	a35a      	add	r3, pc, #360	; (adr r3, 80124a0 <__ieee754_pow+0x9d8>)
 8012338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233c:	f7ed ffcc 	bl	80002d8 <__aeabi_dsub>
 8012340:	4622      	mov	r2, r4
 8012342:	462b      	mov	r3, r5
 8012344:	f7ee f980 	bl	8000648 <__aeabi_dmul>
 8012348:	a357      	add	r3, pc, #348	; (adr r3, 80124a8 <__ieee754_pow+0x9e0>)
 801234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234e:	f7ed ffc5 	bl	80002dc <__adddf3>
 8012352:	4622      	mov	r2, r4
 8012354:	462b      	mov	r3, r5
 8012356:	f7ee f977 	bl	8000648 <__aeabi_dmul>
 801235a:	a355      	add	r3, pc, #340	; (adr r3, 80124b0 <__ieee754_pow+0x9e8>)
 801235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012360:	f7ed ffba 	bl	80002d8 <__aeabi_dsub>
 8012364:	4622      	mov	r2, r4
 8012366:	462b      	mov	r3, r5
 8012368:	f7ee f96e 	bl	8000648 <__aeabi_dmul>
 801236c:	a352      	add	r3, pc, #328	; (adr r3, 80124b8 <__ieee754_pow+0x9f0>)
 801236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012372:	f7ed ffb3 	bl	80002dc <__adddf3>
 8012376:	4622      	mov	r2, r4
 8012378:	462b      	mov	r3, r5
 801237a:	f7ee f965 	bl	8000648 <__aeabi_dmul>
 801237e:	4602      	mov	r2, r0
 8012380:	460b      	mov	r3, r1
 8012382:	4640      	mov	r0, r8
 8012384:	4649      	mov	r1, r9
 8012386:	f7ed ffa7 	bl	80002d8 <__aeabi_dsub>
 801238a:	4604      	mov	r4, r0
 801238c:	460d      	mov	r5, r1
 801238e:	4602      	mov	r2, r0
 8012390:	460b      	mov	r3, r1
 8012392:	4640      	mov	r0, r8
 8012394:	4649      	mov	r1, r9
 8012396:	f7ee f957 	bl	8000648 <__aeabi_dmul>
 801239a:	2200      	movs	r2, #0
 801239c:	e9cd 0100 	strd	r0, r1, [sp]
 80123a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123a4:	4620      	mov	r0, r4
 80123a6:	4629      	mov	r1, r5
 80123a8:	f7ed ff96 	bl	80002d8 <__aeabi_dsub>
 80123ac:	4602      	mov	r2, r0
 80123ae:	460b      	mov	r3, r1
 80123b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123b4:	f7ee fa72 	bl	800089c <__aeabi_ddiv>
 80123b8:	4632      	mov	r2, r6
 80123ba:	4604      	mov	r4, r0
 80123bc:	460d      	mov	r5, r1
 80123be:	463b      	mov	r3, r7
 80123c0:	4640      	mov	r0, r8
 80123c2:	4649      	mov	r1, r9
 80123c4:	f7ee f940 	bl	8000648 <__aeabi_dmul>
 80123c8:	4632      	mov	r2, r6
 80123ca:	463b      	mov	r3, r7
 80123cc:	f7ed ff86 	bl	80002dc <__adddf3>
 80123d0:	4602      	mov	r2, r0
 80123d2:	460b      	mov	r3, r1
 80123d4:	4620      	mov	r0, r4
 80123d6:	4629      	mov	r1, r5
 80123d8:	f7ed ff7e 	bl	80002d8 <__aeabi_dsub>
 80123dc:	4642      	mov	r2, r8
 80123de:	464b      	mov	r3, r9
 80123e0:	f7ed ff7a 	bl	80002d8 <__aeabi_dsub>
 80123e4:	4602      	mov	r2, r0
 80123e6:	460b      	mov	r3, r1
 80123e8:	2000      	movs	r0, #0
 80123ea:	4939      	ldr	r1, [pc, #228]	; (80124d0 <__ieee754_pow+0xa08>)
 80123ec:	f7ed ff74 	bl	80002d8 <__aeabi_dsub>
 80123f0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80123f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80123f8:	4602      	mov	r2, r0
 80123fa:	460b      	mov	r3, r1
 80123fc:	da2f      	bge.n	801245e <__ieee754_pow+0x996>
 80123fe:	4650      	mov	r0, sl
 8012400:	ec43 2b10 	vmov	d0, r2, r3
 8012404:	f000 f9c0 	bl	8012788 <scalbn>
 8012408:	ec51 0b10 	vmov	r0, r1, d0
 801240c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012410:	f7ff bbf1 	b.w	8011bf6 <__ieee754_pow+0x12e>
 8012414:	4b2f      	ldr	r3, [pc, #188]	; (80124d4 <__ieee754_pow+0xa0c>)
 8012416:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801241a:	429e      	cmp	r6, r3
 801241c:	f77f af0c 	ble.w	8012238 <__ieee754_pow+0x770>
 8012420:	4b2d      	ldr	r3, [pc, #180]	; (80124d8 <__ieee754_pow+0xa10>)
 8012422:	440b      	add	r3, r1
 8012424:	4303      	orrs	r3, r0
 8012426:	d00b      	beq.n	8012440 <__ieee754_pow+0x978>
 8012428:	a325      	add	r3, pc, #148	; (adr r3, 80124c0 <__ieee754_pow+0x9f8>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012432:	f7ee f909 	bl	8000648 <__aeabi_dmul>
 8012436:	a322      	add	r3, pc, #136	; (adr r3, 80124c0 <__ieee754_pow+0x9f8>)
 8012438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801243c:	f7ff bbdb 	b.w	8011bf6 <__ieee754_pow+0x12e>
 8012440:	4622      	mov	r2, r4
 8012442:	462b      	mov	r3, r5
 8012444:	f7ed ff48 	bl	80002d8 <__aeabi_dsub>
 8012448:	4642      	mov	r2, r8
 801244a:	464b      	mov	r3, r9
 801244c:	f7ee fb82 	bl	8000b54 <__aeabi_dcmpge>
 8012450:	2800      	cmp	r0, #0
 8012452:	f43f aef1 	beq.w	8012238 <__ieee754_pow+0x770>
 8012456:	e7e7      	b.n	8012428 <__ieee754_pow+0x960>
 8012458:	f04f 0a00 	mov.w	sl, #0
 801245c:	e718      	b.n	8012290 <__ieee754_pow+0x7c8>
 801245e:	4621      	mov	r1, r4
 8012460:	e7d4      	b.n	801240c <__ieee754_pow+0x944>
 8012462:	2000      	movs	r0, #0
 8012464:	491a      	ldr	r1, [pc, #104]	; (80124d0 <__ieee754_pow+0xa08>)
 8012466:	f7ff bb8f 	b.w	8011b88 <__ieee754_pow+0xc0>
 801246a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801246e:	f7ff bb8b 	b.w	8011b88 <__ieee754_pow+0xc0>
 8012472:	4630      	mov	r0, r6
 8012474:	4639      	mov	r1, r7
 8012476:	f7ff bb87 	b.w	8011b88 <__ieee754_pow+0xc0>
 801247a:	4693      	mov	fp, r2
 801247c:	f7ff bb98 	b.w	8011bb0 <__ieee754_pow+0xe8>
 8012480:	00000000 	.word	0x00000000
 8012484:	3fe62e43 	.word	0x3fe62e43
 8012488:	fefa39ef 	.word	0xfefa39ef
 801248c:	3fe62e42 	.word	0x3fe62e42
 8012490:	0ca86c39 	.word	0x0ca86c39
 8012494:	be205c61 	.word	0xbe205c61
 8012498:	72bea4d0 	.word	0x72bea4d0
 801249c:	3e663769 	.word	0x3e663769
 80124a0:	c5d26bf1 	.word	0xc5d26bf1
 80124a4:	3ebbbd41 	.word	0x3ebbbd41
 80124a8:	af25de2c 	.word	0xaf25de2c
 80124ac:	3f11566a 	.word	0x3f11566a
 80124b0:	16bebd93 	.word	0x16bebd93
 80124b4:	3f66c16c 	.word	0x3f66c16c
 80124b8:	5555553e 	.word	0x5555553e
 80124bc:	3fc55555 	.word	0x3fc55555
 80124c0:	c2f8f359 	.word	0xc2f8f359
 80124c4:	01a56e1f 	.word	0x01a56e1f
 80124c8:	3fe00000 	.word	0x3fe00000
 80124cc:	000fffff 	.word	0x000fffff
 80124d0:	3ff00000 	.word	0x3ff00000
 80124d4:	4090cbff 	.word	0x4090cbff
 80124d8:	3f6f3400 	.word	0x3f6f3400
 80124dc:	652b82fe 	.word	0x652b82fe
 80124e0:	3c971547 	.word	0x3c971547

080124e4 <__ieee754_sqrt>:
 80124e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124e8:	4955      	ldr	r1, [pc, #340]	; (8012640 <__ieee754_sqrt+0x15c>)
 80124ea:	ec55 4b10 	vmov	r4, r5, d0
 80124ee:	43a9      	bics	r1, r5
 80124f0:	462b      	mov	r3, r5
 80124f2:	462a      	mov	r2, r5
 80124f4:	d112      	bne.n	801251c <__ieee754_sqrt+0x38>
 80124f6:	ee10 2a10 	vmov	r2, s0
 80124fa:	ee10 0a10 	vmov	r0, s0
 80124fe:	4629      	mov	r1, r5
 8012500:	f7ee f8a2 	bl	8000648 <__aeabi_dmul>
 8012504:	4602      	mov	r2, r0
 8012506:	460b      	mov	r3, r1
 8012508:	4620      	mov	r0, r4
 801250a:	4629      	mov	r1, r5
 801250c:	f7ed fee6 	bl	80002dc <__adddf3>
 8012510:	4604      	mov	r4, r0
 8012512:	460d      	mov	r5, r1
 8012514:	ec45 4b10 	vmov	d0, r4, r5
 8012518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801251c:	2d00      	cmp	r5, #0
 801251e:	ee10 0a10 	vmov	r0, s0
 8012522:	4621      	mov	r1, r4
 8012524:	dc0f      	bgt.n	8012546 <__ieee754_sqrt+0x62>
 8012526:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801252a:	4330      	orrs	r0, r6
 801252c:	d0f2      	beq.n	8012514 <__ieee754_sqrt+0x30>
 801252e:	b155      	cbz	r5, 8012546 <__ieee754_sqrt+0x62>
 8012530:	ee10 2a10 	vmov	r2, s0
 8012534:	4620      	mov	r0, r4
 8012536:	4629      	mov	r1, r5
 8012538:	f7ed fece 	bl	80002d8 <__aeabi_dsub>
 801253c:	4602      	mov	r2, r0
 801253e:	460b      	mov	r3, r1
 8012540:	f7ee f9ac 	bl	800089c <__aeabi_ddiv>
 8012544:	e7e4      	b.n	8012510 <__ieee754_sqrt+0x2c>
 8012546:	151b      	asrs	r3, r3, #20
 8012548:	d073      	beq.n	8012632 <__ieee754_sqrt+0x14e>
 801254a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801254e:	07dd      	lsls	r5, r3, #31
 8012550:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012554:	bf48      	it	mi
 8012556:	0fc8      	lsrmi	r0, r1, #31
 8012558:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801255c:	bf44      	itt	mi
 801255e:	0049      	lslmi	r1, r1, #1
 8012560:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012564:	2500      	movs	r5, #0
 8012566:	1058      	asrs	r0, r3, #1
 8012568:	0fcb      	lsrs	r3, r1, #31
 801256a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801256e:	0049      	lsls	r1, r1, #1
 8012570:	2316      	movs	r3, #22
 8012572:	462c      	mov	r4, r5
 8012574:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012578:	19a7      	adds	r7, r4, r6
 801257a:	4297      	cmp	r7, r2
 801257c:	bfde      	ittt	le
 801257e:	19bc      	addle	r4, r7, r6
 8012580:	1bd2      	suble	r2, r2, r7
 8012582:	19ad      	addle	r5, r5, r6
 8012584:	0fcf      	lsrs	r7, r1, #31
 8012586:	3b01      	subs	r3, #1
 8012588:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801258c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012590:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012594:	d1f0      	bne.n	8012578 <__ieee754_sqrt+0x94>
 8012596:	f04f 0c20 	mov.w	ip, #32
 801259a:	469e      	mov	lr, r3
 801259c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80125a0:	42a2      	cmp	r2, r4
 80125a2:	eb06 070e 	add.w	r7, r6, lr
 80125a6:	dc02      	bgt.n	80125ae <__ieee754_sqrt+0xca>
 80125a8:	d112      	bne.n	80125d0 <__ieee754_sqrt+0xec>
 80125aa:	428f      	cmp	r7, r1
 80125ac:	d810      	bhi.n	80125d0 <__ieee754_sqrt+0xec>
 80125ae:	2f00      	cmp	r7, #0
 80125b0:	eb07 0e06 	add.w	lr, r7, r6
 80125b4:	da42      	bge.n	801263c <__ieee754_sqrt+0x158>
 80125b6:	f1be 0f00 	cmp.w	lr, #0
 80125ba:	db3f      	blt.n	801263c <__ieee754_sqrt+0x158>
 80125bc:	f104 0801 	add.w	r8, r4, #1
 80125c0:	1b12      	subs	r2, r2, r4
 80125c2:	428f      	cmp	r7, r1
 80125c4:	bf88      	it	hi
 80125c6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80125ca:	1bc9      	subs	r1, r1, r7
 80125cc:	4433      	add	r3, r6
 80125ce:	4644      	mov	r4, r8
 80125d0:	0052      	lsls	r2, r2, #1
 80125d2:	f1bc 0c01 	subs.w	ip, ip, #1
 80125d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80125da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80125de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80125e2:	d1dd      	bne.n	80125a0 <__ieee754_sqrt+0xbc>
 80125e4:	430a      	orrs	r2, r1
 80125e6:	d006      	beq.n	80125f6 <__ieee754_sqrt+0x112>
 80125e8:	1c5c      	adds	r4, r3, #1
 80125ea:	bf13      	iteet	ne
 80125ec:	3301      	addne	r3, #1
 80125ee:	3501      	addeq	r5, #1
 80125f0:	4663      	moveq	r3, ip
 80125f2:	f023 0301 	bicne.w	r3, r3, #1
 80125f6:	106a      	asrs	r2, r5, #1
 80125f8:	085b      	lsrs	r3, r3, #1
 80125fa:	07e9      	lsls	r1, r5, #31
 80125fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012600:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012604:	bf48      	it	mi
 8012606:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801260a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801260e:	461c      	mov	r4, r3
 8012610:	e780      	b.n	8012514 <__ieee754_sqrt+0x30>
 8012612:	0aca      	lsrs	r2, r1, #11
 8012614:	3815      	subs	r0, #21
 8012616:	0549      	lsls	r1, r1, #21
 8012618:	2a00      	cmp	r2, #0
 801261a:	d0fa      	beq.n	8012612 <__ieee754_sqrt+0x12e>
 801261c:	02d6      	lsls	r6, r2, #11
 801261e:	d50a      	bpl.n	8012636 <__ieee754_sqrt+0x152>
 8012620:	f1c3 0420 	rsb	r4, r3, #32
 8012624:	fa21 f404 	lsr.w	r4, r1, r4
 8012628:	1e5d      	subs	r5, r3, #1
 801262a:	4099      	lsls	r1, r3
 801262c:	4322      	orrs	r2, r4
 801262e:	1b43      	subs	r3, r0, r5
 8012630:	e78b      	b.n	801254a <__ieee754_sqrt+0x66>
 8012632:	4618      	mov	r0, r3
 8012634:	e7f0      	b.n	8012618 <__ieee754_sqrt+0x134>
 8012636:	0052      	lsls	r2, r2, #1
 8012638:	3301      	adds	r3, #1
 801263a:	e7ef      	b.n	801261c <__ieee754_sqrt+0x138>
 801263c:	46a0      	mov	r8, r4
 801263e:	e7bf      	b.n	80125c0 <__ieee754_sqrt+0xdc>
 8012640:	7ff00000 	.word	0x7ff00000

08012644 <fabs>:
 8012644:	ec51 0b10 	vmov	r0, r1, d0
 8012648:	ee10 2a10 	vmov	r2, s0
 801264c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012650:	ec43 2b10 	vmov	d0, r2, r3
 8012654:	4770      	bx	lr

08012656 <finite>:
 8012656:	ee10 3a90 	vmov	r3, s1
 801265a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801265e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012662:	0fc0      	lsrs	r0, r0, #31
 8012664:	4770      	bx	lr

08012666 <matherr>:
 8012666:	2000      	movs	r0, #0
 8012668:	4770      	bx	lr
 801266a:	0000      	movs	r0, r0
 801266c:	0000      	movs	r0, r0
	...

08012670 <nan>:
 8012670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012678 <nan+0x8>
 8012674:	4770      	bx	lr
 8012676:	bf00      	nop
 8012678:	00000000 	.word	0x00000000
 801267c:	7ff80000 	.word	0x7ff80000

08012680 <rint>:
 8012680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012682:	ec51 0b10 	vmov	r0, r1, d0
 8012686:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801268a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801268e:	2e13      	cmp	r6, #19
 8012690:	460b      	mov	r3, r1
 8012692:	ee10 4a10 	vmov	r4, s0
 8012696:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801269a:	dc56      	bgt.n	801274a <rint+0xca>
 801269c:	2e00      	cmp	r6, #0
 801269e:	da2b      	bge.n	80126f8 <rint+0x78>
 80126a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80126a4:	4302      	orrs	r2, r0
 80126a6:	d023      	beq.n	80126f0 <rint+0x70>
 80126a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80126ac:	4302      	orrs	r2, r0
 80126ae:	4254      	negs	r4, r2
 80126b0:	4314      	orrs	r4, r2
 80126b2:	0c4b      	lsrs	r3, r1, #17
 80126b4:	0b24      	lsrs	r4, r4, #12
 80126b6:	045b      	lsls	r3, r3, #17
 80126b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80126bc:	ea44 0103 	orr.w	r1, r4, r3
 80126c0:	460b      	mov	r3, r1
 80126c2:	492f      	ldr	r1, [pc, #188]	; (8012780 <rint+0x100>)
 80126c4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80126c8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80126cc:	4602      	mov	r2, r0
 80126ce:	4639      	mov	r1, r7
 80126d0:	4630      	mov	r0, r6
 80126d2:	f7ed fe03 	bl	80002dc <__adddf3>
 80126d6:	e9cd 0100 	strd	r0, r1, [sp]
 80126da:	463b      	mov	r3, r7
 80126dc:	4632      	mov	r2, r6
 80126de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126e2:	f7ed fdf9 	bl	80002d8 <__aeabi_dsub>
 80126e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80126ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80126ee:	4639      	mov	r1, r7
 80126f0:	ec41 0b10 	vmov	d0, r0, r1
 80126f4:	b003      	add	sp, #12
 80126f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126f8:	4a22      	ldr	r2, [pc, #136]	; (8012784 <rint+0x104>)
 80126fa:	4132      	asrs	r2, r6
 80126fc:	ea01 0702 	and.w	r7, r1, r2
 8012700:	4307      	orrs	r7, r0
 8012702:	d0f5      	beq.n	80126f0 <rint+0x70>
 8012704:	0852      	lsrs	r2, r2, #1
 8012706:	4011      	ands	r1, r2
 8012708:	430c      	orrs	r4, r1
 801270a:	d00b      	beq.n	8012724 <rint+0xa4>
 801270c:	ea23 0202 	bic.w	r2, r3, r2
 8012710:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012714:	2e13      	cmp	r6, #19
 8012716:	fa43 f306 	asr.w	r3, r3, r6
 801271a:	bf0c      	ite	eq
 801271c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012720:	2400      	movne	r4, #0
 8012722:	4313      	orrs	r3, r2
 8012724:	4916      	ldr	r1, [pc, #88]	; (8012780 <rint+0x100>)
 8012726:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801272a:	4622      	mov	r2, r4
 801272c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012730:	4620      	mov	r0, r4
 8012732:	4629      	mov	r1, r5
 8012734:	f7ed fdd2 	bl	80002dc <__adddf3>
 8012738:	e9cd 0100 	strd	r0, r1, [sp]
 801273c:	4622      	mov	r2, r4
 801273e:	462b      	mov	r3, r5
 8012740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012744:	f7ed fdc8 	bl	80002d8 <__aeabi_dsub>
 8012748:	e7d2      	b.n	80126f0 <rint+0x70>
 801274a:	2e33      	cmp	r6, #51	; 0x33
 801274c:	dd07      	ble.n	801275e <rint+0xde>
 801274e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012752:	d1cd      	bne.n	80126f0 <rint+0x70>
 8012754:	ee10 2a10 	vmov	r2, s0
 8012758:	f7ed fdc0 	bl	80002dc <__adddf3>
 801275c:	e7c8      	b.n	80126f0 <rint+0x70>
 801275e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8012762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012766:	40f2      	lsrs	r2, r6
 8012768:	4210      	tst	r0, r2
 801276a:	d0c1      	beq.n	80126f0 <rint+0x70>
 801276c:	0852      	lsrs	r2, r2, #1
 801276e:	4210      	tst	r0, r2
 8012770:	bf1f      	itttt	ne
 8012772:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012776:	ea20 0202 	bicne.w	r2, r0, r2
 801277a:	4134      	asrne	r4, r6
 801277c:	4314      	orrne	r4, r2
 801277e:	e7d1      	b.n	8012724 <rint+0xa4>
 8012780:	08014070 	.word	0x08014070
 8012784:	000fffff 	.word	0x000fffff

08012788 <scalbn>:
 8012788:	b570      	push	{r4, r5, r6, lr}
 801278a:	ec55 4b10 	vmov	r4, r5, d0
 801278e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012792:	4606      	mov	r6, r0
 8012794:	462b      	mov	r3, r5
 8012796:	b9aa      	cbnz	r2, 80127c4 <scalbn+0x3c>
 8012798:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801279c:	4323      	orrs	r3, r4
 801279e:	d03b      	beq.n	8012818 <scalbn+0x90>
 80127a0:	4b31      	ldr	r3, [pc, #196]	; (8012868 <scalbn+0xe0>)
 80127a2:	4629      	mov	r1, r5
 80127a4:	2200      	movs	r2, #0
 80127a6:	ee10 0a10 	vmov	r0, s0
 80127aa:	f7ed ff4d 	bl	8000648 <__aeabi_dmul>
 80127ae:	4b2f      	ldr	r3, [pc, #188]	; (801286c <scalbn+0xe4>)
 80127b0:	429e      	cmp	r6, r3
 80127b2:	4604      	mov	r4, r0
 80127b4:	460d      	mov	r5, r1
 80127b6:	da12      	bge.n	80127de <scalbn+0x56>
 80127b8:	a327      	add	r3, pc, #156	; (adr r3, 8012858 <scalbn+0xd0>)
 80127ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127be:	f7ed ff43 	bl	8000648 <__aeabi_dmul>
 80127c2:	e009      	b.n	80127d8 <scalbn+0x50>
 80127c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80127c8:	428a      	cmp	r2, r1
 80127ca:	d10c      	bne.n	80127e6 <scalbn+0x5e>
 80127cc:	ee10 2a10 	vmov	r2, s0
 80127d0:	4620      	mov	r0, r4
 80127d2:	4629      	mov	r1, r5
 80127d4:	f7ed fd82 	bl	80002dc <__adddf3>
 80127d8:	4604      	mov	r4, r0
 80127da:	460d      	mov	r5, r1
 80127dc:	e01c      	b.n	8012818 <scalbn+0x90>
 80127de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80127e2:	460b      	mov	r3, r1
 80127e4:	3a36      	subs	r2, #54	; 0x36
 80127e6:	4432      	add	r2, r6
 80127e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80127ec:	428a      	cmp	r2, r1
 80127ee:	dd0b      	ble.n	8012808 <scalbn+0x80>
 80127f0:	ec45 4b11 	vmov	d1, r4, r5
 80127f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012860 <scalbn+0xd8>
 80127f8:	f000 f9f0 	bl	8012bdc <copysign>
 80127fc:	a318      	add	r3, pc, #96	; (adr r3, 8012860 <scalbn+0xd8>)
 80127fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012802:	ec51 0b10 	vmov	r0, r1, d0
 8012806:	e7da      	b.n	80127be <scalbn+0x36>
 8012808:	2a00      	cmp	r2, #0
 801280a:	dd08      	ble.n	801281e <scalbn+0x96>
 801280c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012810:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012814:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012818:	ec45 4b10 	vmov	d0, r4, r5
 801281c:	bd70      	pop	{r4, r5, r6, pc}
 801281e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012822:	da0d      	bge.n	8012840 <scalbn+0xb8>
 8012824:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012828:	429e      	cmp	r6, r3
 801282a:	ec45 4b11 	vmov	d1, r4, r5
 801282e:	dce1      	bgt.n	80127f4 <scalbn+0x6c>
 8012830:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012858 <scalbn+0xd0>
 8012834:	f000 f9d2 	bl	8012bdc <copysign>
 8012838:	a307      	add	r3, pc, #28	; (adr r3, 8012858 <scalbn+0xd0>)
 801283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283e:	e7e0      	b.n	8012802 <scalbn+0x7a>
 8012840:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012844:	3236      	adds	r2, #54	; 0x36
 8012846:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801284a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801284e:	4620      	mov	r0, r4
 8012850:	4629      	mov	r1, r5
 8012852:	2200      	movs	r2, #0
 8012854:	4b06      	ldr	r3, [pc, #24]	; (8012870 <scalbn+0xe8>)
 8012856:	e7b2      	b.n	80127be <scalbn+0x36>
 8012858:	c2f8f359 	.word	0xc2f8f359
 801285c:	01a56e1f 	.word	0x01a56e1f
 8012860:	8800759c 	.word	0x8800759c
 8012864:	7e37e43c 	.word	0x7e37e43c
 8012868:	43500000 	.word	0x43500000
 801286c:	ffff3cb0 	.word	0xffff3cb0
 8012870:	3c900000 	.word	0x3c900000
 8012874:	00000000 	.word	0x00000000

08012878 <__ieee754_log>:
 8012878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801287c:	ec51 0b10 	vmov	r0, r1, d0
 8012880:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012884:	b087      	sub	sp, #28
 8012886:	460d      	mov	r5, r1
 8012888:	da27      	bge.n	80128da <__ieee754_log+0x62>
 801288a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801288e:	4303      	orrs	r3, r0
 8012890:	ee10 2a10 	vmov	r2, s0
 8012894:	d10a      	bne.n	80128ac <__ieee754_log+0x34>
 8012896:	49cc      	ldr	r1, [pc, #816]	; (8012bc8 <__ieee754_log+0x350>)
 8012898:	2200      	movs	r2, #0
 801289a:	2300      	movs	r3, #0
 801289c:	2000      	movs	r0, #0
 801289e:	f7ed fffd 	bl	800089c <__aeabi_ddiv>
 80128a2:	ec41 0b10 	vmov	d0, r0, r1
 80128a6:	b007      	add	sp, #28
 80128a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ac:	2900      	cmp	r1, #0
 80128ae:	da05      	bge.n	80128bc <__ieee754_log+0x44>
 80128b0:	460b      	mov	r3, r1
 80128b2:	f7ed fd11 	bl	80002d8 <__aeabi_dsub>
 80128b6:	2200      	movs	r2, #0
 80128b8:	2300      	movs	r3, #0
 80128ba:	e7f0      	b.n	801289e <__ieee754_log+0x26>
 80128bc:	4bc3      	ldr	r3, [pc, #780]	; (8012bcc <__ieee754_log+0x354>)
 80128be:	2200      	movs	r2, #0
 80128c0:	f7ed fec2 	bl	8000648 <__aeabi_dmul>
 80128c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80128c8:	460d      	mov	r5, r1
 80128ca:	4ac1      	ldr	r2, [pc, #772]	; (8012bd0 <__ieee754_log+0x358>)
 80128cc:	4295      	cmp	r5, r2
 80128ce:	dd06      	ble.n	80128de <__ieee754_log+0x66>
 80128d0:	4602      	mov	r2, r0
 80128d2:	460b      	mov	r3, r1
 80128d4:	f7ed fd02 	bl	80002dc <__adddf3>
 80128d8:	e7e3      	b.n	80128a2 <__ieee754_log+0x2a>
 80128da:	2300      	movs	r3, #0
 80128dc:	e7f5      	b.n	80128ca <__ieee754_log+0x52>
 80128de:	152c      	asrs	r4, r5, #20
 80128e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80128e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80128e8:	441c      	add	r4, r3
 80128ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80128ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80128f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80128f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80128fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80128fe:	ea42 0105 	orr.w	r1, r2, r5
 8012902:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012906:	2200      	movs	r2, #0
 8012908:	4bb2      	ldr	r3, [pc, #712]	; (8012bd4 <__ieee754_log+0x35c>)
 801290a:	f7ed fce5 	bl	80002d8 <__aeabi_dsub>
 801290e:	1cab      	adds	r3, r5, #2
 8012910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012914:	2b02      	cmp	r3, #2
 8012916:	4682      	mov	sl, r0
 8012918:	468b      	mov	fp, r1
 801291a:	f04f 0200 	mov.w	r2, #0
 801291e:	dc53      	bgt.n	80129c8 <__ieee754_log+0x150>
 8012920:	2300      	movs	r3, #0
 8012922:	f7ee f8f9 	bl	8000b18 <__aeabi_dcmpeq>
 8012926:	b1d0      	cbz	r0, 801295e <__ieee754_log+0xe6>
 8012928:	2c00      	cmp	r4, #0
 801292a:	f000 8120 	beq.w	8012b6e <__ieee754_log+0x2f6>
 801292e:	4620      	mov	r0, r4
 8012930:	f7ed fe20 	bl	8000574 <__aeabi_i2d>
 8012934:	a390      	add	r3, pc, #576	; (adr r3, 8012b78 <__ieee754_log+0x300>)
 8012936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801293a:	4606      	mov	r6, r0
 801293c:	460f      	mov	r7, r1
 801293e:	f7ed fe83 	bl	8000648 <__aeabi_dmul>
 8012942:	a38f      	add	r3, pc, #572	; (adr r3, 8012b80 <__ieee754_log+0x308>)
 8012944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012948:	4604      	mov	r4, r0
 801294a:	460d      	mov	r5, r1
 801294c:	4630      	mov	r0, r6
 801294e:	4639      	mov	r1, r7
 8012950:	f7ed fe7a 	bl	8000648 <__aeabi_dmul>
 8012954:	4602      	mov	r2, r0
 8012956:	460b      	mov	r3, r1
 8012958:	4620      	mov	r0, r4
 801295a:	4629      	mov	r1, r5
 801295c:	e7ba      	b.n	80128d4 <__ieee754_log+0x5c>
 801295e:	a38a      	add	r3, pc, #552	; (adr r3, 8012b88 <__ieee754_log+0x310>)
 8012960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012964:	4650      	mov	r0, sl
 8012966:	4659      	mov	r1, fp
 8012968:	f7ed fe6e 	bl	8000648 <__aeabi_dmul>
 801296c:	4602      	mov	r2, r0
 801296e:	460b      	mov	r3, r1
 8012970:	2000      	movs	r0, #0
 8012972:	4999      	ldr	r1, [pc, #612]	; (8012bd8 <__ieee754_log+0x360>)
 8012974:	f7ed fcb0 	bl	80002d8 <__aeabi_dsub>
 8012978:	4652      	mov	r2, sl
 801297a:	4606      	mov	r6, r0
 801297c:	460f      	mov	r7, r1
 801297e:	465b      	mov	r3, fp
 8012980:	4650      	mov	r0, sl
 8012982:	4659      	mov	r1, fp
 8012984:	f7ed fe60 	bl	8000648 <__aeabi_dmul>
 8012988:	4602      	mov	r2, r0
 801298a:	460b      	mov	r3, r1
 801298c:	4630      	mov	r0, r6
 801298e:	4639      	mov	r1, r7
 8012990:	f7ed fe5a 	bl	8000648 <__aeabi_dmul>
 8012994:	4606      	mov	r6, r0
 8012996:	460f      	mov	r7, r1
 8012998:	b914      	cbnz	r4, 80129a0 <__ieee754_log+0x128>
 801299a:	4632      	mov	r2, r6
 801299c:	463b      	mov	r3, r7
 801299e:	e0a0      	b.n	8012ae2 <__ieee754_log+0x26a>
 80129a0:	4620      	mov	r0, r4
 80129a2:	f7ed fde7 	bl	8000574 <__aeabi_i2d>
 80129a6:	a374      	add	r3, pc, #464	; (adr r3, 8012b78 <__ieee754_log+0x300>)
 80129a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ac:	4680      	mov	r8, r0
 80129ae:	4689      	mov	r9, r1
 80129b0:	f7ed fe4a 	bl	8000648 <__aeabi_dmul>
 80129b4:	a372      	add	r3, pc, #456	; (adr r3, 8012b80 <__ieee754_log+0x308>)
 80129b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ba:	4604      	mov	r4, r0
 80129bc:	460d      	mov	r5, r1
 80129be:	4640      	mov	r0, r8
 80129c0:	4649      	mov	r1, r9
 80129c2:	f7ed fe41 	bl	8000648 <__aeabi_dmul>
 80129c6:	e0a5      	b.n	8012b14 <__ieee754_log+0x29c>
 80129c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80129cc:	f7ed fc86 	bl	80002dc <__adddf3>
 80129d0:	4602      	mov	r2, r0
 80129d2:	460b      	mov	r3, r1
 80129d4:	4650      	mov	r0, sl
 80129d6:	4659      	mov	r1, fp
 80129d8:	f7ed ff60 	bl	800089c <__aeabi_ddiv>
 80129dc:	e9cd 0100 	strd	r0, r1, [sp]
 80129e0:	4620      	mov	r0, r4
 80129e2:	f7ed fdc7 	bl	8000574 <__aeabi_i2d>
 80129e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129ee:	4610      	mov	r0, r2
 80129f0:	4619      	mov	r1, r3
 80129f2:	f7ed fe29 	bl	8000648 <__aeabi_dmul>
 80129f6:	4602      	mov	r2, r0
 80129f8:	460b      	mov	r3, r1
 80129fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129fe:	f7ed fe23 	bl	8000648 <__aeabi_dmul>
 8012a02:	a363      	add	r3, pc, #396	; (adr r3, 8012b90 <__ieee754_log+0x318>)
 8012a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a08:	4680      	mov	r8, r0
 8012a0a:	4689      	mov	r9, r1
 8012a0c:	f7ed fe1c 	bl	8000648 <__aeabi_dmul>
 8012a10:	a361      	add	r3, pc, #388	; (adr r3, 8012b98 <__ieee754_log+0x320>)
 8012a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a16:	f7ed fc61 	bl	80002dc <__adddf3>
 8012a1a:	4642      	mov	r2, r8
 8012a1c:	464b      	mov	r3, r9
 8012a1e:	f7ed fe13 	bl	8000648 <__aeabi_dmul>
 8012a22:	a35f      	add	r3, pc, #380	; (adr r3, 8012ba0 <__ieee754_log+0x328>)
 8012a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a28:	f7ed fc58 	bl	80002dc <__adddf3>
 8012a2c:	4642      	mov	r2, r8
 8012a2e:	464b      	mov	r3, r9
 8012a30:	f7ed fe0a 	bl	8000648 <__aeabi_dmul>
 8012a34:	a35c      	add	r3, pc, #368	; (adr r3, 8012ba8 <__ieee754_log+0x330>)
 8012a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3a:	f7ed fc4f 	bl	80002dc <__adddf3>
 8012a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a42:	f7ed fe01 	bl	8000648 <__aeabi_dmul>
 8012a46:	a35a      	add	r3, pc, #360	; (adr r3, 8012bb0 <__ieee754_log+0x338>)
 8012a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a50:	4640      	mov	r0, r8
 8012a52:	4649      	mov	r1, r9
 8012a54:	f7ed fdf8 	bl	8000648 <__aeabi_dmul>
 8012a58:	a357      	add	r3, pc, #348	; (adr r3, 8012bb8 <__ieee754_log+0x340>)
 8012a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5e:	f7ed fc3d 	bl	80002dc <__adddf3>
 8012a62:	4642      	mov	r2, r8
 8012a64:	464b      	mov	r3, r9
 8012a66:	f7ed fdef 	bl	8000648 <__aeabi_dmul>
 8012a6a:	a355      	add	r3, pc, #340	; (adr r3, 8012bc0 <__ieee754_log+0x348>)
 8012a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a70:	f7ed fc34 	bl	80002dc <__adddf3>
 8012a74:	4642      	mov	r2, r8
 8012a76:	464b      	mov	r3, r9
 8012a78:	f7ed fde6 	bl	8000648 <__aeabi_dmul>
 8012a7c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8012a80:	4602      	mov	r2, r0
 8012a82:	460b      	mov	r3, r1
 8012a84:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8012a88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a8c:	f7ed fc26 	bl	80002dc <__adddf3>
 8012a90:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8012a94:	3551      	adds	r5, #81	; 0x51
 8012a96:	4335      	orrs	r5, r6
 8012a98:	2d00      	cmp	r5, #0
 8012a9a:	4680      	mov	r8, r0
 8012a9c:	4689      	mov	r9, r1
 8012a9e:	dd48      	ble.n	8012b32 <__ieee754_log+0x2ba>
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	4b4d      	ldr	r3, [pc, #308]	; (8012bd8 <__ieee754_log+0x360>)
 8012aa4:	4650      	mov	r0, sl
 8012aa6:	4659      	mov	r1, fp
 8012aa8:	f7ed fdce 	bl	8000648 <__aeabi_dmul>
 8012aac:	4652      	mov	r2, sl
 8012aae:	465b      	mov	r3, fp
 8012ab0:	f7ed fdca 	bl	8000648 <__aeabi_dmul>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	4606      	mov	r6, r0
 8012aba:	460f      	mov	r7, r1
 8012abc:	4640      	mov	r0, r8
 8012abe:	4649      	mov	r1, r9
 8012ac0:	f7ed fc0c 	bl	80002dc <__adddf3>
 8012ac4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ac8:	f7ed fdbe 	bl	8000648 <__aeabi_dmul>
 8012acc:	4680      	mov	r8, r0
 8012ace:	4689      	mov	r9, r1
 8012ad0:	b964      	cbnz	r4, 8012aec <__ieee754_log+0x274>
 8012ad2:	4602      	mov	r2, r0
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	4639      	mov	r1, r7
 8012ada:	f7ed fbfd 	bl	80002d8 <__aeabi_dsub>
 8012ade:	4602      	mov	r2, r0
 8012ae0:	460b      	mov	r3, r1
 8012ae2:	4650      	mov	r0, sl
 8012ae4:	4659      	mov	r1, fp
 8012ae6:	f7ed fbf7 	bl	80002d8 <__aeabi_dsub>
 8012aea:	e6da      	b.n	80128a2 <__ieee754_log+0x2a>
 8012aec:	a322      	add	r3, pc, #136	; (adr r3, 8012b78 <__ieee754_log+0x300>)
 8012aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012af6:	f7ed fda7 	bl	8000648 <__aeabi_dmul>
 8012afa:	a321      	add	r3, pc, #132	; (adr r3, 8012b80 <__ieee754_log+0x308>)
 8012afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b00:	4604      	mov	r4, r0
 8012b02:	460d      	mov	r5, r1
 8012b04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b08:	f7ed fd9e 	bl	8000648 <__aeabi_dmul>
 8012b0c:	4642      	mov	r2, r8
 8012b0e:	464b      	mov	r3, r9
 8012b10:	f7ed fbe4 	bl	80002dc <__adddf3>
 8012b14:	4602      	mov	r2, r0
 8012b16:	460b      	mov	r3, r1
 8012b18:	4630      	mov	r0, r6
 8012b1a:	4639      	mov	r1, r7
 8012b1c:	f7ed fbdc 	bl	80002d8 <__aeabi_dsub>
 8012b20:	4652      	mov	r2, sl
 8012b22:	465b      	mov	r3, fp
 8012b24:	f7ed fbd8 	bl	80002d8 <__aeabi_dsub>
 8012b28:	4602      	mov	r2, r0
 8012b2a:	460b      	mov	r3, r1
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	4629      	mov	r1, r5
 8012b30:	e7d9      	b.n	8012ae6 <__ieee754_log+0x26e>
 8012b32:	4602      	mov	r2, r0
 8012b34:	460b      	mov	r3, r1
 8012b36:	4650      	mov	r0, sl
 8012b38:	4659      	mov	r1, fp
 8012b3a:	f7ed fbcd 	bl	80002d8 <__aeabi_dsub>
 8012b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b42:	f7ed fd81 	bl	8000648 <__aeabi_dmul>
 8012b46:	4606      	mov	r6, r0
 8012b48:	460f      	mov	r7, r1
 8012b4a:	2c00      	cmp	r4, #0
 8012b4c:	f43f af25 	beq.w	801299a <__ieee754_log+0x122>
 8012b50:	a309      	add	r3, pc, #36	; (adr r3, 8012b78 <__ieee754_log+0x300>)
 8012b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b5a:	f7ed fd75 	bl	8000648 <__aeabi_dmul>
 8012b5e:	a308      	add	r3, pc, #32	; (adr r3, 8012b80 <__ieee754_log+0x308>)
 8012b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b64:	4604      	mov	r4, r0
 8012b66:	460d      	mov	r5, r1
 8012b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b6c:	e729      	b.n	80129c2 <__ieee754_log+0x14a>
 8012b6e:	2000      	movs	r0, #0
 8012b70:	2100      	movs	r1, #0
 8012b72:	e696      	b.n	80128a2 <__ieee754_log+0x2a>
 8012b74:	f3af 8000 	nop.w
 8012b78:	fee00000 	.word	0xfee00000
 8012b7c:	3fe62e42 	.word	0x3fe62e42
 8012b80:	35793c76 	.word	0x35793c76
 8012b84:	3dea39ef 	.word	0x3dea39ef
 8012b88:	55555555 	.word	0x55555555
 8012b8c:	3fd55555 	.word	0x3fd55555
 8012b90:	df3e5244 	.word	0xdf3e5244
 8012b94:	3fc2f112 	.word	0x3fc2f112
 8012b98:	96cb03de 	.word	0x96cb03de
 8012b9c:	3fc74664 	.word	0x3fc74664
 8012ba0:	94229359 	.word	0x94229359
 8012ba4:	3fd24924 	.word	0x3fd24924
 8012ba8:	55555593 	.word	0x55555593
 8012bac:	3fe55555 	.word	0x3fe55555
 8012bb0:	d078c69f 	.word	0xd078c69f
 8012bb4:	3fc39a09 	.word	0x3fc39a09
 8012bb8:	1d8e78af 	.word	0x1d8e78af
 8012bbc:	3fcc71c5 	.word	0x3fcc71c5
 8012bc0:	9997fa04 	.word	0x9997fa04
 8012bc4:	3fd99999 	.word	0x3fd99999
 8012bc8:	c3500000 	.word	0xc3500000
 8012bcc:	43500000 	.word	0x43500000
 8012bd0:	7fefffff 	.word	0x7fefffff
 8012bd4:	3ff00000 	.word	0x3ff00000
 8012bd8:	3fe00000 	.word	0x3fe00000

08012bdc <copysign>:
 8012bdc:	ec51 0b10 	vmov	r0, r1, d0
 8012be0:	ee11 0a90 	vmov	r0, s3
 8012be4:	ee10 2a10 	vmov	r2, s0
 8012be8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012bec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012bf0:	ea41 0300 	orr.w	r3, r1, r0
 8012bf4:	ec43 2b10 	vmov	d0, r2, r3
 8012bf8:	4770      	bx	lr
	...

08012bfc <_init>:
 8012bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bfe:	bf00      	nop
 8012c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c02:	bc08      	pop	{r3}
 8012c04:	469e      	mov	lr, r3
 8012c06:	4770      	bx	lr

08012c08 <_fini>:
 8012c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c0a:	bf00      	nop
 8012c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c0e:	bc08      	pop	{r3}
 8012c10:	469e      	mov	lr, r3
 8012c12:	4770      	bx	lr
