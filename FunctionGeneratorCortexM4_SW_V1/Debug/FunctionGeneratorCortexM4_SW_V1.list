
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a904  0800a904  00020bc8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a904  0800a904  00020bc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a904  0800a904  00020bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a908  0800a908  0001a908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc8  20000000  0800a90c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000bc8  0800b4d4  00020bc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  0800b4d4  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028334  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005410  00000000  00000000  00048f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d50  00000000  00000000  0004e340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a28  00000000  00000000  00050090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fef5  00000000  00000000  00051ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f9b5  00000000  00000000  000819ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012413d  00000000  00000000  000a1362  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c549f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d74  00000000  00000000  001c551c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000bc8 	.word	0x20000bc8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a398 	.word	0x0800a398

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000bcc 	.word	0x20000bcc
 800021c:	0800a398 	.word	0x0800a398

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f008 fc9e 	bl	8008c04 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f008 fc3d 	bl	8008b48 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f008 fe4d 	bl	8008f70 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f008 fb28 	bl	8008948 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f002 fe16 	bl	8002f2c <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fb2e 	bl	8000960 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f009 f8db 	bl	80094c0 <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800a3b0 	.word	0x0800a3b0
 8000314:	0800a3c0 	.word	0x0800a3c0

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 800031e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	2302      	movs	r3, #2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	22d2      	movs	r2, #210	; 0xd2
 800032c:	210a      	movs	r1, #10
 800032e:	482c      	ldr	r0, [pc, #176]	; (80003e0 <DM_UpdateDisplay+0xc8>)
 8000330:	f008 fb0a 	bl	8008948 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000334:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2302      	movs	r3, #2
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	22d2      	movs	r2, #210	; 0xd2
 8000342:	2164      	movs	r1, #100	; 0x64
 8000344:	4827      	ldr	r0, [pc, #156]	; (80003e4 <DM_UpdateDisplay+0xcc>)
 8000346:	f008 faff 	bl	8008948 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 800034a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	2302      	movs	r3, #2
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2300      	movs	r3, #0
 8000356:	22d2      	movs	r2, #210	; 0xd2
 8000358:	21af      	movs	r1, #175	; 0xaf
 800035a:	4823      	ldr	r0, [pc, #140]	; (80003e8 <DM_UpdateDisplay+0xd0>)
 800035c:	f008 faf4 	bl	8008948 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000360:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2302      	movs	r3, #2
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	22d2      	movs	r2, #210	; 0xd2
 800036e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000372:	481e      	ldr	r0, [pc, #120]	; (80003ec <DM_UpdateDisplay+0xd4>)
 8000374:	f008 fae8 	bl	8008948 <ILI9341_Draw_Text>

	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000378:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <DM_UpdateDisplay+0xd8>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <DM_UpdateDisplay+0x6c>
		_DrawFuncSelectMenu();
 8000380:	f000 f850 	bl	8000424 <_DrawFuncSelectMenu>

	if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <DM_UpdateDisplay+0xdc>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <DM_UpdateDisplay+0x78>
		_DrawGainSelectMenu();
 800038c:	f000 fa14 	bl	80007b8 <_DrawGainSelectMenu>

	if(eNextFreqMenuStatus)		//  == ENABLE_FREQMENU
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <DM_UpdateDisplay+0xe0>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <DM_UpdateDisplay+0x84>
		_DrawFreqSelectMenu();
 8000398:	f000 fa48 	bl	800082c <_DrawFreqSelectMenu>

	if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 800039c:	4b17      	ldr	r3, [pc, #92]	; (80003fc <DM_UpdateDisplay+0xe4>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <DM_UpdateDisplay+0x90>
		_DrawBiasSelectMenu();
 80003a4:	f000 fa82 	bl	80008ac <_DrawBiasSelectMenu>

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 80003a8:	2300      	movs	r3, #0
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	2300      	movs	r3, #0
 80003ae:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)+1);
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <DM_UpdateDisplay+0xe8>)
 80003b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	4639      	mov	r1, r7
 80003b8:	2206      	movs	r2, #6
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fb14 	bl	80009e8 <DM_AddDigitPadding>
	ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 80003c0:	4638      	mov	r0, r7
 80003c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003c6:	9301      	str	r3, [sp, #4]
 80003c8:	2302      	movs	r3, #2
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	2300      	movs	r3, #0
 80003ce:	2232      	movs	r2, #50	; 0x32
 80003d0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80003d4:	f008 fab8 	bl	8008948 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	0800a3d0 	.word	0x0800a3d0
 80003e4:	0800a3d8 	.word	0x0800a3d8
 80003e8:	0800a3e0 	.word	0x0800a3e0
 80003ec:	0800a3e8 	.word	0x0800a3e8
 80003f0:	20000be4 	.word	0x20000be4
 80003f4:	20000be5 	.word	0x20000be5
 80003f8:	20000be6 	.word	0x20000be6
 80003fc:	20000be7 	.word	0x20000be7
 8000400:	40012c00 	.word	0x40012c00

08000404 <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 800040e:	4a04      	ldr	r2, [pc, #16]	; (8000420 <DM_ShowFuncSelectMenu+0x1c>)
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	7013      	strb	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	20000be4 	.word	0x20000be4

08000424 <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af02      	add	r7, sp, #8

	switch(FuncO_GetOutputMode())
 800042a:	f000 fe3b 	bl	80010a4 <FuncO_GetOutputMode>
 800042e:	4603      	mov	r3, r0
 8000430:	2b05      	cmp	r3, #5
 8000432:	f200 81a1 	bhi.w	8000778 <_DrawFuncSelectMenu+0x354>
 8000436:	a201      	add	r2, pc, #4	; (adr r2, 800043c <_DrawFuncSelectMenu+0x18>)
 8000438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043c:	08000455 	.word	0x08000455
 8000440:	080004db 	.word	0x080004db
 8000444:	08000561 	.word	0x08000561
 8000448:	080005e7 	.word	0x080005e7
 800044c:	0800066d 	.word	0x0800066d
 8000450:	080006f3 	.word	0x080006f3
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 8000454:	2300      	movs	r3, #0
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	2302      	movs	r3, #2
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000460:	221e      	movs	r2, #30
 8000462:	210a      	movs	r1, #10
 8000464:	48c6      	ldr	r0, [pc, #792]	; (8000780 <_DrawFuncSelectMenu+0x35c>)
 8000466:	f008 fa6f 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800046a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046e:	9301      	str	r3, [sp, #4]
 8000470:	2302      	movs	r3, #2
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2300      	movs	r3, #0
 8000476:	2232      	movs	r2, #50	; 0x32
 8000478:	210a      	movs	r1, #10
 800047a:	48c2      	ldr	r0, [pc, #776]	; (8000784 <_DrawFuncSelectMenu+0x360>)
 800047c:	f008 fa64 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	2302      	movs	r3, #2
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2300      	movs	r3, #0
 800048c:	2246      	movs	r2, #70	; 0x46
 800048e:	210a      	movs	r1, #10
 8000490:	48bd      	ldr	r0, [pc, #756]	; (8000788 <_DrawFuncSelectMenu+0x364>)
 8000492:	f008 fa59 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	2302      	movs	r3, #2
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2300      	movs	r3, #0
 80004a2:	225a      	movs	r2, #90	; 0x5a
 80004a4:	210a      	movs	r1, #10
 80004a6:	48b9      	ldr	r0, [pc, #740]	; (800078c <_DrawFuncSelectMenu+0x368>)
 80004a8:	f008 fa4e 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80004ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2302      	movs	r3, #2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	2300      	movs	r3, #0
 80004b8:	226e      	movs	r2, #110	; 0x6e
 80004ba:	210a      	movs	r1, #10
 80004bc:	48b4      	ldr	r0, [pc, #720]	; (8000790 <_DrawFuncSelectMenu+0x36c>)
 80004be:	f008 fa43 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80004c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2302      	movs	r3, #2
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2300      	movs	r3, #0
 80004ce:	2282      	movs	r2, #130	; 0x82
 80004d0:	210a      	movs	r1, #10
 80004d2:	48b0      	ldr	r0, [pc, #704]	; (8000794 <_DrawFuncSelectMenu+0x370>)
 80004d4:	f008 fa38 	bl	8008948 <ILI9341_Draw_Text>
			break;
 80004d8:	e14e      	b.n	8000778 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80004da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2302      	movs	r3, #2
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2300      	movs	r3, #0
 80004e6:	221e      	movs	r2, #30
 80004e8:	210a      	movs	r1, #10
 80004ea:	48a5      	ldr	r0, [pc, #660]	; (8000780 <_DrawFuncSelectMenu+0x35c>)
 80004ec:	f008 fa2c 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 80004f0:	2300      	movs	r3, #0
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	2302      	movs	r3, #2
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004fc:	2232      	movs	r2, #50	; 0x32
 80004fe:	210a      	movs	r1, #10
 8000500:	48a0      	ldr	r0, [pc, #640]	; (8000784 <_DrawFuncSelectMenu+0x360>)
 8000502:	f008 fa21 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2302      	movs	r3, #2
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2300      	movs	r3, #0
 8000512:	2246      	movs	r2, #70	; 0x46
 8000514:	210a      	movs	r1, #10
 8000516:	489c      	ldr	r0, [pc, #624]	; (8000788 <_DrawFuncSelectMenu+0x364>)
 8000518:	f008 fa16 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800051c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2302      	movs	r3, #2
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	225a      	movs	r2, #90	; 0x5a
 800052a:	210a      	movs	r1, #10
 800052c:	4897      	ldr	r0, [pc, #604]	; (800078c <_DrawFuncSelectMenu+0x368>)
 800052e:	f008 fa0b 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	2302      	movs	r3, #2
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	226e      	movs	r2, #110	; 0x6e
 8000540:	210a      	movs	r1, #10
 8000542:	4893      	ldr	r0, [pc, #588]	; (8000790 <_DrawFuncSelectMenu+0x36c>)
 8000544:	f008 fa00 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2302      	movs	r3, #2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	2282      	movs	r2, #130	; 0x82
 8000556:	210a      	movs	r1, #10
 8000558:	488e      	ldr	r0, [pc, #568]	; (8000794 <_DrawFuncSelectMenu+0x370>)
 800055a:	f008 f9f5 	bl	8008948 <ILI9341_Draw_Text>
			break;
 800055e:	e10b      	b.n	8000778 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2302      	movs	r3, #2
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	221e      	movs	r2, #30
 800056e:	210a      	movs	r1, #10
 8000570:	4883      	ldr	r0, [pc, #524]	; (8000780 <_DrawFuncSelectMenu+0x35c>)
 8000572:	f008 f9e9 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	2302      	movs	r3, #2
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2300      	movs	r3, #0
 8000582:	2232      	movs	r2, #50	; 0x32
 8000584:	210a      	movs	r1, #10
 8000586:	487f      	ldr	r0, [pc, #508]	; (8000784 <_DrawFuncSelectMenu+0x360>)
 8000588:	f008 f9de 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 800058c:	2300      	movs	r3, #0
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2302      	movs	r3, #2
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000598:	2246      	movs	r2, #70	; 0x46
 800059a:	210a      	movs	r1, #10
 800059c:	487a      	ldr	r0, [pc, #488]	; (8000788 <_DrawFuncSelectMenu+0x364>)
 800059e:	f008 f9d3 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80005a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2302      	movs	r3, #2
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	225a      	movs	r2, #90	; 0x5a
 80005b0:	210a      	movs	r1, #10
 80005b2:	4876      	ldr	r0, [pc, #472]	; (800078c <_DrawFuncSelectMenu+0x368>)
 80005b4:	f008 f9c8 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	226e      	movs	r2, #110	; 0x6e
 80005c6:	210a      	movs	r1, #10
 80005c8:	4871      	ldr	r0, [pc, #452]	; (8000790 <_DrawFuncSelectMenu+0x36c>)
 80005ca:	f008 f9bd 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2302      	movs	r3, #2
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	2282      	movs	r2, #130	; 0x82
 80005dc:	210a      	movs	r1, #10
 80005de:	486d      	ldr	r0, [pc, #436]	; (8000794 <_DrawFuncSelectMenu+0x370>)
 80005e0:	f008 f9b2 	bl	8008948 <ILI9341_Draw_Text>
			break;
 80005e4:	e0c8      	b.n	8000778 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	2302      	movs	r3, #2
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	221e      	movs	r2, #30
 80005f4:	210a      	movs	r1, #10
 80005f6:	4862      	ldr	r0, [pc, #392]	; (8000780 <_DrawFuncSelectMenu+0x35c>)
 80005f8:	f008 f9a6 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80005fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2232      	movs	r2, #50	; 0x32
 800060a:	210a      	movs	r1, #10
 800060c:	485d      	ldr	r0, [pc, #372]	; (8000784 <_DrawFuncSelectMenu+0x360>)
 800060e:	f008 f99b 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	2302      	movs	r3, #2
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2300      	movs	r3, #0
 800061e:	2246      	movs	r2, #70	; 0x46
 8000620:	210a      	movs	r1, #10
 8000622:	4859      	ldr	r0, [pc, #356]	; (8000788 <_DrawFuncSelectMenu+0x364>)
 8000624:	f008 f990 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000634:	225a      	movs	r2, #90	; 0x5a
 8000636:	210a      	movs	r1, #10
 8000638:	4854      	ldr	r0, [pc, #336]	; (800078c <_DrawFuncSelectMenu+0x368>)
 800063a:	f008 f985 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800063e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	2302      	movs	r3, #2
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	226e      	movs	r2, #110	; 0x6e
 800064c:	210a      	movs	r1, #10
 800064e:	4850      	ldr	r0, [pc, #320]	; (8000790 <_DrawFuncSelectMenu+0x36c>)
 8000650:	f008 f97a 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	2302      	movs	r3, #2
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2300      	movs	r3, #0
 8000660:	2282      	movs	r2, #130	; 0x82
 8000662:	210a      	movs	r1, #10
 8000664:	484b      	ldr	r0, [pc, #300]	; (8000794 <_DrawFuncSelectMenu+0x370>)
 8000666:	f008 f96f 	bl	8008948 <ILI9341_Draw_Text>
			break;
 800066a:	e085      	b.n	8000778 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800066c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2302      	movs	r3, #2
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	221e      	movs	r2, #30
 800067a:	210a      	movs	r1, #10
 800067c:	4840      	ldr	r0, [pc, #256]	; (8000780 <_DrawFuncSelectMenu+0x35c>)
 800067e:	f008 f963 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	2302      	movs	r3, #2
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2232      	movs	r2, #50	; 0x32
 8000690:	210a      	movs	r1, #10
 8000692:	483c      	ldr	r0, [pc, #240]	; (8000784 <_DrawFuncSelectMenu+0x360>)
 8000694:	f008 f958 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2302      	movs	r3, #2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	2246      	movs	r2, #70	; 0x46
 80006a6:	210a      	movs	r1, #10
 80006a8:	4837      	ldr	r0, [pc, #220]	; (8000788 <_DrawFuncSelectMenu+0x364>)
 80006aa:	f008 f94d 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80006ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	2302      	movs	r3, #2
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	225a      	movs	r2, #90	; 0x5a
 80006bc:	210a      	movs	r1, #10
 80006be:	4833      	ldr	r0, [pc, #204]	; (800078c <_DrawFuncSelectMenu+0x368>)
 80006c0:	f008 f942 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 80006c4:	2300      	movs	r3, #0
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2302      	movs	r3, #2
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d0:	226e      	movs	r2, #110	; 0x6e
 80006d2:	210a      	movs	r1, #10
 80006d4:	482e      	ldr	r0, [pc, #184]	; (8000790 <_DrawFuncSelectMenu+0x36c>)
 80006d6:	f008 f937 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80006da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	2302      	movs	r3, #2
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2300      	movs	r3, #0
 80006e6:	2282      	movs	r2, #130	; 0x82
 80006e8:	210a      	movs	r1, #10
 80006ea:	482a      	ldr	r0, [pc, #168]	; (8000794 <_DrawFuncSelectMenu+0x370>)
 80006ec:	f008 f92c 	bl	8008948 <ILI9341_Draw_Text>
			break;
 80006f0:	e042      	b.n	8000778 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80006f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	2302      	movs	r3, #2
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	221e      	movs	r2, #30
 8000700:	210a      	movs	r1, #10
 8000702:	481f      	ldr	r0, [pc, #124]	; (8000780 <_DrawFuncSelectMenu+0x35c>)
 8000704:	f008 f920 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2302      	movs	r3, #2
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2232      	movs	r2, #50	; 0x32
 8000716:	210a      	movs	r1, #10
 8000718:	481a      	ldr	r0, [pc, #104]	; (8000784 <_DrawFuncSelectMenu+0x360>)
 800071a:	f008 f915 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800071e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	2302      	movs	r3, #2
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2300      	movs	r3, #0
 800072a:	2246      	movs	r2, #70	; 0x46
 800072c:	210a      	movs	r1, #10
 800072e:	4816      	ldr	r0, [pc, #88]	; (8000788 <_DrawFuncSelectMenu+0x364>)
 8000730:	f008 f90a 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2302      	movs	r3, #2
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2300      	movs	r3, #0
 8000740:	225a      	movs	r2, #90	; 0x5a
 8000742:	210a      	movs	r1, #10
 8000744:	4811      	ldr	r0, [pc, #68]	; (800078c <_DrawFuncSelectMenu+0x368>)
 8000746:	f008 f8ff 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800074a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	2302      	movs	r3, #2
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2300      	movs	r3, #0
 8000756:	226e      	movs	r2, #110	; 0x6e
 8000758:	210a      	movs	r1, #10
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <_DrawFuncSelectMenu+0x36c>)
 800075c:	f008 f8f4 	bl	8008948 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 8000760:	2300      	movs	r3, #0
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	2302      	movs	r3, #2
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076c:	2282      	movs	r2, #130	; 0x82
 800076e:	210a      	movs	r1, #10
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <_DrawFuncSelectMenu+0x370>)
 8000772:	f008 f8e9 	bl	8008948 <ILI9341_Draw_Text>
			break;
 8000776:	bf00      	nop

	}

}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	0800a3f0 	.word	0x0800a3f0
 8000784:	0800a3f8 	.word	0x0800a3f8
 8000788:	0800a404 	.word	0x0800a404
 800078c:	0800a40c 	.word	0x0800a40c
 8000790:	0800a418 	.word	0x0800a418
 8000794:	0800a424 	.word	0x0800a424

08000798 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <DM_ShowGainSelectMenu+0x1c>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	7013      	strb	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	20000be5 	.word	0x20000be5

080007b8 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 80007be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	2302      	movs	r3, #2
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2300      	movs	r3, #0
 80007ca:	2278      	movs	r2, #120	; 0x78
 80007cc:	210a      	movs	r1, #10
 80007ce:	480e      	ldr	r0, [pc, #56]	; (8000808 <_DrawGainSelectMenu+0x50>)
 80007d0:	f008 f8ba 	bl	8008948 <ILI9341_Draw_Text>

	char gain[2] = "";
 80007d4:	2300      	movs	r3, #0
 80007d6:	80bb      	strh	r3, [r7, #4]
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)+1);
 80007d8:	f000 fd5c 	bl	8001294 <GO_GetOutputGain>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29b      	uxth	r3, r3
 80007e0:	1d39      	adds	r1, r7, #4
 80007e2:	2203      	movs	r2, #3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f8ff 	bl	80009e8 <DM_AddDigitPadding>
	ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 80007ea:	1d38      	adds	r0, r7, #4
 80007ec:	2300      	movs	r3, #0
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	2302      	movs	r3, #2
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f8:	2278      	movs	r2, #120	; 0x78
 80007fa:	21fa      	movs	r1, #250	; 0xfa
 80007fc:	f008 f8a4 	bl	8008948 <ILI9341_Draw_Text>

}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	0800a42c 	.word	0x0800a42c

0800080c <DM_ShowFreqSelectMenu>:
 *
 *
 *
 */
void DM_ShowFreqSelectMenu(eFreqMenu_Status pValue)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <DM_ShowFreqSelectMenu+0x1c>)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	7013      	strb	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	20000be6 	.word	0x20000be6

0800082c <_DrawFreqSelectMenu>:
 *
 *
 *
 */
void _DrawFreqSelectMenu()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 120, BLACK, 2, WHITE);
 8000832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	2302      	movs	r3, #2
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2300      	movs	r3, #0
 800083e:	2278      	movs	r2, #120	; 0x78
 8000840:	210a      	movs	r1, #10
 8000842:	4810      	ldr	r0, [pc, #64]	; (8000884 <_DrawFreqSelectMenu+0x58>)
 8000844:	f008 f880 	bl	8008948 <ILI9341_Draw_Text>

	char freq[3] = "";
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <_DrawFreqSelectMenu+0x5c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	713b      	strb	r3, [r7, #4]
 800084e:	1d7b      	adds	r3, r7, #5
 8000850:	2200      	movs	r2, #0
 8000852:	801a      	strh	r2, [r3, #0]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)+1);
 8000854:	f000 fb68 	bl	8000f28 <FreqO_GetOutputFreq>
 8000858:	4603      	mov	r3, r0
 800085a:	b29b      	uxth	r3, r3
 800085c:	1d39      	adds	r1, r7, #4
 800085e:	2204      	movs	r2, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f8c1 	bl	80009e8 <DM_AddDigitPadding>
	ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
 8000866:	1d38      	adds	r0, r7, #4
 8000868:	2300      	movs	r3, #0
 800086a:	9301      	str	r3, [sp, #4]
 800086c:	2302      	movs	r3, #2
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000874:	2278      	movs	r2, #120	; 0x78
 8000876:	21fa      	movs	r1, #250	; 0xfa
 8000878:	f008 f866 	bl	8008948 <ILI9341_Draw_Text>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	0800a444 	.word	0x0800a444
 8000888:	0800a45c 	.word	0x0800a45c

0800088c <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <DM_ShowBiasSelectMenu+0x1c>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	7013      	strb	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	20000be7 	.word	0x20000be7

080008ac <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 80008b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2300      	movs	r3, #0
 80008be:	2278      	movs	r2, #120	; 0x78
 80008c0:	210a      	movs	r1, #10
 80008c2:	4810      	ldr	r0, [pc, #64]	; (8000904 <_DrawBiasSelectMenu+0x58>)
 80008c4:	f008 f840 	bl	8008948 <ILI9341_Draw_Text>

	char bias[3] = "";
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <_DrawBiasSelectMenu+0x5c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	713b      	strb	r3, [r7, #4]
 80008ce:	1d7b      	adds	r3, r7, #5
 80008d0:	2200      	movs	r2, #0
 80008d2:	801a      	strh	r2, [r3, #0]
	//snprintf(bias, sizeof(bias), "%u", (uint8_t)BO_GetOutputBias());
	DM_AddDigitPadding((uint16_t)BO_GetOutputBias(), bias, sizeof(bias)+1);
 80008d4:	f000 fb0e 	bl	8000ef4 <BO_GetOutputBias>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29b      	uxth	r3, r3
 80008dc:	1d39      	adds	r1, r7, #4
 80008de:	2204      	movs	r2, #4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f881 	bl	80009e8 <DM_AddDigitPadding>
	ILI9341_Draw_Text(bias, 250, 120, WHITE, 2, BLACK);
 80008e6:	1d38      	adds	r0, r7, #4
 80008e8:	2300      	movs	r3, #0
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	2302      	movs	r3, #2
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f4:	2278      	movs	r2, #120	; 0x78
 80008f6:	21fa      	movs	r1, #250	; 0xfa
 80008f8:	f008 f826 	bl	8008948 <ILI9341_Draw_Text>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	0800a460 	.word	0x0800a460
 8000908:	0800a45c 	.word	0x0800a45c

0800090c <DM_DigitCount>:
 *
 *
 *
 */
int DM_DigitCount(int num)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	if(num < 10)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b09      	cmp	r3, #9
 8000918:	dc01      	bgt.n	800091e <DM_DigitCount+0x12>
		return 1;
 800091a:	2301      	movs	r3, #1
 800091c:	e018      	b.n	8000950 <DM_DigitCount+0x44>
	if(num < 100)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b63      	cmp	r3, #99	; 0x63
 8000922:	dc01      	bgt.n	8000928 <DM_DigitCount+0x1c>
		return 2;
 8000924:	2302      	movs	r3, #2
 8000926:	e013      	b.n	8000950 <DM_DigitCount+0x44>
	if(num < 1000)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800092e:	da01      	bge.n	8000934 <DM_DigitCount+0x28>
		return 3;
 8000930:	2303      	movs	r3, #3
 8000932:	e00d      	b.n	8000950 <DM_DigitCount+0x44>
	if(num < 10000)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f242 720f 	movw	r2, #9999	; 0x270f
 800093a:	4293      	cmp	r3, r2
 800093c:	dc01      	bgt.n	8000942 <DM_DigitCount+0x36>
		return 4;
 800093e:	2304      	movs	r3, #4
 8000940:	e006      	b.n	8000950 <DM_DigitCount+0x44>
	if(num < 100000)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <DM_DigitCount+0x50>)
 8000946:	4293      	cmp	r3, r2
 8000948:	dc01      	bgt.n	800094e <DM_DigitCount+0x42>
		return 5;
 800094a:	2305      	movs	r3, #5
 800094c:	e000      	b.n	8000950 <DM_DigitCount+0x44>
	else
		return 0;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	0001869f 	.word	0x0001869f

08000960 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af04      	add	r7, sp, #16


	ILI9341_Fill_Screen(WHITE);
 8000966:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800096a:	f008 fb01 	bl	8008f70 <ILI9341_Fill_Screen>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <DM_RefreshBackgroundLayout+0x84>)
 8000970:	8818      	ldrh	r0, [r3, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	2302      	movs	r3, #2
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	2250      	movs	r2, #80	; 0x50
 8000984:	21c8      	movs	r1, #200	; 0xc8
 8000986:	f007 fe75 	bl	8008674 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <DM_RefreshBackgroundLayout+0x84>)
 800098c:	8858      	ldrh	r0, [r3, #2]
 800098e:	2300      	movs	r3, #0
 8000990:	9302      	str	r3, [sp, #8]
 8000992:	2302      	movs	r3, #2
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2332      	movs	r3, #50	; 0x32
 800099e:	2250      	movs	r2, #80	; 0x50
 80009a0:	21c8      	movs	r1, #200	; 0xc8
 80009a2:	f007 fe67 	bl	8008674 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <DM_RefreshBackgroundLayout+0x84>)
 80009a8:	8898      	ldrh	r0, [r3, #4]
 80009aa:	2300      	movs	r3, #0
 80009ac:	9302      	str	r3, [sp, #8]
 80009ae:	2302      	movs	r3, #2
 80009b0:	9301      	str	r3, [sp, #4]
 80009b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2332      	movs	r3, #50	; 0x32
 80009ba:	2250      	movs	r2, #80	; 0x50
 80009bc:	21c8      	movs	r1, #200	; 0xc8
 80009be:	f007 fe59 	bl	8008674 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <DM_RefreshBackgroundLayout+0x84>)
 80009c4:	88d8      	ldrh	r0, [r3, #6]
 80009c6:	2300      	movs	r3, #0
 80009c8:	9302      	str	r3, [sp, #8]
 80009ca:	2302      	movs	r3, #2
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2332      	movs	r3, #50	; 0x32
 80009d6:	2250      	movs	r2, #80	; 0x50
 80009d8:	21c8      	movs	r1, #200	; 0xc8
 80009da:	f007 fe4b 	bl	8008674 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000000 	.word	0x20000000

080009e8 <DM_AddDigitPadding>:
 *				1 if buflen is invalid size
 *				2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	80fb      	strh	r3, [r7, #6]
 80009f4:	4613      	mov	r3, r2
 80009f6:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <DM_AddDigitPadding+0x1c>
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	2b06      	cmp	r3, #6
 8000a02:	d901      	bls.n	8000a08 <DM_AddDigitPadding+0x20>
		return 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e048      	b.n	8000a9a <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff7c 	bl	800090c <DM_DigitCount>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b05      	cmp	r3, #5
 8000a18:	d83e      	bhi.n	8000a98 <DM_AddDigitPadding+0xb0>
 8000a1a:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <DM_AddDigitPadding+0x38>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a39 	.word	0x08000a39
 8000a24:	08000a49 	.word	0x08000a49
 8000a28:	08000a59 	.word	0x08000a59
 8000a2c:	08000a69 	.word	0x08000a69
 8000a30:	08000a79 	.word	0x08000a79
 8000a34:	08000a89 	.word	0x08000a89
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	4a1a      	ldr	r2, [pc, #104]	; (8000aa4 <DM_AddDigitPadding+0xbc>)
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	f008 fd46 	bl	80094d0 <sniprintf>
			return 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	e028      	b.n	8000a9a <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8000a48:	88b9      	ldrh	r1, [r7, #4]
 8000a4a:	89fb      	ldrh	r3, [r7, #14]
 8000a4c:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <DM_AddDigitPadding+0xc0>)
 8000a4e:	6838      	ldr	r0, [r7, #0]
 8000a50:	f008 fd3e 	bl	80094d0 <sniprintf>
			return 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	e020      	b.n	8000a9a <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8000a58:	88b9      	ldrh	r1, [r7, #4]
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <DM_AddDigitPadding+0xc4>)
 8000a5e:	6838      	ldr	r0, [r7, #0]
 8000a60:	f008 fd36 	bl	80094d0 <sniprintf>
			return 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e018      	b.n	8000a9a <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8000a68:	88b9      	ldrh	r1, [r7, #4]
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <DM_AddDigitPadding+0xc8>)
 8000a6e:	6838      	ldr	r0, [r7, #0]
 8000a70:	f008 fd2e 	bl	80094d0 <sniprintf>
			return 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	e010      	b.n	8000a9a <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8000a78:	88b9      	ldrh	r1, [r7, #4]
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <DM_AddDigitPadding+0xcc>)
 8000a7e:	6838      	ldr	r0, [r7, #0]
 8000a80:	f008 fd26 	bl	80094d0 <sniprintf>
			return 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	e008      	b.n	8000a9a <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8000a88:	88b9      	ldrh	r1, [r7, #4]
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <DM_AddDigitPadding+0xd0>)
 8000a8e:	6838      	ldr	r0, [r7, #0]
 8000a90:	f008 fd1e 	bl	80094d0 <sniprintf>
			return 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	e000      	b.n	8000a9a <DM_AddDigitPadding+0xb2>

	}

	return 2;
 8000a98:	2302      	movs	r3, #2


}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	0800a4b0 	.word	0x0800a4b0
 8000aa8:	0800a4b8 	.word	0x0800a4b8
 8000aac:	0800a4c0 	.word	0x0800a4c0
 8000ab0:	0800a4c8 	.word	0x0800a4c8
 8000ab4:	0800a4d0 	.word	0x0800a4d0
 8000ab8:	0800a4d4 	.word	0x0800a4d4

08000abc <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

	switch(eNextState)
 8000ac0:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	f200 808a 	bhi.w	8000bde <EM_ProcessEvent+0x122>
 8000aca:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <EM_ProcessEvent+0x14>)
 8000acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad0:	08000ae5 	.word	0x08000ae5
 8000ad4:	08000b37 	.word	0x08000b37
 8000ad8:	08000b61 	.word	0x08000b61
 8000adc:	08000b8b 	.word	0x08000b8b
 8000ae0:	08000bb5 	.word	0x08000bb5
	{
		case Idle_State:
			if(eNewEvent == evFuncMenu)
 8000ae4:	4b45      	ldr	r3, [pc, #276]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d105      	bne.n	8000af8 <EM_ProcessEvent+0x3c>
			{
				eNextState = _FuncMenuHandler();
 8000aec:	f000 f888 	bl	8000c00 <_FuncMenuHandler>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000af6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evFreqMenu)
 8000af8:	4b40      	ldr	r3, [pc, #256]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d105      	bne.n	8000b0c <EM_ProcessEvent+0x50>
			{
				eNextState = _FreqMenuHandler();
 8000b00:	f000 f95e 	bl	8000dc0 <_FreqMenuHandler>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000b0a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGainMenu)
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d105      	bne.n	8000b20 <EM_ProcessEvent+0x64>
			{
				eNextState = _GainMenuHandler();
 8000b14:	f000 f8be 	bl	8000c94 <_GainMenuHandler>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000b1e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBiasMenu)
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d15c      	bne.n	8000be2 <EM_ProcessEvent+0x126>
			{
				eNextState = _BiasMenuHandler();
 8000b28:	f000 f8fe 	bl	8000d28 <_BiasMenuHandler>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000b32:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000b34:	e055      	b.n	8000be2 <EM_ProcessEvent+0x126>

		case Func_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000b36:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d105      	bne.n	8000b4a <EM_ProcessEvent+0x8e>
			{
				eNextState = _FuncSetHandler();
 8000b3e:	f000 f875 	bl	8000c2c <_FuncSetHandler>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000b48:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d149      	bne.n	8000be6 <EM_ProcessEvent+0x12a>
			{
				eNextState = _ExitFuncMenuHandler();
 8000b52:	f000 f87d 	bl	8000c50 <_ExitFuncMenuHandler>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000b5c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b5e:	e042      	b.n	8000be6 <EM_ProcessEvent+0x12a>

		case Gain_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d105      	bne.n	8000b74 <EM_ProcessEvent+0xb8>
			{
				eNextState = _GainSetHandler();
 8000b68:	f000 f8aa 	bl	8000cc0 <_GainSetHandler>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000b72:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b06      	cmp	r3, #6
 8000b7a:	d136      	bne.n	8000bea <EM_ProcessEvent+0x12e>
			{
				eNextState = _ExitGainMenuHandler();
 8000b7c:	f000 f8b2 	bl	8000ce4 <_ExitGainMenuHandler>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000b86:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b88:	e02f      	b.n	8000bea <EM_ProcessEvent+0x12e>

		case Freq_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d105      	bne.n	8000b9e <EM_ProcessEvent+0xe2>
			{
				eNextState = _FreqSetHandler();
 8000b92:	f000 f92b 	bl	8000dec <_FreqSetHandler>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000b9c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d123      	bne.n	8000bee <EM_ProcessEvent+0x132>
			{
				eNextState = _ExitFreqMenuHandler();
 8000ba6:	f000 f933 	bl	8000e10 <_ExitFreqMenuHandler>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000bb0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000bb2:	e01c      	b.n	8000bee <EM_ProcessEvent+0x132>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b05      	cmp	r3, #5
 8000bba:	d105      	bne.n	8000bc8 <EM_ProcessEvent+0x10c>
			{
				eNextState = _BiasSetHandler();
 8000bbc:	f000 f8cc 	bl	8000d58 <_BiasSetHandler>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000bc6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <EM_ProcessEvent+0x140>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	d110      	bne.n	8000bf2 <EM_ProcessEvent+0x136>
			{
				eNextState = _ExitBiasMenuHandler();
 8000bd0:	f000 f8d4 	bl	8000d7c <_ExitBiasMenuHandler>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <EM_ProcessEvent+0x13c>)
 8000bda:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000bdc:	e009      	b.n	8000bf2 <EM_ProcessEvent+0x136>

		default:
			break;
 8000bde:	bf00      	nop
 8000be0:	e008      	b.n	8000bf4 <EM_ProcessEvent+0x138>
			break;
 8000be2:	bf00      	nop
 8000be4:	e006      	b.n	8000bf4 <EM_ProcessEvent+0x138>
			break;
 8000be6:	bf00      	nop
 8000be8:	e004      	b.n	8000bf4 <EM_ProcessEvent+0x138>
			break;
 8000bea:	bf00      	nop
 8000bec:	e002      	b.n	8000bf4 <EM_ProcessEvent+0x138>
			break;
 8000bee:	bf00      	nop
 8000bf0:	e000      	b.n	8000bf4 <EM_ProcessEvent+0x138>
			break;
 8000bf2:	bf00      	nop
	}

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000be8 	.word	0x20000be8
 8000bfc:	20000be9 	.word	0x20000be9

08000c00 <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <_FuncMenuHandler+0x24>)
 8000c06:	f008 fc5b 	bl	80094c0 <puts>
#endif

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fbfa 	bl	8000404 <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 0;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_FuncMenuHandler+0x28>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 20;
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <_FuncMenuHandler+0x28>)
 8000c18:	2214      	movs	r2, #20
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8000c1c:	2301      	movs	r3, #1
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	0800a4dc 	.word	0x0800a4dc
 8000c28:	40012c00 	.word	0x40012c00

08000c2c <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <_FuncSetHandler+0x1c>)
 8000c32:	f008 fc45 	bl	80094c0 <puts>
#endif

	FuncO_ModifyOutput();
 8000c36:	f000 f983 	bl	8000f40 <FuncO_ModifyOutput>
	eNewEvent = evFuncMenu;
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <_FuncSetHandler+0x20>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	0800a4f8 	.word	0x0800a4f8
 8000c4c:	20000be9 	.word	0x20000be9

08000c50 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <_ExitFuncMenuHandler+0x34>)
 8000c56:	f008 fc33 	bl	80094c0 <puts>
#endif

	// disable the menu
	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fbd2 	bl	8000404 <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <_ExitFuncMenuHandler+0x38>)
 8000c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <_ExitFuncMenuHandler+0x3c>)
 8000c6a:	f006 fa2b 	bl	80070c4 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000c6e:	f7ff fe77 	bl	8000960 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <_ExitFuncMenuHandler+0x3c>)
 8000c74:	f006 f9f0 	bl	8007058 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <_ExitFuncMenuHandler+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	0800a518 	.word	0x0800a518
 8000c88:	40012c00 	.word	0x40012c00
 8000c8c:	20000e98 	.word	0x20000e98
 8000c90:	20000be9 	.word	0x20000be9

08000c94 <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <_GainMenuHandler+0x24>)
 8000c9a:	f008 fc11 	bl	80094c0 <puts>
#endif
	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff fd7a 	bl	8000798 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 0;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <_GainMenuHandler+0x28>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 32;
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <_GainMenuHandler+0x28>)
 8000cac:	2220      	movs	r2, #32
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8000cb0:	2302      	movs	r3, #2
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	0800a534 	.word	0x0800a534
 8000cbc:	40012c00 	.word	0x40012c00

08000cc0 <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <_GainSetHandler+0x1c>)
 8000cc6:	f008 fbfb 	bl	80094c0 <puts>
#endif

	GO_ModifyOutput();
 8000cca:	f000 f9f7 	bl	80010bc <GO_ModifyOutput>

	eNewEvent = evGainMenu;
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <_GainSetHandler+0x20>)
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8000cd4:	2302      	movs	r3, #2
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	0800a54c 	.word	0x0800a54c
 8000ce0:	20000be9 	.word	0x20000be9

08000ce4 <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <_ExitGainMenuHandler+0x34>)
 8000cea:	f008 fbe9 	bl	80094c0 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fd52 	bl	8000798 <DM_ShowGainSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <_ExitGainMenuHandler+0x38>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <_ExitGainMenuHandler+0x3c>)
 8000cfe:	f006 f9e1 	bl	80070c4 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d02:	f7ff fe2d 	bl	8000960 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <_ExitGainMenuHandler+0x3c>)
 8000d08:	f006 f9a6 	bl	8007058 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <_ExitGainMenuHandler+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	0800a564 	.word	0x0800a564
 8000d1c:	40012c00 	.word	0x40012c00
 8000d20:	20000e98 	.word	0x20000e98
 8000d24:	20000be9 	.word	0x20000be9

08000d28 <_BiasMenuHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuHandler()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8000d2c:	4808      	ldr	r0, [pc, #32]	; (8000d50 <_BiasMenuHandler+0x28>)
 8000d2e:	f008 fbc7 	bl	80094c0 <puts>
#endif
	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fdaa 	bl	800088c <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <_BiasMenuHandler+0x2c>)
 8000d3a:	f240 3229 	movw	r2, #809	; 0x329
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <_BiasMenuHandler+0x2c>)
 8000d42:	f240 1299 	movw	r2, #409	; 0x199
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8000d48:	2304      	movs	r3, #4
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	0800a580 	.word	0x0800a580
 8000d54:	40012c00 	.word	0x40012c00

08000d58 <_BiasSetHandler>:
 *
 *
 *
 */
eSystemState _BiasSetHandler()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <_BiasSetHandler+0x1c>)
 8000d5e:	f008 fbaf 	bl	80094c0 <puts>
#endif

	BO_ModifyOutput();
 8000d62:	f000 f887 	bl	8000e74 <BO_ModifyOutput>

	eNewEvent = evBiasMenu;
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <_BiasSetHandler+0x20>)
 8000d68:	2204      	movs	r2, #4
 8000d6a:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8000d6c:	2304      	movs	r3, #4
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	0800a598 	.word	0x0800a598
 8000d78:	20000be9 	.word	0x20000be9

08000d7c <_ExitBiasMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitBiasMenuHandler()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <_ExitBiasMenuHandler+0x34>)
 8000d82:	f008 fb9d 	bl	80094c0 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fd80 	bl	800088c <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <_ExitBiasMenuHandler+0x38>)
 8000d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <_ExitBiasMenuHandler+0x3c>)
 8000d96:	f006 f995 	bl	80070c4 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d9a:	f7ff fde1 	bl	8000960 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <_ExitBiasMenuHandler+0x3c>)
 8000da0:	f006 f95a 	bl	8007058 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <_ExitBiasMenuHandler+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	0800a5b0 	.word	0x0800a5b0
 8000db4:	40012c00 	.word	0x40012c00
 8000db8:	20000e98 	.word	0x20000e98
 8000dbc:	20000be9 	.word	0x20000be9

08000dc0 <_FreqMenuHandler>:
 *
 *	Business logic for FREQ MENU events
 *
 */
eSystemState _FreqMenuHandler()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <_FreqMenuHandler+0x24>)
 8000dc6:	f008 fb7b 	bl	80094c0 <puts>
#endif
	DM_ShowFreqSelectMenu(ENABLE_FREQMENU);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff fd1e 	bl	800080c <DM_ShowFreqSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 0;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <_FreqMenuHandler+0x28>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 1024;
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <_FreqMenuHandler+0x28>)
 8000dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c

	return Freq_Menu_State;
 8000dde:	2303      	movs	r3, #3
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	0800a5cc 	.word	0x0800a5cc
 8000de8:	40012c00 	.word	0x40012c00

08000dec <_FreqSetHandler>:
 *
 *
 *
 */
eSystemState _FreqSetHandler()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <_FreqSetHandler+0x1c>)
 8000df2:	f008 fb65 	bl	80094c0 <puts>
#endif

	FreqO_ModifyOutput();
 8000df6:	f000 f889 	bl	8000f0c <FreqO_ModifyOutput>

	eNewEvent = evFreqMenu;
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <_FreqSetHandler+0x20>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	701a      	strb	r2, [r3, #0]
	return Freq_Menu_State;
 8000e00:	2303      	movs	r3, #3
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	0800a5e4 	.word	0x0800a5e4
 8000e0c:	20000be9 	.word	0x20000be9

08000e10 <_ExitFreqMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFreqMenuHandler()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFreqMenu Event captured\n");
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <_ExitFreqMenuHandler+0x34>)
 8000e16:	f008 fb53 	bl	80094c0 <puts>
#endif


	// disable the menu
	DM_ShowFreqSelectMenu(DISABLE_FREQMENU);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fcf6 	bl	800080c <DM_ShowFreqSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <_ExitFreqMenuHandler+0x38>)
 8000e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000e28:	4808      	ldr	r0, [pc, #32]	; (8000e4c <_ExitFreqMenuHandler+0x3c>)
 8000e2a:	f006 f94b 	bl	80070c4 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000e2e:	f7ff fd97 	bl	8000960 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <_ExitFreqMenuHandler+0x3c>)
 8000e34:	f006 f910 	bl	8007058 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <_ExitFreqMenuHandler+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0800a5fc 	.word	0x0800a5fc
 8000e48:	40012c00 	.word	0x40012c00
 8000e4c:	20000e98 	.word	0x20000e98
 8000e50:	20000be9 	.word	0x20000be9

08000e54 <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <EM_SetNewEvent+0x1c>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	7013      	strb	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	20000be9 	.word	0x20000be9

08000e74 <BO_ModifyOutput>:
 *
 *
 *
 */
void BO_ModifyOutput()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < 400) {
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f000 fa17 	bl	80012ac <SM_GetEncoderValue>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000e84:	d215      	bcs.n	8000eb2 <BO_ModifyOutput+0x3e>

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f000 fa10 	bl	80012ac <SM_GetEncoderValue>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f5c3 72cc 	rsb	r2, r3, #408	; 0x198
 8000e92:	3201      	adds	r2, #1
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <BO_ModifyOutput+0x7c>)
 8000ea2:	f003 fe41 	bl	8004b28 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f004 fd29 	bl	8005904 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= 400) {
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 f9fa 	bl	80012ac <SM_GetEncoderValue>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ebe:	d314      	bcc.n	8000eea <BO_ModifyOutput+0x76>

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f000 f9f3 	bl	80012ac <SM_GetEncoderValue>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f2a3 1299 	subw	r2, r3, #409	; 0x199
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <BO_ModifyOutput+0x7c>)
 8000eda:	f003 fe25 	bl	8004b28 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f004 fd0d 	bl	8005904 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000d14 	.word	0x20000d14

08000ef4 <BO_GetOutputBias>:
 *
 *
 *
 */
uint32_t BO_GetOutputBias()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <BO_GetOutputBias+0x14>)
 8000efc:	f003 fe50 	bl	8004ba0 <HAL_DAC_GetValue>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000d14 	.word	0x20000d14

08000f0c <FreqO_ModifyOutput>:
 *
 *
 *
 */
void FreqO_ModifyOutput()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	TIM8->ARR = SM_GetEncoderValue(ENCODER_REVERSE);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f000 f9cb 	bl	80012ac <SM_GetEncoderValue>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <FreqO_ModifyOutput+0x18>)
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40013400 	.word	0x40013400

08000f28 <FreqO_GetOutputFreq>:
 *
 *
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <FreqO_GetOutputFreq+0x14>)
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40013400 	.word	0x40013400

08000f40 <FuncO_ModifyOutput>:

// signal output function
eOutput_mode eNewOutMode = Sine_Out_Mode;

void FuncO_ModifyOutput()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af02      	add	r7, sp, #8


	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 f9b0 	bl	80012ac <SM_GetEncoderValue>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b17      	cmp	r3, #23
 8000f50:	f200 8094 	bhi.w	800107c <FuncO_ModifyOutput+0x13c>
 8000f54:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <FuncO_ModifyOutput+0x1c>)
 8000f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5a:	bf00      	nop
 8000f5c:	08000fbd 	.word	0x08000fbd
 8000f60:	08000fbd 	.word	0x08000fbd
 8000f64:	08000fbd 	.word	0x08000fbd
 8000f68:	08000fdd 	.word	0x08000fdd
 8000f6c:	08000fdd 	.word	0x08000fdd
 8000f70:	08000fdd 	.word	0x08000fdd
 8000f74:	08000fdd 	.word	0x08000fdd
 8000f78:	08000ffd 	.word	0x08000ffd
 8000f7c:	08000ffd 	.word	0x08000ffd
 8000f80:	08000ffd 	.word	0x08000ffd
 8000f84:	08000ffd 	.word	0x08000ffd
 8000f88:	0800101d 	.word	0x0800101d
 8000f8c:	0800101d 	.word	0x0800101d
 8000f90:	0800101d 	.word	0x0800101d
 8000f94:	0800101d 	.word	0x0800101d
 8000f98:	0800103d 	.word	0x0800103d
 8000f9c:	0800103d 	.word	0x0800103d
 8000fa0:	0800103d 	.word	0x0800103d
 8000fa4:	0800103d 	.word	0x0800103d
 8000fa8:	0800105d 	.word	0x0800105d
 8000fac:	0800105d 	.word	0x0800105d
 8000fb0:	0800105d 	.word	0x0800105d
 8000fb4:	0800105d 	.word	0x0800105d
 8000fb8:	0800105d 	.word	0x0800105d
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <FuncO_ModifyOutput+0x144>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4830      	ldr	r0, [pc, #192]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8000fc6:	f003 fd59 	bl	8004a7c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2378      	movs	r3, #120	; 0x78
 8000fd0:	4a2e      	ldr	r2, [pc, #184]	; (800108c <FuncO_ModifyOutput+0x14c>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	482c      	ldr	r0, [pc, #176]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8000fd6:	f003 fc8f 	bl	80048f8 <HAL_DAC_Start_DMA>
			break;
 8000fda:	e04f      	b.n	800107c <FuncO_ModifyOutput+0x13c>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <FuncO_ModifyOutput+0x144>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4828      	ldr	r0, [pc, #160]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8000fe6:	f003 fd49 	bl	8004a7c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000fea:	2300      	movs	r3, #0
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2378      	movs	r3, #120	; 0x78
 8000ff0:	4a27      	ldr	r2, [pc, #156]	; (8001090 <FuncO_ModifyOutput+0x150>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4824      	ldr	r0, [pc, #144]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8000ff6:	f003 fc7f 	bl	80048f8 <HAL_DAC_Start_DMA>

			break;
 8000ffa:	e03f      	b.n	800107c <FuncO_ModifyOutput+0x13c>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <FuncO_ModifyOutput+0x144>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8001002:	2100      	movs	r1, #0
 8001004:	4820      	ldr	r0, [pc, #128]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8001006:	f003 fd39 	bl	8004a7c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 800100a:	2300      	movs	r3, #0
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2378      	movs	r3, #120	; 0x78
 8001010:	4a20      	ldr	r2, [pc, #128]	; (8001094 <FuncO_ModifyOutput+0x154>)
 8001012:	2100      	movs	r1, #0
 8001014:	481c      	ldr	r0, [pc, #112]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8001016:	f003 fc6f 	bl	80048f8 <HAL_DAC_Start_DMA>
			break;
 800101a:	e02f      	b.n	800107c <FuncO_ModifyOutput+0x13c>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <FuncO_ModifyOutput+0x144>)
 800101e:	2203      	movs	r2, #3
 8001020:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8001022:	2100      	movs	r1, #0
 8001024:	4818      	ldr	r0, [pc, #96]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8001026:	f003 fd29 	bl	8004a7c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 800102a:	2300      	movs	r3, #0
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2378      	movs	r3, #120	; 0x78
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <FuncO_ModifyOutput+0x158>)
 8001032:	2100      	movs	r1, #0
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8001036:	f003 fc5f 	bl	80048f8 <HAL_DAC_Start_DMA>
			break;
 800103a:	e01f      	b.n	800107c <FuncO_ModifyOutput+0x13c>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <FuncO_ModifyOutput+0x144>)
 800103e:	2204      	movs	r2, #4
 8001040:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8001042:	2100      	movs	r1, #0
 8001044:	4810      	ldr	r0, [pc, #64]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8001046:	f003 fd19 	bl	8004a7c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 800104a:	2300      	movs	r3, #0
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2378      	movs	r3, #120	; 0x78
 8001050:	4a12      	ldr	r2, [pc, #72]	; (800109c <FuncO_ModifyOutput+0x15c>)
 8001052:	2100      	movs	r1, #0
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8001056:	f003 fc4f 	bl	80048f8 <HAL_DAC_Start_DMA>
			break;
 800105a:	e00f      	b.n	800107c <FuncO_ModifyOutput+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <FuncO_ModifyOutput+0x144>)
 800105e:	2205      	movs	r2, #5
 8001060:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8001062:	2100      	movs	r1, #0
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8001066:	f003 fd09 	bl	8004a7c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 800106a:	2300      	movs	r3, #0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2378      	movs	r3, #120	; 0x78
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <FuncO_ModifyOutput+0x160>)
 8001072:	2100      	movs	r1, #0
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <FuncO_ModifyOutput+0x148>)
 8001076:	f003 fc3f 	bl	80048f8 <HAL_DAC_Start_DMA>
			break;
 800107a:	bf00      	nop
	}
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000bea 	.word	0x20000bea
 8001088:	20000d14 	.word	0x20000d14
 800108c:	200003e4 	.word	0x200003e4
 8001090:	200005c4 	.word	0x200005c4
 8001094:	20000024 	.word	0x20000024
 8001098:	20000204 	.word	0x20000204
 800109c:	200007a4 	.word	0x200007a4
 80010a0:	20000984 	.word	0x20000984

080010a4 <FuncO_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode FuncO_GetOutputMode()
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	return eNewOutMode;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <FuncO_GetOutputMode+0x14>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000bea 	.word	0x20000bea

080010bc <GO_ModifyOutput>:
 *
 *
 *
 */
void GO_ModifyOutput()
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 f8f3 	bl	80012ac <SM_GetEncoderValue>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b1f      	cmp	r3, #31
 80010ca:	f200 80db 	bhi.w	8001284 <GO_ModifyOutput+0x1c8>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <GO_ModifyOutput+0x18>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	08001155 	.word	0x08001155
 80010d8:	08001155 	.word	0x08001155
 80010dc:	08001155 	.word	0x08001155
 80010e0:	08001155 	.word	0x08001155
 80010e4:	0800117b 	.word	0x0800117b
 80010e8:	0800117b 	.word	0x0800117b
 80010ec:	0800117b 	.word	0x0800117b
 80010f0:	0800117b 	.word	0x0800117b
 80010f4:	080011a1 	.word	0x080011a1
 80010f8:	080011a1 	.word	0x080011a1
 80010fc:	080011a1 	.word	0x080011a1
 8001100:	080011a1 	.word	0x080011a1
 8001104:	080011c7 	.word	0x080011c7
 8001108:	080011c7 	.word	0x080011c7
 800110c:	080011c7 	.word	0x080011c7
 8001110:	080011c7 	.word	0x080011c7
 8001114:	080011ed 	.word	0x080011ed
 8001118:	080011ed 	.word	0x080011ed
 800111c:	080011ed 	.word	0x080011ed
 8001120:	080011ed 	.word	0x080011ed
 8001124:	08001213 	.word	0x08001213
 8001128:	08001213 	.word	0x08001213
 800112c:	08001213 	.word	0x08001213
 8001130:	08001213 	.word	0x08001213
 8001134:	08001239 	.word	0x08001239
 8001138:	08001239 	.word	0x08001239
 800113c:	08001239 	.word	0x08001239
 8001140:	08001239 	.word	0x08001239
 8001144:	0800125f 	.word	0x0800125f
 8001148:	0800125f 	.word	0x0800125f
 800114c:	0800125f 	.word	0x0800125f
 8001150:	0800125f 	.word	0x0800125f
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2101      	movs	r1, #1
 8001158:	484b      	ldr	r0, [pc, #300]	; (8001288 <GO_ModifyOutput+0x1cc>)
 800115a:	f004 fbd3 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2120      	movs	r1, #32
 8001162:	484a      	ldr	r0, [pc, #296]	; (800128c <GO_ModifyOutput+0x1d0>)
 8001164:	f004 fbce 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2110      	movs	r1, #16
 800116c:	4847      	ldr	r0, [pc, #284]	; (800128c <GO_ModifyOutput+0x1d0>)
 800116e:	f004 fbc9 	bl	8005904 <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <GO_ModifyOutput+0x1d4>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
			break;
 8001178:	e084      	b.n	8001284 <GO_ModifyOutput+0x1c8>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	2101      	movs	r1, #1
 800117e:	4842      	ldr	r0, [pc, #264]	; (8001288 <GO_ModifyOutput+0x1cc>)
 8001180:	f004 fbc0 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2120      	movs	r1, #32
 8001188:	4840      	ldr	r0, [pc, #256]	; (800128c <GO_ModifyOutput+0x1d0>)
 800118a:	f004 fbbb 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2110      	movs	r1, #16
 8001192:	483e      	ldr	r0, [pc, #248]	; (800128c <GO_ModifyOutput+0x1d0>)
 8001194:	f004 fbb6 	bl	8005904 <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 8001198:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <GO_ModifyOutput+0x1d4>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
			break;
 800119e:	e071      	b.n	8001284 <GO_ModifyOutput+0x1c8>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2101      	movs	r1, #1
 80011a4:	4838      	ldr	r0, [pc, #224]	; (8001288 <GO_ModifyOutput+0x1cc>)
 80011a6:	f004 fbad 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2120      	movs	r1, #32
 80011ae:	4837      	ldr	r0, [pc, #220]	; (800128c <GO_ModifyOutput+0x1d0>)
 80011b0:	f004 fba8 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2110      	movs	r1, #16
 80011b8:	4834      	ldr	r0, [pc, #208]	; (800128c <GO_ModifyOutput+0x1d0>)
 80011ba:	f004 fba3 	bl	8005904 <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <GO_ModifyOutput+0x1d4>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	701a      	strb	r2, [r3, #0]
			break;
 80011c4:	e05e      	b.n	8001284 <GO_ModifyOutput+0x1c8>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2101      	movs	r1, #1
 80011ca:	482f      	ldr	r0, [pc, #188]	; (8001288 <GO_ModifyOutput+0x1cc>)
 80011cc:	f004 fb9a 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2120      	movs	r1, #32
 80011d4:	482d      	ldr	r0, [pc, #180]	; (800128c <GO_ModifyOutput+0x1d0>)
 80011d6:	f004 fb95 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2110      	movs	r1, #16
 80011de:	482b      	ldr	r0, [pc, #172]	; (800128c <GO_ModifyOutput+0x1d0>)
 80011e0:	f004 fb90 	bl	8005904 <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <GO_ModifyOutput+0x1d4>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
			break;
 80011ea:	e04b      	b.n	8001284 <GO_ModifyOutput+0x1c8>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2101      	movs	r1, #1
 80011f0:	4825      	ldr	r0, [pc, #148]	; (8001288 <GO_ModifyOutput+0x1cc>)
 80011f2:	f004 fb87 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2120      	movs	r1, #32
 80011fa:	4824      	ldr	r0, [pc, #144]	; (800128c <GO_ModifyOutput+0x1d0>)
 80011fc:	f004 fb82 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2110      	movs	r1, #16
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <GO_ModifyOutput+0x1d0>)
 8001206:	f004 fb7d 	bl	8005904 <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <GO_ModifyOutput+0x1d4>)
 800120c:	2204      	movs	r2, #4
 800120e:	701a      	strb	r2, [r3, #0]
			break;
 8001210:	e038      	b.n	8001284 <GO_ModifyOutput+0x1c8>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2101      	movs	r1, #1
 8001216:	481c      	ldr	r0, [pc, #112]	; (8001288 <GO_ModifyOutput+0x1cc>)
 8001218:	f004 fb74 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2120      	movs	r1, #32
 8001220:	481a      	ldr	r0, [pc, #104]	; (800128c <GO_ModifyOutput+0x1d0>)
 8001222:	f004 fb6f 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2110      	movs	r1, #16
 800122a:	4818      	ldr	r0, [pc, #96]	; (800128c <GO_ModifyOutput+0x1d0>)
 800122c:	f004 fb6a 	bl	8005904 <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <GO_ModifyOutput+0x1d4>)
 8001232:	2205      	movs	r2, #5
 8001234:	701a      	strb	r2, [r3, #0]
			break;
 8001236:	e025      	b.n	8001284 <GO_ModifyOutput+0x1c8>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2101      	movs	r1, #1
 800123c:	4812      	ldr	r0, [pc, #72]	; (8001288 <GO_ModifyOutput+0x1cc>)
 800123e:	f004 fb61 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2120      	movs	r1, #32
 8001246:	4811      	ldr	r0, [pc, #68]	; (800128c <GO_ModifyOutput+0x1d0>)
 8001248:	f004 fb5c 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2110      	movs	r1, #16
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <GO_ModifyOutput+0x1d0>)
 8001252:	f004 fb57 	bl	8005904 <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <GO_ModifyOutput+0x1d4>)
 8001258:	2206      	movs	r2, #6
 800125a:	701a      	strb	r2, [r3, #0]
			break;
 800125c:	e012      	b.n	8001284 <GO_ModifyOutput+0x1c8>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	2101      	movs	r1, #1
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <GO_ModifyOutput+0x1cc>)
 8001264:	f004 fb4e 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	2120      	movs	r1, #32
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <GO_ModifyOutput+0x1d0>)
 800126e:	f004 fb49 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2110      	movs	r1, #16
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <GO_ModifyOutput+0x1d0>)
 8001278:	f004 fb44 	bl	8005904 <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <GO_ModifyOutput+0x1d4>)
 800127e:	2207      	movs	r2, #7
 8001280:	701a      	strb	r2, [r3, #0]
			break;
 8001282:	bf00      	nop
	}

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	48000400 	.word	0x48000400
 800128c:	48000800 	.word	0x48000800
 8001290:	20000008 	.word	0x20000008

08001294 <GO_GetOutputGain>:
 *
 *
 *
 */
uint8_t GO_GetOutputGain()
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <GO_GetOutputGain+0x14>)
 800129a:	781b      	ldrb	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000008 	.word	0x20000008

080012ac <SM_GetEncoderValue>:

#include "SignalManager.h"


uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <SM_GetEncoderValue+0x34>)
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <SM_GetEncoderValue+0x34>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	e002      	b.n	80012d4 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SM_GetEncoderValue+0x34>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	b29b      	uxth	r3, r3
	}
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40012c00 	.word	0x40012c00

080012e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2220      	movs	r2, #32
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f008 f87b 	bl	80093f8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001304:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <MX_ADC1_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_ADC1_Init+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <MX_ADC1_Init+0xe8>)
 800132a:	2204      	movs	r2, #4
 800132c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001330:	2200      	movs	r2, #0
 8001332:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001336:	2201      	movs	r2, #1
 8001338:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <MX_ADC1_Init+0xe8>)
 800133c:	2201      	movs	r2, #1
 800133e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_ADC1_Init+0xe8>)
 800134a:	2200      	movs	r2, #0
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_ADC1_Init+0xe8>)
 800135e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001362:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800136c:	4817      	ldr	r0, [pc, #92]	; (80013cc <MX_ADC1_Init+0xe8>)
 800136e:	f001 ffc1 	bl	80032f4 <HAL_ADC_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001378:	f000 ff3a 	bl	80021f0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_ADC1_Init+0xe8>)
 8001388:	f002 fd4a 	bl	8003e20 <HAL_ADCEx_MultiModeConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001392:	f000 ff2d 	bl	80021f0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_ADC1_Init+0xec>)
 8001398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800139a:	2306      	movs	r3, #6
 800139c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013a2:	237f      	movs	r3, #127	; 0x7f
 80013a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013a6:	2304      	movs	r3, #4
 80013a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_ADC1_Init+0xe8>)
 80013b4:	f002 f95e 	bl	8003674 <HAL_ADC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013be:	f000 ff17 	bl	80021f0 <Error_Handler>
  }

}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	; 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000c10 	.word	0x20000c10
 80013d0:	0c900008 	.word	0x0c900008

080013d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f4:	d14f      	bne.n	8001496 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_ADC_MspInit+0xcc>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a29      	ldr	r2, [pc, #164]	; (80014a0 <HAL_ADC_MspInit+0xcc>)
 80013fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_ADC_MspInit+0xcc>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_ADC_MspInit+0xcc>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_ADC_MspInit+0xcc>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_ADC_MspInit+0xcc>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001426:	2304      	movs	r3, #4
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f004 f8c8 	bl	80055d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 8001442:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_ADC_MspInit+0xd4>)
 8001444:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 8001448:	2205      	movs	r2, #5
 800144a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 8001468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800146c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 8001470:	2220      	movs	r2, #32
 8001472:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 800147c:	f003 fddc 	bl	8005038 <HAL_DMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001486:	f000 feb3 	bl	80021f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 800148e:	655a      	str	r2, [r3, #84]	; 0x54
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_ADC_MspInit+0xd0>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	20000c7c 	.word	0x20000c7c
 80014a8:	40020008 	.word	0x40020008

080014ac <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_COMP1_Init+0x44>)
 80014b2:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <MX_COMP1_Init+0x48>)
 80014b4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_COMP1_Init+0x44>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_COMP1_Init+0x44>)
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <MX_COMP1_Init+0x4c>)
 80014c0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_COMP1_Init+0x44>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_COMP1_Init+0x44>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_COMP1_Init+0x44>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_COMP1_Init+0x44>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_COMP1_Init+0x44>)
 80014dc:	f002 fef4 	bl	80042c8 <HAL_COMP_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80014e6:	f000 fe83 	bl	80021f0 <Error_Handler>
  }

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000cdc 	.word	0x20000cdc
 80014f4:	40010200 	.word	0x40010200
 80014f8:	00800030 	.word	0x00800030

080014fc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_COMP_MspInit+0x5c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d118      	bne.n	8001550 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_COMP_MspInit+0x60>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_COMP_MspInit+0x60>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_COMP_MspInit+0x60>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001536:	2302      	movs	r3, #2
 8001538:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f004 f840 	bl	80055d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010200 	.word	0x40010200
 800155c:	40021000 	.word	0x40021000

08001560 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2230      	movs	r2, #48	; 0x30
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f007 ff43 	bl	80093f8 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_DAC1_Init+0x8c>)
 8001574:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <MX_DAC1_Init+0x90>)
 8001576:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001578:	481c      	ldr	r0, [pc, #112]	; (80015ec <MX_DAC1_Init+0x8c>)
 800157a:	f003 f948 	bl	800480e <HAL_DAC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001584:	f000 fe34 	bl	80021f0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001588:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800158c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800159a:	2306      	movs	r3, #6
 800159c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_DAC1_Init+0x8c>)
 80015b6:	f003 fb09 	bl	8004bcc <HAL_DAC_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80015c0:	f000 fe16 	bl	80021f0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	2210      	movs	r2, #16
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_DAC1_Init+0x8c>)
 80015d4:	f003 fafa 	bl	8004bcc <HAL_DAC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80015de:	f000 fe07 	bl	80021f0 <Error_Handler>
  }

}
 80015e2:	bf00      	nop
 80015e4:	3730      	adds	r7, #48	; 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000d14 	.word	0x20000d14
 80015f0:	50000800 	.word	0x50000800

080015f4 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
 80015f8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80015fa:	463b      	mov	r3, r7
 80015fc:	2230      	movs	r2, #48	; 0x30
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f007 fef9 	bl	80093f8 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_DAC2_Init+0x6c>)
 8001608:	4a16      	ldr	r2, [pc, #88]	; (8001664 <MX_DAC2_Init+0x70>)
 800160a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800160c:	4814      	ldr	r0, [pc, #80]	; (8001660 <MX_DAC2_Init+0x6c>)
 800160e:	f003 f8fe 	bl	800480e <HAL_DAC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001618:	f000 fdea 	bl	80021f0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800161c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001620:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800162e:	2306      	movs	r3, #6
 8001630:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800163a:	2301      	movs	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_DAC2_Init+0x6c>)
 800164a:	f003 fabf 	bl	8004bcc <HAL_DAC_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8001654:	f000 fdcc 	bl	80021f0 <Error_Handler>
  }

}
 8001658:	bf00      	nop
 800165a:	3730      	adds	r7, #48	; 0x30
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000d00 	.word	0x20000d00
 8001664:	50000c00 	.word	0x50000c00

08001668 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a56      	ldr	r2, [pc, #344]	; (80017e0 <HAL_DAC_MspInit+0x178>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d150      	bne.n	800172c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800168a:	4b56      	ldr	r3, [pc, #344]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a55      	ldr	r2, [pc, #340]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b4d      	ldr	r3, [pc, #308]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016ba:	2330      	movs	r3, #48	; 0x30
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f003 ff7e 	bl	80055d0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80016d4:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 80016d6:	4a45      	ldr	r2, [pc, #276]	; (80017ec <HAL_DAC_MspInit+0x184>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80016da:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 80016dc:	2206      	movs	r2, #6
 80016de:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 80016e2:	2210      	movs	r2, #16
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 80016fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001700:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 8001704:	2220      	movs	r2, #32
 8001706:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001708:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800170e:	4836      	ldr	r0, [pc, #216]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 8001710:	f003 fc92 	bl	8005038 <HAL_DMA_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800171a:	f000 fd69 	bl	80021f0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a31      	ldr	r2, [pc, #196]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <HAL_DAC_MspInit+0x180>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800172a:	e054      	b.n	80017d6 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <HAL_DAC_MspInit+0x188>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d14f      	bne.n	80017d6 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_DAC_MspInit+0x17c>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001766:	2340      	movs	r3, #64	; 0x40
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f003 ff28 	bl	80055d0 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_DAC_MspInit+0x190>)
 8001784:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 8001788:	2229      	movs	r2, #41	; 0x29
 800178a:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 800178e:	2210      	movs	r2, #16
 8001790:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 80017a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a4:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 80017a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ac:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 80017b0:	2220      	movs	r2, #32
 80017b2:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80017ba:	480e      	ldr	r0, [pc, #56]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 80017bc:	f003 fc3c 	bl	8005038 <HAL_DMA_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80017c6:	f000 fd13 	bl	80021f0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_DAC_MspInit+0x18c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80017d6:	bf00      	nop
 80017d8:	3730      	adds	r7, #48	; 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	50000800 	.word	0x50000800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	20000d28 	.word	0x20000d28
 80017ec:	4002001c 	.word	0x4002001c
 80017f0:	50000c00 	.word	0x50000c00
 80017f4:	20000d88 	.word	0x20000d88
 80017f8:	40020030 	.word	0x40020030

080017fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_DMA_Init+0x70>)
 8001804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001806:	4a19      	ldr	r2, [pc, #100]	; (800186c <MX_DMA_Init+0x70>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6493      	str	r3, [r2, #72]	; 0x48
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_DMA_Init+0x70>)
 8001810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_DMA_Init+0x70>)
 800181c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <MX_DMA_Init+0x70>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6493      	str	r3, [r2, #72]	; 0x48
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_DMA_Init+0x70>)
 8001828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	200b      	movs	r0, #11
 8001838:	f002 ffb5 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800183c:	200b      	movs	r0, #11
 800183e:	f002 ffcc 	bl	80047da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	200c      	movs	r0, #12
 8001848:	f002 ffad 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800184c:	200c      	movs	r0, #12
 800184e:	f002 ffc4 	bl	80047da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	200d      	movs	r0, #13
 8001858:	f002 ffa5 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800185c:	200d      	movs	r0, #13
 800185e:	f002 ffbc 	bl	80047da <HAL_NVIC_EnableIRQ>

}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000

08001870 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <update_dc_bias_sweep+0x88>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <update_dc_bias_sweep+0x1a>
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <update_dc_bias_sweep+0x8c>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <update_dc_bias_sweep+0x8c>)
 8001886:	801a      	strh	r2, [r3, #0]
 8001888:	e005      	b.n	8001896 <update_dc_bias_sweep+0x26>
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <update_dc_bias_sweep+0x8c>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <update_dc_bias_sweep+0x8c>)
 8001894:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <update_dc_bias_sweep+0x8c>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10a      	bne.n	80018b4 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <update_dc_bias_sweep+0x90>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <update_dc_bias_sweep+0x3e>
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <update_dc_bias_sweep+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e002      	b.n	80018b4 <update_dc_bias_sweep+0x44>
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <update_dc_bias_sweep+0x90>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <update_dc_bias_sweep+0x8c>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <update_dc_bias_sweep+0x52>
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <update_dc_bias_sweep+0x88>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <update_dc_bias_sweep+0x8c>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ca:	d302      	bcc.n	80018d2 <update_dc_bias_sweep+0x62>
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <update_dc_bias_sweep+0x88>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <update_dc_bias_sweep+0x90>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	2108      	movs	r1, #8
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e0:	f004 f810 	bl	8005904 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <update_dc_bias_sweep+0x8c>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	2110      	movs	r1, #16
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <update_dc_bias_sweep+0x94>)
 80018ee:	f003 f91b 	bl	8004b28 <HAL_DAC_SetValue>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000000c 	.word	0x2000000c
 80018fc:	20000bec 	.word	0x20000bec
 8001900:	20000bf0 	.word	0x20000bf0
 8001904:	20000d14 	.word	0x20000d14

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	; (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8001a26:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	3302      	adds	r3, #2
 8001a30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	ea02 0103 	and.w	r1, r2, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	4806      	ldr	r0, [pc, #24]	; (8001a78 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	430a      	orrs	r2, r1
 8001a66:	3302      	adds	r3, #2
 8001a68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40010000 	.word	0x40010000

08001a7c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	613b      	str	r3, [r7, #16]
  return result;
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b089      	sub	sp, #36	; 0x24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	613b      	str	r3, [r7, #16]
  return result;
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2103      	movs	r1, #3
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	401a      	ands	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	61bb      	str	r3, [r7, #24]
  return result;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	431a      	orrs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	60da      	str	r2, [r3, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3724      	adds	r7, #36	; 0x24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001b5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b60:	4907      	ldr	r1, [pc, #28]	; (8001b80 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40021000 	.word	0x40021000

08001b84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f7ff ffd4 	bl	8001b54 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001bac:	2020      	movs	r0, #32
 8001bae:	f7ff ffd1 	bl	8001b54 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7ff ffce 	bl	8001b54 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f7ff ffcb 	bl	8001b54 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8001bbe:	2108      	movs	r1, #8
 8001bc0:	48d3      	ldr	r0, [pc, #844]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001bc2:	f7ff ffb9 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bcc:	f7ff ffb4 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	48cf      	ldr	r0, [pc, #828]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001bd4:	f7ff ffb0 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001bd8:	2120      	movs	r1, #32
 8001bda:	48cd      	ldr	r0, [pc, #820]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001bdc:	f7ff ffac 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8001be0:	2101      	movs	r1, #1
 8001be2:	48cc      	ldr	r0, [pc, #816]	; (8001f14 <MX_GPIO_Init+0x390>)
 8001be4:	f7ff ffa8 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bec:	48c8      	ldr	r0, [pc, #800]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001bee:	f7ff ffa3 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8001bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf6:	48c6      	ldr	r0, [pc, #792]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001bf8:	f7ff ff9e 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001bfc:	2140      	movs	r1, #64	; 0x40
 8001bfe:	48c5      	ldr	r0, [pc, #788]	; (8001f14 <MX_GPIO_Init+0x390>)
 8001c00:	f7ff ff9a 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	48c3      	ldr	r0, [pc, #780]	; (8001f14 <MX_GPIO_Init+0x390>)
 8001c08:	f7ff ff96 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c10:	48c0      	ldr	r0, [pc, #768]	; (8001f14 <MX_GPIO_Init+0x390>)
 8001c12:	f7ff ff91 	bl	8001b38 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001c16:	49c0      	ldr	r1, [pc, #768]	; (8001f18 <MX_GPIO_Init+0x394>)
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f7ff feff 	bl	8001a1c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8001c1e:	49bf      	ldr	r1, [pc, #764]	; (8001f1c <MX_GPIO_Init+0x398>)
 8001c20:	2002      	movs	r0, #2
 8001c22:	f7ff fefb 	bl	8001a1c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001c26:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001c2a:	2005      	movs	r0, #5
 8001c2c:	f7ff fef6 	bl	8001a1c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001c30:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001c34:	2005      	movs	r0, #5
 8001c36:	f7ff fef1 	bl	8001a1c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001c3a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f7ff feec 	bl	8001a1c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001c44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c48:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001c56:	2302      	movs	r3, #2
 8001c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4618      	mov	r0, r3
 8001c62:	f006 faa5 	bl	80081b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c6a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 fa94 	bl	80081b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f006 fa84 	bl	80081b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f006 fa74 	bl	80081b0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 fa64 	bl	80081b0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cee:	4888      	ldr	r0, [pc, #544]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001cf0:	f7ff fef3 	bl	8001ada <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cfa:	4885      	ldr	r0, [pc, #532]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001cfc:	f7ff feed 	bl	8001ada <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2101      	movs	r1, #1
 8001d04:	4886      	ldr	r0, [pc, #536]	; (8001f20 <MX_GPIO_Init+0x39c>)
 8001d06:	f7ff fee8 	bl	8001ada <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	4884      	ldr	r0, [pc, #528]	; (8001f20 <MX_GPIO_Init+0x39c>)
 8001d10:	f7ff fee3 	bl	8001ada <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2104      	movs	r1, #4
 8001d18:	487d      	ldr	r0, [pc, #500]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001d1a:	f7ff fede 	bl	8001ada <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d24:	487a      	ldr	r0, [pc, #488]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001d26:	f7ff fea9 	bl	8001a7c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d30:	4877      	ldr	r0, [pc, #476]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001d32:	f7ff fea3 	bl	8001a7c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4879      	ldr	r0, [pc, #484]	; (8001f20 <MX_GPIO_Init+0x39c>)
 8001d3c:	f7ff fe9e 	bl	8001a7c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2102      	movs	r1, #2
 8001d44:	4876      	ldr	r0, [pc, #472]	; (8001f20 <MX_GPIO_Init+0x39c>)
 8001d46:	f7ff fe99 	bl	8001a7c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	4870      	ldr	r0, [pc, #448]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001d50:	f7ff fe94 	bl	8001a7c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8001d54:	2308      	movs	r3, #8
 8001d56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001d64:	2302      	movs	r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4868      	ldr	r0, [pc, #416]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001d6e:	f006 fc12 	bl	8008596 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8001d72:	2308      	movs	r3, #8
 8001d74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d76:	2301      	movs	r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8e:	f006 fc02 	bl	8008596 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8001d92:	2310      	movs	r3, #16
 8001d94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d96:	2301      	movs	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4859      	ldr	r0, [pc, #356]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001dac:	f006 fbf3 	bl	8008596 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8001db0:	2320      	movs	r3, #32
 8001db2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001db4:	2301      	movs	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4851      	ldr	r0, [pc, #324]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001dca:	f006 fbe4 	bl	8008596 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	484b      	ldr	r0, [pc, #300]	; (8001f14 <MX_GPIO_Init+0x390>)
 8001de8:	f006 fbd5 	bl	8008596 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001df2:	2301      	movs	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4842      	ldr	r0, [pc, #264]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001e08:	f006 fbc5 	bl	8008596 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e12:	2301      	movs	r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	483a      	ldr	r0, [pc, #232]	; (8001f10 <MX_GPIO_Init+0x38c>)
 8001e28:	f006 fbb5 	bl	8008596 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8001e2c:	2340      	movs	r3, #64	; 0x40
 8001e2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e30:	2301      	movs	r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4833      	ldr	r0, [pc, #204]	; (8001f14 <MX_GPIO_Init+0x390>)
 8001e46:	f006 fba6 	bl	8008596 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	482c      	ldr	r0, [pc, #176]	; (8001f14 <MX_GPIO_Init+0x390>)
 8001e64:	f006 fb97 	bl	8008596 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8001e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4824      	ldr	r0, [pc, #144]	; (8001f14 <MX_GPIO_Init+0x390>)
 8001e84:	f006 fb87 	bl	8008596 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e88:	f7ff fd3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fd8e 	bl	80019b4 <NVIC_EncodePriority>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	2006      	movs	r0, #6
 8001e9e:	f7ff fd5f 	bl	8001960 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001ea2:	2006      	movs	r0, #6
 8001ea4:	f7ff fd3e 	bl	8001924 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ea8:	f7ff fd2e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fd7e 	bl	80019b4 <NVIC_EncodePriority>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	2007      	movs	r0, #7
 8001ebe:	f7ff fd4f 	bl	8001960 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8001ec2:	2007      	movs	r0, #7
 8001ec4:	f7ff fd2e 	bl	8001924 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ec8:	f7ff fd1e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fd6e 	bl	80019b4 <NVIC_EncodePriority>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4619      	mov	r1, r3
 8001edc:	2008      	movs	r0, #8
 8001ede:	f7ff fd3f 	bl	8001960 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001ee2:	2008      	movs	r0, #8
 8001ee4:	f7ff fd1e 	bl	8001924 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ee8:	f7ff fd0e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fd5e 	bl	80019b4 <NVIC_EncodePriority>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4619      	mov	r1, r3
 8001efc:	2028      	movs	r0, #40	; 0x28
 8001efe:	f7ff fd2f 	bl	8001960 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f02:	2028      	movs	r0, #40	; 0x28
 8001f04:	f7ff fd0e 	bl	8001924 <__NVIC_EnableIRQ>

}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	e009      	b.n	8001f24 <MX_GPIO_Init+0x3a0>
 8001f10:	48000800 	.word	0x48000800
 8001f14:	48000400 	.word	0x48000400
 8001f18:	0f000003 	.word	0x0f000003
 8001f1c:	f0000003 	.word	0xf0000003
 8001f20:	48001400 	.word	0x48001400
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop

08001f28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001f40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001f48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00b      	beq.n	8001f68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001f50:	e000      	b.n	8001f54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001f52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001f54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f9      	beq.n	8001f52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e009      	b.n	8001fa0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	60ba      	str	r2, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ffc7 	bl	8001f28 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf1      	blt.n	8001f8c <_write+0x16>
  return len;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
	// do something
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fce:	f000 ff3c 	bl	8002e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd2:	f000 f89f 	bl	8002114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd6:	f7ff fdd5 	bl	8001b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fda:	f7ff fc0f 	bl	80017fc <MX_DMA_Init>
  MX_DAC1_Init();
 8001fde:	f7ff fabf 	bl	8001560 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001fe2:	f7ff fb07 	bl	80015f4 <MX_DAC2_Init>
  MX_ADC1_Init();
 8001fe6:	f7ff f97d 	bl	80012e4 <MX_ADC1_Init>
  MX_COMP1_Init();
 8001fea:	f7ff fa5f 	bl	80014ac <MX_COMP1_Init>
  MX_TIM2_Init();
 8001fee:	f000 fc23 	bl	8002838 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001ff2:	f000 fdbb 	bl	8002b6c <MX_TIM17_Init>
  MX_SPI3_Init();
 8001ff6:	f000 f939 	bl	800226c <MX_SPI3_Init>
  MX_RNG_Init();
 8001ffa:	f000 f929 	bl	8002250 <MX_RNG_Init>
  MX_TIM1_Init();
 8001ffe:	f000 fbab 	bl	8002758 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002002:	f000 fcd3 	bl	80029ac <MX_TIM8_Init>
  MX_TIM16_Init();
 8002006:	f000 fd8b 	bl	8002b20 <MX_TIM16_Init>
  MX_TIM15_Init();
 800200a:	f000 fd37 	bl	8002a7c <MX_TIM15_Init>
  MX_TIM5_Init();
 800200e:	f000 fc7d 	bl	800290c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8002012:	2300      	movs	r3, #0
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2378      	movs	r3, #120	; 0x78
 8002018:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <main+0x11c>)
 800201a:	2100      	movs	r1, #0
 800201c:	4832      	ldr	r0, [pc, #200]	; (80020e8 <main+0x120>)
 800201e:	f002 fc6b 	bl	80048f8 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8002022:	2110      	movs	r1, #16
 8002024:	4830      	ldr	r0, [pc, #192]	; (80020e8 <main+0x120>)
 8002026:	f002 fc14 	bl	8004852 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 800202a:	2300      	movs	r3, #0
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2378      	movs	r3, #120	; 0x78
 8002030:	4a2e      	ldr	r2, [pc, #184]	; (80020ec <main+0x124>)
 8002032:	2100      	movs	r1, #0
 8002034:	482e      	ldr	r0, [pc, #184]	; (80020f0 <main+0x128>)
 8002036:	f002 fc5f 	bl	80048f8 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 800203a:	482e      	ldr	r0, [pc, #184]	; (80020f4 <main+0x12c>)
 800203c:	f004 ffde 	bl	8006ffc <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8002040:	2201      	movs	r2, #1
 8002042:	2108      	movs	r1, #8
 8002044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002048:	f003 fc5c 	bl	8005904 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	2101      	movs	r1, #1
 8002050:	4829      	ldr	r0, [pc, #164]	; (80020f8 <main+0x130>)
 8002052:	f003 fc57 	bl	8005904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	2120      	movs	r1, #32
 800205a:	4828      	ldr	r0, [pc, #160]	; (80020fc <main+0x134>)
 800205c:	f003 fc52 	bl	8005904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8002060:	2201      	movs	r2, #1
 8002062:	2110      	movs	r1, #16
 8002064:	4825      	ldr	r0, [pc, #148]	; (80020fc <main+0x134>)
 8002066:	f003 fc4d 	bl	8005904 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002070:	4822      	ldr	r0, [pc, #136]	; (80020fc <main+0x134>)
 8002072:	f003 fc47 	bl	8005904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800207c:	481f      	ldr	r0, [pc, #124]	; (80020fc <main+0x134>)
 800207e:	f003 fc41 	bl	8005904 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8002082:	2201      	movs	r2, #1
 8002084:	2108      	movs	r1, #8
 8002086:	481d      	ldr	r0, [pc, #116]	; (80020fc <main+0x134>)
 8002088:	f003 fc3c 	bl	8005904 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 800208c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 800209c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a6:	f043 0305 	orr.w	r3, r3, #5
 80020aa:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80020ac:	4814      	ldr	r0, [pc, #80]	; (8002100 <main+0x138>)
 80020ae:	f004 ffd3 	bl	8007058 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80020b2:	4814      	ldr	r0, [pc, #80]	; (8002104 <main+0x13c>)
 80020b4:	f004 ffa2 	bl	8006ffc <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <main+0x140>)
 80020ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <main+0x140>)
 80020c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80020c8:	f7fe f8fa 	bl	80002c0 <DM_Init>
  DM_PostInit();
 80020cc:	f7fe f906 	bl	80002dc <DM_PostInit>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 80020d0:	480e      	ldr	r0, [pc, #56]	; (800210c <main+0x144>)
 80020d2:	f004 ffc1 	bl	8007058 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <main+0x148>)
 80020d8:	f004 ff90 	bl	8006ffc <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80020dc:	f7fe fcee 	bl	8000abc <EM_ProcessEvent>
 80020e0:	e7fc      	b.n	80020dc <main+0x114>
 80020e2:	bf00      	nop
 80020e4:	200003e4 	.word	0x200003e4
 80020e8:	20000d14 	.word	0x20000d14
 80020ec:	200007a4 	.word	0x200007a4
 80020f0:	20000d00 	.word	0x20000d00
 80020f4:	20000e4c 	.word	0x20000e4c
 80020f8:	48000400 	.word	0x48000400
 80020fc:	48000800 	.word	0x48000800
 8002100:	20000fc8 	.word	0x20000fc8
 8002104:	20000f7c 	.word	0x20000f7c
 8002108:	40001000 	.word	0x40001000
 800210c:	20000e98 	.word	0x20000e98
 8002110:	20000f30 	.word	0x20000f30

08002114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0a8      	sub	sp, #160	; 0xa0
 8002118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800211e:	2238      	movs	r2, #56	; 0x38
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f007 f968 	bl	80093f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002128:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002138:	463b      	mov	r3, r7
 800213a:	2254      	movs	r2, #84	; 0x54
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f007 f95a 	bl	80093f8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002144:	2000      	movs	r0, #0
 8002146:	f003 fbf5 	bl	8005934 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800214a:	2322      	movs	r3, #34	; 0x22
 800214c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800214e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002152:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002154:	2340      	movs	r3, #64	; 0x40
 8002156:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002158:	2301      	movs	r3, #1
 800215a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800215e:	2302      	movs	r3, #2
 8002160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002164:	2302      	movs	r3, #2
 8002166:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800216a:	2302      	movs	r3, #2
 800216c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8002170:	232a      	movs	r3, #42	; 0x2a
 8002172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800217c:	2304      	movs	r3, #4
 800217e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002182:	2302      	movs	r3, #2
 8002184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002188:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fc75 	bl	8005a7c <HAL_RCC_OscConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002198:	f000 f82a 	bl	80021f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219c:	230f      	movs	r3, #15
 800219e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a0:	2303      	movs	r3, #3
 80021a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80021b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021b4:	2108      	movs	r1, #8
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 ff78 	bl	80060ac <HAL_RCC_ClockConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80021c2:	f000 f815 	bl	80021f0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80021c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80021cc:	2300      	movs	r3, #0
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80021d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80021d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d6:	463b      	mov	r3, r7
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 f957 	bl	800648c <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80021e4:	f000 f804 	bl	80021f0 <Error_Handler>
  }
}
 80021e8:	bf00      	nop
 80021ea:	37a0      	adds	r7, #160	; 0xa0
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f043 0204 	orr.w	r2, r3, #4
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <LL_AHB2_GRP1_EnableClock>:
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800222a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800222c:	4907      	ldr	r1, [pc, #28]	; (800224c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4013      	ands	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40021000 	.word	0x40021000

08002250 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8002254:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002258:	f7ff ffe2 	bl	8002220 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <MX_RNG_Init+0x18>)
 800225e:	f7ff ffce 	bl	80021fe <LL_RNG_Enable>

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	50060800 	.word	0x50060800

0800226c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <MX_SPI3_Init+0x74>)
 8002272:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <MX_SPI3_Init+0x78>)
 8002274:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_SPI3_Init+0x74>)
 8002278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800227c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_SPI3_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <MX_SPI3_Init+0x74>)
 8002286:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800228a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_SPI3_Init+0x74>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_SPI3_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_SPI3_Init+0x74>)
 800229a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_SPI3_Init+0x74>)
 80022a2:	2210      	movs	r2, #16
 80022a4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_SPI3_Init+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_SPI3_Init+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_SPI3_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_SPI3_Init+0x74>)
 80022ba:	2207      	movs	r2, #7
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_SPI3_Init+0x74>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_SPI3_Init+0x74>)
 80022c6:	2208      	movs	r2, #8
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_SPI3_Init+0x74>)
 80022cc:	f004 fb2a 	bl	8006924 <HAL_SPI_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80022d6:	f7ff ff8b 	bl	80021f0 <Error_Handler>
  }

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000de8 	.word	0x20000de8
 80022e4:	40003c00 	.word	0x40003c00

080022e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_SPI_MspInit+0x7c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d128      	bne.n	800235c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_SPI_MspInit+0x80>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002314:	6593      	str	r3, [r2, #88]	; 0x58
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_SPI_MspInit+0x80>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800233a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800233e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800234c:	2306      	movs	r3, #6
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_SPI_MspInit+0x84>)
 8002358:	f003 f93a 	bl	80055d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40003c00 	.word	0x40003c00
 8002368:	40021000 	.word	0x40021000
 800236c:	48000800 	.word	0x48000800

08002370 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800237a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237e:	6093      	str	r3, [r2, #8]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40007000 	.word	0x40007000

08002390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <HAL_MspInit+0x44>)
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <HAL_MspInit+0x44>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6613      	str	r3, [r2, #96]	; 0x60
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <HAL_MspInit+0x44>)
 80023a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_MspInit+0x44>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_MspInit+0x44>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6593      	str	r3, [r2, #88]	; 0x58
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_MspInit+0x44>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80023c6:	f7ff ffd3 	bl	8002370 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000

080023d8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d101      	bne.n	80023f2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40010400 	.word	0x40010400

08002404 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6153      	str	r3, [r2, #20]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40010400 	.word	0x40010400

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <HardFault_Handler+0x4>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243c:	e7fe      	b.n	800243c <MemManage_Handler+0x4>

0800243e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <BusFault_Handler+0x4>

08002444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <UsageFault_Handler+0x4>

0800244a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002478:	f000 fd3a 	bl	8002ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}

08002480 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evBiasMenu);
 8002484:	2004      	movs	r0, #4
 8002486:	f7fe fce5 	bl	8000e54 <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800248a:	2001      	movs	r0, #1
 800248c:	f7ff ffa4 	bl	80023d8 <LL_EXTI_IsActiveFlag_0_31>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8002496:	2001      	movs	r0, #1
 8002498:	f7ff ffb4 	bl	8002404 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evFreqMenu);
 80024a4:	2002      	movs	r0, #2
 80024a6:	f7fe fcd5 	bl	8000e54 <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80024aa:	2002      	movs	r0, #2
 80024ac:	f7ff ff94 	bl	80023d8 <LL_EXTI_IsActiveFlag_0_31>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80024b6:	2002      	movs	r0, #2
 80024b8:	f7ff ffa4 	bl	8002404 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 80024c4:	2006      	movs	r0, #6
 80024c6:	f7fe fcc5 	bl	8000e54 <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80024ca:	2004      	movs	r0, #4
 80024cc:	f7ff ff84 	bl	80023d8 <LL_EXTI_IsActiveFlag_0_31>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80024d6:	2004      	movs	r0, #4
 80024d8:	f7ff ff94 	bl	8002404 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <DMA1_Channel1_IRQHandler+0x10>)
 80024e6:	f002 ff23 	bl	8005330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000c7c 	.word	0x20000c7c

080024f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <DMA1_Channel2_IRQHandler+0x10>)
 80024fa:	f002 ff19 	bl	8005330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000d28 	.word	0x20000d28

08002508 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <DMA1_Channel3_IRQHandler+0x10>)
 800250e:	f002 ff0f 	bl	8005330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000d88 	.word	0x20000d88

0800251c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8002520:	f7fd fefa 	bl	8000318 <DM_UpdateDisplay>

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 800252a:	8812      	ldrh	r2, [r2, #0]
 800252c:	4293      	cmp	r3, r2
 800252e:	d305      	bcc.n	800253c <TIM1_BRK_TIM15_IRQHandler+0x20>
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8002536:	8812      	ldrh	r2, [r2, #0]
 8002538:	4293      	cmp	r3, r2
 800253a:	d902      	bls.n	8002542 <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 800253c:	2005      	movs	r0, #5
 800253e:	f7fe fc89 	bl	8000e54 <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 800254a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 800254e:	f004 fe8e 	bl	800726e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8002554:	f004 fe8b 	bl	800726e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40012c00 	.word	0x40012c00
 8002560:	20000bf4 	.word	0x20000bf4
 8002564:	20000f7c 	.word	0x20000f7c
 8002568:	20000e98 	.word	0x20000e98

0800256c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8002570:	4a05      	ldr	r2, [pc, #20]	; (8002588 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002578:	4805      	ldr	r0, [pc, #20]	; (8002590 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800257a:	f004 fe78 	bl	800726e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800257e:	4805      	ldr	r0, [pc, #20]	; (8002594 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002580:	f004 fe75 	bl	800726e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000c04 	.word	0x20000c04
 800258c:	0800a618 	.word	0x0800a618
 8002590:	20000f7c 	.word	0x20000f7c
 8002594:	20001014 	.word	0x20001014

08002598 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 800259c:	f7ff f968 	bl	8001870 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025a0:	4803      	ldr	r0, [pc, #12]	; (80025b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80025a2:	f004 fe64 	bl	800726e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80025a6:	4803      	ldr	r0, [pc, #12]	; (80025b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80025a8:	f004 fe61 	bl	800726e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000f7c 	.word	0x20000f7c
 80025b4:	20000ee4 	.word	0x20000ee4

080025b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <TIM2_IRQHandler+0x10>)
 80025be:	f004 fe56 	bl	800726e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000fc8 	.word	0x20000fc8

080025cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 80025d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d4:	4815      	ldr	r0, [pc, #84]	; (800262c <EXTI15_10_IRQHandler+0x60>)
 80025d6:	f003 f97d 	bl	80058d4 <HAL_GPIO_ReadPin>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evGainMenu);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f7fe fc37 	bl	8000e54 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 80025e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ea:	4810      	ldr	r0, [pc, #64]	; (800262c <EXTI15_10_IRQHandler+0x60>)
 80025ec:	f003 f972 	bl	80058d4 <HAL_GPIO_ReadPin>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evFuncMenu);
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7fe fc2c 	bl	8000e54 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80025fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002600:	f7ff feea 	bl	80023d8 <LL_EXTI_IsActiveFlag_0_31>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800260a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800260e:	f7ff fef9 	bl	8002404 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8002612:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002616:	f7ff fedf 	bl	80023d8 <LL_EXTI_IsActiveFlag_0_31>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8002620:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002624:	f7ff feee 	bl	8002404 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	48000800 	.word	0x48000800

08002630 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e00a      	b.n	8002658 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002642:	f3af 8000 	nop.w
 8002646:	4601      	mov	r1, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	60ba      	str	r2, [r7, #8]
 800264e:	b2ca      	uxtb	r2, r1
 8002650:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	dbf0      	blt.n	8002642 <_read+0x12>
	}

return len;
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <_close>:
	}
	return len;
}

int _close(int file)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
	return -1;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002692:	605a      	str	r2, [r3, #4]
	return 0;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_isatty>:

int _isatty(int file)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
	return 1;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
	return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <_sbrk+0x50>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x16>
		heap_end = &end;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <_sbrk+0x50>)
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <_sbrk+0x54>)
 80026e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <_sbrk+0x50>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <_sbrk+0x50>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	466a      	mov	r2, sp
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d907      	bls.n	800270e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80026fe:	f006 fe51 	bl	80093a4 <__errno>
 8002702:	4602      	mov	r2, r0
 8002704:	230c      	movs	r3, #12
 8002706:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800270c:	e006      	b.n	800271c <_sbrk+0x48>
	}

	heap_end += incr;
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <_sbrk+0x50>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a03      	ldr	r2, [pc, #12]	; (8002724 <_sbrk+0x50>)
 8002718:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000bf8 	.word	0x20000bf8
 8002728:	20001068 	.word	0x20001068

0800272c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <SystemInit+0x28>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <SystemInit+0x28>)
 8002738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800273c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <SystemInit+0x28>)
 8002742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002746:	609a      	str	r2, [r3, #8]
#endif
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b09a      	sub	sp, #104	; 0x68
 800275c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800275e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f006 fe46 	bl	80093f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	2234      	movs	r2, #52	; 0x34
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f006 fe3a 	bl	80093f8 <memset>

  htim1.Instance = TIM1;
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <MX_TIM1_Init+0xd8>)
 8002786:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <MX_TIM1_Init+0xdc>)
 8002788:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <MX_TIM1_Init+0xd8>)
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <MX_TIM1_Init+0xd8>)
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <MX_TIM1_Init+0xd8>)
 8002798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <MX_TIM1_Init+0xd8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <MX_TIM1_Init+0xd8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <MX_TIM1_Init+0xd8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027b0:	2303      	movs	r3, #3
 80027b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027b4:	2300      	movs	r3, #0
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027b8:	2301      	movs	r3, #1
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027bc:	2300      	movs	r3, #0
 80027be:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027c4:	2300      	movs	r3, #0
 80027c6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027c8:	2301      	movs	r3, #1
 80027ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80027d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027d8:	4619      	mov	r1, r3
 80027da:	4815      	ldr	r0, [pc, #84]	; (8002830 <MX_TIM1_Init+0xd8>)
 80027dc:	f004 fca1 	bl	8007122 <HAL_TIM_Encoder_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80027e6:	f7ff fd03 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027fa:	4619      	mov	r1, r3
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <MX_TIM1_Init+0xd8>)
 80027fe:	f005 fa19 	bl	8007c34 <HAL_TIMEx_MasterConfigSynchronization>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002808:	f7ff fcf2 	bl	80021f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002810:	2300      	movs	r3, #0
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	4619      	mov	r1, r3
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <MX_TIM1_Init+0xd8>)
 800281a:	f005 faa1 	bl	8007d60 <HAL_TIMEx_ConfigBreakDeadTime>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002824:	f7ff fce4 	bl	80021f0 <Error_Handler>
  }

}
 8002828:	bf00      	nop
 800282a:	3768      	adds	r7, #104	; 0x68
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000f7c 	.word	0x20000f7c
 8002834:	40012c00 	.word	0x40012c00

08002838 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800283e:	f107 0320 	add.w	r3, r7, #32
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285c:	463b      	mov	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <MX_TIM2_Init+0xd0>)
 8002868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800286c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <MX_TIM2_Init+0xd0>)
 8002870:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002874:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <MX_TIM2_Init+0xd0>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <MX_TIM2_Init+0xd0>)
 800287e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002882:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <MX_TIM2_Init+0xd0>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <MX_TIM2_Init+0xd0>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002890:	481d      	ldr	r0, [pc, #116]	; (8002908 <MX_TIM2_Init+0xd0>)
 8002892:	f004 fb5c 	bl	8006f4e <HAL_TIM_Base_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800289c:	f7ff fca8 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028a6:	f107 0320 	add.w	r3, r7, #32
 80028aa:	4619      	mov	r1, r3
 80028ac:	4816      	ldr	r0, [pc, #88]	; (8002908 <MX_TIM2_Init+0xd0>)
 80028ae:	f004 fe5d 	bl	800756c <HAL_TIM_ConfigClockSource>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80028b8:	f7ff fc9a 	bl	80021f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80028bc:	2305      	movs	r3, #5
 80028be:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80028c0:	2350      	movs	r3, #80	; 0x50
 80028c2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	4619      	mov	r1, r3
 80028d2:	480d      	ldr	r0, [pc, #52]	; (8002908 <MX_TIM2_Init+0xd0>)
 80028d4:	f004 ff3a 	bl	800774c <HAL_TIM_SlaveConfigSynchro>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80028de:	f7ff fc87 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ea:	463b      	mov	r3, r7
 80028ec:	4619      	mov	r1, r3
 80028ee:	4806      	ldr	r0, [pc, #24]	; (8002908 <MX_TIM2_Init+0xd0>)
 80028f0:	f005 f9a0 	bl	8007c34 <HAL_TIMEx_MasterConfigSynchronization>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80028fa:	f7ff fc79 	bl	80021f0 <Error_Handler>
  }

}
 80028fe:	bf00      	nop
 8002900:	3730      	adds	r7, #48	; 0x30
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000fc8 	.word	0x20000fc8

0800290c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <MX_TIM5_Init+0x98>)
 800292c:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <MX_TIM5_Init+0x9c>)
 800292e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <MX_TIM5_Init+0x98>)
 8002932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002936:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <MX_TIM5_Init+0x98>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <MX_TIM5_Init+0x98>)
 8002940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002944:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <MX_TIM5_Init+0x98>)
 8002948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <MX_TIM5_Init+0x98>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002954:	4813      	ldr	r0, [pc, #76]	; (80029a4 <MX_TIM5_Init+0x98>)
 8002956:	f004 fafa 	bl	8006f4e <HAL_TIM_Base_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002960:	f7ff fc46 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002968:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800296a:	f107 0310 	add.w	r3, r7, #16
 800296e:	4619      	mov	r1, r3
 8002970:	480c      	ldr	r0, [pc, #48]	; (80029a4 <MX_TIM5_Init+0x98>)
 8002972:	f004 fdfb 	bl	800756c <HAL_TIM_ConfigClockSource>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800297c:	f7ff fc38 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	4619      	mov	r1, r3
 800298c:	4805      	ldr	r0, [pc, #20]	; (80029a4 <MX_TIM5_Init+0x98>)
 800298e:	f005 f951 	bl	8007c34 <HAL_TIMEx_MasterConfigSynchronization>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002998:	f7ff fc2a 	bl	80021f0 <Error_Handler>
  }

}
 800299c:	bf00      	nop
 800299e:	3720      	adds	r7, #32
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000f30 	.word	0x20000f30
 80029a8:	40000c00 	.word	0x40000c00

080029ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b094      	sub	sp, #80	; 0x50
 80029b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029cc:	463b      	mov	r3, r7
 80029ce:	2234      	movs	r2, #52	; 0x34
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f006 fd10 	bl	80093f8 <memset>

  htim8.Instance = TIM8;
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <MX_TIM8_Init+0xc8>)
 80029da:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <MX_TIM8_Init+0xcc>)
 80029dc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80029de:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <MX_TIM8_Init+0xc8>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e4:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <MX_TIM8_Init+0xc8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <MX_TIM8_Init+0xc8>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <MX_TIM8_Init+0xc8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <MX_TIM8_Init+0xc8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <MX_TIM8_Init+0xc8>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a02:	481c      	ldr	r0, [pc, #112]	; (8002a74 <MX_TIM8_Init+0xc8>)
 8002a04:	f004 faa3 	bl	8006f4e <HAL_TIM_Base_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8002a0e:	f7ff fbef 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a16:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4815      	ldr	r0, [pc, #84]	; (8002a74 <MX_TIM8_Init+0xc8>)
 8002a20:	f004 fda4 	bl	800756c <HAL_TIM_ConfigClockSource>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002a2a:	f7ff fbe1 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a3e:	4619      	mov	r1, r3
 8002a40:	480c      	ldr	r0, [pc, #48]	; (8002a74 <MX_TIM8_Init+0xc8>)
 8002a42:	f005 f8f7 	bl	8007c34 <HAL_TIMEx_MasterConfigSynchronization>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002a4c:	f7ff fbd0 	bl	80021f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a58:	463b      	mov	r3, r7
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_TIM8_Init+0xc8>)
 8002a5e:	f005 f97f 	bl	8007d60 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8002a68:	f7ff fbc2 	bl	80021f0 <Error_Handler>
  }

}
 8002a6c:	bf00      	nop
 8002a6e:	3750      	adds	r7, #80	; 0x50
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000e4c 	.word	0x20000e4c
 8002a78:	40013400 	.word	0x40013400

08002a7c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <MX_TIM15_Init+0xa0>)
 8002a9e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002ac8:	4813      	ldr	r0, [pc, #76]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002aca:	f004 fa40 	bl	8006f4e <HAL_TIM_Base_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002ad4:	f7ff fb8c 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	480c      	ldr	r0, [pc, #48]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002ae6:	f004 fd41 	bl	800756c <HAL_TIM_ConfigClockSource>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002af0:	f7ff fb7e 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af4:	2300      	movs	r3, #0
 8002af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4805      	ldr	r0, [pc, #20]	; (8002b18 <MX_TIM15_Init+0x9c>)
 8002b02:	f005 f897 	bl	8007c34 <HAL_TIMEx_MasterConfigSynchronization>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002b0c:	f7ff fb70 	bl	80021f0 <Error_Handler>
  }

}
 8002b10:	bf00      	nop
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000e98 	.word	0x20000e98
 8002b1c:	40014000 	.word	0x40014000

08002b20 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <MX_TIM16_Init+0x44>)
 8002b26:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <MX_TIM16_Init+0x48>)
 8002b28:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_TIM16_Init+0x44>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_TIM16_Init+0x44>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_TIM16_Init+0x44>)
 8002b38:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002b3c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_TIM16_Init+0x44>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <MX_TIM16_Init+0x44>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_TIM16_Init+0x44>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b50:	4804      	ldr	r0, [pc, #16]	; (8002b64 <MX_TIM16_Init+0x44>)
 8002b52:	f004 f9fc 	bl	8006f4e <HAL_TIM_Base_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002b5c:	f7ff fb48 	bl	80021f0 <Error_Handler>
  }

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20001014 	.word	0x20001014
 8002b68:	40014400 	.word	0x40014400

08002b6c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <MX_TIM17_Init+0x44>)
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <MX_TIM17_Init+0x48>)
 8002b74:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <MX_TIM17_Init+0x44>)
 8002b78:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002b7c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <MX_TIM17_Init+0x44>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <MX_TIM17_Init+0x44>)
 8002b86:	2240      	movs	r2, #64	; 0x40
 8002b88:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <MX_TIM17_Init+0x44>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <MX_TIM17_Init+0x44>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <MX_TIM17_Init+0x44>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002b9c:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <MX_TIM17_Init+0x44>)
 8002b9e:	f004 f9d6 	bl	8006f4e <HAL_TIM_Base_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002ba8:	f7ff fb22 	bl	80021f0 <Error_Handler>
  }

}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000ee4 	.word	0x20000ee4
 8002bb4:	40014800 	.word	0x40014800

08002bb8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xac>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d13f      	bne.n	8002c5a <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bda:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002be4:	6613      	str	r3, [r2, #96]	; 0x60
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	4619      	mov	r1, r3
 8002c24:	4811      	ldr	r0, [pc, #68]	; (8002c6c <HAL_TIM_Encoder_MspInit+0xb4>)
 8002c26:	f002 fcd3 	bl	80055d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2018      	movs	r0, #24
 8002c30:	f001 fdb9 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002c34:	2018      	movs	r0, #24
 8002c36:	f001 fdd0 	bl	80047da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	2019      	movs	r0, #25
 8002c40:	f001 fdb1 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c44:	2019      	movs	r0, #25
 8002c46:	f001 fdc8 	bl	80047da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	201a      	movs	r0, #26
 8002c50:	f001 fda9 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c54:	201a      	movs	r0, #26
 8002c56:	f001 fdc0 	bl	80047da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	3728      	adds	r7, #40	; 0x28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	48000800 	.word	0x48000800

08002c70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08e      	sub	sp, #56	; 0x38
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c90:	d131      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c92:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c9e:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002caa:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	4a4c      	ldr	r2, [pc, #304]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce0:	f002 fc76 	bl	80055d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	201c      	movs	r0, #28
 8002cea:	f001 fd5c 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cee:	201c      	movs	r0, #28
 8002cf0:	f001 fd73 	bl	80047da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002cf4:	e070      	b.n	8002dd8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a3a      	ldr	r2, [pc, #232]	; (8002de4 <HAL_TIM_Base_MspInit+0x174>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10c      	bne.n	8002d1a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d00:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4a36      	ldr	r2, [pc, #216]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d06:	f043 0308 	orr.w	r3, r3, #8
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0c:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	69bb      	ldr	r3, [r7, #24]
}
 8002d18:	e05e      	b.n	8002dd8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a32      	ldr	r2, [pc, #200]	; (8002de8 <HAL_TIM_Base_MspInit+0x178>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10c      	bne.n	8002d3e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d24:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d28:	4a2d      	ldr	r2, [pc, #180]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d2e:	6613      	str	r3, [r2, #96]	; 0x60
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	697b      	ldr	r3, [r7, #20]
}
 8002d3c:	e04c      	b.n	8002dd8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2a      	ldr	r2, [pc, #168]	; (8002dec <HAL_TIM_Base_MspInit+0x17c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d114      	bne.n	8002d72 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d52:	6613      	str	r3, [r2, #96]	; 0x60
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2100      	movs	r1, #0
 8002d64:	2018      	movs	r0, #24
 8002d66:	f001 fd1e 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002d6a:	2018      	movs	r0, #24
 8002d6c:	f001 fd35 	bl	80047da <HAL_NVIC_EnableIRQ>
}
 8002d70:	e032      	b.n	8002dd8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_TIM_Base_MspInit+0x180>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d114      	bne.n	8002da6 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d86:	6613      	str	r3, [r2, #96]	; 0x60
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002d94:	2200      	movs	r2, #0
 8002d96:	2101      	movs	r1, #1
 8002d98:	2019      	movs	r0, #25
 8002d9a:	f001 fd04 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d9e:	2019      	movs	r0, #25
 8002da0:	f001 fd1b 	bl	80047da <HAL_NVIC_EnableIRQ>
}
 8002da4:	e018      	b.n	8002dd8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_TIM_Base_MspInit+0x184>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d113      	bne.n	8002dd8 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dba:	6613      	str	r3, [r2, #96]	; 0x60
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_TIM_Base_MspInit+0x170>)
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2101      	movs	r1, #1
 8002dcc:	201a      	movs	r0, #26
 8002dce:	f001 fcea 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002dd2:	201a      	movs	r0, #26
 8002dd4:	f001 fd01 	bl	80047da <HAL_NVIC_EnableIRQ>
}
 8002dd8:	bf00      	nop
 8002dda:	3738      	adds	r7, #56	; 0x38
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40013400 	.word	0x40013400
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800

08002df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002df8:	480d      	ldr	r0, [pc, #52]	; (8002e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dfc:	480d      	ldr	r0, [pc, #52]	; (8002e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dfe:	490e      	ldr	r1, [pc, #56]	; (8002e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e00:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <LoopForever+0xe>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e04:	e002      	b.n	8002e0c <LoopCopyDataInit>

08002e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0a:	3304      	adds	r3, #4

08002e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e10:	d3f9      	bcc.n	8002e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e12:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e14:	4c0b      	ldr	r4, [pc, #44]	; (8002e44 <LoopForever+0x16>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e18:	e001      	b.n	8002e1e <LoopFillZerobss>

08002e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e1c:	3204      	adds	r2, #4

08002e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e20:	d3fb      	bcc.n	8002e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e22:	f7ff fc83 	bl	800272c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e26:	f006 fac3 	bl	80093b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e2a:	f7ff f8cd 	bl	8001fc8 <main>

08002e2e <LoopForever>:

LoopForever:
    b LoopForever
 8002e2e:	e7fe      	b.n	8002e2e <LoopForever>
  ldr   r0, =_estack
 8002e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e38:	20000bc8 	.word	0x20000bc8
  ldr r2, =_sidata
 8002e3c:	0800a90c 	.word	0x0800a90c
  ldr r2, =_sbss
 8002e40:	20000bc8 	.word	0x20000bc8
  ldr r4, =_ebss
 8002e44:	20001068 	.word	0x20001068

08002e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e48:	e7fe      	b.n	8002e48 <ADC1_2_IRQHandler>

08002e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e54:	2003      	movs	r0, #3
 8002e56:	f001 fc9b 	bl	8004790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f000 f80e 	bl	8002e7c <HAL_InitTick>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	71fb      	strb	r3, [r7, #7]
 8002e6a:	e001      	b.n	8002e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e6c:	f7ff fa90 	bl	8002390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e70:	79fb      	ldrb	r3, [r7, #7]

}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_InitTick+0x68>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d022      	beq.n	8002ed6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e90:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_InitTick+0x6c>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_InitTick+0x68>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f001 fca6 	bl	80047f6 <HAL_SYSTICK_Config>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10f      	bne.n	8002ed0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d809      	bhi.n	8002eca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ebe:	f001 fc72 	bl	80047a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_InitTick+0x70>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	e007      	b.n	8002eda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e004      	b.n	8002eda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e001      	b.n	8002eda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000018 	.word	0x20000018
 8002ee8:	20000010 	.word	0x20000010
 8002eec:	20000014 	.word	0x20000014

08002ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_IncTick+0x1c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_IncTick+0x20>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	4a03      	ldr	r2, [pc, #12]	; (8002f0c <HAL_IncTick+0x1c>)
 8002f00:	6013      	str	r3, [r2, #0]
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	20001060 	.word	0x20001060
 8002f10:	20000018 	.word	0x20000018

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20001060 	.word	0x20001060

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff ffee 	bl	8002f14 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f44:	d004      	beq.n	8002f50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_Delay+0x40>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f50:	bf00      	nop
 8002f52:	f7ff ffdf 	bl	8002f14 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d8f7      	bhi.n	8002f52 <HAL_Delay+0x26>
  {
  }
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000018 	.word	0x20000018

08002f70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	609a      	str	r2, [r3, #8]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fd8:	b490      	push	{r4, r7}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3360      	adds	r3, #96	; 0x60
 8002fea:	461a      	mov	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002ff4:	6822      	ldr	r2, [r4, #0]
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <LL_ADC_SetOffset+0x40>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	4313      	orrs	r3, r2
 8003006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800300a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bc90      	pop	{r4, r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	03fff000 	.word	0x03fff000

0800301c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800301c:	b490      	push	{r4, r7}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3360      	adds	r3, #96	; 0x60
 800302a:	461a      	mov	r2, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bc90      	pop	{r4, r7}
 8003042:	4770      	bx	lr

08003044 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003044:	b490      	push	{r4, r7}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3360      	adds	r3, #96	; 0x60
 8003054:	461a      	mov	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4313      	orrs	r3, r2
 8003068:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bc90      	pop	{r4, r7}
 8003072:	4770      	bx	lr

08003074 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003074:	b490      	push	{r4, r7}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3360      	adds	r3, #96	; 0x60
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4313      	orrs	r3, r2
 8003098:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc90      	pop	{r4, r7}
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030a4:	b490      	push	{r4, r7}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3360      	adds	r3, #96	; 0x60
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc90      	pop	{r4, r7}
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	615a      	str	r2, [r3, #20]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030fa:	b490      	push	{r4, r7}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3330      	adds	r3, #48	; 0x30
 800310a:	461a      	mov	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	4413      	add	r3, r2
 8003118:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800311a:	6822      	ldr	r2, [r4, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	211f      	movs	r1, #31
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0e9b      	lsrs	r3, r3, #26
 8003130:	f003 011f 	and.w	r1, r3, #31
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	4313      	orrs	r3, r2
 8003140:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bc90      	pop	{r4, r7}
 800314a:	4770      	bx	lr

0800314c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800314c:	b490      	push	{r4, r7}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3314      	adds	r3, #20
 800315c:	461a      	mov	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	0e5b      	lsrs	r3, r3, #25
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	4413      	add	r3, r2
 800316a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	0d1b      	lsrs	r3, r3, #20
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2107      	movs	r1, #7
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	401a      	ands	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	0d1b      	lsrs	r3, r3, #20
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	4313      	orrs	r3, r2
 8003190:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bc90      	pop	{r4, r7}
 800319a:	4770      	bx	lr

0800319c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0318 	and.w	r3, r3, #24
 80031be:	4908      	ldr	r1, [pc, #32]	; (80031e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031c0:	40d9      	lsrs	r1, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	400b      	ands	r3, r1
 80031c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ca:	431a      	orrs	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	0007ffff 	.word	0x0007ffff

080031e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6093      	str	r3, [r2, #8]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321c:	d101      	bne.n	8003222 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003240:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003244:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800326c:	d101      	bne.n	8003272 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <LL_ADC_IsEnabled+0x18>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <LL_ADC_IsEnabled+0x1a>
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d101      	bne.n	80032be <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d101      	bne.n	80032e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b089      	sub	sp, #36	; 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1ad      	b.n	800366a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7fe f859 	bl	80013d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff67 	bl	8003208 <LL_ADC_IsDeepPowerDownEnabled>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d004      	beq.n	800334a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff4d 	bl	80031e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ff82 	bl	8003258 <LL_ADC_IsInternalRegulatorEnabled>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d113      	bne.n	8003382 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ff66 	bl	8003230 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003364:	4b9e      	ldr	r3, [pc, #632]	; (80035e0 <HAL_ADC_Init+0x2ec>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	099b      	lsrs	r3, r3, #6
 800336a:	4a9e      	ldr	r2, [pc, #632]	; (80035e4 <HAL_ADC_Init+0x2f0>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003374:	e002      	b.n	800337c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3b01      	subs	r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f9      	bne.n	8003376 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff66 	bl	8003258 <LL_ADC_IsInternalRegulatorEnabled>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff77 	bl	80032a6 <LL_ADC_REG_IsConversionOngoing>
 80033b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 8148 	bne.w	8003658 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 8144 	bne.w	8003658 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff4b 	bl	8003280 <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d141      	bne.n	8003474 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f8:	d004      	beq.n	8003404 <HAL_ADC_Init+0x110>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7a      	ldr	r2, [pc, #488]	; (80035e8 <HAL_ADC_Init+0x2f4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10f      	bne.n	8003424 <HAL_ADC_Init+0x130>
 8003404:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003408:	f7ff ff3a 	bl	8003280 <LL_ADC_IsEnabled>
 800340c:	4604      	mov	r4, r0
 800340e:	4876      	ldr	r0, [pc, #472]	; (80035e8 <HAL_ADC_Init+0x2f4>)
 8003410:	f7ff ff36 	bl	8003280 <LL_ADC_IsEnabled>
 8003414:	4603      	mov	r3, r0
 8003416:	4323      	orrs	r3, r4
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e012      	b.n	800344a <HAL_ADC_Init+0x156>
 8003424:	4871      	ldr	r0, [pc, #452]	; (80035ec <HAL_ADC_Init+0x2f8>)
 8003426:	f7ff ff2b 	bl	8003280 <LL_ADC_IsEnabled>
 800342a:	4604      	mov	r4, r0
 800342c:	4870      	ldr	r0, [pc, #448]	; (80035f0 <HAL_ADC_Init+0x2fc>)
 800342e:	f7ff ff27 	bl	8003280 <LL_ADC_IsEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	431c      	orrs	r4, r3
 8003436:	486f      	ldr	r0, [pc, #444]	; (80035f4 <HAL_ADC_Init+0x300>)
 8003438:	f7ff ff22 	bl	8003280 <LL_ADC_IsEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	4323      	orrs	r3, r4
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003456:	d004      	beq.n	8003462 <HAL_ADC_Init+0x16e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a62      	ldr	r2, [pc, #392]	; (80035e8 <HAL_ADC_Init+0x2f4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_ADC_Init+0x172>
 8003462:	4a65      	ldr	r2, [pc, #404]	; (80035f8 <HAL_ADC_Init+0x304>)
 8003464:	e000      	b.n	8003468 <HAL_ADC_Init+0x174>
 8003466:	4a65      	ldr	r2, [pc, #404]	; (80035fc <HAL_ADC_Init+0x308>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f7ff fd7e 	bl	8002f70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7f5b      	ldrb	r3, [r3, #29]
 8003478:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800347e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003484:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800348a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003492:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d106      	bne.n	80034b0 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	3b01      	subs	r3, #1
 80034a8:	045b      	lsls	r3, r3, #17
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <HAL_ADC_Init+0x30c>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	430b      	orrs	r3, r1
 80034de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fed3 	bl	80032a6 <LL_ADC_REG_IsConversionOngoing>
 8003500:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fee0 	bl	80032cc <LL_ADC_INJ_IsConversionOngoing>
 800350c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d17f      	bne.n	8003614 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d17c      	bne.n	8003614 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800351e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003526:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003536:	f023 0302 	bic.w	r3, r3, #2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	69b9      	ldr	r1, [r7, #24]
 8003540:	430b      	orrs	r3, r1
 8003542:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d017      	beq.n	800357c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800355a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003564:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6911      	ldr	r1, [r2, #16]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	430b      	orrs	r3, r1
 8003576:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800357a:	e013      	b.n	80035a4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800358a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800359c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d12a      	bne.n	8003604 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035d0:	430a      	orrs	r2, r1
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	611a      	str	r2, [r3, #16]
 80035de:	e019      	b.n	8003614 <HAL_ADC_Init+0x320>
 80035e0:	20000010 	.word	0x20000010
 80035e4:	053e2d63 	.word	0x053e2d63
 80035e8:	50000100 	.word	0x50000100
 80035ec:	50000400 	.word	0x50000400
 80035f0:	50000500 	.word	0x50000500
 80035f4:	50000600 	.word	0x50000600
 80035f8:	50000300 	.word	0x50000300
 80035fc:	50000700 	.word	0x50000700
 8003600:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d10c      	bne.n	8003636 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f023 010f 	bic.w	r1, r3, #15
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	1e5a      	subs	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
 8003634:	e007      	b.n	8003646 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 020f 	bic.w	r2, r2, #15
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	65da      	str	r2, [r3, #92]	; 0x5c
 8003656:	e007      	b.n	8003668 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	f043 0210 	orr.w	r2, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003668:	7ffb      	ldrb	r3, [r7, #31]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop

08003674 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b0a6      	sub	sp, #152	; 0x98
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x22>
 8003692:	2302      	movs	r3, #2
 8003694:	e38e      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x740>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fdff 	bl	80032a6 <LL_ADC_REG_IsConversionOngoing>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 836f 	bne.w	8003d8e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	f7ff fd1c 	bl	80030fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fded 	bl	80032a6 <LL_ADC_REG_IsConversionOngoing>
 80036cc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fdf9 	bl	80032cc <LL_ADC_INJ_IsConversionOngoing>
 80036da:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 817b 	bne.w	80039de <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 8176 	bne.w	80039de <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036fa:	d10f      	bne.n	800371c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2200      	movs	r2, #0
 8003706:	4619      	mov	r1, r3
 8003708:	f7ff fd20 	bl	800314c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fcdd 	bl	80030d4 <LL_ADC_SetSamplingTimeCommonConfig>
 800371a:	e00e      	b.n	800373a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	461a      	mov	r2, r3
 800372a:	f7ff fd0f 	bl	800314c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fccd 	bl	80030d4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	08db      	lsrs	r3, r3, #3
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d022      	beq.n	80037a2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6919      	ldr	r1, [r3, #16]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800376c:	f7ff fc34 	bl	8002fd8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6919      	ldr	r1, [r3, #16]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	461a      	mov	r2, r3
 800377e:	f7ff fc79 	bl	8003074 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6919      	ldr	r1, [r3, #16]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	7f1b      	ldrb	r3, [r3, #28]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d102      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x124>
 8003792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003796:	e000      	b.n	800379a <HAL_ADC_ConfigChannel+0x126>
 8003798:	2300      	movs	r3, #0
 800379a:	461a      	mov	r2, r3
 800379c:	f7ff fc82 	bl	80030a4 <LL_ADC_SetOffsetSaturation>
 80037a0:	e11d      	b.n	80039de <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fc37 	bl	800301c <LL_ADC_GetOffsetChannel>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x15a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fc2c 	bl	800301c <LL_ADC_GetOffsetChannel>
 80037c4:	4603      	mov	r3, r0
 80037c6:	0e9b      	lsrs	r3, r3, #26
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	e012      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x180>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fc21 	bl	800301c <LL_ADC_GetOffsetChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80037ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <HAL_ADC_ConfigChannel+0x198>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0e9b      	lsrs	r3, r3, #26
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	e00a      	b.n	8003822 <HAL_ADC_ConfigChannel+0x1ae>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800381a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	429a      	cmp	r2, r3
 8003824:	d106      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fc08 	bl	8003044 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fbee 	bl	800301c <LL_ADC_GetOffsetChannel>
 8003840:	4603      	mov	r3, r0
 8003842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x1ec>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2101      	movs	r1, #1
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fbe3 	bl	800301c <LL_ADC_GetOffsetChannel>
 8003856:	4603      	mov	r3, r0
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	f003 021f 	and.w	r2, r3, #31
 800385e:	e010      	b.n	8003882 <HAL_ADC_ConfigChannel+0x20e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fbd8 	bl	800301c <LL_ADC_GetOffsetChannel>
 800386c:	4603      	mov	r3, r0
 800386e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <HAL_ADC_ConfigChannel+0x226>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	e00a      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x23c>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80038a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d106      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2200      	movs	r2, #0
 80038ba:	2101      	movs	r1, #1
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fbc1 	bl	8003044 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fba7 	bl	800301c <LL_ADC_GetOffsetChannel>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x27a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2102      	movs	r1, #2
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fb9c 	bl	800301c <LL_ADC_GetOffsetChannel>
 80038e4:	4603      	mov	r3, r0
 80038e6:	0e9b      	lsrs	r3, r3, #26
 80038e8:	f003 021f 	and.w	r2, r3, #31
 80038ec:	e010      	b.n	8003910 <HAL_ADC_ConfigChannel+0x29c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2102      	movs	r1, #2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fb91 	bl	800301c <LL_ADC_GetOffsetChannel>
 80038fa:	4603      	mov	r3, r0
 80038fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8003906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x2b4>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0e9b      	lsrs	r3, r3, #26
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	e00a      	b.n	800393e <HAL_ADC_ConfigChannel+0x2ca>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003938:	fab3 f383 	clz	r3, r3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	429a      	cmp	r2, r3
 8003940:	d106      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	2102      	movs	r1, #2
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fb7a 	bl	8003044 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2103      	movs	r1, #3
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fb60 	bl	800301c <LL_ADC_GetOffsetChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <HAL_ADC_ConfigChannel+0x308>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2103      	movs	r1, #3
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fb55 	bl	800301c <LL_ADC_GetOffsetChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	0e9b      	lsrs	r3, r3, #26
 8003976:	f003 021f 	and.w	r2, r3, #31
 800397a:	e010      	b.n	800399e <HAL_ADC_ConfigChannel+0x32a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2103      	movs	r1, #3
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fb4a 	bl	800301c <LL_ADC_GetOffsetChannel>
 8003988:	4603      	mov	r3, r0
 800398a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x342>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	e00a      	b.n	80039cc <HAL_ADC_ConfigChannel+0x358>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80039c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d106      	bne.n	80039de <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2103      	movs	r1, #3
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fb33 	bl	8003044 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fc4c 	bl	8003280 <LL_ADC_IsEnabled>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 810c 	bne.w	8003c08 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f7ff fbcd 	bl	800319c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	4aaf      	ldr	r2, [pc, #700]	; (8003cc4 <HAL_ADC_ConfigChannel+0x650>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	f040 80fd 	bne.w	8003c08 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10b      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x3c2>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0e9b      	lsrs	r3, r3, #26
 8003a24:	3301      	adds	r3, #1
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2b09      	cmp	r3, #9
 8003a2c:	bf94      	ite	ls
 8003a2e:	2301      	movls	r3, #1
 8003a30:	2300      	movhi	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	e012      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x3e8>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	2b09      	cmp	r3, #9
 8003a54:	bf94      	ite	ls
 8003a56:	2301      	movls	r3, #1
 8003a58:	2300      	movhi	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d064      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d107      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x408>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	3301      	adds	r3, #1
 8003a74:	069b      	lsls	r3, r3, #26
 8003a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a7a:	e00e      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x426>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	fa93 f3a3 	rbit	r3, r3
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	069b      	lsls	r3, r3, #26
 8003a96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x446>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	0e9b      	lsrs	r3, r3, #26
 8003aac:	3301      	adds	r3, #1
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	e010      	b.n	8003adc <HAL_ADC_ConfigChannel+0x468>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	ea42 0103 	orr.w	r1, r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x48e>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	0e9b      	lsrs	r3, r3, #26
 8003af2:	3301      	adds	r3, #1
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	051b      	lsls	r3, r3, #20
 8003b00:	e011      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x4b2>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f003 021f 	and.w	r2, r3, #31
 8003b1e:	4613      	mov	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4413      	add	r3, r2
 8003b24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b26:	430b      	orrs	r3, r1
 8003b28:	e069      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x4d2>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	0e9b      	lsrs	r3, r3, #26
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	069b      	lsls	r3, r3, #26
 8003b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b44:	e00e      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x4f0>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	61fb      	str	r3, [r7, #28]
  return result;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	069b      	lsls	r3, r3, #26
 8003b60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x510>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	0e9b      	lsrs	r3, r3, #26
 8003b76:	3301      	adds	r3, #1
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	e010      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x532>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	617b      	str	r3, [r7, #20]
  return result;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	ea42 0103 	orr.w	r1, r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10d      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x55e>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	0e9b      	lsrs	r3, r3, #26
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f003 021f 	and.w	r2, r3, #31
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3b1e      	subs	r3, #30
 8003bca:	051b      	lsls	r3, r3, #20
 8003bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	e014      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x588>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	60fb      	str	r3, [r7, #12]
  return result;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	3301      	adds	r3, #1
 8003bea:	f003 021f 	and.w	r2, r3, #31
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3b1e      	subs	r3, #30
 8003bf6:	051b      	lsls	r3, r3, #20
 8003bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	6892      	ldr	r2, [r2, #8]
 8003c02:	4619      	mov	r1, r3
 8003c04:	f7ff faa2 	bl	800314c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b2e      	ldr	r3, [pc, #184]	; (8003cc8 <HAL_ADC_ConfigChannel+0x654>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80c9 	beq.w	8003da8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c1e:	d004      	beq.n	8003c2a <HAL_ADC_ConfigChannel+0x5b6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <HAL_ADC_ConfigChannel+0x658>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x5ba>
 8003c2a:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <HAL_ADC_ConfigChannel+0x65c>)
 8003c2c:	e000      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x5bc>
 8003c2e:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_ADC_ConfigChannel+0x660>)
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff f9c3 	bl	8002fbc <LL_ADC_GetCommonPathInternalCh>
 8003c36:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_ADC_ConfigChannel+0x664>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_ADC_ConfigChannel+0x5da>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <HAL_ADC_ConfigChannel+0x668>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d14e      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d148      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c62:	d005      	beq.n	8003c70 <HAL_ADC_ConfigChannel+0x5fc>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <HAL_ADC_ConfigChannel+0x66c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	f040 8099 	bne.w	8003da2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c78:	d004      	beq.n	8003c84 <HAL_ADC_ConfigChannel+0x610>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <HAL_ADC_ConfigChannel+0x658>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x614>
 8003c84:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <HAL_ADC_ConfigChannel+0x65c>)
 8003c86:	e000      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x616>
 8003c88:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <HAL_ADC_ConfigChannel+0x660>)
 8003c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c92:	4619      	mov	r1, r3
 8003c94:	4610      	mov	r0, r2
 8003c96:	f7ff f97e 	bl	8002f96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_ADC_ConfigChannel+0x670>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <HAL_ADC_ConfigChannel+0x674>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	099a      	lsrs	r2, r3, #6
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cb2:	e002      	b.n	8003cba <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f9      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cc0:	e06f      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x72e>
 8003cc2:	bf00      	nop
 8003cc4:	407f0000 	.word	0x407f0000
 8003cc8:	80080000 	.word	0x80080000
 8003ccc:	50000100 	.word	0x50000100
 8003cd0:	50000300 	.word	0x50000300
 8003cd4:	50000700 	.word	0x50000700
 8003cd8:	c3210000 	.word	0xc3210000
 8003cdc:	90c00010 	.word	0x90c00010
 8003ce0:	50000600 	.word	0x50000600
 8003ce4:	20000010 	.word	0x20000010
 8003ce8:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a32      	ldr	r2, [pc, #200]	; (8003dbc <HAL_ADC_ConfigChannel+0x748>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d125      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x6ce>
 8003cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11f      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2e      	ldr	r2, [pc, #184]	; (8003dc0 <HAL_ADC_ConfigChannel+0x74c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d104      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x6a2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2c      	ldr	r2, [pc, #176]	; (8003dc4 <HAL_ADC_ConfigChannel+0x750>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d047      	beq.n	8003da6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d1e:	d004      	beq.n	8003d2a <HAL_ADC_ConfigChannel+0x6b6>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <HAL_ADC_ConfigChannel+0x74c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x6ba>
 8003d2a:	4a27      	ldr	r2, [pc, #156]	; (8003dc8 <HAL_ADC_ConfigChannel+0x754>)
 8003d2c:	e000      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x6bc>
 8003d2e:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <HAL_ADC_ConfigChannel+0x758>)
 8003d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f7ff f92b 	bl	8002f96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d40:	e031      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a22      	ldr	r2, [pc, #136]	; (8003dd0 <HAL_ADC_ConfigChannel+0x75c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d12d      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d127      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <HAL_ADC_ConfigChannel+0x74c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d022      	beq.n	8003da8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6a:	d004      	beq.n	8003d76 <HAL_ADC_ConfigChannel+0x702>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <HAL_ADC_ConfigChannel+0x74c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x706>
 8003d76:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <HAL_ADC_ConfigChannel+0x754>)
 8003d78:	e000      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x708>
 8003d7a:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <HAL_ADC_ConfigChannel+0x758>)
 8003d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f7ff f905 	bl	8002f96 <LL_ADC_SetCommonPathInternalCh>
 8003d8c:	e00c      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	f043 0220 	orr.w	r2, r3, #32
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003da0:	e002      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003da2:	bf00      	nop
 8003da4:	e000      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003da6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003db0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3798      	adds	r7, #152	; 0x98
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	c7520000 	.word	0xc7520000
 8003dc0:	50000100 	.word	0x50000100
 8003dc4:	50000500 	.word	0x50000500
 8003dc8:	50000300 	.word	0x50000300
 8003dcc:	50000700 	.word	0x50000700
 8003dd0:	cb840000 	.word	0xcb840000

08003dd4 <LL_ADC_IsEnabled>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <LL_ADC_IsEnabled+0x18>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <LL_ADC_IsEnabled+0x1a>
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <LL_ADC_REG_IsConversionOngoing>:
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d101      	bne.n	8003e12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b0a1      	sub	sp, #132	; 0x84
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e0e3      	b.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e4e:	d102      	bne.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003e50:	4b6f      	ldr	r3, [pc, #444]	; (8004010 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	e009      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a6e      	ldr	r2, [pc, #440]	; (8004014 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d102      	bne.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8003e60:	4b6d      	ldr	r3, [pc, #436]	; (8004018 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	e001      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10b      	bne.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0be      	b.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff ffb5 	bl	8003dfa <LL_ADC_REG_IsConversionOngoing>
 8003e90:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ffaf 	bl	8003dfa <LL_ADC_REG_IsConversionOngoing>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 80a0 	bne.w	8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 809c 	bne.w	8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb4:	d004      	beq.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a55      	ldr	r2, [pc, #340]	; (8004010 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003ec0:	4b56      	ldr	r3, [pc, #344]	; (800401c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ec2:	e000      	b.n	8003ec6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003ec4:	4b56      	ldr	r3, [pc, #344]	; (8004020 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ec6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d04b      	beq.n	8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ee2:	035b      	lsls	r3, r3, #13
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef4:	d004      	beq.n	8003f00 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a45      	ldr	r2, [pc, #276]	; (8004010 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10f      	bne.n	8003f20 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003f00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f04:	f7ff ff66 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003f08:	4604      	mov	r4, r0
 8003f0a:	4841      	ldr	r0, [pc, #260]	; (8004010 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003f0c:	f7ff ff62 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003f10:	4603      	mov	r3, r0
 8003f12:	4323      	orrs	r3, r4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e012      	b.n	8003f46 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003f20:	483c      	ldr	r0, [pc, #240]	; (8004014 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003f22:	f7ff ff57 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003f26:	4604      	mov	r4, r0
 8003f28:	483b      	ldr	r0, [pc, #236]	; (8004018 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f2a:	f7ff ff53 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	431c      	orrs	r4, r3
 8003f32:	483c      	ldr	r0, [pc, #240]	; (8004024 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003f34:	f7ff ff4e 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4323      	orrs	r3, r4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d056      	beq.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f52:	f023 030f 	bic.w	r3, r3, #15
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	6811      	ldr	r1, [r2, #0]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	6892      	ldr	r2, [r2, #8]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	431a      	orrs	r2, r3
 8003f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f64:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f66:	e047      	b.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f7c:	d004      	beq.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a23      	ldr	r2, [pc, #140]	; (8004010 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10f      	bne.n	8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003f88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f8c:	f7ff ff22 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003f90:	4604      	mov	r4, r0
 8003f92:	481f      	ldr	r0, [pc, #124]	; (8004010 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003f94:	f7ff ff1e 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4323      	orrs	r3, r4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e012      	b.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003fa8:	481a      	ldr	r0, [pc, #104]	; (8004014 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003faa:	f7ff ff13 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4819      	ldr	r0, [pc, #100]	; (8004018 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fb2:	f7ff ff0f 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	431c      	orrs	r4, r3
 8003fba:	481a      	ldr	r0, [pc, #104]	; (8004024 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003fbc:	f7ff ff0a 	bl	8003dd4 <LL_ADC_IsEnabled>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4323      	orrs	r3, r4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d012      	beq.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003fda:	f023 030f 	bic.w	r3, r3, #15
 8003fde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fe0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fe2:	e009      	b.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ff6:	e000      	b.n	8003ffa <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ff8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004002:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004006:	4618      	mov	r0, r3
 8004008:	3784      	adds	r7, #132	; 0x84
 800400a:	46bd      	mov	sp, r7
 800400c:	bd90      	pop	{r4, r7, pc}
 800400e:	bf00      	nop
 8004010:	50000100 	.word	0x50000100
 8004014:	50000400 	.word	0x50000400
 8004018:	50000500 	.word	0x50000500
 800401c:	50000300 	.word	0x50000300
 8004020:	50000700 	.word	0x50000700
 8004024:	50000600 	.word	0x50000600

08004028 <LL_EXTI_EnableIT_0_31>:
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <LL_EXTI_EnableIT_0_31+0x20>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4904      	ldr	r1, [pc, #16]	; (8004048 <LL_EXTI_EnableIT_0_31+0x20>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40010400 	.word	0x40010400

0800404c <LL_EXTI_EnableIT_32_63>:
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <LL_EXTI_EnableIT_32_63+0x20>)
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	4904      	ldr	r1, [pc, #16]	; (800406c <LL_EXTI_EnableIT_32_63+0x20>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4313      	orrs	r3, r2
 800405e:	620b      	str	r3, [r1, #32]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40010400 	.word	0x40010400

08004070 <LL_EXTI_DisableIT_0_31>:
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <LL_EXTI_DisableIT_0_31+0x24>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	43db      	mvns	r3, r3
 8004080:	4904      	ldr	r1, [pc, #16]	; (8004094 <LL_EXTI_DisableIT_0_31+0x24>)
 8004082:	4013      	ands	r3, r2
 8004084:	600b      	str	r3, [r1, #0]
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40010400 	.word	0x40010400

08004098 <LL_EXTI_DisableIT_32_63>:
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <LL_EXTI_DisableIT_32_63+0x24>)
 80040a2:	6a1a      	ldr	r2, [r3, #32]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	4904      	ldr	r1, [pc, #16]	; (80040bc <LL_EXTI_DisableIT_32_63+0x24>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	620b      	str	r3, [r1, #32]
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40010400 	.word	0x40010400

080040c0 <LL_EXTI_EnableEvent_0_31>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	4904      	ldr	r1, [pc, #16]	; (80040e0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010400 	.word	0x40010400

080040e4 <LL_EXTI_EnableEvent_32_63>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <LL_EXTI_EnableEvent_32_63+0x20>)
 80040ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040f0:	4904      	ldr	r1, [pc, #16]	; (8004104 <LL_EXTI_EnableEvent_32_63+0x20>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40010400 	.word	0x40010400

08004108 <LL_EXTI_DisableEvent_0_31>:
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	43db      	mvns	r3, r3
 8004118:	4904      	ldr	r1, [pc, #16]	; (800412c <LL_EXTI_DisableEvent_0_31+0x24>)
 800411a:	4013      	ands	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010400 	.word	0x40010400

08004130 <LL_EXTI_DisableEvent_32_63>:
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <LL_EXTI_DisableEvent_32_63+0x24>)
 800413a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	43db      	mvns	r3, r3
 8004140:	4904      	ldr	r1, [pc, #16]	; (8004154 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004142:	4013      	ands	r3, r2
 8004144:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40010400 	.word	0x40010400

08004158 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	4904      	ldr	r1, [pc, #16]	; (8004178 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40010400 	.word	0x40010400

0800417c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004188:	4904      	ldr	r1, [pc, #16]	; (800419c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4313      	orrs	r3, r2
 800418e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	40010400 	.word	0x40010400

080041a0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	43db      	mvns	r3, r3
 80041b0:	4904      	ldr	r1, [pc, #16]	; (80041c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010400 	.word	0x40010400

080041c8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80041d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	4904      	ldr	r1, [pc, #16]	; (80041ec <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80041da:	4013      	ands	r3, r2
 80041dc:	628b      	str	r3, [r1, #40]	; 0x28
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010400 	.word	0x40010400

080041f0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	4904      	ldr	r1, [pc, #16]	; (8004210 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4313      	orrs	r3, r2
 8004202:	60cb      	str	r3, [r1, #12]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40010400 	.word	0x40010400

08004214 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	4904      	ldr	r1, [pc, #16]	; (8004234 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4313      	orrs	r3, r2
 8004226:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40010400 	.word	0x40010400

08004238 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	43db      	mvns	r3, r3
 8004248:	4904      	ldr	r1, [pc, #16]	; (800425c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800424a:	4013      	ands	r3, r2
 800424c:	60cb      	str	r3, [r1, #12]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40010400 	.word	0x40010400

08004260 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	43db      	mvns	r3, r3
 8004270:	4904      	ldr	r1, [pc, #16]	; (8004284 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004272:	4013      	ands	r3, r2
 8004274:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40010400 	.word	0x40010400

08004288 <LL_EXTI_ClearFlag_0_31>:
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004290:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6153      	str	r3, [r2, #20]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010400 	.word	0x40010400

080042a8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80042b0:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010400 	.word	0x40010400

080042c8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e180      	b.n	80045e6 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f2:	d102      	bne.n	80042fa <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e175      	b.n	80045e6 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	7f5b      	ldrb	r3, [r3, #29]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d108      	bne.n	8004316 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fd f8f3 	bl	80014fc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004320:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b98      	ldr	r3, [pc, #608]	; (80045a8 <HAL_COMP_Init+0x2e0>)
 8004348:	4013      	ands	r3, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	6979      	ldr	r1, [r7, #20]
 8004350:	430b      	orrs	r3, r1
 8004352:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d015      	beq.n	800438e <HAL_COMP_Init+0xc6>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d112      	bne.n	800438e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004368:	4b90      	ldr	r3, [pc, #576]	; (80045ac <HAL_COMP_Init+0x2e4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	4a90      	ldr	r2, [pc, #576]	; (80045b0 <HAL_COMP_Init+0x2e8>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	099a      	lsrs	r2, r3, #6
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004380:	e002      	b.n	8004388 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3b01      	subs	r3, #1
 8004386:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f9      	bne.n	8004382 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a88      	ldr	r2, [pc, #544]	; (80045b4 <HAL_COMP_Init+0x2ec>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d028      	beq.n	80043ea <HAL_COMP_Init+0x122>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a86      	ldr	r2, [pc, #536]	; (80045b8 <HAL_COMP_Init+0x2f0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d020      	beq.n	80043e4 <HAL_COMP_Init+0x11c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a85      	ldr	r2, [pc, #532]	; (80045bc <HAL_COMP_Init+0x2f4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d018      	beq.n	80043de <HAL_COMP_Init+0x116>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a83      	ldr	r2, [pc, #524]	; (80045c0 <HAL_COMP_Init+0x2f8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d010      	beq.n	80043d8 <HAL_COMP_Init+0x110>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a82      	ldr	r2, [pc, #520]	; (80045c4 <HAL_COMP_Init+0x2fc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d008      	beq.n	80043d2 <HAL_COMP_Init+0x10a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a80      	ldr	r2, [pc, #512]	; (80045c8 <HAL_COMP_Init+0x300>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_COMP_Init+0x106>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00f      	b.n	80043ee <HAL_COMP_Init+0x126>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e00d      	b.n	80043ee <HAL_COMP_Init+0x126>
 80043d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043d6:	e00a      	b.n	80043ee <HAL_COMP_Init+0x126>
 80043d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043dc:	e007      	b.n	80043ee <HAL_COMP_Init+0x126>
 80043de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80043e2:	e004      	b.n	80043ee <HAL_COMP_Init+0x126>
 80043e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043e8:	e001      	b.n	80043ee <HAL_COMP_Init+0x126>
 80043ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043ee:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80b6 	beq.w	800456a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d011      	beq.n	800442e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a6e      	ldr	r2, [pc, #440]	; (80045c8 <HAL_COMP_Init+0x300>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <HAL_COMP_Init+0x156>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a6c      	ldr	r2, [pc, #432]	; (80045cc <HAL_COMP_Init+0x304>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d103      	bne.n	8004426 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800441e:	6938      	ldr	r0, [r7, #16]
 8004420:	f7ff feac 	bl	800417c <LL_EXTI_EnableRisingTrig_32_63>
 8004424:	e014      	b.n	8004450 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004426:	6938      	ldr	r0, [r7, #16]
 8004428:	f7ff fe96 	bl	8004158 <LL_EXTI_EnableRisingTrig_0_31>
 800442c:	e010      	b.n	8004450 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a65      	ldr	r2, [pc, #404]	; (80045c8 <HAL_COMP_Init+0x300>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_COMP_Init+0x17a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a63      	ldr	r2, [pc, #396]	; (80045cc <HAL_COMP_Init+0x304>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d103      	bne.n	800444a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f7ff fec0 	bl	80041c8 <LL_EXTI_DisableRisingTrig_32_63>
 8004448:	e002      	b.n	8004450 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f7ff fea8 	bl	80041a0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d011      	beq.n	8004480 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a59      	ldr	r2, [pc, #356]	; (80045c8 <HAL_COMP_Init+0x300>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_COMP_Init+0x1a8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a58      	ldr	r2, [pc, #352]	; (80045cc <HAL_COMP_Init+0x304>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d103      	bne.n	8004478 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8004470:	6938      	ldr	r0, [r7, #16]
 8004472:	f7ff fecf 	bl	8004214 <LL_EXTI_EnableFallingTrig_32_63>
 8004476:	e014      	b.n	80044a2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004478:	6938      	ldr	r0, [r7, #16]
 800447a:	f7ff feb9 	bl	80041f0 <LL_EXTI_EnableFallingTrig_0_31>
 800447e:	e010      	b.n	80044a2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a50      	ldr	r2, [pc, #320]	; (80045c8 <HAL_COMP_Init+0x300>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_COMP_Init+0x1cc>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a4f      	ldr	r2, [pc, #316]	; (80045cc <HAL_COMP_Init+0x304>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d103      	bne.n	800449c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8004494:	6938      	ldr	r0, [r7, #16]
 8004496:	f7ff fee3 	bl	8004260 <LL_EXTI_DisableFallingTrig_32_63>
 800449a:	e002      	b.n	80044a2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800449c:	6938      	ldr	r0, [r7, #16]
 800449e:	f7ff fecb 	bl	8004238 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a48      	ldr	r2, [pc, #288]	; (80045c8 <HAL_COMP_Init+0x300>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_COMP_Init+0x1ee>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a46      	ldr	r2, [pc, #280]	; (80045cc <HAL_COMP_Init+0x304>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d103      	bne.n	80044be <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80044b6:	6938      	ldr	r0, [r7, #16]
 80044b8:	f7ff fef6 	bl	80042a8 <LL_EXTI_ClearFlag_32_63>
 80044bc:	e002      	b.n	80044c4 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80044be:	6938      	ldr	r0, [r7, #16]
 80044c0:	f7ff fee2 	bl	8004288 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d011      	beq.n	80044f4 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3c      	ldr	r2, [pc, #240]	; (80045c8 <HAL_COMP_Init+0x300>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d004      	beq.n	80044e4 <HAL_COMP_Init+0x21c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3b      	ldr	r2, [pc, #236]	; (80045cc <HAL_COMP_Init+0x304>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80044e4:	6938      	ldr	r0, [r7, #16]
 80044e6:	f7ff fdfd 	bl	80040e4 <LL_EXTI_EnableEvent_32_63>
 80044ea:	e014      	b.n	8004516 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80044ec:	6938      	ldr	r0, [r7, #16]
 80044ee:	f7ff fde7 	bl	80040c0 <LL_EXTI_EnableEvent_0_31>
 80044f2:	e010      	b.n	8004516 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a33      	ldr	r2, [pc, #204]	; (80045c8 <HAL_COMP_Init+0x300>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_COMP_Init+0x240>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a32      	ldr	r2, [pc, #200]	; (80045cc <HAL_COMP_Init+0x304>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8004508:	6938      	ldr	r0, [r7, #16]
 800450a:	f7ff fe11 	bl	8004130 <LL_EXTI_DisableEvent_32_63>
 800450e:	e002      	b.n	8004516 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8004510:	6938      	ldr	r0, [r7, #16]
 8004512:	f7ff fdf9 	bl	8004108 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d011      	beq.n	8004546 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <HAL_COMP_Init+0x300>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_COMP_Init+0x26e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a26      	ldr	r2, [pc, #152]	; (80045cc <HAL_COMP_Init+0x304>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d103      	bne.n	800453e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8004536:	6938      	ldr	r0, [r7, #16]
 8004538:	f7ff fd88 	bl	800404c <LL_EXTI_EnableIT_32_63>
 800453c:	e04b      	b.n	80045d6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800453e:	6938      	ldr	r0, [r7, #16]
 8004540:	f7ff fd72 	bl	8004028 <LL_EXTI_EnableIT_0_31>
 8004544:	e047      	b.n	80045d6 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <HAL_COMP_Init+0x300>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_COMP_Init+0x292>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_COMP_Init+0x304>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d103      	bne.n	8004562 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800455a:	6938      	ldr	r0, [r7, #16]
 800455c:	f7ff fd9c 	bl	8004098 <LL_EXTI_DisableIT_32_63>
 8004560:	e039      	b.n	80045d6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004562:	6938      	ldr	r0, [r7, #16]
 8004564:	f7ff fd84 	bl	8004070 <LL_EXTI_DisableIT_0_31>
 8004568:	e035      	b.n	80045d6 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <HAL_COMP_Init+0x300>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_COMP_Init+0x2b6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <HAL_COMP_Init+0x304>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d103      	bne.n	8004586 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800457e:	6938      	ldr	r0, [r7, #16]
 8004580:	f7ff fdd6 	bl	8004130 <LL_EXTI_DisableEvent_32_63>
 8004584:	e002      	b.n	800458c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004586:	6938      	ldr	r0, [r7, #16]
 8004588:	f7ff fdbe 	bl	8004108 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <HAL_COMP_Init+0x300>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_COMP_Init+0x2d8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <HAL_COMP_Init+0x304>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d117      	bne.n	80045d0 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80045a0:	6938      	ldr	r0, [r7, #16]
 80045a2:	f7ff fd79 	bl	8004098 <LL_EXTI_DisableIT_32_63>
 80045a6:	e016      	b.n	80045d6 <HAL_COMP_Init+0x30e>
 80045a8:	ff007e0f 	.word	0xff007e0f
 80045ac:	20000010 	.word	0x20000010
 80045b0:	053e2d63 	.word	0x053e2d63
 80045b4:	40010200 	.word	0x40010200
 80045b8:	40010204 	.word	0x40010204
 80045bc:	40010208 	.word	0x40010208
 80045c0:	4001020c 	.word	0x4001020c
 80045c4:	40010210 	.word	0x40010210
 80045c8:	40010214 	.word	0x40010214
 80045cc:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80045d0:	6938      	ldr	r0, [r7, #16]
 80045d2:	f7ff fd4d 	bl	8004070 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	7f5b      	ldrb	r3, [r3, #29]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80045e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <__NVIC_SetPriorityGrouping>:
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <__NVIC_SetPriorityGrouping+0x44>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800460c:	4013      	ands	r3, r2
 800460e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800461c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004622:	4a04      	ldr	r2, [pc, #16]	; (8004634 <__NVIC_SetPriorityGrouping+0x44>)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	60d3      	str	r3, [r2, #12]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <__NVIC_GetPriorityGrouping>:
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <__NVIC_GetPriorityGrouping+0x18>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 0307 	and.w	r3, r3, #7
}
 8004646:	4618      	mov	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_EnableIRQ>:
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	2b00      	cmp	r3, #0
 8004664:	db0b      	blt.n	800467e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	f003 021f 	and.w	r2, r3, #31
 800466c:	4907      	ldr	r1, [pc, #28]	; (800468c <__NVIC_EnableIRQ+0x38>)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2001      	movs	r0, #1
 8004676:	fa00 f202 	lsl.w	r2, r0, r2
 800467a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000e100 	.word	0xe000e100

08004690 <__NVIC_SetPriority>:
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	db0a      	blt.n	80046ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	490c      	ldr	r1, [pc, #48]	; (80046dc <__NVIC_SetPriority+0x4c>)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	0112      	lsls	r2, r2, #4
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	440b      	add	r3, r1
 80046b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046b8:	e00a      	b.n	80046d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4908      	ldr	r1, [pc, #32]	; (80046e0 <__NVIC_SetPriority+0x50>)
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	3b04      	subs	r3, #4
 80046c8:	0112      	lsls	r2, r2, #4
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	440b      	add	r3, r1
 80046ce:	761a      	strb	r2, [r3, #24]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	e000e100 	.word	0xe000e100
 80046e0:	e000ed00 	.word	0xe000ed00

080046e4 <NVIC_EncodePriority>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f1c3 0307 	rsb	r3, r3, #7
 80046fe:	2b04      	cmp	r3, #4
 8004700:	bf28      	it	cs
 8004702:	2304      	movcs	r3, #4
 8004704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3304      	adds	r3, #4
 800470a:	2b06      	cmp	r3, #6
 800470c:	d902      	bls.n	8004714 <NVIC_EncodePriority+0x30>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3b03      	subs	r3, #3
 8004712:	e000      	b.n	8004716 <NVIC_EncodePriority+0x32>
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43da      	mvns	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	401a      	ands	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800472c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	43d9      	mvns	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	4313      	orrs	r3, r2
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <SysTick_Config>:
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800475c:	d301      	bcc.n	8004762 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800475e:	2301      	movs	r3, #1
 8004760:	e00f      	b.n	8004782 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <SysTick_Config+0x40>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800476a:	210f      	movs	r1, #15
 800476c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004770:	f7ff ff8e 	bl	8004690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <SysTick_Config+0x40>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477a:	4b04      	ldr	r3, [pc, #16]	; (800478c <SysTick_Config+0x40>)
 800477c:	2207      	movs	r2, #7
 800477e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	e000e010 	.word	0xe000e010

08004790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff29 	bl	80045f0 <__NVIC_SetPriorityGrouping>
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4603      	mov	r3, r0
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047b4:	f7ff ff40 	bl	8004638 <__NVIC_GetPriorityGrouping>
 80047b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	6978      	ldr	r0, [r7, #20]
 80047c0:	f7ff ff90 	bl	80046e4 <NVIC_EncodePriority>
 80047c4:	4602      	mov	r2, r0
 80047c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff ff5f 	bl	8004690 <__NVIC_SetPriority>
}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	4603      	mov	r3, r0
 80047e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff33 	bl	8004654 <__NVIC_EnableIRQ>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff ffa4 	bl	800474c <SysTick_Config>
 8004804:	4603      	mov	r3, r0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e014      	b.n	800484a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	791b      	ldrb	r3, [r3, #4]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fc ff19 	bl	8001668 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	795b      	ldrb	r3, [r3, #5]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_DAC_Start+0x16>
 8004864:	2302      	movs	r3, #2
 8004866:	e043      	b.n	80048f0 <HAL_DAC_Start+0x9e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800488c:	2001      	movs	r0, #1
 800488e:	f7fe fb4d 	bl	8002f2c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10f      	bne.n	80048b8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d11d      	bne.n	80048e2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	e014      	b.n	80048e2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2102      	movs	r1, #2
 80048ca:	fa01 f303 	lsl.w	r3, r1, r3
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d107      	bne.n	80048e2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0202 	orr.w	r2, r2, #2
 80048e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	795b      	ldrb	r3, [r3, #5]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_DAC_Start_DMA+0x1e>
 8004912:	2302      	movs	r3, #2
 8004914:	e0a1      	b.n	8004a5a <HAL_DAC_Start_DMA+0x162>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2202      	movs	r2, #2
 8004920:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d12a      	bne.n	800497e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a4d      	ldr	r2, [pc, #308]	; (8004a64 <HAL_DAC_Start_DMA+0x16c>)
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a4c      	ldr	r2, [pc, #304]	; (8004a68 <HAL_DAC_Start_DMA+0x170>)
 8004936:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a4b      	ldr	r2, [pc, #300]	; (8004a6c <HAL_DAC_Start_DMA+0x174>)
 800493e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800494e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b04      	cmp	r3, #4
 8004954:	d009      	beq.n	800496a <HAL_DAC_Start_DMA+0x72>
 8004956:	2b08      	cmp	r3, #8
 8004958:	d00c      	beq.n	8004974 <HAL_DAC_Start_DMA+0x7c>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d000      	beq.n	8004960 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800495e:	e039      	b.n	80049d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	613b      	str	r3, [r7, #16]
        break;
 8004968:	e034      	b.n	80049d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	613b      	str	r3, [r7, #16]
        break;
 8004972:	e02f      	b.n	80049d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3310      	adds	r3, #16
 800497a:	613b      	str	r3, [r7, #16]
        break;
 800497c:	e02a      	b.n	80049d4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	4a3b      	ldr	r2, [pc, #236]	; (8004a70 <HAL_DAC_Start_DMA+0x178>)
 8004984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	4a3a      	ldr	r2, [pc, #232]	; (8004a74 <HAL_DAC_Start_DMA+0x17c>)
 800498c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4a39      	ldr	r2, [pc, #228]	; (8004a78 <HAL_DAC_Start_DMA+0x180>)
 8004994:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049a4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d009      	beq.n	80049c0 <HAL_DAC_Start_DMA+0xc8>
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d00c      	beq.n	80049ca <HAL_DAC_Start_DMA+0xd2>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d000      	beq.n	80049b6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80049b4:	e00e      	b.n	80049d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3314      	adds	r3, #20
 80049bc:	613b      	str	r3, [r7, #16]
        break;
 80049be:	e009      	b.n	80049d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3318      	adds	r3, #24
 80049c6:	613b      	str	r3, [r7, #16]
        break;
 80049c8:	e004      	b.n	80049d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	331c      	adds	r3, #28
 80049d0:	613b      	str	r3, [r7, #16]
        break;
 80049d2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d111      	bne.n	80049fe <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6898      	ldr	r0, [r3, #8]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	f000 fbc8 	bl	8005188 <HAL_DMA_Start_IT>
 80049f8:	4603      	mov	r3, r0
 80049fa:	75fb      	strb	r3, [r7, #23]
 80049fc:	e010      	b.n	8004a20 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004a0c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	68d8      	ldr	r0, [r3, #12]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	f000 fbb6 	bl	8005188 <HAL_DMA_Start_IT>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10f      	bne.n	8004a4c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2201      	movs	r2, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8004a44:	2001      	movs	r0, #1
 8004a46:	f7fe fa71 	bl	8002f2c <HAL_Delay>
 8004a4a:	e005      	b.n	8004a58 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f043 0204 	orr.w	r2, r3, #4
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	08004f25 	.word	0x08004f25
 8004a68:	08004f47 	.word	0x08004f47
 8004a6c:	08004f63 	.word	0x08004f63
 8004a70:	08004fcd 	.word	0x08004fcd
 8004a74:	08004fef 	.word	0x08004fef
 8004a78:	0800500b 	.word	0x0800500b

08004a7c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6819      	ldr	r1, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	400a      	ands	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f7fe fa33 	bl	8002f2c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10f      	bne.n	8004aec <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fbd4 	bl	800527e <HAL_DMA_Abort>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e00e      	b.n	8004b0a <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fbc4 	bl	800527e <HAL_DMA_Abort>
 8004af6:	4603      	mov	r3, r0
 8004af8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004b08:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2204      	movs	r2, #4
 8004b14:	711a      	strb	r2, [r3, #4]
 8004b16:	e002      	b.n	8004b1e <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	3308      	adds	r3, #8
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e004      	b.n	8004b62 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3314      	adds	r3, #20
 8004b60:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	461a      	mov	r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	e002      	b.n	8004bbe <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	; 0x28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	795b      	ldrb	r3, [r3, #5]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_DAC_ConfigChannel+0x1c>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e194      	b.n	8004f12 <HAL_DAC_ConfigChannel+0x346>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d174      	bne.n	8004ce6 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d137      	bne.n	8004c72 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8004c02:	f7fe f987 	bl	8002f14 <HAL_GetTick>
 8004c06:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c08:	e011      	b.n	8004c2e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c0a:	f7fe f983 	bl	8002f14 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d90a      	bls.n	8004c2e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f043 0208 	orr.w	r2, r3, #8
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2203      	movs	r2, #3
 8004c28:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e171      	b.n	8004f12 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e6      	bne.n	8004c0a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	f7fe f975 	bl	8002f2c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8004c4c:	e01e      	b.n	8004c8c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c4e:	f7fe f961 	bl	8002f14 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d90a      	bls.n	8004c72 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f043 0208 	orr.w	r2, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e14f      	b.n	8004f12 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	dbe8      	blt.n	8004c4e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	f7fe f955 	bl	8002f2c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	ea02 0103 	and.w	r1, r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	21ff      	movs	r1, #255	; 0xff
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	ea02 0103 	and.w	r1, r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d11d      	bne.n	8004d2a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	221f      	movs	r2, #31
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	4013      	ands	r3, r2
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f003 0310 	and.w	r3, r3, #16
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2207      	movs	r2, #7
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	4013      	ands	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
 8004d56:	e011      	b.n	8004d7c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004d64:	2301      	movs	r3, #1
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	e008      	b.n	8004d7c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004d72:	2301      	movs	r3, #1
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	e001      	b.n	8004d7c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	6a3a      	ldr	r2, [r7, #32]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9e:	4013      	ands	r3, r2
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	791b      	ldrb	r3, [r3, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d102      	bne.n	8004db0 <HAL_DAC_ConfigChannel+0x1e4>
 8004daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dae:	e000      	b.n	8004db2 <HAL_DAC_ConfigChannel+0x1e6>
 8004db0:	2300      	movs	r3, #0
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dca:	4013      	ands	r3, r2
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	795b      	ldrb	r3, [r3, #5]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d102      	bne.n	8004ddc <HAL_DAC_ConfigChannel+0x210>
 8004dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dda:	e000      	b.n	8004dde <HAL_DAC_ConfigChannel+0x212>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d114      	bne.n	8004e1e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004df4:	f001 faf8 	bl	80063e8 <HAL_RCC_GetHCLKFreq>
 8004df8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	4a47      	ldr	r2, [pc, #284]	; (8004f1c <HAL_DAC_ConfigChannel+0x350>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d904      	bls.n	8004e0c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	e00d      	b.n	8004e28 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	4a44      	ldr	r2, [pc, #272]	; (8004f20 <HAL_DAC_ConfigChannel+0x354>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d909      	bls.n	8004e28 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	e004      	b.n	8004e28 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e24:	4313      	orrs	r3, r2
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e36:	4313      	orrs	r3, r2
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6819      	ldr	r1, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43da      	mvns	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e92:	4313      	orrs	r3, r2
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	22c0      	movs	r2, #192	; 0xc0
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43da      	mvns	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	400a      	ands	r2, r1
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	089b      	lsrs	r3, r3, #2
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	089b      	lsrs	r3, r3, #2
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	ea02 0103 	and.w	r1, r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	409a      	lsls	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3728      	adds	r7, #40	; 0x28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	09896800 	.word	0x09896800
 8004f20:	04c4b400 	.word	0x04c4b400

08004f24 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff fe20 	bl	8004b78 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	711a      	strb	r2, [r3, #4]
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff fe19 	bl	8004b8c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f043 0204 	orr.w	r2, r3, #4
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7fd f818 	bl	8001fb2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	711a      	strb	r2, [r3, #4]
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff ffd8 	bl	8004f90 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	711a      	strb	r2, [r3, #4]
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff ffd1 	bl	8004fa4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f043 0204 	orr.w	r2, r3, #4
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f7ff ffc7 	bl	8004fb8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	711a      	strb	r2, [r3, #4]
}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e08d      	b.n	8005166 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	4b47      	ldr	r3, [pc, #284]	; (8005170 <HAL_DMA_Init+0x138>)
 8005052:	429a      	cmp	r2, r3
 8005054:	d80f      	bhi.n	8005076 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	4b45      	ldr	r3, [pc, #276]	; (8005174 <HAL_DMA_Init+0x13c>)
 800505e:	4413      	add	r3, r2
 8005060:	4a45      	ldr	r2, [pc, #276]	; (8005178 <HAL_DMA_Init+0x140>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	009a      	lsls	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a42      	ldr	r2, [pc, #264]	; (800517c <HAL_DMA_Init+0x144>)
 8005072:	641a      	str	r2, [r3, #64]	; 0x40
 8005074:	e00e      	b.n	8005094 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	4b40      	ldr	r3, [pc, #256]	; (8005180 <HAL_DMA_Init+0x148>)
 800507e:	4413      	add	r3, r2
 8005080:	4a3d      	ldr	r2, [pc, #244]	; (8005178 <HAL_DMA_Init+0x140>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	009a      	lsls	r2, r3, #2
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a3c      	ldr	r2, [pc, #240]	; (8005184 <HAL_DMA_Init+0x14c>)
 8005092:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80050b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa10 	bl	800550c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f4:	d102      	bne.n	80050fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005110:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d010      	beq.n	800513c <HAL_DMA_Init+0x104>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b04      	cmp	r3, #4
 8005120:	d80c      	bhi.n	800513c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa30 	bl	8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	e008      	b.n	800514e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40020407 	.word	0x40020407
 8005174:	bffdfff8 	.word	0xbffdfff8
 8005178:	cccccccd 	.word	0xcccccccd
 800517c:	40020000 	.word	0x40020000
 8005180:	bffdfbf8 	.word	0xbffdfbf8
 8005184:	40020400 	.word	0x40020400

08005188 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_DMA_Start_IT+0x20>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e066      	b.n	8005276 <HAL_DMA_Start_IT+0xee>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d155      	bne.n	8005268 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f954 	bl	800548e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 020e 	orr.w	r2, r2, #14
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e00f      	b.n	8005220 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0204 	bic.w	r2, r2, #4
 800520e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 020a 	orr.w	r2, r2, #10
 800521e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005254:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0201 	orr.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e005      	b.n	8005274 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005270:	2302      	movs	r3, #2
 8005272:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005274:	7dfb      	ldrb	r3, [r7, #23]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d005      	beq.n	80052a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2204      	movs	r2, #4
 800529a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
 80052a0:	e037      	b.n	8005312 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 020e 	bic.w	r2, r2, #14
 80052b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d6:	f003 021f 	and.w	r2, r3, #31
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	2101      	movs	r1, #1
 80052e0:	fa01 f202 	lsl.w	r2, r1, r2
 80052e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005306:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005310:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2204      	movs	r2, #4
 8005352:	409a      	lsls	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d026      	beq.n	80053aa <HAL_DMA_IRQHandler+0x7a>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d021      	beq.n	80053aa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d107      	bne.n	8005384 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	f003 021f 	and.w	r2, r3, #31
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	2104      	movs	r1, #4
 8005392:	fa01 f202 	lsl.w	r2, r1, r2
 8005396:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	2b00      	cmp	r3, #0
 800539e:	d071      	beq.n	8005484 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053a8:	e06c      	b.n	8005484 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	2202      	movs	r2, #2
 80053b4:	409a      	lsls	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d02e      	beq.n	800541c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d029      	beq.n	800541c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 020a 	bic.w	r2, r2, #10
 80053e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	f003 021f 	and.w	r2, r3, #31
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2102      	movs	r1, #2
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d038      	beq.n	8005484 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800541a:	e033      	b.n	8005484 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	2208      	movs	r2, #8
 8005426:	409a      	lsls	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02a      	beq.n	8005486 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d025      	beq.n	8005486 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 020e 	bic.w	r2, r2, #14
 8005448:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	f003 021f 	and.w	r2, r3, #31
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	2101      	movs	r1, #1
 8005458:	fa01 f202 	lsl.w	r2, r1, r2
 800545c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005484:	bf00      	nop
 8005486:	bf00      	nop
}
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054a4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054b6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054bc:	f003 021f 	and.w	r2, r3, #31
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d108      	bne.n	80054ee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054ec:	e007      	b.n	80054fe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	4b16      	ldr	r3, [pc, #88]	; (8005574 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800551c:	429a      	cmp	r2, r3
 800551e:	d802      	bhi.n	8005526 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005520:	4b15      	ldr	r3, [pc, #84]	; (8005578 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e001      	b.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005526:	4b15      	ldr	r3, [pc, #84]	; (800557c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005528:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	3b08      	subs	r3, #8
 8005536:	4a12      	ldr	r2, [pc, #72]	; (8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005538:	fba2 2303 	umull	r2, r3, r2, r3
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005544:	089b      	lsrs	r3, r3, #2
 8005546:	009a      	lsls	r2, r3, #2
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	461a      	mov	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a0b      	ldr	r2, [pc, #44]	; (8005584 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005556:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	2201      	movs	r2, #1
 8005560:	409a      	lsls	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40020407 	.word	0x40020407
 8005578:	40020800 	.word	0x40020800
 800557c:	40020820 	.word	0x40020820
 8005580:	cccccccd 	.word	0xcccccccd
 8005584:	40020880 	.word	0x40020880

08005588 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	461a      	mov	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055aa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2201      	movs	r2, #1
 80055b6:	409a      	lsls	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	1000823f 	.word	0x1000823f
 80055cc:	40020940 	.word	0x40020940

080055d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055de:	e15a      	b.n	8005896 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	2101      	movs	r1, #1
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 814c 	beq.w	8005890 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d00b      	beq.n	8005618 <HAL_GPIO_Init+0x48>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d007      	beq.n	8005618 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800560c:	2b11      	cmp	r3, #17
 800560e:	d003      	beq.n	8005618 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b12      	cmp	r3, #18
 8005616:	d130      	bne.n	800567a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	2203      	movs	r2, #3
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43db      	mvns	r3, r3
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4013      	ands	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800564e:	2201      	movs	r2, #1
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	43db      	mvns	r3, r3
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4013      	ands	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	091b      	lsrs	r3, r3, #4
 8005664:	f003 0201 	and.w	r2, r3, #1
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	2203      	movs	r2, #3
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43db      	mvns	r3, r3
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d003      	beq.n	80056ba <HAL_GPIO_Init+0xea>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b12      	cmp	r3, #18
 80056b8:	d123      	bne.n	8005702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	08da      	lsrs	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3208      	adds	r2, #8
 80056c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	220f      	movs	r2, #15
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43db      	mvns	r3, r3
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4013      	ands	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	08da      	lsrs	r2, r3, #3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3208      	adds	r2, #8
 80056fc:	6939      	ldr	r1, [r7, #16]
 80056fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	2203      	movs	r2, #3
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 0203 	and.w	r2, r3, #3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 80a6 	beq.w	8005890 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005744:	4b5b      	ldr	r3, [pc, #364]	; (80058b4 <HAL_GPIO_Init+0x2e4>)
 8005746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005748:	4a5a      	ldr	r2, [pc, #360]	; (80058b4 <HAL_GPIO_Init+0x2e4>)
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	6613      	str	r3, [r2, #96]	; 0x60
 8005750:	4b58      	ldr	r3, [pc, #352]	; (80058b4 <HAL_GPIO_Init+0x2e4>)
 8005752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800575c:	4a56      	ldr	r2, [pc, #344]	; (80058b8 <HAL_GPIO_Init+0x2e8>)
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	089b      	lsrs	r3, r3, #2
 8005762:	3302      	adds	r3, #2
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	220f      	movs	r2, #15
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4013      	ands	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005786:	d01f      	beq.n	80057c8 <HAL_GPIO_Init+0x1f8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a4c      	ldr	r2, [pc, #304]	; (80058bc <HAL_GPIO_Init+0x2ec>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d019      	beq.n	80057c4 <HAL_GPIO_Init+0x1f4>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a4b      	ldr	r2, [pc, #300]	; (80058c0 <HAL_GPIO_Init+0x2f0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <HAL_GPIO_Init+0x1f0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a4a      	ldr	r2, [pc, #296]	; (80058c4 <HAL_GPIO_Init+0x2f4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00d      	beq.n	80057bc <HAL_GPIO_Init+0x1ec>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a49      	ldr	r2, [pc, #292]	; (80058c8 <HAL_GPIO_Init+0x2f8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <HAL_GPIO_Init+0x1e8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a48      	ldr	r2, [pc, #288]	; (80058cc <HAL_GPIO_Init+0x2fc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d101      	bne.n	80057b4 <HAL_GPIO_Init+0x1e4>
 80057b0:	2305      	movs	r3, #5
 80057b2:	e00a      	b.n	80057ca <HAL_GPIO_Init+0x1fa>
 80057b4:	2306      	movs	r3, #6
 80057b6:	e008      	b.n	80057ca <HAL_GPIO_Init+0x1fa>
 80057b8:	2304      	movs	r3, #4
 80057ba:	e006      	b.n	80057ca <HAL_GPIO_Init+0x1fa>
 80057bc:	2303      	movs	r3, #3
 80057be:	e004      	b.n	80057ca <HAL_GPIO_Init+0x1fa>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e002      	b.n	80057ca <HAL_GPIO_Init+0x1fa>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_GPIO_Init+0x1fa>
 80057c8:	2300      	movs	r3, #0
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	f002 0203 	and.w	r2, r2, #3
 80057d0:	0092      	lsls	r2, r2, #2
 80057d2:	4093      	lsls	r3, r2
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057da:	4937      	ldr	r1, [pc, #220]	; (80058b8 <HAL_GPIO_Init+0x2e8>)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	3302      	adds	r3, #2
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80057e8:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <HAL_GPIO_Init+0x300>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	43db      	mvns	r3, r3
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4013      	ands	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800580c:	4a30      	ldr	r2, [pc, #192]	; (80058d0 <HAL_GPIO_Init+0x300>)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005812:	4b2f      	ldr	r3, [pc, #188]	; (80058d0 <HAL_GPIO_Init+0x300>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	43db      	mvns	r3, r3
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4013      	ands	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005836:	4a26      	ldr	r2, [pc, #152]	; (80058d0 <HAL_GPIO_Init+0x300>)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800583c:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <HAL_GPIO_Init+0x300>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	43db      	mvns	r3, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4013      	ands	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005860:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <HAL_GPIO_Init+0x300>)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <HAL_GPIO_Init+0x300>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	43db      	mvns	r3, r3
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4013      	ands	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800588a:	4a11      	ldr	r2, [pc, #68]	; (80058d0 <HAL_GPIO_Init+0x300>)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	3301      	adds	r3, #1
 8005894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f47f ae9d 	bne.w	80055e0 <HAL_GPIO_Init+0x10>
  }
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40010000 	.word	0x40010000
 80058bc:	48000400 	.word	0x48000400
 80058c0:	48000800 	.word	0x48000800
 80058c4:	48000c00 	.word	0x48000c00
 80058c8:	48001000 	.word	0x48001000
 80058cc:	48001400 	.word	0x48001400
 80058d0:	40010400 	.word	0x40010400

080058d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	887b      	ldrh	r3, [r7, #2]
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058ec:	2301      	movs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	e001      	b.n	80058f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	807b      	strh	r3, [r7, #2]
 8005910:	4613      	mov	r3, r2
 8005912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005914:	787b      	ldrb	r3, [r7, #1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005920:	e002      	b.n	8005928 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005922:	887a      	ldrh	r2, [r7, #2]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d141      	bne.n	80059c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005942:	4b4b      	ldr	r3, [pc, #300]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800594a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594e:	d131      	bne.n	80059b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005950:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005956:	4a46      	ldr	r2, [pc, #280]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800595c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005968:	4a41      	ldr	r2, [pc, #260]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800596a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800596e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005970:	4b40      	ldr	r3, [pc, #256]	; (8005a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2232      	movs	r2, #50	; 0x32
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	4a3f      	ldr	r2, [pc, #252]	; (8005a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	0c9b      	lsrs	r3, r3, #18
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005986:	e002      	b.n	800598e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3b01      	subs	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800598e:	4b38      	ldr	r3, [pc, #224]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599a:	d102      	bne.n	80059a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f2      	bne.n	8005988 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059a2:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ae:	d158      	bne.n	8005a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e057      	b.n	8005a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059b4:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ba:	4a2d      	ldr	r2, [pc, #180]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80059c4:	e04d      	b.n	8005a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059cc:	d141      	bne.n	8005a52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059ce:	4b28      	ldr	r3, [pc, #160]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059da:	d131      	bne.n	8005a40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059dc:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059e2:	4a23      	ldr	r2, [pc, #140]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059ec:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059f4:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059fc:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2232      	movs	r2, #50	; 0x32
 8005a02:	fb02 f303 	mul.w	r3, r2, r3
 8005a06:	4a1c      	ldr	r2, [pc, #112]	; (8005a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a08:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0c:	0c9b      	lsrs	r3, r3, #18
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a12:	e002      	b.n	8005a1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a26:	d102      	bne.n	8005a2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f2      	bne.n	8005a14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a2e:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3a:	d112      	bne.n	8005a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e011      	b.n	8005a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a46:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a50:	e007      	b.n	8005a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a52:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a5a:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	40007000 	.word	0x40007000
 8005a74:	20000010 	.word	0x20000010
 8005a78:	431bde83 	.word	0x431bde83

08005a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e308      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d075      	beq.n	8005b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9a:	4ba3      	ldr	r3, [pc, #652]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa4:	4ba0      	ldr	r3, [pc, #640]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b0c      	cmp	r3, #12
 8005ab2:	d102      	bne.n	8005aba <HAL_RCC_OscConfig+0x3e>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x44>
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d10b      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac0:	4b99      	ldr	r3, [pc, #612]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d05b      	beq.n	8005b84 <HAL_RCC_OscConfig+0x108>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d157      	bne.n	8005b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e2e3      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae0:	d106      	bne.n	8005af0 <HAL_RCC_OscConfig+0x74>
 8005ae2:	4b91      	ldr	r3, [pc, #580]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a90      	ldr	r2, [pc, #576]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e01d      	b.n	8005b2c <HAL_RCC_OscConfig+0xb0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCC_OscConfig+0x98>
 8005afa:	4b8b      	ldr	r3, [pc, #556]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a8a      	ldr	r2, [pc, #552]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4b88      	ldr	r3, [pc, #544]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a87      	ldr	r2, [pc, #540]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e00b      	b.n	8005b2c <HAL_RCC_OscConfig+0xb0>
 8005b14:	4b84      	ldr	r3, [pc, #528]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a83      	ldr	r2, [pc, #524]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	4b81      	ldr	r3, [pc, #516]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a80      	ldr	r2, [pc, #512]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d013      	beq.n	8005b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fd f9ee 	bl	8002f14 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b3c:	f7fd f9ea 	bl	8002f14 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	; 0x64
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e2a8      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b4e:	4b76      	ldr	r3, [pc, #472]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0xc0>
 8005b5a:	e014      	b.n	8005b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fd f9da 	bl	8002f14 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b64:	f7fd f9d6 	bl	8002f14 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	; 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e294      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b76:	4b6c      	ldr	r3, [pc, #432]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0xe8>
 8005b82:	e000      	b.n	8005b86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d075      	beq.n	8005c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b92:	4b65      	ldr	r3, [pc, #404]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b9c:	4b62      	ldr	r3, [pc, #392]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b0c      	cmp	r3, #12
 8005baa:	d102      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x136>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d002      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x13c>
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d11f      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bb8:	4b5b      	ldr	r3, [pc, #364]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x154>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e267      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd0:	4b55      	ldr	r3, [pc, #340]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	061b      	lsls	r3, r3, #24
 8005bde:	4952      	ldr	r1, [pc, #328]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005be4:	4b51      	ldr	r3, [pc, #324]	; (8005d2c <HAL_RCC_OscConfig+0x2b0>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fd f947 	bl	8002e7c <HAL_InitTick>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d043      	beq.n	8005c7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e253      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d023      	beq.n	8005c48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c00:	4b49      	ldr	r3, [pc, #292]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a48      	ldr	r2, [pc, #288]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fd f982 	bl	8002f14 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c14:	f7fd f97e 	bl	8002f14 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e23c      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c26:	4b40      	ldr	r3, [pc, #256]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c32:	4b3d      	ldr	r3, [pc, #244]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	061b      	lsls	r3, r3, #24
 8005c40:	4939      	ldr	r1, [pc, #228]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	604b      	str	r3, [r1, #4]
 8005c46:	e01a      	b.n	8005c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c48:	4b37      	ldr	r3, [pc, #220]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a36      	ldr	r2, [pc, #216]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c54:	f7fd f95e 	bl	8002f14 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5c:	f7fd f95a 	bl	8002f14 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e218      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c6e:	4b2e      	ldr	r3, [pc, #184]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0x1e0>
 8005c7a:	e000      	b.n	8005c7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d03c      	beq.n	8005d04 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01c      	beq.n	8005ccc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c92:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c98:	4a23      	ldr	r2, [pc, #140]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca2:	f7fd f937 	bl	8002f14 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005caa:	f7fd f933 	bl	8002f14 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e1f1      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0ef      	beq.n	8005caa <HAL_RCC_OscConfig+0x22e>
 8005cca:	e01b      	b.n	8005d04 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ccc:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	f023 0301 	bic.w	r3, r3, #1
 8005cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cdc:	f7fd f91a 	bl	8002f14 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce4:	f7fd f916 	bl	8002f14 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e1d4      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1ef      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80ab 	beq.w	8005e68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d12:	2300      	movs	r3, #0
 8005d14:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d16:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <HAL_RCC_OscConfig+0x2ac>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_RCC_OscConfig+0x2b4>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e005      	b.n	8005d32 <HAL_RCC_OscConfig+0x2b6>
 8005d26:	bf00      	nop
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	20000014 	.word	0x20000014
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d36:	4baf      	ldr	r3, [pc, #700]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3a:	4aae      	ldr	r2, [pc, #696]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d40:	6593      	str	r3, [r2, #88]	; 0x58
 8005d42:	4bac      	ldr	r3, [pc, #688]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d52:	4ba9      	ldr	r3, [pc, #676]	; (8005ff8 <HAL_RCC_OscConfig+0x57c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d118      	bne.n	8005d90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d5e:	4ba6      	ldr	r3, [pc, #664]	; (8005ff8 <HAL_RCC_OscConfig+0x57c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4aa5      	ldr	r2, [pc, #660]	; (8005ff8 <HAL_RCC_OscConfig+0x57c>)
 8005d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d6a:	f7fd f8d3 	bl	8002f14 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d72:	f7fd f8cf 	bl	8002f14 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e18d      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d84:	4b9c      	ldr	r3, [pc, #624]	; (8005ff8 <HAL_RCC_OscConfig+0x57c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d108      	bne.n	8005daa <HAL_RCC_OscConfig+0x32e>
 8005d98:	4b96      	ldr	r3, [pc, #600]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9e:	4a95      	ldr	r2, [pc, #596]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005da8:	e024      	b.n	8005df4 <HAL_RCC_OscConfig+0x378>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d110      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x358>
 8005db2:	4b90      	ldr	r3, [pc, #576]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	4a8e      	ldr	r2, [pc, #568]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005dba:	f043 0304 	orr.w	r3, r3, #4
 8005dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dc2:	4b8c      	ldr	r3, [pc, #560]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc8:	4a8a      	ldr	r2, [pc, #552]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dd2:	e00f      	b.n	8005df4 <HAL_RCC_OscConfig+0x378>
 8005dd4:	4b87      	ldr	r3, [pc, #540]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	4a86      	ldr	r2, [pc, #536]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005de4:	4b83      	ldr	r3, [pc, #524]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	4a82      	ldr	r2, [pc, #520]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005dec:	f023 0304 	bic.w	r3, r3, #4
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d016      	beq.n	8005e2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfc:	f7fd f88a 	bl	8002f14 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e02:	e00a      	b.n	8005e1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f7fd f886 	bl	8002f14 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e142      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1a:	4b76      	ldr	r3, [pc, #472]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0ed      	beq.n	8005e04 <HAL_RCC_OscConfig+0x388>
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2a:	f7fd f873 	bl	8002f14 <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e30:	e00a      	b.n	8005e48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e32:	f7fd f86f 	bl	8002f14 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e12b      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e48:	4b6a      	ldr	r3, [pc, #424]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1ed      	bne.n	8005e32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e56:	7ffb      	ldrb	r3, [r7, #31]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d105      	bne.n	8005e68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5c:	4b65      	ldr	r3, [pc, #404]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	4a64      	ldr	r2, [pc, #400]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d03c      	beq.n	8005eee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01c      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e7c:	4b5d      	ldr	r3, [pc, #372]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e82:	4a5c      	ldr	r2, [pc, #368]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fd f842 	bl	8002f14 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e94:	f7fd f83e 	bl	8002f14 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e0fc      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ea6:	4b53      	ldr	r3, [pc, #332]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0ef      	beq.n	8005e94 <HAL_RCC_OscConfig+0x418>
 8005eb4:	e01b      	b.n	8005eee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005eb6:	4b4f      	ldr	r3, [pc, #316]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ebc:	4a4d      	ldr	r2, [pc, #308]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec6:	f7fd f825 	bl	8002f14 <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ece:	f7fd f821 	bl	8002f14 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e0df      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ee0:	4b44      	ldr	r3, [pc, #272]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1ef      	bne.n	8005ece <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 80d3 	beq.w	800609e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ef8:	4b3e      	ldr	r3, [pc, #248]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 030c 	and.w	r3, r3, #12
 8005f00:	2b0c      	cmp	r3, #12
 8005f02:	f000 808d 	beq.w	8006020 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d15a      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f0e:	4b39      	ldr	r3, [pc, #228]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a38      	ldr	r2, [pc, #224]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1a:	f7fc fffb 	bl	8002f14 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f22:	f7fc fff7 	bl	8002f14 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e0b5      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f34:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1f0      	bne.n	8005f22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f40:	4b2c      	ldr	r3, [pc, #176]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <HAL_RCC_OscConfig+0x580>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6a11      	ldr	r1, [r2, #32]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f50:	3a01      	subs	r2, #1
 8005f52:	0112      	lsls	r2, r2, #4
 8005f54:	4311      	orrs	r1, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005f5a:	0212      	lsls	r2, r2, #8
 8005f5c:	4311      	orrs	r1, r2
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f62:	0852      	lsrs	r2, r2, #1
 8005f64:	3a01      	subs	r2, #1
 8005f66:	0552      	lsls	r2, r2, #21
 8005f68:	4311      	orrs	r1, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f6e:	0852      	lsrs	r2, r2, #1
 8005f70:	3a01      	subs	r2, #1
 8005f72:	0652      	lsls	r2, r2, #25
 8005f74:	4311      	orrs	r1, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f7a:	06d2      	lsls	r2, r2, #27
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	491d      	ldr	r1, [pc, #116]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f84:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1a      	ldr	r2, [pc, #104]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f90:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	4a17      	ldr	r2, [pc, #92]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fc ffba 	bl	8002f14 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa4:	f7fc ffb6 	bl	8002f14 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e074      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0f0      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x528>
 8005fc2:	e06c      	b.n	800609e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc4:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a0a      	ldr	r2, [pc, #40]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005fd0:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005fdc:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a04      	ldr	r2, [pc, #16]	; (8005ff4 <HAL_RCC_OscConfig+0x578>)
 8005fe2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fec:	f7fc ff92 	bl	8002f14 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff2:	e00e      	b.n	8006012 <HAL_RCC_OscConfig+0x596>
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40007000 	.word	0x40007000
 8005ffc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006000:	f7fc ff88 	bl	8002f14 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e046      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006012:	4b25      	ldr	r3, [pc, #148]	; (80060a8 <HAL_RCC_OscConfig+0x62c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x584>
 800601e:	e03e      	b.n	800609e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e039      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800602c:	4b1e      	ldr	r3, [pc, #120]	; (80060a8 <HAL_RCC_OscConfig+0x62c>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f003 0203 	and.w	r2, r3, #3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	429a      	cmp	r2, r3
 800603e:	d12c      	bne.n	800609a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	3b01      	subs	r3, #1
 800604c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604e:	429a      	cmp	r2, r3
 8006050:	d123      	bne.n	800609a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800605e:	429a      	cmp	r2, r3
 8006060:	d11b      	bne.n	800609a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800606e:	429a      	cmp	r2, r3
 8006070:	d113      	bne.n	800609a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	3b01      	subs	r3, #1
 8006080:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d109      	bne.n	800609a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	3b01      	subs	r3, #1
 8006094:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006096:	429a      	cmp	r2, r3
 8006098:	d001      	beq.n	800609e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3720      	adds	r7, #32
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40021000 	.word	0x40021000

080060ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e11e      	b.n	8006302 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060c4:	4b91      	ldr	r3, [pc, #580]	; (800630c <HAL_RCC_ClockConfig+0x260>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d910      	bls.n	80060f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d2:	4b8e      	ldr	r3, [pc, #568]	; (800630c <HAL_RCC_ClockConfig+0x260>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f023 020f 	bic.w	r2, r3, #15
 80060da:	498c      	ldr	r1, [pc, #560]	; (800630c <HAL_RCC_ClockConfig+0x260>)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	4313      	orrs	r3, r2
 80060e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e2:	4b8a      	ldr	r3, [pc, #552]	; (800630c <HAL_RCC_ClockConfig+0x260>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e106      	b.n	8006302 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d073      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b03      	cmp	r3, #3
 8006106:	d129      	bne.n	800615c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006108:	4b81      	ldr	r3, [pc, #516]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e0f4      	b.n	8006302 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006118:	f000 f972 	bl	8006400 <RCC_GetSysClockFreqFromPLLSource>
 800611c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4a7c      	ldr	r2, [pc, #496]	; (8006314 <HAL_RCC_ClockConfig+0x268>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d93f      	bls.n	80061a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006126:	4b7a      	ldr	r3, [pc, #488]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800613a:	2b00      	cmp	r3, #0
 800613c:	d033      	beq.n	80061a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006142:	2b00      	cmp	r3, #0
 8006144:	d12f      	bne.n	80061a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006146:	4b72      	ldr	r3, [pc, #456]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800614e:	4a70      	ldr	r2, [pc, #448]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006154:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e024      	b.n	80061a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d107      	bne.n	8006174 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006164:	4b6a      	ldr	r3, [pc, #424]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d109      	bne.n	8006184 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0c6      	b.n	8006302 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006174:	4b66      	ldr	r3, [pc, #408]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e0be      	b.n	8006302 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006184:	f000 f8ce 	bl	8006324 <HAL_RCC_GetSysClockFreq>
 8006188:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4a61      	ldr	r2, [pc, #388]	; (8006314 <HAL_RCC_ClockConfig+0x268>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d909      	bls.n	80061a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006192:	4b5f      	ldr	r3, [pc, #380]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800619a:	4a5d      	ldr	r2, [pc, #372]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 800619c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061a6:	4b5a      	ldr	r3, [pc, #360]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f023 0203 	bic.w	r2, r3, #3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4957      	ldr	r1, [pc, #348]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b8:	f7fc feac 	bl	8002f14 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061be:	e00a      	b.n	80061d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c0:	f7fc fea8 	bl	8002f14 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e095      	b.n	8006302 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d6:	4b4e      	ldr	r3, [pc, #312]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 020c 	and.w	r2, r3, #12
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d1eb      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d023      	beq.n	800623c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006200:	4b43      	ldr	r3, [pc, #268]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	4a42      	ldr	r2, [pc, #264]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800620a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006218:	4b3d      	ldr	r3, [pc, #244]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006220:	4a3b      	ldr	r2, [pc, #236]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006226:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006228:	4b39      	ldr	r3, [pc, #228]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	4936      	ldr	r1, [pc, #216]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006236:	4313      	orrs	r3, r2
 8006238:	608b      	str	r3, [r1, #8]
 800623a:	e008      	b.n	800624e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b80      	cmp	r3, #128	; 0x80
 8006240:	d105      	bne.n	800624e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006242:	4b33      	ldr	r3, [pc, #204]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4a32      	ldr	r2, [pc, #200]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 8006248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800624c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800624e:	4b2f      	ldr	r3, [pc, #188]	; (800630c <HAL_RCC_ClockConfig+0x260>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d21d      	bcs.n	8006298 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625c:	4b2b      	ldr	r3, [pc, #172]	; (800630c <HAL_RCC_ClockConfig+0x260>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f023 020f 	bic.w	r2, r3, #15
 8006264:	4929      	ldr	r1, [pc, #164]	; (800630c <HAL_RCC_ClockConfig+0x260>)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	4313      	orrs	r3, r2
 800626a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800626c:	f7fc fe52 	bl	8002f14 <HAL_GetTick>
 8006270:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006272:	e00a      	b.n	800628a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006274:	f7fc fe4e 	bl	8002f14 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006282:	4293      	cmp	r3, r2
 8006284:	d901      	bls.n	800628a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e03b      	b.n	8006302 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800628a:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCC_ClockConfig+0x260>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d1ed      	bne.n	8006274 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d008      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a4:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	4917      	ldr	r1, [pc, #92]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062c2:	4b13      	ldr	r3, [pc, #76]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	490f      	ldr	r1, [pc, #60]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062d6:	f000 f825 	bl	8006324 <HAL_RCC_GetSysClockFreq>
 80062da:	4601      	mov	r1, r0
 80062dc:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <HAL_RCC_ClockConfig+0x264>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	091b      	lsrs	r3, r3, #4
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <HAL_RCC_ClockConfig+0x26c>)
 80062e8:	5cd3      	ldrb	r3, [r2, r3]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	fa21 f303 	lsr.w	r3, r1, r3
 80062f2:	4a0a      	ldr	r2, [pc, #40]	; (800631c <HAL_RCC_ClockConfig+0x270>)
 80062f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80062f6:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <HAL_RCC_ClockConfig+0x274>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fc fdbe 	bl	8002e7c <HAL_InitTick>
 8006300:	4603      	mov	r3, r0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40022000 	.word	0x40022000
 8006310:	40021000 	.word	0x40021000
 8006314:	04c4b400 	.word	0x04c4b400
 8006318:	0800a61c 	.word	0x0800a61c
 800631c:	20000010 	.word	0x20000010
 8006320:	20000014 	.word	0x20000014

08006324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800632a:	4b2c      	ldr	r3, [pc, #176]	; (80063dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 030c 	and.w	r3, r3, #12
 8006332:	2b04      	cmp	r3, #4
 8006334:	d102      	bne.n	800633c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006336:	4b2a      	ldr	r3, [pc, #168]	; (80063e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	e047      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800633c:	4b27      	ldr	r3, [pc, #156]	; (80063dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	2b08      	cmp	r3, #8
 8006346:	d102      	bne.n	800634e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006348:	4b26      	ldr	r3, [pc, #152]	; (80063e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	e03e      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800634e:	4b23      	ldr	r3, [pc, #140]	; (80063dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
 8006356:	2b0c      	cmp	r3, #12
 8006358:	d136      	bne.n	80063c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800635a:	4b20      	ldr	r3, [pc, #128]	; (80063dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006364:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	3301      	adds	r3, #1
 8006370:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d10c      	bne.n	8006392 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006378:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006380:	4a16      	ldr	r2, [pc, #88]	; (80063dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006382:	68d2      	ldr	r2, [r2, #12]
 8006384:	0a12      	lsrs	r2, r2, #8
 8006386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	617b      	str	r3, [r7, #20]
      break;
 8006390:	e00c      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006392:	4a13      	ldr	r2, [pc, #76]	; (80063e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	fbb2 f3f3 	udiv	r3, r2, r3
 800639a:	4a10      	ldr	r2, [pc, #64]	; (80063dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800639c:	68d2      	ldr	r2, [r2, #12]
 800639e:	0a12      	lsrs	r2, r2, #8
 80063a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]
      break;
 80063aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	0e5b      	lsrs	r3, r3, #25
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	3301      	adds	r3, #1
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	e001      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80063cc:	693b      	ldr	r3, [r7, #16]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40021000 	.word	0x40021000
 80063e0:	00f42400 	.word	0x00f42400
 80063e4:	007a1200 	.word	0x007a1200

080063e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <HAL_RCC_GetHCLKFreq+0x14>)
 80063ee:	681b      	ldr	r3, [r3, #0]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000010 	.word	0x20000010

08006400 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006406:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d10c      	bne.n	800643e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006424:	4a17      	ldr	r2, [pc, #92]	; (8006484 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	fbb2 f3f3 	udiv	r3, r2, r3
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800642e:	68d2      	ldr	r2, [r2, #12]
 8006430:	0a12      	lsrs	r2, r2, #8
 8006432:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	617b      	str	r3, [r7, #20]
    break;
 800643c:	e00c      	b.n	8006458 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800643e:	4a12      	ldr	r2, [pc, #72]	; (8006488 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	fbb2 f3f3 	udiv	r3, r2, r3
 8006446:	4a0e      	ldr	r2, [pc, #56]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006448:	68d2      	ldr	r2, [r2, #12]
 800644a:	0a12      	lsrs	r2, r2, #8
 800644c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006450:	fb02 f303 	mul.w	r3, r2, r3
 8006454:	617b      	str	r3, [r7, #20]
    break;
 8006456:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006458:	4b09      	ldr	r3, [pc, #36]	; (8006480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	0e5b      	lsrs	r3, r3, #25
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	3301      	adds	r3, #1
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006470:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006472:	687b      	ldr	r3, [r7, #4]
}
 8006474:	4618      	mov	r0, r3
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40021000 	.word	0x40021000
 8006484:	007a1200 	.word	0x007a1200
 8006488:	00f42400 	.word	0x00f42400

0800648c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006494:	2300      	movs	r3, #0
 8006496:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006498:	2300      	movs	r3, #0
 800649a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8098 	beq.w	80065da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064aa:	2300      	movs	r3, #0
 80064ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ae:	4b43      	ldr	r3, [pc, #268]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10d      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ba:	4b40      	ldr	r3, [pc, #256]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064be:	4a3f      	ldr	r2, [pc, #252]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c4:	6593      	str	r3, [r2, #88]	; 0x58
 80064c6:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064d2:	2301      	movs	r3, #1
 80064d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064d6:	4b3a      	ldr	r3, [pc, #232]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a39      	ldr	r2, [pc, #228]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064e2:	f7fc fd17 	bl	8002f14 <HAL_GetTick>
 80064e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064e8:	e009      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ea:	f7fc fd13 	bl	8002f14 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d902      	bls.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	74fb      	strb	r3, [r7, #19]
        break;
 80064fc:	e005      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064fe:	4b30      	ldr	r3, [pc, #192]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0ef      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800650a:	7cfb      	ldrb	r3, [r7, #19]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d159      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006510:	4b2a      	ldr	r3, [pc, #168]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01e      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	429a      	cmp	r2, r3
 800652a:	d019      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800652c:	4b23      	ldr	r3, [pc, #140]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800652e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006538:	4b20      	ldr	r3, [pc, #128]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	4a1f      	ldr	r2, [pc, #124]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006548:	4b1c      	ldr	r3, [pc, #112]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006558:	4a18      	ldr	r2, [pc, #96]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656a:	f7fc fcd3 	bl	8002f14 <HAL_GetTick>
 800656e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006570:	e00b      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006572:	f7fc fccf 	bl	8002f14 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006580:	4293      	cmp	r3, r2
 8006582:	d902      	bls.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	74fb      	strb	r3, [r7, #19]
            break;
 8006588:	e006      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800658a:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800658c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0ec      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006598:	7cfb      	ldrb	r3, [r7, #19]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800659e:	4b07      	ldr	r3, [pc, #28]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ac:	4903      	ldr	r1, [pc, #12]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80065b4:	e008      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065b6:	7cfb      	ldrb	r3, [r7, #19]
 80065b8:	74bb      	strb	r3, [r7, #18]
 80065ba:	e005      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80065bc:	40021000 	.word	0x40021000
 80065c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c4:	7cfb      	ldrb	r3, [r7, #19]
 80065c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065c8:	7c7b      	ldrb	r3, [r7, #17]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d105      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ce:	4baf      	ldr	r3, [pc, #700]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d2:	4aae      	ldr	r2, [pc, #696]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065e6:	4ba9      	ldr	r3, [pc, #676]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ec:	f023 0203 	bic.w	r2, r3, #3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	49a5      	ldr	r1, [pc, #660]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006608:	4ba0      	ldr	r3, [pc, #640]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660e:	f023 020c 	bic.w	r2, r3, #12
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	499d      	ldr	r1, [pc, #628]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800662a:	4b98      	ldr	r3, [pc, #608]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006630:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4994      	ldr	r1, [pc, #592]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800664c:	4b8f      	ldr	r3, [pc, #572]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006652:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	498c      	ldr	r1, [pc, #560]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800666e:	4b87      	ldr	r3, [pc, #540]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	4983      	ldr	r1, [pc, #524]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006690:	4b7e      	ldr	r3, [pc, #504]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006696:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	497b      	ldr	r1, [pc, #492]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066b2:	4b76      	ldr	r3, [pc, #472]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	4972      	ldr	r1, [pc, #456]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066d4:	4b6d      	ldr	r3, [pc, #436]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	496a      	ldr	r1, [pc, #424]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066f6:	4b65      	ldr	r3, [pc, #404]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	4961      	ldr	r1, [pc, #388]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006718:	4b5c      	ldr	r3, [pc, #368]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800671a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800671e:	f023 0203 	bic.w	r2, r3, #3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	4959      	ldr	r1, [pc, #356]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800673a:	4b54      	ldr	r3, [pc, #336]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	4950      	ldr	r1, [pc, #320]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006758:	2b00      	cmp	r3, #0
 800675a:	d015      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800675c:	4b4b      	ldr	r3, [pc, #300]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	4948      	ldr	r1, [pc, #288]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677a:	d105      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800677c:	4b43      	ldr	r3, [pc, #268]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4a42      	ldr	r2, [pc, #264]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006786:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006790:	2b00      	cmp	r3, #0
 8006792:	d015      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006794:	4b3d      	ldr	r3, [pc, #244]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	493a      	ldr	r1, [pc, #232]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067b2:	d105      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b4:	4b35      	ldr	r3, [pc, #212]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4a34      	ldr	r2, [pc, #208]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d015      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067cc:	4b2f      	ldr	r3, [pc, #188]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	492c      	ldr	r1, [pc, #176]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ea:	d105      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ec:	4b27      	ldr	r3, [pc, #156]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	4a26      	ldr	r2, [pc, #152]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80067f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d015      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006804:	4b21      	ldr	r3, [pc, #132]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	491e      	ldr	r1, [pc, #120]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006822:	d105      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006824:	4b19      	ldr	r3, [pc, #100]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4a18      	ldr	r2, [pc, #96]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800682a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800682e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d015      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800683c:	4b13      	ldr	r3, [pc, #76]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	4910      	ldr	r1, [pc, #64]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800685a:	d105      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	4a0a      	ldr	r2, [pc, #40]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006866:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d018      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006882:	4902      	ldr	r1, [pc, #8]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800688a:	e001      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800688c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006898:	d105      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800689a:	4b21      	ldr	r3, [pc, #132]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	4a20      	ldr	r2, [pc, #128]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d015      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80068b2:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c0:	4917      	ldr	r1, [pc, #92]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d0:	d105      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068d2:	4b13      	ldr	r3, [pc, #76]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	4a12      	ldr	r2, [pc, #72]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068dc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d015      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80068ea:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f8:	4909      	ldr	r1, [pc, #36]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006908:	d105      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800690a:	4b05      	ldr	r3, [pc, #20]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	4a04      	ldr	r2, [pc, #16]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006914:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006916:	7cbb      	ldrb	r3, [r7, #18]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40021000 	.word	0x40021000

08006924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e084      	b.n	8006a40 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7fb fcc9 	bl	80022e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800696c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006976:	d902      	bls.n	800697e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e002      	b.n	8006984 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800697e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006982:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800698c:	d007      	beq.n	800699e <HAL_SPI_Init+0x7a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006996:	d002      	beq.n	800699e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069ae:	d903      	bls.n	80069b8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30
 80069b6:	e002      	b.n	80069be <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	ea42 0103 	orr.w	r1, r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	0c1b      	lsrs	r3, r3, #16
 80069fe:	f003 0204 	and.w	r2, r3, #4
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	ea42 0103 	orr.w	r1, r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69da      	ldr	r2, [r3, #28]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	4613      	mov	r3, r2
 8006a56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_SPI_Transmit+0x22>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e150      	b.n	8006d0c <HAL_SPI_Transmit+0x2c4>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a72:	f7fc fa4f 	bl	8002f14 <HAL_GetTick>
 8006a76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d002      	beq.n	8006a8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a8c:	e135      	b.n	8006cfa <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_Transmit+0x52>
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a9e:	e12c      	b.n	8006cfa <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aea:	d107      	bne.n	8006afc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006afa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d007      	beq.n	8006b1a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b22:	d94b      	bls.n	8006bbc <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_SPI_Transmit+0xea>
 8006b2c:	8afb      	ldrh	r3, [r7, #22]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d13e      	bne.n	8006bb0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	881a      	ldrh	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b56:	e02b      	b.n	8006bb0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d112      	bne.n	8006b8c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	881a      	ldrh	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	1c9a      	adds	r2, r3, #2
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b8a:	e011      	b.n	8006bb0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b8c:	f7fc f9c2 	bl	8002f14 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d803      	bhi.n	8006ba4 <HAL_SPI_Transmit+0x15c>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba2:	d102      	bne.n	8006baa <HAL_SPI_Transmit+0x162>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d102      	bne.n	8006bb0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bae:	e0a4      	b.n	8006cfa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1ce      	bne.n	8006b58 <HAL_SPI_Transmit+0x110>
 8006bba:	e07c      	b.n	8006cb6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_SPI_Transmit+0x182>
 8006bc4:	8afb      	ldrh	r3, [r7, #22]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d170      	bne.n	8006cac <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d912      	bls.n	8006bfa <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	881a      	ldrh	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	1c9a      	adds	r2, r3, #2
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b02      	subs	r3, #2
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bf8:	e058      	b.n	8006cac <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	7812      	ldrb	r2, [r2, #0]
 8006c06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c20:	e044      	b.n	8006cac <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d12b      	bne.n	8006c88 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d912      	bls.n	8006c60 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	881a      	ldrh	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	1c9a      	adds	r2, r3, #2
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b02      	subs	r3, #2
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c5e:	e025      	b.n	8006cac <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	330c      	adds	r3, #12
 8006c6a:	7812      	ldrb	r2, [r2, #0]
 8006c6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c86:	e011      	b.n	8006cac <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c88:	f7fc f944 	bl	8002f14 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d803      	bhi.n	8006ca0 <HAL_SPI_Transmit+0x258>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c9e:	d102      	bne.n	8006ca6 <HAL_SPI_Transmit+0x25e>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006caa:	e026      	b.n	8006cfa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1b5      	bne.n	8006c22 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f901 	bl	8006ec2 <SPI_EndRxTxTransaction>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e000      	b.n	8006cfa <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006cf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	4613      	mov	r3, r2
 8006d22:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d24:	e04c      	b.n	8006dc0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d2c:	d048      	beq.n	8006dc0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006d2e:	f7fc f8f1 	bl	8002f14 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d902      	bls.n	8006d44 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d13d      	bne.n	8006dc0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d5c:	d111      	bne.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d66:	d004      	beq.n	8006d72 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d70:	d107      	bne.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8a:	d10f      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006daa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e00f      	b.n	8006de0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	bf0c      	ite	eq
 8006dd0:	2301      	moveq	r3, #1
 8006dd2:	2300      	movne	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d1a3      	bne.n	8006d26 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006df6:	e057      	b.n	8006ea8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006dfe:	d106      	bne.n	8006e0e <SPI_WaitFifoStateUntilTimeout+0x26>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d103      	bne.n	8006e0e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e14:	d048      	beq.n	8006ea8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e16:	f7fc f87d 	bl	8002f14 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d902      	bls.n	8006e2c <SPI_WaitFifoStateUntilTimeout+0x44>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d13d      	bne.n	8006ea8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e44:	d111      	bne.n	8006e6a <SPI_WaitFifoStateUntilTimeout+0x82>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4e:	d004      	beq.n	8006e5a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e58:	d107      	bne.n	8006e6a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e72:	d10f      	bne.n	8006e94 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e008      	b.n	8006eba <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d19f      	bne.n	8006df8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b086      	sub	sp, #24
 8006ec6:	af02      	add	r7, sp, #8
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff ff84 	bl	8006de8 <SPI_WaitFifoStateUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eea:	f043 0220 	orr.w	r2, r3, #32
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e027      	b.n	8006f46 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2200      	movs	r2, #0
 8006efe:	2180      	movs	r1, #128	; 0x80
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff ff07 	bl	8006d14 <SPI_WaitFlagStateUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f10:	f043 0220 	orr.w	r2, r3, #32
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e014      	b.n	8006f46 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff ff5d 	bl	8006de8 <SPI_WaitFifoStateUntilTimeout>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f38:	f043 0220 	orr.w	r2, r3, #32
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e000      	b.n	8006f46 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e049      	b.n	8006ff4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d106      	bne.n	8006f7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fb fe7b 	bl	8002c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f000 fc51 	bl	8007834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d001      	beq.n	8007014 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e019      	b.n	8007048 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <HAL_TIM_Base_Start+0x58>)
 8007024:	4013      	ands	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b06      	cmp	r3, #6
 800702c:	d00b      	beq.n	8007046 <HAL_TIM_Base_Start+0x4a>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007034:	d007      	beq.n	8007046 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0201 	orr.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	00010007 	.word	0x00010007

08007058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d001      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e021      	b.n	80070b4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <HAL_TIM_Base_Start_IT+0x68>)
 8007090:	4013      	ands	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b06      	cmp	r3, #6
 8007098:	d00b      	beq.n	80070b2 <HAL_TIM_Base_Start_IT+0x5a>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a0:	d007      	beq.n	80070b2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	00010007 	.word	0x00010007

080070c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0201 	bic.w	r2, r2, #1
 80070da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80070e6:	4013      	ands	r3, r2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10f      	bne.n	800710c <HAL_TIM_Base_Stop_IT+0x48>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6a1a      	ldr	r2, [r3, #32]
 80070f2:	f244 4344 	movw	r3, #17476	; 0x4444
 80070f6:	4013      	ands	r3, r2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d107      	bne.n	800710c <HAL_TIM_Base_Stop_IT+0x48>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0201 	bic.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b086      	sub	sp, #24
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e097      	b.n	8007266 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fb fd34 	bl	8002bb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6812      	ldr	r2, [r2, #0]
 8007162:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007166:	f023 0307 	bic.w	r3, r3, #7
 800716a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	4619      	mov	r1, r3
 8007176:	4610      	mov	r0, r2
 8007178:	f000 fb5c 	bl	8007834 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a4:	f023 0303 	bic.w	r3, r3, #3
 80071a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	4313      	orrs	r3, r2
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071c2:	f023 030c 	bic.w	r3, r3, #12
 80071c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	021b      	lsls	r3, r3, #8
 80071de:	4313      	orrs	r3, r2
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	011a      	lsls	r2, r3, #4
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	031b      	lsls	r3, r3, #12
 80071f2:	4313      	orrs	r3, r2
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007200:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007208:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	4313      	orrs	r3, r2
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b02      	cmp	r3, #2
 8007282:	d122      	bne.n	80072ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b02      	cmp	r3, #2
 8007290:	d11b      	bne.n	80072ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f06f 0202 	mvn.w	r2, #2
 800729a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 faa1 	bl	80077f8 <HAL_TIM_IC_CaptureCallback>
 80072b6:	e005      	b.n	80072c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fa93 	bl	80077e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 faa4 	bl	800780c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d122      	bne.n	800731e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d11b      	bne.n	800731e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f06f 0204 	mvn.w	r2, #4
 80072ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa77 	bl	80077f8 <HAL_TIM_IC_CaptureCallback>
 800730a:	e005      	b.n	8007318 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fa69 	bl	80077e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa7a 	bl	800780c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b08      	cmp	r3, #8
 800732a:	d122      	bne.n	8007372 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f003 0308 	and.w	r3, r3, #8
 8007336:	2b08      	cmp	r3, #8
 8007338:	d11b      	bne.n	8007372 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f06f 0208 	mvn.w	r2, #8
 8007342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2204      	movs	r2, #4
 8007348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fa4d 	bl	80077f8 <HAL_TIM_IC_CaptureCallback>
 800735e:	e005      	b.n	800736c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa3f 	bl	80077e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa50 	bl	800780c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	2b10      	cmp	r3, #16
 800737e:	d122      	bne.n	80073c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	2b10      	cmp	r3, #16
 800738c:	d11b      	bne.n	80073c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f06f 0210 	mvn.w	r2, #16
 8007396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2208      	movs	r2, #8
 800739c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa23 	bl	80077f8 <HAL_TIM_IC_CaptureCallback>
 80073b2:	e005      	b.n	80073c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fa15 	bl	80077e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa26 	bl	800780c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d10e      	bne.n	80073f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d107      	bne.n	80073f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f06f 0201 	mvn.w	r2, #1
 80073ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9ef 	bl	80077d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fc:	2b80      	cmp	r3, #128	; 0x80
 80073fe:	d10e      	bne.n	800741e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740a:	2b80      	cmp	r3, #128	; 0x80
 800740c:	d107      	bne.n	800741e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fd5d 	bl	8007ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800742c:	d10e      	bne.n	800744c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d107      	bne.n	800744c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fd50 	bl	8007eec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007456:	2b40      	cmp	r3, #64	; 0x40
 8007458:	d10e      	bne.n	8007478 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007464:	2b40      	cmp	r3, #64	; 0x40
 8007466:	d107      	bne.n	8007478 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f9d4 	bl	8007820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b20      	cmp	r3, #32
 8007484:	d10e      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0320 	and.w	r3, r3, #32
 8007490:	2b20      	cmp	r3, #32
 8007492:	d107      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0220 	mvn.w	r2, #32
 800749c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fd10 	bl	8007ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b2:	d10f      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074c2:	d107      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80074cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fd16 	bl	8007f00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074e2:	d10f      	bne.n	8007504 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074f2:	d107      	bne.n	8007504 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80074fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fd08 	bl	8007f14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800750e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007512:	d10f      	bne.n	8007534 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800751e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007522:	d107      	bne.n	8007534 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800752c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fcfa 	bl	8007f28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800753e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007542:	d10f      	bne.n	8007564 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800754e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007552:	d107      	bne.n	8007564 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800755c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fcec 	bl	8007f3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_TIM_ConfigClockSource+0x18>
 8007580:	2302      	movs	r3, #2
 8007582:	e0d2      	b.n	800772a <HAL_TIM_ConfigClockSource+0x1be>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80075a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c0:	f000 80a9 	beq.w	8007716 <HAL_TIM_ConfigClockSource+0x1aa>
 80075c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c8:	d81a      	bhi.n	8007600 <HAL_TIM_ConfigClockSource+0x94>
 80075ca:	2b30      	cmp	r3, #48	; 0x30
 80075cc:	f000 809a 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x198>
 80075d0:	2b30      	cmp	r3, #48	; 0x30
 80075d2:	d809      	bhi.n	80075e8 <HAL_TIM_ConfigClockSource+0x7c>
 80075d4:	2b10      	cmp	r3, #16
 80075d6:	f000 8095 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x198>
 80075da:	2b20      	cmp	r3, #32
 80075dc:	f000 8092 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x198>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 808f 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80075e6:	e097      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80075e8:	2b50      	cmp	r3, #80	; 0x50
 80075ea:	d05b      	beq.n	80076a4 <HAL_TIM_ConfigClockSource+0x138>
 80075ec:	2b50      	cmp	r3, #80	; 0x50
 80075ee:	d802      	bhi.n	80075f6 <HAL_TIM_ConfigClockSource+0x8a>
 80075f0:	2b40      	cmp	r3, #64	; 0x40
 80075f2:	d077      	beq.n	80076e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80075f4:	e090      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80075f6:	2b60      	cmp	r3, #96	; 0x60
 80075f8:	d064      	beq.n	80076c4 <HAL_TIM_ConfigClockSource+0x158>
 80075fa:	2b70      	cmp	r3, #112	; 0x70
 80075fc:	d028      	beq.n	8007650 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80075fe:	e08b      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007600:	4a4c      	ldr	r2, [pc, #304]	; (8007734 <HAL_TIM_ConfigClockSource+0x1c8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d07e      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x198>
 8007606:	4a4b      	ldr	r2, [pc, #300]	; (8007734 <HAL_TIM_ConfigClockSource+0x1c8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d810      	bhi.n	800762e <HAL_TIM_ConfigClockSource+0xc2>
 800760c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007610:	d078      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x198>
 8007612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007616:	d803      	bhi.n	8007620 <HAL_TIM_ConfigClockSource+0xb4>
 8007618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761c:	d02f      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x112>
      break;
 800761e:	e07b      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007620:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007624:	d06e      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x198>
 8007626:	4a44      	ldr	r2, [pc, #272]	; (8007738 <HAL_TIM_ConfigClockSource+0x1cc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d06b      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800762c:	e074      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800762e:	4a43      	ldr	r2, [pc, #268]	; (800773c <HAL_TIM_ConfigClockSource+0x1d0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d067      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x198>
 8007634:	4a41      	ldr	r2, [pc, #260]	; (800773c <HAL_TIM_ConfigClockSource+0x1d0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d803      	bhi.n	8007642 <HAL_TIM_ConfigClockSource+0xd6>
 800763a:	4a41      	ldr	r2, [pc, #260]	; (8007740 <HAL_TIM_ConfigClockSource+0x1d4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d061      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007640:	e06a      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007642:	4a40      	ldr	r2, [pc, #256]	; (8007744 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d05d      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x198>
 8007648:	4a3f      	ldr	r2, [pc, #252]	; (8007748 <HAL_TIM_ConfigClockSource+0x1dc>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d05a      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800764e:	e063      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6818      	ldr	r0, [r3, #0]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	6899      	ldr	r1, [r3, #8]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f000 fac8 	bl	8007bf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007672:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	609a      	str	r2, [r3, #8]
      break;
 800767c:	e04c      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6899      	ldr	r1, [r3, #8]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f000 fab1 	bl	8007bf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076a0:	609a      	str	r2, [r3, #8]
      break;
 80076a2:	e039      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	6859      	ldr	r1, [r3, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	461a      	mov	r2, r3
 80076b2:	f000 fa23 	bl	8007afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2150      	movs	r1, #80	; 0x50
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fa7c 	bl	8007bba <TIM_ITRx_SetConfig>
      break;
 80076c2:	e029      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	6859      	ldr	r1, [r3, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	461a      	mov	r2, r3
 80076d2:	f000 fa42 	bl	8007b5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2160      	movs	r1, #96	; 0x60
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fa6c 	bl	8007bba <TIM_ITRx_SetConfig>
      break;
 80076e2:	e019      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	6859      	ldr	r1, [r3, #4]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	461a      	mov	r2, r3
 80076f2:	f000 fa03 	bl	8007afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2140      	movs	r1, #64	; 0x40
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fa5c 	bl	8007bba <TIM_ITRx_SetConfig>
      break;
 8007702:	e009      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f000 fa53 	bl	8007bba <TIM_ITRx_SetConfig>
      break;
 8007714:	e000      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8007716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	00100030 	.word	0x00100030
 8007738:	00100020 	.word	0x00100020
 800773c:	00100050 	.word	0x00100050
 8007740:	00100040 	.word	0x00100040
 8007744:	00100060 	.word	0x00100060
 8007748:	00100070 	.word	0x00100070

0800774c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007760:	2302      	movs	r3, #2
 8007762:	e031      	b.n	80077c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f904 	bl	8007984 <TIM_SlaveTimer_SetConfig>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e018      	b.n	80077c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a46      	ldr	r2, [pc, #280]	; (8007960 <TIM_Base_SetConfig+0x12c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d017      	beq.n	800787c <TIM_Base_SetConfig+0x48>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007852:	d013      	beq.n	800787c <TIM_Base_SetConfig+0x48>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a43      	ldr	r2, [pc, #268]	; (8007964 <TIM_Base_SetConfig+0x130>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00f      	beq.n	800787c <TIM_Base_SetConfig+0x48>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a42      	ldr	r2, [pc, #264]	; (8007968 <TIM_Base_SetConfig+0x134>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00b      	beq.n	800787c <TIM_Base_SetConfig+0x48>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a41      	ldr	r2, [pc, #260]	; (800796c <TIM_Base_SetConfig+0x138>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d007      	beq.n	800787c <TIM_Base_SetConfig+0x48>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a40      	ldr	r2, [pc, #256]	; (8007970 <TIM_Base_SetConfig+0x13c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d003      	beq.n	800787c <TIM_Base_SetConfig+0x48>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a3f      	ldr	r2, [pc, #252]	; (8007974 <TIM_Base_SetConfig+0x140>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d108      	bne.n	800788e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a33      	ldr	r2, [pc, #204]	; (8007960 <TIM_Base_SetConfig+0x12c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d023      	beq.n	80078de <TIM_Base_SetConfig+0xaa>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789c:	d01f      	beq.n	80078de <TIM_Base_SetConfig+0xaa>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a30      	ldr	r2, [pc, #192]	; (8007964 <TIM_Base_SetConfig+0x130>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d01b      	beq.n	80078de <TIM_Base_SetConfig+0xaa>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2f      	ldr	r2, [pc, #188]	; (8007968 <TIM_Base_SetConfig+0x134>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d017      	beq.n	80078de <TIM_Base_SetConfig+0xaa>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2e      	ldr	r2, [pc, #184]	; (800796c <TIM_Base_SetConfig+0x138>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d013      	beq.n	80078de <TIM_Base_SetConfig+0xaa>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a2d      	ldr	r2, [pc, #180]	; (8007970 <TIM_Base_SetConfig+0x13c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00f      	beq.n	80078de <TIM_Base_SetConfig+0xaa>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2d      	ldr	r2, [pc, #180]	; (8007978 <TIM_Base_SetConfig+0x144>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00b      	beq.n	80078de <TIM_Base_SetConfig+0xaa>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2c      	ldr	r2, [pc, #176]	; (800797c <TIM_Base_SetConfig+0x148>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d007      	beq.n	80078de <TIM_Base_SetConfig+0xaa>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2b      	ldr	r2, [pc, #172]	; (8007980 <TIM_Base_SetConfig+0x14c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d003      	beq.n	80078de <TIM_Base_SetConfig+0xaa>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a26      	ldr	r2, [pc, #152]	; (8007974 <TIM_Base_SetConfig+0x140>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d108      	bne.n	80078f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a12      	ldr	r2, [pc, #72]	; (8007960 <TIM_Base_SetConfig+0x12c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d013      	beq.n	8007944 <TIM_Base_SetConfig+0x110>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a14      	ldr	r2, [pc, #80]	; (8007970 <TIM_Base_SetConfig+0x13c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00f      	beq.n	8007944 <TIM_Base_SetConfig+0x110>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a14      	ldr	r2, [pc, #80]	; (8007978 <TIM_Base_SetConfig+0x144>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00b      	beq.n	8007944 <TIM_Base_SetConfig+0x110>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a13      	ldr	r2, [pc, #76]	; (800797c <TIM_Base_SetConfig+0x148>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d007      	beq.n	8007944 <TIM_Base_SetConfig+0x110>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a12      	ldr	r2, [pc, #72]	; (8007980 <TIM_Base_SetConfig+0x14c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d003      	beq.n	8007944 <TIM_Base_SetConfig+0x110>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a0d      	ldr	r2, [pc, #52]	; (8007974 <TIM_Base_SetConfig+0x140>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d103      	bne.n	800794c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	615a      	str	r2, [r3, #20]
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40012c00 	.word	0x40012c00
 8007964:	40000400 	.word	0x40000400
 8007968:	40000800 	.word	0x40000800
 800796c:	40000c00 	.word	0x40000c00
 8007970:	40013400 	.word	0x40013400
 8007974:	40015000 	.word	0x40015000
 8007978:	40014000 	.word	0x40014000
 800797c:	40014400 	.word	0x40014400
 8007980:	40014800 	.word	0x40014800

08007984 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800799c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b2:	f023 0307 	bic.w	r3, r3, #7
 80079b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2b70      	cmp	r3, #112	; 0x70
 80079d0:	d034      	beq.n	8007a3c <TIM_SlaveTimer_SetConfig+0xb8>
 80079d2:	2b70      	cmp	r3, #112	; 0x70
 80079d4:	d811      	bhi.n	80079fa <TIM_SlaveTimer_SetConfig+0x76>
 80079d6:	2b30      	cmp	r3, #48	; 0x30
 80079d8:	d07d      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
 80079da:	2b30      	cmp	r3, #48	; 0x30
 80079dc:	d806      	bhi.n	80079ec <TIM_SlaveTimer_SetConfig+0x68>
 80079de:	2b10      	cmp	r3, #16
 80079e0:	d079      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d077      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d075      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 80079ea:	e075      	b.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80079ec:	2b50      	cmp	r3, #80	; 0x50
 80079ee:	d05e      	beq.n	8007aae <TIM_SlaveTimer_SetConfig+0x12a>
 80079f0:	2b60      	cmp	r3, #96	; 0x60
 80079f2:	d066      	beq.n	8007ac2 <TIM_SlaveTimer_SetConfig+0x13e>
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d02c      	beq.n	8007a52 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 80079f8:	e06e      	b.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80079fa:	4a3a      	ldr	r2, [pc, #232]	; (8007ae4 <TIM_SlaveTimer_SetConfig+0x160>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d06a      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
 8007a00:	4a38      	ldr	r2, [pc, #224]	; (8007ae4 <TIM_SlaveTimer_SetConfig+0x160>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d809      	bhi.n	8007a1a <TIM_SlaveTimer_SetConfig+0x96>
 8007a06:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007a0a:	d064      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
 8007a0c:	4a36      	ldr	r2, [pc, #216]	; (8007ae8 <TIM_SlaveTimer_SetConfig+0x164>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d061      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
 8007a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a16:	d05e      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007a18:	e05e      	b.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007a1a:	4a34      	ldr	r2, [pc, #208]	; (8007aec <TIM_SlaveTimer_SetConfig+0x168>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d05a      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
 8007a20:	4a32      	ldr	r2, [pc, #200]	; (8007aec <TIM_SlaveTimer_SetConfig+0x168>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d803      	bhi.n	8007a2e <TIM_SlaveTimer_SetConfig+0xaa>
 8007a26:	4a32      	ldr	r2, [pc, #200]	; (8007af0 <TIM_SlaveTimer_SetConfig+0x16c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d054      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007a2c:	e054      	b.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007a2e:	4a31      	ldr	r2, [pc, #196]	; (8007af4 <TIM_SlaveTimer_SetConfig+0x170>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d050      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
 8007a34:	4a30      	ldr	r2, [pc, #192]	; (8007af8 <TIM_SlaveTimer_SetConfig+0x174>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d04d      	beq.n	8007ad6 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007a3a:	e04d      	b.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68d9      	ldr	r1, [r3, #12]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f000 f8d2 	bl	8007bf4 <TIM_ETR_SetConfig>
      break;
 8007a50:	e042      	b.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b05      	cmp	r3, #5
 8007a58:	d004      	beq.n	8007a64 <TIM_SlaveTimer_SetConfig+0xe0>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007a62:	d101      	bne.n	8007a68 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e038      	b.n	8007ada <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6a1a      	ldr	r2, [r3, #32]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a8e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	621a      	str	r2, [r3, #32]
      break;
 8007aac:	e014      	b.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	6899      	ldr	r1, [r3, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f000 f81e 	bl	8007afc <TIM_TI1_ConfigInputStage>
      break;
 8007ac0:	e00a      	b.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6818      	ldr	r0, [r3, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	6899      	ldr	r1, [r3, #8]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f000 f843 	bl	8007b5a <TIM_TI2_ConfigInputStage>
      break;
 8007ad4:	e000      	b.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8007ad6:	bf00      	nop
  }
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	00100030 	.word	0x00100030
 8007ae8:	00100020 	.word	0x00100020
 8007aec:	00100050 	.word	0x00100050
 8007af0:	00100040 	.word	0x00100040
 8007af4:	00100060 	.word	0x00100060
 8007af8:	00100070 	.word	0x00100070

08007afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	f023 0201 	bic.w	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f023 030a 	bic.w	r3, r3, #10
 8007b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	621a      	str	r2, [r3, #32]
}
 8007b4e:	bf00      	nop
 8007b50:	371c      	adds	r7, #28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f023 0210 	bic.w	r2, r3, #16
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	031b      	lsls	r3, r3, #12
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	621a      	str	r2, [r3, #32]
}
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b085      	sub	sp, #20
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f043 0307 	orr.w	r3, r3, #7
 8007be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	609a      	str	r2, [r3, #8]
}
 8007be8:	bf00      	nop
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	021a      	lsls	r2, r3, #8
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	431a      	orrs	r2, r3
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	609a      	str	r2, [r3, #8]
}
 8007c28:	bf00      	nop
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e074      	b.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a34      	ldr	r2, [pc, #208]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a33      	ldr	r2, [pc, #204]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a31      	ldr	r2, [pc, #196]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d108      	bne.n	8007c9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a21      	ldr	r2, [pc, #132]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d022      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ccc:	d01d      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d018      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d013      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1c      	ldr	r2, [pc, #112]	; (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00e      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d009      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a18      	ldr	r2, [pc, #96]	; (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d004      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a11      	ldr	r2, [pc, #68]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d10c      	bne.n	8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	40012c00 	.word	0x40012c00
 8007d48:	40013400 	.word	0x40013400
 8007d4c:	40015000 	.word	0x40015000
 8007d50:	40000400 	.word	0x40000400
 8007d54:	40000800 	.word	0x40000800
 8007d58:	40000c00 	.word	0x40000c00
 8007d5c:	40014000 	.word	0x40014000

08007d60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d101      	bne.n	8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e096      	b.n	8007eaa <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a2f      	ldr	r2, [pc, #188]	; (8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d009      	beq.n	8007e14 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a2d      	ldr	r2, [pc, #180]	; (8007ebc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d004      	beq.n	8007e14 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a2c      	ldr	r2, [pc, #176]	; (8007ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d106      	bne.n	8007e22 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a24      	ldr	r2, [pc, #144]	; (8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d009      	beq.n	8007e40 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a22      	ldr	r2, [pc, #136]	; (8007ebc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a21      	ldr	r2, [pc, #132]	; (8007ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d12b      	bne.n	8007e98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	051b      	lsls	r3, r3, #20
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a11      	ldr	r2, [pc, #68]	; (8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d009      	beq.n	8007e8a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a10      	ldr	r2, [pc, #64]	; (8007ebc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d004      	beq.n	8007e8a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a0e      	ldr	r2, [pc, #56]	; (8007ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d106      	bne.n	8007e98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40012c00 	.word	0x40012c00
 8007ebc:	40013400 	.word	0x40013400
 8007ec0:	40015000 	.word	0x40015000

08007ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <LL_EXTI_EnableIT_0_31>:
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007f58:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <LL_EXTI_EnableIT_0_31+0x20>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4904      	ldr	r1, [pc, #16]	; (8007f70 <LL_EXTI_EnableIT_0_31+0x20>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	600b      	str	r3, [r1, #0]
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	40010400 	.word	0x40010400

08007f74 <LL_EXTI_EnableIT_32_63>:
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <LL_EXTI_EnableIT_32_63+0x20>)
 8007f7e:	6a1a      	ldr	r2, [r3, #32]
 8007f80:	4904      	ldr	r1, [pc, #16]	; (8007f94 <LL_EXTI_EnableIT_32_63+0x20>)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	620b      	str	r3, [r1, #32]
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	40010400 	.word	0x40010400

08007f98 <LL_EXTI_DisableIT_0_31>:
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007fa0:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <LL_EXTI_DisableIT_0_31+0x24>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	4904      	ldr	r1, [pc, #16]	; (8007fbc <LL_EXTI_DisableIT_0_31+0x24>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	600b      	str	r3, [r1, #0]
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40010400 	.word	0x40010400

08007fc0 <LL_EXTI_DisableIT_32_63>:
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007fc8:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <LL_EXTI_DisableIT_32_63+0x24>)
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	4904      	ldr	r1, [pc, #16]	; (8007fe4 <LL_EXTI_DisableIT_32_63+0x24>)
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	620b      	str	r3, [r1, #32]
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	40010400 	.word	0x40010400

08007fe8 <LL_EXTI_EnableEvent_0_31>:
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007ff0:	4b05      	ldr	r3, [pc, #20]	; (8008008 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	4904      	ldr	r1, [pc, #16]	; (8008008 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	604b      	str	r3, [r1, #4]
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	40010400 	.word	0x40010400

0800800c <LL_EXTI_EnableEvent_32_63>:
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <LL_EXTI_EnableEvent_32_63+0x20>)
 8008016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008018:	4904      	ldr	r1, [pc, #16]	; (800802c <LL_EXTI_EnableEvent_32_63+0x20>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4313      	orrs	r3, r2
 800801e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	40010400 	.word	0x40010400

08008030 <LL_EXTI_DisableEvent_0_31>:
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008038:	4b06      	ldr	r3, [pc, #24]	; (8008054 <LL_EXTI_DisableEvent_0_31+0x24>)
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	43db      	mvns	r3, r3
 8008040:	4904      	ldr	r1, [pc, #16]	; (8008054 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008042:	4013      	ands	r3, r2
 8008044:	604b      	str	r3, [r1, #4]
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40010400 	.word	0x40010400

08008058 <LL_EXTI_DisableEvent_32_63>:
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8008060:	4b06      	ldr	r3, [pc, #24]	; (800807c <LL_EXTI_DisableEvent_32_63+0x24>)
 8008062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	43db      	mvns	r3, r3
 8008068:	4904      	ldr	r1, [pc, #16]	; (800807c <LL_EXTI_DisableEvent_32_63+0x24>)
 800806a:	4013      	ands	r3, r2
 800806c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40010400 	.word	0x40010400

08008080 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8008088:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	4904      	ldr	r1, [pc, #16]	; (80080a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4313      	orrs	r3, r2
 8008092:	608b      	str	r3, [r1, #8]
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	40010400 	.word	0x40010400

080080a4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80080ac:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80080ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080b0:	4904      	ldr	r1, [pc, #16]	; (80080c4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	40010400 	.word	0x40010400

080080c8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80080d0:	4b06      	ldr	r3, [pc, #24]	; (80080ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	43db      	mvns	r3, r3
 80080d8:	4904      	ldr	r1, [pc, #16]	; (80080ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80080da:	4013      	ands	r3, r2
 80080dc:	608b      	str	r3, [r1, #8]
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40010400 	.word	0x40010400

080080f0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80080f8:	4b06      	ldr	r3, [pc, #24]	; (8008114 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80080fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	43db      	mvns	r3, r3
 8008100:	4904      	ldr	r1, [pc, #16]	; (8008114 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008102:	4013      	ands	r3, r2
 8008104:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	40010400 	.word	0x40010400

08008118 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	4904      	ldr	r1, [pc, #16]	; (8008138 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4313      	orrs	r3, r2
 800812a:	60cb      	str	r3, [r1, #12]
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	40010400 	.word	0x40010400

0800813c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008148:	4904      	ldr	r1, [pc, #16]	; (800815c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4313      	orrs	r3, r2
 800814e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	40010400 	.word	0x40010400

08008160 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8008168:	4b06      	ldr	r3, [pc, #24]	; (8008184 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	43db      	mvns	r3, r3
 8008170:	4904      	ldr	r1, [pc, #16]	; (8008184 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008172:	4013      	ands	r3, r2
 8008174:	60cb      	str	r3, [r1, #12]
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	40010400 	.word	0x40010400

08008188 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8008190:	4b06      	ldr	r3, [pc, #24]	; (80081ac <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	43db      	mvns	r3, r3
 8008198:	4904      	ldr	r1, [pc, #16]	; (80081ac <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800819a:	4013      	ands	r3, r2
 800819c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40010400 	.word	0x40010400

080081b0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7a1b      	ldrb	r3, [r3, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 80c8 	beq.w	8008356 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d05d      	beq.n	800828a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7a5b      	ldrb	r3, [r3, #9]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d00e      	beq.n	80081f4 <LL_EXTI_Init+0x44>
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d017      	beq.n	800820a <LL_EXTI_Init+0x5a>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d120      	bne.n	8008220 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff ff24 	bl	8008030 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff feaf 	bl	8007f50 <LL_EXTI_EnableIT_0_31>
          break;
 80081f2:	e018      	b.n	8008226 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff fecd 	bl	8007f98 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f7ff fef0 	bl	8007fe8 <LL_EXTI_EnableEvent_0_31>
          break;
 8008208:	e00d      	b.n	8008226 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f7ff fe9e 	bl	8007f50 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fee5 	bl	8007fe8 <LL_EXTI_EnableEvent_0_31>
          break;
 800821e:	e002      	b.n	8008226 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8008220:	2301      	movs	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]
          break;
 8008224:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	7a9b      	ldrb	r3, [r3, #10]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d02d      	beq.n	800828a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	7a9b      	ldrb	r3, [r3, #10]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d00e      	beq.n	8008254 <LL_EXTI_Init+0xa4>
 8008236:	2b03      	cmp	r3, #3
 8008238:	d017      	beq.n	800826a <LL_EXTI_Init+0xba>
 800823a:	2b01      	cmp	r3, #1
 800823c:	d120      	bne.n	8008280 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff ff8c 	bl	8008160 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff ff17 	bl	8008080 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8008252:	e01b      	b.n	800828c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff ff35 	bl	80080c8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff ff58 	bl	8008118 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8008268:	e010      	b.n	800828c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff ff06 	bl	8008080 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff ff4d 	bl	8008118 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800827e:	e005      	b.n	800828c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f043 0302 	orr.w	r3, r3, #2
 8008286:	60fb      	str	r3, [r7, #12]
            break;
 8008288:	e000      	b.n	800828c <LL_EXTI_Init+0xdc>
        }
      }
 800828a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d075      	beq.n	8008380 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7a5b      	ldrb	r3, [r3, #9]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d00e      	beq.n	80082ba <LL_EXTI_Init+0x10a>
 800829c:	2b02      	cmp	r3, #2
 800829e:	d017      	beq.n	80082d0 <LL_EXTI_Init+0x120>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d120      	bne.n	80082e6 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fed5 	bl	8008058 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff fe5e 	bl	8007f74 <LL_EXTI_EnableIT_32_63>
          break;
 80082b8:	e01a      	b.n	80082f0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fe7e 	bl	8007fc0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff fe9f 	bl	800800c <LL_EXTI_EnableEvent_32_63>
          break;
 80082ce:	e00f      	b.n	80082f0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff fe4d 	bl	8007f74 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff fe94 	bl	800800c <LL_EXTI_EnableEvent_32_63>
          break;
 80082e4:	e004      	b.n	80082f0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f043 0304 	orr.w	r3, r3, #4
 80082ec:	60fb      	str	r3, [r7, #12]
          break;
 80082ee:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7a9b      	ldrb	r3, [r3, #10]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d043      	beq.n	8008380 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7a9b      	ldrb	r3, [r3, #10]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d00e      	beq.n	800831e <LL_EXTI_Init+0x16e>
 8008300:	2b03      	cmp	r3, #3
 8008302:	d017      	beq.n	8008334 <LL_EXTI_Init+0x184>
 8008304:	2b01      	cmp	r3, #1
 8008306:	d120      	bne.n	800834a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff ff3b 	bl	8008188 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fec4 	bl	80080a4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800831c:	e031      	b.n	8008382 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff fee4 	bl	80080f0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff ff05 	bl	800813c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8008332:	e026      	b.n	8008382 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff feb3 	bl	80080a4 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff fefa 	bl	800813c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8008348:	e01b      	b.n	8008382 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f043 0305 	orr.w	r3, r3, #5
 8008350:	60fb      	str	r3, [r7, #12]
            break;
 8008352:	bf00      	nop
 8008354:	e015      	b.n	8008382 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff fe1c 	bl	8007f98 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fe63 	bl	8008030 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff fe26 	bl	8007fc0 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff fe6d 	bl	8008058 <LL_EXTI_DisableEvent_32_63>
 800837e:	e000      	b.n	8008382 <LL_EXTI_Init+0x1d2>
      }
 8008380:	bf00      	nop
  }

  return status;
 8008382:	68fb      	ldr	r3, [r7, #12]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <LL_GPIO_SetPinMode>:
{
 800838c:	b480      	push	{r7}
 800838e:	b089      	sub	sp, #36	; 0x24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	fa93 f3a3 	rbit	r3, r3
 80083a6:	613b      	str	r3, [r7, #16]
  return result;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	fab3 f383 	clz	r3, r3
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	2103      	movs	r1, #3
 80083b4:	fa01 f303 	lsl.w	r3, r1, r3
 80083b8:	43db      	mvns	r3, r3
 80083ba:	401a      	ands	r2, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	fa93 f3a3 	rbit	r3, r3
 80083c6:	61bb      	str	r3, [r7, #24]
  return result;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	fab3 f383 	clz	r3, r3
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	fa01 f303 	lsl.w	r3, r1, r3
 80083d8:	431a      	orrs	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	601a      	str	r2, [r3, #0]
}
 80083de:	bf00      	nop
 80083e0:	3724      	adds	r7, #36	; 0x24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <LL_GPIO_SetPinOutputType>:
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	43db      	mvns	r3, r3
 80083fe:	401a      	ands	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	431a      	orrs	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	605a      	str	r2, [r3, #4]
}
 800840e:	bf00      	nop
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <LL_GPIO_SetPinSpeed>:
{
 800841a:	b480      	push	{r7}
 800841c:	b089      	sub	sp, #36	; 0x24
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	689a      	ldr	r2, [r3, #8]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	fa93 f3a3 	rbit	r3, r3
 8008434:	613b      	str	r3, [r7, #16]
  return result;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	fab3 f383 	clz	r3, r3
 800843c:	b2db      	uxtb	r3, r3
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	2103      	movs	r1, #3
 8008442:	fa01 f303 	lsl.w	r3, r1, r3
 8008446:	43db      	mvns	r3, r3
 8008448:	401a      	ands	r2, r3
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	fa93 f3a3 	rbit	r3, r3
 8008454:	61bb      	str	r3, [r7, #24]
  return result;
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	fab3 f383 	clz	r3, r3
 800845c:	b2db      	uxtb	r3, r3
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	fa01 f303 	lsl.w	r3, r1, r3
 8008466:	431a      	orrs	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	609a      	str	r2, [r3, #8]
}
 800846c:	bf00      	nop
 800846e:	3724      	adds	r7, #36	; 0x24
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <LL_GPIO_SetPinPull>:
{
 8008478:	b480      	push	{r7}
 800847a:	b089      	sub	sp, #36	; 0x24
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	fa93 f3a3 	rbit	r3, r3
 8008492:	613b      	str	r3, [r7, #16]
  return result;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	fab3 f383 	clz	r3, r3
 800849a:	b2db      	uxtb	r3, r3
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	2103      	movs	r1, #3
 80084a0:	fa01 f303 	lsl.w	r3, r1, r3
 80084a4:	43db      	mvns	r3, r3
 80084a6:	401a      	ands	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	fa93 f3a3 	rbit	r3, r3
 80084b2:	61bb      	str	r3, [r7, #24]
  return result;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	fab3 f383 	clz	r3, r3
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	fa01 f303 	lsl.w	r3, r1, r3
 80084c4:	431a      	orrs	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	60da      	str	r2, [r3, #12]
}
 80084ca:	bf00      	nop
 80084cc:	3724      	adds	r7, #36	; 0x24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <LL_GPIO_SetAFPin_0_7>:
{
 80084d6:	b480      	push	{r7}
 80084d8:	b089      	sub	sp, #36	; 0x24
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a1a      	ldr	r2, [r3, #32]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	fa93 f3a3 	rbit	r3, r3
 80084f0:	613b      	str	r3, [r7, #16]
  return result;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	fab3 f383 	clz	r3, r3
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	210f      	movs	r1, #15
 80084fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008502:	43db      	mvns	r3, r3
 8008504:	401a      	ands	r2, r3
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	fa93 f3a3 	rbit	r3, r3
 8008510:	61bb      	str	r3, [r7, #24]
  return result;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	fab3 f383 	clz	r3, r3
 8008518:	b2db      	uxtb	r3, r3
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	fa01 f303 	lsl.w	r3, r1, r3
 8008522:	431a      	orrs	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	621a      	str	r2, [r3, #32]
}
 8008528:	bf00      	nop
 800852a:	3724      	adds	r7, #36	; 0x24
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <LL_GPIO_SetAFPin_8_15>:
{
 8008534:	b480      	push	{r7}
 8008536:	b089      	sub	sp, #36	; 0x24
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	0a1b      	lsrs	r3, r3, #8
 8008548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	fa93 f3a3 	rbit	r3, r3
 8008550:	613b      	str	r3, [r7, #16]
  return result;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	fab3 f383 	clz	r3, r3
 8008558:	b2db      	uxtb	r3, r3
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	210f      	movs	r1, #15
 800855e:	fa01 f303 	lsl.w	r3, r1, r3
 8008562:	43db      	mvns	r3, r3
 8008564:	401a      	ands	r2, r3
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	0a1b      	lsrs	r3, r3, #8
 800856a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	fa93 f3a3 	rbit	r3, r3
 8008572:	61bb      	str	r3, [r7, #24]
  return result;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	fab3 f383 	clz	r3, r3
 800857a:	b2db      	uxtb	r3, r3
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	fa01 f303 	lsl.w	r3, r1, r3
 8008584:	431a      	orrs	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	625a      	str	r2, [r3, #36]	; 0x24
}
 800858a:	bf00      	nop
 800858c:	3724      	adds	r7, #36	; 0x24
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	fa93 f3a3 	rbit	r3, r3
 80085ac:	60bb      	str	r3, [r7, #8]
  return result;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	fab3 f383 	clz	r3, r3
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80085b8:	e040      	b.n	800863c <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	2101      	movs	r1, #1
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	fa01 f303 	lsl.w	r3, r1, r3
 80085c6:	4013      	ands	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d032      	beq.n	8008636 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	461a      	mov	r2, r3
 80085d6:	6939      	ldr	r1, [r7, #16]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7ff fed7 	bl	800838c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d003      	beq.n	80085ee <LL_GPIO_Init+0x58>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d106      	bne.n	80085fc <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6939      	ldr	r1, [r7, #16]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff ff0f 	bl	800841a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	461a      	mov	r2, r3
 8008602:	6939      	ldr	r1, [r7, #16]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff ff37 	bl	8008478 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2b02      	cmp	r3, #2
 8008610:	d111      	bne.n	8008636 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2bff      	cmp	r3, #255	; 0xff
 8008616:	d807      	bhi.n	8008628 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	461a      	mov	r2, r3
 800861e:	6939      	ldr	r1, [r7, #16]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ff58 	bl	80084d6 <LL_GPIO_SetAFPin_0_7>
 8008626:	e006      	b.n	8008636 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	461a      	mov	r2, r3
 800862e:	6939      	ldr	r1, [r7, #16]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff ff7f 	bl	8008534 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	3301      	adds	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	fa22 f303 	lsr.w	r3, r2, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1b7      	bne.n	80085ba <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d003      	beq.n	800865a <LL_GPIO_Init+0xc4>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d107      	bne.n	800866a <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	6819      	ldr	r1, [r3, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	461a      	mov	r2, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff fec0 	bl	80083ea <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 8008674:	b590      	push	{r4, r7, lr}
 8008676:	b087      	sub	sp, #28
 8008678:	af02      	add	r7, sp, #8
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	4611      	mov	r1, r2
 8008680:	461a      	mov	r2, r3
 8008682:	4623      	mov	r3, r4
 8008684:	80fb      	strh	r3, [r7, #6]
 8008686:	4603      	mov	r3, r0
 8008688:	80bb      	strh	r3, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	807b      	strh	r3, [r7, #2]
 800868e:	4613      	mov	r3, r2
 8008690:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8008696:	7bfa      	ldrb	r2, [r7, #15]
 8008698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800869c:	429a      	cmp	r2, r3
 800869e:	d93a      	bls.n	8008716 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80086a0:	88ba      	ldrh	r2, [r7, #4]
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	441a      	add	r2, r3
 80086a6:	88b9      	ldrh	r1, [r7, #4]
 80086a8:	883b      	ldrh	r3, [r7, #0]
 80086aa:	4419      	add	r1, r3
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	1acb      	subs	r3, r1, r3
 80086b0:	429a      	cmp	r2, r3
 80086b2:	f000 8090 	beq.w	80087d6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 80086b6:	88fa      	ldrh	r2, [r7, #6]
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	441a      	add	r2, r3
 80086bc:	88f9      	ldrh	r1, [r7, #6]
 80086be:	887b      	ldrh	r3, [r7, #2]
 80086c0:	4419      	add	r1, r3
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	1acb      	subs	r3, r1, r3
 80086c6:	429a      	cmp	r2, r3
 80086c8:	f000 8085 	beq.w	80087d6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	88fb      	ldrh	r3, [r7, #6]
 80086d2:	4413      	add	r3, r2
 80086d4:	b298      	uxth	r0, r3
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	88bb      	ldrh	r3, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	b299      	uxth	r1, r3
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	887a      	ldrh	r2, [r7, #2]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3301      	adds	r3, #1
 80086f0:	b29c      	uxth	r4, r3
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	883a      	ldrh	r2, [r7, #0]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3301      	adds	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	2304      	movs	r3, #4
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	8c3b      	ldrh	r3, [r7, #32]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	4613      	mov	r3, r2
 800870e:	4622      	mov	r2, r4
 8008710:	f000 fd32 	bl	8009178 <ILI9341_Draw_Rectangle>
				goto finish;
 8008714:	e060      	b.n	80087d8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	b29a      	uxth	r2, r3
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	4413      	add	r3, r2
 800871e:	b298      	uxth	r0, r3
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	b29a      	uxth	r2, r3
 8008724:	88bb      	ldrh	r3, [r7, #4]
 8008726:	4413      	add	r3, r2
 8008728:	b299      	uxth	r1, r3
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	b29b      	uxth	r3, r3
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	b29b      	uxth	r3, r3
 8008732:	887a      	ldrh	r2, [r7, #2]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	b29a      	uxth	r2, r3
 8008738:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800873c:	b29b      	uxth	r3, r3
 800873e:	f000 fda1 	bl	8009284 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	b29a      	uxth	r2, r3
 8008746:	88fb      	ldrh	r3, [r7, #6]
 8008748:	4413      	add	r3, r2
 800874a:	b298      	uxth	r0, r3
										(y + h) - b,
 800874c:	88ba      	ldrh	r2, [r7, #4]
 800874e:	883b      	ldrh	r3, [r7, #0]
 8008750:	4413      	add	r3, r2
 8008752:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	b29b      	uxth	r3, r3
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	b299      	uxth	r1, r3
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	b29b      	uxth	r3, r3
 8008760:	887a      	ldrh	r2, [r7, #2]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	b29a      	uxth	r2, r3
 8008766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800876a:	b29b      	uxth	r3, r3
 800876c:	f000 fd8a 	bl	8009284 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	b29a      	uxth	r2, r3
 8008774:	88fb      	ldrh	r3, [r7, #6]
 8008776:	4413      	add	r3, r2
 8008778:	b298      	uxth	r0, r3
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	b29a      	uxth	r2, r3
 800877e:	88bb      	ldrh	r3, [r7, #4]
 8008780:	4413      	add	r3, r2
 8008782:	b299      	uxth	r1, r3
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	b29b      	uxth	r3, r3
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	b29b      	uxth	r3, r3
 800878c:	883a      	ldrh	r2, [r7, #0]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	b29a      	uxth	r2, r3
 8008792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008796:	b29b      	uxth	r3, r3
 8008798:	f000 fdbc 	bl	8009314 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800879c:	88fa      	ldrh	r2, [r7, #6]
 800879e:	887b      	ldrh	r3, [r7, #2]
 80087a0:	4413      	add	r3, r2
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	b298      	uxth	r0, r3
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	88bb      	ldrh	r3, [r7, #4]
 80087b2:	4413      	add	r3, r2
 80087b4:	b299      	uxth	r1, r3
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	005b      	lsls	r3, r3, #1
 80087bc:	b29b      	uxth	r3, r3
 80087be:	883a      	ldrh	r2, [r7, #0]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	f000 fda3 	bl	8009314 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	3301      	adds	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 80087d4:	e75f      	b.n	8008696 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 80087d6:	bf00      	nop
	// done
	return;
 80087d8:	bf00      	nop
}
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd90      	pop	{r4, r7, pc}

080087e0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80087e0:	b590      	push	{r4, r7, lr}
 80087e2:	b089      	sub	sp, #36	; 0x24
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	4611      	mov	r1, r2
 80087ec:	461a      	mov	r2, r3
 80087ee:	4623      	mov	r3, r4
 80087f0:	71fb      	strb	r3, [r7, #7]
 80087f2:	4603      	mov	r3, r0
 80087f4:	80bb      	strh	r3, [r7, #4]
 80087f6:	460b      	mov	r3, r1
 80087f8:	807b      	strh	r3, [r7, #2]
 80087fa:	4613      	mov	r3, r2
 80087fc:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	2b1f      	cmp	r3, #31
 8008806:	d802      	bhi.n	800880e <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	71fb      	strb	r3, [r7, #7]
 800880c:	e002      	b.n	8008814 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	3b20      	subs	r3, #32
 8008812:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8008814:	2300      	movs	r3, #0
 8008816:	753b      	strb	r3, [r7, #20]
 8008818:	e012      	b.n	8008840 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800881a:	7dfa      	ldrb	r2, [r7, #23]
 800881c:	7d38      	ldrb	r0, [r7, #20]
 800881e:	7d39      	ldrb	r1, [r7, #20]
 8008820:	4c48      	ldr	r4, [pc, #288]	; (8008944 <ILI9341_Draw_Char+0x164>)
 8008822:	4613      	mov	r3, r2
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	4413      	add	r3, r2
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	4423      	add	r3, r4
 800882c:	4403      	add	r3, r0
 800882e:	781a      	ldrb	r2, [r3, #0]
 8008830:	f107 0318 	add.w	r3, r7, #24
 8008834:	440b      	add	r3, r1
 8008836:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800883a:	7d3b      	ldrb	r3, [r7, #20]
 800883c:	3301      	adds	r3, #1
 800883e:	753b      	strb	r3, [r7, #20]
 8008840:	7d3b      	ldrb	r3, [r7, #20]
 8008842:	2b05      	cmp	r3, #5
 8008844:	d9e9      	bls.n	800881a <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8008846:	2300      	movs	r3, #0
 8008848:	757b      	strb	r3, [r7, #21]
 800884a:	e074      	b.n	8008936 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800884c:	2300      	movs	r3, #0
 800884e:	75bb      	strb	r3, [r7, #22]
 8008850:	e06b      	b.n	800892a <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 8008852:	7d7b      	ldrb	r3, [r7, #21]
 8008854:	f107 0218 	add.w	r2, r7, #24
 8008858:	4413      	add	r3, r2
 800885a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800885e:	461a      	mov	r2, r3
 8008860:	7dbb      	ldrb	r3, [r7, #22]
 8008862:	fa42 f303 	asr.w	r3, r2, r3
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d02d      	beq.n	80088ca <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800886e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008870:	2b01      	cmp	r3, #1
 8008872:	d10e      	bne.n	8008892 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8008874:	7d7b      	ldrb	r3, [r7, #21]
 8008876:	b29a      	uxth	r2, r3
 8008878:	88bb      	ldrh	r3, [r7, #4]
 800887a:	4413      	add	r3, r2
 800887c:	b298      	uxth	r0, r3
 800887e:	7dbb      	ldrb	r3, [r7, #22]
 8008880:	b29a      	uxth	r2, r3
 8008882:	887b      	ldrh	r3, [r7, #2]
 8008884:	4413      	add	r3, r2
 8008886:	b29b      	uxth	r3, r3
 8008888:	883a      	ldrh	r2, [r7, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	f000 fb9a 	bl	8008fc4 <ILI9341_Draw_Pixel>
 8008890:	e048      	b.n	8008924 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8008892:	7d7b      	ldrb	r3, [r7, #21]
 8008894:	b29b      	uxth	r3, r3
 8008896:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008898:	fb12 f303 	smulbb	r3, r2, r3
 800889c:	b29a      	uxth	r2, r3
 800889e:	88bb      	ldrh	r3, [r7, #4]
 80088a0:	4413      	add	r3, r2
 80088a2:	b298      	uxth	r0, r3
 80088a4:	7dbb      	ldrb	r3, [r7, #22]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088aa:	fb12 f303 	smulbb	r3, r2, r3
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	887b      	ldrh	r3, [r7, #2]
 80088b2:	4413      	add	r3, r2
 80088b4:	b299      	uxth	r1, r3
 80088b6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80088b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088ba:	2301      	movs	r3, #1
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	883b      	ldrh	r3, [r7, #0]
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	4623      	mov	r3, r4
 80088c4:	f000 fc58 	bl	8009178 <ILI9341_Draw_Rectangle>
 80088c8:	e02c      	b.n	8008924 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 80088ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d10e      	bne.n	80088ee <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80088d0:	7d7b      	ldrb	r3, [r7, #21]
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	88bb      	ldrh	r3, [r7, #4]
 80088d6:	4413      	add	r3, r2
 80088d8:	b298      	uxth	r0, r3
 80088da:	7dbb      	ldrb	r3, [r7, #22]
 80088dc:	b29a      	uxth	r2, r3
 80088de:	887b      	ldrh	r3, [r7, #2]
 80088e0:	4413      	add	r3, r2
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80088e6:	4619      	mov	r1, r3
 80088e8:	f000 fb6c 	bl	8008fc4 <ILI9341_Draw_Pixel>
 80088ec:	e01a      	b.n	8008924 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 80088ee:	7d7b      	ldrb	r3, [r7, #21]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088f4:	fb12 f303 	smulbb	r3, r2, r3
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	88bb      	ldrh	r3, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	b298      	uxth	r0, r3
 8008900:	7dbb      	ldrb	r3, [r7, #22]
 8008902:	b29b      	uxth	r3, r3
 8008904:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008906:	fb12 f303 	smulbb	r3, r2, r3
 800890a:	b29a      	uxth	r2, r3
 800890c:	887b      	ldrh	r3, [r7, #2]
 800890e:	4413      	add	r3, r2
 8008910:	b299      	uxth	r1, r3
 8008912:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008914:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008916:	2301      	movs	r3, #1
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	4623      	mov	r3, r4
 8008920:	f000 fc2a 	bl	8009178 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8008924:	7dbb      	ldrb	r3, [r7, #22]
 8008926:	3301      	adds	r3, #1
 8008928:	75bb      	strb	r3, [r7, #22]
 800892a:	7dbb      	ldrb	r3, [r7, #22]
 800892c:	2b07      	cmp	r3, #7
 800892e:	d990      	bls.n	8008852 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8008930:	7d7b      	ldrb	r3, [r7, #21]
 8008932:	3301      	adds	r3, #1
 8008934:	757b      	strb	r3, [r7, #21]
 8008936:	7d7b      	ldrb	r3, [r7, #21]
 8008938:	2b05      	cmp	r3, #5
 800893a:	d987      	bls.n	800884c <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800893c:	bf00      	nop
 800893e:	371c      	adds	r7, #28
 8008940:	46bd      	mov	sp, r7
 8008942:	bd90      	pop	{r4, r7, pc}
 8008944:	0800a62c 	.word	0x0800a62c

08008948 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008948:	b590      	push	{r4, r7, lr}
 800894a:	b087      	sub	sp, #28
 800894c:	af02      	add	r7, sp, #8
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	4608      	mov	r0, r1
 8008952:	4611      	mov	r1, r2
 8008954:	461a      	mov	r2, r3
 8008956:	4603      	mov	r3, r0
 8008958:	817b      	strh	r3, [r7, #10]
 800895a:	460b      	mov	r3, r1
 800895c:	813b      	strh	r3, [r7, #8]
 800895e:	4613      	mov	r3, r2
 8008960:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8008962:	e016      	b.n	8008992 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	60fa      	str	r2, [r7, #12]
 800896a:	7818      	ldrb	r0, [r3, #0]
 800896c:	88fc      	ldrh	r4, [r7, #6]
 800896e:	893a      	ldrh	r2, [r7, #8]
 8008970:	8979      	ldrh	r1, [r7, #10]
 8008972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	8c3b      	ldrh	r3, [r7, #32]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	4623      	mov	r3, r4
 800897c:	f7ff ff30 	bl	80087e0 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8008980:	8c3b      	ldrh	r3, [r7, #32]
 8008982:	461a      	mov	r2, r3
 8008984:	0052      	lsls	r2, r2, #1
 8008986:	4413      	add	r3, r2
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	b29a      	uxth	r2, r3
 800898c:	897b      	ldrh	r3, [r7, #10]
 800898e:	4413      	add	r3, r2
 8008990:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1e4      	bne.n	8008964 <ILI9341_Draw_Text+0x1c>
    }


}
 800899a:	bf00      	nop
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd90      	pop	{r4, r7, pc}
	...

080089a4 <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80089a8:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <ILI9341_SPI_Init+0x1c>)
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	4a04      	ldr	r2, [pc, #16]	; (80089c0 <ILI9341_SPI_Init+0x1c>)
 80089ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089b2:	6153      	str	r3, [r2, #20]
}
 80089b4:	bf00      	nop
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	48000400 	.word	0x48000400

080089c4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 80089ce:	1df9      	adds	r1, r7, #7
 80089d0:	2301      	movs	r3, #1
 80089d2:	2201      	movs	r2, #1
 80089d4:	4804      	ldr	r0, [pc, #16]	; (80089e8 <ILI9341_SPI_Send+0x24>)
 80089d6:	f7fe f837 	bl	8006a48 <HAL_SPI_Transmit>
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 80089de:	bf00      	nop
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20000de8 	.word	0x20000de8

080089ec <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80089f6:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <ILI9341_Write_Command+0x40>)
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	4a0c      	ldr	r2, [pc, #48]	; (8008a2c <ILI9341_Write_Command+0x40>)
 80089fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a00:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008a02:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <ILI9341_Write_Command+0x40>)
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	4a09      	ldr	r2, [pc, #36]	; (8008a2c <ILI9341_Write_Command+0x40>)
 8008a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a0c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff ffd7 	bl	80089c4 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008a16:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <ILI9341_Write_Command+0x40>)
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	4a04      	ldr	r2, [pc, #16]	; (8008a2c <ILI9341_Write_Command+0x40>)
 8008a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a20:	6153      	str	r3, [r2, #20]
}
 8008a22:	bf00      	nop
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	48000400 	.word	0x48000400

08008a30 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008a3a:	4b0d      	ldr	r3, [pc, #52]	; (8008a70 <ILI9341_Write_Data+0x40>)
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	4a0c      	ldr	r2, [pc, #48]	; (8008a70 <ILI9341_Write_Data+0x40>)
 8008a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a44:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008a46:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <ILI9341_Write_Data+0x40>)
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	4a09      	ldr	r2, [pc, #36]	; (8008a70 <ILI9341_Write_Data+0x40>)
 8008a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a50:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff ffb5 	bl	80089c4 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008a5a:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <ILI9341_Write_Data+0x40>)
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	4a04      	ldr	r2, [pc, #16]	; (8008a70 <ILI9341_Write_Data+0x40>)
 8008a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a64:	6153      	str	r3, [r2, #20]
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	48000400 	.word	0x48000400

08008a74 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8008a74:	b590      	push	{r4, r7, lr}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	4611      	mov	r1, r2
 8008a80:	461a      	mov	r2, r3
 8008a82:	4623      	mov	r3, r4
 8008a84:	80fb      	strh	r3, [r7, #6]
 8008a86:	4603      	mov	r3, r0
 8008a88:	80bb      	strh	r3, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	807b      	strh	r3, [r7, #2]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8008a92:	202a      	movs	r0, #42	; 0x2a
 8008a94:	f7ff ffaa 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8008a98:	88fb      	ldrh	r3, [r7, #6]
 8008a9a:	0a1b      	lsrs	r3, r3, #8
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff ffc5 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff ffc0 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8008ab0:	887b      	ldrh	r3, [r7, #2]
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff ffb9 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8008abe:	887b      	ldrh	r3, [r7, #2]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7ff ffb4 	bl	8008a30 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8008ac8:	202b      	movs	r0, #43	; 0x2b
 8008aca:	f7ff ff8f 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8008ace:	88bb      	ldrh	r3, [r7, #4]
 8008ad0:	0a1b      	lsrs	r3, r3, #8
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff ffaa 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8008adc:	88bb      	ldrh	r3, [r7, #4]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff ffa5 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8008ae6:	883b      	ldrh	r3, [r7, #0]
 8008ae8:	0a1b      	lsrs	r3, r3, #8
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff ff9e 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8008af4:	883b      	ldrh	r3, [r7, #0]
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff ff99 	bl	8008a30 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8008afe:	202c      	movs	r0, #44	; 0x2c
 8008b00:	f7ff ff74 	bl	80089ec <ILI9341_Write_Command>
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd90      	pop	{r4, r7, pc}

08008b0c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8008b10:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <ILI9341_Reset+0x38>)
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	4a0b      	ldr	r2, [pc, #44]	; (8008b44 <ILI9341_Reset+0x38>)
 8008b16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b1a:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8008b1c:	20c8      	movs	r0, #200	; 0xc8
 8008b1e:	f7fa fa05 	bl	8002f2c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008b22:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <ILI9341_Reset+0x38>)
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	4a07      	ldr	r2, [pc, #28]	; (8008b44 <ILI9341_Reset+0x38>)
 8008b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b2c:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8008b2e:	20c8      	movs	r0, #200	; 0xc8
 8008b30:	f7fa f9fc 	bl	8002f2c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008b34:	4b03      	ldr	r3, [pc, #12]	; (8008b44 <ILI9341_Reset+0x38>)
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	4a02      	ldr	r2, [pc, #8]	; (8008b44 <ILI9341_Reset+0x38>)
 8008b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b3e:	6153      	str	r3, [r2, #20]
}
 8008b40:	bf00      	nop
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	48000400 	.word	0x48000400

08008b48 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8008b56:	2036      	movs	r0, #54	; 0x36
 8008b58:	f7ff ff48 	bl	80089ec <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d836      	bhi.n	8008bd0 <ILI9341_Set_Rotation+0x88>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <ILI9341_Set_Rotation+0x20>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b79 	.word	0x08008b79
 8008b6c:	08008b8f 	.word	0x08008b8f
 8008b70:	08008ba5 	.word	0x08008ba5
 8008b74:	08008bbb 	.word	0x08008bbb
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8008b78:	2048      	movs	r0, #72	; 0x48
 8008b7a:	f7ff ff59 	bl	8008a30 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8008b7e:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <ILI9341_Set_Rotation+0x94>)
 8008b80:	22f0      	movs	r2, #240	; 0xf0
 8008b82:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008b84:	4b16      	ldr	r3, [pc, #88]	; (8008be0 <ILI9341_Set_Rotation+0x98>)
 8008b86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008b8a:	801a      	strh	r2, [r3, #0]
			break;
 8008b8c:	e021      	b.n	8008bd2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8008b8e:	2028      	movs	r0, #40	; 0x28
 8008b90:	f7ff ff4e 	bl	8008a30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008b94:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <ILI9341_Set_Rotation+0x94>)
 8008b96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008b9a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <ILI9341_Set_Rotation+0x98>)
 8008b9e:	22f0      	movs	r2, #240	; 0xf0
 8008ba0:	801a      	strh	r2, [r3, #0]
			break;
 8008ba2:	e016      	b.n	8008bd2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8008ba4:	2088      	movs	r0, #136	; 0x88
 8008ba6:	f7ff ff43 	bl	8008a30 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8008baa:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <ILI9341_Set_Rotation+0x94>)
 8008bac:	22f0      	movs	r2, #240	; 0xf0
 8008bae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <ILI9341_Set_Rotation+0x98>)
 8008bb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008bb6:	801a      	strh	r2, [r3, #0]
			break;
 8008bb8:	e00b      	b.n	8008bd2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8008bba:	20e8      	movs	r0, #232	; 0xe8
 8008bbc:	f7ff ff38 	bl	8008a30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <ILI9341_Set_Rotation+0x94>)
 8008bc2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008bc6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008bc8:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <ILI9341_Set_Rotation+0x98>)
 8008bca:	22f0      	movs	r2, #240	; 0xf0
 8008bcc:	801a      	strh	r2, [r3, #0]
			break;
 8008bce:	e000      	b.n	8008bd2 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8008bd0:	bf00      	nop
	}
}
 8008bd2:	bf00      	nop
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	2000001e 	.word	0x2000001e
 8008be0:	2000001c 	.word	0x2000001c

08008be4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8008be4:	b480      	push	{r7}
 8008be6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008be8:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <ILI9341_Enable+0x1c>)
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	4a04      	ldr	r2, [pc, #16]	; (8008c00 <ILI9341_Enable+0x1c>)
 8008bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bf2:	6153      	str	r3, [r2, #20]
}
 8008bf4:	bf00      	nop
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	48000400 	.word	0x48000400

08008c04 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8008c08:	f7ff ffec 	bl	8008be4 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8008c0c:	f7ff feca 	bl	80089a4 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8008c10:	f7ff ff7c 	bl	8008b0c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8008c14:	2001      	movs	r0, #1
 8008c16:	f7ff fee9 	bl	80089ec <ILI9341_Write_Command>
	HAL_Delay(2000);
 8008c1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008c1e:	f7fa f985 	bl	8002f2c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8008c22:	20cb      	movs	r0, #203	; 0xcb
 8008c24:	f7ff fee2 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8008c28:	2039      	movs	r0, #57	; 0x39
 8008c2a:	f7ff ff01 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8008c2e:	202c      	movs	r0, #44	; 0x2c
 8008c30:	f7ff fefe 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008c34:	2000      	movs	r0, #0
 8008c36:	f7ff fefb 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8008c3a:	2034      	movs	r0, #52	; 0x34
 8008c3c:	f7ff fef8 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8008c40:	2002      	movs	r0, #2
 8008c42:	f7ff fef5 	bl	8008a30 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8008c46:	20cf      	movs	r0, #207	; 0xcf
 8008c48:	f7ff fed0 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f7ff feef 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008c52:	20c1      	movs	r0, #193	; 0xc1
 8008c54:	f7ff feec 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8008c58:	2030      	movs	r0, #48	; 0x30
 8008c5a:	f7ff fee9 	bl	8008a30 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8008c5e:	20e8      	movs	r0, #232	; 0xe8
 8008c60:	f7ff fec4 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8008c64:	2085      	movs	r0, #133	; 0x85
 8008c66:	f7ff fee3 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	f7ff fee0 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8008c70:	2078      	movs	r0, #120	; 0x78
 8008c72:	f7ff fedd 	bl	8008a30 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8008c76:	20ea      	movs	r0, #234	; 0xea
 8008c78:	f7ff feb8 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	f7ff fed7 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008c82:	2000      	movs	r0, #0
 8008c84:	f7ff fed4 	bl	8008a30 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8008c88:	20ed      	movs	r0, #237	; 0xed
 8008c8a:	f7ff feaf 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8008c8e:	2064      	movs	r0, #100	; 0x64
 8008c90:	f7ff fece 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008c94:	2003      	movs	r0, #3
 8008c96:	f7ff fecb 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8008c9a:	2012      	movs	r0, #18
 8008c9c:	f7ff fec8 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8008ca0:	2081      	movs	r0, #129	; 0x81
 8008ca2:	f7ff fec5 	bl	8008a30 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8008ca6:	20f7      	movs	r0, #247	; 0xf7
 8008ca8:	f7ff fea0 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8008cac:	2020      	movs	r0, #32
 8008cae:	f7ff febf 	bl	8008a30 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8008cb2:	20c0      	movs	r0, #192	; 0xc0
 8008cb4:	f7ff fe9a 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8008cb8:	2023      	movs	r0, #35	; 0x23
 8008cba:	f7ff feb9 	bl	8008a30 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8008cbe:	20c1      	movs	r0, #193	; 0xc1
 8008cc0:	f7ff fe94 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8008cc4:	2010      	movs	r0, #16
 8008cc6:	f7ff feb3 	bl	8008a30 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8008cca:	20c5      	movs	r0, #197	; 0xc5
 8008ccc:	f7ff fe8e 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8008cd0:	203e      	movs	r0, #62	; 0x3e
 8008cd2:	f7ff fead 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8008cd6:	2028      	movs	r0, #40	; 0x28
 8008cd8:	f7ff feaa 	bl	8008a30 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8008cdc:	20c7      	movs	r0, #199	; 0xc7
 8008cde:	f7ff fe85 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8008ce2:	2086      	movs	r0, #134	; 0x86
 8008ce4:	f7ff fea4 	bl	8008a30 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8008ce8:	2036      	movs	r0, #54	; 0x36
 8008cea:	f7ff fe7f 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8008cee:	2048      	movs	r0, #72	; 0x48
 8008cf0:	f7ff fe9e 	bl	8008a30 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8008cf4:	203a      	movs	r0, #58	; 0x3a
 8008cf6:	f7ff fe79 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8008cfa:	2055      	movs	r0, #85	; 0x55
 8008cfc:	f7ff fe98 	bl	8008a30 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8008d00:	20b1      	movs	r0, #177	; 0xb1
 8008d02:	f7ff fe73 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008d06:	2000      	movs	r0, #0
 8008d08:	f7ff fe92 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8008d0c:	2018      	movs	r0, #24
 8008d0e:	f7ff fe8f 	bl	8008a30 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8008d12:	20b6      	movs	r0, #182	; 0xb6
 8008d14:	f7ff fe6a 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8008d18:	2008      	movs	r0, #8
 8008d1a:	f7ff fe89 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8008d1e:	2082      	movs	r0, #130	; 0x82
 8008d20:	f7ff fe86 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8008d24:	2027      	movs	r0, #39	; 0x27
 8008d26:	f7ff fe83 	bl	8008a30 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8008d2a:	20f2      	movs	r0, #242	; 0xf2
 8008d2c:	f7ff fe5e 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008d30:	2000      	movs	r0, #0
 8008d32:	f7ff fe7d 	bl	8008a30 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8008d36:	2026      	movs	r0, #38	; 0x26
 8008d38:	f7ff fe58 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8008d3c:	2001      	movs	r0, #1
 8008d3e:	f7ff fe77 	bl	8008a30 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8008d42:	20e0      	movs	r0, #224	; 0xe0
 8008d44:	f7ff fe52 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8008d48:	200f      	movs	r0, #15
 8008d4a:	f7ff fe71 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008d4e:	2031      	movs	r0, #49	; 0x31
 8008d50:	f7ff fe6e 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8008d54:	202b      	movs	r0, #43	; 0x2b
 8008d56:	f7ff fe6b 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008d5a:	200c      	movs	r0, #12
 8008d5c:	f7ff fe68 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008d60:	200e      	movs	r0, #14
 8008d62:	f7ff fe65 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008d66:	2008      	movs	r0, #8
 8008d68:	f7ff fe62 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8008d6c:	204e      	movs	r0, #78	; 0x4e
 8008d6e:	f7ff fe5f 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8008d72:	20f1      	movs	r0, #241	; 0xf1
 8008d74:	f7ff fe5c 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8008d78:	2037      	movs	r0, #55	; 0x37
 8008d7a:	f7ff fe59 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008d7e:	2007      	movs	r0, #7
 8008d80:	f7ff fe56 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8008d84:	2010      	movs	r0, #16
 8008d86:	f7ff fe53 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008d8a:	2003      	movs	r0, #3
 8008d8c:	f7ff fe50 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008d90:	200e      	movs	r0, #14
 8008d92:	f7ff fe4d 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8008d96:	2009      	movs	r0, #9
 8008d98:	f7ff fe4a 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f7ff fe47 	bl	8008a30 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8008da2:	20e1      	movs	r0, #225	; 0xe1
 8008da4:	f7ff fe22 	bl	80089ec <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008da8:	2000      	movs	r0, #0
 8008daa:	f7ff fe41 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008dae:	200e      	movs	r0, #14
 8008db0:	f7ff fe3e 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8008db4:	2014      	movs	r0, #20
 8008db6:	f7ff fe3b 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008dba:	2003      	movs	r0, #3
 8008dbc:	f7ff fe38 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8008dc0:	2011      	movs	r0, #17
 8008dc2:	f7ff fe35 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008dc6:	2007      	movs	r0, #7
 8008dc8:	f7ff fe32 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008dcc:	2031      	movs	r0, #49	; 0x31
 8008dce:	f7ff fe2f 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008dd2:	20c1      	movs	r0, #193	; 0xc1
 8008dd4:	f7ff fe2c 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8008dd8:	2048      	movs	r0, #72	; 0x48
 8008dda:	f7ff fe29 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008dde:	2008      	movs	r0, #8
 8008de0:	f7ff fe26 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008de4:	200f      	movs	r0, #15
 8008de6:	f7ff fe23 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008dea:	200c      	movs	r0, #12
 8008dec:	f7ff fe20 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008df0:	2031      	movs	r0, #49	; 0x31
 8008df2:	f7ff fe1d 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8008df6:	2036      	movs	r0, #54	; 0x36
 8008df8:	f7ff fe1a 	bl	8008a30 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008dfc:	200f      	movs	r0, #15
 8008dfe:	f7ff fe17 	bl	8008a30 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8008e02:	2011      	movs	r0, #17
 8008e04:	f7ff fdf2 	bl	80089ec <ILI9341_Write_Command>
	HAL_Delay(240);
 8008e08:	20f0      	movs	r0, #240	; 0xf0
 8008e0a:	f7fa f88f 	bl	8002f2c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8008e0e:	2029      	movs	r0, #41	; 0x29
 8008e10:	f7ff fdec 	bl	80089ec <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008e14:	2000      	movs	r0, #0
 8008e16:	f7ff fe97 	bl	8008b48 <ILI9341_Set_Rotation>
}
 8008e1a:	bf00      	nop
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8008e20:	b5b0      	push	{r4, r5, r7, lr}
 8008e22:	b08e      	sub	sp, #56	; 0x38
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	607b      	str	r3, [r7, #4]
 8008e28:	4603      	mov	r3, r0
 8008e2a:	81fb      	strh	r3, [r7, #14]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	81bb      	strh	r3, [r7, #12]
 8008e30:	4613      	mov	r3, r2
 8008e32:	817b      	strh	r3, [r7, #10]
 8008e34:	466b      	mov	r3, sp
 8008e36:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	4a48      	ldr	r2, [pc, #288]	; (8008f64 <ILI9341_Draw_colour_Burst+0x144>)
 8008e42:	8812      	ldrh	r2, [r2, #0]
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d202      	bcs.n	8008e4e <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e4c:	e002      	b.n	8008e54 <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8008e4e:	4b45      	ldr	r3, [pc, #276]	; (8008f64 <ILI9341_Draw_colour_Burst+0x144>)
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 8008e54:	897b      	ldrh	r3, [r7, #10]
 8008e56:	0a1b      	lsrs	r3, r3, #8
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8008e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e60:	4603      	mov	r3, r0
 8008e62:	3b01      	subs	r3, #1
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	4601      	mov	r1, r0
 8008e68:	f04f 0200 	mov.w	r2, #0
 8008e6c:	f04f 0300 	mov.w	r3, #0
 8008e70:	f04f 0400 	mov.w	r4, #0
 8008e74:	00d4      	lsls	r4, r2, #3
 8008e76:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008e7a:	00cb      	lsls	r3, r1, #3
 8008e7c:	4601      	mov	r1, r0
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	f04f 0400 	mov.w	r4, #0
 8008e8a:	00d4      	lsls	r4, r2, #3
 8008e8c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008e90:	00cb      	lsls	r3, r1, #3
 8008e92:	1dc3      	adds	r3, r0, #7
 8008e94:	08db      	lsrs	r3, r3, #3
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	ebad 0d03 	sub.w	sp, sp, r3
 8008e9c:	466b      	mov	r3, sp
 8008e9e:	3300      	adds	r3, #0
 8008ea0:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ea6:	e00e      	b.n	8008ec6 <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	4413      	add	r3, r2
 8008eae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008eb2:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	897a      	ldrh	r2, [r7, #10]
 8008eba:	b2d1      	uxtb	r1, r2
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d3ec      	bcc.n	8008ea8 <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00d      	beq.n	8008efe <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ef0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ef6:	fb01 f202 	mul.w	r2, r1, r2
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008efe:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <ILI9341_Draw_colour_Burst+0x148>)
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	4a19      	ldr	r2, [pc, #100]	; (8008f68 <ILI9341_Draw_colour_Burst+0x148>)
 8008f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f08:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f0a:	4b17      	ldr	r3, [pc, #92]	; (8008f68 <ILI9341_Draw_colour_Burst+0x148>)
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	4a16      	ldr	r2, [pc, #88]	; (8008f68 <ILI9341_Draw_colour_Burst+0x148>)
 8008f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f14:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8008f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d010      	beq.n	8008f3e <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f20:	e009      	b.n	8008f36 <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 8008f22:	69b9      	ldr	r1, [r7, #24]
 8008f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	2302      	movs	r3, #2
 8008f2a:	4810      	ldr	r0, [pc, #64]	; (8008f6c <ILI9341_Draw_colour_Burst+0x14c>)
 8008f2c:	f7fd fd8c 	bl	8006a48 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	3301      	adds	r3, #1
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
 8008f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d3f1      	bcc.n	8008f22 <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 8008f3e:	69b9      	ldr	r1, [r7, #24]
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	2302      	movs	r3, #2
 8008f46:	4809      	ldr	r0, [pc, #36]	; (8008f6c <ILI9341_Draw_colour_Burst+0x14c>)
 8008f48:	f7fd fd7e 	bl	8006a48 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <ILI9341_Draw_colour_Burst+0x148>)
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	4a05      	ldr	r2, [pc, #20]	; (8008f68 <ILI9341_Draw_colour_Burst+0x148>)
 8008f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f56:	6153      	str	r3, [r2, #20]
 8008f58:	46ad      	mov	sp, r5


}
 8008f5a:	bf00      	nop
 8008f5c:	3738      	adds	r7, #56	; 0x38
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bdb0      	pop	{r4, r5, r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000020 	.word	0x20000020
 8008f68:	48000400 	.word	0x48000400
 8008f6c:	20000de8 	.word	0x20000de8

08008f70 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af02      	add	r7, sp, #8
 8008f76:	4603      	mov	r3, r0
 8008f78:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8008f7a:	4b10      	ldr	r3, [pc, #64]	; (8008fbc <ILI9341_Fill_Screen+0x4c>)
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <ILI9341_Fill_Screen+0x50>)
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	2100      	movs	r1, #0
 8008f88:	2000      	movs	r0, #0
 8008f8a:	f7ff fd73 	bl	8008a74 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8008f8e:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <ILI9341_Fill_Screen+0x4c>)
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	461a      	mov	r2, r3
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <ILI9341_Fill_Screen+0x50>)
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	fb03 f302 	mul.w	r3, r3, r2
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	88fa      	ldrh	r2, [r7, #6]
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	2100      	movs	r1, #0
 8008fac:	2000      	movs	r0, #0
 8008fae:	f7ff ff37 	bl	8008e20 <ILI9341_Draw_colour_Burst>
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	2000001e 	.word	0x2000001e
 8008fc0:	2000001c 	.word	0x2000001c

08008fc4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	80fb      	strh	r3, [r7, #6]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	80bb      	strh	r3, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008fd6:	4b64      	ldr	r3, [pc, #400]	; (8009168 <ILI9341_Draw_Pixel+0x1a4>)
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	88fa      	ldrh	r2, [r7, #6]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	f080 80be 	bcs.w	8009160 <ILI9341_Draw_Pixel+0x19c>
 8008fe4:	4b61      	ldr	r3, [pc, #388]	; (800916c <ILI9341_Draw_Pixel+0x1a8>)
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	88ba      	ldrh	r2, [r7, #4]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	f080 80b7 	bcs.w	8009160 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008ff2:	4b5f      	ldr	r3, [pc, #380]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	4a5e      	ldr	r2, [pc, #376]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8008ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ffc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008ffe:	4b5c      	ldr	r3, [pc, #368]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	4a5b      	ldr	r2, [pc, #364]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009008:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 800900a:	202a      	movs	r0, #42	; 0x2a
 800900c:	f7ff fcda 	bl	80089c4 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009010:	4b57      	ldr	r3, [pc, #348]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	4a56      	ldr	r2, [pc, #344]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800901a:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800901c:	4b54      	ldr	r3, [pc, #336]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	4a53      	ldr	r2, [pc, #332]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009026:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009028:	4b51      	ldr	r3, [pc, #324]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	4a50      	ldr	r2, [pc, #320]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 800902e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009032:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	0a1b      	lsrs	r3, r3, #8
 8009038:	b29b      	uxth	r3, r3
 800903a:	b2db      	uxtb	r3, r3
 800903c:	753b      	strb	r3, [r7, #20]
 800903e:	88fb      	ldrh	r3, [r7, #6]
 8009040:	b2db      	uxtb	r3, r3
 8009042:	757b      	strb	r3, [r7, #21]
 8009044:	88fb      	ldrh	r3, [r7, #6]
 8009046:	3301      	adds	r3, #1
 8009048:	121b      	asrs	r3, r3, #8
 800904a:	b2db      	uxtb	r3, r3
 800904c:	75bb      	strb	r3, [r7, #22]
 800904e:	88fb      	ldrh	r3, [r7, #6]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	3301      	adds	r3, #1
 8009054:	b2db      	uxtb	r3, r3
 8009056:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8009058:	f107 0114 	add.w	r1, r7, #20
 800905c:	2301      	movs	r3, #1
 800905e:	2204      	movs	r2, #4
 8009060:	4844      	ldr	r0, [pc, #272]	; (8009174 <ILI9341_Draw_Pixel+0x1b0>)
 8009062:	f7fd fcf1 	bl	8006a48 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009066:	4b42      	ldr	r3, [pc, #264]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	4a41      	ldr	r2, [pc, #260]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 800906c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009070:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8009072:	4b3f      	ldr	r3, [pc, #252]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	4a3e      	ldr	r2, [pc, #248]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800907c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800907e:	4b3c      	ldr	r3, [pc, #240]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	4a3b      	ldr	r2, [pc, #236]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009088:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 800908a:	202b      	movs	r0, #43	; 0x2b
 800908c:	f7ff fc9a 	bl	80089c4 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009090:	4b37      	ldr	r3, [pc, #220]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	4a36      	ldr	r2, [pc, #216]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800909a:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800909c:	4b34      	ldr	r3, [pc, #208]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	4a33      	ldr	r2, [pc, #204]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 80090a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a6:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80090a8:	4b31      	ldr	r3, [pc, #196]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	4a30      	ldr	r2, [pc, #192]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 80090ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090b2:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80090b4:	88bb      	ldrh	r3, [r7, #4]
 80090b6:	0a1b      	lsrs	r3, r3, #8
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	743b      	strb	r3, [r7, #16]
 80090be:	88bb      	ldrh	r3, [r7, #4]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	747b      	strb	r3, [r7, #17]
 80090c4:	88bb      	ldrh	r3, [r7, #4]
 80090c6:	3301      	adds	r3, #1
 80090c8:	121b      	asrs	r3, r3, #8
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	74bb      	strb	r3, [r7, #18]
 80090ce:	88bb      	ldrh	r3, [r7, #4]
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	3301      	adds	r3, #1
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80090d8:	f107 0110 	add.w	r1, r7, #16
 80090dc:	2301      	movs	r3, #1
 80090de:	2204      	movs	r2, #4
 80090e0:	4824      	ldr	r0, [pc, #144]	; (8009174 <ILI9341_Draw_Pixel+0x1b0>)
 80090e2:	f7fd fcb1 	bl	8006a48 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80090e6:	4b22      	ldr	r3, [pc, #136]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	4a21      	ldr	r2, [pc, #132]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 80090ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80090f2:	4b1f      	ldr	r3, [pc, #124]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	4a1e      	ldr	r2, [pc, #120]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 80090f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090fc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80090fe:	4b1c      	ldr	r3, [pc, #112]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	4a1b      	ldr	r2, [pc, #108]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009108:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 800910a:	202c      	movs	r0, #44	; 0x2c
 800910c:	f7ff fc5a 	bl	80089c4 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009110:	4b17      	ldr	r3, [pc, #92]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	4a16      	ldr	r2, [pc, #88]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800911a:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800911c:	4b14      	ldr	r3, [pc, #80]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	4a13      	ldr	r2, [pc, #76]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009126:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009128:	4b11      	ldr	r3, [pc, #68]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	4a10      	ldr	r2, [pc, #64]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 800912e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009132:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8009134:	887b      	ldrh	r3, [r7, #2]
 8009136:	0a1b      	lsrs	r3, r3, #8
 8009138:	b29b      	uxth	r3, r3
 800913a:	b2db      	uxtb	r3, r3
 800913c:	733b      	strb	r3, [r7, #12]
 800913e:	887b      	ldrh	r3, [r7, #2]
 8009140:	b2db      	uxtb	r3, r3
 8009142:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8009144:	f107 010c 	add.w	r1, r7, #12
 8009148:	2301      	movs	r3, #1
 800914a:	2202      	movs	r2, #2
 800914c:	4809      	ldr	r0, [pc, #36]	; (8009174 <ILI9341_Draw_Pixel+0x1b0>)
 800914e:	f7fd fc7b 	bl	8006a48 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009152:	4b07      	ldr	r3, [pc, #28]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	4a06      	ldr	r2, [pc, #24]	; (8009170 <ILI9341_Draw_Pixel+0x1ac>)
 8009158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915c:	6153      	str	r3, [r2, #20]
 800915e:	e000      	b.n	8009162 <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8009160:	bf00      	nop

	
}
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	2000001e 	.word	0x2000001e
 800916c:	2000001c 	.word	0x2000001c
 8009170:	48000400 	.word	0x48000400
 8009174:	20000de8 	.word	0x20000de8

08009178 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8009178:	b590      	push	{r4, r7, lr}
 800917a:	b087      	sub	sp, #28
 800917c:	af02      	add	r7, sp, #8
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	4611      	mov	r1, r2
 8009184:	461a      	mov	r2, r3
 8009186:	4623      	mov	r3, r4
 8009188:	80fb      	strh	r3, [r7, #6]
 800918a:	4603      	mov	r3, r0
 800918c:	80bb      	strh	r3, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	807b      	strh	r3, [r7, #2]
 8009192:	4613      	mov	r3, r2
 8009194:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009196:	4b39      	ldr	r3, [pc, #228]	; (800927c <ILI9341_Draw_Rectangle+0x104>)
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	88fa      	ldrh	r2, [r7, #6]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d268      	bcs.n	8009274 <ILI9341_Draw_Rectangle+0xfc>
 80091a2:	4b37      	ldr	r3, [pc, #220]	; (8009280 <ILI9341_Draw_Rectangle+0x108>)
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	88ba      	ldrh	r2, [r7, #4]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d262      	bcs.n	8009274 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 80091ae:	88fa      	ldrh	r2, [r7, #6]
 80091b0:	887b      	ldrh	r3, [r7, #2]
 80091b2:	4413      	add	r3, r2
 80091b4:	3b01      	subs	r3, #1
 80091b6:	4a31      	ldr	r2, [pc, #196]	; (800927c <ILI9341_Draw_Rectangle+0x104>)
 80091b8:	8812      	ldrh	r2, [r2, #0]
 80091ba:	b292      	uxth	r2, r2
 80091bc:	4293      	cmp	r3, r2
 80091be:	db05      	blt.n	80091cc <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 80091c0:	4b2e      	ldr	r3, [pc, #184]	; (800927c <ILI9341_Draw_Rectangle+0x104>)
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	88fb      	ldrh	r3, [r7, #6]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 80091cc:	88ba      	ldrh	r2, [r7, #4]
 80091ce:	883b      	ldrh	r3, [r7, #0]
 80091d0:	4413      	add	r3, r2
 80091d2:	3b01      	subs	r3, #1
 80091d4:	4a2a      	ldr	r2, [pc, #168]	; (8009280 <ILI9341_Draw_Rectangle+0x108>)
 80091d6:	8812      	ldrh	r2, [r2, #0]
 80091d8:	b292      	uxth	r2, r2
 80091da:	4293      	cmp	r3, r2
 80091dc:	db05      	blt.n	80091ea <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 80091de:	4b28      	ldr	r3, [pc, #160]	; (8009280 <ILI9341_Draw_Rectangle+0x108>)
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	88bb      	ldrh	r3, [r7, #4]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 80091ea:	88fa      	ldrh	r2, [r7, #6]
 80091ec:	887b      	ldrh	r3, [r7, #2]
 80091ee:	4413      	add	r3, r2
 80091f0:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 80091f6:	88ba      	ldrh	r2, [r7, #4]
 80091f8:	883b      	ldrh	r3, [r7, #0]
 80091fa:	4413      	add	r3, r2
 80091fc:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 80091fe:	3b01      	subs	r3, #1
 8009200:	b29b      	uxth	r3, r3
 8009202:	88b9      	ldrh	r1, [r7, #4]
 8009204:	88f8      	ldrh	r0, [r7, #6]
 8009206:	4622      	mov	r2, r4
 8009208:	f7ff fc34 	bl	8008a74 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800920c:	883a      	ldrh	r2, [r7, #0]
 800920e:	887b      	ldrh	r3, [r7, #2]
 8009210:	fb12 f303 	smulbb	r3, r2, r3
 8009214:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800921a:	89fb      	ldrh	r3, [r7, #14]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d009      	beq.n	8009238 <ILI9341_Draw_Rectangle+0xc0>
 8009224:	89fb      	ldrh	r3, [r7, #14]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d906      	bls.n	8009238 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800922a:	2301      	movs	r3, #1
 800922c:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800922e:	89fb      	ldrh	r3, [r7, #14]
 8009230:	085b      	lsrs	r3, r3, #1
 8009232:	b29b      	uxth	r3, r3
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 8009238:	89fc      	ldrh	r4, [r7, #14]
 800923a:	8c3a      	ldrh	r2, [r7, #32]
 800923c:	88b9      	ldrh	r1, [r7, #4]
 800923e:	88f8      	ldrh	r0, [r7, #6]
 8009240:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	4623      	mov	r3, r4
 8009248:	f7ff fdea 	bl	8008e20 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 800924c:	7b7b      	ldrb	r3, [r7, #13]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d011      	beq.n	8009276 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8009252:	88fa      	ldrh	r2, [r7, #6]
 8009254:	887b      	ldrh	r3, [r7, #2]
 8009256:	4413      	add	r3, r2
 8009258:	b29b      	uxth	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800925e:	88ba      	ldrh	r2, [r7, #4]
 8009260:	883b      	ldrh	r3, [r7, #0]
 8009262:	4413      	add	r3, r2
 8009264:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8009266:	3b01      	subs	r3, #1
 8009268:	b29b      	uxth	r3, r3
 800926a:	8c3a      	ldrh	r2, [r7, #32]
 800926c:	4619      	mov	r1, r3
 800926e:	f7ff fea9 	bl	8008fc4 <ILI9341_Draw_Pixel>
 8009272:	e000      	b.n	8009276 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009274:	bf00      	nop
							colour);
	}
}
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}
 800927c:	2000001e 	.word	0x2000001e
 8009280:	2000001c 	.word	0x2000001c

08009284 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8009284:	b590      	push	{r4, r7, lr}
 8009286:	b085      	sub	sp, #20
 8009288:	af02      	add	r7, sp, #8
 800928a:	4604      	mov	r4, r0
 800928c:	4608      	mov	r0, r1
 800928e:	4611      	mov	r1, r2
 8009290:	461a      	mov	r2, r3
 8009292:	4623      	mov	r3, r4
 8009294:	80fb      	strh	r3, [r7, #6]
 8009296:	4603      	mov	r3, r0
 8009298:	80bb      	strh	r3, [r7, #4]
 800929a:	460b      	mov	r3, r1
 800929c:	807b      	strh	r3, [r7, #2]
 800929e:	4613      	mov	r3, r2
 80092a0:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80092a2:	4b1a      	ldr	r3, [pc, #104]	; (800930c <ILI9341_Draw_Horizontal_Line+0x88>)
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	88fa      	ldrh	r2, [r7, #6]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d229      	bcs.n	8009302 <ILI9341_Draw_Horizontal_Line+0x7e>
 80092ae:	4b18      	ldr	r3, [pc, #96]	; (8009310 <ILI9341_Draw_Horizontal_Line+0x8c>)
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	88ba      	ldrh	r2, [r7, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d223      	bcs.n	8009302 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	887b      	ldrh	r3, [r7, #2]
 80092be:	4413      	add	r3, r2
 80092c0:	3b01      	subs	r3, #1
 80092c2:	4a12      	ldr	r2, [pc, #72]	; (800930c <ILI9341_Draw_Horizontal_Line+0x88>)
 80092c4:	8812      	ldrh	r2, [r2, #0]
 80092c6:	b292      	uxth	r2, r2
 80092c8:	4293      	cmp	r3, r2
 80092ca:	db05      	blt.n	80092d8 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 80092cc:	4b0f      	ldr	r3, [pc, #60]	; (800930c <ILI9341_Draw_Horizontal_Line+0x88>)
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	88fb      	ldrh	r3, [r7, #6]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 80092d8:	88fa      	ldrh	r2, [r7, #6]
 80092da:	887b      	ldrh	r3, [r7, #2]
 80092dc:	4413      	add	r3, r2
 80092de:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	88bb      	ldrh	r3, [r7, #4]
 80092e6:	88b9      	ldrh	r1, [r7, #4]
 80092e8:	88f8      	ldrh	r0, [r7, #6]
 80092ea:	f7ff fbc3 	bl	8008a74 <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 80092ee:	887c      	ldrh	r4, [r7, #2]
 80092f0:	883a      	ldrh	r2, [r7, #0]
 80092f2:	88b9      	ldrh	r1, [r7, #4]
 80092f4:	88f8      	ldrh	r0, [r7, #6]
 80092f6:	2303      	movs	r3, #3
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	4623      	mov	r3, r4
 80092fc:	f7ff fd90 	bl	8008e20 <ILI9341_Draw_colour_Burst>
 8009300:	e000      	b.n	8009304 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009302:	bf00      	nop
}
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	bd90      	pop	{r4, r7, pc}
 800930a:	bf00      	nop
 800930c:	2000001e 	.word	0x2000001e
 8009310:	2000001c 	.word	0x2000001c

08009314 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8009314:	b590      	push	{r4, r7, lr}
 8009316:	b085      	sub	sp, #20
 8009318:	af02      	add	r7, sp, #8
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	4611      	mov	r1, r2
 8009320:	461a      	mov	r2, r3
 8009322:	4623      	mov	r3, r4
 8009324:	80fb      	strh	r3, [r7, #6]
 8009326:	4603      	mov	r3, r0
 8009328:	80bb      	strh	r3, [r7, #4]
 800932a:	460b      	mov	r3, r1
 800932c:	807b      	strh	r3, [r7, #2]
 800932e:	4613      	mov	r3, r2
 8009330:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8009332:	4b1a      	ldr	r3, [pc, #104]	; (800939c <ILI9341_Draw_Vertical_Line+0x88>)
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	b29b      	uxth	r3, r3
 8009338:	88fa      	ldrh	r2, [r7, #6]
 800933a:	429a      	cmp	r2, r3
 800933c:	d229      	bcs.n	8009392 <ILI9341_Draw_Vertical_Line+0x7e>
 800933e:	4b18      	ldr	r3, [pc, #96]	; (80093a0 <ILI9341_Draw_Vertical_Line+0x8c>)
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	88ba      	ldrh	r2, [r7, #4]
 8009346:	429a      	cmp	r2, r3
 8009348:	d223      	bcs.n	8009392 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800934a:	88ba      	ldrh	r2, [r7, #4]
 800934c:	887b      	ldrh	r3, [r7, #2]
 800934e:	4413      	add	r3, r2
 8009350:	3b01      	subs	r3, #1
 8009352:	4a13      	ldr	r2, [pc, #76]	; (80093a0 <ILI9341_Draw_Vertical_Line+0x8c>)
 8009354:	8812      	ldrh	r2, [r2, #0]
 8009356:	b292      	uxth	r2, r2
 8009358:	4293      	cmp	r3, r2
 800935a:	db05      	blt.n	8009368 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800935c:	4b10      	ldr	r3, [pc, #64]	; (80093a0 <ILI9341_Draw_Vertical_Line+0x8c>)
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29a      	uxth	r2, r3
 8009362:	88bb      	ldrh	r3, [r7, #4]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 8009368:	88ba      	ldrh	r2, [r7, #4]
 800936a:	887b      	ldrh	r3, [r7, #2]
 800936c:	4413      	add	r3, r2
 800936e:	b29b      	uxth	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	b29b      	uxth	r3, r3
 8009374:	88fa      	ldrh	r2, [r7, #6]
 8009376:	88b9      	ldrh	r1, [r7, #4]
 8009378:	88f8      	ldrh	r0, [r7, #6]
 800937a:	f7ff fb7b 	bl	8008a74 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 800937e:	887c      	ldrh	r4, [r7, #2]
 8009380:	883a      	ldrh	r2, [r7, #0]
 8009382:	88b9      	ldrh	r1, [r7, #4]
 8009384:	88f8      	ldrh	r0, [r7, #6]
 8009386:	2303      	movs	r3, #3
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	4623      	mov	r3, r4
 800938c:	f7ff fd48 	bl	8008e20 <ILI9341_Draw_colour_Burst>
 8009390:	e000      	b.n	8009394 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8009392:	bf00      	nop
}
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	bd90      	pop	{r4, r7, pc}
 800939a:	bf00      	nop
 800939c:	2000001e 	.word	0x2000001e
 80093a0:	2000001c 	.word	0x2000001c

080093a4 <__errno>:
 80093a4:	4b01      	ldr	r3, [pc, #4]	; (80093ac <__errno+0x8>)
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	20000b64 	.word	0x20000b64

080093b0 <__libc_init_array>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	4e0d      	ldr	r6, [pc, #52]	; (80093e8 <__libc_init_array+0x38>)
 80093b4:	4c0d      	ldr	r4, [pc, #52]	; (80093ec <__libc_init_array+0x3c>)
 80093b6:	1ba4      	subs	r4, r4, r6
 80093b8:	10a4      	asrs	r4, r4, #2
 80093ba:	2500      	movs	r5, #0
 80093bc:	42a5      	cmp	r5, r4
 80093be:	d109      	bne.n	80093d4 <__libc_init_array+0x24>
 80093c0:	4e0b      	ldr	r6, [pc, #44]	; (80093f0 <__libc_init_array+0x40>)
 80093c2:	4c0c      	ldr	r4, [pc, #48]	; (80093f4 <__libc_init_array+0x44>)
 80093c4:	f000 ffe8 	bl	800a398 <_init>
 80093c8:	1ba4      	subs	r4, r4, r6
 80093ca:	10a4      	asrs	r4, r4, #2
 80093cc:	2500      	movs	r5, #0
 80093ce:	42a5      	cmp	r5, r4
 80093d0:	d105      	bne.n	80093de <__libc_init_array+0x2e>
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093d8:	4798      	blx	r3
 80093da:	3501      	adds	r5, #1
 80093dc:	e7ee      	b.n	80093bc <__libc_init_array+0xc>
 80093de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093e2:	4798      	blx	r3
 80093e4:	3501      	adds	r5, #1
 80093e6:	e7f2      	b.n	80093ce <__libc_init_array+0x1e>
 80093e8:	0800a904 	.word	0x0800a904
 80093ec:	0800a904 	.word	0x0800a904
 80093f0:	0800a904 	.word	0x0800a904
 80093f4:	0800a908 	.word	0x0800a908

080093f8 <memset>:
 80093f8:	4402      	add	r2, r0
 80093fa:	4603      	mov	r3, r0
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d100      	bne.n	8009402 <memset+0xa>
 8009400:	4770      	bx	lr
 8009402:	f803 1b01 	strb.w	r1, [r3], #1
 8009406:	e7f9      	b.n	80093fc <memset+0x4>

08009408 <_puts_r>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	460e      	mov	r6, r1
 800940c:	4605      	mov	r5, r0
 800940e:	b118      	cbz	r0, 8009418 <_puts_r+0x10>
 8009410:	6983      	ldr	r3, [r0, #24]
 8009412:	b90b      	cbnz	r3, 8009418 <_puts_r+0x10>
 8009414:	f000 fa40 	bl	8009898 <__sinit>
 8009418:	69ab      	ldr	r3, [r5, #24]
 800941a:	68ac      	ldr	r4, [r5, #8]
 800941c:	b913      	cbnz	r3, 8009424 <_puts_r+0x1c>
 800941e:	4628      	mov	r0, r5
 8009420:	f000 fa3a 	bl	8009898 <__sinit>
 8009424:	4b23      	ldr	r3, [pc, #140]	; (80094b4 <_puts_r+0xac>)
 8009426:	429c      	cmp	r4, r3
 8009428:	d117      	bne.n	800945a <_puts_r+0x52>
 800942a:	686c      	ldr	r4, [r5, #4]
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	071b      	lsls	r3, r3, #28
 8009430:	d51d      	bpl.n	800946e <_puts_r+0x66>
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	b1db      	cbz	r3, 800946e <_puts_r+0x66>
 8009436:	3e01      	subs	r6, #1
 8009438:	68a3      	ldr	r3, [r4, #8]
 800943a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800943e:	3b01      	subs	r3, #1
 8009440:	60a3      	str	r3, [r4, #8]
 8009442:	b9e9      	cbnz	r1, 8009480 <_puts_r+0x78>
 8009444:	2b00      	cmp	r3, #0
 8009446:	da2e      	bge.n	80094a6 <_puts_r+0x9e>
 8009448:	4622      	mov	r2, r4
 800944a:	210a      	movs	r1, #10
 800944c:	4628      	mov	r0, r5
 800944e:	f000 f873 	bl	8009538 <__swbuf_r>
 8009452:	3001      	adds	r0, #1
 8009454:	d011      	beq.n	800947a <_puts_r+0x72>
 8009456:	200a      	movs	r0, #10
 8009458:	e011      	b.n	800947e <_puts_r+0x76>
 800945a:	4b17      	ldr	r3, [pc, #92]	; (80094b8 <_puts_r+0xb0>)
 800945c:	429c      	cmp	r4, r3
 800945e:	d101      	bne.n	8009464 <_puts_r+0x5c>
 8009460:	68ac      	ldr	r4, [r5, #8]
 8009462:	e7e3      	b.n	800942c <_puts_r+0x24>
 8009464:	4b15      	ldr	r3, [pc, #84]	; (80094bc <_puts_r+0xb4>)
 8009466:	429c      	cmp	r4, r3
 8009468:	bf08      	it	eq
 800946a:	68ec      	ldreq	r4, [r5, #12]
 800946c:	e7de      	b.n	800942c <_puts_r+0x24>
 800946e:	4621      	mov	r1, r4
 8009470:	4628      	mov	r0, r5
 8009472:	f000 f8b3 	bl	80095dc <__swsetup_r>
 8009476:	2800      	cmp	r0, #0
 8009478:	d0dd      	beq.n	8009436 <_puts_r+0x2e>
 800947a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	2b00      	cmp	r3, #0
 8009482:	da04      	bge.n	800948e <_puts_r+0x86>
 8009484:	69a2      	ldr	r2, [r4, #24]
 8009486:	429a      	cmp	r2, r3
 8009488:	dc06      	bgt.n	8009498 <_puts_r+0x90>
 800948a:	290a      	cmp	r1, #10
 800948c:	d004      	beq.n	8009498 <_puts_r+0x90>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	6022      	str	r2, [r4, #0]
 8009494:	7019      	strb	r1, [r3, #0]
 8009496:	e7cf      	b.n	8009438 <_puts_r+0x30>
 8009498:	4622      	mov	r2, r4
 800949a:	4628      	mov	r0, r5
 800949c:	f000 f84c 	bl	8009538 <__swbuf_r>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d1c9      	bne.n	8009438 <_puts_r+0x30>
 80094a4:	e7e9      	b.n	800947a <_puts_r+0x72>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	200a      	movs	r0, #10
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	6022      	str	r2, [r4, #0]
 80094ae:	7018      	strb	r0, [r3, #0]
 80094b0:	e7e5      	b.n	800947e <_puts_r+0x76>
 80094b2:	bf00      	nop
 80094b4:	0800a890 	.word	0x0800a890
 80094b8:	0800a8b0 	.word	0x0800a8b0
 80094bc:	0800a870 	.word	0x0800a870

080094c0 <puts>:
 80094c0:	4b02      	ldr	r3, [pc, #8]	; (80094cc <puts+0xc>)
 80094c2:	4601      	mov	r1, r0
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	f7ff bf9f 	b.w	8009408 <_puts_r>
 80094ca:	bf00      	nop
 80094cc:	20000b64 	.word	0x20000b64

080094d0 <sniprintf>:
 80094d0:	b40c      	push	{r2, r3}
 80094d2:	b530      	push	{r4, r5, lr}
 80094d4:	4b17      	ldr	r3, [pc, #92]	; (8009534 <sniprintf+0x64>)
 80094d6:	1e0c      	subs	r4, r1, #0
 80094d8:	b09d      	sub	sp, #116	; 0x74
 80094da:	681d      	ldr	r5, [r3, #0]
 80094dc:	da08      	bge.n	80094f0 <sniprintf+0x20>
 80094de:	238b      	movs	r3, #139	; 0x8b
 80094e0:	602b      	str	r3, [r5, #0]
 80094e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094e6:	b01d      	add	sp, #116	; 0x74
 80094e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ec:	b002      	add	sp, #8
 80094ee:	4770      	bx	lr
 80094f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80094f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094f8:	bf14      	ite	ne
 80094fa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80094fe:	4623      	moveq	r3, r4
 8009500:	9304      	str	r3, [sp, #16]
 8009502:	9307      	str	r3, [sp, #28]
 8009504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009508:	9002      	str	r0, [sp, #8]
 800950a:	9006      	str	r0, [sp, #24]
 800950c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009510:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009512:	ab21      	add	r3, sp, #132	; 0x84
 8009514:	a902      	add	r1, sp, #8
 8009516:	4628      	mov	r0, r5
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	f000 fbad 	bl	8009c78 <_svfiprintf_r>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	bfbc      	itt	lt
 8009522:	238b      	movlt	r3, #139	; 0x8b
 8009524:	602b      	strlt	r3, [r5, #0]
 8009526:	2c00      	cmp	r4, #0
 8009528:	d0dd      	beq.n	80094e6 <sniprintf+0x16>
 800952a:	9b02      	ldr	r3, [sp, #8]
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
 8009530:	e7d9      	b.n	80094e6 <sniprintf+0x16>
 8009532:	bf00      	nop
 8009534:	20000b64 	.word	0x20000b64

08009538 <__swbuf_r>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	460e      	mov	r6, r1
 800953c:	4614      	mov	r4, r2
 800953e:	4605      	mov	r5, r0
 8009540:	b118      	cbz	r0, 800954a <__swbuf_r+0x12>
 8009542:	6983      	ldr	r3, [r0, #24]
 8009544:	b90b      	cbnz	r3, 800954a <__swbuf_r+0x12>
 8009546:	f000 f9a7 	bl	8009898 <__sinit>
 800954a:	4b21      	ldr	r3, [pc, #132]	; (80095d0 <__swbuf_r+0x98>)
 800954c:	429c      	cmp	r4, r3
 800954e:	d12a      	bne.n	80095a6 <__swbuf_r+0x6e>
 8009550:	686c      	ldr	r4, [r5, #4]
 8009552:	69a3      	ldr	r3, [r4, #24]
 8009554:	60a3      	str	r3, [r4, #8]
 8009556:	89a3      	ldrh	r3, [r4, #12]
 8009558:	071a      	lsls	r2, r3, #28
 800955a:	d52e      	bpl.n	80095ba <__swbuf_r+0x82>
 800955c:	6923      	ldr	r3, [r4, #16]
 800955e:	b363      	cbz	r3, 80095ba <__swbuf_r+0x82>
 8009560:	6923      	ldr	r3, [r4, #16]
 8009562:	6820      	ldr	r0, [r4, #0]
 8009564:	1ac0      	subs	r0, r0, r3
 8009566:	6963      	ldr	r3, [r4, #20]
 8009568:	b2f6      	uxtb	r6, r6
 800956a:	4283      	cmp	r3, r0
 800956c:	4637      	mov	r7, r6
 800956e:	dc04      	bgt.n	800957a <__swbuf_r+0x42>
 8009570:	4621      	mov	r1, r4
 8009572:	4628      	mov	r0, r5
 8009574:	f000 f926 	bl	80097c4 <_fflush_r>
 8009578:	bb28      	cbnz	r0, 80095c6 <__swbuf_r+0x8e>
 800957a:	68a3      	ldr	r3, [r4, #8]
 800957c:	3b01      	subs	r3, #1
 800957e:	60a3      	str	r3, [r4, #8]
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	6022      	str	r2, [r4, #0]
 8009586:	701e      	strb	r6, [r3, #0]
 8009588:	6963      	ldr	r3, [r4, #20]
 800958a:	3001      	adds	r0, #1
 800958c:	4283      	cmp	r3, r0
 800958e:	d004      	beq.n	800959a <__swbuf_r+0x62>
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	07db      	lsls	r3, r3, #31
 8009594:	d519      	bpl.n	80095ca <__swbuf_r+0x92>
 8009596:	2e0a      	cmp	r6, #10
 8009598:	d117      	bne.n	80095ca <__swbuf_r+0x92>
 800959a:	4621      	mov	r1, r4
 800959c:	4628      	mov	r0, r5
 800959e:	f000 f911 	bl	80097c4 <_fflush_r>
 80095a2:	b190      	cbz	r0, 80095ca <__swbuf_r+0x92>
 80095a4:	e00f      	b.n	80095c6 <__swbuf_r+0x8e>
 80095a6:	4b0b      	ldr	r3, [pc, #44]	; (80095d4 <__swbuf_r+0x9c>)
 80095a8:	429c      	cmp	r4, r3
 80095aa:	d101      	bne.n	80095b0 <__swbuf_r+0x78>
 80095ac:	68ac      	ldr	r4, [r5, #8]
 80095ae:	e7d0      	b.n	8009552 <__swbuf_r+0x1a>
 80095b0:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <__swbuf_r+0xa0>)
 80095b2:	429c      	cmp	r4, r3
 80095b4:	bf08      	it	eq
 80095b6:	68ec      	ldreq	r4, [r5, #12]
 80095b8:	e7cb      	b.n	8009552 <__swbuf_r+0x1a>
 80095ba:	4621      	mov	r1, r4
 80095bc:	4628      	mov	r0, r5
 80095be:	f000 f80d 	bl	80095dc <__swsetup_r>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d0cc      	beq.n	8009560 <__swbuf_r+0x28>
 80095c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095ca:	4638      	mov	r0, r7
 80095cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ce:	bf00      	nop
 80095d0:	0800a890 	.word	0x0800a890
 80095d4:	0800a8b0 	.word	0x0800a8b0
 80095d8:	0800a870 	.word	0x0800a870

080095dc <__swsetup_r>:
 80095dc:	4b32      	ldr	r3, [pc, #200]	; (80096a8 <__swsetup_r+0xcc>)
 80095de:	b570      	push	{r4, r5, r6, lr}
 80095e0:	681d      	ldr	r5, [r3, #0]
 80095e2:	4606      	mov	r6, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	b125      	cbz	r5, 80095f2 <__swsetup_r+0x16>
 80095e8:	69ab      	ldr	r3, [r5, #24]
 80095ea:	b913      	cbnz	r3, 80095f2 <__swsetup_r+0x16>
 80095ec:	4628      	mov	r0, r5
 80095ee:	f000 f953 	bl	8009898 <__sinit>
 80095f2:	4b2e      	ldr	r3, [pc, #184]	; (80096ac <__swsetup_r+0xd0>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	d10f      	bne.n	8009618 <__swsetup_r+0x3c>
 80095f8:	686c      	ldr	r4, [r5, #4]
 80095fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095fe:	b29a      	uxth	r2, r3
 8009600:	0715      	lsls	r5, r2, #28
 8009602:	d42c      	bmi.n	800965e <__swsetup_r+0x82>
 8009604:	06d0      	lsls	r0, r2, #27
 8009606:	d411      	bmi.n	800962c <__swsetup_r+0x50>
 8009608:	2209      	movs	r2, #9
 800960a:	6032      	str	r2, [r6, #0]
 800960c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009610:	81a3      	strh	r3, [r4, #12]
 8009612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009616:	e03e      	b.n	8009696 <__swsetup_r+0xba>
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <__swsetup_r+0xd4>)
 800961a:	429c      	cmp	r4, r3
 800961c:	d101      	bne.n	8009622 <__swsetup_r+0x46>
 800961e:	68ac      	ldr	r4, [r5, #8]
 8009620:	e7eb      	b.n	80095fa <__swsetup_r+0x1e>
 8009622:	4b24      	ldr	r3, [pc, #144]	; (80096b4 <__swsetup_r+0xd8>)
 8009624:	429c      	cmp	r4, r3
 8009626:	bf08      	it	eq
 8009628:	68ec      	ldreq	r4, [r5, #12]
 800962a:	e7e6      	b.n	80095fa <__swsetup_r+0x1e>
 800962c:	0751      	lsls	r1, r2, #29
 800962e:	d512      	bpl.n	8009656 <__swsetup_r+0x7a>
 8009630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009632:	b141      	cbz	r1, 8009646 <__swsetup_r+0x6a>
 8009634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009638:	4299      	cmp	r1, r3
 800963a:	d002      	beq.n	8009642 <__swsetup_r+0x66>
 800963c:	4630      	mov	r0, r6
 800963e:	f000 fa19 	bl	8009a74 <_free_r>
 8009642:	2300      	movs	r3, #0
 8009644:	6363      	str	r3, [r4, #52]	; 0x34
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	2300      	movs	r3, #0
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f043 0308 	orr.w	r3, r3, #8
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	b94b      	cbnz	r3, 8009676 <__swsetup_r+0x9a>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800966c:	d003      	beq.n	8009676 <__swsetup_r+0x9a>
 800966e:	4621      	mov	r1, r4
 8009670:	4630      	mov	r0, r6
 8009672:	f000 f9bf 	bl	80099f4 <__smakebuf_r>
 8009676:	89a2      	ldrh	r2, [r4, #12]
 8009678:	f012 0301 	ands.w	r3, r2, #1
 800967c:	d00c      	beq.n	8009698 <__swsetup_r+0xbc>
 800967e:	2300      	movs	r3, #0
 8009680:	60a3      	str	r3, [r4, #8]
 8009682:	6963      	ldr	r3, [r4, #20]
 8009684:	425b      	negs	r3, r3
 8009686:	61a3      	str	r3, [r4, #24]
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	b953      	cbnz	r3, 80096a2 <__swsetup_r+0xc6>
 800968c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009690:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009694:	d1ba      	bne.n	800960c <__swsetup_r+0x30>
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	0792      	lsls	r2, r2, #30
 800969a:	bf58      	it	pl
 800969c:	6963      	ldrpl	r3, [r4, #20]
 800969e:	60a3      	str	r3, [r4, #8]
 80096a0:	e7f2      	b.n	8009688 <__swsetup_r+0xac>
 80096a2:	2000      	movs	r0, #0
 80096a4:	e7f7      	b.n	8009696 <__swsetup_r+0xba>
 80096a6:	bf00      	nop
 80096a8:	20000b64 	.word	0x20000b64
 80096ac:	0800a890 	.word	0x0800a890
 80096b0:	0800a8b0 	.word	0x0800a8b0
 80096b4:	0800a870 	.word	0x0800a870

080096b8 <__sflush_r>:
 80096b8:	898a      	ldrh	r2, [r1, #12]
 80096ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096be:	4605      	mov	r5, r0
 80096c0:	0710      	lsls	r0, r2, #28
 80096c2:	460c      	mov	r4, r1
 80096c4:	d458      	bmi.n	8009778 <__sflush_r+0xc0>
 80096c6:	684b      	ldr	r3, [r1, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dc05      	bgt.n	80096d8 <__sflush_r+0x20>
 80096cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	dc02      	bgt.n	80096d8 <__sflush_r+0x20>
 80096d2:	2000      	movs	r0, #0
 80096d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096da:	2e00      	cmp	r6, #0
 80096dc:	d0f9      	beq.n	80096d2 <__sflush_r+0x1a>
 80096de:	2300      	movs	r3, #0
 80096e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096e4:	682f      	ldr	r7, [r5, #0]
 80096e6:	6a21      	ldr	r1, [r4, #32]
 80096e8:	602b      	str	r3, [r5, #0]
 80096ea:	d032      	beq.n	8009752 <__sflush_r+0x9a>
 80096ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	075a      	lsls	r2, r3, #29
 80096f2:	d505      	bpl.n	8009700 <__sflush_r+0x48>
 80096f4:	6863      	ldr	r3, [r4, #4]
 80096f6:	1ac0      	subs	r0, r0, r3
 80096f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096fa:	b10b      	cbz	r3, 8009700 <__sflush_r+0x48>
 80096fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096fe:	1ac0      	subs	r0, r0, r3
 8009700:	2300      	movs	r3, #0
 8009702:	4602      	mov	r2, r0
 8009704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009706:	6a21      	ldr	r1, [r4, #32]
 8009708:	4628      	mov	r0, r5
 800970a:	47b0      	blx	r6
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	d106      	bne.n	8009720 <__sflush_r+0x68>
 8009712:	6829      	ldr	r1, [r5, #0]
 8009714:	291d      	cmp	r1, #29
 8009716:	d848      	bhi.n	80097aa <__sflush_r+0xf2>
 8009718:	4a29      	ldr	r2, [pc, #164]	; (80097c0 <__sflush_r+0x108>)
 800971a:	40ca      	lsrs	r2, r1
 800971c:	07d6      	lsls	r6, r2, #31
 800971e:	d544      	bpl.n	80097aa <__sflush_r+0xf2>
 8009720:	2200      	movs	r2, #0
 8009722:	6062      	str	r2, [r4, #4]
 8009724:	04d9      	lsls	r1, r3, #19
 8009726:	6922      	ldr	r2, [r4, #16]
 8009728:	6022      	str	r2, [r4, #0]
 800972a:	d504      	bpl.n	8009736 <__sflush_r+0x7e>
 800972c:	1c42      	adds	r2, r0, #1
 800972e:	d101      	bne.n	8009734 <__sflush_r+0x7c>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b903      	cbnz	r3, 8009736 <__sflush_r+0x7e>
 8009734:	6560      	str	r0, [r4, #84]	; 0x54
 8009736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009738:	602f      	str	r7, [r5, #0]
 800973a:	2900      	cmp	r1, #0
 800973c:	d0c9      	beq.n	80096d2 <__sflush_r+0x1a>
 800973e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009742:	4299      	cmp	r1, r3
 8009744:	d002      	beq.n	800974c <__sflush_r+0x94>
 8009746:	4628      	mov	r0, r5
 8009748:	f000 f994 	bl	8009a74 <_free_r>
 800974c:	2000      	movs	r0, #0
 800974e:	6360      	str	r0, [r4, #52]	; 0x34
 8009750:	e7c0      	b.n	80096d4 <__sflush_r+0x1c>
 8009752:	2301      	movs	r3, #1
 8009754:	4628      	mov	r0, r5
 8009756:	47b0      	blx	r6
 8009758:	1c41      	adds	r1, r0, #1
 800975a:	d1c8      	bne.n	80096ee <__sflush_r+0x36>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0c5      	beq.n	80096ee <__sflush_r+0x36>
 8009762:	2b1d      	cmp	r3, #29
 8009764:	d001      	beq.n	800976a <__sflush_r+0xb2>
 8009766:	2b16      	cmp	r3, #22
 8009768:	d101      	bne.n	800976e <__sflush_r+0xb6>
 800976a:	602f      	str	r7, [r5, #0]
 800976c:	e7b1      	b.n	80096d2 <__sflush_r+0x1a>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009774:	81a3      	strh	r3, [r4, #12]
 8009776:	e7ad      	b.n	80096d4 <__sflush_r+0x1c>
 8009778:	690f      	ldr	r7, [r1, #16]
 800977a:	2f00      	cmp	r7, #0
 800977c:	d0a9      	beq.n	80096d2 <__sflush_r+0x1a>
 800977e:	0793      	lsls	r3, r2, #30
 8009780:	680e      	ldr	r6, [r1, #0]
 8009782:	bf08      	it	eq
 8009784:	694b      	ldreq	r3, [r1, #20]
 8009786:	600f      	str	r7, [r1, #0]
 8009788:	bf18      	it	ne
 800978a:	2300      	movne	r3, #0
 800978c:	eba6 0807 	sub.w	r8, r6, r7
 8009790:	608b      	str	r3, [r1, #8]
 8009792:	f1b8 0f00 	cmp.w	r8, #0
 8009796:	dd9c      	ble.n	80096d2 <__sflush_r+0x1a>
 8009798:	4643      	mov	r3, r8
 800979a:	463a      	mov	r2, r7
 800979c:	6a21      	ldr	r1, [r4, #32]
 800979e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097a0:	4628      	mov	r0, r5
 80097a2:	47b0      	blx	r6
 80097a4:	2800      	cmp	r0, #0
 80097a6:	dc06      	bgt.n	80097b6 <__sflush_r+0xfe>
 80097a8:	89a3      	ldrh	r3, [r4, #12]
 80097aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ae:	81a3      	strh	r3, [r4, #12]
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097b4:	e78e      	b.n	80096d4 <__sflush_r+0x1c>
 80097b6:	4407      	add	r7, r0
 80097b8:	eba8 0800 	sub.w	r8, r8, r0
 80097bc:	e7e9      	b.n	8009792 <__sflush_r+0xda>
 80097be:	bf00      	nop
 80097c0:	20400001 	.word	0x20400001

080097c4 <_fflush_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	690b      	ldr	r3, [r1, #16]
 80097c8:	4605      	mov	r5, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	b1db      	cbz	r3, 8009806 <_fflush_r+0x42>
 80097ce:	b118      	cbz	r0, 80097d8 <_fflush_r+0x14>
 80097d0:	6983      	ldr	r3, [r0, #24]
 80097d2:	b90b      	cbnz	r3, 80097d8 <_fflush_r+0x14>
 80097d4:	f000 f860 	bl	8009898 <__sinit>
 80097d8:	4b0c      	ldr	r3, [pc, #48]	; (800980c <_fflush_r+0x48>)
 80097da:	429c      	cmp	r4, r3
 80097dc:	d109      	bne.n	80097f2 <_fflush_r+0x2e>
 80097de:	686c      	ldr	r4, [r5, #4]
 80097e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e4:	b17b      	cbz	r3, 8009806 <_fflush_r+0x42>
 80097e6:	4621      	mov	r1, r4
 80097e8:	4628      	mov	r0, r5
 80097ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ee:	f7ff bf63 	b.w	80096b8 <__sflush_r>
 80097f2:	4b07      	ldr	r3, [pc, #28]	; (8009810 <_fflush_r+0x4c>)
 80097f4:	429c      	cmp	r4, r3
 80097f6:	d101      	bne.n	80097fc <_fflush_r+0x38>
 80097f8:	68ac      	ldr	r4, [r5, #8]
 80097fa:	e7f1      	b.n	80097e0 <_fflush_r+0x1c>
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <_fflush_r+0x50>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	bf08      	it	eq
 8009802:	68ec      	ldreq	r4, [r5, #12]
 8009804:	e7ec      	b.n	80097e0 <_fflush_r+0x1c>
 8009806:	2000      	movs	r0, #0
 8009808:	bd38      	pop	{r3, r4, r5, pc}
 800980a:	bf00      	nop
 800980c:	0800a890 	.word	0x0800a890
 8009810:	0800a8b0 	.word	0x0800a8b0
 8009814:	0800a870 	.word	0x0800a870

08009818 <std>:
 8009818:	2300      	movs	r3, #0
 800981a:	b510      	push	{r4, lr}
 800981c:	4604      	mov	r4, r0
 800981e:	e9c0 3300 	strd	r3, r3, [r0]
 8009822:	6083      	str	r3, [r0, #8]
 8009824:	8181      	strh	r1, [r0, #12]
 8009826:	6643      	str	r3, [r0, #100]	; 0x64
 8009828:	81c2      	strh	r2, [r0, #14]
 800982a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800982e:	6183      	str	r3, [r0, #24]
 8009830:	4619      	mov	r1, r3
 8009832:	2208      	movs	r2, #8
 8009834:	305c      	adds	r0, #92	; 0x5c
 8009836:	f7ff fddf 	bl	80093f8 <memset>
 800983a:	4b05      	ldr	r3, [pc, #20]	; (8009850 <std+0x38>)
 800983c:	6263      	str	r3, [r4, #36]	; 0x24
 800983e:	4b05      	ldr	r3, [pc, #20]	; (8009854 <std+0x3c>)
 8009840:	62a3      	str	r3, [r4, #40]	; 0x28
 8009842:	4b05      	ldr	r3, [pc, #20]	; (8009858 <std+0x40>)
 8009844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <std+0x44>)
 8009848:	6224      	str	r4, [r4, #32]
 800984a:	6323      	str	r3, [r4, #48]	; 0x30
 800984c:	bd10      	pop	{r4, pc}
 800984e:	bf00      	nop
 8009850:	0800a199 	.word	0x0800a199
 8009854:	0800a1bb 	.word	0x0800a1bb
 8009858:	0800a1f3 	.word	0x0800a1f3
 800985c:	0800a217 	.word	0x0800a217

08009860 <_cleanup_r>:
 8009860:	4901      	ldr	r1, [pc, #4]	; (8009868 <_cleanup_r+0x8>)
 8009862:	f000 b885 	b.w	8009970 <_fwalk_reent>
 8009866:	bf00      	nop
 8009868:	080097c5 	.word	0x080097c5

0800986c <__sfmoreglue>:
 800986c:	b570      	push	{r4, r5, r6, lr}
 800986e:	1e4a      	subs	r2, r1, #1
 8009870:	2568      	movs	r5, #104	; 0x68
 8009872:	4355      	muls	r5, r2
 8009874:	460e      	mov	r6, r1
 8009876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800987a:	f000 f949 	bl	8009b10 <_malloc_r>
 800987e:	4604      	mov	r4, r0
 8009880:	b140      	cbz	r0, 8009894 <__sfmoreglue+0x28>
 8009882:	2100      	movs	r1, #0
 8009884:	e9c0 1600 	strd	r1, r6, [r0]
 8009888:	300c      	adds	r0, #12
 800988a:	60a0      	str	r0, [r4, #8]
 800988c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009890:	f7ff fdb2 	bl	80093f8 <memset>
 8009894:	4620      	mov	r0, r4
 8009896:	bd70      	pop	{r4, r5, r6, pc}

08009898 <__sinit>:
 8009898:	6983      	ldr	r3, [r0, #24]
 800989a:	b510      	push	{r4, lr}
 800989c:	4604      	mov	r4, r0
 800989e:	bb33      	cbnz	r3, 80098ee <__sinit+0x56>
 80098a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80098a4:	6503      	str	r3, [r0, #80]	; 0x50
 80098a6:	4b12      	ldr	r3, [pc, #72]	; (80098f0 <__sinit+0x58>)
 80098a8:	4a12      	ldr	r2, [pc, #72]	; (80098f4 <__sinit+0x5c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6282      	str	r2, [r0, #40]	; 0x28
 80098ae:	4298      	cmp	r0, r3
 80098b0:	bf04      	itt	eq
 80098b2:	2301      	moveq	r3, #1
 80098b4:	6183      	streq	r3, [r0, #24]
 80098b6:	f000 f81f 	bl	80098f8 <__sfp>
 80098ba:	6060      	str	r0, [r4, #4]
 80098bc:	4620      	mov	r0, r4
 80098be:	f000 f81b 	bl	80098f8 <__sfp>
 80098c2:	60a0      	str	r0, [r4, #8]
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 f817 	bl	80098f8 <__sfp>
 80098ca:	2200      	movs	r2, #0
 80098cc:	60e0      	str	r0, [r4, #12]
 80098ce:	2104      	movs	r1, #4
 80098d0:	6860      	ldr	r0, [r4, #4]
 80098d2:	f7ff ffa1 	bl	8009818 <std>
 80098d6:	2201      	movs	r2, #1
 80098d8:	2109      	movs	r1, #9
 80098da:	68a0      	ldr	r0, [r4, #8]
 80098dc:	f7ff ff9c 	bl	8009818 <std>
 80098e0:	2202      	movs	r2, #2
 80098e2:	2112      	movs	r1, #18
 80098e4:	68e0      	ldr	r0, [r4, #12]
 80098e6:	f7ff ff97 	bl	8009818 <std>
 80098ea:	2301      	movs	r3, #1
 80098ec:	61a3      	str	r3, [r4, #24]
 80098ee:	bd10      	pop	{r4, pc}
 80098f0:	0800a86c 	.word	0x0800a86c
 80098f4:	08009861 	.word	0x08009861

080098f8 <__sfp>:
 80098f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fa:	4b1b      	ldr	r3, [pc, #108]	; (8009968 <__sfp+0x70>)
 80098fc:	681e      	ldr	r6, [r3, #0]
 80098fe:	69b3      	ldr	r3, [r6, #24]
 8009900:	4607      	mov	r7, r0
 8009902:	b913      	cbnz	r3, 800990a <__sfp+0x12>
 8009904:	4630      	mov	r0, r6
 8009906:	f7ff ffc7 	bl	8009898 <__sinit>
 800990a:	3648      	adds	r6, #72	; 0x48
 800990c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009910:	3b01      	subs	r3, #1
 8009912:	d503      	bpl.n	800991c <__sfp+0x24>
 8009914:	6833      	ldr	r3, [r6, #0]
 8009916:	b133      	cbz	r3, 8009926 <__sfp+0x2e>
 8009918:	6836      	ldr	r6, [r6, #0]
 800991a:	e7f7      	b.n	800990c <__sfp+0x14>
 800991c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009920:	b16d      	cbz	r5, 800993e <__sfp+0x46>
 8009922:	3468      	adds	r4, #104	; 0x68
 8009924:	e7f4      	b.n	8009910 <__sfp+0x18>
 8009926:	2104      	movs	r1, #4
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff ff9f 	bl	800986c <__sfmoreglue>
 800992e:	6030      	str	r0, [r6, #0]
 8009930:	2800      	cmp	r0, #0
 8009932:	d1f1      	bne.n	8009918 <__sfp+0x20>
 8009934:	230c      	movs	r3, #12
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	4604      	mov	r4, r0
 800993a:	4620      	mov	r0, r4
 800993c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993e:	4b0b      	ldr	r3, [pc, #44]	; (800996c <__sfp+0x74>)
 8009940:	6665      	str	r5, [r4, #100]	; 0x64
 8009942:	e9c4 5500 	strd	r5, r5, [r4]
 8009946:	60a5      	str	r5, [r4, #8]
 8009948:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800994c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009950:	2208      	movs	r2, #8
 8009952:	4629      	mov	r1, r5
 8009954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009958:	f7ff fd4e 	bl	80093f8 <memset>
 800995c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009964:	e7e9      	b.n	800993a <__sfp+0x42>
 8009966:	bf00      	nop
 8009968:	0800a86c 	.word	0x0800a86c
 800996c:	ffff0001 	.word	0xffff0001

08009970 <_fwalk_reent>:
 8009970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009974:	4680      	mov	r8, r0
 8009976:	4689      	mov	r9, r1
 8009978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800997c:	2600      	movs	r6, #0
 800997e:	b914      	cbnz	r4, 8009986 <_fwalk_reent+0x16>
 8009980:	4630      	mov	r0, r6
 8009982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009986:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800998a:	3f01      	subs	r7, #1
 800998c:	d501      	bpl.n	8009992 <_fwalk_reent+0x22>
 800998e:	6824      	ldr	r4, [r4, #0]
 8009990:	e7f5      	b.n	800997e <_fwalk_reent+0xe>
 8009992:	89ab      	ldrh	r3, [r5, #12]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d907      	bls.n	80099a8 <_fwalk_reent+0x38>
 8009998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800999c:	3301      	adds	r3, #1
 800999e:	d003      	beq.n	80099a8 <_fwalk_reent+0x38>
 80099a0:	4629      	mov	r1, r5
 80099a2:	4640      	mov	r0, r8
 80099a4:	47c8      	blx	r9
 80099a6:	4306      	orrs	r6, r0
 80099a8:	3568      	adds	r5, #104	; 0x68
 80099aa:	e7ee      	b.n	800998a <_fwalk_reent+0x1a>

080099ac <__swhatbuf_r>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	460e      	mov	r6, r1
 80099b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b4:	2900      	cmp	r1, #0
 80099b6:	b096      	sub	sp, #88	; 0x58
 80099b8:	4614      	mov	r4, r2
 80099ba:	461d      	mov	r5, r3
 80099bc:	da07      	bge.n	80099ce <__swhatbuf_r+0x22>
 80099be:	2300      	movs	r3, #0
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	89b3      	ldrh	r3, [r6, #12]
 80099c4:	061a      	lsls	r2, r3, #24
 80099c6:	d410      	bmi.n	80099ea <__swhatbuf_r+0x3e>
 80099c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099cc:	e00e      	b.n	80099ec <__swhatbuf_r+0x40>
 80099ce:	466a      	mov	r2, sp
 80099d0:	f000 fc48 	bl	800a264 <_fstat_r>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	dbf2      	blt.n	80099be <__swhatbuf_r+0x12>
 80099d8:	9a01      	ldr	r2, [sp, #4]
 80099da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099e2:	425a      	negs	r2, r3
 80099e4:	415a      	adcs	r2, r3
 80099e6:	602a      	str	r2, [r5, #0]
 80099e8:	e7ee      	b.n	80099c8 <__swhatbuf_r+0x1c>
 80099ea:	2340      	movs	r3, #64	; 0x40
 80099ec:	2000      	movs	r0, #0
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	b016      	add	sp, #88	; 0x58
 80099f2:	bd70      	pop	{r4, r5, r6, pc}

080099f4 <__smakebuf_r>:
 80099f4:	898b      	ldrh	r3, [r1, #12]
 80099f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099f8:	079d      	lsls	r5, r3, #30
 80099fa:	4606      	mov	r6, r0
 80099fc:	460c      	mov	r4, r1
 80099fe:	d507      	bpl.n	8009a10 <__smakebuf_r+0x1c>
 8009a00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	6123      	str	r3, [r4, #16]
 8009a08:	2301      	movs	r3, #1
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	b002      	add	sp, #8
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	ab01      	add	r3, sp, #4
 8009a12:	466a      	mov	r2, sp
 8009a14:	f7ff ffca 	bl	80099ac <__swhatbuf_r>
 8009a18:	9900      	ldr	r1, [sp, #0]
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f000 f877 	bl	8009b10 <_malloc_r>
 8009a22:	b948      	cbnz	r0, 8009a38 <__smakebuf_r+0x44>
 8009a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a28:	059a      	lsls	r2, r3, #22
 8009a2a:	d4ef      	bmi.n	8009a0c <__smakebuf_r+0x18>
 8009a2c:	f023 0303 	bic.w	r3, r3, #3
 8009a30:	f043 0302 	orr.w	r3, r3, #2
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	e7e3      	b.n	8009a00 <__smakebuf_r+0xc>
 8009a38:	4b0d      	ldr	r3, [pc, #52]	; (8009a70 <__smakebuf_r+0x7c>)
 8009a3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	6020      	str	r0, [r4, #0]
 8009a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a44:	81a3      	strh	r3, [r4, #12]
 8009a46:	9b00      	ldr	r3, [sp, #0]
 8009a48:	6163      	str	r3, [r4, #20]
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	6120      	str	r0, [r4, #16]
 8009a4e:	b15b      	cbz	r3, 8009a68 <__smakebuf_r+0x74>
 8009a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 fc17 	bl	800a288 <_isatty_r>
 8009a5a:	b128      	cbz	r0, 8009a68 <__smakebuf_r+0x74>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	431d      	orrs	r5, r3
 8009a6c:	81a5      	strh	r5, [r4, #12]
 8009a6e:	e7cd      	b.n	8009a0c <__smakebuf_r+0x18>
 8009a70:	08009861 	.word	0x08009861

08009a74 <_free_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4605      	mov	r5, r0
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	d045      	beq.n	8009b08 <_free_r+0x94>
 8009a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a80:	1f0c      	subs	r4, r1, #4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	bfb8      	it	lt
 8009a86:	18e4      	addlt	r4, r4, r3
 8009a88:	f000 fc44 	bl	800a314 <__malloc_lock>
 8009a8c:	4a1f      	ldr	r2, [pc, #124]	; (8009b0c <_free_r+0x98>)
 8009a8e:	6813      	ldr	r3, [r2, #0]
 8009a90:	4610      	mov	r0, r2
 8009a92:	b933      	cbnz	r3, 8009aa2 <_free_r+0x2e>
 8009a94:	6063      	str	r3, [r4, #4]
 8009a96:	6014      	str	r4, [r2, #0]
 8009a98:	4628      	mov	r0, r5
 8009a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a9e:	f000 bc3a 	b.w	800a316 <__malloc_unlock>
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	d90c      	bls.n	8009ac0 <_free_r+0x4c>
 8009aa6:	6821      	ldr	r1, [r4, #0]
 8009aa8:	1862      	adds	r2, r4, r1
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	bf04      	itt	eq
 8009aae:	681a      	ldreq	r2, [r3, #0]
 8009ab0:	685b      	ldreq	r3, [r3, #4]
 8009ab2:	6063      	str	r3, [r4, #4]
 8009ab4:	bf04      	itt	eq
 8009ab6:	1852      	addeq	r2, r2, r1
 8009ab8:	6022      	streq	r2, [r4, #0]
 8009aba:	6004      	str	r4, [r0, #0]
 8009abc:	e7ec      	b.n	8009a98 <_free_r+0x24>
 8009abe:	4613      	mov	r3, r2
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	b10a      	cbz	r2, 8009ac8 <_free_r+0x54>
 8009ac4:	42a2      	cmp	r2, r4
 8009ac6:	d9fa      	bls.n	8009abe <_free_r+0x4a>
 8009ac8:	6819      	ldr	r1, [r3, #0]
 8009aca:	1858      	adds	r0, r3, r1
 8009acc:	42a0      	cmp	r0, r4
 8009ace:	d10b      	bne.n	8009ae8 <_free_r+0x74>
 8009ad0:	6820      	ldr	r0, [r4, #0]
 8009ad2:	4401      	add	r1, r0
 8009ad4:	1858      	adds	r0, r3, r1
 8009ad6:	4282      	cmp	r2, r0
 8009ad8:	6019      	str	r1, [r3, #0]
 8009ada:	d1dd      	bne.n	8009a98 <_free_r+0x24>
 8009adc:	6810      	ldr	r0, [r2, #0]
 8009ade:	6852      	ldr	r2, [r2, #4]
 8009ae0:	605a      	str	r2, [r3, #4]
 8009ae2:	4401      	add	r1, r0
 8009ae4:	6019      	str	r1, [r3, #0]
 8009ae6:	e7d7      	b.n	8009a98 <_free_r+0x24>
 8009ae8:	d902      	bls.n	8009af0 <_free_r+0x7c>
 8009aea:	230c      	movs	r3, #12
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	e7d3      	b.n	8009a98 <_free_r+0x24>
 8009af0:	6820      	ldr	r0, [r4, #0]
 8009af2:	1821      	adds	r1, r4, r0
 8009af4:	428a      	cmp	r2, r1
 8009af6:	bf04      	itt	eq
 8009af8:	6811      	ldreq	r1, [r2, #0]
 8009afa:	6852      	ldreq	r2, [r2, #4]
 8009afc:	6062      	str	r2, [r4, #4]
 8009afe:	bf04      	itt	eq
 8009b00:	1809      	addeq	r1, r1, r0
 8009b02:	6021      	streq	r1, [r4, #0]
 8009b04:	605c      	str	r4, [r3, #4]
 8009b06:	e7c7      	b.n	8009a98 <_free_r+0x24>
 8009b08:	bd38      	pop	{r3, r4, r5, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20000bfc 	.word	0x20000bfc

08009b10 <_malloc_r>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	1ccd      	adds	r5, r1, #3
 8009b14:	f025 0503 	bic.w	r5, r5, #3
 8009b18:	3508      	adds	r5, #8
 8009b1a:	2d0c      	cmp	r5, #12
 8009b1c:	bf38      	it	cc
 8009b1e:	250c      	movcc	r5, #12
 8009b20:	2d00      	cmp	r5, #0
 8009b22:	4606      	mov	r6, r0
 8009b24:	db01      	blt.n	8009b2a <_malloc_r+0x1a>
 8009b26:	42a9      	cmp	r1, r5
 8009b28:	d903      	bls.n	8009b32 <_malloc_r+0x22>
 8009b2a:	230c      	movs	r3, #12
 8009b2c:	6033      	str	r3, [r6, #0]
 8009b2e:	2000      	movs	r0, #0
 8009b30:	bd70      	pop	{r4, r5, r6, pc}
 8009b32:	f000 fbef 	bl	800a314 <__malloc_lock>
 8009b36:	4a21      	ldr	r2, [pc, #132]	; (8009bbc <_malloc_r+0xac>)
 8009b38:	6814      	ldr	r4, [r2, #0]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	b991      	cbnz	r1, 8009b64 <_malloc_r+0x54>
 8009b3e:	4c20      	ldr	r4, [pc, #128]	; (8009bc0 <_malloc_r+0xb0>)
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	b91b      	cbnz	r3, 8009b4c <_malloc_r+0x3c>
 8009b44:	4630      	mov	r0, r6
 8009b46:	f000 fb17 	bl	800a178 <_sbrk_r>
 8009b4a:	6020      	str	r0, [r4, #0]
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f000 fb12 	bl	800a178 <_sbrk_r>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d124      	bne.n	8009ba2 <_malloc_r+0x92>
 8009b58:	230c      	movs	r3, #12
 8009b5a:	6033      	str	r3, [r6, #0]
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f000 fbda 	bl	800a316 <__malloc_unlock>
 8009b62:	e7e4      	b.n	8009b2e <_malloc_r+0x1e>
 8009b64:	680b      	ldr	r3, [r1, #0]
 8009b66:	1b5b      	subs	r3, r3, r5
 8009b68:	d418      	bmi.n	8009b9c <_malloc_r+0x8c>
 8009b6a:	2b0b      	cmp	r3, #11
 8009b6c:	d90f      	bls.n	8009b8e <_malloc_r+0x7e>
 8009b6e:	600b      	str	r3, [r1, #0]
 8009b70:	50cd      	str	r5, [r1, r3]
 8009b72:	18cc      	adds	r4, r1, r3
 8009b74:	4630      	mov	r0, r6
 8009b76:	f000 fbce 	bl	800a316 <__malloc_unlock>
 8009b7a:	f104 000b 	add.w	r0, r4, #11
 8009b7e:	1d23      	adds	r3, r4, #4
 8009b80:	f020 0007 	bic.w	r0, r0, #7
 8009b84:	1ac3      	subs	r3, r0, r3
 8009b86:	d0d3      	beq.n	8009b30 <_malloc_r+0x20>
 8009b88:	425a      	negs	r2, r3
 8009b8a:	50e2      	str	r2, [r4, r3]
 8009b8c:	e7d0      	b.n	8009b30 <_malloc_r+0x20>
 8009b8e:	428c      	cmp	r4, r1
 8009b90:	684b      	ldr	r3, [r1, #4]
 8009b92:	bf16      	itet	ne
 8009b94:	6063      	strne	r3, [r4, #4]
 8009b96:	6013      	streq	r3, [r2, #0]
 8009b98:	460c      	movne	r4, r1
 8009b9a:	e7eb      	b.n	8009b74 <_malloc_r+0x64>
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	6849      	ldr	r1, [r1, #4]
 8009ba0:	e7cc      	b.n	8009b3c <_malloc_r+0x2c>
 8009ba2:	1cc4      	adds	r4, r0, #3
 8009ba4:	f024 0403 	bic.w	r4, r4, #3
 8009ba8:	42a0      	cmp	r0, r4
 8009baa:	d005      	beq.n	8009bb8 <_malloc_r+0xa8>
 8009bac:	1a21      	subs	r1, r4, r0
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f000 fae2 	bl	800a178 <_sbrk_r>
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d0cf      	beq.n	8009b58 <_malloc_r+0x48>
 8009bb8:	6025      	str	r5, [r4, #0]
 8009bba:	e7db      	b.n	8009b74 <_malloc_r+0x64>
 8009bbc:	20000bfc 	.word	0x20000bfc
 8009bc0:	20000c00 	.word	0x20000c00

08009bc4 <__ssputs_r>:
 8009bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc8:	688e      	ldr	r6, [r1, #8]
 8009bca:	429e      	cmp	r6, r3
 8009bcc:	4682      	mov	sl, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	4690      	mov	r8, r2
 8009bd2:	4699      	mov	r9, r3
 8009bd4:	d837      	bhi.n	8009c46 <__ssputs_r+0x82>
 8009bd6:	898a      	ldrh	r2, [r1, #12]
 8009bd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bdc:	d031      	beq.n	8009c42 <__ssputs_r+0x7e>
 8009bde:	6825      	ldr	r5, [r4, #0]
 8009be0:	6909      	ldr	r1, [r1, #16]
 8009be2:	1a6f      	subs	r7, r5, r1
 8009be4:	6965      	ldr	r5, [r4, #20]
 8009be6:	2302      	movs	r3, #2
 8009be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bec:	fb95 f5f3 	sdiv	r5, r5, r3
 8009bf0:	f109 0301 	add.w	r3, r9, #1
 8009bf4:	443b      	add	r3, r7
 8009bf6:	429d      	cmp	r5, r3
 8009bf8:	bf38      	it	cc
 8009bfa:	461d      	movcc	r5, r3
 8009bfc:	0553      	lsls	r3, r2, #21
 8009bfe:	d530      	bpl.n	8009c62 <__ssputs_r+0x9e>
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7ff ff85 	bl	8009b10 <_malloc_r>
 8009c06:	4606      	mov	r6, r0
 8009c08:	b950      	cbnz	r0, 8009c20 <__ssputs_r+0x5c>
 8009c0a:	230c      	movs	r3, #12
 8009c0c:	f8ca 3000 	str.w	r3, [sl]
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c16:	81a3      	strh	r3, [r4, #12]
 8009c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c20:	463a      	mov	r2, r7
 8009c22:	6921      	ldr	r1, [r4, #16]
 8009c24:	f000 fb52 	bl	800a2cc <memcpy>
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c32:	81a3      	strh	r3, [r4, #12]
 8009c34:	6126      	str	r6, [r4, #16]
 8009c36:	6165      	str	r5, [r4, #20]
 8009c38:	443e      	add	r6, r7
 8009c3a:	1bed      	subs	r5, r5, r7
 8009c3c:	6026      	str	r6, [r4, #0]
 8009c3e:	60a5      	str	r5, [r4, #8]
 8009c40:	464e      	mov	r6, r9
 8009c42:	454e      	cmp	r6, r9
 8009c44:	d900      	bls.n	8009c48 <__ssputs_r+0x84>
 8009c46:	464e      	mov	r6, r9
 8009c48:	4632      	mov	r2, r6
 8009c4a:	4641      	mov	r1, r8
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	f000 fb48 	bl	800a2e2 <memmove>
 8009c52:	68a3      	ldr	r3, [r4, #8]
 8009c54:	1b9b      	subs	r3, r3, r6
 8009c56:	60a3      	str	r3, [r4, #8]
 8009c58:	6823      	ldr	r3, [r4, #0]
 8009c5a:	441e      	add	r6, r3
 8009c5c:	6026      	str	r6, [r4, #0]
 8009c5e:	2000      	movs	r0, #0
 8009c60:	e7dc      	b.n	8009c1c <__ssputs_r+0x58>
 8009c62:	462a      	mov	r2, r5
 8009c64:	f000 fb58 	bl	800a318 <_realloc_r>
 8009c68:	4606      	mov	r6, r0
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d1e2      	bne.n	8009c34 <__ssputs_r+0x70>
 8009c6e:	6921      	ldr	r1, [r4, #16]
 8009c70:	4650      	mov	r0, sl
 8009c72:	f7ff feff 	bl	8009a74 <_free_r>
 8009c76:	e7c8      	b.n	8009c0a <__ssputs_r+0x46>

08009c78 <_svfiprintf_r>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	461d      	mov	r5, r3
 8009c7e:	898b      	ldrh	r3, [r1, #12]
 8009c80:	061f      	lsls	r7, r3, #24
 8009c82:	b09d      	sub	sp, #116	; 0x74
 8009c84:	4680      	mov	r8, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	4616      	mov	r6, r2
 8009c8a:	d50f      	bpl.n	8009cac <_svfiprintf_r+0x34>
 8009c8c:	690b      	ldr	r3, [r1, #16]
 8009c8e:	b96b      	cbnz	r3, 8009cac <_svfiprintf_r+0x34>
 8009c90:	2140      	movs	r1, #64	; 0x40
 8009c92:	f7ff ff3d 	bl	8009b10 <_malloc_r>
 8009c96:	6020      	str	r0, [r4, #0]
 8009c98:	6120      	str	r0, [r4, #16]
 8009c9a:	b928      	cbnz	r0, 8009ca8 <_svfiprintf_r+0x30>
 8009c9c:	230c      	movs	r3, #12
 8009c9e:	f8c8 3000 	str.w	r3, [r8]
 8009ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ca6:	e0c8      	b.n	8009e3a <_svfiprintf_r+0x1c2>
 8009ca8:	2340      	movs	r3, #64	; 0x40
 8009caa:	6163      	str	r3, [r4, #20]
 8009cac:	2300      	movs	r3, #0
 8009cae:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cb6:	2330      	movs	r3, #48	; 0x30
 8009cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cbc:	9503      	str	r5, [sp, #12]
 8009cbe:	f04f 0b01 	mov.w	fp, #1
 8009cc2:	4637      	mov	r7, r6
 8009cc4:	463d      	mov	r5, r7
 8009cc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009cca:	b10b      	cbz	r3, 8009cd0 <_svfiprintf_r+0x58>
 8009ccc:	2b25      	cmp	r3, #37	; 0x25
 8009cce:	d13e      	bne.n	8009d4e <_svfiprintf_r+0xd6>
 8009cd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8009cd4:	d00b      	beq.n	8009cee <_svfiprintf_r+0x76>
 8009cd6:	4653      	mov	r3, sl
 8009cd8:	4632      	mov	r2, r6
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4640      	mov	r0, r8
 8009cde:	f7ff ff71 	bl	8009bc4 <__ssputs_r>
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f000 80a4 	beq.w	8009e30 <_svfiprintf_r+0x1b8>
 8009ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cea:	4453      	add	r3, sl
 8009cec:	9309      	str	r3, [sp, #36]	; 0x24
 8009cee:	783b      	ldrb	r3, [r7, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 809d 	beq.w	8009e30 <_svfiprintf_r+0x1b8>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d00:	9304      	str	r3, [sp, #16]
 8009d02:	9307      	str	r3, [sp, #28]
 8009d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d08:	931a      	str	r3, [sp, #104]	; 0x68
 8009d0a:	462f      	mov	r7, r5
 8009d0c:	2205      	movs	r2, #5
 8009d0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d12:	4850      	ldr	r0, [pc, #320]	; (8009e54 <_svfiprintf_r+0x1dc>)
 8009d14:	f7f6 fa84 	bl	8000220 <memchr>
 8009d18:	9b04      	ldr	r3, [sp, #16]
 8009d1a:	b9d0      	cbnz	r0, 8009d52 <_svfiprintf_r+0xda>
 8009d1c:	06d9      	lsls	r1, r3, #27
 8009d1e:	bf44      	itt	mi
 8009d20:	2220      	movmi	r2, #32
 8009d22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d26:	071a      	lsls	r2, r3, #28
 8009d28:	bf44      	itt	mi
 8009d2a:	222b      	movmi	r2, #43	; 0x2b
 8009d2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d30:	782a      	ldrb	r2, [r5, #0]
 8009d32:	2a2a      	cmp	r2, #42	; 0x2a
 8009d34:	d015      	beq.n	8009d62 <_svfiprintf_r+0xea>
 8009d36:	9a07      	ldr	r2, [sp, #28]
 8009d38:	462f      	mov	r7, r5
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	250a      	movs	r5, #10
 8009d3e:	4639      	mov	r1, r7
 8009d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d44:	3b30      	subs	r3, #48	; 0x30
 8009d46:	2b09      	cmp	r3, #9
 8009d48:	d94d      	bls.n	8009de6 <_svfiprintf_r+0x16e>
 8009d4a:	b1b8      	cbz	r0, 8009d7c <_svfiprintf_r+0x104>
 8009d4c:	e00f      	b.n	8009d6e <_svfiprintf_r+0xf6>
 8009d4e:	462f      	mov	r7, r5
 8009d50:	e7b8      	b.n	8009cc4 <_svfiprintf_r+0x4c>
 8009d52:	4a40      	ldr	r2, [pc, #256]	; (8009e54 <_svfiprintf_r+0x1dc>)
 8009d54:	1a80      	subs	r0, r0, r2
 8009d56:	fa0b f000 	lsl.w	r0, fp, r0
 8009d5a:	4318      	orrs	r0, r3
 8009d5c:	9004      	str	r0, [sp, #16]
 8009d5e:	463d      	mov	r5, r7
 8009d60:	e7d3      	b.n	8009d0a <_svfiprintf_r+0x92>
 8009d62:	9a03      	ldr	r2, [sp, #12]
 8009d64:	1d11      	adds	r1, r2, #4
 8009d66:	6812      	ldr	r2, [r2, #0]
 8009d68:	9103      	str	r1, [sp, #12]
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	db01      	blt.n	8009d72 <_svfiprintf_r+0xfa>
 8009d6e:	9207      	str	r2, [sp, #28]
 8009d70:	e004      	b.n	8009d7c <_svfiprintf_r+0x104>
 8009d72:	4252      	negs	r2, r2
 8009d74:	f043 0302 	orr.w	r3, r3, #2
 8009d78:	9207      	str	r2, [sp, #28]
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	783b      	ldrb	r3, [r7, #0]
 8009d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8009d80:	d10c      	bne.n	8009d9c <_svfiprintf_r+0x124>
 8009d82:	787b      	ldrb	r3, [r7, #1]
 8009d84:	2b2a      	cmp	r3, #42	; 0x2a
 8009d86:	d133      	bne.n	8009df0 <_svfiprintf_r+0x178>
 8009d88:	9b03      	ldr	r3, [sp, #12]
 8009d8a:	1d1a      	adds	r2, r3, #4
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	9203      	str	r2, [sp, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	bfb8      	it	lt
 8009d94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d98:	3702      	adds	r7, #2
 8009d9a:	9305      	str	r3, [sp, #20]
 8009d9c:	4d2e      	ldr	r5, [pc, #184]	; (8009e58 <_svfiprintf_r+0x1e0>)
 8009d9e:	7839      	ldrb	r1, [r7, #0]
 8009da0:	2203      	movs	r2, #3
 8009da2:	4628      	mov	r0, r5
 8009da4:	f7f6 fa3c 	bl	8000220 <memchr>
 8009da8:	b138      	cbz	r0, 8009dba <_svfiprintf_r+0x142>
 8009daa:	2340      	movs	r3, #64	; 0x40
 8009dac:	1b40      	subs	r0, r0, r5
 8009dae:	fa03 f000 	lsl.w	r0, r3, r0
 8009db2:	9b04      	ldr	r3, [sp, #16]
 8009db4:	4303      	orrs	r3, r0
 8009db6:	3701      	adds	r7, #1
 8009db8:	9304      	str	r3, [sp, #16]
 8009dba:	7839      	ldrb	r1, [r7, #0]
 8009dbc:	4827      	ldr	r0, [pc, #156]	; (8009e5c <_svfiprintf_r+0x1e4>)
 8009dbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dc2:	2206      	movs	r2, #6
 8009dc4:	1c7e      	adds	r6, r7, #1
 8009dc6:	f7f6 fa2b 	bl	8000220 <memchr>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d038      	beq.n	8009e40 <_svfiprintf_r+0x1c8>
 8009dce:	4b24      	ldr	r3, [pc, #144]	; (8009e60 <_svfiprintf_r+0x1e8>)
 8009dd0:	bb13      	cbnz	r3, 8009e18 <_svfiprintf_r+0x1a0>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	3307      	adds	r3, #7
 8009dd6:	f023 0307 	bic.w	r3, r3, #7
 8009dda:	3308      	adds	r3, #8
 8009ddc:	9303      	str	r3, [sp, #12]
 8009dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de0:	444b      	add	r3, r9
 8009de2:	9309      	str	r3, [sp, #36]	; 0x24
 8009de4:	e76d      	b.n	8009cc2 <_svfiprintf_r+0x4a>
 8009de6:	fb05 3202 	mla	r2, r5, r2, r3
 8009dea:	2001      	movs	r0, #1
 8009dec:	460f      	mov	r7, r1
 8009dee:	e7a6      	b.n	8009d3e <_svfiprintf_r+0xc6>
 8009df0:	2300      	movs	r3, #0
 8009df2:	3701      	adds	r7, #1
 8009df4:	9305      	str	r3, [sp, #20]
 8009df6:	4619      	mov	r1, r3
 8009df8:	250a      	movs	r5, #10
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e00:	3a30      	subs	r2, #48	; 0x30
 8009e02:	2a09      	cmp	r2, #9
 8009e04:	d903      	bls.n	8009e0e <_svfiprintf_r+0x196>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0c8      	beq.n	8009d9c <_svfiprintf_r+0x124>
 8009e0a:	9105      	str	r1, [sp, #20]
 8009e0c:	e7c6      	b.n	8009d9c <_svfiprintf_r+0x124>
 8009e0e:	fb05 2101 	mla	r1, r5, r1, r2
 8009e12:	2301      	movs	r3, #1
 8009e14:	4607      	mov	r7, r0
 8009e16:	e7f0      	b.n	8009dfa <_svfiprintf_r+0x182>
 8009e18:	ab03      	add	r3, sp, #12
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <_svfiprintf_r+0x1ec>)
 8009e20:	a904      	add	r1, sp, #16
 8009e22:	4640      	mov	r0, r8
 8009e24:	f3af 8000 	nop.w
 8009e28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009e2c:	4681      	mov	r9, r0
 8009e2e:	d1d6      	bne.n	8009dde <_svfiprintf_r+0x166>
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	065b      	lsls	r3, r3, #25
 8009e34:	f53f af35 	bmi.w	8009ca2 <_svfiprintf_r+0x2a>
 8009e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e3a:	b01d      	add	sp, #116	; 0x74
 8009e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	4622      	mov	r2, r4
 8009e46:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <_svfiprintf_r+0x1ec>)
 8009e48:	a904      	add	r1, sp, #16
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	f000 f882 	bl	8009f54 <_printf_i>
 8009e50:	e7ea      	b.n	8009e28 <_svfiprintf_r+0x1b0>
 8009e52:	bf00      	nop
 8009e54:	0800a8d0 	.word	0x0800a8d0
 8009e58:	0800a8d6 	.word	0x0800a8d6
 8009e5c:	0800a8da 	.word	0x0800a8da
 8009e60:	00000000 	.word	0x00000000
 8009e64:	08009bc5 	.word	0x08009bc5

08009e68 <_printf_common>:
 8009e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6c:	4691      	mov	r9, r2
 8009e6e:	461f      	mov	r7, r3
 8009e70:	688a      	ldr	r2, [r1, #8]
 8009e72:	690b      	ldr	r3, [r1, #16]
 8009e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	bfb8      	it	lt
 8009e7c:	4613      	movlt	r3, r2
 8009e7e:	f8c9 3000 	str.w	r3, [r9]
 8009e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e86:	4606      	mov	r6, r0
 8009e88:	460c      	mov	r4, r1
 8009e8a:	b112      	cbz	r2, 8009e92 <_printf_common+0x2a>
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	f8c9 3000 	str.w	r3, [r9]
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	0699      	lsls	r1, r3, #26
 8009e96:	bf42      	ittt	mi
 8009e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009e9c:	3302      	addmi	r3, #2
 8009e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8009ea2:	6825      	ldr	r5, [r4, #0]
 8009ea4:	f015 0506 	ands.w	r5, r5, #6
 8009ea8:	d107      	bne.n	8009eba <_printf_common+0x52>
 8009eaa:	f104 0a19 	add.w	sl, r4, #25
 8009eae:	68e3      	ldr	r3, [r4, #12]
 8009eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8009eb4:	1a9b      	subs	r3, r3, r2
 8009eb6:	42ab      	cmp	r3, r5
 8009eb8:	dc28      	bgt.n	8009f0c <_printf_common+0xa4>
 8009eba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009ebe:	6822      	ldr	r2, [r4, #0]
 8009ec0:	3300      	adds	r3, #0
 8009ec2:	bf18      	it	ne
 8009ec4:	2301      	movne	r3, #1
 8009ec6:	0692      	lsls	r2, r2, #26
 8009ec8:	d42d      	bmi.n	8009f26 <_printf_common+0xbe>
 8009eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ece:	4639      	mov	r1, r7
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	47c0      	blx	r8
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d020      	beq.n	8009f1a <_printf_common+0xb2>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	68e5      	ldr	r5, [r4, #12]
 8009edc:	f8d9 2000 	ldr.w	r2, [r9]
 8009ee0:	f003 0306 	and.w	r3, r3, #6
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	bf08      	it	eq
 8009ee8:	1aad      	subeq	r5, r5, r2
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	6922      	ldr	r2, [r4, #16]
 8009eee:	bf0c      	ite	eq
 8009ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ef4:	2500      	movne	r5, #0
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	bfc4      	itt	gt
 8009efa:	1a9b      	subgt	r3, r3, r2
 8009efc:	18ed      	addgt	r5, r5, r3
 8009efe:	f04f 0900 	mov.w	r9, #0
 8009f02:	341a      	adds	r4, #26
 8009f04:	454d      	cmp	r5, r9
 8009f06:	d11a      	bne.n	8009f3e <_printf_common+0xd6>
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e008      	b.n	8009f1e <_printf_common+0xb6>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	4652      	mov	r2, sl
 8009f10:	4639      	mov	r1, r7
 8009f12:	4630      	mov	r0, r6
 8009f14:	47c0      	blx	r8
 8009f16:	3001      	adds	r0, #1
 8009f18:	d103      	bne.n	8009f22 <_printf_common+0xba>
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f22:	3501      	adds	r5, #1
 8009f24:	e7c3      	b.n	8009eae <_printf_common+0x46>
 8009f26:	18e1      	adds	r1, r4, r3
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	2030      	movs	r0, #48	; 0x30
 8009f2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f30:	4422      	add	r2, r4
 8009f32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	e7c5      	b.n	8009eca <_printf_common+0x62>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4622      	mov	r2, r4
 8009f42:	4639      	mov	r1, r7
 8009f44:	4630      	mov	r0, r6
 8009f46:	47c0      	blx	r8
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d0e6      	beq.n	8009f1a <_printf_common+0xb2>
 8009f4c:	f109 0901 	add.w	r9, r9, #1
 8009f50:	e7d8      	b.n	8009f04 <_printf_common+0x9c>
	...

08009f54 <_printf_i>:
 8009f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	7e09      	ldrb	r1, [r1, #24]
 8009f60:	b085      	sub	sp, #20
 8009f62:	296e      	cmp	r1, #110	; 0x6e
 8009f64:	4617      	mov	r7, r2
 8009f66:	4606      	mov	r6, r0
 8009f68:	4698      	mov	r8, r3
 8009f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f6c:	f000 80b3 	beq.w	800a0d6 <_printf_i+0x182>
 8009f70:	d822      	bhi.n	8009fb8 <_printf_i+0x64>
 8009f72:	2963      	cmp	r1, #99	; 0x63
 8009f74:	d036      	beq.n	8009fe4 <_printf_i+0x90>
 8009f76:	d80a      	bhi.n	8009f8e <_printf_i+0x3a>
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	f000 80b9 	beq.w	800a0f0 <_printf_i+0x19c>
 8009f7e:	2958      	cmp	r1, #88	; 0x58
 8009f80:	f000 8083 	beq.w	800a08a <_printf_i+0x136>
 8009f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009f8c:	e032      	b.n	8009ff4 <_printf_i+0xa0>
 8009f8e:	2964      	cmp	r1, #100	; 0x64
 8009f90:	d001      	beq.n	8009f96 <_printf_i+0x42>
 8009f92:	2969      	cmp	r1, #105	; 0x69
 8009f94:	d1f6      	bne.n	8009f84 <_printf_i+0x30>
 8009f96:	6820      	ldr	r0, [r4, #0]
 8009f98:	6813      	ldr	r3, [r2, #0]
 8009f9a:	0605      	lsls	r5, r0, #24
 8009f9c:	f103 0104 	add.w	r1, r3, #4
 8009fa0:	d52a      	bpl.n	8009ff8 <_printf_i+0xa4>
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6011      	str	r1, [r2, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	da03      	bge.n	8009fb2 <_printf_i+0x5e>
 8009faa:	222d      	movs	r2, #45	; 0x2d
 8009fac:	425b      	negs	r3, r3
 8009fae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009fb2:	486f      	ldr	r0, [pc, #444]	; (800a170 <_printf_i+0x21c>)
 8009fb4:	220a      	movs	r2, #10
 8009fb6:	e039      	b.n	800a02c <_printf_i+0xd8>
 8009fb8:	2973      	cmp	r1, #115	; 0x73
 8009fba:	f000 809d 	beq.w	800a0f8 <_printf_i+0x1a4>
 8009fbe:	d808      	bhi.n	8009fd2 <_printf_i+0x7e>
 8009fc0:	296f      	cmp	r1, #111	; 0x6f
 8009fc2:	d020      	beq.n	800a006 <_printf_i+0xb2>
 8009fc4:	2970      	cmp	r1, #112	; 0x70
 8009fc6:	d1dd      	bne.n	8009f84 <_printf_i+0x30>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	f043 0320 	orr.w	r3, r3, #32
 8009fce:	6023      	str	r3, [r4, #0]
 8009fd0:	e003      	b.n	8009fda <_printf_i+0x86>
 8009fd2:	2975      	cmp	r1, #117	; 0x75
 8009fd4:	d017      	beq.n	800a006 <_printf_i+0xb2>
 8009fd6:	2978      	cmp	r1, #120	; 0x78
 8009fd8:	d1d4      	bne.n	8009f84 <_printf_i+0x30>
 8009fda:	2378      	movs	r3, #120	; 0x78
 8009fdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fe0:	4864      	ldr	r0, [pc, #400]	; (800a174 <_printf_i+0x220>)
 8009fe2:	e055      	b.n	800a090 <_printf_i+0x13c>
 8009fe4:	6813      	ldr	r3, [r2, #0]
 8009fe6:	1d19      	adds	r1, r3, #4
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6011      	str	r1, [r2, #0]
 8009fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e08c      	b.n	800a112 <_printf_i+0x1be>
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6011      	str	r1, [r2, #0]
 8009ffc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a000:	bf18      	it	ne
 800a002:	b21b      	sxthne	r3, r3
 800a004:	e7cf      	b.n	8009fa6 <_printf_i+0x52>
 800a006:	6813      	ldr	r3, [r2, #0]
 800a008:	6825      	ldr	r5, [r4, #0]
 800a00a:	1d18      	adds	r0, r3, #4
 800a00c:	6010      	str	r0, [r2, #0]
 800a00e:	0628      	lsls	r0, r5, #24
 800a010:	d501      	bpl.n	800a016 <_printf_i+0xc2>
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	e002      	b.n	800a01c <_printf_i+0xc8>
 800a016:	0668      	lsls	r0, r5, #25
 800a018:	d5fb      	bpl.n	800a012 <_printf_i+0xbe>
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	4854      	ldr	r0, [pc, #336]	; (800a170 <_printf_i+0x21c>)
 800a01e:	296f      	cmp	r1, #111	; 0x6f
 800a020:	bf14      	ite	ne
 800a022:	220a      	movne	r2, #10
 800a024:	2208      	moveq	r2, #8
 800a026:	2100      	movs	r1, #0
 800a028:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a02c:	6865      	ldr	r5, [r4, #4]
 800a02e:	60a5      	str	r5, [r4, #8]
 800a030:	2d00      	cmp	r5, #0
 800a032:	f2c0 8095 	blt.w	800a160 <_printf_i+0x20c>
 800a036:	6821      	ldr	r1, [r4, #0]
 800a038:	f021 0104 	bic.w	r1, r1, #4
 800a03c:	6021      	str	r1, [r4, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d13d      	bne.n	800a0be <_printf_i+0x16a>
 800a042:	2d00      	cmp	r5, #0
 800a044:	f040 808e 	bne.w	800a164 <_printf_i+0x210>
 800a048:	4665      	mov	r5, ip
 800a04a:	2a08      	cmp	r2, #8
 800a04c:	d10b      	bne.n	800a066 <_printf_i+0x112>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	07db      	lsls	r3, r3, #31
 800a052:	d508      	bpl.n	800a066 <_printf_i+0x112>
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	6862      	ldr	r2, [r4, #4]
 800a058:	429a      	cmp	r2, r3
 800a05a:	bfde      	ittt	le
 800a05c:	2330      	movle	r3, #48	; 0x30
 800a05e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a062:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a066:	ebac 0305 	sub.w	r3, ip, r5
 800a06a:	6123      	str	r3, [r4, #16]
 800a06c:	f8cd 8000 	str.w	r8, [sp]
 800a070:	463b      	mov	r3, r7
 800a072:	aa03      	add	r2, sp, #12
 800a074:	4621      	mov	r1, r4
 800a076:	4630      	mov	r0, r6
 800a078:	f7ff fef6 	bl	8009e68 <_printf_common>
 800a07c:	3001      	adds	r0, #1
 800a07e:	d14d      	bne.n	800a11c <_printf_i+0x1c8>
 800a080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a084:	b005      	add	sp, #20
 800a086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a08a:	4839      	ldr	r0, [pc, #228]	; (800a170 <_printf_i+0x21c>)
 800a08c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a090:	6813      	ldr	r3, [r2, #0]
 800a092:	6821      	ldr	r1, [r4, #0]
 800a094:	1d1d      	adds	r5, r3, #4
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6015      	str	r5, [r2, #0]
 800a09a:	060a      	lsls	r2, r1, #24
 800a09c:	d50b      	bpl.n	800a0b6 <_printf_i+0x162>
 800a09e:	07ca      	lsls	r2, r1, #31
 800a0a0:	bf44      	itt	mi
 800a0a2:	f041 0120 	orrmi.w	r1, r1, #32
 800a0a6:	6021      	strmi	r1, [r4, #0]
 800a0a8:	b91b      	cbnz	r3, 800a0b2 <_printf_i+0x15e>
 800a0aa:	6822      	ldr	r2, [r4, #0]
 800a0ac:	f022 0220 	bic.w	r2, r2, #32
 800a0b0:	6022      	str	r2, [r4, #0]
 800a0b2:	2210      	movs	r2, #16
 800a0b4:	e7b7      	b.n	800a026 <_printf_i+0xd2>
 800a0b6:	064d      	lsls	r5, r1, #25
 800a0b8:	bf48      	it	mi
 800a0ba:	b29b      	uxthmi	r3, r3
 800a0bc:	e7ef      	b.n	800a09e <_printf_i+0x14a>
 800a0be:	4665      	mov	r5, ip
 800a0c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0c4:	fb02 3311 	mls	r3, r2, r1, r3
 800a0c8:	5cc3      	ldrb	r3, [r0, r3]
 800a0ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	d1f5      	bne.n	800a0c0 <_printf_i+0x16c>
 800a0d4:	e7b9      	b.n	800a04a <_printf_i+0xf6>
 800a0d6:	6813      	ldr	r3, [r2, #0]
 800a0d8:	6825      	ldr	r5, [r4, #0]
 800a0da:	6961      	ldr	r1, [r4, #20]
 800a0dc:	1d18      	adds	r0, r3, #4
 800a0de:	6010      	str	r0, [r2, #0]
 800a0e0:	0628      	lsls	r0, r5, #24
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	d501      	bpl.n	800a0ea <_printf_i+0x196>
 800a0e6:	6019      	str	r1, [r3, #0]
 800a0e8:	e002      	b.n	800a0f0 <_printf_i+0x19c>
 800a0ea:	066a      	lsls	r2, r5, #25
 800a0ec:	d5fb      	bpl.n	800a0e6 <_printf_i+0x192>
 800a0ee:	8019      	strh	r1, [r3, #0]
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	4665      	mov	r5, ip
 800a0f6:	e7b9      	b.n	800a06c <_printf_i+0x118>
 800a0f8:	6813      	ldr	r3, [r2, #0]
 800a0fa:	1d19      	adds	r1, r3, #4
 800a0fc:	6011      	str	r1, [r2, #0]
 800a0fe:	681d      	ldr	r5, [r3, #0]
 800a100:	6862      	ldr	r2, [r4, #4]
 800a102:	2100      	movs	r1, #0
 800a104:	4628      	mov	r0, r5
 800a106:	f7f6 f88b 	bl	8000220 <memchr>
 800a10a:	b108      	cbz	r0, 800a110 <_printf_i+0x1bc>
 800a10c:	1b40      	subs	r0, r0, r5
 800a10e:	6060      	str	r0, [r4, #4]
 800a110:	6863      	ldr	r3, [r4, #4]
 800a112:	6123      	str	r3, [r4, #16]
 800a114:	2300      	movs	r3, #0
 800a116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a11a:	e7a7      	b.n	800a06c <_printf_i+0x118>
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	462a      	mov	r2, r5
 800a120:	4639      	mov	r1, r7
 800a122:	4630      	mov	r0, r6
 800a124:	47c0      	blx	r8
 800a126:	3001      	adds	r0, #1
 800a128:	d0aa      	beq.n	800a080 <_printf_i+0x12c>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	079b      	lsls	r3, r3, #30
 800a12e:	d413      	bmi.n	800a158 <_printf_i+0x204>
 800a130:	68e0      	ldr	r0, [r4, #12]
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	4298      	cmp	r0, r3
 800a136:	bfb8      	it	lt
 800a138:	4618      	movlt	r0, r3
 800a13a:	e7a3      	b.n	800a084 <_printf_i+0x130>
 800a13c:	2301      	movs	r3, #1
 800a13e:	464a      	mov	r2, r9
 800a140:	4639      	mov	r1, r7
 800a142:	4630      	mov	r0, r6
 800a144:	47c0      	blx	r8
 800a146:	3001      	adds	r0, #1
 800a148:	d09a      	beq.n	800a080 <_printf_i+0x12c>
 800a14a:	3501      	adds	r5, #1
 800a14c:	68e3      	ldr	r3, [r4, #12]
 800a14e:	9a03      	ldr	r2, [sp, #12]
 800a150:	1a9b      	subs	r3, r3, r2
 800a152:	42ab      	cmp	r3, r5
 800a154:	dcf2      	bgt.n	800a13c <_printf_i+0x1e8>
 800a156:	e7eb      	b.n	800a130 <_printf_i+0x1dc>
 800a158:	2500      	movs	r5, #0
 800a15a:	f104 0919 	add.w	r9, r4, #25
 800a15e:	e7f5      	b.n	800a14c <_printf_i+0x1f8>
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1ac      	bne.n	800a0be <_printf_i+0x16a>
 800a164:	7803      	ldrb	r3, [r0, #0]
 800a166:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a16a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a16e:	e76c      	b.n	800a04a <_printf_i+0xf6>
 800a170:	0800a8e1 	.word	0x0800a8e1
 800a174:	0800a8f2 	.word	0x0800a8f2

0800a178 <_sbrk_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4c06      	ldr	r4, [pc, #24]	; (800a194 <_sbrk_r+0x1c>)
 800a17c:	2300      	movs	r3, #0
 800a17e:	4605      	mov	r5, r0
 800a180:	4608      	mov	r0, r1
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	f7f8 faa6 	bl	80026d4 <_sbrk>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_sbrk_r+0x1a>
 800a18c:	6823      	ldr	r3, [r4, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_sbrk_r+0x1a>
 800a190:	602b      	str	r3, [r5, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	20001064 	.word	0x20001064

0800a198 <__sread>:
 800a198:	b510      	push	{r4, lr}
 800a19a:	460c      	mov	r4, r1
 800a19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a0:	f000 f8e0 	bl	800a364 <_read_r>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	bfab      	itete	ge
 800a1a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a1ac:	181b      	addge	r3, r3, r0
 800a1ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1b2:	bfac      	ite	ge
 800a1b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1b6:	81a3      	strhlt	r3, [r4, #12]
 800a1b8:	bd10      	pop	{r4, pc}

0800a1ba <__swrite>:
 800a1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1be:	461f      	mov	r7, r3
 800a1c0:	898b      	ldrh	r3, [r1, #12]
 800a1c2:	05db      	lsls	r3, r3, #23
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	4616      	mov	r6, r2
 800a1ca:	d505      	bpl.n	800a1d8 <__swrite+0x1e>
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d4:	f000 f868 	bl	800a2a8 <_lseek_r>
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1e2:	81a3      	strh	r3, [r4, #12]
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	463b      	mov	r3, r7
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ee:	f000 b817 	b.w	800a220 <_write_r>

0800a1f2 <__sseek>:
 800a1f2:	b510      	push	{r4, lr}
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fa:	f000 f855 	bl	800a2a8 <_lseek_r>
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	bf15      	itete	ne
 800a204:	6560      	strne	r0, [r4, #84]	; 0x54
 800a206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a20a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a20e:	81a3      	strheq	r3, [r4, #12]
 800a210:	bf18      	it	ne
 800a212:	81a3      	strhne	r3, [r4, #12]
 800a214:	bd10      	pop	{r4, pc}

0800a216 <__sclose>:
 800a216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a21a:	f000 b813 	b.w	800a244 <_close_r>
	...

0800a220 <_write_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4c07      	ldr	r4, [pc, #28]	; (800a240 <_write_r+0x20>)
 800a224:	4605      	mov	r5, r0
 800a226:	4608      	mov	r0, r1
 800a228:	4611      	mov	r1, r2
 800a22a:	2200      	movs	r2, #0
 800a22c:	6022      	str	r2, [r4, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	f7f7 fea1 	bl	8001f76 <_write>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_write_r+0x1e>
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_write_r+0x1e>
 800a23c:	602b      	str	r3, [r5, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	20001064 	.word	0x20001064

0800a244 <_close_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	4c06      	ldr	r4, [pc, #24]	; (800a260 <_close_r+0x1c>)
 800a248:	2300      	movs	r3, #0
 800a24a:	4605      	mov	r5, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	f7f8 fa0b 	bl	800266a <_close>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d102      	bne.n	800a25e <_close_r+0x1a>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	b103      	cbz	r3, 800a25e <_close_r+0x1a>
 800a25c:	602b      	str	r3, [r5, #0]
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	20001064 	.word	0x20001064

0800a264 <_fstat_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4c07      	ldr	r4, [pc, #28]	; (800a284 <_fstat_r+0x20>)
 800a268:	2300      	movs	r3, #0
 800a26a:	4605      	mov	r5, r0
 800a26c:	4608      	mov	r0, r1
 800a26e:	4611      	mov	r1, r2
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	f7f8 fa06 	bl	8002682 <_fstat>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d102      	bne.n	800a280 <_fstat_r+0x1c>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	b103      	cbz	r3, 800a280 <_fstat_r+0x1c>
 800a27e:	602b      	str	r3, [r5, #0]
 800a280:	bd38      	pop	{r3, r4, r5, pc}
 800a282:	bf00      	nop
 800a284:	20001064 	.word	0x20001064

0800a288 <_isatty_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4c06      	ldr	r4, [pc, #24]	; (800a2a4 <_isatty_r+0x1c>)
 800a28c:	2300      	movs	r3, #0
 800a28e:	4605      	mov	r5, r0
 800a290:	4608      	mov	r0, r1
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	f7f8 fa05 	bl	80026a2 <_isatty>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_isatty_r+0x1a>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_isatty_r+0x1a>
 800a2a0:	602b      	str	r3, [r5, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	20001064 	.word	0x20001064

0800a2a8 <_lseek_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4c07      	ldr	r4, [pc, #28]	; (800a2c8 <_lseek_r+0x20>)
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	4608      	mov	r0, r1
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	6022      	str	r2, [r4, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f7f8 f9fe 	bl	80026b8 <_lseek>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_lseek_r+0x1e>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_lseek_r+0x1e>
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20001064 	.word	0x20001064

0800a2cc <memcpy>:
 800a2cc:	b510      	push	{r4, lr}
 800a2ce:	1e43      	subs	r3, r0, #1
 800a2d0:	440a      	add	r2, r1
 800a2d2:	4291      	cmp	r1, r2
 800a2d4:	d100      	bne.n	800a2d8 <memcpy+0xc>
 800a2d6:	bd10      	pop	{r4, pc}
 800a2d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2e0:	e7f7      	b.n	800a2d2 <memcpy+0x6>

0800a2e2 <memmove>:
 800a2e2:	4288      	cmp	r0, r1
 800a2e4:	b510      	push	{r4, lr}
 800a2e6:	eb01 0302 	add.w	r3, r1, r2
 800a2ea:	d807      	bhi.n	800a2fc <memmove+0x1a>
 800a2ec:	1e42      	subs	r2, r0, #1
 800a2ee:	4299      	cmp	r1, r3
 800a2f0:	d00a      	beq.n	800a308 <memmove+0x26>
 800a2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a2fa:	e7f8      	b.n	800a2ee <memmove+0xc>
 800a2fc:	4283      	cmp	r3, r0
 800a2fe:	d9f5      	bls.n	800a2ec <memmove+0xa>
 800a300:	1881      	adds	r1, r0, r2
 800a302:	1ad2      	subs	r2, r2, r3
 800a304:	42d3      	cmn	r3, r2
 800a306:	d100      	bne.n	800a30a <memmove+0x28>
 800a308:	bd10      	pop	{r4, pc}
 800a30a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a30e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a312:	e7f7      	b.n	800a304 <memmove+0x22>

0800a314 <__malloc_lock>:
 800a314:	4770      	bx	lr

0800a316 <__malloc_unlock>:
 800a316:	4770      	bx	lr

0800a318 <_realloc_r>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	4607      	mov	r7, r0
 800a31c:	4614      	mov	r4, r2
 800a31e:	460e      	mov	r6, r1
 800a320:	b921      	cbnz	r1, 800a32c <_realloc_r+0x14>
 800a322:	4611      	mov	r1, r2
 800a324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a328:	f7ff bbf2 	b.w	8009b10 <_malloc_r>
 800a32c:	b922      	cbnz	r2, 800a338 <_realloc_r+0x20>
 800a32e:	f7ff fba1 	bl	8009a74 <_free_r>
 800a332:	4625      	mov	r5, r4
 800a334:	4628      	mov	r0, r5
 800a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a338:	f000 f826 	bl	800a388 <_malloc_usable_size_r>
 800a33c:	42a0      	cmp	r0, r4
 800a33e:	d20f      	bcs.n	800a360 <_realloc_r+0x48>
 800a340:	4621      	mov	r1, r4
 800a342:	4638      	mov	r0, r7
 800a344:	f7ff fbe4 	bl	8009b10 <_malloc_r>
 800a348:	4605      	mov	r5, r0
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d0f2      	beq.n	800a334 <_realloc_r+0x1c>
 800a34e:	4631      	mov	r1, r6
 800a350:	4622      	mov	r2, r4
 800a352:	f7ff ffbb 	bl	800a2cc <memcpy>
 800a356:	4631      	mov	r1, r6
 800a358:	4638      	mov	r0, r7
 800a35a:	f7ff fb8b 	bl	8009a74 <_free_r>
 800a35e:	e7e9      	b.n	800a334 <_realloc_r+0x1c>
 800a360:	4635      	mov	r5, r6
 800a362:	e7e7      	b.n	800a334 <_realloc_r+0x1c>

0800a364 <_read_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4c07      	ldr	r4, [pc, #28]	; (800a384 <_read_r+0x20>)
 800a368:	4605      	mov	r5, r0
 800a36a:	4608      	mov	r0, r1
 800a36c:	4611      	mov	r1, r2
 800a36e:	2200      	movs	r2, #0
 800a370:	6022      	str	r2, [r4, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f7f8 f95c 	bl	8002630 <_read>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_read_r+0x1e>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_read_r+0x1e>
 800a380:	602b      	str	r3, [r5, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	20001064 	.word	0x20001064

0800a388 <_malloc_usable_size_r>:
 800a388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a38c:	1f18      	subs	r0, r3, #4
 800a38e:	2b00      	cmp	r3, #0
 800a390:	bfbc      	itt	lt
 800a392:	580b      	ldrlt	r3, [r1, r0]
 800a394:	18c0      	addlt	r0, r0, r3
 800a396:	4770      	bx	lr

0800a398 <_init>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	bf00      	nop
 800a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39e:	bc08      	pop	{r3}
 800a3a0:	469e      	mov	lr, r3
 800a3a2:	4770      	bx	lr

0800a3a4 <_fini>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr
