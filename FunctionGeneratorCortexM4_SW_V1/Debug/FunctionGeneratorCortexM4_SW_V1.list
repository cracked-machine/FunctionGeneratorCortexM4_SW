
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b84  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001478  08012d68  08012d68  00022d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141e0  080141e0  00031e08  2**0
                  CONTENTS
  4 .ARM          00000000  080141e0  080141e0  00031e08  2**0
                  CONTENTS
  5 .preinit_array 00000000  080141e0  080141e0  00031e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141e0  080141e0  000241e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141e4  080141e4  000241e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e08  20000000  080141e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  20001e08  08015ff0  00031e08  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028e0  08015ff0  000328e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045e09  00000000  00000000  00031e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a1c  00000000  00000000  00077c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002250  00000000  00000000  0007f660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001df0  00000000  00000000  000818b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035378  00000000  00000000  000836a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002eec3  00000000  00000000  000b8a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001266f6  00000000  00000000  000e78db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020dfd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009690  00000000  00000000  0020e04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e08 	.word	0x20001e08
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012d4c 	.word	0x08012d4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e0c 	.word	0x20001e0c
 800021c:	08012d4c 	.word	0x08012d4c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00d fa12 	bl	800e138 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f92e 	bl	8000f74 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08012d68 	.word	0x08012d68

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00d fa47 	bl	800e1ba <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00d fe9d 	bl	800ea6c <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d fc7f 	bl	800e638 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00d f9ee 	bl	800e138 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 f884 	bl	8007e6c <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fbc6 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00e fd81 	bl	800f870 <puts>
	#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08012d74 	.word	0x08012d74
 8000d78:	08012d84 	.word	0x08012d84

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09c      	sub	sp, #112	; 0x70
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 feab 	bl	8004adc <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4870      	ldr	r0, [pc, #448]	; (8000f50 <DM_UpdateDisplay+0x1d4>)
 8000d8e:	f00e fd6f 	bl	800f870 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 fea3 	bl	8004adc <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 fe8e 	bl	8003ac8 <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fe8a 	bl	8003ac8 <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 fe86 	bl	8003ac8 <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 fc4f 	bl	8004660 <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4861      	ldr	r0, [pc, #388]	; (8000f50 <DM_UpdateDisplay+0x1d4>)
 8000dca:	f00e fd51 	bl	800f870 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 fc47 	bl	8004660 <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f934 	bl	8003050 <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f002 f930 	bl	8003050 <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f002 f92c 	bl	8003050 <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fd51 	bl	80048a0 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4853      	ldr	r0, [pc, #332]	; (8000f54 <DM_UpdateDisplay+0x1d8>)
 8000e06:	f00e fd33 	bl	800f870 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 fd49 	bl	80048a0 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fdc4 	bl	80039ac <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 fdc0 	bl	80039ac <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 fdbc 	bl	80039ac <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 fc07 	bl	8004648 <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4845      	ldr	r0, [pc, #276]	; (8000f58 <DM_UpdateDisplay+0x1dc>)
 8000e42:	f00e fd15 	bl	800f870 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 fbff 	bl	8004648 <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb9b 	bl	80015a4 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fb97 	bl	80015a4 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fb93 	bl	80015a4 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fb8f 	bl	80015a4 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fed8 	bl	8003c3c <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4832      	ldr	r0, [pc, #200]	; (8000f5c <DM_UpdateDisplay+0x1e0>)
 8000e94:	f00e fcec 	bl	800f870 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	482b      	ldr	r0, [pc, #172]	; (8000f60 <DM_UpdateDisplay+0x1e4>)
 8000eb2:	f00d f941 	bl	800e138 <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ebe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec2:	222e      	movs	r2, #46	; 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00e f812 	bl	800eef0 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000ecc:	f004 f836 	bl	8004f3c <BO_GetOutputBias>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ed6:	4a23      	ldr	r2, [pc, #140]	; (8000f64 <DM_UpdateDisplay+0x1e8>)
 8000ed8:	2132      	movs	r1, #50	; 0x32
 8000eda:	f00e fcd1 	bl	800f880 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 220, 10, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ede:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ee2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2300      	movs	r3, #0
 8000eee:	220a      	movs	r2, #10
 8000ef0:	21dc      	movs	r1, #220	; 0xdc
 8000ef2:	f00d f921 	bl	800e138 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	222e      	movs	r2, #46	; 0x2e
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00d fff5 	bl	800eef0 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <DM_UpdateDisplay+0x1ec>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	4638      	mov	r0, r7
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <DM_UpdateDisplay+0x1f0>)
 8000f0e:	2132      	movs	r1, #50	; 0x32
 8000f10:	f00e fcb6 	bl	800f880 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f14:	4638      	mov	r0, r7
 8000f16:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2300      	movs	r3, #0
 8000f22:	2214      	movs	r2, #20
 8000f24:	21dc      	movs	r1, #220	; 0xdc
 8000f26:	f00d f907 	bl	800e138 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <DM_UpdateDisplay+0x1f4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00a      	beq.n	8000f48 <DM_UpdateDisplay+0x1cc>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f32:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	22be      	movs	r2, #190	; 0xbe
 8000f40:	210a      	movs	r1, #10
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <DM_UpdateDisplay+0x1f4>)
 8000f44:	f00d f8f8 	bl	800e138 <ILI9341_Draw_Text>

}
 8000f48:	bf00      	nop
 8000f4a:	3768      	adds	r7, #104	; 0x68
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08012d94 	.word	0x08012d94
 8000f54:	08012da8 	.word	0x08012da8
 8000f58:	08012dbc 	.word	0x08012dbc
 8000f5c:	08012dd0 	.word	0x08012dd0
 8000f60:	08012de4 	.word	0x08012de4
 8000f64:	08012e08 	.word	0x08012e08
 8000f68:	40012c00 	.word	0x40012c00
 8000f6c:	08012e18 	.word	0x08012e18
 8000f70:	20001e24 	.word	0x20001e24

08000f74 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b09f      	sub	sp, #124	; 0x7c
 8000f78:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f92:	238c      	movs	r3, #140	; 0x8c
 8000f94:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f98:	2328      	movs	r3, #40	; 0x28
 8000f9a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000fb0:	23af      	movs	r3, #175	; 0xaf
 8000fb2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000fb6:	2346      	movs	r3, #70	; 0x46
 8000fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000fce:	238a      	movs	r3, #138	; 0x8a
 8000fd0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000fda:	4bc4      	ldr	r3, [pc, #784]	; (80012ec <DM_DisplayFormattedOutput+0x378>)
 8000fdc:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000fec:	23a1      	movs	r3, #161	; 0xa1
 8000fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000ff2:	2382      	movs	r3, #130	; 0x82
 8000ff4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000ff8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001002:	b29b      	uxth	r3, r3
 8001004:	2200      	movs	r2, #0
 8001006:	9201      	str	r2, [sp, #4]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800100e:	460a      	mov	r2, r1
 8001010:	2103      	movs	r1, #3
 8001012:	48b7      	ldr	r0, [pc, #732]	; (80012f0 <DM_DisplayFormattedOutput+0x37c>)
 8001014:	f00d f890 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800101c:	b299      	uxth	r1, r3
 800101e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001022:	b29b      	uxth	r3, r3
 8001024:	2200      	movs	r2, #0
 8001026:	9201      	str	r2, [sp, #4]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800102e:	460a      	mov	r2, r1
 8001030:	2103      	movs	r1, #3
 8001032:	48b0      	ldr	r0, [pc, #704]	; (80012f4 <DM_DisplayFormattedOutput+0x380>)
 8001034:	f00d f880 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001038:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800103c:	b299      	uxth	r1, r3
 800103e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001042:	b29b      	uxth	r3, r3
 8001044:	2200      	movs	r2, #0
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800104e:	460a      	mov	r2, r1
 8001050:	2103      	movs	r1, #3
 8001052:	48a9      	ldr	r0, [pc, #676]	; (80012f8 <DM_DisplayFormattedOutput+0x384>)
 8001054:	f00d f870 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001058:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800105c:	b299      	uxth	r1, r3
 800105e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001062:	b29b      	uxth	r3, r3
 8001064:	2200      	movs	r2, #0
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800106e:	460a      	mov	r2, r1
 8001070:	2103      	movs	r1, #3
 8001072:	48a2      	ldr	r0, [pc, #648]	; (80012fc <DM_DisplayFormattedOutput+0x388>)
 8001074:	f00d f860 	bl	800e138 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001078:	f004 ff44 	bl	8005f04 <SM_GetOutputInHertz>
 800107c:	ee10 3a10 	vmov	r3, s0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a9b      	ldr	r2, [pc, #620]	; (8001300 <DM_DisplayFormattedOutput+0x38c>)
 8001094:	210f      	movs	r1, #15
 8001096:	f00e fbf3 	bl	800f880 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800109a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800109e:	b299      	uxth	r1, r3
 80010a0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80010a4:	b29c      	uxth	r4, r3
 80010a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80010b0:	2200      	movs	r2, #0
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010ba:	4622      	mov	r2, r4
 80010bc:	f00d f83c 	bl	800e138 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80010c0:	2000      	movs	r0, #0
 80010c2:	f004 fd77 	bl	8005bb4 <SM_GetOutputChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80010cc:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 80010ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01d      	beq.n	8001110 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 80010d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa5d 	bl	8000598 <__aeabi_f2d>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010e6:	e9cd 3400 	strd	r3, r4, [sp]
 80010ea:	4a86      	ldr	r2, [pc, #536]	; (8001304 <DM_DisplayFormattedOutput+0x390>)
 80010ec:	2112      	movs	r1, #18
 80010ee:	f00e fbc7 	bl	800f880 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 80010f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa4e 	bl	8000598 <__aeabi_f2d>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	f107 0014 	add.w	r0, r7, #20
 8001104:	e9cd 3400 	strd	r3, r4, [sp]
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <DM_DisplayFormattedOutput+0x394>)
 800110a:	2114      	movs	r1, #20
 800110c:	f00e fbb8 	bl	800f880 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001110:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001114:	b299      	uxth	r1, r3
 8001116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800111a:	b29c      	uxth	r4, r3
 800111c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001120:	b29b      	uxth	r3, r3
 8001122:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001126:	2200      	movs	r2, #0
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001130:	4622      	mov	r2, r4
 8001132:	f00d f801 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001136:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800113a:	b299      	uxth	r1, r3
 800113c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001140:	b29c      	uxth	r4, r3
 8001142:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001146:	b29b      	uxth	r3, r3
 8001148:	f107 0014 	add.w	r0, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	9201      	str	r2, [sp, #4]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001156:	4622      	mov	r2, r4
 8001158:	f00c ffee 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800115c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001160:	b29b      	uxth	r3, r3
 8001162:	3380      	adds	r3, #128	; 0x80
 8001164:	b299      	uxth	r1, r3
 8001166:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800116a:	b298      	uxth	r0, r3
 800116c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001170:	b29b      	uxth	r3, r3
 8001172:	2200      	movs	r2, #0
 8001174:	9201      	str	r2, [sp, #4]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800117c:	4602      	mov	r2, r0
 800117e:	4863      	ldr	r0, [pc, #396]	; (800130c <DM_DisplayFormattedOutput+0x398>)
 8001180:	f00c ffda 	bl	800e138 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001184:	f003 feda 	bl	8004f3c <BO_GetOutputBias>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <DM_DisplayFormattedOutput+0x222>
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
 8001194:	e00b      	b.n	80011ae <DM_DisplayFormattedOutput+0x23a>
 8001196:	f003 fed1 	bl	8004f3c <BO_GetOutputBias>
 800119a:	ee07 0a90 	vmov	s15, r0
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 80011ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80011b0:	f7ff f9f2 	bl	8000598 <__aeabi_f2d>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	f107 0008 	add.w	r0, r7, #8
 80011bc:	e9cd 3400 	strd	r3, r4, [sp]
 80011c0:	4a53      	ldr	r2, [pc, #332]	; (8001310 <DM_DisplayFormattedOutput+0x39c>)
 80011c2:	210c      	movs	r1, #12
 80011c4:	f00e fb5c 	bl	800f880 <sniprintf>
	if(BO_GetBiasPolarity())
 80011c8:	f003 fe58 	bl	8004e7c <BO_GetBiasPolarity>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 80011d2:	4a50      	ldr	r2, [pc, #320]	; (8001314 <DM_DisplayFormattedOutput+0x3a0>)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	4611      	mov	r1, r2
 80011da:	8019      	strh	r1, [r3, #0]
 80011dc:	3302      	adds	r3, #2
 80011de:	0c12      	lsrs	r2, r2, #16
 80011e0:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e2:	f107 0208 	add.w	r2, r7, #8
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00e fb7c 	bl	800f8e8 <strcat>
 80011f0:	4604      	mov	r4, r0
 80011f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011f6:	b299      	uxth	r1, r3
 80011f8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011fc:	b298      	uxth	r0, r3
 80011fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001202:	b29b      	uxth	r3, r3
 8001204:	2200      	movs	r2, #0
 8001206:	9201      	str	r2, [sp, #4]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800120e:	4602      	mov	r2, r0
 8001210:	4620      	mov	r0, r4
 8001212:	f00c ff91 	bl	800e138 <ILI9341_Draw_Text>
 8001216:	e021      	b.n	800125c <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 8001218:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <DM_DisplayFormattedOutput+0x3a4>)
 800121a:	463b      	mov	r3, r7
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	4611      	mov	r1, r2
 8001220:	8019      	strh	r1, [r3, #0]
 8001222:	3302      	adds	r3, #2
 8001224:	0c12      	lsrs	r2, r2, #16
 8001226:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	463b      	mov	r3, r7
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f00e fb59 	bl	800f8e8 <strcat>
 8001236:	4604      	mov	r4, r0
 8001238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800123c:	b299      	uxth	r1, r3
 800123e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001242:	b298      	uxth	r0, r3
 8001244:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001248:	b29b      	uxth	r3, r3
 800124a:	2200      	movs	r2, #0
 800124c:	9201      	str	r2, [sp, #4]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001254:	4602      	mov	r2, r0
 8001256:	4620      	mov	r0, r4
 8001258:	f00c ff6e 	bl	800e138 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800125c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001260:	b29b      	uxth	r3, r3
 8001262:	2200      	movs	r2, #0
 8001264:	9201      	str	r2, [sp, #4]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800126c:	22aa      	movs	r2, #170	; 0xaa
 800126e:	2103      	movs	r1, #3
 8001270:	482a      	ldr	r0, [pc, #168]	; (800131c <DM_DisplayFormattedOutput+0x3a8>)
 8001272:	f00c ff61 	bl	800e138 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8001276:	2000      	movs	r0, #0
 8001278:	f004 fc9c 	bl	8005bb4 <SM_GetOutputChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 8001288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800128c:	2b06      	cmp	r3, #6
 800128e:	f200 8091 	bhi.w	80013b4 <DM_DisplayFormattedOutput+0x440>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <DM_DisplayFormattedOutput+0x324>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	080012b5 	.word	0x080012b5
 800129c:	080012d1 	.word	0x080012d1
 80012a0:	08001329 	.word	0x08001329
 80012a4:	08001345 	.word	0x08001345
 80012a8:	08001361 	.word	0x08001361
 80012ac:	0800137d 	.word	0x0800137d
 80012b0:	08001399 	.word	0x08001399
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80012b4:	233c      	movs	r3, #60	; 0x3c
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <DM_DisplayFormattedOutput+0x3ac>)
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012c4:	2203      	movs	r2, #3
 80012c6:	218c      	movs	r1, #140	; 0x8c
 80012c8:	2050      	movs	r0, #80	; 0x50
 80012ca:	f00c fd91 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 80012ce:	e071      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <DM_DisplayFormattedOutput+0x3b0>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	23c8      	movs	r3, #200	; 0xc8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012e0:	2203      	movs	r2, #3
 80012e2:	21a0      	movs	r1, #160	; 0xa0
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f00c fd83 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 80012ea:	e063      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
 80012ec:	3a449ba6 	.word	0x3a449ba6
 80012f0:	08012e28 	.word	0x08012e28
 80012f4:	08012e38 	.word	0x08012e38
 80012f8:	08012e48 	.word	0x08012e48
 80012fc:	08012e58 	.word	0x08012e58
 8001300:	08012e68 	.word	0x08012e68
 8001304:	08012e78 	.word	0x08012e78
 8001308:	08012e84 	.word	0x08012e84
 800130c:	08012e90 	.word	0x08012e90
 8001310:	08012e98 	.word	0x08012e98
 8001314:	08012eb8 	.word	0x08012eb8
 8001318:	08012ebc 	.word	0x08012ebc
 800131c:	08012ea4 	.word	0x08012ea4
 8001320:	20000e24 	.word	0x20000e24
 8001324:	20000f14 	.word	0x20000f14
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001328:	233c      	movs	r3, #60	; 0x3c
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <DM_DisplayFormattedOutput+0x564>)
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	23c8      	movs	r3, #200	; 0xc8
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001338:	2203      	movs	r2, #3
 800133a:	21a0      	movs	r1, #160	; 0xa0
 800133c:	2050      	movs	r0, #80	; 0x50
 800133e:	f00c fd57 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 8001342:	e037      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001344:	233c      	movs	r3, #60	; 0x3c
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	4b64      	ldr	r3, [pc, #400]	; (80014dc <DM_DisplayFormattedOutput+0x568>)
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	23c8      	movs	r3, #200	; 0xc8
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001354:	2203      	movs	r2, #3
 8001356:	21a0      	movs	r1, #160	; 0xa0
 8001358:	2050      	movs	r0, #80	; 0x50
 800135a:	f00c fd49 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 800135e:	e029      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001360:	233c      	movs	r3, #60	; 0x3c
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	23c8      	movs	r3, #200	; 0xc8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001370:	2203      	movs	r2, #3
 8001372:	21a0      	movs	r1, #160	; 0xa0
 8001374:	2050      	movs	r0, #80	; 0x50
 8001376:	f00c fd3b 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 800137a:	e01b      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800137c:	233c      	movs	r3, #60	; 0x3c
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	23c8      	movs	r3, #200	; 0xc8
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f240 23fd 	movw	r3, #765	; 0x2fd
 800138c:	2203      	movs	r2, #3
 800138e:	21a0      	movs	r1, #160	; 0xa0
 8001390:	2050      	movs	r0, #80	; 0x50
 8001392:	f00c fd2d 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 8001396:	e00d      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001398:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800139c:	b29b      	uxth	r3, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	9201      	str	r2, [sp, #4]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80013a8:	22aa      	movs	r2, #170	; 0xaa
 80013aa:	2150      	movs	r1, #80	; 0x50
 80013ac:	484d      	ldr	r0, [pc, #308]	; (80014e4 <DM_DisplayFormattedOutput+0x570>)
 80013ae:	f00c fec3 	bl	800e138 <ILI9341_Draw_Text>
			break;
 80013b2:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80013b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2200      	movs	r2, #0
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013c4:	22aa      	movs	r2, #170	; 0xaa
 80013c6:	21b4      	movs	r1, #180	; 0xb4
 80013c8:	4847      	ldr	r0, [pc, #284]	; (80014e8 <DM_DisplayFormattedOutput+0x574>)
 80013ca:	f00c feb5 	bl	800e138 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
 80013ce:	2001      	movs	r0, #1
 80013d0:	f004 fbf0 	bl	8005bb4 <SM_GetOutputChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 80013e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d873      	bhi.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <DM_DisplayFormattedOutput+0x47c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	0800140d 	.word	0x0800140d
 80013f4:	08001429 	.word	0x08001429
 80013f8:	08001445 	.word	0x08001445
 80013fc:	08001461 	.word	0x08001461
 8001400:	0800147d 	.word	0x0800147d
 8001404:	08001499 	.word	0x08001499
 8001408:	080014b5 	.word	0x080014b5
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800140c:	233c      	movs	r3, #60	; 0x3c
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <DM_DisplayFormattedOutput+0x578>)
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800141c:	2203      	movs	r2, #3
 800141e:	218c      	movs	r1, #140	; 0x8c
 8001420:	20f5      	movs	r0, #245	; 0xf5
 8001422:	f00c fce5 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 8001426:	e053      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001428:	233c      	movs	r3, #60	; 0x3c
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <DM_DisplayFormattedOutput+0x57c>)
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	23c8      	movs	r3, #200	; 0xc8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001438:	2203      	movs	r2, #3
 800143a:	21a0      	movs	r1, #160	; 0xa0
 800143c:	20f5      	movs	r0, #245	; 0xf5
 800143e:	f00c fcd7 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 8001442:	e045      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001444:	233c      	movs	r3, #60	; 0x3c
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <DM_DisplayFormattedOutput+0x564>)
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	23c8      	movs	r3, #200	; 0xc8
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001454:	2203      	movs	r2, #3
 8001456:	21a0      	movs	r1, #160	; 0xa0
 8001458:	20f5      	movs	r0, #245	; 0xf5
 800145a:	f00c fcc9 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 800145e:	e037      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001460:	233c      	movs	r3, #60	; 0x3c
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <DM_DisplayFormattedOutput+0x568>)
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	23c8      	movs	r3, #200	; 0xc8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001470:	2203      	movs	r2, #3
 8001472:	21a0      	movs	r1, #160	; 0xa0
 8001474:	20f5      	movs	r0, #245	; 0xf5
 8001476:	f00c fcbb 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 800147a:	e029      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800147c:	233c      	movs	r3, #60	; 0x3c
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	23c8      	movs	r3, #200	; 0xc8
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800148c:	2203      	movs	r2, #3
 800148e:	21a0      	movs	r1, #160	; 0xa0
 8001490:	20f5      	movs	r0, #245	; 0xf5
 8001492:	f00c fcad 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 8001496:	e01b      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001498:	233c      	movs	r3, #60	; 0x3c
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	23c8      	movs	r3, #200	; 0xc8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014a8:	2203      	movs	r2, #3
 80014aa:	21a0      	movs	r1, #160	; 0xa0
 80014ac:	20f5      	movs	r0, #245	; 0xf5
 80014ae:	f00c fc9f 	bl	800ddf0 <ILI9341_Draw_Wave>
			break;
 80014b2:	e00d      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 80014b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	9201      	str	r2, [sp, #4]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014c4:	22aa      	movs	r2, #170	; 0xaa
 80014c6:	21f5      	movs	r1, #245	; 0xf5
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <DM_DisplayFormattedOutput+0x570>)
 80014ca:	f00c fe35 	bl	800e138 <ILI9341_Draw_Text>
			break;
 80014ce:	bf00      	nop
	}



}
 80014d0:	bf00      	nop
 80014d2:	376c      	adds	r7, #108	; 0x6c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	20000c44 	.word	0x20000c44
 80014dc:	20000d34 	.word	0x20000d34
 80014e0:	20001004 	.word	0x20001004
 80014e4:	08012eac 	.word	0x08012eac
 80014e8:	08012eb0 	.word	0x08012eb0
 80014ec:	20000e24 	.word	0x20000e24
 80014f0:	20000f14 	.word	0x20000f14

080014f4 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014fa:	4820      	ldr	r0, [pc, #128]	; (800157c <DM_RefreshScreen+0x88>)
 80014fc:	f00a fc04 	bl	800bd08 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001500:	2000      	movs	r0, #0
 8001502:	f00d f899 	bl	800e638 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001506:	2300      	movs	r3, #0
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2302      	movs	r3, #2
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2328      	movs	r3, #40	; 0x28
 8001516:	2250      	movs	r2, #80	; 0x50
 8001518:	21c8      	movs	r1, #200	; 0xc8
 800151a:	2000      	movs	r0, #0
 800151c:	f00c fca9 	bl	800de72 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001520:	2300      	movs	r3, #0
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2302      	movs	r3, #2
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2328      	movs	r3, #40	; 0x28
 8001530:	2250      	movs	r2, #80	; 0x50
 8001532:	21c8      	movs	r1, #200	; 0xc8
 8001534:	2050      	movs	r0, #80	; 0x50
 8001536:	f00c fc9c 	bl	800de72 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 800153a:	2300      	movs	r3, #0
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2302      	movs	r3, #2
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2328      	movs	r3, #40	; 0x28
 800154a:	2250      	movs	r2, #80	; 0x50
 800154c:	21c8      	movs	r1, #200	; 0xc8
 800154e:	20a0      	movs	r0, #160	; 0xa0
 8001550:	f00c fc8f 	bl	800de72 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001554:	2300      	movs	r3, #0
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2302      	movs	r3, #2
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2328      	movs	r3, #40	; 0x28
 8001564:	2250      	movs	r2, #80	; 0x50
 8001566:	21c8      	movs	r1, #200	; 0xc8
 8001568:	20f0      	movs	r0, #240	; 0xf0
 800156a:	f00c fc82 	bl	800de72 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <DM_RefreshScreen+0x88>)
 8001570:	f00a fb94 	bl	800bc9c <HAL_TIM_Base_Start_IT>


}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000275c 	.word	0x2000275c

08001580 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <DM_SetErrorDebugMsg+0x1c>)
 800158c:	212d      	movs	r1, #45	; 0x2d
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <DM_SetErrorDebugMsg+0x20>)
 8001590:	f00e f976 	bl	800f880 <sniprintf>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	08012f3c 	.word	0x08012f3c
 80015a0:	20001e24 	.word	0x20001e24

080015a4 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d816      	bhi.n	80015e4 <FreqMenu_DrawMenu+0x40>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <FreqMenu_DrawMenu+0x18>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	080015d3 	.word	0x080015d3
 80015c4:	080015d9 	.word	0x080015d9
 80015c8:	080015df 	.word	0x080015df
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 80015cc:	f000 f810 	bl	80015f0 <FreqMenu_DrawMainMenu>
			break;
 80015d0:	e009      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80015d2:	f000 f849 	bl	8001668 <FreqMenu_DrawPresetMenu>
			break;
 80015d6:	e006      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80015d8:	f001 faf4 	bl	8002bc4 <FreqMenu_DrawAdjustMenu>
			break;
 80015dc:	e003      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80015de:	f001 fb07 	bl	8002bf0 <FreqMenu_DrawSweepMenu>
			break;
 80015e2:	e000      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80015e4:	bf00      	nop

	}
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop

080015f0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	220a      	movs	r2, #10
 8001604:	2105      	movs	r1, #5
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <FreqMenu_DrawMainMenu+0x68>)
 8001608:	f00c fd96 	bl	800e138 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 800160c:	f7ff fcb2 	bl	8000f74 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001610:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	2302      	movs	r3, #2
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	22d2      	movs	r2, #210	; 0xd2
 800161e:	2105      	movs	r1, #5
 8001620:	480e      	ldr	r0, [pc, #56]	; (800165c <FreqMenu_DrawMainMenu+0x6c>)
 8001622:	f00c fd89 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8001626:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2302      	movs	r3, #2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	22d2      	movs	r2, #210	; 0xd2
 8001634:	2157      	movs	r1, #87	; 0x57
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <FreqMenu_DrawMainMenu+0x70>)
 8001638:	f00c fd7e 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800163c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	2302      	movs	r3, #2
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	22d2      	movs	r2, #210	; 0xd2
 800164a:	21ae      	movs	r1, #174	; 0xae
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <FreqMenu_DrawMainMenu+0x74>)
 800164e:	f00c fd73 	bl	800e138 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	08012f40 	.word	0x08012f40
 800165c:	08012f4c 	.word	0x08012f4c
 8001660:	08012f54 	.word	0x08012f54
 8001664:	08012f5c 	.word	0x08012f5c

08001668 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2302      	movs	r3, #2
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	220a      	movs	r2, #10
 800167c:	2105      	movs	r1, #5
 800167e:	4886      	ldr	r0, [pc, #536]	; (8001898 <FreqMenu_DrawPresetMenu+0x230>)
 8001680:	f00c fd5a 	bl	800e138 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001684:	2328      	movs	r3, #40	; 0x28
 8001686:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001688:	233c      	movs	r3, #60	; 0x3c
 800168a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800168c:	2350      	movs	r3, #80	; 0x50
 800168e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001694:	2378      	movs	r3, #120	; 0x78
 8001696:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001698:	238c      	movs	r3, #140	; 0x8c
 800169a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80016a0:	f003 fd86 	bl	80051b0 <FreqO_GetFPresetObject>
 80016a4:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f001 825d 	beq.w	8002b68 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f000 849a 	beq.w	8001ff0 <FreqMenu_DrawPresetMenu+0x988>
 80016bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d817      	bhi.n	80016f4 <FreqMenu_DrawPresetMenu+0x8c>
 80016c4:	2b32      	cmp	r3, #50	; 0x32
 80016c6:	f000 81b3 	beq.w	8001a30 <FreqMenu_DrawPresetMenu+0x3c8>
 80016ca:	2b32      	cmp	r3, #50	; 0x32
 80016cc:	d806      	bhi.n	80016dc <FreqMenu_DrawPresetMenu+0x74>
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d038      	beq.n	8001744 <FreqMenu_DrawPresetMenu+0xdc>
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	f000 8102 	beq.w	80018dc <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 80016d8:	f001 ba52 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016dc:	2bfa      	cmp	r3, #250	; 0xfa
 80016de:	f000 8317 	beq.w	8001d10 <FreqMenu_DrawPresetMenu+0x6a8>
 80016e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016e6:	f000 83d9 	beq.w	8001e9c <FreqMenu_DrawPresetMenu+0x834>
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	f000 8266 	beq.w	8001bbc <FreqMenu_DrawPresetMenu+0x554>
}
 80016f0:	f001 ba46 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016f4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016f8:	4293      	cmp	r3, r2
 80016fa:	f000 8758 	beq.w	80025ae <FreqMenu_DrawPresetMenu+0xf46>
 80016fe:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001702:	4293      	cmp	r3, r2
 8001704:	d80f      	bhi.n	8001726 <FreqMenu_DrawPresetMenu+0xbe>
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	f000 85e0 	beq.w	80022d0 <FreqMenu_DrawPresetMenu+0xc68>
 8001710:	f242 7210 	movw	r2, #10000	; 0x2710
 8001714:	4293      	cmp	r3, r2
 8001716:	f000 86a1 	beq.w	800245c <FreqMenu_DrawPresetMenu+0xdf4>
 800171a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800171e:	f000 852d 	beq.w	800217c <FreqMenu_DrawPresetMenu+0xb14>
}
 8001722:	f001 ba2d 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001726:	4a5d      	ldr	r2, [pc, #372]	; (800189c <FreqMenu_DrawPresetMenu+0x234>)
 8001728:	4293      	cmp	r3, r2
 800172a:	f001 80ae 	beq.w	800288a <FreqMenu_DrawPresetMenu+0x1222>
 800172e:	4a5c      	ldr	r2, [pc, #368]	; (80018a0 <FreqMenu_DrawPresetMenu+0x238>)
 8001730:	4293      	cmp	r3, r2
 8001732:	f001 816f 	beq.w	8002a14 <FreqMenu_DrawPresetMenu+0x13ac>
 8001736:	f24c 3250 	movw	r2, #50000	; 0xc350
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 87fc 	beq.w	8002738 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001740:	f001 ba1e 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	b29a      	uxth	r2, r3
 8001748:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2302      	movs	r3, #2
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	2105      	movs	r1, #5
 8001756:	4853      	ldr	r0, [pc, #332]	; (80018a4 <FreqMenu_DrawPresetMenu+0x23c>)
 8001758:	f00c fcee 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800175c:	7bbb      	ldrb	r3, [r7, #14]
 800175e:	b29a      	uxth	r2, r3
 8001760:	2300      	movs	r3, #0
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	2302      	movs	r3, #2
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800176c:	2105      	movs	r1, #5
 800176e:	484e      	ldr	r0, [pc, #312]	; (80018a8 <FreqMenu_DrawPresetMenu+0x240>)
 8001770:	f00c fce2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001774:	7b7b      	ldrb	r3, [r7, #13]
 8001776:	b29a      	uxth	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	2302      	movs	r3, #2
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001784:	2105      	movs	r1, #5
 8001786:	4849      	ldr	r0, [pc, #292]	; (80018ac <FreqMenu_DrawPresetMenu+0x244>)
 8001788:	f00c fcd6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800178c:	7b3b      	ldrb	r3, [r7, #12]
 800178e:	b29a      	uxth	r2, r3
 8001790:	2300      	movs	r3, #0
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	2302      	movs	r3, #2
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800179c:	2105      	movs	r1, #5
 800179e:	4844      	ldr	r0, [pc, #272]	; (80018b0 <FreqMenu_DrawPresetMenu+0x248>)
 80017a0:	f00c fcca 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a4:	7afb      	ldrb	r3, [r7, #11]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2302      	movs	r3, #2
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b4:	2105      	movs	r1, #5
 80017b6:	483f      	ldr	r0, [pc, #252]	; (80018b4 <FreqMenu_DrawPresetMenu+0x24c>)
 80017b8:	f00c fcbe 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017bc:	7abb      	ldrb	r3, [r7, #10]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017cc:	2105      	movs	r1, #5
 80017ce:	483a      	ldr	r0, [pc, #232]	; (80018b8 <FreqMenu_DrawPresetMenu+0x250>)
 80017d0:	f00c fcb2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d4:	7a7b      	ldrb	r3, [r7, #9]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2302      	movs	r3, #2
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e4:	2105      	movs	r1, #5
 80017e6:	4835      	ldr	r0, [pc, #212]	; (80018bc <FreqMenu_DrawPresetMenu+0x254>)
 80017e8:	f00c fca6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	2302      	movs	r3, #2
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017fc:	2178      	movs	r1, #120	; 0x78
 80017fe:	4830      	ldr	r0, [pc, #192]	; (80018c0 <FreqMenu_DrawPresetMenu+0x258>)
 8001800:	f00c fc9a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001804:	7bbb      	ldrb	r3, [r7, #14]
 8001806:	b29a      	uxth	r2, r3
 8001808:	2300      	movs	r3, #0
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	2302      	movs	r3, #2
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001814:	2178      	movs	r1, #120	; 0x78
 8001816:	482b      	ldr	r0, [pc, #172]	; (80018c4 <FreqMenu_DrawPresetMenu+0x25c>)
 8001818:	f00c fc8e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800181c:	7b7b      	ldrb	r3, [r7, #13]
 800181e:	b29a      	uxth	r2, r3
 8001820:	2300      	movs	r3, #0
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	2302      	movs	r3, #2
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800182c:	2178      	movs	r1, #120	; 0x78
 800182e:	4826      	ldr	r0, [pc, #152]	; (80018c8 <FreqMenu_DrawPresetMenu+0x260>)
 8001830:	f00c fc82 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001834:	7b3b      	ldrb	r3, [r7, #12]
 8001836:	b29a      	uxth	r2, r3
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2302      	movs	r3, #2
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001844:	2178      	movs	r1, #120	; 0x78
 8001846:	4821      	ldr	r0, [pc, #132]	; (80018cc <FreqMenu_DrawPresetMenu+0x264>)
 8001848:	f00c fc76 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	b29a      	uxth	r2, r3
 8001850:	2300      	movs	r3, #0
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	2302      	movs	r3, #2
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800185c:	2178      	movs	r1, #120	; 0x78
 800185e:	481c      	ldr	r0, [pc, #112]	; (80018d0 <FreqMenu_DrawPresetMenu+0x268>)
 8001860:	f00c fc6a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001864:	7abb      	ldrb	r3, [r7, #10]
 8001866:	b29a      	uxth	r2, r3
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	2302      	movs	r3, #2
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001874:	2178      	movs	r1, #120	; 0x78
 8001876:	4817      	ldr	r0, [pc, #92]	; (80018d4 <FreqMenu_DrawPresetMenu+0x26c>)
 8001878:	f00c fc5e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800187c:	7a7b      	ldrb	r3, [r7, #9]
 800187e:	b29a      	uxth	r2, r3
 8001880:	2300      	movs	r3, #0
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	2302      	movs	r3, #2
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800188c:	2178      	movs	r1, #120	; 0x78
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <FreqMenu_DrawPresetMenu+0x270>)
 8001890:	f00c fc52 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8001894:	f001 b974 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8001898:	08012f64 	.word	0x08012f64
 800189c:	000124f8 	.word	0x000124f8
 80018a0:	000186a0 	.word	0x000186a0
 80018a4:	08012f78 	.word	0x08012f78
 80018a8:	08012f80 	.word	0x08012f80
 80018ac:	08012f88 	.word	0x08012f88
 80018b0:	08012f90 	.word	0x08012f90
 80018b4:	08012f98 	.word	0x08012f98
 80018b8:	08012fa0 	.word	0x08012fa0
 80018bc:	08012fa8 	.word	0x08012fa8
 80018c0:	08012fb0 	.word	0x08012fb0
 80018c4:	08012fb8 	.word	0x08012fb8
 80018c8:	08012fc0 	.word	0x08012fc0
 80018cc:	08012fc8 	.word	0x08012fc8
 80018d0:	08012fd0 	.word	0x08012fd0
 80018d4:	08012fd8 	.word	0x08012fd8
 80018d8:	08012fe0 	.word	0x08012fe0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2302      	movs	r3, #2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018ec:	2105      	movs	r1, #5
 80018ee:	48a5      	ldr	r0, [pc, #660]	; (8001b84 <FreqMenu_DrawPresetMenu+0x51c>)
 80018f0:	f00c fc22 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2302      	movs	r3, #2
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2300      	movs	r3, #0
 8001904:	2105      	movs	r1, #5
 8001906:	48a0      	ldr	r0, [pc, #640]	; (8001b88 <FreqMenu_DrawPresetMenu+0x520>)
 8001908:	f00c fc16 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800190c:	7b7b      	ldrb	r3, [r7, #13]
 800190e:	b29a      	uxth	r2, r3
 8001910:	2300      	movs	r3, #0
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2302      	movs	r3, #2
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800191c:	2105      	movs	r1, #5
 800191e:	489b      	ldr	r0, [pc, #620]	; (8001b8c <FreqMenu_DrawPresetMenu+0x524>)
 8001920:	f00c fc0a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	b29a      	uxth	r2, r3
 8001928:	2300      	movs	r3, #0
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2302      	movs	r3, #2
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001934:	2105      	movs	r1, #5
 8001936:	4896      	ldr	r0, [pc, #600]	; (8001b90 <FreqMenu_DrawPresetMenu+0x528>)
 8001938:	f00c fbfe 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	b29a      	uxth	r2, r3
 8001940:	2300      	movs	r3, #0
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2302      	movs	r3, #2
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800194c:	2105      	movs	r1, #5
 800194e:	4891      	ldr	r0, [pc, #580]	; (8001b94 <FreqMenu_DrawPresetMenu+0x52c>)
 8001950:	f00c fbf2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001954:	7abb      	ldrb	r3, [r7, #10]
 8001956:	b29a      	uxth	r2, r3
 8001958:	2300      	movs	r3, #0
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	2302      	movs	r3, #2
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001964:	2105      	movs	r1, #5
 8001966:	488c      	ldr	r0, [pc, #560]	; (8001b98 <FreqMenu_DrawPresetMenu+0x530>)
 8001968:	f00c fbe6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800196c:	7a7b      	ldrb	r3, [r7, #9]
 800196e:	b29a      	uxth	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2302      	movs	r3, #2
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800197c:	2105      	movs	r1, #5
 800197e:	4887      	ldr	r0, [pc, #540]	; (8001b9c <FreqMenu_DrawPresetMenu+0x534>)
 8001980:	f00c fbda 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	b29a      	uxth	r2, r3
 8001988:	2300      	movs	r3, #0
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	2302      	movs	r3, #2
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001994:	2178      	movs	r1, #120	; 0x78
 8001996:	4882      	ldr	r0, [pc, #520]	; (8001ba0 <FreqMenu_DrawPresetMenu+0x538>)
 8001998:	f00c fbce 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800199c:	7bbb      	ldrb	r3, [r7, #14]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2302      	movs	r3, #2
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019ac:	2178      	movs	r1, #120	; 0x78
 80019ae:	487d      	ldr	r0, [pc, #500]	; (8001ba4 <FreqMenu_DrawPresetMenu+0x53c>)
 80019b0:	f00c fbc2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019b4:	7b7b      	ldrb	r3, [r7, #13]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2302      	movs	r3, #2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019c4:	2178      	movs	r1, #120	; 0x78
 80019c6:	4878      	ldr	r0, [pc, #480]	; (8001ba8 <FreqMenu_DrawPresetMenu+0x540>)
 80019c8:	f00c fbb6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019cc:	7b3b      	ldrb	r3, [r7, #12]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019dc:	2178      	movs	r1, #120	; 0x78
 80019de:	4873      	ldr	r0, [pc, #460]	; (8001bac <FreqMenu_DrawPresetMenu+0x544>)
 80019e0:	f00c fbaa 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019e4:	7afb      	ldrb	r3, [r7, #11]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	2302      	movs	r3, #2
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019f4:	2178      	movs	r1, #120	; 0x78
 80019f6:	486e      	ldr	r0, [pc, #440]	; (8001bb0 <FreqMenu_DrawPresetMenu+0x548>)
 80019f8:	f00c fb9e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019fc:	7abb      	ldrb	r3, [r7, #10]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a0c:	2178      	movs	r1, #120	; 0x78
 8001a0e:	4869      	ldr	r0, [pc, #420]	; (8001bb4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001a10:	f00c fb92 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a14:	7a7b      	ldrb	r3, [r7, #9]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a24:	2178      	movs	r1, #120	; 0x78
 8001a26:	4864      	ldr	r0, [pc, #400]	; (8001bb8 <FreqMenu_DrawPresetMenu+0x550>)
 8001a28:	f00c fb86 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8001a2c:	f001 b8a8 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a40:	2105      	movs	r1, #5
 8001a42:	4850      	ldr	r0, [pc, #320]	; (8001b84 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a44:	f00c fb78 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2302      	movs	r3, #2
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	484b      	ldr	r0, [pc, #300]	; (8001b88 <FreqMenu_DrawPresetMenu+0x520>)
 8001a5c:	f00c fb6c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a60:	7b7b      	ldrb	r3, [r7, #13]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2105      	movs	r1, #5
 8001a72:	4846      	ldr	r0, [pc, #280]	; (8001b8c <FreqMenu_DrawPresetMenu+0x524>)
 8001a74:	f00c fb60 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a78:	7b3b      	ldrb	r3, [r7, #12]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	2302      	movs	r3, #2
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a88:	2105      	movs	r1, #5
 8001a8a:	4841      	ldr	r0, [pc, #260]	; (8001b90 <FreqMenu_DrawPresetMenu+0x528>)
 8001a8c:	f00c fb54 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a90:	7afb      	ldrb	r3, [r7, #11]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	2302      	movs	r3, #2
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	483c      	ldr	r0, [pc, #240]	; (8001b94 <FreqMenu_DrawPresetMenu+0x52c>)
 8001aa4:	f00c fb48 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa8:	7abb      	ldrb	r3, [r7, #10]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	4837      	ldr	r0, [pc, #220]	; (8001b98 <FreqMenu_DrawPresetMenu+0x530>)
 8001abc:	f00c fb3c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac0:	7a7b      	ldrb	r3, [r7, #9]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	2302      	movs	r3, #2
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	4832      	ldr	r0, [pc, #200]	; (8001b9c <FreqMenu_DrawPresetMenu+0x534>)
 8001ad4:	f00c fb30 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	2300      	movs	r3, #0
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae8:	2178      	movs	r1, #120	; 0x78
 8001aea:	482d      	ldr	r0, [pc, #180]	; (8001ba0 <FreqMenu_DrawPresetMenu+0x538>)
 8001aec:	f00c fb24 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af0:	7bbb      	ldrb	r3, [r7, #14]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	2302      	movs	r3, #2
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b00:	2178      	movs	r1, #120	; 0x78
 8001b02:	4828      	ldr	r0, [pc, #160]	; (8001ba4 <FreqMenu_DrawPresetMenu+0x53c>)
 8001b04:	f00c fb18 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2302      	movs	r3, #2
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b18:	2178      	movs	r1, #120	; 0x78
 8001b1a:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <FreqMenu_DrawPresetMenu+0x540>)
 8001b1c:	f00c fb0c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b20:	7b3b      	ldrb	r3, [r7, #12]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2302      	movs	r3, #2
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b30:	2178      	movs	r1, #120	; 0x78
 8001b32:	481e      	ldr	r0, [pc, #120]	; (8001bac <FreqMenu_DrawPresetMenu+0x544>)
 8001b34:	f00c fb00 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b38:	7afb      	ldrb	r3, [r7, #11]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2302      	movs	r3, #2
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b48:	2178      	movs	r1, #120	; 0x78
 8001b4a:	4819      	ldr	r0, [pc, #100]	; (8001bb0 <FreqMenu_DrawPresetMenu+0x548>)
 8001b4c:	f00c faf4 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b50:	7abb      	ldrb	r3, [r7, #10]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b60:	2178      	movs	r1, #120	; 0x78
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001b64:	f00c fae8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b68:	7a7b      	ldrb	r3, [r7, #9]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2302      	movs	r3, #2
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b78:	2178      	movs	r1, #120	; 0x78
 8001b7a:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <FreqMenu_DrawPresetMenu+0x550>)
 8001b7c:	f00c fadc 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8001b80:	f000 bffe 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8001b84:	08012f78 	.word	0x08012f78
 8001b88:	08012f80 	.word	0x08012f80
 8001b8c:	08012f88 	.word	0x08012f88
 8001b90:	08012f90 	.word	0x08012f90
 8001b94:	08012f98 	.word	0x08012f98
 8001b98:	08012fa0 	.word	0x08012fa0
 8001b9c:	08012fa8 	.word	0x08012fa8
 8001ba0:	08012fb0 	.word	0x08012fb0
 8001ba4:	08012fb8 	.word	0x08012fb8
 8001ba8:	08012fc0 	.word	0x08012fc0
 8001bac:	08012fc8 	.word	0x08012fc8
 8001bb0:	08012fd0 	.word	0x08012fd0
 8001bb4:	08012fd8 	.word	0x08012fd8
 8001bb8:	08012fe0 	.word	0x08012fe0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	48a5      	ldr	r0, [pc, #660]	; (8001e64 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001bd0:	f00c fab2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd4:	7bbb      	ldrb	r3, [r7, #14]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be4:	2105      	movs	r1, #5
 8001be6:	48a0      	ldr	r0, [pc, #640]	; (8001e68 <FreqMenu_DrawPresetMenu+0x800>)
 8001be8:	f00c faa6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bec:	7b7b      	ldrb	r3, [r7, #13]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	489b      	ldr	r0, [pc, #620]	; (8001e6c <FreqMenu_DrawPresetMenu+0x804>)
 8001c00:	f00c fa9a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001c04:	7b3b      	ldrb	r3, [r7, #12]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2302      	movs	r3, #2
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	4896      	ldr	r0, [pc, #600]	; (8001e70 <FreqMenu_DrawPresetMenu+0x808>)
 8001c18:	f00c fa8e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	2300      	movs	r3, #0
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	2302      	movs	r3, #2
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c2c:	2105      	movs	r1, #5
 8001c2e:	4891      	ldr	r0, [pc, #580]	; (8001e74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001c30:	f00c fa82 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c34:	7abb      	ldrb	r3, [r7, #10]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c44:	2105      	movs	r1, #5
 8001c46:	488c      	ldr	r0, [pc, #560]	; (8001e78 <FreqMenu_DrawPresetMenu+0x810>)
 8001c48:	f00c fa76 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c4c:	7a7b      	ldrb	r3, [r7, #9]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2302      	movs	r3, #2
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	4887      	ldr	r0, [pc, #540]	; (8001e7c <FreqMenu_DrawPresetMenu+0x814>)
 8001c60:	f00c fa6a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c74:	2178      	movs	r1, #120	; 0x78
 8001c76:	4882      	ldr	r0, [pc, #520]	; (8001e80 <FreqMenu_DrawPresetMenu+0x818>)
 8001c78:	f00c fa5e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2302      	movs	r3, #2
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c8c:	2178      	movs	r1, #120	; 0x78
 8001c8e:	487d      	ldr	r0, [pc, #500]	; (8001e84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c90:	f00c fa52 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c94:	7b7b      	ldrb	r3, [r7, #13]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca4:	2178      	movs	r1, #120	; 0x78
 8001ca6:	4878      	ldr	r0, [pc, #480]	; (8001e88 <FreqMenu_DrawPresetMenu+0x820>)
 8001ca8:	f00c fa46 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cac:	7b3b      	ldrb	r3, [r7, #12]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cbc:	2178      	movs	r1, #120	; 0x78
 8001cbe:	4873      	ldr	r0, [pc, #460]	; (8001e8c <FreqMenu_DrawPresetMenu+0x824>)
 8001cc0:	f00c fa3a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd4:	2178      	movs	r1, #120	; 0x78
 8001cd6:	486e      	ldr	r0, [pc, #440]	; (8001e90 <FreqMenu_DrawPresetMenu+0x828>)
 8001cd8:	f00c fa2e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cdc:	7abb      	ldrb	r3, [r7, #10]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cec:	2178      	movs	r1, #120	; 0x78
 8001cee:	4869      	ldr	r0, [pc, #420]	; (8001e94 <FreqMenu_DrawPresetMenu+0x82c>)
 8001cf0:	f00c fa22 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf4:	7a7b      	ldrb	r3, [r7, #9]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d04:	2178      	movs	r1, #120	; 0x78
 8001d06:	4864      	ldr	r0, [pc, #400]	; (8001e98 <FreqMenu_DrawPresetMenu+0x830>)
 8001d08:	f00c fa16 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8001d0c:	f000 bf38 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2302      	movs	r3, #2
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d20:	2105      	movs	r1, #5
 8001d22:	4850      	ldr	r0, [pc, #320]	; (8001e64 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001d24:	f00c fa08 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2302      	movs	r3, #2
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d38:	2105      	movs	r1, #5
 8001d3a:	484b      	ldr	r0, [pc, #300]	; (8001e68 <FreqMenu_DrawPresetMenu+0x800>)
 8001d3c:	f00c f9fc 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d40:	7b7b      	ldrb	r3, [r7, #13]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d50:	2105      	movs	r1, #5
 8001d52:	4846      	ldr	r0, [pc, #280]	; (8001e6c <FreqMenu_DrawPresetMenu+0x804>)
 8001d54:	f00c f9f0 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d58:	7b3b      	ldrb	r3, [r7, #12]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	2302      	movs	r3, #2
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d68:	2105      	movs	r1, #5
 8001d6a:	4841      	ldr	r0, [pc, #260]	; (8001e70 <FreqMenu_DrawPresetMenu+0x808>)
 8001d6c:	f00c f9e4 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2105      	movs	r1, #5
 8001d82:	483c      	ldr	r0, [pc, #240]	; (8001e74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d84:	f00c f9d8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d88:	7abb      	ldrb	r3, [r7, #10]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2302      	movs	r3, #2
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d98:	2105      	movs	r1, #5
 8001d9a:	4837      	ldr	r0, [pc, #220]	; (8001e78 <FreqMenu_DrawPresetMenu+0x810>)
 8001d9c:	f00c f9cc 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da0:	7a7b      	ldrb	r3, [r7, #9]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	2300      	movs	r3, #0
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	2302      	movs	r3, #2
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db0:	2105      	movs	r1, #5
 8001db2:	4832      	ldr	r0, [pc, #200]	; (8001e7c <FreqMenu_DrawPresetMenu+0x814>)
 8001db4:	f00c f9c0 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc8:	2178      	movs	r1, #120	; 0x78
 8001dca:	482d      	ldr	r0, [pc, #180]	; (8001e80 <FreqMenu_DrawPresetMenu+0x818>)
 8001dcc:	f00c f9b4 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de0:	2178      	movs	r1, #120	; 0x78
 8001de2:	4828      	ldr	r0, [pc, #160]	; (8001e84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001de4:	f00c f9a8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de8:	7b7b      	ldrb	r3, [r7, #13]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	2300      	movs	r3, #0
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	2302      	movs	r3, #2
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df8:	2178      	movs	r1, #120	; 0x78
 8001dfa:	4823      	ldr	r0, [pc, #140]	; (8001e88 <FreqMenu_DrawPresetMenu+0x820>)
 8001dfc:	f00c f99c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e00:	7b3b      	ldrb	r3, [r7, #12]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	2300      	movs	r3, #0
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	2302      	movs	r3, #2
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e10:	2178      	movs	r1, #120	; 0x78
 8001e12:	481e      	ldr	r0, [pc, #120]	; (8001e8c <FreqMenu_DrawPresetMenu+0x824>)
 8001e14:	f00c f990 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	2302      	movs	r3, #2
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e28:	2178      	movs	r1, #120	; 0x78
 8001e2a:	4819      	ldr	r0, [pc, #100]	; (8001e90 <FreqMenu_DrawPresetMenu+0x828>)
 8001e2c:	f00c f984 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e30:	7abb      	ldrb	r3, [r7, #10]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	2302      	movs	r3, #2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	4814      	ldr	r0, [pc, #80]	; (8001e94 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e44:	f00c f978 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e48:	7a7b      	ldrb	r3, [r7, #9]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	2302      	movs	r3, #2
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e58:	2178      	movs	r1, #120	; 0x78
 8001e5a:	480f      	ldr	r0, [pc, #60]	; (8001e98 <FreqMenu_DrawPresetMenu+0x830>)
 8001e5c:	f00c f96c 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8001e60:	f000 be8e 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8001e64:	08012f78 	.word	0x08012f78
 8001e68:	08012f80 	.word	0x08012f80
 8001e6c:	08012f88 	.word	0x08012f88
 8001e70:	08012f90 	.word	0x08012f90
 8001e74:	08012f98 	.word	0x08012f98
 8001e78:	08012fa0 	.word	0x08012fa0
 8001e7c:	08012fa8 	.word	0x08012fa8
 8001e80:	08012fb0 	.word	0x08012fb0
 8001e84:	08012fb8 	.word	0x08012fb8
 8001e88:	08012fc0 	.word	0x08012fc0
 8001e8c:	08012fc8 	.word	0x08012fc8
 8001e90:	08012fd0 	.word	0x08012fd0
 8001e94:	08012fd8 	.word	0x08012fd8
 8001e98:	08012fe0 	.word	0x08012fe0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eac:	2105      	movs	r1, #5
 8001eae:	48a5      	ldr	r0, [pc, #660]	; (8002144 <FreqMenu_DrawPresetMenu+0xadc>)
 8001eb0:	f00c f942 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	48a0      	ldr	r0, [pc, #640]	; (8002148 <FreqMenu_DrawPresetMenu+0xae0>)
 8001ec8:	f00c f936 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001edc:	2105      	movs	r1, #5
 8001ede:	489b      	ldr	r0, [pc, #620]	; (800214c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ee0:	f00c f92a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee4:	7b3b      	ldrb	r3, [r7, #12]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2302      	movs	r3, #2
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	4896      	ldr	r0, [pc, #600]	; (8002150 <FreqMenu_DrawPresetMenu+0xae8>)
 8001ef8:	f00c f91e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2302      	movs	r3, #2
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	4891      	ldr	r0, [pc, #580]	; (8002154 <FreqMenu_DrawPresetMenu+0xaec>)
 8001f10:	f00c f912 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001f14:	7abb      	ldrb	r3, [r7, #10]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	2302      	movs	r3, #2
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	2105      	movs	r1, #5
 8001f26:	488c      	ldr	r0, [pc, #560]	; (8002158 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001f28:	f00c f906 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f2c:	7a7b      	ldrb	r3, [r7, #9]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	2302      	movs	r3, #2
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	4887      	ldr	r0, [pc, #540]	; (800215c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f40:	f00c f8fa 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f54:	2178      	movs	r1, #120	; 0x78
 8001f56:	4882      	ldr	r0, [pc, #520]	; (8002160 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f58:	f00c f8ee 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	2302      	movs	r3, #2
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f6c:	2178      	movs	r1, #120	; 0x78
 8001f6e:	487d      	ldr	r0, [pc, #500]	; (8002164 <FreqMenu_DrawPresetMenu+0xafc>)
 8001f70:	f00c f8e2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f74:	7b7b      	ldrb	r3, [r7, #13]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f84:	2178      	movs	r1, #120	; 0x78
 8001f86:	4878      	ldr	r0, [pc, #480]	; (8002168 <FreqMenu_DrawPresetMenu+0xb00>)
 8001f88:	f00c f8d6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f8c:	7b3b      	ldrb	r3, [r7, #12]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2302      	movs	r3, #2
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f9c:	2178      	movs	r1, #120	; 0x78
 8001f9e:	4873      	ldr	r0, [pc, #460]	; (800216c <FreqMenu_DrawPresetMenu+0xb04>)
 8001fa0:	f00c f8ca 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2302      	movs	r3, #2
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb4:	2178      	movs	r1, #120	; 0x78
 8001fb6:	486e      	ldr	r0, [pc, #440]	; (8002170 <FreqMenu_DrawPresetMenu+0xb08>)
 8001fb8:	f00c f8be 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fbc:	7abb      	ldrb	r3, [r7, #10]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fcc:	2178      	movs	r1, #120	; 0x78
 8001fce:	4869      	ldr	r0, [pc, #420]	; (8002174 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001fd0:	f00c f8b2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe4:	2178      	movs	r1, #120	; 0x78
 8001fe6:	4864      	ldr	r0, [pc, #400]	; (8002178 <FreqMenu_DrawPresetMenu+0xb10>)
 8001fe8:	f00c f8a6 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8001fec:	f000 bdc8 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002000:	2105      	movs	r1, #5
 8002002:	4850      	ldr	r0, [pc, #320]	; (8002144 <FreqMenu_DrawPresetMenu+0xadc>)
 8002004:	f00c f898 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	b29a      	uxth	r2, r3
 800200c:	2300      	movs	r3, #0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2302      	movs	r3, #2
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002018:	2105      	movs	r1, #5
 800201a:	484b      	ldr	r0, [pc, #300]	; (8002148 <FreqMenu_DrawPresetMenu+0xae0>)
 800201c:	f00c f88c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002020:	7b7b      	ldrb	r3, [r7, #13]
 8002022:	b29a      	uxth	r2, r3
 8002024:	2300      	movs	r3, #0
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	2302      	movs	r3, #2
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002030:	2105      	movs	r1, #5
 8002032:	4846      	ldr	r0, [pc, #280]	; (800214c <FreqMenu_DrawPresetMenu+0xae4>)
 8002034:	f00c f880 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002038:	7b3b      	ldrb	r3, [r7, #12]
 800203a:	b29a      	uxth	r2, r3
 800203c:	2300      	movs	r3, #0
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002048:	2105      	movs	r1, #5
 800204a:	4841      	ldr	r0, [pc, #260]	; (8002150 <FreqMenu_DrawPresetMenu+0xae8>)
 800204c:	f00c f874 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2302      	movs	r3, #2
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002060:	2105      	movs	r1, #5
 8002062:	483c      	ldr	r0, [pc, #240]	; (8002154 <FreqMenu_DrawPresetMenu+0xaec>)
 8002064:	f00c f868 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002068:	7abb      	ldrb	r3, [r7, #10]
 800206a:	b29a      	uxth	r2, r3
 800206c:	2300      	movs	r3, #0
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	2302      	movs	r3, #2
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002078:	2105      	movs	r1, #5
 800207a:	4837      	ldr	r0, [pc, #220]	; (8002158 <FreqMenu_DrawPresetMenu+0xaf0>)
 800207c:	f00c f85c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002080:	7a7b      	ldrb	r3, [r7, #9]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2105      	movs	r1, #5
 8002092:	4832      	ldr	r0, [pc, #200]	; (800215c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002094:	f00c f850 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	b29a      	uxth	r2, r3
 800209c:	2300      	movs	r3, #0
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2302      	movs	r3, #2
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a8:	2178      	movs	r1, #120	; 0x78
 80020aa:	482d      	ldr	r0, [pc, #180]	; (8002160 <FreqMenu_DrawPresetMenu+0xaf8>)
 80020ac:	f00c f844 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	2300      	movs	r3, #0
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	2302      	movs	r3, #2
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c0:	2178      	movs	r1, #120	; 0x78
 80020c2:	4828      	ldr	r0, [pc, #160]	; (8002164 <FreqMenu_DrawPresetMenu+0xafc>)
 80020c4:	f00c f838 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c8:	7b7b      	ldrb	r3, [r7, #13]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2302      	movs	r3, #2
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d8:	2178      	movs	r1, #120	; 0x78
 80020da:	4823      	ldr	r0, [pc, #140]	; (8002168 <FreqMenu_DrawPresetMenu+0xb00>)
 80020dc:	f00c f82c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e0:	7b3b      	ldrb	r3, [r7, #12]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	2302      	movs	r3, #2
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f0:	2178      	movs	r1, #120	; 0x78
 80020f2:	481e      	ldr	r0, [pc, #120]	; (800216c <FreqMenu_DrawPresetMenu+0xb04>)
 80020f4:	f00c f820 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	2300      	movs	r3, #0
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2302      	movs	r3, #2
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002108:	2178      	movs	r1, #120	; 0x78
 800210a:	4819      	ldr	r0, [pc, #100]	; (8002170 <FreqMenu_DrawPresetMenu+0xb08>)
 800210c:	f00c f814 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002110:	7abb      	ldrb	r3, [r7, #10]
 8002112:	b29a      	uxth	r2, r3
 8002114:	2300      	movs	r3, #0
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	2302      	movs	r3, #2
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002120:	2178      	movs	r1, #120	; 0x78
 8002122:	4814      	ldr	r0, [pc, #80]	; (8002174 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002124:	f00c f808 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002128:	7a7b      	ldrb	r3, [r7, #9]
 800212a:	b29a      	uxth	r2, r3
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2302      	movs	r3, #2
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002138:	2178      	movs	r1, #120	; 0x78
 800213a:	480f      	ldr	r0, [pc, #60]	; (8002178 <FreqMenu_DrawPresetMenu+0xb10>)
 800213c:	f00b fffc 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8002140:	f000 bd1e 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002144:	08012f78 	.word	0x08012f78
 8002148:	08012f80 	.word	0x08012f80
 800214c:	08012f88 	.word	0x08012f88
 8002150:	08012f90 	.word	0x08012f90
 8002154:	08012f98 	.word	0x08012f98
 8002158:	08012fa0 	.word	0x08012fa0
 800215c:	08012fa8 	.word	0x08012fa8
 8002160:	08012fb0 	.word	0x08012fb0
 8002164:	08012fb8 	.word	0x08012fb8
 8002168:	08012fc0 	.word	0x08012fc0
 800216c:	08012fc8 	.word	0x08012fc8
 8002170:	08012fd0 	.word	0x08012fd0
 8002174:	08012fd8 	.word	0x08012fd8
 8002178:	08012fe0 	.word	0x08012fe0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	b29a      	uxth	r2, r3
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2302      	movs	r3, #2
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800218c:	2105      	movs	r1, #5
 800218e:	48a5      	ldr	r0, [pc, #660]	; (8002424 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002190:	f00b ffd2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	b29a      	uxth	r2, r3
 8002198:	2300      	movs	r3, #0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2302      	movs	r3, #2
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a4:	2105      	movs	r1, #5
 80021a6:	48a0      	ldr	r0, [pc, #640]	; (8002428 <FreqMenu_DrawPresetMenu+0xdc0>)
 80021a8:	f00b ffc6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021ac:	7b7b      	ldrb	r3, [r7, #13]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2302      	movs	r3, #2
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021bc:	2105      	movs	r1, #5
 80021be:	489b      	ldr	r0, [pc, #620]	; (800242c <FreqMenu_DrawPresetMenu+0xdc4>)
 80021c0:	f00b ffba 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c4:	7b3b      	ldrb	r3, [r7, #12]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	2300      	movs	r3, #0
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d4:	2105      	movs	r1, #5
 80021d6:	4896      	ldr	r0, [pc, #600]	; (8002430 <FreqMenu_DrawPresetMenu+0xdc8>)
 80021d8:	f00b ffae 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2302      	movs	r3, #2
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ec:	2105      	movs	r1, #5
 80021ee:	4891      	ldr	r0, [pc, #580]	; (8002434 <FreqMenu_DrawPresetMenu+0xdcc>)
 80021f0:	f00b ffa2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f4:	7abb      	ldrb	r3, [r7, #10]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	2302      	movs	r3, #2
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002204:	2105      	movs	r1, #5
 8002206:	488c      	ldr	r0, [pc, #560]	; (8002438 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002208:	f00b ff96 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800220c:	7a7b      	ldrb	r3, [r7, #9]
 800220e:	b29a      	uxth	r2, r3
 8002210:	2300      	movs	r3, #0
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2302      	movs	r3, #2
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800221c:	2105      	movs	r1, #5
 800221e:	4887      	ldr	r0, [pc, #540]	; (800243c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002220:	f00b ff8a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	b29a      	uxth	r2, r3
 8002228:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2302      	movs	r3, #2
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2300      	movs	r3, #0
 8002234:	2178      	movs	r1, #120	; 0x78
 8002236:	4882      	ldr	r0, [pc, #520]	; (8002440 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002238:	f00b ff7e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800223c:	7bbb      	ldrb	r3, [r7, #14]
 800223e:	b29a      	uxth	r2, r3
 8002240:	2300      	movs	r3, #0
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	2302      	movs	r3, #2
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800224c:	2178      	movs	r1, #120	; 0x78
 800224e:	487d      	ldr	r0, [pc, #500]	; (8002444 <FreqMenu_DrawPresetMenu+0xddc>)
 8002250:	f00b ff72 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002254:	7b7b      	ldrb	r3, [r7, #13]
 8002256:	b29a      	uxth	r2, r3
 8002258:	2300      	movs	r3, #0
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002264:	2178      	movs	r1, #120	; 0x78
 8002266:	4878      	ldr	r0, [pc, #480]	; (8002448 <FreqMenu_DrawPresetMenu+0xde0>)
 8002268:	f00b ff66 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800226c:	7b3b      	ldrb	r3, [r7, #12]
 800226e:	b29a      	uxth	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2302      	movs	r3, #2
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800227c:	2178      	movs	r1, #120	; 0x78
 800227e:	4873      	ldr	r0, [pc, #460]	; (800244c <FreqMenu_DrawPresetMenu+0xde4>)
 8002280:	f00b ff5a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	b29a      	uxth	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2302      	movs	r3, #2
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002294:	2178      	movs	r1, #120	; 0x78
 8002296:	486e      	ldr	r0, [pc, #440]	; (8002450 <FreqMenu_DrawPresetMenu+0xde8>)
 8002298:	f00b ff4e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800229c:	7abb      	ldrb	r3, [r7, #10]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2302      	movs	r3, #2
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ac:	2178      	movs	r1, #120	; 0x78
 80022ae:	4869      	ldr	r0, [pc, #420]	; (8002454 <FreqMenu_DrawPresetMenu+0xdec>)
 80022b0:	f00b ff42 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b4:	7a7b      	ldrb	r3, [r7, #9]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c4:	2178      	movs	r1, #120	; 0x78
 80022c6:	4864      	ldr	r0, [pc, #400]	; (8002458 <FreqMenu_DrawPresetMenu+0xdf0>)
 80022c8:	f00b ff36 	bl	800e138 <ILI9341_Draw_Text>
				break;
 80022cc:	f000 bc58 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	2300      	movs	r3, #0
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	2302      	movs	r3, #2
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e0:	2105      	movs	r1, #5
 80022e2:	4850      	ldr	r0, [pc, #320]	; (8002424 <FreqMenu_DrawPresetMenu+0xdbc>)
 80022e4:	f00b ff28 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e8:	7bbb      	ldrb	r3, [r7, #14]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	2302      	movs	r3, #2
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f8:	2105      	movs	r1, #5
 80022fa:	484b      	ldr	r0, [pc, #300]	; (8002428 <FreqMenu_DrawPresetMenu+0xdc0>)
 80022fc:	f00b ff1c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002300:	7b7b      	ldrb	r3, [r7, #13]
 8002302:	b29a      	uxth	r2, r3
 8002304:	2300      	movs	r3, #0
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	2302      	movs	r3, #2
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002310:	2105      	movs	r1, #5
 8002312:	4846      	ldr	r0, [pc, #280]	; (800242c <FreqMenu_DrawPresetMenu+0xdc4>)
 8002314:	f00b ff10 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002318:	7b3b      	ldrb	r3, [r7, #12]
 800231a:	b29a      	uxth	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	2302      	movs	r3, #2
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002328:	2105      	movs	r1, #5
 800232a:	4841      	ldr	r0, [pc, #260]	; (8002430 <FreqMenu_DrawPresetMenu+0xdc8>)
 800232c:	f00b ff04 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	b29a      	uxth	r2, r3
 8002334:	2300      	movs	r3, #0
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	2302      	movs	r3, #2
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002340:	2105      	movs	r1, #5
 8002342:	483c      	ldr	r0, [pc, #240]	; (8002434 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002344:	f00b fef8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002348:	7abb      	ldrb	r3, [r7, #10]
 800234a:	b29a      	uxth	r2, r3
 800234c:	2300      	movs	r3, #0
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	2302      	movs	r3, #2
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002358:	2105      	movs	r1, #5
 800235a:	4837      	ldr	r0, [pc, #220]	; (8002438 <FreqMenu_DrawPresetMenu+0xdd0>)
 800235c:	f00b feec 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002360:	7a7b      	ldrb	r3, [r7, #9]
 8002362:	b29a      	uxth	r2, r3
 8002364:	2300      	movs	r3, #0
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	2302      	movs	r3, #2
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002370:	2105      	movs	r1, #5
 8002372:	4832      	ldr	r0, [pc, #200]	; (800243c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002374:	f00b fee0 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	b29a      	uxth	r2, r3
 800237c:	2300      	movs	r3, #0
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2302      	movs	r3, #2
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002388:	2178      	movs	r1, #120	; 0x78
 800238a:	482d      	ldr	r0, [pc, #180]	; (8002440 <FreqMenu_DrawPresetMenu+0xdd8>)
 800238c:	f00b fed4 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002390:	7bbb      	ldrb	r3, [r7, #14]
 8002392:	b29a      	uxth	r2, r3
 8002394:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2302      	movs	r3, #2
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2300      	movs	r3, #0
 80023a0:	2178      	movs	r1, #120	; 0x78
 80023a2:	4828      	ldr	r0, [pc, #160]	; (8002444 <FreqMenu_DrawPresetMenu+0xddc>)
 80023a4:	f00b fec8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023a8:	7b7b      	ldrb	r3, [r7, #13]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	2302      	movs	r3, #2
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023b8:	2178      	movs	r1, #120	; 0x78
 80023ba:	4823      	ldr	r0, [pc, #140]	; (8002448 <FreqMenu_DrawPresetMenu+0xde0>)
 80023bc:	f00b febc 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c0:	7b3b      	ldrb	r3, [r7, #12]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	2300      	movs	r3, #0
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2302      	movs	r3, #2
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d0:	2178      	movs	r1, #120	; 0x78
 80023d2:	481e      	ldr	r0, [pc, #120]	; (800244c <FreqMenu_DrawPresetMenu+0xde4>)
 80023d4:	f00b feb0 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	2300      	movs	r3, #0
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2302      	movs	r3, #2
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023e8:	2178      	movs	r1, #120	; 0x78
 80023ea:	4819      	ldr	r0, [pc, #100]	; (8002450 <FreqMenu_DrawPresetMenu+0xde8>)
 80023ec:	f00b fea4 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023f0:	7abb      	ldrb	r3, [r7, #10]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	2300      	movs	r3, #0
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2302      	movs	r3, #2
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002400:	2178      	movs	r1, #120	; 0x78
 8002402:	4814      	ldr	r0, [pc, #80]	; (8002454 <FreqMenu_DrawPresetMenu+0xdec>)
 8002404:	f00b fe98 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002408:	7a7b      	ldrb	r3, [r7, #9]
 800240a:	b29a      	uxth	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2302      	movs	r3, #2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002418:	2178      	movs	r1, #120	; 0x78
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <FreqMenu_DrawPresetMenu+0xdf0>)
 800241c:	f00b fe8c 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8002420:	e3ae      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002422:	bf00      	nop
 8002424:	08012f78 	.word	0x08012f78
 8002428:	08012f80 	.word	0x08012f80
 800242c:	08012f88 	.word	0x08012f88
 8002430:	08012f90 	.word	0x08012f90
 8002434:	08012f98 	.word	0x08012f98
 8002438:	08012fa0 	.word	0x08012fa0
 800243c:	08012fa8 	.word	0x08012fa8
 8002440:	08012fb0 	.word	0x08012fb0
 8002444:	08012fb8 	.word	0x08012fb8
 8002448:	08012fc0 	.word	0x08012fc0
 800244c:	08012fc8 	.word	0x08012fc8
 8002450:	08012fd0 	.word	0x08012fd0
 8002454:	08012fd8 	.word	0x08012fd8
 8002458:	08012fe0 	.word	0x08012fe0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	b29a      	uxth	r2, r3
 8002460:	2300      	movs	r3, #0
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	2302      	movs	r3, #2
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800246c:	2105      	movs	r1, #5
 800246e:	48a4      	ldr	r0, [pc, #656]	; (8002700 <FreqMenu_DrawPresetMenu+0x1098>)
 8002470:	f00b fe62 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	b29a      	uxth	r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	2302      	movs	r3, #2
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002484:	2105      	movs	r1, #5
 8002486:	489f      	ldr	r0, [pc, #636]	; (8002704 <FreqMenu_DrawPresetMenu+0x109c>)
 8002488:	f00b fe56 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800248c:	7b7b      	ldrb	r3, [r7, #13]
 800248e:	b29a      	uxth	r2, r3
 8002490:	2300      	movs	r3, #0
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	2302      	movs	r3, #2
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800249c:	2105      	movs	r1, #5
 800249e:	489a      	ldr	r0, [pc, #616]	; (8002708 <FreqMenu_DrawPresetMenu+0x10a0>)
 80024a0:	f00b fe4a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a4:	7b3b      	ldrb	r3, [r7, #12]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	2302      	movs	r3, #2
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b4:	2105      	movs	r1, #5
 80024b6:	4895      	ldr	r0, [pc, #596]	; (800270c <FreqMenu_DrawPresetMenu+0x10a4>)
 80024b8:	f00b fe3e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2302      	movs	r3, #2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024cc:	2105      	movs	r1, #5
 80024ce:	4890      	ldr	r0, [pc, #576]	; (8002710 <FreqMenu_DrawPresetMenu+0x10a8>)
 80024d0:	f00b fe32 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d4:	7abb      	ldrb	r3, [r7, #10]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2302      	movs	r3, #2
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e4:	2105      	movs	r1, #5
 80024e6:	488b      	ldr	r0, [pc, #556]	; (8002714 <FreqMenu_DrawPresetMenu+0x10ac>)
 80024e8:	f00b fe26 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ec:	7a7b      	ldrb	r3, [r7, #9]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	2302      	movs	r3, #2
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024fc:	2105      	movs	r1, #5
 80024fe:	4886      	ldr	r0, [pc, #536]	; (8002718 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002500:	f00b fe1a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	b29a      	uxth	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	2302      	movs	r3, #2
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002514:	2178      	movs	r1, #120	; 0x78
 8002516:	4881      	ldr	r0, [pc, #516]	; (800271c <FreqMenu_DrawPresetMenu+0x10b4>)
 8002518:	f00b fe0e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800251c:	7bbb      	ldrb	r3, [r7, #14]
 800251e:	b29a      	uxth	r2, r3
 8002520:	2300      	movs	r3, #0
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	2302      	movs	r3, #2
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800252c:	2178      	movs	r1, #120	; 0x78
 800252e:	487c      	ldr	r0, [pc, #496]	; (8002720 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002530:	f00b fe02 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002534:	7b7b      	ldrb	r3, [r7, #13]
 8002536:	b29a      	uxth	r2, r3
 8002538:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	2302      	movs	r3, #2
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	2178      	movs	r1, #120	; 0x78
 8002546:	4877      	ldr	r0, [pc, #476]	; (8002724 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002548:	f00b fdf6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254c:	7b3b      	ldrb	r3, [r7, #12]
 800254e:	b29a      	uxth	r2, r3
 8002550:	2300      	movs	r3, #0
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	2302      	movs	r3, #2
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255c:	2178      	movs	r1, #120	; 0x78
 800255e:	4872      	ldr	r0, [pc, #456]	; (8002728 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002560:	f00b fdea 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	b29a      	uxth	r2, r3
 8002568:	2300      	movs	r3, #0
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	2302      	movs	r3, #2
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002574:	2178      	movs	r1, #120	; 0x78
 8002576:	486d      	ldr	r0, [pc, #436]	; (800272c <FreqMenu_DrawPresetMenu+0x10c4>)
 8002578:	f00b fdde 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257c:	7abb      	ldrb	r3, [r7, #10]
 800257e:	b29a      	uxth	r2, r3
 8002580:	2300      	movs	r3, #0
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	2302      	movs	r3, #2
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258c:	2178      	movs	r1, #120	; 0x78
 800258e:	4868      	ldr	r0, [pc, #416]	; (8002730 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002590:	f00b fdd2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002594:	7a7b      	ldrb	r3, [r7, #9]
 8002596:	b29a      	uxth	r2, r3
 8002598:	2300      	movs	r3, #0
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	2302      	movs	r3, #2
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a4:	2178      	movs	r1, #120	; 0x78
 80025a6:	4863      	ldr	r0, [pc, #396]	; (8002734 <FreqMenu_DrawPresetMenu+0x10cc>)
 80025a8:	f00b fdc6 	bl	800e138 <ILI9341_Draw_Text>
				break;
 80025ac:	e2e8      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	2300      	movs	r3, #0
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	2302      	movs	r3, #2
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025be:	2105      	movs	r1, #5
 80025c0:	484f      	ldr	r0, [pc, #316]	; (8002700 <FreqMenu_DrawPresetMenu+0x1098>)
 80025c2:	f00b fdb9 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c6:	7bbb      	ldrb	r3, [r7, #14]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	2300      	movs	r3, #0
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	2302      	movs	r3, #2
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d6:	2105      	movs	r1, #5
 80025d8:	484a      	ldr	r0, [pc, #296]	; (8002704 <FreqMenu_DrawPresetMenu+0x109c>)
 80025da:	f00b fdad 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025de:	7b7b      	ldrb	r3, [r7, #13]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	2300      	movs	r3, #0
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	2302      	movs	r3, #2
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ee:	2105      	movs	r1, #5
 80025f0:	4845      	ldr	r0, [pc, #276]	; (8002708 <FreqMenu_DrawPresetMenu+0x10a0>)
 80025f2:	f00b fda1 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f6:	7b3b      	ldrb	r3, [r7, #12]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	2300      	movs	r3, #0
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	2302      	movs	r3, #2
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002606:	2105      	movs	r1, #5
 8002608:	4840      	ldr	r0, [pc, #256]	; (800270c <FreqMenu_DrawPresetMenu+0x10a4>)
 800260a:	f00b fd95 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	b29a      	uxth	r2, r3
 8002612:	2300      	movs	r3, #0
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	2302      	movs	r3, #2
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261e:	2105      	movs	r1, #5
 8002620:	483b      	ldr	r0, [pc, #236]	; (8002710 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002622:	f00b fd89 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002626:	7abb      	ldrb	r3, [r7, #10]
 8002628:	b29a      	uxth	r2, r3
 800262a:	2300      	movs	r3, #0
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2302      	movs	r3, #2
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002636:	2105      	movs	r1, #5
 8002638:	4836      	ldr	r0, [pc, #216]	; (8002714 <FreqMenu_DrawPresetMenu+0x10ac>)
 800263a:	f00b fd7d 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800263e:	7a7b      	ldrb	r3, [r7, #9]
 8002640:	b29a      	uxth	r2, r3
 8002642:	2300      	movs	r3, #0
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2302      	movs	r3, #2
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800264e:	2105      	movs	r1, #5
 8002650:	4831      	ldr	r0, [pc, #196]	; (8002718 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002652:	f00b fd71 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	b29a      	uxth	r2, r3
 800265a:	2300      	movs	r3, #0
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	2302      	movs	r3, #2
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002666:	2178      	movs	r1, #120	; 0x78
 8002668:	482c      	ldr	r0, [pc, #176]	; (800271c <FreqMenu_DrawPresetMenu+0x10b4>)
 800266a:	f00b fd65 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800266e:	7bbb      	ldrb	r3, [r7, #14]
 8002670:	b29a      	uxth	r2, r3
 8002672:	2300      	movs	r3, #0
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	2302      	movs	r3, #2
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800267e:	2178      	movs	r1, #120	; 0x78
 8002680:	4827      	ldr	r0, [pc, #156]	; (8002720 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002682:	f00b fd59 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002686:	7b7b      	ldrb	r3, [r7, #13]
 8002688:	b29a      	uxth	r2, r3
 800268a:	2300      	movs	r3, #0
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2302      	movs	r3, #2
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002696:	2178      	movs	r1, #120	; 0x78
 8002698:	4822      	ldr	r0, [pc, #136]	; (8002724 <FreqMenu_DrawPresetMenu+0x10bc>)
 800269a:	f00b fd4d 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800269e:	7b3b      	ldrb	r3, [r7, #12]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2302      	movs	r3, #2
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	2178      	movs	r1, #120	; 0x78
 80026b0:	481d      	ldr	r0, [pc, #116]	; (8002728 <FreqMenu_DrawPresetMenu+0x10c0>)
 80026b2:	f00b fd41 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2302      	movs	r3, #2
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026c6:	2178      	movs	r1, #120	; 0x78
 80026c8:	4818      	ldr	r0, [pc, #96]	; (800272c <FreqMenu_DrawPresetMenu+0x10c4>)
 80026ca:	f00b fd35 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ce:	7abb      	ldrb	r3, [r7, #10]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	2300      	movs	r3, #0
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	2302      	movs	r3, #2
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026de:	2178      	movs	r1, #120	; 0x78
 80026e0:	4813      	ldr	r0, [pc, #76]	; (8002730 <FreqMenu_DrawPresetMenu+0x10c8>)
 80026e2:	f00b fd29 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026e6:	7a7b      	ldrb	r3, [r7, #9]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	2300      	movs	r3, #0
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2302      	movs	r3, #2
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026f6:	2178      	movs	r1, #120	; 0x78
 80026f8:	480e      	ldr	r0, [pc, #56]	; (8002734 <FreqMenu_DrawPresetMenu+0x10cc>)
 80026fa:	f00b fd1d 	bl	800e138 <ILI9341_Draw_Text>
				break;
 80026fe:	e23f      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002700:	08012f78 	.word	0x08012f78
 8002704:	08012f80 	.word	0x08012f80
 8002708:	08012f88 	.word	0x08012f88
 800270c:	08012f90 	.word	0x08012f90
 8002710:	08012f98 	.word	0x08012f98
 8002714:	08012fa0 	.word	0x08012fa0
 8002718:	08012fa8 	.word	0x08012fa8
 800271c:	08012fb0 	.word	0x08012fb0
 8002720:	08012fb8 	.word	0x08012fb8
 8002724:	08012fc0 	.word	0x08012fc0
 8002728:	08012fc8 	.word	0x08012fc8
 800272c:	08012fd0 	.word	0x08012fd0
 8002730:	08012fd8 	.word	0x08012fd8
 8002734:	08012fe0 	.word	0x08012fe0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	b29a      	uxth	r2, r3
 800273c:	2300      	movs	r3, #0
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2302      	movs	r3, #2
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002748:	2105      	movs	r1, #5
 800274a:	48a4      	ldr	r0, [pc, #656]	; (80029dc <FreqMenu_DrawPresetMenu+0x1374>)
 800274c:	f00b fcf4 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	b29a      	uxth	r2, r3
 8002754:	2300      	movs	r3, #0
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	2302      	movs	r3, #2
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002760:	2105      	movs	r1, #5
 8002762:	489f      	ldr	r0, [pc, #636]	; (80029e0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002764:	f00b fce8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002768:	7b7b      	ldrb	r3, [r7, #13]
 800276a:	b29a      	uxth	r2, r3
 800276c:	2300      	movs	r3, #0
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	2302      	movs	r3, #2
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002778:	2105      	movs	r1, #5
 800277a:	489a      	ldr	r0, [pc, #616]	; (80029e4 <FreqMenu_DrawPresetMenu+0x137c>)
 800277c:	f00b fcdc 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002780:	7b3b      	ldrb	r3, [r7, #12]
 8002782:	b29a      	uxth	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2302      	movs	r3, #2
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002790:	2105      	movs	r1, #5
 8002792:	4895      	ldr	r0, [pc, #596]	; (80029e8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002794:	f00b fcd0 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002798:	7afb      	ldrb	r3, [r7, #11]
 800279a:	b29a      	uxth	r2, r3
 800279c:	2300      	movs	r3, #0
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2302      	movs	r3, #2
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027a8:	2105      	movs	r1, #5
 80027aa:	4890      	ldr	r0, [pc, #576]	; (80029ec <FreqMenu_DrawPresetMenu+0x1384>)
 80027ac:	f00b fcc4 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b0:	7abb      	ldrb	r3, [r7, #10]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2302      	movs	r3, #2
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c0:	2105      	movs	r1, #5
 80027c2:	488b      	ldr	r0, [pc, #556]	; (80029f0 <FreqMenu_DrawPresetMenu+0x1388>)
 80027c4:	f00b fcb8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027c8:	7a7b      	ldrb	r3, [r7, #9]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	2302      	movs	r3, #2
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027d8:	2105      	movs	r1, #5
 80027da:	4886      	ldr	r0, [pc, #536]	; (80029f4 <FreqMenu_DrawPresetMenu+0x138c>)
 80027dc:	f00b fcac 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2302      	movs	r3, #2
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f0:	2178      	movs	r1, #120	; 0x78
 80027f2:	4881      	ldr	r0, [pc, #516]	; (80029f8 <FreqMenu_DrawPresetMenu+0x1390>)
 80027f4:	f00b fca0 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2302      	movs	r3, #2
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002808:	2178      	movs	r1, #120	; 0x78
 800280a:	487c      	ldr	r0, [pc, #496]	; (80029fc <FreqMenu_DrawPresetMenu+0x1394>)
 800280c:	f00b fc94 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002810:	7b7b      	ldrb	r3, [r7, #13]
 8002812:	b29a      	uxth	r2, r3
 8002814:	2300      	movs	r3, #0
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2302      	movs	r3, #2
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002820:	2178      	movs	r1, #120	; 0x78
 8002822:	4877      	ldr	r0, [pc, #476]	; (8002a00 <FreqMenu_DrawPresetMenu+0x1398>)
 8002824:	f00b fc88 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002828:	7b3b      	ldrb	r3, [r7, #12]
 800282a:	b29a      	uxth	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2302      	movs	r3, #2
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002838:	2178      	movs	r1, #120	; 0x78
 800283a:	4872      	ldr	r0, [pc, #456]	; (8002a04 <FreqMenu_DrawPresetMenu+0x139c>)
 800283c:	f00b fc7c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	b29a      	uxth	r2, r3
 8002844:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	2302      	movs	r3, #2
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2300      	movs	r3, #0
 8002850:	2178      	movs	r1, #120	; 0x78
 8002852:	486d      	ldr	r0, [pc, #436]	; (8002a08 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002854:	f00b fc70 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002858:	7abb      	ldrb	r3, [r7, #10]
 800285a:	b29a      	uxth	r2, r3
 800285c:	2300      	movs	r3, #0
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	2302      	movs	r3, #2
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002868:	2178      	movs	r1, #120	; 0x78
 800286a:	4868      	ldr	r0, [pc, #416]	; (8002a0c <FreqMenu_DrawPresetMenu+0x13a4>)
 800286c:	f00b fc64 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002870:	7a7b      	ldrb	r3, [r7, #9]
 8002872:	b29a      	uxth	r2, r3
 8002874:	2300      	movs	r3, #0
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2302      	movs	r3, #2
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002880:	2178      	movs	r1, #120	; 0x78
 8002882:	4863      	ldr	r0, [pc, #396]	; (8002a10 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002884:	f00b fc58 	bl	800e138 <ILI9341_Draw_Text>
			break;
 8002888:	e17a      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	b29a      	uxth	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	2302      	movs	r3, #2
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800289a:	2105      	movs	r1, #5
 800289c:	484f      	ldr	r0, [pc, #316]	; (80029dc <FreqMenu_DrawPresetMenu+0x1374>)
 800289e:	f00b fc4b 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	2300      	movs	r3, #0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2302      	movs	r3, #2
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028b2:	2105      	movs	r1, #5
 80028b4:	484a      	ldr	r0, [pc, #296]	; (80029e0 <FreqMenu_DrawPresetMenu+0x1378>)
 80028b6:	f00b fc3f 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ba:	7b7b      	ldrb	r3, [r7, #13]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	2302      	movs	r3, #2
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ca:	2105      	movs	r1, #5
 80028cc:	4845      	ldr	r0, [pc, #276]	; (80029e4 <FreqMenu_DrawPresetMenu+0x137c>)
 80028ce:	f00b fc33 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028d2:	7b3b      	ldrb	r3, [r7, #12]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	2300      	movs	r3, #0
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2302      	movs	r3, #2
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028e2:	2105      	movs	r1, #5
 80028e4:	4840      	ldr	r0, [pc, #256]	; (80029e8 <FreqMenu_DrawPresetMenu+0x1380>)
 80028e6:	f00b fc27 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	2300      	movs	r3, #0
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2302      	movs	r3, #2
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028fa:	2105      	movs	r1, #5
 80028fc:	483b      	ldr	r0, [pc, #236]	; (80029ec <FreqMenu_DrawPresetMenu+0x1384>)
 80028fe:	f00b fc1b 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002902:	7abb      	ldrb	r3, [r7, #10]
 8002904:	b29a      	uxth	r2, r3
 8002906:	2300      	movs	r3, #0
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2302      	movs	r3, #2
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002912:	2105      	movs	r1, #5
 8002914:	4836      	ldr	r0, [pc, #216]	; (80029f0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002916:	f00b fc0f 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800291a:	7a7b      	ldrb	r3, [r7, #9]
 800291c:	b29a      	uxth	r2, r3
 800291e:	2300      	movs	r3, #0
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2302      	movs	r3, #2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800292a:	2105      	movs	r1, #5
 800292c:	4831      	ldr	r0, [pc, #196]	; (80029f4 <FreqMenu_DrawPresetMenu+0x138c>)
 800292e:	f00b fc03 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	b29a      	uxth	r2, r3
 8002936:	2300      	movs	r3, #0
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2302      	movs	r3, #2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002942:	2178      	movs	r1, #120	; 0x78
 8002944:	482c      	ldr	r0, [pc, #176]	; (80029f8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002946:	f00b fbf7 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800294a:	7bbb      	ldrb	r3, [r7, #14]
 800294c:	b29a      	uxth	r2, r3
 800294e:	2300      	movs	r3, #0
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2302      	movs	r3, #2
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800295a:	2178      	movs	r1, #120	; 0x78
 800295c:	4827      	ldr	r0, [pc, #156]	; (80029fc <FreqMenu_DrawPresetMenu+0x1394>)
 800295e:	f00b fbeb 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002962:	7b7b      	ldrb	r3, [r7, #13]
 8002964:	b29a      	uxth	r2, r3
 8002966:	2300      	movs	r3, #0
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2302      	movs	r3, #2
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002972:	2178      	movs	r1, #120	; 0x78
 8002974:	4822      	ldr	r0, [pc, #136]	; (8002a00 <FreqMenu_DrawPresetMenu+0x1398>)
 8002976:	f00b fbdf 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800297a:	7b3b      	ldrb	r3, [r7, #12]
 800297c:	b29a      	uxth	r2, r3
 800297e:	2300      	movs	r3, #0
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	2302      	movs	r3, #2
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800298a:	2178      	movs	r1, #120	; 0x78
 800298c:	481d      	ldr	r0, [pc, #116]	; (8002a04 <FreqMenu_DrawPresetMenu+0x139c>)
 800298e:	f00b fbd3 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	b29a      	uxth	r2, r3
 8002996:	2300      	movs	r3, #0
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2302      	movs	r3, #2
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a2:	2178      	movs	r1, #120	; 0x78
 80029a4:	4818      	ldr	r0, [pc, #96]	; (8002a08 <FreqMenu_DrawPresetMenu+0x13a0>)
 80029a6:	f00b fbc7 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80029aa:	7abb      	ldrb	r3, [r7, #10]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2302      	movs	r3, #2
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	2178      	movs	r1, #120	; 0x78
 80029bc:	4813      	ldr	r0, [pc, #76]	; (8002a0c <FreqMenu_DrawPresetMenu+0x13a4>)
 80029be:	f00b fbbb 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c2:	7a7b      	ldrb	r3, [r7, #9]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2302      	movs	r3, #2
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d2:	2178      	movs	r1, #120	; 0x78
 80029d4:	480e      	ldr	r0, [pc, #56]	; (8002a10 <FreqMenu_DrawPresetMenu+0x13a8>)
 80029d6:	f00b fbaf 	bl	800e138 <ILI9341_Draw_Text>
			break;
 80029da:	e0d1      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 80029dc:	08012f78 	.word	0x08012f78
 80029e0:	08012f80 	.word	0x08012f80
 80029e4:	08012f88 	.word	0x08012f88
 80029e8:	08012f90 	.word	0x08012f90
 80029ec:	08012f98 	.word	0x08012f98
 80029f0:	08012fa0 	.word	0x08012fa0
 80029f4:	08012fa8 	.word	0x08012fa8
 80029f8:	08012fb0 	.word	0x08012fb0
 80029fc:	08012fb8 	.word	0x08012fb8
 8002a00:	08012fc0 	.word	0x08012fc0
 8002a04:	08012fc8 	.word	0x08012fc8
 8002a08:	08012fd0 	.word	0x08012fd0
 8002a0c:	08012fd8 	.word	0x08012fd8
 8002a10:	08012fe0 	.word	0x08012fe0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a24:	2105      	movs	r1, #5
 8002a26:	4858      	ldr	r0, [pc, #352]	; (8002b88 <FreqMenu_DrawPresetMenu+0x1520>)
 8002a28:	f00b fb86 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a2c:	7bbb      	ldrb	r3, [r7, #14]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	2300      	movs	r3, #0
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	2302      	movs	r3, #2
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a3c:	2105      	movs	r1, #5
 8002a3e:	4853      	ldr	r0, [pc, #332]	; (8002b8c <FreqMenu_DrawPresetMenu+0x1524>)
 8002a40:	f00b fb7a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a44:	7b7b      	ldrb	r3, [r7, #13]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a54:	2105      	movs	r1, #5
 8002a56:	484e      	ldr	r0, [pc, #312]	; (8002b90 <FreqMenu_DrawPresetMenu+0x1528>)
 8002a58:	f00b fb6e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a5c:	7b3b      	ldrb	r3, [r7, #12]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	2300      	movs	r3, #0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	2302      	movs	r3, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	4849      	ldr	r0, [pc, #292]	; (8002b94 <FreqMenu_DrawPresetMenu+0x152c>)
 8002a70:	f00b fb62 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a84:	2105      	movs	r1, #5
 8002a86:	4844      	ldr	r0, [pc, #272]	; (8002b98 <FreqMenu_DrawPresetMenu+0x1530>)
 8002a88:	f00b fb56 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a8c:	7abb      	ldrb	r3, [r7, #10]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	2302      	movs	r3, #2
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a9c:	2105      	movs	r1, #5
 8002a9e:	483f      	ldr	r0, [pc, #252]	; (8002b9c <FreqMenu_DrawPresetMenu+0x1534>)
 8002aa0:	f00b fb4a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa4:	7a7b      	ldrb	r3, [r7, #9]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	2302      	movs	r3, #2
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab4:	2105      	movs	r1, #5
 8002ab6:	483a      	ldr	r0, [pc, #232]	; (8002ba0 <FreqMenu_DrawPresetMenu+0x1538>)
 8002ab8:	f00b fb3e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002acc:	2178      	movs	r1, #120	; 0x78
 8002ace:	4835      	ldr	r0, [pc, #212]	; (8002ba4 <FreqMenu_DrawPresetMenu+0x153c>)
 8002ad0:	f00b fb32 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	2302      	movs	r3, #2
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ae4:	2178      	movs	r1, #120	; 0x78
 8002ae6:	4830      	ldr	r0, [pc, #192]	; (8002ba8 <FreqMenu_DrawPresetMenu+0x1540>)
 8002ae8:	f00b fb26 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aec:	7b7b      	ldrb	r3, [r7, #13]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	2302      	movs	r3, #2
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002afc:	2178      	movs	r1, #120	; 0x78
 8002afe:	482b      	ldr	r0, [pc, #172]	; (8002bac <FreqMenu_DrawPresetMenu+0x1544>)
 8002b00:	f00b fb1a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b04:	7b3b      	ldrb	r3, [r7, #12]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b14:	2178      	movs	r1, #120	; 0x78
 8002b16:	4826      	ldr	r0, [pc, #152]	; (8002bb0 <FreqMenu_DrawPresetMenu+0x1548>)
 8002b18:	f00b fb0e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	2300      	movs	r3, #0
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	2302      	movs	r3, #2
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b2c:	2178      	movs	r1, #120	; 0x78
 8002b2e:	4821      	ldr	r0, [pc, #132]	; (8002bb4 <FreqMenu_DrawPresetMenu+0x154c>)
 8002b30:	f00b fb02 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b34:	7abb      	ldrb	r3, [r7, #10]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b44:	2178      	movs	r1, #120	; 0x78
 8002b46:	481c      	ldr	r0, [pc, #112]	; (8002bb8 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b48:	f00b faf6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b4c:	7a7b      	ldrb	r3, [r7, #9]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	2302      	movs	r3, #2
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2178      	movs	r1, #120	; 0x78
 8002b5e:	4817      	ldr	r0, [pc, #92]	; (8002bbc <FreqMenu_DrawPresetMenu+0x1554>)
 8002b60:	f00b faea 	bl	800e138 <ILI9341_Draw_Text>
			break;
 8002b64:	bf00      	nop
 8002b66:	e00b      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002b68:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2300      	movs	r3, #0
 8002b74:	22b4      	movs	r2, #180	; 0xb4
 8002b76:	2105      	movs	r1, #5
 8002b78:	4811      	ldr	r0, [pc, #68]	; (8002bc0 <FreqMenu_DrawPresetMenu+0x1558>)
 8002b7a:	f00b fadd 	bl	800e138 <ILI9341_Draw_Text>
}
 8002b7e:	e7ff      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	08012f78 	.word	0x08012f78
 8002b8c:	08012f80 	.word	0x08012f80
 8002b90:	08012f88 	.word	0x08012f88
 8002b94:	08012f90 	.word	0x08012f90
 8002b98:	08012f98 	.word	0x08012f98
 8002b9c:	08012fa0 	.word	0x08012fa0
 8002ba0:	08012fa8 	.word	0x08012fa8
 8002ba4:	08012fb0 	.word	0x08012fb0
 8002ba8:	08012fb8 	.word	0x08012fb8
 8002bac:	08012fc0 	.word	0x08012fc0
 8002bb0:	08012fc8 	.word	0x08012fc8
 8002bb4:	08012fd0 	.word	0x08012fd0
 8002bb8:	08012fd8 	.word	0x08012fd8
 8002bbc:	08012fe0 	.word	0x08012fe0
 8002bc0:	08012fec 	.word	0x08012fec

08002bc4 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	2105      	movs	r1, #5
 8002bda:	4804      	ldr	r0, [pc, #16]	; (8002bec <FreqMenu_DrawAdjustMenu+0x28>)
 8002bdc:	f00b faac 	bl	800e138 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002be0:	f7fe f9c8 	bl	8000f74 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	0801301c 	.word	0x0801301c

08002bf0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b0a0      	sub	sp, #128	; 0x80
 8002bf4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	220a      	movs	r2, #10
 8002c04:	2105      	movs	r1, #5
 8002c06:	48a1      	ldr	r0, [pc, #644]	; (8002e8c <FreqMenu_DrawSweepMenu+0x29c>)
 8002c08:	f00b fa96 	bl	800e138 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002c1e:	4b9c      	ldr	r3, [pc, #624]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d109      	bne.n	8002c3e <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002c2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c2e:	4a99      	ldr	r2, [pc, #612]	; (8002e94 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002c30:	461c      	mov	r4, r3
 8002c32:	4615      	mov	r5, r2
 8002c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	7023      	strb	r3, [r4, #0]
 8002c3c:	e008      	b.n	8002c50 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002c3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c42:	4a95      	ldr	r2, [pc, #596]	; (8002e98 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002c44:	461c      	mov	r4, r3
 8002c46:	4615      	mov	r5, r2
 8002c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c50:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c54:	2300      	movs	r3, #0
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	2302      	movs	r3, #2
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c60:	2228      	movs	r2, #40	; 0x28
 8002c62:	2105      	movs	r1, #5
 8002c64:	f00b fa68 	bl	800e138 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
 8002c7c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c7e:	f003 f941 	bl	8005f04 <SM_GetOutputInHertz>
 8002c82:	ee10 3a10 	vmov	r3, s0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc86 	bl	8000598 <__aeabi_f2d>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c94:	e9cd 3400 	strd	r3, r4, [sp]
 8002c98:	4a80      	ldr	r2, [pc, #512]	; (8002e9c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c9a:	2119      	movs	r1, #25
 8002c9c:	f00c fdf0 	bl	800f880 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ca0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	2302      	movs	r3, #2
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cb0:	223c      	movs	r2, #60	; 0x3c
 8002cb2:	2105      	movs	r1, #5
 8002cb4:	f00b fa40 	bl	800e138 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cc4:	2264      	movs	r2, #100	; 0x64
 8002cc6:	2105      	movs	r1, #5
 8002cc8:	4875      	ldr	r0, [pc, #468]	; (8002ea0 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002cca:	f00b fa35 	bl	800e138 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002cce:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d117      	bne.n	8002d0a <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	2302      	movs	r3, #2
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ce6:	2264      	movs	r2, #100	; 0x64
 8002ce8:	21eb      	movs	r1, #235	; 0xeb
 8002cea:	486e      	ldr	r0, [pc, #440]	; (8002ea4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cec:	f00b fa24 	bl	800e138 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cf0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2264      	movs	r2, #100	; 0x64
 8002cfe:	f240 1109 	movw	r1, #265	; 0x109
 8002d02:	4869      	ldr	r0, [pc, #420]	; (8002ea8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d04:	f00b fa18 	bl	800e138 <ILI9341_Draw_Text>
 8002d08:	e016      	b.n	8002d38 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	2302      	movs	r3, #2
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d16:	2264      	movs	r2, #100	; 0x64
 8002d18:	f240 1109 	movw	r1, #265	; 0x109
 8002d1c:	4862      	ldr	r0, [pc, #392]	; (8002ea8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d1e:	f00b fa0b 	bl	800e138 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d22:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2302      	movs	r3, #2
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2264      	movs	r2, #100	; 0x64
 8002d30:	21eb      	movs	r1, #235	; 0xeb
 8002d32:	485c      	ldr	r0, [pc, #368]	; (8002ea4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002d34:	f00b fa00 	bl	800e138 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002d38:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d40:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2302      	movs	r3, #2
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2278      	movs	r2, #120	; 0x78
 8002d4e:	2105      	movs	r1, #5
 8002d50:	4857      	ldr	r0, [pc, #348]	; (8002eb0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d52:	f00b f9f1 	bl	800e138 <ILI9341_Draw_Text>
 8002d56:	e00a      	b.n	8002d6e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d64:	2278      	movs	r2, #120	; 0x78
 8002d66:	2105      	movs	r1, #5
 8002d68:	4851      	ldr	r0, [pc, #324]	; (8002eb0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d6a:	f00b f9e5 	bl	800e138 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	611a      	str	r2, [r3, #16]
 8002d82:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fc05 	bl	8000598 <__aeabi_f2d>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d96:	e9cd 3400 	strd	r3, r4, [sp]
 8002d9a:	4a47      	ldr	r2, [pc, #284]	; (8002eb8 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d9c:	2119      	movs	r1, #25
 8002d9e:	f00c fd6f 	bl	800f880 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002da2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002da6:	2300      	movs	r3, #0
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2302      	movs	r3, #2
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002db2:	2278      	movs	r2, #120	; 0x78
 8002db4:	21b6      	movs	r1, #182	; 0xb6
 8002db6:	f00b f9bf 	bl	800e138 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002dba:	4b3c      	ldr	r3, [pc, #240]	; (8002eac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d10f      	bne.n	8002de2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002dca:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	228c      	movs	r2, #140	; 0x8c
 8002dd8:	2105      	movs	r1, #5
 8002dda:	4839      	ldr	r0, [pc, #228]	; (8002ec0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002ddc:	f00b f9ac 	bl	800e138 <ILI9341_Draw_Text>
 8002de0:	e00a      	b.n	8002df8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002de2:	2300      	movs	r3, #0
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2302      	movs	r3, #2
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dee:	228c      	movs	r2, #140	; 0x8c
 8002df0:	2105      	movs	r1, #5
 8002df2:	4833      	ldr	r0, [pc, #204]	; (8002ec0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002df4:	f00b f9a0 	bl	800e138 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e14:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	ee17 0a90 	vmov	r0, s15
 8002e20:	f003 f8b4 	bl	8005f8c <SM_ConvertPeriodToHertz>
 8002e24:	eeb0 7a40 	vmov.f32	s14, s0
 8002e28:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002ecc <FreqMenu_DrawSweepMenu+0x2dc>
 8002e2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e30:	ee16 0a90 	vmov	r0, s13
 8002e34:	f7fd fbb0 	bl	8000598 <__aeabi_f2d>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	f107 0018 	add.w	r0, r7, #24
 8002e40:	e9cd 3400 	strd	r3, r4, [sp]
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e46:	2114      	movs	r1, #20
 8002e48:	f00c fd1a 	bl	800f880 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e4c:	f107 0018 	add.w	r0, r7, #24
 8002e50:	2300      	movs	r3, #0
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	2302      	movs	r3, #2
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e5c:	228c      	movs	r2, #140	; 0x8c
 8002e5e:	219e      	movs	r1, #158	; 0x9e
 8002e60:	f00b f96a 	bl	800e138 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d135      	bne.n	8002ed8 <FreqMenu_DrawSweepMenu+0x2e8>
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d131      	bne.n	8002ed8 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002e74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	22a0      	movs	r2, #160	; 0xa0
 8002e82:	2105      	movs	r1, #5
 8002e84:	4813      	ldr	r0, [pc, #76]	; (8002ed4 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e86:	f00b f957 	bl	800e138 <ILI9341_Draw_Text>
 8002e8a:	e030      	b.n	8002eee <FreqMenu_DrawSweepMenu+0x2fe>
 8002e8c:	08013030 	.word	0x08013030
 8002e90:	40000c00 	.word	0x40000c00
 8002e94:	08013044 	.word	0x08013044
 8002e98:	08013058 	.word	0x08013058
 8002e9c:	0801306c 	.word	0x0801306c
 8002ea0:	08013080 	.word	0x08013080
 8002ea4:	0801308c 	.word	0x0801308c
 8002ea8:	08013090 	.word	0x08013090
 8002eac:	20001e55 	.word	0x20001e55
 8002eb0:	08013098 	.word	0x08013098
 8002eb4:	20001ea8 	.word	0x20001ea8
 8002eb8:	080130a8 	.word	0x080130a8
 8002ebc:	20001e54 	.word	0x20001e54
 8002ec0:	080130b4 	.word	0x080130b4
 8002ec4:	20000120 	.word	0x20000120
 8002ec8:	40013400 	.word	0x40013400
 8002ecc:	42f00000 	.word	0x42f00000
 8002ed0:	080130c4 	.word	0x080130c4
 8002ed4:	080130d0 	.word	0x080130d0
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	2302      	movs	r3, #2
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ee4:	22a0      	movs	r2, #160	; 0xa0
 8002ee6:	2105      	movs	r1, #5
 8002ee8:	484d      	ldr	r0, [pc, #308]	; (8003020 <FreqMenu_DrawSweepMenu+0x430>)
 8002eea:	f00b f925 	bl	800e138 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002f00:	4b48      	ldr	r3, [pc, #288]	; (8003024 <FreqMenu_DrawSweepMenu+0x434>)
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <FreqMenu_DrawSweepMenu+0x438>)
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4619      	mov	r1, r3
 8002f12:	ee17 0a90 	vmov	r0, s15
 8002f16:	f003 f839 	bl	8005f8c <SM_ConvertPeriodToHertz>
 8002f1a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f1e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800302c <FreqMenu_DrawSweepMenu+0x43c>
 8002f22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f26:	ee16 0a90 	vmov	r0, s13
 8002f2a:	f7fd fb35 	bl	8000598 <__aeabi_f2d>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	1d38      	adds	r0, r7, #4
 8002f34:	e9cd 3400 	strd	r3, r4, [sp]
 8002f38:	4a3d      	ldr	r2, [pc, #244]	; (8003030 <FreqMenu_DrawSweepMenu+0x440>)
 8002f3a:	2114      	movs	r1, #20
 8002f3c:	f00c fca0 	bl	800f880 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f40:	1d38      	adds	r0, r7, #4
 8002f42:	2300      	movs	r3, #0
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2302      	movs	r3, #2
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f4e:	22a0      	movs	r2, #160	; 0xa0
 8002f50:	21aa      	movs	r1, #170	; 0xaa
 8002f52:	f00b f8f1 	bl	800e138 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f56:	4b37      	ldr	r3, [pc, #220]	; (8003034 <FreqMenu_DrawSweepMenu+0x444>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10b      	bne.n	8002f7a <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f62:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	2302      	movs	r3, #2
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	22d5      	movs	r2, #213	; 0xd5
 8002f70:	2106      	movs	r1, #6
 8002f72:	4831      	ldr	r0, [pc, #196]	; (8003038 <FreqMenu_DrawSweepMenu+0x448>)
 8002f74:	f00b f8e0 	bl	800e138 <ILI9341_Draw_Text>
 8002f78:	e00a      	b.n	8002f90 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f7a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	2302      	movs	r3, #2
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2300      	movs	r3, #0
 8002f86:	22d5      	movs	r2, #213	; 0xd5
 8002f88:	2105      	movs	r1, #5
 8002f8a:	482c      	ldr	r0, [pc, #176]	; (800303c <FreqMenu_DrawSweepMenu+0x44c>)
 8002f8c:	f00b f8d4 	bl	800e138 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f90:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	2302      	movs	r3, #2
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	22cc      	movs	r2, #204	; 0xcc
 8002f9e:	2169      	movs	r1, #105	; 0x69
 8002fa0:	4827      	ldr	r0, [pc, #156]	; (8003040 <FreqMenu_DrawSweepMenu+0x450>)
 8002fa2:	f00b f8c9 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002fa6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	2302      	movs	r3, #2
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	22de      	movs	r2, #222	; 0xde
 8002fb4:	2162      	movs	r1, #98	; 0x62
 8002fb6:	4823      	ldr	r0, [pc, #140]	; (8003044 <FreqMenu_DrawSweepMenu+0x454>)
 8002fb8:	f00b f8be 	bl	800e138 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002fbc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	22cc      	movs	r2, #204	; 0xcc
 8002fca:	21b7      	movs	r1, #183	; 0xb7
 8002fcc:	481c      	ldr	r0, [pc, #112]	; (8003040 <FreqMenu_DrawSweepMenu+0x450>)
 8002fce:	f00b f8b3 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002fd2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	2302      	movs	r3, #2
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	22de      	movs	r2, #222	; 0xde
 8002fe0:	21ad      	movs	r1, #173	; 0xad
 8002fe2:	4819      	ldr	r0, [pc, #100]	; (8003048 <FreqMenu_DrawSweepMenu+0x458>)
 8002fe4:	f00b f8a8 	bl	800e138 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fe8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2302      	movs	r3, #2
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	22cc      	movs	r2, #204	; 0xcc
 8002ff6:	f240 1107 	movw	r1, #263	; 0x107
 8002ffa:	4811      	ldr	r0, [pc, #68]	; (8003040 <FreqMenu_DrawSweepMenu+0x450>)
 8002ffc:	f00b f89c 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003000:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2302      	movs	r3, #2
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	22de      	movs	r2, #222	; 0xde
 800300e:	21fc      	movs	r1, #252	; 0xfc
 8003010:	480e      	ldr	r0, [pc, #56]	; (800304c <FreqMenu_DrawSweepMenu+0x45c>)
 8003012:	f00b f891 	bl	800e138 <ILI9341_Draw_Text>
}
 8003016:	bf00      	nop
 8003018:	3778      	adds	r7, #120	; 0x78
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}
 800301e:	bf00      	nop
 8003020:	080130d0 	.word	0x080130d0
 8003024:	20000124 	.word	0x20000124
 8003028:	40013400 	.word	0x40013400
 800302c:	42f00000 	.word	0x42f00000
 8003030:	080130e0 	.word	0x080130e0
 8003034:	40000c00 	.word	0x40000c00
 8003038:	080130ec 	.word	0x080130ec
 800303c:	080130f4 	.word	0x080130f4
 8003040:	080130fc 	.word	0x080130fc
 8003044:	08013100 	.word	0x08013100
 8003048:	08013108 	.word	0x08013108
 800304c:	08013110 	.word	0x08013110

08003050 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d007      	beq.n	8003070 <FuncMenu_DrawMenu+0x20>
 8003060:	2b03      	cmp	r3, #3
 8003062:	d009      	beq.n	8003078 <FuncMenu_DrawMenu+0x28>
 8003064:	2b01      	cmp	r3, #1
 8003066:	d000      	beq.n	800306a <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(Aux_CHANNEL);
			break;

		default:
			break;
 8003068:	e00a      	b.n	8003080 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 800306a:	f000 f80d 	bl	8003088 <FuncMenu_DrawMainMenu>
			break;
 800306e:	e007      	b.n	8003080 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8003070:	2000      	movs	r0, #0
 8003072:	f000 f851 	bl	8003118 <FuncMenu_DrawOutputMenu>
			break;
 8003076:	e003      	b.n	8003080 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(Aux_CHANNEL);
 8003078:	2001      	movs	r0, #1
 800307a:	f000 f84d 	bl	8003118 <FuncMenu_DrawOutputMenu>
			break;
 800307e:	bf00      	nop

	}
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800308e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2302      	movs	r3, #2
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	220a      	movs	r2, #10
 800309c:	210a      	movs	r1, #10
 800309e:	481a      	ldr	r0, [pc, #104]	; (8003108 <FuncMenu_DrawMainMenu+0x80>)
 80030a0:	f00b f84a 	bl	800e138 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80030a4:	f7fd ff66 	bl	8000f74 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80030a8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	2302      	movs	r3, #2
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2300      	movs	r3, #0
 80030b4:	22d2      	movs	r2, #210	; 0xd2
 80030b6:	2105      	movs	r1, #5
 80030b8:	4814      	ldr	r0, [pc, #80]	; (800310c <FuncMenu_DrawMainMenu+0x84>)
 80030ba:	f00b f83d 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Aux", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80030be:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	2302      	movs	r3, #2
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2300      	movs	r3, #0
 80030ca:	22d2      	movs	r2, #210	; 0xd2
 80030cc:	2161      	movs	r1, #97	; 0x61
 80030ce:	4810      	ldr	r0, [pc, #64]	; (8003110 <FuncMenu_DrawMainMenu+0x88>)
 80030d0:	f00b f832 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80030d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	2302      	movs	r3, #2
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2300      	movs	r3, #0
 80030e0:	22d2      	movs	r2, #210	; 0xd2
 80030e2:	21af      	movs	r1, #175	; 0xaf
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <FuncMenu_DrawMainMenu+0x8c>)
 80030e6:	f00b f827 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030ea:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	2302      	movs	r3, #2
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	22d2      	movs	r2, #210	; 0xd2
 80030f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030fc:	4805      	ldr	r0, [pc, #20]	; (8003114 <FuncMenu_DrawMainMenu+0x8c>)
 80030fe:	f00b f81b 	bl	800e138 <ILI9341_Draw_Text>
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	08013118 	.word	0x08013118
 800310c:	08013124 	.word	0x08013124
 8003110:	0801312c 	.word	0x0801312c
 8003114:	08013130 	.word	0x08013130

08003118 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af02      	add	r7, sp, #8
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->Aux", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	2302      	movs	r3, #2
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2300      	movs	r3, #0
 8003134:	220a      	movs	r2, #10
 8003136:	210a      	movs	r1, #10
 8003138:	4893      	ldr	r0, [pc, #588]	; (8003388 <FuncMenu_DrawOutputMenu+0x270>)
 800313a:	f00a fffd 	bl	800e138 <ILI9341_Draw_Text>
 800313e:	e00a      	b.n	8003156 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	220a      	movs	r2, #10
 800314e:	210a      	movs	r1, #10
 8003150:	488e      	ldr	r0, [pc, #568]	; (800338c <FuncMenu_DrawOutputMenu+0x274>)
 8003152:	f00a fff1 	bl	800e138 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fd2b 	bl	8005bb4 <SM_GetOutputChannel>
 800315e:	4603      	mov	r3, r0
 8003160:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003164:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 83ff 	beq.w	800396c <FuncMenu_DrawOutputMenu+0x854>
	{
		switch(func_profileTmp->func)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b06      	cmp	r3, #6
 8003174:	f200 83fa 	bhi.w	800396c <FuncMenu_DrawOutputMenu+0x854>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <FuncMenu_DrawOutputMenu+0x68>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	0800319d 	.word	0x0800319d
 8003184:	08003293 	.word	0x08003293
 8003188:	080033b1 	.word	0x080033b1
 800318c:	080034a7 	.word	0x080034a7
 8003190:	0800359d 	.word	0x0800359d
 8003194:	080036cd 	.word	0x080036cd
 8003198:	080037d9 	.word	0x080037d9
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800319c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2302      	movs	r3, #2
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2300      	movs	r3, #0
 80031a8:	2232      	movs	r2, #50	; 0x32
 80031aa:	210a      	movs	r1, #10
 80031ac:	4878      	ldr	r0, [pc, #480]	; (8003390 <FuncMenu_DrawOutputMenu+0x278>)
 80031ae:	f00a ffc3 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031b2:	2300      	movs	r3, #0
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2302      	movs	r3, #2
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031be:	2246      	movs	r2, #70	; 0x46
 80031c0:	210a      	movs	r1, #10
 80031c2:	4874      	ldr	r0, [pc, #464]	; (8003394 <FuncMenu_DrawOutputMenu+0x27c>)
 80031c4:	f00a ffb8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031c8:	2300      	movs	r3, #0
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	2302      	movs	r3, #2
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d4:	225a      	movs	r2, #90	; 0x5a
 80031d6:	210a      	movs	r1, #10
 80031d8:	486f      	ldr	r0, [pc, #444]	; (8003398 <FuncMenu_DrawOutputMenu+0x280>)
 80031da:	f00a ffad 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031de:	2300      	movs	r3, #0
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	2302      	movs	r3, #2
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031ea:	226e      	movs	r2, #110	; 0x6e
 80031ec:	210a      	movs	r1, #10
 80031ee:	486b      	ldr	r0, [pc, #428]	; (800339c <FuncMenu_DrawOutputMenu+0x284>)
 80031f0:	f00a ffa2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031f4:	2300      	movs	r3, #0
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	2302      	movs	r3, #2
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003200:	2282      	movs	r2, #130	; 0x82
 8003202:	210a      	movs	r1, #10
 8003204:	4866      	ldr	r0, [pc, #408]	; (80033a0 <FuncMenu_DrawOutputMenu+0x288>)
 8003206:	f00a ff97 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800320a:	2300      	movs	r3, #0
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	2302      	movs	r3, #2
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003216:	2296      	movs	r2, #150	; 0x96
 8003218:	210a      	movs	r1, #10
 800321a:	4862      	ldr	r0, [pc, #392]	; (80033a4 <FuncMenu_DrawOutputMenu+0x28c>)
 800321c:	f00a ff8c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003220:	2300      	movs	r3, #0
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	2302      	movs	r3, #2
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800322c:	22aa      	movs	r2, #170	; 0xaa
 800322e:	210a      	movs	r1, #10
 8003230:	485d      	ldr	r0, [pc, #372]	; (80033a8 <FuncMenu_DrawOutputMenu+0x290>)
 8003232:	f00a ff81 	bl	800e138 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003236:	f240 23fd 	movw	r3, #765	; 0x2fd
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2302      	movs	r3, #2
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2300      	movs	r3, #0
 8003242:	22d2      	movs	r2, #210	; 0xd2
 8003244:	2105      	movs	r1, #5
 8003246:	4859      	ldr	r0, [pc, #356]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003248:	f00a ff76 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800324c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	2302      	movs	r3, #2
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2300      	movs	r3, #0
 8003258:	22d2      	movs	r2, #210	; 0xd2
 800325a:	2161      	movs	r1, #97	; 0x61
 800325c:	4853      	ldr	r0, [pc, #332]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800325e:	f00a ff6b 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003262:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2302      	movs	r3, #2
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	22d2      	movs	r2, #210	; 0xd2
 8003270:	21af      	movs	r1, #175	; 0xaf
 8003272:	484e      	ldr	r0, [pc, #312]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003274:	f00a ff60 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003278:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	2302      	movs	r3, #2
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2300      	movs	r3, #0
 8003284:	22d2      	movs	r2, #210	; 0xd2
 8003286:	f44f 7182 	mov.w	r1, #260	; 0x104
 800328a:	4848      	ldr	r0, [pc, #288]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800328c:	f00a ff54 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8003290:	e36c      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003292:	2300      	movs	r3, #0
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2302      	movs	r3, #2
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800329e:	2232      	movs	r2, #50	; 0x32
 80032a0:	210a      	movs	r1, #10
 80032a2:	483b      	ldr	r0, [pc, #236]	; (8003390 <FuncMenu_DrawOutputMenu+0x278>)
 80032a4:	f00a ff48 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80032a8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	2302      	movs	r3, #2
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2300      	movs	r3, #0
 80032b4:	2246      	movs	r2, #70	; 0x46
 80032b6:	210a      	movs	r1, #10
 80032b8:	4836      	ldr	r0, [pc, #216]	; (8003394 <FuncMenu_DrawOutputMenu+0x27c>)
 80032ba:	f00a ff3d 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032be:	2300      	movs	r3, #0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2302      	movs	r3, #2
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ca:	225a      	movs	r2, #90	; 0x5a
 80032cc:	210a      	movs	r1, #10
 80032ce:	4832      	ldr	r0, [pc, #200]	; (8003398 <FuncMenu_DrawOutputMenu+0x280>)
 80032d0:	f00a ff32 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032d4:	2300      	movs	r3, #0
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2302      	movs	r3, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032e0:	226e      	movs	r2, #110	; 0x6e
 80032e2:	210a      	movs	r1, #10
 80032e4:	482d      	ldr	r0, [pc, #180]	; (800339c <FuncMenu_DrawOutputMenu+0x284>)
 80032e6:	f00a ff27 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032ea:	2300      	movs	r3, #0
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2302      	movs	r3, #2
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032f6:	2282      	movs	r2, #130	; 0x82
 80032f8:	210a      	movs	r1, #10
 80032fa:	4829      	ldr	r0, [pc, #164]	; (80033a0 <FuncMenu_DrawOutputMenu+0x288>)
 80032fc:	f00a ff1c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003300:	2300      	movs	r3, #0
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2302      	movs	r3, #2
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800330c:	2296      	movs	r2, #150	; 0x96
 800330e:	210a      	movs	r1, #10
 8003310:	4824      	ldr	r0, [pc, #144]	; (80033a4 <FuncMenu_DrawOutputMenu+0x28c>)
 8003312:	f00a ff11 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003316:	2300      	movs	r3, #0
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	2302      	movs	r3, #2
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003322:	22aa      	movs	r2, #170	; 0xaa
 8003324:	210a      	movs	r1, #10
 8003326:	4820      	ldr	r0, [pc, #128]	; (80033a8 <FuncMenu_DrawOutputMenu+0x290>)
 8003328:	f00a ff06 	bl	800e138 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800332c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	2302      	movs	r3, #2
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	22d2      	movs	r2, #210	; 0xd2
 800333a:	2105      	movs	r1, #5
 800333c:	481b      	ldr	r0, [pc, #108]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800333e:	f00a fefb 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003342:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	2302      	movs	r3, #2
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2300      	movs	r3, #0
 800334e:	22d2      	movs	r2, #210	; 0xd2
 8003350:	2161      	movs	r1, #97	; 0x61
 8003352:	4816      	ldr	r0, [pc, #88]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003354:	f00a fef0 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003358:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	2302      	movs	r3, #2
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	22d2      	movs	r2, #210	; 0xd2
 8003366:	21af      	movs	r1, #175	; 0xaf
 8003368:	4810      	ldr	r0, [pc, #64]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800336a:	f00a fee5 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800336e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2302      	movs	r3, #2
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	22d2      	movs	r2, #210	; 0xd2
 800337c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003380:	480a      	ldr	r0, [pc, #40]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003382:	f00a fed9 	bl	800e138 <ILI9341_Draw_Text>
				break;
 8003386:	e2f1      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
 8003388:	08013138 	.word	0x08013138
 800338c:	08013148 	.word	0x08013148
 8003390:	08013158 	.word	0x08013158
 8003394:	08013160 	.word	0x08013160
 8003398:	0801316c 	.word	0x0801316c
 800339c:	08013174 	.word	0x08013174
 80033a0:	08013180 	.word	0x08013180
 80033a4:	0801318c 	.word	0x0801318c
 80033a8:	08013194 	.word	0x08013194
 80033ac:	08013130 	.word	0x08013130
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033b0:	2300      	movs	r3, #0
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	2302      	movs	r3, #2
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033bc:	2232      	movs	r2, #50	; 0x32
 80033be:	210a      	movs	r1, #10
 80033c0:	48b9      	ldr	r0, [pc, #740]	; (80036a8 <FuncMenu_DrawOutputMenu+0x590>)
 80033c2:	f00a feb9 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033c6:	2300      	movs	r3, #0
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2302      	movs	r3, #2
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033d2:	2246      	movs	r2, #70	; 0x46
 80033d4:	210a      	movs	r1, #10
 80033d6:	48b5      	ldr	r0, [pc, #724]	; (80036ac <FuncMenu_DrawOutputMenu+0x594>)
 80033d8:	f00a feae 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80033dc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	2302      	movs	r3, #2
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	225a      	movs	r2, #90	; 0x5a
 80033ea:	210a      	movs	r1, #10
 80033ec:	48b0      	ldr	r0, [pc, #704]	; (80036b0 <FuncMenu_DrawOutputMenu+0x598>)
 80033ee:	f00a fea3 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033f2:	2300      	movs	r3, #0
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	2302      	movs	r3, #2
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033fe:	226e      	movs	r2, #110	; 0x6e
 8003400:	210a      	movs	r1, #10
 8003402:	48ac      	ldr	r0, [pc, #688]	; (80036b4 <FuncMenu_DrawOutputMenu+0x59c>)
 8003404:	f00a fe98 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003408:	2300      	movs	r3, #0
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2302      	movs	r3, #2
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003414:	2282      	movs	r2, #130	; 0x82
 8003416:	210a      	movs	r1, #10
 8003418:	48a7      	ldr	r0, [pc, #668]	; (80036b8 <FuncMenu_DrawOutputMenu+0x5a0>)
 800341a:	f00a fe8d 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800341e:	2300      	movs	r3, #0
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2302      	movs	r3, #2
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800342a:	2296      	movs	r2, #150	; 0x96
 800342c:	210a      	movs	r1, #10
 800342e:	48a3      	ldr	r0, [pc, #652]	; (80036bc <FuncMenu_DrawOutputMenu+0x5a4>)
 8003430:	f00a fe82 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003434:	2300      	movs	r3, #0
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2302      	movs	r3, #2
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003440:	22aa      	movs	r2, #170	; 0xaa
 8003442:	210a      	movs	r1, #10
 8003444:	489e      	ldr	r0, [pc, #632]	; (80036c0 <FuncMenu_DrawOutputMenu+0x5a8>)
 8003446:	f00a fe77 	bl	800e138 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800344a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	2302      	movs	r3, #2
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	22d2      	movs	r2, #210	; 0xd2
 8003458:	2105      	movs	r1, #5
 800345a:	489a      	ldr	r0, [pc, #616]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800345c:	f00a fe6c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003460:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	2302      	movs	r3, #2
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2300      	movs	r3, #0
 800346c:	22d2      	movs	r2, #210	; 0xd2
 800346e:	2161      	movs	r1, #97	; 0x61
 8003470:	4894      	ldr	r0, [pc, #592]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003472:	f00a fe61 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003476:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	2302      	movs	r3, #2
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	22d2      	movs	r2, #210	; 0xd2
 8003484:	21af      	movs	r1, #175	; 0xaf
 8003486:	488f      	ldr	r0, [pc, #572]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003488:	f00a fe56 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800348c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2302      	movs	r3, #2
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2300      	movs	r3, #0
 8003498:	22d2      	movs	r2, #210	; 0xd2
 800349a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800349e:	4889      	ldr	r0, [pc, #548]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 80034a0:	f00a fe4a 	bl	800e138 <ILI9341_Draw_Text>
				break;
 80034a4:	e262      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a6:	2300      	movs	r3, #0
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	2302      	movs	r3, #2
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034b2:	2232      	movs	r2, #50	; 0x32
 80034b4:	210a      	movs	r1, #10
 80034b6:	487c      	ldr	r0, [pc, #496]	; (80036a8 <FuncMenu_DrawOutputMenu+0x590>)
 80034b8:	f00a fe3e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034bc:	2300      	movs	r3, #0
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	2302      	movs	r3, #2
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034c8:	2246      	movs	r2, #70	; 0x46
 80034ca:	210a      	movs	r1, #10
 80034cc:	4877      	ldr	r0, [pc, #476]	; (80036ac <FuncMenu_DrawOutputMenu+0x594>)
 80034ce:	f00a fe33 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034d2:	2300      	movs	r3, #0
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	2302      	movs	r3, #2
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034de:	225a      	movs	r2, #90	; 0x5a
 80034e0:	210a      	movs	r1, #10
 80034e2:	4873      	ldr	r0, [pc, #460]	; (80036b0 <FuncMenu_DrawOutputMenu+0x598>)
 80034e4:	f00a fe28 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2302      	movs	r3, #2
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	226e      	movs	r2, #110	; 0x6e
 80034f6:	210a      	movs	r1, #10
 80034f8:	486e      	ldr	r0, [pc, #440]	; (80036b4 <FuncMenu_DrawOutputMenu+0x59c>)
 80034fa:	f00a fe1d 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2302      	movs	r3, #2
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800350a:	2282      	movs	r2, #130	; 0x82
 800350c:	210a      	movs	r1, #10
 800350e:	486a      	ldr	r0, [pc, #424]	; (80036b8 <FuncMenu_DrawOutputMenu+0x5a0>)
 8003510:	f00a fe12 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003514:	2300      	movs	r3, #0
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	2302      	movs	r3, #2
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003520:	2296      	movs	r2, #150	; 0x96
 8003522:	210a      	movs	r1, #10
 8003524:	4865      	ldr	r0, [pc, #404]	; (80036bc <FuncMenu_DrawOutputMenu+0x5a4>)
 8003526:	f00a fe07 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800352a:	2300      	movs	r3, #0
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2302      	movs	r3, #2
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003536:	22aa      	movs	r2, #170	; 0xaa
 8003538:	210a      	movs	r1, #10
 800353a:	4861      	ldr	r0, [pc, #388]	; (80036c0 <FuncMenu_DrawOutputMenu+0x5a8>)
 800353c:	f00a fdfc 	bl	800e138 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003540:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2302      	movs	r3, #2
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	22d2      	movs	r2, #210	; 0xd2
 800354e:	2105      	movs	r1, #5
 8003550:	485c      	ldr	r0, [pc, #368]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003552:	f00a fdf1 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003556:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2302      	movs	r3, #2
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	22d2      	movs	r2, #210	; 0xd2
 8003564:	2161      	movs	r1, #97	; 0x61
 8003566:	4857      	ldr	r0, [pc, #348]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003568:	f00a fde6 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800356c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2302      	movs	r3, #2
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2300      	movs	r3, #0
 8003578:	22d2      	movs	r2, #210	; 0xd2
 800357a:	21af      	movs	r1, #175	; 0xaf
 800357c:	4851      	ldr	r0, [pc, #324]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800357e:	f00a fddb 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003582:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	2302      	movs	r3, #2
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	22d2      	movs	r2, #210	; 0xd2
 8003590:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003594:	484b      	ldr	r0, [pc, #300]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003596:	f00a fdcf 	bl	800e138 <ILI9341_Draw_Text>
				break;
 800359a:	e1e7      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800359c:	2300      	movs	r3, #0
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	2302      	movs	r3, #2
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035a8:	2232      	movs	r2, #50	; 0x32
 80035aa:	210a      	movs	r1, #10
 80035ac:	483e      	ldr	r0, [pc, #248]	; (80036a8 <FuncMenu_DrawOutputMenu+0x590>)
 80035ae:	f00a fdc3 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b2:	2300      	movs	r3, #0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035be:	2246      	movs	r2, #70	; 0x46
 80035c0:	210a      	movs	r1, #10
 80035c2:	483a      	ldr	r0, [pc, #232]	; (80036ac <FuncMenu_DrawOutputMenu+0x594>)
 80035c4:	f00a fdb8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035c8:	2300      	movs	r3, #0
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	2302      	movs	r3, #2
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035d4:	225a      	movs	r2, #90	; 0x5a
 80035d6:	210a      	movs	r1, #10
 80035d8:	4835      	ldr	r0, [pc, #212]	; (80036b0 <FuncMenu_DrawOutputMenu+0x598>)
 80035da:	f00a fdad 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035de:	2300      	movs	r3, #0
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2302      	movs	r3, #2
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ea:	226e      	movs	r2, #110	; 0x6e
 80035ec:	210a      	movs	r1, #10
 80035ee:	4831      	ldr	r0, [pc, #196]	; (80036b4 <FuncMenu_DrawOutputMenu+0x59c>)
 80035f0:	f00a fda2 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035f4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	2302      	movs	r3, #2
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2300      	movs	r3, #0
 8003600:	2282      	movs	r2, #130	; 0x82
 8003602:	210a      	movs	r1, #10
 8003604:	482c      	ldr	r0, [pc, #176]	; (80036b8 <FuncMenu_DrawOutputMenu+0x5a0>)
 8003606:	f00a fd97 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800360a:	2300      	movs	r3, #0
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	2302      	movs	r3, #2
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003616:	2296      	movs	r2, #150	; 0x96
 8003618:	210a      	movs	r1, #10
 800361a:	4828      	ldr	r0, [pc, #160]	; (80036bc <FuncMenu_DrawOutputMenu+0x5a4>)
 800361c:	f00a fd8c 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003620:	2300      	movs	r3, #0
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	2302      	movs	r3, #2
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800362c:	22aa      	movs	r2, #170	; 0xaa
 800362e:	210a      	movs	r1, #10
 8003630:	4823      	ldr	r0, [pc, #140]	; (80036c0 <FuncMenu_DrawOutputMenu+0x5a8>)
 8003632:	f00a fd81 	bl	800e138 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003636:	f240 23fd 	movw	r3, #765	; 0x2fd
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	2302      	movs	r3, #2
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2300      	movs	r3, #0
 8003642:	22d2      	movs	r2, #210	; 0xd2
 8003644:	2105      	movs	r1, #5
 8003646:	481f      	ldr	r0, [pc, #124]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003648:	f00a fd76 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800364c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	2302      	movs	r3, #2
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2300      	movs	r3, #0
 8003658:	22d2      	movs	r2, #210	; 0xd2
 800365a:	2161      	movs	r1, #97	; 0x61
 800365c:	4819      	ldr	r0, [pc, #100]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800365e:	f00a fd6b 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003662:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	2302      	movs	r3, #2
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	22d2      	movs	r2, #210	; 0xd2
 8003670:	21af      	movs	r1, #175	; 0xaf
 8003672:	4814      	ldr	r0, [pc, #80]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003674:	f00a fd60 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003678:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	2302      	movs	r3, #2
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	22d2      	movs	r2, #210	; 0xd2
 8003686:	f44f 7182 	mov.w	r1, #260	; 0x104
 800368a:	480e      	ldr	r0, [pc, #56]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800368c:	f00a fd54 	bl	800e138 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003690:	2300      	movs	r3, #0
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2302      	movs	r3, #2
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800369c:	2232      	movs	r2, #50	; 0x32
 800369e:	2196      	movs	r1, #150	; 0x96
 80036a0:	4809      	ldr	r0, [pc, #36]	; (80036c8 <FuncMenu_DrawOutputMenu+0x5b0>)
 80036a2:	f00a fd49 	bl	800e138 <ILI9341_Draw_Text>
				break;
 80036a6:	e161      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
 80036a8:	08013158 	.word	0x08013158
 80036ac:	08013160 	.word	0x08013160
 80036b0:	0801316c 	.word	0x0801316c
 80036b4:	08013174 	.word	0x08013174
 80036b8:	08013180 	.word	0x08013180
 80036bc:	0801318c 	.word	0x0801318c
 80036c0:	08013194 	.word	0x08013194
 80036c4:	08013130 	.word	0x08013130
 80036c8:	0801319c 	.word	0x0801319c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036cc:	2300      	movs	r3, #0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2302      	movs	r3, #2
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d8:	2232      	movs	r2, #50	; 0x32
 80036da:	210a      	movs	r1, #10
 80036dc:	48a5      	ldr	r0, [pc, #660]	; (8003974 <FuncMenu_DrawOutputMenu+0x85c>)
 80036de:	f00a fd2b 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036e2:	2300      	movs	r3, #0
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2302      	movs	r3, #2
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ee:	2246      	movs	r2, #70	; 0x46
 80036f0:	210a      	movs	r1, #10
 80036f2:	48a1      	ldr	r0, [pc, #644]	; (8003978 <FuncMenu_DrawOutputMenu+0x860>)
 80036f4:	f00a fd20 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036f8:	2300      	movs	r3, #0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2302      	movs	r3, #2
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003704:	225a      	movs	r2, #90	; 0x5a
 8003706:	210a      	movs	r1, #10
 8003708:	489c      	ldr	r0, [pc, #624]	; (800397c <FuncMenu_DrawOutputMenu+0x864>)
 800370a:	f00a fd15 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800370e:	2300      	movs	r3, #0
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	2302      	movs	r3, #2
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800371a:	226e      	movs	r2, #110	; 0x6e
 800371c:	210a      	movs	r1, #10
 800371e:	4898      	ldr	r0, [pc, #608]	; (8003980 <FuncMenu_DrawOutputMenu+0x868>)
 8003720:	f00a fd0a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003724:	2300      	movs	r3, #0
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	2302      	movs	r3, #2
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003730:	2282      	movs	r2, #130	; 0x82
 8003732:	210a      	movs	r1, #10
 8003734:	4893      	ldr	r0, [pc, #588]	; (8003984 <FuncMenu_DrawOutputMenu+0x86c>)
 8003736:	f00a fcff 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800373a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	2302      	movs	r3, #2
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	2296      	movs	r2, #150	; 0x96
 8003748:	210a      	movs	r1, #10
 800374a:	488f      	ldr	r0, [pc, #572]	; (8003988 <FuncMenu_DrawOutputMenu+0x870>)
 800374c:	f00a fcf4 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003750:	2300      	movs	r3, #0
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2302      	movs	r3, #2
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800375c:	22aa      	movs	r2, #170	; 0xaa
 800375e:	210a      	movs	r1, #10
 8003760:	488a      	ldr	r0, [pc, #552]	; (800398c <FuncMenu_DrawOutputMenu+0x874>)
 8003762:	f00a fce9 	bl	800e138 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003766:	f240 23fd 	movw	r3, #765	; 0x2fd
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	2302      	movs	r3, #2
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2300      	movs	r3, #0
 8003772:	22d2      	movs	r2, #210	; 0xd2
 8003774:	2105      	movs	r1, #5
 8003776:	4886      	ldr	r0, [pc, #536]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 8003778:	f00a fcde 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800377c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	2302      	movs	r3, #2
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2300      	movs	r3, #0
 8003788:	22d2      	movs	r2, #210	; 0xd2
 800378a:	2161      	movs	r1, #97	; 0x61
 800378c:	4880      	ldr	r0, [pc, #512]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 800378e:	f00a fcd3 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003792:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	2302      	movs	r3, #2
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	22d2      	movs	r2, #210	; 0xd2
 80037a0:	21af      	movs	r1, #175	; 0xaf
 80037a2:	487b      	ldr	r0, [pc, #492]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 80037a4:	f00a fcc8 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80037a8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	2302      	movs	r3, #2
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2300      	movs	r3, #0
 80037b4:	22d2      	movs	r2, #210	; 0xd2
 80037b6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037ba:	4875      	ldr	r0, [pc, #468]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 80037bc:	f00a fcbc 	bl	800e138 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037c0:	2300      	movs	r3, #0
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	2302      	movs	r3, #2
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037cc:	2232      	movs	r2, #50	; 0x32
 80037ce:	2196      	movs	r1, #150	; 0x96
 80037d0:	4870      	ldr	r0, [pc, #448]	; (8003994 <FuncMenu_DrawOutputMenu+0x87c>)
 80037d2:	f00a fcb1 	bl	800e138 <ILI9341_Draw_Text>
				break;
 80037d6:	e0c9      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d8:	2300      	movs	r3, #0
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	2302      	movs	r3, #2
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e4:	2232      	movs	r2, #50	; 0x32
 80037e6:	210a      	movs	r1, #10
 80037e8:	4862      	ldr	r0, [pc, #392]	; (8003974 <FuncMenu_DrawOutputMenu+0x85c>)
 80037ea:	f00a fca5 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ee:	2300      	movs	r3, #0
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2302      	movs	r3, #2
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037fa:	2246      	movs	r2, #70	; 0x46
 80037fc:	210a      	movs	r1, #10
 80037fe:	485e      	ldr	r0, [pc, #376]	; (8003978 <FuncMenu_DrawOutputMenu+0x860>)
 8003800:	f00a fc9a 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003804:	2300      	movs	r3, #0
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	2302      	movs	r3, #2
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003810:	225a      	movs	r2, #90	; 0x5a
 8003812:	210a      	movs	r1, #10
 8003814:	4859      	ldr	r0, [pc, #356]	; (800397c <FuncMenu_DrawOutputMenu+0x864>)
 8003816:	f00a fc8f 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800381a:	2300      	movs	r3, #0
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2302      	movs	r3, #2
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003826:	226e      	movs	r2, #110	; 0x6e
 8003828:	210a      	movs	r1, #10
 800382a:	4855      	ldr	r0, [pc, #340]	; (8003980 <FuncMenu_DrawOutputMenu+0x868>)
 800382c:	f00a fc84 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003830:	2300      	movs	r3, #0
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	2302      	movs	r3, #2
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800383c:	2282      	movs	r2, #130	; 0x82
 800383e:	210a      	movs	r1, #10
 8003840:	4850      	ldr	r0, [pc, #320]	; (8003984 <FuncMenu_DrawOutputMenu+0x86c>)
 8003842:	f00a fc79 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003846:	2300      	movs	r3, #0
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	2302      	movs	r3, #2
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003852:	2296      	movs	r2, #150	; 0x96
 8003854:	210a      	movs	r1, #10
 8003856:	484c      	ldr	r0, [pc, #304]	; (8003988 <FuncMenu_DrawOutputMenu+0x870>)
 8003858:	f00a fc6e 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800385c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	2302      	movs	r3, #2
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2300      	movs	r3, #0
 8003868:	22aa      	movs	r2, #170	; 0xaa
 800386a:	210a      	movs	r1, #10
 800386c:	4847      	ldr	r0, [pc, #284]	; (800398c <FuncMenu_DrawOutputMenu+0x874>)
 800386e:	f00a fc63 	bl	800e138 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003872:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2302      	movs	r3, #2
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	22d2      	movs	r2, #210	; 0xd2
 8003880:	2105      	movs	r1, #5
 8003882:	4843      	ldr	r0, [pc, #268]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 8003884:	f00a fc58 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003888:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	2302      	movs	r3, #2
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	22d2      	movs	r2, #210	; 0xd2
 8003896:	2161      	movs	r1, #97	; 0x61
 8003898:	483d      	ldr	r0, [pc, #244]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 800389a:	f00a fc4d 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800389e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	2302      	movs	r3, #2
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2300      	movs	r3, #0
 80038aa:	22d2      	movs	r2, #210	; 0xd2
 80038ac:	21af      	movs	r1, #175	; 0xaf
 80038ae:	483a      	ldr	r0, [pc, #232]	; (8003998 <FuncMenu_DrawOutputMenu+0x880>)
 80038b0:	f00a fc42 	bl	800e138 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038b4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	2302      	movs	r3, #2
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	22d2      	movs	r2, #210	; 0xd2
 80038c2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038c6:	4832      	ldr	r0, [pc, #200]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 80038c8:	f00a fc36 	bl	800e138 <ILI9341_Draw_Text>

				if(SM_IsFuncPwmDutyMode())
 80038cc:	f002 fb84 	bl	8005fd8 <SM_IsFuncPwmDutyMode>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <FuncMenu_DrawOutputMenu+0x7d6>
					ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80038d6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2302      	movs	r3, #2
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	2232      	movs	r2, #50	; 0x32
 80038e4:	2196      	movs	r1, #150	; 0x96
 80038e6:	482d      	ldr	r0, [pc, #180]	; (800399c <FuncMenu_DrawOutputMenu+0x884>)
 80038e8:	f00a fc26 	bl	800e138 <ILI9341_Draw_Text>
 80038ec:	e00a      	b.n	8003904 <FuncMenu_DrawOutputMenu+0x7ec>
				else
					ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ee:	2300      	movs	r3, #0
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	2302      	movs	r3, #2
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038fa:	2232      	movs	r2, #50	; 0x32
 80038fc:	2196      	movs	r1, #150	; 0x96
 80038fe:	4827      	ldr	r0, [pc, #156]	; (800399c <FuncMenu_DrawOutputMenu+0x884>)
 8003900:	f00a fc1a 	bl	800e138 <ILI9341_Draw_Text>

				char duty[10] = "";
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	809a      	strh	r2, [r3, #4]
				snprintf(duty, sizeof(duty), "%0.2f%%", ((float)TIM3->CCR1 / (float)TIM3->ARR) * 100);
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <FuncMenu_DrawOutputMenu+0x888>)
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <FuncMenu_DrawOutputMenu+0x888>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800392a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80039a4 <FuncMenu_DrawOutputMenu+0x88c>
 8003932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003936:	ee17 0a90 	vmov	r0, s15
 800393a:	f7fc fe2d 	bl	8000598 <__aeabi_f2d>
 800393e:	4603      	mov	r3, r0
 8003940:	460c      	mov	r4, r1
 8003942:	f107 0008 	add.w	r0, r7, #8
 8003946:	e9cd 3400 	strd	r3, r4, [sp]
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <FuncMenu_DrawOutputMenu+0x890>)
 800394c:	210a      	movs	r1, #10
 800394e:	f00b ff97 	bl	800f880 <sniprintf>
				ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003952:	f107 0008 	add.w	r0, r7, #8
 8003956:	2300      	movs	r3, #0
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2302      	movs	r3, #2
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003962:	2232      	movs	r2, #50	; 0x32
 8003964:	21dc      	movs	r1, #220	; 0xdc
 8003966:	f00a fbe7 	bl	800e138 <ILI9341_Draw_Text>
				break;
 800396a:	bf00      	nop
		}

	}


}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	08013158 	.word	0x08013158
 8003978:	08013160 	.word	0x08013160
 800397c:	0801316c 	.word	0x0801316c
 8003980:	08013174 	.word	0x08013174
 8003984:	08013180 	.word	0x08013180
 8003988:	0801318c 	.word	0x0801318c
 800398c:	08013194 	.word	0x08013194
 8003990:	08013130 	.word	0x08013130
 8003994:	0801319c 	.word	0x0801319c
 8003998:	080131ac 	.word	0x080131ac
 800399c:	080131b4 	.word	0x080131b4
 80039a0:	40000400 	.word	0x40000400
 80039a4:	42c80000 	.word	0x42c80000
 80039a8:	080131bc 	.word	0x080131bc

080039ac <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d007      	beq.n	80039cc <GainMenu_DrawMenu+0x20>
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d008      	beq.n	80039d2 <GainMenu_DrawMenu+0x26>
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d000      	beq.n	80039c6 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 80039c4:	e008      	b.n	80039d8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80039c6:	f000 f80b 	bl	80039e0 <GainMenu_DrawMainMenu>
			break;
 80039ca:	e005      	b.n	80039d8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80039cc:	f000 f850 	bl	8003a70 <GainMenu_DrawSignalMenu>
			break;
 80039d0:	e002      	b.n	80039d8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 80039d2:	f000 f863 	bl	8003a9c <GainMenu_DrawAuxMenu>
			break;
 80039d6:	bf00      	nop

	}
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80039e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	2302      	movs	r3, #2
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2300      	movs	r3, #0
 80039f2:	220a      	movs	r2, #10
 80039f4:	210a      	movs	r1, #10
 80039f6:	481a      	ldr	r0, [pc, #104]	; (8003a60 <GainMenu_DrawMainMenu+0x80>)
 80039f8:	f00a fb9e 	bl	800e138 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80039fc:	f7fd faba 	bl	8000f74 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a00:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2302      	movs	r3, #2
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	22d2      	movs	r2, #210	; 0xd2
 8003a0e:	2105      	movs	r1, #5
 8003a10:	4814      	ldr	r0, [pc, #80]	; (8003a64 <GainMenu_DrawMainMenu+0x84>)
 8003a12:	f00a fb91 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Aux",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a16:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	2300      	movs	r3, #0
 8003a22:	22d2      	movs	r2, #210	; 0xd2
 8003a24:	2161      	movs	r1, #97	; 0x61
 8003a26:	4810      	ldr	r0, [pc, #64]	; (8003a68 <GainMenu_DrawMainMenu+0x88>)
 8003a28:	f00a fb86 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	2302      	movs	r3, #2
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2300      	movs	r3, #0
 8003a38:	22d2      	movs	r2, #210	; 0xd2
 8003a3a:	21af      	movs	r1, #175	; 0xaf
 8003a3c:	480b      	ldr	r0, [pc, #44]	; (8003a6c <GainMenu_DrawMainMenu+0x8c>)
 8003a3e:	f00a fb7b 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a42:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2302      	movs	r3, #2
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	22d2      	movs	r2, #210	; 0xd2
 8003a50:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a54:	4805      	ldr	r0, [pc, #20]	; (8003a6c <GainMenu_DrawMainMenu+0x8c>)
 8003a56:	f00a fb6f 	bl	800e138 <ILI9341_Draw_Text>
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	080131c4 	.word	0x080131c4
 8003a64:	080131d0 	.word	0x080131d0
 8003a68:	080131d8 	.word	0x080131d8
 8003a6c:	080131dc 	.word	0x080131dc

08003a70 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	220a      	movs	r2, #10
 8003a84:	210a      	movs	r1, #10
 8003a86:	4804      	ldr	r0, [pc, #16]	; (8003a98 <GainMenu_DrawSignalMenu+0x28>)
 8003a88:	f00a fb56 	bl	800e138 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a8c:	f7fd fa72 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	080131e4 	.word	0x080131e4

08003a9c <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2300      	movs	r3, #0
 8003aae:	220a      	movs	r2, #10
 8003ab0:	210a      	movs	r1, #10
 8003ab2:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <GainMenu_DrawAuxMenu+0x28>)
 8003ab4:	f00a fb40 	bl	800e138 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ab8:	f7fd fa5c 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	080131f4 	.word	0x080131f4

08003ac8 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d007      	beq.n	8003ae8 <ToplevelMenu_DrawMenu+0x20>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d008      	beq.n	8003aee <ToplevelMenu_DrawMenu+0x26>
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d000      	beq.n	8003ae2 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003ae0:	e008      	b.n	8003af4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003ae2:	f000 f80b 	bl	8003afc <ToplevelMenu_DrawMainMenu>
			break;
 8003ae6:	e005      	b.n	8003af4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003ae8:	f000 f848 	bl	8003b7c <ToplevelMenu_DrawOutputMenu>
			break;
 8003aec:	e002      	b.n	8003af4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003aee:	f000 f88f 	bl	8003c10 <ToplevelMenu_DrawInputMenu>
			break;
 8003af2:	bf00      	nop

	}
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 8003b02:	481a      	ldr	r0, [pc, #104]	; (8003b6c <ToplevelMenu_DrawMainMenu+0x70>)
 8003b04:	f00b feb4 	bl	800f870 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003b08:	f7fd fa34 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b0c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	2302      	movs	r3, #2
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	22d2      	movs	r2, #210	; 0xd2
 8003b1a:	2106      	movs	r1, #6
 8003b1c:	4814      	ldr	r0, [pc, #80]	; (8003b70 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b1e:	f00a fb0b 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b22:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	2302      	movs	r3, #2
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	22d2      	movs	r2, #210	; 0xd2
 8003b30:	215d      	movs	r1, #93	; 0x5d
 8003b32:	4810      	ldr	r0, [pc, #64]	; (8003b74 <ToplevelMenu_DrawMainMenu+0x78>)
 8003b34:	f00a fb00 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2302      	movs	r3, #2
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	22d2      	movs	r2, #210	; 0xd2
 8003b46:	21af      	movs	r1, #175	; 0xaf
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003b4a:	f00a faf5 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b4e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2302      	movs	r3, #2
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	22d2      	movs	r2, #210	; 0xd2
 8003b5c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b60:	4805      	ldr	r0, [pc, #20]	; (8003b78 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003b62:	f00a fae9 	bl	800e138 <ILI9341_Draw_Text>


}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	08013204 	.word	0x08013204
 8003b70:	08013218 	.word	0x08013218
 8003b74:	08013220 	.word	0x08013220
 8003b78:	08013228 	.word	0x08013228

08003b7c <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	2302      	movs	r3, #2
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	220a      	movs	r2, #10
 8003b90:	210a      	movs	r1, #10
 8003b92:	481a      	ldr	r0, [pc, #104]	; (8003bfc <ToplevelMenu_DrawOutputMenu+0x80>)
 8003b94:	f00a fad0 	bl	800e138 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003b98:	f7fd f9ec 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b9c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	22d2      	movs	r2, #210	; 0xd2
 8003baa:	210d      	movs	r1, #13
 8003bac:	4814      	ldr	r0, [pc, #80]	; (8003c00 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003bae:	f00a fac3 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003bb2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	22d2      	movs	r2, #210	; 0xd2
 8003bc0:	2163      	movs	r1, #99	; 0x63
 8003bc2:	4810      	ldr	r0, [pc, #64]	; (8003c04 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003bc4:	f00a fab8 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003bc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2302      	movs	r3, #2
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	22d2      	movs	r2, #210	; 0xd2
 8003bd6:	21b0      	movs	r1, #176	; 0xb0
 8003bd8:	480b      	ldr	r0, [pc, #44]	; (8003c08 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003bda:	f00a faad 	bl	800e138 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003bde:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	2302      	movs	r3, #2
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2300      	movs	r3, #0
 8003bea:	22d2      	movs	r2, #210	; 0xd2
 8003bec:	21f5      	movs	r1, #245	; 0xf5
 8003bee:	4807      	ldr	r0, [pc, #28]	; (8003c0c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003bf0:	f00a faa2 	bl	800e138 <ILI9341_Draw_Text>
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	08013230 	.word	0x08013230
 8003c00:	08013238 	.word	0x08013238
 8003c04:	08013240 	.word	0x08013240
 8003c08:	08013248 	.word	0x08013248
 8003c0c:	08013250 	.word	0x08013250

08003c10 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	220a      	movs	r2, #10
 8003c24:	210a      	movs	r1, #10
 8003c26:	4804      	ldr	r0, [pc, #16]	; (8003c38 <ToplevelMenu_DrawInputMenu+0x28>)
 8003c28:	f00a fa86 	bl	800e138 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003c2c:	f7fd f9a2 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	08013258 	.word	0x08013258

08003c3c <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <BiasMenu_getStatus+0x14>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20001e51 	.word	0x20001e51

08003c54 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuEntryHandler Event captured\n");
 8003c58:	480b      	ldr	r0, [pc, #44]	; (8003c88 <BiasMenuEntryHandler+0x34>)
 8003c5a:	f00b fe09 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8003c5e:	f7fd fc49 	bl	80014f4 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <BiasMenuEntryHandler+0x38>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <BiasMenuEntryHandler+0x3c>)
 8003c6a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003c70:	f001 f910 	bl	8004e94 <BO_GetDcBiasEncoderValue>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <BiasMenuEntryHandler+0x3c>)
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <BiasMenuEntryHandler+0x40>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003c82:	230e      	movs	r3, #14
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	08013260 	.word	0x08013260
 8003c8c:	20001e51 	.word	0x20001e51
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	20001e53 	.word	0x20001e53

08003c98 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuInputHandler Event captured\n");
 8003c9c:	4807      	ldr	r0, [pc, #28]	; (8003cbc <BiasMenuInputHandler+0x24>)
 8003c9e:	f00b fde7 	bl	800f870 <puts>
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f002 f912 	bl	8005ecc <SM_GetEncoderValue>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f8fe 	bl	8004eac <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <BiasMenuInputHandler+0x28>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003cb6:	230e      	movs	r3, #14
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	08013284 	.word	0x08013284
 8003cc0:	20001e53 	.word	0x20001e53

08003cc4 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuExitHandler Event captured\n");
 8003cc8:	4808      	ldr	r0, [pc, #32]	; (8003cec <BiasMenuExitHandler+0x28>)
 8003cca:	f00b fdd1 	bl	800f870 <puts>
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <BiasMenuExitHandler+0x2c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003cd4:	f7fd fc0e 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003cd8:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <BiasMenuExitHandler+0x30>)
 8003cda:	f00b fdc9 	bl	800f870 <puts>
	#endif

	eNewEvent = evIdle;
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <BiasMenuExitHandler+0x34>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003ce4:	2301      	movs	r3, #1
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	080132a8 	.word	0x080132a8
 8003cf0:	20001e51 	.word	0x20001e51
 8003cf4:	080132cc 	.word	0x080132cc
 8003cf8:	20001e53 	.word	0x20001e53

08003cfc <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003d00:	4bbb      	ldr	r3, [pc, #748]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b0e      	cmp	r3, #14
 8003d06:	f200 821c 	bhi.w	8004142 <EM_ProcessEvent+0x446>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <EM_ProcessEvent+0x14>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d7f 	.word	0x08003d7f
 8003d18:	08003e05 	.word	0x08003e05
 8003d1c:	08003e23 	.word	0x08003e23
 8003d20:	08003e69 	.word	0x08003e69
 8003d24:	08003e9b 	.word	0x08003e9b
 8003d28:	08003ee1 	.word	0x08003ee1
 8003d2c:	08003f2d 	.word	0x08003f2d
 8003d30:	08003f5f 	.word	0x08003f5f
 8003d34:	08004143 	.word	0x08004143
 8003d38:	08003f91 	.word	0x08003f91
 8003d3c:	08004021 	.word	0x08004021
 8003d40:	08004053 	.word	0x08004053
 8003d44:	08004083 	.word	0x08004083
 8003d48:	0800410d 	.word	0x0800410d
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003d4c:	48a9      	ldr	r0, [pc, #676]	; (8003ff4 <EM_ProcessEvent+0x2f8>)
 8003d4e:	f00b fd8f 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003d52:	4ba9      	ldr	r3, [pc, #676]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d105      	bne.n	8003d66 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003d5a:	f000 fedb 	bl	8004b14 <ToplevelOutputMenuEntryHandler>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4ba3      	ldr	r3, [pc, #652]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d64:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003d66:	4ba4      	ldr	r3, [pc, #656]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	f040 81eb 	bne.w	8004146 <EM_ProcessEvent+0x44a>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003d70:	f000 fefc 	bl	8004b6c <ToplevelInputMenuEntryHandler>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b9d      	ldr	r3, [pc, #628]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d7a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003d7c:	e1e3      	b.n	8004146 <EM_ProcessEvent+0x44a>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 8003d7e:	489f      	ldr	r0, [pc, #636]	; (8003ffc <EM_ProcessEvent+0x300>)
 8003d80:	f00b fd76 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003d84:	4b9c      	ldr	r3, [pc, #624]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b06      	cmp	r3, #6
 8003d8a:	d105      	bne.n	8003d98 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003d8c:	f000 fed8 	bl	8004b40 <ToplevelOutputMenuExitHandler>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b96      	ldr	r3, [pc, #600]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d96:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003d98:	4b97      	ldr	r3, [pc, #604]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d108      	bne.n	8003db2 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003da0:	2000      	movs	r0, #0
 8003da2:	f000 fea7 	bl	8004af4 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003da6:	f000 fc67 	bl	8004678 <FuncMainMenuEntryHandler>
 8003daa:	4603      	mov	r3, r0
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b90      	ldr	r3, [pc, #576]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003db0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003db2:	4b91      	ldr	r3, [pc, #580]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d108      	bne.n	8003dcc <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f000 fe9a 	bl	8004af4 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003dc0:	f000 fb62 	bl	8004488 <FreqMainMenuEntryHandler>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b89      	ldr	r3, [pc, #548]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003dca:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003dcc:	4b8a      	ldr	r3, [pc, #552]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d108      	bne.n	8003de6 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f000 fe8d 	bl	8004af4 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003dda:	f000 fd6d 	bl	80048b8 <GainMainMenuEntryHandler>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b83      	ldr	r3, [pc, #524]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003de4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003de6:	4b84      	ldr	r3, [pc, #528]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	f040 81ad 	bne.w	800414a <EM_ProcessEvent+0x44e>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f000 fe7f 	bl	8004af4 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003df6:	f7ff ff2d 	bl	8003c54 <BiasMenuEntryHandler>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e00:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003e02:	e1a2      	b.n	800414a <EM_ProcessEvent+0x44e>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003e04:	487e      	ldr	r0, [pc, #504]	; (8004000 <EM_ProcessEvent+0x304>)
 8003e06:	f00b fd33 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003e0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	f040 819d 	bne.w	800414e <EM_ProcessEvent+0x452>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003e14:	f000 fec0 	bl	8004b98 <ToplevelInputMenuExitHandler>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e1e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003e20:	e195      	b.n	800414e <EM_ProcessEvent+0x452>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003e22:	4878      	ldr	r0, [pc, #480]	; (8004004 <EM_ProcessEvent+0x308>)
 8003e24:	f00b fd24 	bl	800f870 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003e28:	4b73      	ldr	r3, [pc, #460]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d105      	bne.n	8003e3c <EM_ProcessEvent+0x140>
			{
				eNextState = FuncMainMenuExitHandler();
 8003e30:	f000 fc38 	bl	80046a4 <FuncMainMenuExitHandler>
 8003e34:	4603      	mov	r3, r0
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e3a:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evBlueBtn)
 8003e3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <EM_ProcessEvent+0x154>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003e44:	f000 fc4c 	bl	80046e0 <FuncSignalMenuEntryHandler>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e4e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003e50:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f040 817c 	bne.w	8004152 <EM_ProcessEvent+0x456>
			{
				eNextState = FuncAuxMenuEntryHandler();
 8003e5a:	f000 fc91 	bl	8004780 <FuncAuxMenuEntryHandler>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e64:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e66:	e174      	b.n	8004152 <EM_ProcessEvent+0x456>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 8003e68:	4867      	ldr	r0, [pc, #412]	; (8004008 <EM_ProcessEvent+0x30c>)
 8003e6a:	f00b fd01 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003e6e:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d105      	bne.n	8003e82 <EM_ProcessEvent+0x186>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003e76:	f000 fc55 	bl	8004724 <FuncSignalMenuInputHandler>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e80:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	f040 8165 	bne.w	8004156 <EM_ProcessEvent+0x45a>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003e8c:	f000 fc60 	bl	8004750 <FuncSignalMenuExitHandler>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e96:	701a      	strb	r2, [r3, #0]
			}


			break;
 8003e98:	e15d      	b.n	8004156 <EM_ProcessEvent+0x45a>

		case Func_Aux_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Aux_Menu_State\n");
 8003e9a:	485c      	ldr	r0, [pc, #368]	; (800400c <EM_ProcessEvent+0x310>)
 8003e9c:	f00b fce8 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003ea0:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d105      	bne.n	8003eb4 <EM_ProcessEvent+0x1b8>
			{
				eNextState = FuncAuxMenuInputHandler();
 8003ea8:	f000 fc8e 	bl	80047c8 <FuncAuxMenuInputHandler>
 8003eac:	4603      	mov	r3, r0
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003eb2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003eb4:	4b50      	ldr	r3, [pc, #320]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d105      	bne.n	8003ec8 <EM_ProcessEvent+0x1cc>
			{
				eNextState = FuncAuxMenuExitHandler();
 8003ebc:	f000 fcd8 	bl	8004870 <FuncAuxMenuExitHandler>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003ec6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	f040 8144 	bne.w	800415a <EM_ProcessEvent+0x45e>
			{
				eNextState = FuncAuxToggleDutyMode();
 8003ed2:	f000 fcbb 	bl	800484c <FuncAuxToggleDutyMode>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003edc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003ede:	e13c      	b.n	800415a <EM_ProcessEvent+0x45e>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003ee0:	484b      	ldr	r0, [pc, #300]	; (8004010 <EM_ProcessEvent+0x314>)
 8003ee2:	f00b fcc5 	bl	800f870 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003ee6:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d108      	bne.n	8003f00 <EM_ProcessEvent+0x204>
			{
				eNextState = GainMainMenuExitHandler();
 8003eee:	f000 fcf9 	bl	80048e4 <GainMainMenuExitHandler>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003ef8:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003efa:	2002      	movs	r0, #2
 8003efc:	f000 fdfa 	bl	8004af4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003f00:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <EM_ProcessEvent+0x218>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003f08:	f000 fd08 	bl	800491c <GainSignalMenuEntryHandler>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b37      	ldr	r3, [pc, #220]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f12:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003f14:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	f040 8120 	bne.w	800415e <EM_ProcessEvent+0x462>
			{
				eNextState = GainAuxMenuEntryHandler();
 8003f1e:	f000 fd7b 	bl	8004a18 <GainAuxMenuEntryHandler>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b32      	ldr	r3, [pc, #200]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f28:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f2a:	e118      	b.n	800415e <EM_ProcessEvent+0x462>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 8003f2c:	4839      	ldr	r0, [pc, #228]	; (8004014 <EM_ProcessEvent+0x318>)
 8003f2e:	f00b fc9f 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003f32:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d105      	bne.n	8003f46 <EM_ProcessEvent+0x24a>
			{
				eNextState = GainSignalMenuInputHandler();
 8003f3a:	f000 fd27 	bl	800498c <GainSignalMenuInputHandler>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f44:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f46:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b06      	cmp	r3, #6
 8003f4c:	f040 8109 	bne.w	8004162 <EM_ProcessEvent+0x466>
			{
				eNextState = GainSignalMenuExitHandler();
 8003f50:	f000 fd4c 	bl	80049ec <GainSignalMenuExitHandler>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f5a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f5c:	e101      	b.n	8004162 <EM_ProcessEvent+0x466>

		case Gain_Aux_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Aux_Menu_State\n");
 8003f5e:	482e      	ldr	r0, [pc, #184]	; (8004018 <EM_ProcessEvent+0x31c>)
 8003f60:	f00b fc86 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d105      	bne.n	8003f78 <EM_ProcessEvent+0x27c>
			{
				eNextState = GainAuxMenuInputHandler();
 8003f6c:	f000 fd8a 	bl	8004a84 <GainAuxMenuInputHandler>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f76:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f78:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b06      	cmp	r3, #6
 8003f7e:	f040 80f2 	bne.w	8004166 <EM_ProcessEvent+0x46a>
			{
				eNextState = GainAuxMenuExitHandler();
 8003f82:	f000 fd95 	bl	8004ab0 <GainAuxMenuExitHandler>
 8003f86:	4603      	mov	r3, r0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f8c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f8e:	e0ea      	b.n	8004166 <EM_ProcessEvent+0x46a>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003f90:	4822      	ldr	r0, [pc, #136]	; (800401c <EM_ProcessEvent+0x320>)
 8003f92:	f00b fc6d 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d108      	bne.n	8003fb0 <EM_ProcessEvent+0x2b4>
			{
				eNextState = FreqMainMenuExitHandler();
 8003f9e:	f000 fa89 	bl	80044b4 <FreqMainMenuExitHandler>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fa8:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003faa:	2002      	movs	r0, #2
 8003fac:	f000 fda2 	bl	8004af4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <EM_ProcessEvent+0x2c8>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003fb8:	f000 fa9e 	bl	80044f8 <FreqPresetMenuEntryHandler>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fc2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d105      	bne.n	8003fd8 <EM_ProcessEvent+0x2dc>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003fcc:	f000 faf2 	bl	80045b4 <FreqAdjustMenuEntryHandler>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fd6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	f040 80c4 	bne.w	800416a <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003fe2:	f000 f8e9 	bl	80041b8 <FreqSweepMenuEntryHandler>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b01      	ldr	r3, [pc, #4]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fec:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003fee:	e0bc      	b.n	800416a <EM_ProcessEvent+0x46e>
 8003ff0:	20001e52 	.word	0x20001e52
 8003ff4:	080132e4 	.word	0x080132e4
 8003ff8:	20001e53 	.word	0x20001e53
 8003ffc:	080132f0 	.word	0x080132f0
 8004000:	0801330c 	.word	0x0801330c
 8004004:	08013328 	.word	0x08013328
 8004008:	08013340 	.word	0x08013340
 800400c:	08013358 	.word	0x08013358
 8004010:	0801336c 	.word	0x0801336c
 8004014:	08013384 	.word	0x08013384
 8004018:	0801339c 	.word	0x0801339c
 800401c:	080133b0 	.word	0x080133b0

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8004020:	4857      	ldr	r0, [pc, #348]	; (8004180 <EM_ProcessEvent+0x484>)
 8004022:	f00b fc25 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004026:	4b57      	ldr	r3, [pc, #348]	; (8004184 <EM_ProcessEvent+0x488>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d105      	bne.n	800403a <EM_ProcessEvent+0x33e>
			{
				eNextState = FreqPresetMenuInputHandler();
 800402e:	f000 fa95 	bl	800455c <FreqPresetMenuInputHandler>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	4b54      	ldr	r3, [pc, #336]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004038:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800403a:	4b52      	ldr	r3, [pc, #328]	; (8004184 <EM_ProcessEvent+0x488>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b06      	cmp	r3, #6
 8004040:	f040 8095 	bne.w	800416e <EM_ProcessEvent+0x472>
			{
				eNextState = FreqPresetMenuExitHandler();
 8004044:	f000 faa0 	bl	8004588 <FreqPresetMenuExitHandler>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	4b4e      	ldr	r3, [pc, #312]	; (8004188 <EM_ProcessEvent+0x48c>)
 800404e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004050:	e08d      	b.n	800416e <EM_ProcessEvent+0x472>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8004052:	484e      	ldr	r0, [pc, #312]	; (800418c <EM_ProcessEvent+0x490>)
 8004054:	f00b fc0c 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004058:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <EM_ProcessEvent+0x488>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b05      	cmp	r3, #5
 800405e:	d105      	bne.n	800406c <EM_ProcessEvent+0x370>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8004060:	f000 faca 	bl	80045f8 <FreqAdjustMenuInputHandler>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	4b47      	ldr	r3, [pc, #284]	; (8004188 <EM_ProcessEvent+0x48c>)
 800406a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800406c:	4b45      	ldr	r3, [pc, #276]	; (8004184 <EM_ProcessEvent+0x488>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b06      	cmp	r3, #6
 8004072:	d17e      	bne.n	8004172 <EM_ProcessEvent+0x476>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8004074:	f000 fad2 	bl	800461c <FreqAdjustMenuExitHandler>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	4b42      	ldr	r3, [pc, #264]	; (8004188 <EM_ProcessEvent+0x48c>)
 800407e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004080:	e077      	b.n	8004172 <EM_ProcessEvent+0x476>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8004082:	4843      	ldr	r0, [pc, #268]	; (8004190 <EM_ProcessEvent+0x494>)
 8004084:	f00b fbf4 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8004088:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <EM_ProcessEvent+0x488>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <EM_ProcessEvent+0x3a2>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004090:	2007      	movs	r0, #7
 8004092:	f000 f8ed 	bl	8004270 <FreqSweepMenuInputHandler>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <EM_ProcessEvent+0x48c>)
 800409c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800409e:	4b39      	ldr	r3, [pc, #228]	; (8004184 <EM_ProcessEvent+0x488>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d106      	bne.n	80040b4 <EM_ProcessEvent+0x3b8>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 80040a6:	2008      	movs	r0, #8
 80040a8:	f000 f8e2 	bl	8004270 <FreqSweepMenuInputHandler>
 80040ac:	4603      	mov	r3, r0
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040b2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80040b4:	4b33      	ldr	r3, [pc, #204]	; (8004184 <EM_ProcessEvent+0x488>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d106      	bne.n	80040ca <EM_ProcessEvent+0x3ce>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80040bc:	2009      	movs	r0, #9
 80040be:	f000 f8d7 	bl	8004270 <FreqSweepMenuInputHandler>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b30      	ldr	r3, [pc, #192]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040c8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <EM_ProcessEvent+0x488>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d106      	bne.n	80040e0 <EM_ProcessEvent+0x3e4>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80040d2:	200a      	movs	r0, #10
 80040d4:	f000 f8cc 	bl	8004270 <FreqSweepMenuInputHandler>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040de:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 80040e0:	4b28      	ldr	r3, [pc, #160]	; (8004184 <EM_ProcessEvent+0x488>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d106      	bne.n	80040f6 <EM_ProcessEvent+0x3fa>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80040e8:	200b      	movs	r0, #11
 80040ea:	f000 f8c1 	bl	8004270 <FreqSweepMenuInputHandler>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b25      	ldr	r3, [pc, #148]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040f4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040f6:	4b23      	ldr	r3, [pc, #140]	; (8004184 <EM_ProcessEvent+0x488>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d13b      	bne.n	8004176 <EM_ProcessEvent+0x47a>
			{
				eNextState = FreqSweepMenuExitHandler();
 80040fe:	f000 f99f 	bl	8004440 <FreqSweepMenuExitHandler>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004108:	701a      	strb	r2, [r3, #0]
			}

			break;
 800410a:	e034      	b.n	8004176 <EM_ProcessEvent+0x47a>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 800410c:	4821      	ldr	r0, [pc, #132]	; (8004194 <EM_ProcessEvent+0x498>)
 800410e:	f00b fbaf 	bl	800f870 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <EM_ProcessEvent+0x488>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b05      	cmp	r3, #5
 8004118:	d105      	bne.n	8004126 <EM_ProcessEvent+0x42a>
			{
				eNextState = BiasMenuInputHandler();
 800411a:	f7ff fdbd 	bl	8003c98 <BiasMenuInputHandler>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	4b19      	ldr	r3, [pc, #100]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004124:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004126:	4b17      	ldr	r3, [pc, #92]	; (8004184 <EM_ProcessEvent+0x488>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d125      	bne.n	800417a <EM_ProcessEvent+0x47e>
			{
				eNextState = BiasMenuExitHandler();
 800412e:	f7ff fdc9 	bl	8003cc4 <BiasMenuExitHandler>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004138:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800413a:	2002      	movs	r0, #2
 800413c:	f000 fcda 	bl	8004af4 <ToplevelMenu_setStatus>
			}

			break;
 8004140:	e01b      	b.n	800417a <EM_ProcessEvent+0x47e>

		default:
			break;
 8004142:	bf00      	nop
 8004144:	e01a      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004146:	bf00      	nop
 8004148:	e018      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800414a:	bf00      	nop
 800414c:	e016      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800414e:	bf00      	nop
 8004150:	e014      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004152:	bf00      	nop
 8004154:	e012      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004156:	bf00      	nop
 8004158:	e010      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800415a:	bf00      	nop
 800415c:	e00e      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800415e:	bf00      	nop
 8004160:	e00c      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004162:	bf00      	nop
 8004164:	e00a      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004166:	bf00      	nop
 8004168:	e008      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800416a:	bf00      	nop
 800416c:	e006      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800417a:	bf00      	nop
	}

}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	080133c8 	.word	0x080133c8
 8004184:	20001e53 	.word	0x20001e53
 8004188:	20001e52 	.word	0x20001e52
 800418c:	080133e0 	.word	0x080133e0
 8004190:	080133f8 	.word	0x080133f8
 8004194:	08013410 	.word	0x08013410

08004198 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <EM_SetNewEvent+0x1c>)
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	7013      	strb	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20001e53 	.word	0x20001e53

080041b8 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 80041bc:	4825      	ldr	r0, [pc, #148]	; (8004254 <FreqSweepMenuEntryHandler+0x9c>)
 80041be:	f00b fb57 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 80041c2:	f7fd f997 	bl	80014f4 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <FreqSweepMenuEntryHandler+0xa0>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <FreqSweepMenuEntryHandler+0xa4>)
 80041d4:	edd3 7a00 	vldr	s15, [r3]
 80041d8:	eeb4 7a67 	vcmp.f32	s14, s15
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	d008      	beq.n	80041f4 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <FreqSweepMenuEntryHandler+0xa0>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <FreqSweepMenuEntryHandler+0xa4>)
 80041f0:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <FreqSweepMenuEntryHandler+0xa4>)
 80041f6:	edd3 7a00 	vldr	s15, [r3]
 80041fa:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80041fe:	eef4 7a47 	vcmp.f32	s15, s14
 8004202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004206:	d101      	bne.n	800420c <FreqSweepMenuEntryHandler+0x54>
	{
		FS_SetSweepModeDown();
 8004208:	f001 f82c 	bl	8005264 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 800420c:	2000      	movs	r0, #0
 800420e:	f001 f883 	bl	8005318 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004212:	2000      	movs	r0, #0
 8004214:	f001 f8e0 	bl	80053d8 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004218:	f001 f91a 	bl	8005450 <FS_GetCalculatedSweepFrequencyInHertz>
 800421c:	eef0 7a40 	vmov.f32	s15, s0
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <FreqSweepMenuEntryHandler+0xa8>)
 8004222:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <FreqSweepMenuEntryHandler+0xac>)
 8004228:	2200      	movs	r2, #0
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 800422c:	2009      	movs	r0, #9
 800422e:	f000 f81f 	bl	8004270 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <FreqSweepMenuEntryHandler+0xac>)
 8004234:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <FreqSweepMenuEntryHandler+0xac>)
 800423c:	2200      	movs	r2, #0
 800423e:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <FreqSweepMenuEntryHandler+0xb0>)
 8004242:	2204      	movs	r2, #4
 8004244:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <FreqSweepMenuEntryHandler+0xb4>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800424c:	230d      	movs	r3, #13
}
 800424e:	4618      	mov	r0, r3
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	08013420 	.word	0x08013420
 8004258:	40013400 	.word	0x40013400
 800425c:	20000124 	.word	0x20000124
 8004260:	20001ea8 	.word	0x20001ea8
 8004264:	40000c00 	.word	0x40000c00
 8004268:	20001e56 	.word	0x20001e56
 800426c:	20001e53 	.word	0x20001e53

08004270 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 800427a:	4865      	ldr	r0, [pc, #404]	; (8004410 <FreqSweepMenuInputHandler+0x1a0>)
 800427c:	f00b faf8 	bl	800f870 <puts>
	#endif



	switch(pEvent)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	3b07      	subs	r3, #7
 8004284:	2b04      	cmp	r3, #4
 8004286:	f200 80ba 	bhi.w	80043fe <FreqSweepMenuInputHandler+0x18e>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <FreqSweepMenuInputHandler+0x20>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a5 	.word	0x080042a5
 8004294:	080042c5 	.word	0x080042c5
 8004298:	080043ef 	.word	0x080043ef
 800429c:	080043f7 	.word	0x080043f7
 80042a0:	08004305 	.word	0x08004305
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 80042a4:	485b      	ldr	r0, [pc, #364]	; (8004414 <FreqSweepMenuInputHandler+0x1a4>)
 80042a6:	f00b fae3 	bl	800f870 <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 80042aa:	4b5b      	ldr	r3, [pc, #364]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4a5a      	ldr	r2, [pc, #360]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042b0:	f083 0301 	eor.w	r3, r3, #1
 80042b4:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 80042b6:	4b58      	ldr	r3, [pc, #352]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a57      	ldr	r2, [pc, #348]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042bc:	f083 0301 	eor.w	r3, r3, #1
 80042c0:	6013      	str	r3, [r2, #0]
			break;
 80042c2:	e09d      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 80042c4:	4855      	ldr	r0, [pc, #340]	; (800441c <FreqSweepMenuInputHandler+0x1ac>)
 80042c6:	f00b fad3 	bl	800f870 <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 80042ca:	4b55      	ldr	r3, [pc, #340]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f083 0301 	eor.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b52      	ldr	r3, [pc, #328]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 80042d6:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 80042d8:	4b51      	ldr	r3, [pc, #324]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d004      	beq.n	80042ea <FreqSweepMenuInputHandler+0x7a>
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d008      	beq.n	80042f6 <FreqSweepMenuInputHandler+0x86>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <FreqSweepMenuInputHandler+0x80>
 80042e8:	e006      	b.n	80042f8 <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 80042ea:	f000 ffbb 	bl	8005264 <FS_SetSweepModeDown>
					break;
 80042ee:	e003      	b.n	80042f8 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 80042f0:	f000 ffe8 	bl	80052c4 <FS_SetSweepModeUp>
					break;
 80042f4:	e000      	b.n	80042f8 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 80042f6:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 80042f8:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <FreqSweepMenuInputHandler+0x1b4>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f80b 	bl	8005318 <FS_SetEncoderControlMode>

			break;
 8004302:	e07d      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8004304:	4848      	ldr	r0, [pc, #288]	; (8004428 <FreqSweepMenuInputHandler+0x1b8>)
 8004306:	f00b fab3 	bl	800f870 <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 800430a:	4b46      	ldr	r3, [pc, #280]	; (8004424 <FreqSweepMenuInputHandler+0x1b4>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <FreqSweepMenuInputHandler+0xa8>
 8004312:	2b01      	cmp	r3, #1
 8004314:	d00b      	beq.n	800432e <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004316:	e073      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004318:	2000      	movs	r0, #0
 800431a:	f001 f85d 	bl	80053d8 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 800431e:	f001 f897 	bl	8005450 <FS_GetCalculatedSweepFrequencyInHertz>
 8004322:	eef0 7a40 	vmov.f32	s15, s0
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <FreqSweepMenuInputHandler+0x1bc>)
 8004328:	edc3 7a00 	vstr	s15, [r3]
					break;
 800432c:	e05e      	b.n	80043ec <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 800432e:	4b3c      	ldr	r3, [pc, #240]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <FreqSweepMenuInputHandler+0xcc>
 8004336:	2b01      	cmp	r3, #1
 8004338:	d02a      	beq.n	8004390 <FreqSweepMenuInputHandler+0x120>
							break;
 800433a:	e056      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 800433c:	4b3c      	ldr	r3, [pc, #240]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d803      	bhi.n	800434c <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004344:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 8004346:	220d      	movs	r2, #13
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800434a:	e04e      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 800434c:	4b38      	ldr	r3, [pc, #224]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004358:	4b36      	ldr	r3, [pc, #216]	; (8004434 <FreqSweepMenuInputHandler+0x1c4>)
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004366:	dd09      	ble.n	800437c <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8004368:	4b32      	ldr	r3, [pc, #200]	; (8004434 <FreqSweepMenuInputHandler+0x1c4>)
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	4b30      	ldr	r3, [pc, #192]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 8004370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004374:	ee17 2a90 	vmov	r2, s15
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800437a:	e036      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 800437c:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004388:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <FreqSweepMenuInputHandler+0x1c8>)
 800438a:	edc3 7a00 	vstr	s15, [r3]
							break;
 800438e:	e02c      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004390:	4b27      	ldr	r3, [pc, #156]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004398:	4293      	cmp	r3, r2
 800439a:	d904      	bls.n	80043a6 <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 800439c:	4b24      	ldr	r3, [pc, #144]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800439e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80043a4:	e020      	b.n	80043e8 <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <FreqSweepMenuInputHandler+0x1c8>)
 80043b4:	edd3 7a00 	vldr	s15, [r3]
 80043b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d509      	bpl.n	80043d6 <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <FreqSweepMenuInputHandler+0x1c8>)
 80043c4:	edd3 7a00 	vldr	s15, [r3]
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 80043ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ce:	ee17 2a90 	vmov	r2, s15
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80043d4:	e008      	b.n	80043e8 <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 80043d6:	4b16      	ldr	r3, [pc, #88]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <FreqSweepMenuInputHandler+0x1c4>)
 80043e4:	edc3 7a00 	vstr	s15, [r3]
							break;
 80043e8:	bf00      	nop
					break;
 80043ea:	bf00      	nop
			break;
 80043ec:	e008      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f000 ff92 	bl	8005318 <FS_SetEncoderControlMode>

			break;
 80043f4:	e004      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 80043f6:	2001      	movs	r0, #1
 80043f8:	f000 ff8e 	bl	8005318 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 80043fc:	e000      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 80043fe:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <FreqSweepMenuInputHandler+0x1cc>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004406:	230d      	movs	r3, #13
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	08013444 	.word	0x08013444
 8004414:	08013470 	.word	0x08013470
 8004418:	40000c00 	.word	0x40000c00
 800441c:	08013488 	.word	0x08013488
 8004420:	20001e54 	.word	0x20001e54
 8004424:	20001e55 	.word	0x20001e55
 8004428:	080134a0 	.word	0x080134a0
 800442c:	20001ea8 	.word	0x20001ea8
 8004430:	40012c00 	.word	0x40012c00
 8004434:	20000124 	.word	0x20000124
 8004438:	20000120 	.word	0x20000120
 800443c:	20001e53 	.word	0x20001e53

08004440 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8004444:	480c      	ldr	r0, [pc, #48]	; (8004478 <FreqSweepMenuExitHandler+0x38>)
 8004446:	f00b fa13 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 800444a:	f7fd f853 	bl	80014f4 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a07      	ldr	r2, [pc, #28]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <FreqSweepMenuExitHandler+0x40>)
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <FreqSweepMenuExitHandler+0x44>)
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004472:	230a      	movs	r3, #10
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	080134b8 	.word	0x080134b8
 800447c:	40000c00 	.word	0x40000c00
 8004480:	20001e56 	.word	0x20001e56
 8004484:	20001e53 	.word	0x20001e53

08004488 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 800448c:	4806      	ldr	r0, [pc, #24]	; (80044a8 <FreqMainMenuEntryHandler+0x20>)
 800448e:	f00b f9ef 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004492:	f7fd f82f 	bl	80014f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <FreqMainMenuEntryHandler+0x24>)
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <FreqMainMenuEntryHandler+0x28>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80044a2:	230a      	movs	r3, #10
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	080134e0 	.word	0x080134e0
 80044ac:	20001e56 	.word	0x20001e56
 80044b0:	20001e53 	.word	0x20001e53

080044b4 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 80044b8:	480a      	ldr	r0, [pc, #40]	; (80044e4 <FreqMainMenuExitHandler+0x30>)
 80044ba:	f00b f9d9 	bl	800f870 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <FreqMainMenuExitHandler+0x34>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <FreqMainMenuExitHandler+0x38>)
 80044c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 80044cc:	f7fd f812 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 80044d0:	4807      	ldr	r0, [pc, #28]	; (80044f0 <FreqMainMenuExitHandler+0x3c>)
 80044d2:	f00b f9cd 	bl	800f870 <puts>
	#endif

	eNewEvent = evIdle;
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <FreqMainMenuExitHandler+0x40>)
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80044dc:	2301      	movs	r3, #1
}
 80044de:	4618      	mov	r0, r3
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	08013530 	.word	0x08013530
 80044e8:	20001e56 	.word	0x20001e56
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	08013558 	.word	0x08013558
 80044f4:	20001e53 	.word	0x20001e53

080044f8 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 80044fe:	4812      	ldr	r0, [pc, #72]	; (8004548 <FreqPresetMenuEntryHandler+0x50>)
 8004500:	f00b f9b6 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004504:	f7fc fff6 	bl	80014f4 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004508:	f000 fea0 	bl	800524c <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <FreqPresetMenuEntryHandler+0x54>)
 800450e:	2202      	movs	r2, #2
 8004510:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004512:	f000 fe4d 	bl	80051b0 <FreqO_GetFPresetObject>
 8004516:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <FreqPresetMenuEntryHandler+0x38>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <FreqPresetMenuEntryHandler+0x58>)
 8004520:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <FreqPresetMenuEntryHandler+0x58>)
 8004528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c
 800452e:	e002      	b.n	8004536 <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004530:	4808      	ldr	r0, [pc, #32]	; (8004554 <FreqPresetMenuEntryHandler+0x5c>)
 8004532:	f7fd f825 	bl	8001580 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004536:	4b08      	ldr	r3, [pc, #32]	; (8004558 <FreqPresetMenuEntryHandler+0x60>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800453c:	230b      	movs	r3, #11
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	08013570 	.word	0x08013570
 800454c:	20001e56 	.word	0x20001e56
 8004550:	40012c00 	.word	0x40012c00
 8004554:	0801359c 	.word	0x0801359c
 8004558:	20001e53 	.word	0x20001e53

0800455c <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8004560:	4807      	ldr	r0, [pc, #28]	; (8004580 <FreqPresetMenuInputHandler+0x24>)
 8004562:	f00b f985 	bl	800f870 <puts>
	#endif

	FreqO_MapEncoderPositionToBothOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004566:	2001      	movs	r0, #1
 8004568:	f001 fcb0 	bl	8005ecc <SM_GetEncoderValue>
 800456c:	4603      	mov	r3, r0
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fd70 	bl	8005054 <FreqO_MapEncoderPositionToBothOutput>

	// stay in this state
	eNewEvent = evIdle;
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <FreqPresetMenuInputHandler+0x28>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800457a:	230b      	movs	r3, #11
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	080135d8 	.word	0x080135d8
 8004584:	20001e53 	.word	0x20001e53

08004588 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 800458c:	4806      	ldr	r0, [pc, #24]	; (80045a8 <FreqPresetMenuExitHandler+0x20>)
 800458e:	f00b f96f 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004592:	f7fc ffaf 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <FreqPresetMenuExitHandler+0x24>)
 8004598:	2201      	movs	r2, #1
 800459a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <FreqPresetMenuExitHandler+0x28>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80045a2:	230a      	movs	r3, #10
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	08013604 	.word	0x08013604
 80045ac:	20001e56 	.word	0x20001e56
 80045b0:	20001e53 	.word	0x20001e53

080045b4 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 80045b8:	480a      	ldr	r0, [pc, #40]	; (80045e4 <FreqAdjustMenuEntryHandler+0x30>)
 80045ba:	f00b f959 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 80045be:	f7fc ff99 	bl	80014f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <FreqAdjustMenuEntryHandler+0x34>)
 80045c4:	2203      	movs	r2, #3
 80045c6:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80045c8:	4b08      	ldr	r3, [pc, #32]	; (80045ec <FreqAdjustMenuEntryHandler+0x38>)
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <FreqAdjustMenuEntryHandler+0x3c>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <FreqAdjustMenuEntryHandler+0x3c>)
 80045d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <FreqAdjustMenuEntryHandler+0x40>)
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80045de:	230c      	movs	r3, #12
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	08013630 	.word	0x08013630
 80045e8:	20001e56 	.word	0x20001e56
 80045ec:	40013400 	.word	0x40013400
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	20001e53 	.word	0x20001e53

080045f8 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 80045fc:	4805      	ldr	r0, [pc, #20]	; (8004614 <FreqAdjustMenuInputHandler+0x1c>)
 80045fe:	f00b f937 	bl	800f870 <puts>
	#endif

	FreqO_AdjustFreq();
 8004602:	f000 fda7 	bl	8005154 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <FreqAdjustMenuInputHandler+0x20>)
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800460c:	230c      	movs	r3, #12
}
 800460e:	4618      	mov	r0, r3
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	08013444 	.word	0x08013444
 8004618:	20001e53 	.word	0x20001e53

0800461c <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8004620:	4806      	ldr	r0, [pc, #24]	; (800463c <FreqAdjustMenuExitHandler+0x20>)
 8004622:	f00b f925 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004626:	f7fc ff65 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <FreqAdjustMenuExitHandler+0x24>)
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <FreqAdjustMenuExitHandler+0x28>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004636:	230a      	movs	r3, #10
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	0801365c 	.word	0x0801365c
 8004640:	20001e56 	.word	0x20001e56
 8004644:	20001e53 	.word	0x20001e53

08004648 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <FreqMenu_getStatus+0x14>)
 800464e:	781b      	ldrb	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20001e56 	.word	0x20001e56

08004660 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <FuncMenu_getStatus+0x14>)
 8004666:	781b      	ldrb	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20001e57 	.word	0x20001e57

08004678 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuEntryHandler Event captured\n");
 800467c:	4806      	ldr	r0, [pc, #24]	; (8004698 <FuncMainMenuEntryHandler+0x20>)
 800467e:	f00b f8f7 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004682:	f7fc ff37 	bl	80014f4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <FuncMainMenuEntryHandler+0x24>)
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <FuncMainMenuEntryHandler+0x28>)
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004692:	2303      	movs	r3, #3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	08013688 	.word	0x08013688
 800469c:	20001e57 	.word	0x20001e57
 80046a0:	20001e53 	.word	0x20001e53

080046a4 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuExitHandler Event captured\n");
 80046a8:	4809      	ldr	r0, [pc, #36]	; (80046d0 <FuncMainMenuExitHandler+0x2c>)
 80046aa:	f00b f8e1 	bl	800f870 <puts>
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <FuncMainMenuExitHandler+0x30>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80046b4:	2002      	movs	r0, #2
 80046b6:	f000 fa1d 	bl	8004af4 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 80046ba:	f7fc ff1b 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 80046be:	4806      	ldr	r0, [pc, #24]	; (80046d8 <FuncMainMenuExitHandler+0x34>)
 80046c0:	f00b f8d6 	bl	800f870 <puts>
	#endif

	eNewEvent = evIdle;
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <FuncMainMenuExitHandler+0x38>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80046ca:	2301      	movs	r3, #1
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	080136d8 	.word	0x080136d8
 80046d4:	20001e57 	.word	0x20001e57
 80046d8:	08013700 	.word	0x08013700
 80046dc:	20001e53 	.word	0x20001e53

080046e0 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuEntryHandler Event captured\n");
 80046e4:	480b      	ldr	r0, [pc, #44]	; (8004714 <FuncSignalMenuEntryHandler+0x34>)
 80046e6:	f00b f8c3 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 80046ea:	f7fc ff03 	bl	80014f4 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 80046ee:	f000 fedd 	bl	80054ac <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <FuncSignalMenuEntryHandler+0x38>)
 80046f4:	2202      	movs	r2, #2
 80046f6:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 80046f8:	4b08      	ldr	r3, [pc, #32]	; (800471c <FuncSignalMenuEntryHandler+0x3c>)
 80046fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <FuncSignalMenuEntryHandler+0x3c>)
 8004702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <FuncSignalMenuEntryHandler+0x40>)
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 800470e:	2304      	movs	r3, #4
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	08013718 	.word	0x08013718
 8004718:	20001e57 	.word	0x20001e57
 800471c:	40012c00 	.word	0x40012c00
 8004720:	20001e53 	.word	0x20001e53

08004724 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuInputHandler Event captured\n");
 8004728:	4807      	ldr	r0, [pc, #28]	; (8004748 <FuncSignalMenuInputHandler+0x24>)
 800472a:	f00b f8a1 	bl	800f870 <puts>
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800472e:	2001      	movs	r0, #1
 8004730:	f001 fbcc 	bl	8005ecc <SM_GetEncoderValue>
 8004734:	4603      	mov	r3, r0
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fec4 	bl	80054c4 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <FuncSignalMenuInputHandler+0x28>)
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004742:	2304      	movs	r3, #4
}
 8004744:	4618      	mov	r0, r3
 8004746:	bd80      	pop	{r7, pc}
 8004748:	08013744 	.word	0x08013744
 800474c:	20001e53 	.word	0x20001e53

08004750 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuExitHandler Event captured\n");
 8004754:	4807      	ldr	r0, [pc, #28]	; (8004774 <FuncSignalMenuExitHandler+0x24>)
 8004756:	f00b f88b 	bl	800f870 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <FuncSignalMenuExitHandler+0x28>)
 800475c:	2201      	movs	r2, #1
 800475e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004760:	f7fc fec8 	bl	80014f4 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004764:	f001 fc54 	bl	8006010 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <FuncSignalMenuExitHandler+0x2c>)
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800476e:	2303      	movs	r3, #3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	08013770 	.word	0x08013770
 8004778:	20001e57 	.word	0x20001e57
 800477c:	20001e53 	.word	0x20001e53

08004780 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncAuxMenuEntryHandler Event captured\n");
 8004784:	480b      	ldr	r0, [pc, #44]	; (80047b4 <FuncAuxMenuEntryHandler+0x34>)
 8004786:	f00b f873 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 800478a:	f7fc feb3 	bl	80014f4 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 800478e:	f000 fe8d 	bl	80054ac <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <FuncAuxMenuEntryHandler+0x38>)
 8004794:	2203      	movs	r2, #3
 8004796:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8004798:	4b08      	ldr	r3, [pc, #32]	; (80047bc <FuncAuxMenuEntryHandler+0x3c>)
 800479a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800479e:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <FuncAuxMenuEntryHandler+0x3c>)
 80047a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <FuncAuxMenuEntryHandler+0x40>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80047ae:	2305      	movs	r3, #5
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	0801379c 	.word	0x0801379c
 80047b8:	20001e57 	.word	0x20001e57
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	20001e53 	.word	0x20001e53
 80047c4:	00000000 	.word	0x00000000

080047c8 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncAuxMenuInputHandler Event captured\n");
 80047ce:	481c      	ldr	r0, [pc, #112]	; (8004840 <FuncAuxMenuInputHandler+0x78>)
 80047d0:	f00b f84e 	bl	800f870 <puts>
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 80047d4:	f001 fc00 	bl	8005fd8 <SM_IsFuncPwmDutyMode>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01a      	beq.n	8004814 <FuncAuxMenuInputHandler+0x4c>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80047de:	2000      	movs	r0, #0
 80047e0:	f001 fb74 	bl	8005ecc <SM_GetEncoderValue>
 80047e4:	4603      	mov	r3, r0
 80047e6:	80fb      	strh	r3, [r7, #6]
		TIM3->CCR1 = (pow(enc_value, 2));
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fb feb2 	bl	8000554 <__aeabi_ui2d>
 80047f0:	4603      	mov	r3, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004838 <FuncAuxMenuInputHandler+0x70>
 80047f8:	ec44 3b10 	vmov	d0, r3, r4
 80047fc:	f00d f810 	bl	8011820 <pow>
 8004800:	ec53 2b10 	vmov	r2, r3, d0
 8004804:	4c0f      	ldr	r4, [pc, #60]	; (8004844 <FuncAuxMenuInputHandler+0x7c>)
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	f7fc f9f5 	bl	8000bf8 <__aeabi_d2uiz>
 800480e:	4603      	mov	r3, r0
 8004810:	6363      	str	r3, [r4, #52]	; 0x34
 8004812:	e006      	b.n	8004822 <FuncAuxMenuInputHandler+0x5a>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_FORWARD));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004814:	2001      	movs	r0, #1
 8004816:	f001 fb59 	bl	8005ecc <SM_GetEncoderValue>
 800481a:	4603      	mov	r3, r0
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fe8b 	bl	8005538 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <FuncAuxMenuInputHandler+0x80>)
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004828:	2305      	movs	r3, #5
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	bf00      	nop
 8004834:	f3af 8000 	nop.w
 8004838:	00000000 	.word	0x00000000
 800483c:	40000000 	.word	0x40000000
 8004840:	080137c4 	.word	0x080137c4
 8004844:	40000400 	.word	0x40000400
 8004848:	20001e53 	.word	0x20001e53

0800484c <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8004850:	f001 fbce 	bl	8005ff0 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <FuncAuxToggleDutyMode+0x1c>)
 8004856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <FuncAuxToggleDutyMode+0x20>)
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004862:	2305      	movs	r3, #5
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40012c00 	.word	0x40012c00
 800486c:	20001e53 	.word	0x20001e53

08004870 <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncAuxMenuExitHandler Event captured\n");
 8004874:	4807      	ldr	r0, [pc, #28]	; (8004894 <FuncAuxMenuExitHandler+0x24>)
 8004876:	f00a fffb 	bl	800f870 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <FuncAuxMenuExitHandler+0x28>)
 800487c:	2201      	movs	r2, #1
 800487e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004880:	f001 fbc6 	bl	8006010 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 8004884:	f7fc fe36 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004888:	4b04      	ldr	r3, [pc, #16]	; (800489c <FuncAuxMenuExitHandler+0x2c>)
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800488e:	2303      	movs	r3, #3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	080137ec 	.word	0x080137ec
 8004898:	20001e57 	.word	0x20001e57
 800489c:	20001e53 	.word	0x20001e53

080048a0 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 80048a4:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <GainMenu_getStatus+0x14>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20001e58 	.word	0x20001e58

080048b8 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuEntryHandler Event captured\n");
 80048bc:	4806      	ldr	r0, [pc, #24]	; (80048d8 <GainMainMenuEntryHandler+0x20>)
 80048be:	f00a ffd7 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 80048c2:	f7fc fe17 	bl	80014f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <GainMainMenuEntryHandler+0x24>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <GainMainMenuEntryHandler+0x28>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80048d2:	2306      	movs	r3, #6
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	08013814 	.word	0x08013814
 80048dc:	20001e58 	.word	0x20001e58
 80048e0:	20001e53 	.word	0x20001e53

080048e4 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuExitHandler Event captured\n");
 80048e8:	4808      	ldr	r0, [pc, #32]	; (800490c <GainMainMenuExitHandler+0x28>)
 80048ea:	f00a ffc1 	bl	800f870 <puts>
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <GainMainMenuExitHandler+0x2c>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80048f4:	f7fc fdfe 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 80048f8:	4806      	ldr	r0, [pc, #24]	; (8004914 <GainMainMenuExitHandler+0x30>)
 80048fa:	f00a ffb9 	bl	800f870 <puts>
	#endif

	eNewEvent = evIdle;
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <GainMainMenuExitHandler+0x34>)
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004904:	2301      	movs	r3, #1
}
 8004906:	4618      	mov	r0, r3
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	08013864 	.word	0x08013864
 8004910:	20001e58 	.word	0x20001e58
 8004914:	0801388c 	.word	0x0801388c
 8004918:	20001e53 	.word	0x20001e53

0800491c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuEntryHandler Event captured\n");
 8004922:	4815      	ldr	r0, [pc, #84]	; (8004978 <GainSignalMenuEntryHandler+0x5c>)
 8004924:	f00a ffa4 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004928:	f7fc fde4 	bl	80014f4 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 800492c:	f000 ff36 	bl	800579c <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004930:	f001 fb7a 	bl	8006028 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004934:	4b11      	ldr	r3, [pc, #68]	; (800497c <GainSignalMenuEntryHandler+0x60>)
 8004936:	2202      	movs	r2, #2
 8004938:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800493a:	2000      	movs	r0, #0
 800493c:	f001 f93a 	bl	8005bb4 <SM_GetOutputChannel>
 8004940:	4603      	mov	r3, r0
 8004942:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004946:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <GainSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8b1a      	ldrh	r2, [r3, #24]
 8004952:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <GainSignalMenuEntryHandler+0x64>)
 8004954:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <GainSignalMenuEntryHandler+0x64>)
 8004958:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 800495c:	62da      	str	r2, [r3, #44]	; 0x2c
 800495e:	e002      	b.n	8004966 <GainSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004960:	4808      	ldr	r0, [pc, #32]	; (8004984 <GainSignalMenuEntryHandler+0x68>)
 8004962:	f7fc fe0d 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <GainSignalMenuEntryHandler+0x6c>)
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800496c:	2307      	movs	r3, #7
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	080138a4 	.word	0x080138a4
 800497c:	20001e58 	.word	0x20001e58
 8004980:	40012c00 	.word	0x40012c00
 8004984:	080138d0 	.word	0x080138d0
 8004988:	20001e53 	.word	0x20001e53

0800498c <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuInputHandler Event captured\n");
 8004992:	4814      	ldr	r0, [pc, #80]	; (80049e4 <GainSignalMenuInputHandler+0x58>)
 8004994:	f00a ff6c 	bl	800f870 <puts>
	#endif

	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004998:	2000      	movs	r0, #0
 800499a:	f001 f90b 	bl	8005bb4 <SM_GetOutputChannel>
 800499e:	4603      	mov	r3, r0
 80049a0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80049a4:	607b      	str	r3, [r7, #4]
	if(tmpFuncProfile)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d012      	beq.n	80049d2 <GainSignalMenuInputHandler+0x46>
	{
		if(tmpFuncProfile->func == PWM_FUNC_MODE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b06      	cmp	r3, #6
 80049b2:	d107      	bne.n	80049c4 <GainSignalMenuInputHandler+0x38>
		{
			GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80049b4:	2001      	movs	r0, #1
 80049b6:	f001 fa89 	bl	8005ecc <SM_GetEncoderValue>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fef9 	bl	80057b4 <GO_MapEncoderPositionToSignalOutput>
 80049c2:	e006      	b.n	80049d2 <GainSignalMenuInputHandler+0x46>

		}
		else
		{
			VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80049c4:	2001      	movs	r0, #1
 80049c6:	f001 fa81 	bl	8005ecc <SM_GetEncoderValue>
 80049ca:	4603      	mov	r3, r0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f001 fc9d 	bl	800630c <VPP_MapEncoderPositionToSignalOutput>
		}
	}
	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	//

	eNewEvent = evYellowBtn;
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <GainSignalMenuInputHandler+0x5c>)
 80049d4:	2203      	movs	r2, #3
 80049d6:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80049d8:	2307      	movs	r3, #7
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	08013908 	.word	0x08013908
 80049e8:	20001e53 	.word	0x20001e53

080049ec <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuExitHandler Event captured\n");
 80049f0:	4806      	ldr	r0, [pc, #24]	; (8004a0c <GainSignalMenuExitHandler+0x20>)
 80049f2:	f00a ff3d 	bl	800f870 <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <GainSignalMenuExitHandler+0x24>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80049fc:	f7fc fd7a 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <GainSignalMenuExitHandler+0x28>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004a06:	2306      	movs	r3, #6
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	08013934 	.word	0x08013934
 8004a10:	20001e58 	.word	0x20001e58
 8004a14:	20001e53 	.word	0x20001e53

08004a18 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainAuxMenuEntryHandler Event captured\n");
 8004a1e:	4814      	ldr	r0, [pc, #80]	; (8004a70 <GainAuxMenuEntryHandler+0x58>)
 8004a20:	f00a ff26 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004a24:	f7fc fd66 	bl	80014f4 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004a28:	f001 fafe 	bl	8006028 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <GainAuxMenuEntryHandler+0x5c>)
 8004a2e:	2203      	movs	r2, #3
 8004a30:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(Aux_CHANNEL)->amp_profile;
 8004a32:	2001      	movs	r0, #1
 8004a34:	f001 f8be 	bl	8005bb4 <SM_GetOutputChannel>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004a3e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <GainAuxMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8b1a      	ldrh	r2, [r3, #24]
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <GainAuxMenuEntryHandler+0x60>)
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <GainAuxMenuEntryHandler+0x60>)
 8004a50:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a56:	e002      	b.n	8004a5e <GainAuxMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004a58:	4808      	ldr	r0, [pc, #32]	; (8004a7c <GainAuxMenuEntryHandler+0x64>)
 8004a5a:	f7fc fd91 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <GainAuxMenuEntryHandler+0x68>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004a64:	2308      	movs	r3, #8
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	08013960 	.word	0x08013960
 8004a74:	20001e58 	.word	0x20001e58
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	080138d0 	.word	0x080138d0
 8004a80:	20001e53 	.word	0x20001e53

08004a84 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainAuxMenuInputHandler Event captured\n");
 8004a88:	4807      	ldr	r0, [pc, #28]	; (8004aa8 <GainAuxMenuInputHandler+0x24>)
 8004a8a:	f00a fef1 	bl	800f870 <puts>
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f001 fa1c 	bl	8005ecc <SM_GetEncoderValue>
 8004a94:	4603      	mov	r3, r0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 fc72 	bl	8006380 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <GainAuxMenuInputHandler+0x28>)
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004aa2:	2308      	movs	r3, #8
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	08013988 	.word	0x08013988
 8004aac:	20001e53 	.word	0x20001e53

08004ab0 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainAuxMenuExitHandler Event captured\n");
 8004ab4:	4806      	ldr	r0, [pc, #24]	; (8004ad0 <GainAuxMenuExitHandler+0x20>)
 8004ab6:	f00a fedb 	bl	800f870 <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <GainAuxMenuExitHandler+0x24>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004ac0:	f7fc fd18 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <GainAuxMenuExitHandler+0x28>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004aca:	2306      	movs	r3, #6
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	080139b0 	.word	0x080139b0
 8004ad4:	20001e58 	.word	0x20001e58
 8004ad8:	20001e53 	.word	0x20001e53

08004adc <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <ToplevelMenu_getStatus+0x14>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000000 	.word	0x20000000

08004af4 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004afe:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <ToplevelMenu_setStatus+0x1c>)
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	7013      	strb	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	20000000 	.word	0x20000000

08004b14 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004b18:	4806      	ldr	r0, [pc, #24]	; (8004b34 <ToplevelOutputMenuEntryHandler+0x20>)
 8004b1a:	f00a fea9 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004b1e:	f7fc fce9 	bl	80014f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <ToplevelOutputMenuEntryHandler+0x24>)
 8004b24:	2202      	movs	r2, #2
 8004b26:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <ToplevelOutputMenuEntryHandler+0x28>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004b2e:	2301      	movs	r3, #1
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	08013a74 	.word	0x08013a74
 8004b38:	20000000 	.word	0x20000000
 8004b3c:	20001e53 	.word	0x20001e53

08004b40 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004b44:	4806      	ldr	r0, [pc, #24]	; (8004b60 <ToplevelOutputMenuExitHandler+0x20>)
 8004b46:	f00a fe93 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004b4a:	f7fc fcd3 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <ToplevelOutputMenuExitHandler+0x24>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <ToplevelOutputMenuExitHandler+0x28>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	08013ad4 	.word	0x08013ad4
 8004b64:	20000000 	.word	0x20000000
 8004b68:	20001e53 	.word	0x20001e53

08004b6c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004b70:	4806      	ldr	r0, [pc, #24]	; (8004b8c <ToplevelInputMenuEntryHandler+0x20>)
 8004b72:	f00a fe7d 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004b76:	f7fc fcbd 	bl	80014f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <ToplevelInputMenuEntryHandler+0x24>)
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <ToplevelInputMenuEntryHandler+0x28>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004b86:	2302      	movs	r3, #2
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	08013b04 	.word	0x08013b04
 8004b90:	20000000 	.word	0x20000000
 8004b94:	20001e53 	.word	0x20001e53

08004b98 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 8004b9c:	4806      	ldr	r0, [pc, #24]	; (8004bb8 <ToplevelInputMenuExitHandler+0x20>)
 8004b9e:	f00a fe67 	bl	800f870 <puts>
	#endif

	DM_RefreshScreen();
 8004ba2:	f7fc fca7 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <ToplevelInputMenuExitHandler+0x24>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <ToplevelInputMenuExitHandler+0x28>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	08013b64 	.word	0x08013b64
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	20001e53 	.word	0x20001e53

08004bc4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d101      	bne.n	8004bde <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40010400 	.word	0x40010400

08004bf0 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <IM_Init+0x1c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <IM_Init+0x1c>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40014400 	.word	0x40014400

08004c10 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004c14:	4b26      	ldr	r3, [pc, #152]	; (8004cb0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d11c      	bne.n	8004c5a <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004c20:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c2c:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
 8004c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	db09      	blt.n	8004c50 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004c3c:	4b1f      	ldr	r3, [pc, #124]	; (8004cbc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004c3e:	edd3 7a00 	vldr	s15, [r3]
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c48:	ee17 2a90 	vmov	r2, s15
 8004c4c:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004c4e:	e029      	b.n	8004ca4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004c50:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	3201      	adds	r2, #1
 8004c56:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c58:	e024      	b.n	8004ca4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004c5a:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d104      	bne.n	8004c6c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004c62:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c6a:	e01b      	b.n	8004ca4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004c6c:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c78:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004c7a:	edd3 7a00 	vldr	s15, [r3]
 8004c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	d809      	bhi.n	8004c9c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004c8a:	edd3 7a00 	vldr	s15, [r3]
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c94:	ee17 2a90 	vmov	r2, s15
 8004c98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c9a:	e003      	b.n	8004ca4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	3a01      	subs	r2, #1
 8004ca2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40013400 	.word	0x40013400
 8004cb8:	20000124 	.word	0x20000124
 8004cbc:	20000120 	.word	0x20000120

08004cc0 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <IM_BTN1_EXTI14_Handler+0x44>)
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <IM_BTN1_EXTI14_Handler+0x48>)
 8004cd0:	8812      	ldrh	r2, [r2, #0]
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cd8:	dd0c      	ble.n	8004cf4 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004cda:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004cde:	f7ff ff71 	bl	8004bc4 <LL_EXTI_IsActiveFlag_0_31>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004ce8:	2001      	movs	r0, #1
 8004cea:	f7ff fa55 	bl	8004198 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004cee:	4807      	ldr	r0, [pc, #28]	; (8004d0c <IM_BTN1_EXTI14_Handler+0x4c>)
 8004cf0:	f00a fdbe 	bl	800f870 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <IM_BTN1_EXTI14_Handler+0x48>)
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	8013      	strh	r3, [r2, #0]


}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40014400 	.word	0x40014400
 8004d08:	20001e5a 	.word	0x20001e5a
 8004d0c:	08013b90 	.word	0x08013b90

08004d10 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <IM_BTN2_EXTI15_Handler+0x44>)
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <IM_BTN2_EXTI15_Handler+0x48>)
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d28:	dd0c      	ble.n	8004d44 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004d2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d2e:	f7ff ff49 	bl	8004bc4 <LL_EXTI_IsActiveFlag_0_31>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004d38:	2003      	movs	r0, #3
 8004d3a:	f7ff fa2d 	bl	8004198 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004d3e:	4807      	ldr	r0, [pc, #28]	; (8004d5c <IM_BTN2_EXTI15_Handler+0x4c>)
 8004d40:	f00a fd96 	bl	800f870 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004d44:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <IM_BTN2_EXTI15_Handler+0x48>)
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	8013      	strh	r3, [r2, #0]


}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40014400 	.word	0x40014400
 8004d58:	20001e5c 	.word	0x20001e5c
 8004d5c:	08013ba8 	.word	0x08013ba8

08004d60 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004d66:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <IM_BTN3_EXTI0_Handler+0x40>)
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <IM_BTN3_EXTI0_Handler+0x44>)
 8004d70:	8812      	ldrh	r2, [r2, #0]
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d78:	dd0b      	ble.n	8004d92 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	f7ff ff22 	bl	8004bc4 <LL_EXTI_IsActiveFlag_0_31>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004d86:	2004      	movs	r0, #4
 8004d88:	f7ff fa06 	bl	8004198 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004d8c:	4806      	ldr	r0, [pc, #24]	; (8004da8 <IM_BTN3_EXTI0_Handler+0x48>)
 8004d8e:	f00a fd6f 	bl	800f870 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004d92:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <IM_BTN3_EXTI0_Handler+0x44>)
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	8013      	strh	r3, [r2, #0]


}
 8004d98:	bf00      	nop
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40014400 	.word	0x40014400
 8004da4:	20001e5e 	.word	0x20001e5e
 8004da8:	08013bc4 	.word	0x08013bc4

08004dac <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004db2:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <IM_BTN4_EXTI1_Handler+0x40>)
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <IM_BTN4_EXTI1_Handler+0x44>)
 8004dbc:	8812      	ldrh	r2, [r2, #0]
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc4:	dd0b      	ble.n	8004dde <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004dc6:	2002      	movs	r0, #2
 8004dc8:	f7ff fefc 	bl	8004bc4 <LL_EXTI_IsActiveFlag_0_31>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004dd2:	2002      	movs	r0, #2
 8004dd4:	f7ff f9e0 	bl	8004198 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004dd8:	4806      	ldr	r0, [pc, #24]	; (8004df4 <IM_BTN4_EXTI1_Handler+0x48>)
 8004dda:	f00a fd49 	bl	800f870 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004dde:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <IM_BTN4_EXTI1_Handler+0x44>)
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	8013      	strh	r3, [r2, #0]


}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40014400 	.word	0x40014400
 8004df0:	20001e60 	.word	0x20001e60
 8004df4:	08013bdc 	.word	0x08013bdc

08004df8 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <IM_ENC_EXTI2_Handler+0x40>)
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	4a0d      	ldr	r2, [pc, #52]	; (8004e3c <IM_ENC_EXTI2_Handler+0x44>)
 8004e08:	8812      	ldrh	r2, [r2, #0]
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e10:	dd0b      	ble.n	8004e2a <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004e12:	2004      	movs	r0, #4
 8004e14:	f7ff fed6 	bl	8004bc4 <LL_EXTI_IsActiveFlag_0_31>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004e1e:	2006      	movs	r0, #6
 8004e20:	f7ff f9ba 	bl	8004198 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004e24:	4806      	ldr	r0, [pc, #24]	; (8004e40 <IM_ENC_EXTI2_Handler+0x48>)
 8004e26:	f00a fd23 	bl	800f870 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004e2a:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <IM_ENC_EXTI2_Handler+0x44>)
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	8013      	strh	r3, [r2, #0]


}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40014400 	.word	0x40014400
 8004e3c:	20001e62 	.word	0x20001e62
 8004e40:	08013bf4 	.word	0x08013bf4

08004e44 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <IM_ENC_DIRF_Handler+0x30>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e54:	d10b      	bne.n	8004e6e <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8004e56:	2005      	movs	r0, #5
 8004e58:	f7ff f99e 	bl	8004198 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8004e5c:	4806      	ldr	r0, [pc, #24]	; (8004e78 <IM_ENC_DIRF_Handler+0x34>)
 8004e5e:	f00a fd07 	bl	800f870 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004e62:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <IM_ENC_DIRF_Handler+0x30>)
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	4a03      	ldr	r2, [pc, #12]	; (8004e74 <IM_ENC_DIRF_Handler+0x30>)
 8004e68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e6c:	6113      	str	r3, [r2, #16]

	}
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	08013c10 	.word	0x08013c10

08004e7c <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <BO_GetBiasPolarity+0x14>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000001 	.word	0x20000001

08004e94 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004e98:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <BO_GetDcBiasEncoderValue+0x14>)
 8004e9a:	881b      	ldrh	r3, [r3, #0]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000002 	.word	0x20000002

08004eac <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f001 f808 	bl	8005ecc <SM_GetEncoderValue>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8004ec2:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004eca:	d214      	bcs.n	8004ef6 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2110      	movs	r1, #16
 8004ee4:	4814      	ldr	r0, [pc, #80]	; (8004f38 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8004ee6:	f004 fdef 	bl	8009ac8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004eea:	2201      	movs	r2, #1
 8004eec:	2108      	movs	r1, #8
 8004eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ef2:	f005 fdab 	bl	800aa4c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004efc:	d314      	bcc.n	8004f28 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004efe:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004f12:	2200      	movs	r2, #0
 8004f14:	2110      	movs	r1, #16
 8004f16:	4808      	ldr	r0, [pc, #32]	; (8004f38 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8004f18:	f004 fdd6 	bl	8009ac8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2108      	movs	r1, #8
 8004f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f24:	f005 fd92 	bl	800aa4c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004f28:	bf00      	nop
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000002 	.word	0x20000002
 8004f34:	20000001 	.word	0x20000001
 8004f38:	20002638 	.word	0x20002638

08004f3c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004f40:	2110      	movs	r1, #16
 8004f42:	4803      	ldr	r0, [pc, #12]	; (8004f50 <BO_GetOutputBias+0x14>)
 8004f44:	f004 fe06 	bl	8009b54 <HAL_DAC_GetValue>
 8004f48:	4603      	mov	r3, r0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20002638 	.word	0x20002638

08004f54 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	e06b      	b.n	8005038 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 8004f60:	493a      	ldr	r1, [pc, #232]	; (800504c <FreqO_InitFreqProfiles+0xf8>)
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	3308      	adds	r3, #8
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d129      	bne.n	8004fca <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 8004f76:	4935      	ldr	r1, [pc, #212]	; (800504c <FreqO_InitFreqProfiles+0xf8>)
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	3304      	adds	r3, #4
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a31      	ldr	r2, [pc, #196]	; (8005050 <FreqO_InitFreqProfiles+0xfc>)
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f96:	492d      	ldr	r1, [pc, #180]	; (800504c <FreqO_InitFreqProfiles+0xf8>)
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3310      	adds	r3, #16
 8004fa6:	edd3 7a00 	vldr	s15, [r3]
 8004faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb2:	ee17 0a90 	vmov	r0, s15
 8004fb6:	4925      	ldr	r1, [pc, #148]	; (800504c <FreqO_InitFreqProfiles+0xf8>)
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	6018      	str	r0, [r3, #0]
 8004fc8:	e033      	b.n	8005032 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 8004fca:	4920      	ldr	r1, [pc, #128]	; (800504c <FreqO_InitFreqProfiles+0xf8>)
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	3304      	adds	r3, #4
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <FreqO_InitFreqProfiles+0xfc>)
 8004fde:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fe2:	481a      	ldr	r0, [pc, #104]	; (800504c <FreqO_InitFreqProfiles+0xf8>)
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4403      	add	r3, r0
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005000:	4912      	ldr	r1, [pc, #72]	; (800504c <FreqO_InitFreqProfiles+0xf8>)
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3310      	adds	r3, #16
 8005010:	edd3 7a00 	vldr	s15, [r3]
 8005014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501c:	ee17 0a90 	vmov	r0, s15
 8005020:	490a      	ldr	r1, [pc, #40]	; (800504c <FreqO_InitFreqProfiles+0xf8>)
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	330c      	adds	r3, #12
 8005030:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3301      	adds	r3, #1
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b0d      	cmp	r3, #13
 800503c:	dd90      	ble.n	8004f60 <FreqO_InitFreqProfiles+0xc>
	}
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000004 	.word	0x20000004
 8005050:	00155cc0 	.word	0x00155cc0

08005054 <FreqO_MapEncoderPositionToBothOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToBothOutput(uint16_t pEncValue)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 800505e:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <FreqO_MapEncoderPositionToBothOutput+0x78>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	429a      	cmp	r2, r3
 800506e:	d910      	bls.n	8005092 <FreqO_MapEncoderPositionToBothOutput+0x3e>
	{
		tmpFreqIndex++;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b0d      	cmp	r3, #13
 800507a:	d901      	bls.n	8005080 <FreqO_MapEncoderPositionToBothOutput+0x2c>
 800507c:	230d      	movs	r3, #13
 800507e:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f8cf 	bl	8005224 <FreqO_GetProfileByIndex>
 8005086:	4603      	mov	r3, r0
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f822 	bl	80050d4 <FreqO_ApplyProfile>
 8005090:	e014      	b.n	80050bc <FreqO_MapEncoderPositionToBothOutput+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	429a      	cmp	r2, r3
 800509a:	d20f      	bcs.n	80050bc <FreqO_MapEncoderPositionToBothOutput+0x68>
	{
		tmpFreqIndex--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3b01      	subs	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b0d      	cmp	r3, #13
 80050a6:	d901      	bls.n	80050ac <FreqO_MapEncoderPositionToBothOutput+0x58>
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f8b9 	bl	8005224 <FreqO_GetProfileByIndex>
 80050b2:	4603      	mov	r3, r0
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 f80c 	bl	80050d4 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 80050bc:	4a04      	ldr	r2, [pc, #16]	; (80050d0 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	8013      	strh	r3, [r2, #0]

}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2000011c 	.word	0x2000011c
 80050d0:	20001e64 	.word	0x20001e64

080050d4 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f873 	bl	80051c8 <FreqO_FindFPresetObject>
 80050e2:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d024      	beq.n	8005134 <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 80050ea:	4a16      	ldr	r2, [pc, #88]	; (8005144 <FreqO_ApplyProfile+0x70>)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 80050f2:	4a14      	ldr	r2, [pc, #80]	; (8005144 <FreqO_ApplyProfile+0x70>)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
 80050fa:	2001      	movs	r0, #1
 80050fc:	f000 fd5a 	bl	8005bb4 <SM_GetOutputChannel>
 8005100:	4603      	mov	r3, r0
 8005102:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	2b06      	cmp	r3, #6
 800510e:	d10d      	bne.n	800512c <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 8005110:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <FreqO_ApplyProfile+0x74>)
 8005112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005116:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = tmpFreqProfile->arr/2;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <FreqO_ApplyProfile+0x74>)
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR1 = TIM3->ARR/2;
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <FreqO_ApplyProfile+0x74>)
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	4a08      	ldr	r2, [pc, #32]	; (8005148 <FreqO_ApplyProfile+0x74>)
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 800512c:	4a07      	ldr	r2, [pc, #28]	; (800514c <FreqO_ApplyProfile+0x78>)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005132:	e002      	b.n	800513a <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005134:	4806      	ldr	r0, [pc, #24]	; (8005150 <FreqO_ApplyProfile+0x7c>)
 8005136:	f7fc fa23 	bl	8001580 <DM_SetErrorDebugMsg>
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40013400 	.word	0x40013400
 8005148:	40000400 	.word	0x40000400
 800514c:	2000011c 	.word	0x2000011c
 8005150:	08013c28 	.word	0x08013c28

08005154 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0

		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 800515a:	2000      	movs	r0, #0
 800515c:	f000 feb6 	bl	8005ecc <SM_GetEncoderValue>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <FreqO_AdjustFreq+0x54>)
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
 8005168:	2001      	movs	r0, #1
 800516a:	f000 fd23 	bl	8005bb4 <SM_GetOutputChannel>
 800516e:	4603      	mov	r3, r0
 8005170:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	71fb      	strb	r3, [r7, #7]
		if(tmpOut == PWM_FUNC_MODE)
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	2b06      	cmp	r3, #6
 800517c:	d110      	bne.n	80051a0 <FreqO_AdjustFreq+0x4c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <FreqO_AdjustFreq+0x58>)
 8005180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005184:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = SM_GetEncoderValue(ENCODER_FORWARD)/2;
 8005186:	2000      	movs	r0, #0
 8005188:	f000 fea0 	bl	8005ecc <SM_GetEncoderValue>
 800518c:	4603      	mov	r3, r0
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	4b06      	ldr	r3, [pc, #24]	; (80051ac <FreqO_AdjustFreq+0x58>)
 8005194:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = TIM3->ARR/2;
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <FreqO_AdjustFreq+0x58>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	4a04      	ldr	r2, [pc, #16]	; (80051ac <FreqO_AdjustFreq+0x58>)
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	6353      	str	r3, [r2, #52]	; 0x34

		}
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40000400 	.word	0x40000400

080051b0 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
	return freq_profile;
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <FreqO_GetFPresetObject+0x14>)
 80051b6:	681b      	ldr	r3, [r3, #0]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	2000011c 	.word	0x2000011c

080051c8 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e016      	b.n	8005204 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 80051d6:	4911      	ldr	r1, [pc, #68]	; (800521c <FreqO_FindFPresetObject+0x54>)
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	3304      	adds	r3, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d107      	bne.n	80051fe <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <FreqO_FindFPresetObject+0x54>)
 80051fa:	4413      	add	r3, r2
 80051fc:	e009      	b.n	8005212 <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b0d      	cmp	r3, #13
 8005208:	dde5      	ble.n	80051d6 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 800520a:	4805      	ldr	r0, [pc, #20]	; (8005220 <FreqO_FindFPresetObject+0x58>)
 800520c:	f7fc f9b8 	bl	8001580 <DM_SetErrorDebugMsg>
	return 0;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000004 	.word	0x20000004
 8005220:	08013c50 	.word	0x08013c50

08005224 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <FreqO_GetProfileByIndex+0x24>)
 8005238:	4413      	add	r3, r2
}
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20000004 	.word	0x20000004

0800524c <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005250:	4b03      	ldr	r3, [pc, #12]	; (8005260 <FreqO_ResetLastEncoderValue+0x14>)
 8005252:	2200      	movs	r2, #0
 8005254:	801a      	strh	r2, [r3, #0]
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	20001e64 	.word	0x20001e64

08005264 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005268:	4b10      	ldr	r3, [pc, #64]	; (80052ac <FS_SetSweepModeDown+0x48>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a0f      	ldr	r2, [pc, #60]	; (80052ac <FS_SetSweepModeDown+0x48>)
 800526e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005272:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005274:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <FS_SetSweepModeDown+0x48>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <FS_SetSweepModeDown+0x48>)
 800527a:	f043 0310 	orr.w	r3, r3, #16
 800527e:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <FS_SetSweepModeDown+0x4c>)
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <FS_SetSweepModeDown+0x50>)
 800528e:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005292:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <FS_SetSweepModeDown+0x54>)
 8005294:	4a09      	ldr	r2, [pc, #36]	; (80052bc <FS_SetSweepModeDown+0x58>)
 8005296:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005298:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <FS_SetSweepModeDown+0x5c>)
 800529a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

}
 80052a0:	bf00      	nop
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40013400 	.word	0x40013400
 80052b4:	20000120 	.word	0x20000120
 80052b8:	20000124 	.word	0x20000124
 80052bc:	477fff00 	.word	0x477fff00
 80052c0:	40012c00 	.word	0x40012c00

080052c4 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80052c8:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <FS_SetSweepModeUp+0x40>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0d      	ldr	r2, [pc, #52]	; (8005304 <FS_SetSweepModeUp+0x40>)
 80052ce:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80052d2:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 80052d4:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <FS_SetSweepModeUp+0x40>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <FS_SetSweepModeUp+0x40>)
 80052da:	f023 0310 	bic.w	r3, r3, #16
 80052de:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <FS_SetSweepModeUp+0x44>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <FS_SetSweepModeUp+0x48>)
 80052ee:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <FS_SetSweepModeUp+0x4c>)
 80052f4:	4a07      	ldr	r2, [pc, #28]	; (8005314 <FS_SetSweepModeUp+0x50>)
 80052f6:	601a      	str	r2, [r3, #0]


}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40013400 	.word	0x40013400
 800530c:	20000124 	.word	0x20000124
 8005310:	20000120 	.word	0x20000120
 8005314:	41500000 	.word	0x41500000

08005318 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d038      	beq.n	800539a <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005328:	4a24      	ldr	r2, [pc, #144]	; (80053bc <FS_SetEncoderControlMode+0xa4>)
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800532e:	4b24      	ldr	r3, [pc, #144]	; (80053c0 <FS_SetEncoderControlMode+0xa8>)
 8005330:	220d      	movs	r2, #13
 8005332:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005334:	4b22      	ldr	r3, [pc, #136]	; (80053c0 <FS_SetEncoderControlMode+0xa8>)
 8005336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 800533c:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <FS_SetEncoderControlMode+0xac>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <FS_SetEncoderControlMode+0x32>
 8005344:	2b01      	cmp	r3, #1
 8005346:	d014      	beq.n	8005372 <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005348:	e031      	b.n	80053ae <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 800534a:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <FS_SetEncoderControlMode+0xa8>)
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005356:	4b1c      	ldr	r3, [pc, #112]	; (80053c8 <FS_SetEncoderControlMode+0xb0>)
 8005358:	edd3 7a00 	vldr	s15, [r3]
 800535c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005364:	dc00      	bgt.n	8005368 <FS_SetEncoderControlMode+0x50>
				break;
 8005366:	e022      	b.n	80053ae <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005368:	4b18      	ldr	r3, [pc, #96]	; (80053cc <FS_SetEncoderControlMode+0xb4>)
 800536a:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <FS_SetEncoderControlMode+0xa8>)
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005370:	e01d      	b.n	80053ae <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005372:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <FS_SetEncoderControlMode+0xa8>)
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <FS_SetEncoderControlMode+0xb8>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538c:	d400      	bmi.n	8005390 <FS_SetEncoderControlMode+0x78>
				break;
 800538e:	e00e      	b.n	80053ae <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005390:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <FS_SetEncoderControlMode+0xb4>)
 8005392:	4a0b      	ldr	r2, [pc, #44]	; (80053c0 <FS_SetEncoderControlMode+0xa8>)
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005398:	e009      	b.n	80053ae <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 800539a:	4a08      	ldr	r2, [pc, #32]	; (80053bc <FS_SetEncoderControlMode+0xa4>)
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <FS_SetEncoderControlMode+0xa8>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 80053a6:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <FS_SetEncoderControlMode+0xa8>)
 80053a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80053ac:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20001e55 	.word	0x20001e55
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	20001e54 	.word	0x20001e54
 80053c8:	20000124 	.word	0x20000124
 80053cc:	40013400 	.word	0x40013400
 80053d0:	20000120 	.word	0x20000120
 80053d4:	00000000 	.word	0x00000000

080053d8 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d122      	bne.n	800542e <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 80053e8:	4b17      	ldr	r3, [pc, #92]	; (8005448 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fb f8b1 	bl	8000554 <__aeabi_ui2d>
 80053f2:	4603      	mov	r3, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005438 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 80053fa:	ec44 3b10 	vmov	d0, r3, r4
 80053fe:	f00c fa0f 	bl	8011820 <pow>
 8005402:	ec51 0b10 	vmov	r0, r1, d0
 8005406:	a30e      	add	r3, pc, #56	; (adr r3, 8005440 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f7fa ff66 	bl	80002dc <__adddf3>
 8005410:	4603      	mov	r3, r0
 8005412:	460c      	mov	r4, r1
 8005414:	4618      	mov	r0, r3
 8005416:	4621      	mov	r1, r4
 8005418:	f7fb fbee 	bl	8000bf8 <__aeabi_d2uiz>
 800541c:	4603      	mov	r3, r0
 800541e:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005426:	d002      	beq.n	800542e <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005428:	4a08      	ldr	r2, [pc, #32]	; (800544c <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	bd90      	pop	{r4, r7, pc}
 8005436:	bf00      	nop
 8005438:	00000000 	.word	0x00000000
 800543c:	40080000 	.word	0x40080000
 8005440:	00000000 	.word	0x00000000
 8005444:	40d06800 	.word	0x40d06800
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40000c00 	.word	0x40000c00

08005450 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005454:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 800545c:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005468:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80054a8 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 800546c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005470:	e011      	b.n	8005496 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005472:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800548e:	eddf 6a06 	vldr	s13, [pc, #24]	; 80054a8 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005492:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005496:	eeb0 0a67 	vmov.f32	s0, s15
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	4d2037a0 	.word	0x4d2037a0

080054ac <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <FuncO_ResetLastEncoderValue+0x14>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	801a      	strh	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	20001e92 	.word	0x20001e92

080054c4 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80054ce:	2000      	movs	r0, #0
 80054d0:	f000 fb70 	bl	8005bb4 <SM_GetOutputChannel>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d90c      	bls.n	8005502 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	3301      	adds	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b06      	cmp	r3, #6
 80054f2:	d901      	bls.n	80054f8 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 80054f4:	2306      	movs	r3, #6
 80054f6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f856 	bl	80055ac <FuncO_ApplyProfileToSignal>
 8005500:	e010      	b.n	8005524 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	429a      	cmp	r2, r3
 800550a:	d20b      	bcs.n	8005524 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	3b01      	subs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	2b06      	cmp	r3, #6
 8005516:	d901      	bls.n	800551c <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005518:	2300      	movs	r3, #0
 800551a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f844 	bl	80055ac <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005524:	4a03      	ldr	r2, [pc, #12]	; (8005534 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	8013      	strh	r3, [r2, #0]
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20001e92 	.word	0x20001e92

08005538 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func;
 8005542:	2001      	movs	r0, #1
 8005544:	f000 fb36 	bl	8005bb4 <SM_GetOutputChannel>
 8005548:	4603      	mov	r3, r0
 800554a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	429a      	cmp	r2, r3
 800555a:	d90c      	bls.n	8005576 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	3301      	adds	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b06      	cmp	r3, #6
 8005566:	d901      	bls.n	800556c <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005568:	2306      	movs	r3, #6
 800556a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f87c 	bl	800566c <FuncO_ApplyProfileToAux>
 8005574:	e010      	b.n	8005598 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	429a      	cmp	r2, r3
 800557e:	d20b      	bcs.n	8005598 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	3b01      	subs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	2b06      	cmp	r3, #6
 800558a:	d901      	bls.n	8005590 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 800558c:	2300      	movs	r3, #0
 800558e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f86a 	bl	800566c <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005598:	4a03      	ldr	r2, [pc, #12]	; (80055a8 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	8013      	strh	r3, [r2, #0]
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20001e92 	.word	0x20001e92

080055ac <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	4603      	mov	r3, r0
 80055b4:	71fb      	strb	r3, [r7, #7]
	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80055b6:	79fc      	ldrb	r4, [r7, #7]
 80055b8:	2000      	movs	r0, #0
 80055ba:	f000 fafb 	bl	8005bb4 <SM_GetOutputChannel>
 80055be:	4601      	mov	r1, r0
 80055c0:	00e3      	lsls	r3, r4, #3
 80055c2:	4a26      	ldr	r2, [pc, #152]	; (800565c <FuncO_ApplyProfileToSignal+0xb0>)
 80055c4:	4413      	add	r3, r2
 80055c6:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8
	}
	else
	{
	*/
		// copy the lookup table for the next output function in to SignalChannel object
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80055ca:	79fc      	ldrb	r4, [r7, #7]
 80055cc:	2000      	movs	r0, #0
 80055ce:	f000 faf1 	bl	8005bb4 <SM_GetOutputChannel>
 80055d2:	4601      	mov	r1, r0
 80055d4:	4a21      	ldr	r2, [pc, #132]	; (800565c <FuncO_ApplyProfileToSignal+0xb0>)
 80055d6:	00e3      	lsls	r3, r4, #3
 80055d8:	4413      	add	r3, r2
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80055de:	2000      	movs	r0, #0
 80055e0:	f000 fae8 	bl	8005bb4 <SM_GetOutputChannel>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fd25 	bl	8006040 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <FuncO_ApplyProfileToSignal+0xb4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a19      	ldr	r2, [pc, #100]	; (8005660 <FuncO_ApplyProfileToSignal+0xb4>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005602:	2100      	movs	r1, #0
 8005604:	4817      	ldr	r0, [pc, #92]	; (8005664 <FuncO_ApplyProfileToSignal+0xb8>)
 8005606:	f004 fa09 	bl	8009a1c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800560a:	2000      	movs	r0, #0
 800560c:	f000 fad2 	bl	8005bb4 <SM_GetOutputChannel>
 8005610:	4603      	mov	r3, r0
 8005612:	f103 0208 	add.w	r2, r3, #8
 8005616:	2300      	movs	r3, #0
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2378      	movs	r3, #120	; 0x78
 800561c:	2100      	movs	r1, #0
 800561e:	4811      	ldr	r0, [pc, #68]	; (8005664 <FuncO_ApplyProfileToSignal+0xb8>)
 8005620:	f004 f93a 	bl	8009898 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005624:	2100      	movs	r1, #0
 8005626:	4810      	ldr	r0, [pc, #64]	; (8005668 <FuncO_ApplyProfileToSignal+0xbc>)
 8005628:	f004 f9f8 	bl	8009a1c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(Aux_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800562c:	2001      	movs	r0, #1
 800562e:	f000 fac1 	bl	8005bb4 <SM_GetOutputChannel>
 8005632:	4603      	mov	r3, r0
 8005634:	f103 0208 	add.w	r2, r3, #8
 8005638:	2300      	movs	r3, #0
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	2378      	movs	r3, #120	; 0x78
 800563e:	2100      	movs	r1, #0
 8005640:	4809      	ldr	r0, [pc, #36]	; (8005668 <FuncO_ApplyProfileToSignal+0xbc>)
 8005642:	f004 f929 	bl	8009898 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <FuncO_ApplyProfileToSignal+0xb4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a05      	ldr	r2, [pc, #20]	; (8005660 <FuncO_ApplyProfileToSignal+0xb4>)
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	6013      	str	r3, [r2, #0]

	//}

}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	bd90      	pop	{r4, r7, pc}
 800565a:	bf00      	nop
 800565c:	20000128 	.word	0x20000128
 8005660:	40013400 	.word	0x40013400
 8005664:	20002638 	.word	0x20002638
 8005668:	20002624 	.word	0x20002624

0800566c <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b087      	sub	sp, #28
 8005670:	af02      	add	r7, sp, #8
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
	// set the next output function
	SM_GetOutputChannel(Aux_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005676:	79fc      	ldrb	r4, [r7, #7]
 8005678:	2001      	movs	r0, #1
 800567a:	f000 fa9b 	bl	8005bb4 <SM_GetOutputChannel>
 800567e:	4601      	mov	r1, r0
 8005680:	00e3      	lsls	r3, r4, #3
 8005682:	4a42      	ldr	r2, [pc, #264]	; (800578c <FuncO_ApplyProfileToAux+0x120>)
 8005684:	4413      	add	r3, r2
 8005686:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	if(pPresetEnum == PWM_FUNC_MODE)
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b06      	cmp	r3, #6
 800568e:	d107      	bne.n	80056a0 <FuncO_ApplyProfileToAux+0x34>
	{
		// switch output signal from DAC to PWM
		SM_DisableDacToAux();
 8005690:	f000 fc12 	bl	8005eb8 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005694:	f000 faa4 	bl	8005be0 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005698:	4b3d      	ldr	r3, [pc, #244]	; (8005790 <FuncO_ApplyProfileToAux+0x124>)
 800569a:	2201      	movs	r2, #1
 800569c:	701a      	strb	r2, [r3, #0]

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}
}
 800569e:	e071      	b.n	8005784 <FuncO_ApplyProfileToAux+0x118>
	else if(last_output_mode_was_pwm)
 80056a0:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <FuncO_ApplyProfileToAux+0x124>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d03a      	beq.n	800571e <FuncO_ApplyProfileToAux+0xb2>
		SM_DisablePwmToAux();
 80056a8:	f000 fb5a 	bl	8005d60 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 80056ac:	f000 fb68 	bl	8005d80 <SM_EnableDacToAux>
		SM_GetOutputChannel(Aux_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80056b0:	79fc      	ldrb	r4, [r7, #7]
 80056b2:	2001      	movs	r0, #1
 80056b4:	f000 fa7e 	bl	8005bb4 <SM_GetOutputChannel>
 80056b8:	4601      	mov	r1, r0
 80056ba:	4a34      	ldr	r2, [pc, #208]	; (800578c <FuncO_ApplyProfileToAux+0x120>)
 80056bc:	00e3      	lsls	r3, r4, #3
 80056be:	4413      	add	r3, r2
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(Aux_CHANNEL)->amp_profile->amp_setting;
 80056c4:	2001      	movs	r0, #1
 80056c6:	f000 fa75 	bl	8005bb4 <SM_GetOutputChannel>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	73bb      	strb	r3, [r7, #14]
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fce0 	bl	800609c <VPP_ApplyProfileToAux>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80056dc:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <FuncO_ApplyProfileToAux+0x128>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <FuncO_ApplyProfileToAux+0x128>)
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80056e8:	2100      	movs	r1, #0
 80056ea:	482b      	ldr	r0, [pc, #172]	; (8005798 <FuncO_ApplyProfileToAux+0x12c>)
 80056ec:	f004 f996 	bl	8009a1c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80056f0:	2000      	movs	r0, #0
 80056f2:	f000 fa5f 	bl	8005bb4 <SM_GetOutputChannel>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f103 0208 	add.w	r2, r3, #8
 80056fc:	2300      	movs	r3, #0
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2378      	movs	r3, #120	; 0x78
 8005702:	2100      	movs	r1, #0
 8005704:	4824      	ldr	r0, [pc, #144]	; (8005798 <FuncO_ApplyProfileToAux+0x12c>)
 8005706:	f004 f8c7 	bl	8009898 <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800570a:	4b22      	ldr	r3, [pc, #136]	; (8005794 <FuncO_ApplyProfileToAux+0x128>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a21      	ldr	r2, [pc, #132]	; (8005794 <FuncO_ApplyProfileToAux+0x128>)
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	6013      	str	r3, [r2, #0]
		last_output_mode_was_pwm = 0;
 8005716:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <FuncO_ApplyProfileToAux+0x124>)
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
}
 800571c:	e032      	b.n	8005784 <FuncO_ApplyProfileToAux+0x118>
		SM_GetOutputChannel(Aux_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800571e:	79fc      	ldrb	r4, [r7, #7]
 8005720:	2001      	movs	r0, #1
 8005722:	f000 fa47 	bl	8005bb4 <SM_GetOutputChannel>
 8005726:	4601      	mov	r1, r0
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <FuncO_ApplyProfileToAux+0x120>)
 800572a:	00e3      	lsls	r3, r4, #3
 800572c:	4413      	add	r3, r2
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(Aux_CHANNEL)->amp_profile->amp_setting;
 8005732:	2001      	movs	r0, #1
 8005734:	f000 fa3e 	bl	8005bb4 <SM_GetOutputChannel>
 8005738:	4603      	mov	r3, r0
 800573a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fca9 	bl	800609c <VPP_ApplyProfileToAux>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <FuncO_ApplyProfileToAux+0x128>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a11      	ldr	r2, [pc, #68]	; (8005794 <FuncO_ApplyProfileToAux+0x128>)
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005756:	2100      	movs	r1, #0
 8005758:	480f      	ldr	r0, [pc, #60]	; (8005798 <FuncO_ApplyProfileToAux+0x12c>)
 800575a:	f004 f95f 	bl	8009a1c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800575e:	2000      	movs	r0, #0
 8005760:	f000 fa28 	bl	8005bb4 <SM_GetOutputChannel>
 8005764:	4603      	mov	r3, r0
 8005766:	f103 0208 	add.w	r2, r3, #8
 800576a:	2300      	movs	r3, #0
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	2378      	movs	r3, #120	; 0x78
 8005770:	2100      	movs	r1, #0
 8005772:	4809      	ldr	r0, [pc, #36]	; (8005798 <FuncO_ApplyProfileToAux+0x12c>)
 8005774:	f004 f890 	bl	8009898 <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <FuncO_ApplyProfileToAux+0x128>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a05      	ldr	r2, [pc, #20]	; (8005794 <FuncO_ApplyProfileToAux+0x128>)
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	6013      	str	r3, [r2, #0]
}
 8005784:	bf00      	nop
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	bd90      	pop	{r4, r7, pc}
 800578c:	20000128 	.word	0x20000128
 8005790:	20001e90 	.word	0x20001e90
 8005794:	40013400 	.word	0x40013400
 8005798:	20002638 	.word	0x20002638

0800579c <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 80057a0:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <GO_ResetLastEncoderValue+0x14>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	801a      	strh	r2, [r3, #0]
}
 80057a6:	bf00      	nop
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20001e94 	.word	0x20001e94

080057b4 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 80057be:	2000      	movs	r0, #0
 80057c0:	f000 f9f8 	bl	8005bb4 <SM_GetOutputChannel>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <GO_MapEncoderPositionToSignalOutput+0x70>)
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d90c      	bls.n	80057f2 <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	3301      	adds	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	2b07      	cmp	r3, #7
 80057e2:	d901      	bls.n	80057e8 <GO_MapEncoderPositionToSignalOutput+0x34>
 80057e4:	2307      	movs	r3, #7
 80057e6:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f81c 	bl	8005828 <GO_ApplyPresetToSignal>
 80057f0:	e010      	b.n	8005814 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <GO_MapEncoderPositionToSignalOutput+0x70>)
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d20b      	bcs.n	8005814 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	3b01      	subs	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2b07      	cmp	r3, #7
 8005806:	d901      	bls.n	800580c <GO_MapEncoderPositionToSignalOutput+0x58>
 8005808:	2300      	movs	r3, #0
 800580a:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f80a 	bl	8005828 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8005814:	4a03      	ldr	r2, [pc, #12]	; (8005824 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20001e94 	.word	0x20001e94

08005828 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005832:	79fc      	ldrb	r4, [r7, #7]
 8005834:	2000      	movs	r0, #0
 8005836:	f000 f9bd 	bl	8005bb4 <SM_GetOutputChannel>
 800583a:	4601      	mov	r1, r0
 800583c:	4623      	mov	r3, r4
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	4423      	add	r3, r4
 8005842:	4a4f      	ldr	r2, [pc, #316]	; (8005980 <GO_ApplyPresetToSignal+0x158>)
 8005844:	4413      	add	r3, r2
 8005846:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	2b07      	cmp	r3, #7
 800584e:	f200 8093 	bhi.w	8005978 <GO_ApplyPresetToSignal+0x150>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <GO_ApplyPresetToSignal+0x30>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	08005879 	.word	0x08005879
 800585c:	08005899 	.word	0x08005899
 8005860:	080058b9 	.word	0x080058b9
 8005864:	080058d9 	.word	0x080058d9
 8005868:	080058f9 	.word	0x080058f9
 800586c:	08005919 	.word	0x08005919
 8005870:	08005939 	.word	0x08005939
 8005874:	08005959 	.word	0x08005959
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005878:	2200      	movs	r2, #0
 800587a:	2101      	movs	r1, #1
 800587c:	4841      	ldr	r0, [pc, #260]	; (8005984 <GO_ApplyPresetToSignal+0x15c>)
 800587e:	f005 f8e5 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005882:	2200      	movs	r2, #0
 8005884:	2120      	movs	r1, #32
 8005886:	4840      	ldr	r0, [pc, #256]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005888:	f005 f8e0 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800588c:	2200      	movs	r2, #0
 800588e:	2110      	movs	r1, #16
 8005890:	483d      	ldr	r0, [pc, #244]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005892:	f005 f8db 	bl	800aa4c <HAL_GPIO_WritePin>
			break;
 8005896:	e06f      	b.n	8005978 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005898:	2201      	movs	r2, #1
 800589a:	2101      	movs	r1, #1
 800589c:	4839      	ldr	r0, [pc, #228]	; (8005984 <GO_ApplyPresetToSignal+0x15c>)
 800589e:	f005 f8d5 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80058a2:	2200      	movs	r2, #0
 80058a4:	2120      	movs	r1, #32
 80058a6:	4838      	ldr	r0, [pc, #224]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 80058a8:	f005 f8d0 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80058ac:	2200      	movs	r2, #0
 80058ae:	2110      	movs	r1, #16
 80058b0:	4835      	ldr	r0, [pc, #212]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 80058b2:	f005 f8cb 	bl	800aa4c <HAL_GPIO_WritePin>
			break;
 80058b6:	e05f      	b.n	8005978 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80058b8:	2200      	movs	r2, #0
 80058ba:	2101      	movs	r1, #1
 80058bc:	4831      	ldr	r0, [pc, #196]	; (8005984 <GO_ApplyPresetToSignal+0x15c>)
 80058be:	f005 f8c5 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80058c2:	2201      	movs	r2, #1
 80058c4:	2120      	movs	r1, #32
 80058c6:	4830      	ldr	r0, [pc, #192]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 80058c8:	f005 f8c0 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80058cc:	2200      	movs	r2, #0
 80058ce:	2110      	movs	r1, #16
 80058d0:	482d      	ldr	r0, [pc, #180]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 80058d2:	f005 f8bb 	bl	800aa4c <HAL_GPIO_WritePin>
			break;
 80058d6:	e04f      	b.n	8005978 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80058d8:	2201      	movs	r2, #1
 80058da:	2101      	movs	r1, #1
 80058dc:	4829      	ldr	r0, [pc, #164]	; (8005984 <GO_ApplyPresetToSignal+0x15c>)
 80058de:	f005 f8b5 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80058e2:	2201      	movs	r2, #1
 80058e4:	2120      	movs	r1, #32
 80058e6:	4828      	ldr	r0, [pc, #160]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 80058e8:	f005 f8b0 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2110      	movs	r1, #16
 80058f0:	4825      	ldr	r0, [pc, #148]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 80058f2:	f005 f8ab 	bl	800aa4c <HAL_GPIO_WritePin>
			break;
 80058f6:	e03f      	b.n	8005978 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80058f8:	2200      	movs	r2, #0
 80058fa:	2101      	movs	r1, #1
 80058fc:	4821      	ldr	r0, [pc, #132]	; (8005984 <GO_ApplyPresetToSignal+0x15c>)
 80058fe:	f005 f8a5 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005902:	2200      	movs	r2, #0
 8005904:	2120      	movs	r1, #32
 8005906:	4820      	ldr	r0, [pc, #128]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005908:	f005 f8a0 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800590c:	2201      	movs	r2, #1
 800590e:	2110      	movs	r1, #16
 8005910:	481d      	ldr	r0, [pc, #116]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005912:	f005 f89b 	bl	800aa4c <HAL_GPIO_WritePin>
			break;
 8005916:	e02f      	b.n	8005978 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005918:	2201      	movs	r2, #1
 800591a:	2101      	movs	r1, #1
 800591c:	4819      	ldr	r0, [pc, #100]	; (8005984 <GO_ApplyPresetToSignal+0x15c>)
 800591e:	f005 f895 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005922:	2200      	movs	r2, #0
 8005924:	2120      	movs	r1, #32
 8005926:	4818      	ldr	r0, [pc, #96]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005928:	f005 f890 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800592c:	2201      	movs	r2, #1
 800592e:	2110      	movs	r1, #16
 8005930:	4815      	ldr	r0, [pc, #84]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005932:	f005 f88b 	bl	800aa4c <HAL_GPIO_WritePin>
			break;
 8005936:	e01f      	b.n	8005978 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005938:	2200      	movs	r2, #0
 800593a:	2101      	movs	r1, #1
 800593c:	4811      	ldr	r0, [pc, #68]	; (8005984 <GO_ApplyPresetToSignal+0x15c>)
 800593e:	f005 f885 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005942:	2201      	movs	r2, #1
 8005944:	2120      	movs	r1, #32
 8005946:	4810      	ldr	r0, [pc, #64]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005948:	f005 f880 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800594c:	2201      	movs	r2, #1
 800594e:	2110      	movs	r1, #16
 8005950:	480d      	ldr	r0, [pc, #52]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005952:	f005 f87b 	bl	800aa4c <HAL_GPIO_WritePin>
			break;
 8005956:	e00f      	b.n	8005978 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005958:	2201      	movs	r2, #1
 800595a:	2101      	movs	r1, #1
 800595c:	4809      	ldr	r0, [pc, #36]	; (8005984 <GO_ApplyPresetToSignal+0x15c>)
 800595e:	f005 f875 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005962:	2201      	movs	r2, #1
 8005964:	2120      	movs	r1, #32
 8005966:	4808      	ldr	r0, [pc, #32]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005968:	f005 f870 	bl	800aa4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800596c:	2201      	movs	r2, #1
 800596e:	2110      	movs	r1, #16
 8005970:	4805      	ldr	r0, [pc, #20]	; (8005988 <GO_ApplyPresetToSignal+0x160>)
 8005972:	f005 f86b 	bl	800aa4c <HAL_GPIO_WritePin>
			break;
 8005976:	bf00      	nop
	}

}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bd90      	pop	{r4, r7, pc}
 8005980:	20000160 	.word	0x20000160
 8005984:	48000400 	.word	0x48000400
 8005988:	48000800 	.word	0x48000800

0800598c <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8005990:	f7ff fae0 	bl	8004f54 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 8005994:	f000 f8ae 	bl	8005af4 <_InitOutputChannels>
	_InitAmpProfiles();
 8005998:	f000 f824 	bl	80059e4 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800599c:	2110      	movs	r1, #16
 800599e:	480f      	ldr	r0, [pc, #60]	; (80059dc <SM_Init+0x50>)
 80059a0:	f003 ff27 	bl	80097f2 <HAL_DAC_Start>
	HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80059a4:	2201      	movs	r2, #1
 80059a6:	2108      	movs	r1, #8
 80059a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ac:	f005 f84e 	bl	800aa4c <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80059b0:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <SM_Init+0x54>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <SM_Init+0x54>)
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80059bc:	2000      	movs	r0, #0
 80059be:	f7ff fdf5 	bl	80055ac <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 80059c2:	2059      	movs	r0, #89	; 0x59
 80059c4:	f000 fb3c 	bl	8006040 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 80059c8:	2000      	movs	r0, #0
 80059ca:	f7ff fe4f 	bl	800566c <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 80059ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059d2:	f7ff fb7f 	bl	80050d4 <FreqO_ApplyProfile>

}
 80059d6:	bf00      	nop
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20002638 	.word	0x20002638
 80059e0:	40013400 	.word	0x40013400

080059e4 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 80059e4:	b590      	push	{r4, r7, lr}
 80059e6:	b08b      	sub	sp, #44	; 0x2c
 80059e8:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
 80059ee:	e033      	b.n	8005a58 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 80059f0:	493c      	ldr	r1, [pc, #240]	; (8005ae4 <_InitAmpProfiles+0x100>)
 80059f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	3304      	adds	r3, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8005a04:	4b38      	ldr	r3, [pc, #224]	; (8005ae8 <_InitAmpProfiles+0x104>)
 8005a06:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005a08:	4936      	ldr	r1, [pc, #216]	; (8005ae4 <_InitAmpProfiles+0x100>)
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	3308      	adds	r3, #8
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005a26:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a32:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a3a:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005a3e:	4929      	ldr	r1, [pc, #164]	; (8005ae4 <_InitAmpProfiles+0x100>)
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	4613      	mov	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	1a9b      	subs	r3, r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3310      	adds	r3, #16
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	3301      	adds	r3, #1
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	2b61      	cmp	r3, #97	; 0x61
 8005a5c:	ddc8      	ble.n	80059f0 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	e037      	b.n	8005ad4 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8005a64:	4b21      	ldr	r3, [pc, #132]	; (8005aec <_InitAmpProfiles+0x108>)
 8005a66:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005a68:	491e      	ldr	r1, [pc, #120]	; (8005ae4 <_InitAmpProfiles+0x100>)
 8005a6a:	6a3a      	ldr	r2, [r7, #32]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	3304      	adds	r3, #4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005a7c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005a80:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a88:	ee16 0a90 	vmov	r0, s13
 8005a8c:	f7fa fd84 	bl	8000598 <__aeabi_f2d>
 8005a90:	4603      	mov	r3, r0
 8005a92:	460c      	mov	r4, r1
 8005a94:	ec44 3b10 	vmov	d0, r3, r4
 8005a98:	f00b fe42 	bl	8011720 <log10>
 8005a9c:	ec51 0b10 	vmov	r0, r1, d0
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <_InitAmpProfiles+0x10c>)
 8005aa6:	f7fa fdcf 	bl	8000648 <__aeabi_dmul>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	4618      	mov	r0, r3
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	f7fb f8c1 	bl	8000c38 <__aeabi_d2f>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8005aba:	490a      	ldr	r1, [pc, #40]	; (8005ae4 <_InitAmpProfiles+0x100>)
 8005abc:	6a3a      	ldr	r2, [r7, #32]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	330c      	adds	r3, #12
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	2b61      	cmp	r3, #97	; 0x61
 8005ad8:	ddc4      	ble.n	8005a64 <_InitAmpProfiles+0x80>

	}
}
 8005ada:	bf00      	nop
 8005adc:	372c      	adds	r7, #44	; 0x2c
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd90      	pop	{r4, r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000178 	.word	0x20000178
 8005ae8:	402ccccd 	.word	0x402ccccd
 8005aec:	3a83126f 	.word	0x3a83126f
 8005af0:	40340000 	.word	0x40340000

08005af4 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005afa:	4b28      	ldr	r3, [pc, #160]	; (8005b9c <_InitOutputChannels+0xa8>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005b00:	4b27      	ldr	r3, [pc, #156]	; (8005ba0 <_InitOutputChannels+0xac>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <_InitOutputChannels+0xa8>)
 8005b06:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005b08:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <_InitOutputChannels+0xa8>)
 8005b0a:	4a25      	ldr	r2, [pc, #148]	; (8005ba0 <_InitOutputChannels+0xac>)
 8005b0c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b10:	2300      	movs	r3, #0
 8005b12:	607b      	str	r3, [r7, #4]
 8005b14:	e00b      	b.n	8005b2e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005b16:	4a23      	ldr	r2, [pc, #140]	; (8005ba4 <_InitOutputChannels+0xb0>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b1e:	491f      	ldr	r1, [pc, #124]	; (8005b9c <_InitOutputChannels+0xa8>)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3302      	adds	r3, #2
 8005b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b77      	cmp	r3, #119	; 0x77
 8005b32:	ddf0      	ble.n	8005b16 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005b34:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <_InitOutputChannels+0xa8>)
 8005b36:	4a1c      	ldr	r2, [pc, #112]	; (8005ba8 <_InitOutputChannels+0xb4>)
 8005b38:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005b3c:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <_InitOutputChannels+0xa8>)
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <_InitOutputChannels+0xb8>)
 8005b40:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = Aux_CHANNEL;
 8005b44:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <_InitOutputChannels+0xbc>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <_InitOutputChannels+0xac>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <_InitOutputChannels+0xbc>)
 8005b50:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <_InitOutputChannels+0xbc>)
 8005b54:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <_InitOutputChannels+0xac>)
 8005b56:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	e00b      	b.n	8005b78 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005b60:	4a10      	ldr	r2, [pc, #64]	; (8005ba4 <_InitOutputChannels+0xb0>)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b68:	4911      	ldr	r1, [pc, #68]	; (8005bb0 <_InitOutputChannels+0xbc>)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	3302      	adds	r3, #2
 8005b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b77      	cmp	r3, #119	; 0x77
 8005b7c:	ddf0      	ble.n	8005b60 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <_InitOutputChannels+0xbc>)
 8005b80:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <_InitOutputChannels+0xb4>)
 8005b82:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <_InitOutputChannels+0xbc>)
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <_InitOutputChannels+0xb8>)
 8005b8a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20001f6c 	.word	0x20001f6c
 8005ba0:	20000128 	.word	0x20000128
 8005ba4:	200014b4 	.word	0x200014b4
 8005ba8:	20000b34 	.word	0x20000b34
 8005bac:	20000175 	.word	0x20000175
 8005bb0:	20002160 	.word	0x20002160

08005bb4 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005bc4:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <SM_GetOutputChannel+0x24>)
 8005bc6:	e000      	b.n	8005bca <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8005bc8:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <SM_GetOutputChannel+0x28>)
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20001f6c 	.word	0x20001f6c
 8005bdc:	20002160 	.word	0x20002160

08005be0 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b096      	sub	sp, #88	; 0x58
 8005be4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	609a      	str	r2, [r3, #8]
 8005bf2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005c00:	f107 0320 	add.w	r3, r7, #32
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	611a      	str	r2, [r3, #16]
 8005c10:	615a      	str	r2, [r3, #20]
 8005c12:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c14:	f107 030c 	add.w	r3, r7, #12
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	609a      	str	r2, [r3, #8]
 8005c20:	60da      	str	r2, [r3, #12]
 8005c22:	611a      	str	r2, [r3, #16]


	htim3.Instance = TIM3;
 8005c24:	4b4b      	ldr	r3, [pc, #300]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c26:	4a4c      	ldr	r2, [pc, #304]	; (8005d58 <SM_EnablePwmToAux+0x178>)
 8005c28:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8005c2a:	4b4a      	ldr	r3, [pc, #296]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005c30:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c32:	2210      	movs	r2, #16
 8005c34:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005c3c:	4b45      	ldr	r3, [pc, #276]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c42:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c44:	4b43      	ldr	r3, [pc, #268]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c46:	2280      	movs	r2, #128	; 0x80
 8005c48:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005c4a:	4842      	ldr	r0, [pc, #264]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c4c:	f005 ffa0 	bl	800bb90 <HAL_TIM_Base_Init>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <SM_EnablePwmToAux+0x7a>
	{
		Error_Handler();
 8005c56:	f001 faa3 	bl	80071a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c5e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005c60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c64:	4619      	mov	r1, r3
 8005c66:	483b      	ldr	r0, [pc, #236]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c68:	f006 fcee 	bl	800c648 <HAL_TIM_ConfigClockSource>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <SM_EnablePwmToAux+0x96>
	{
		Error_Handler();
 8005c72:	f001 fa95 	bl	80071a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005c76:	4837      	ldr	r0, [pc, #220]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c78:	f006 f875 	bl	800bd66 <HAL_TIM_PWM_Init>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <SM_EnablePwmToAux+0xa6>
	{
		Error_Handler();
 8005c82:	f001 fa8d 	bl	80071a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005c86:	2320      	movs	r3, #32
 8005c88:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005c8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c92:	4619      	mov	r1, r3
 8005c94:	482f      	ldr	r0, [pc, #188]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005c96:	f007 fb8b 	bl	800d3b0 <HAL_TIMEx_MasterConfigSynchronization>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <SM_EnablePwmToAux+0xc4>
	{
		Error_Handler();
 8005ca0:	f001 fa7e 	bl	80071a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ca4:	2360      	movs	r3, #96	; 0x60
 8005ca6:	623b      	str	r3, [r7, #32]
	sConfigOC.Pulse = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cb4:	f107 0320 	add.w	r3, r7, #32
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4825      	ldr	r0, [pc, #148]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005cbe:	f006 fbb3 	bl	800c428 <HAL_TIM_PWM_ConfigChannel>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <SM_EnablePwmToAux+0xec>
	{
		Error_Handler();
 8005cc8:	f001 fa6a 	bl	80071a0 <Error_Handler>
	}


	// Timer Post Initialization

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005ccc:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <SM_EnablePwmToAux+0x17c>)
 8005cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd0:	4a22      	ldr	r2, [pc, #136]	; (8005d5c <SM_EnablePwmToAux+0x17c>)
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cd8:	4b20      	ldr	r3, [pc, #128]	; (8005d5c <SM_EnablePwmToAux+0x17c>)
 8005cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
	/**TIM3 GPIO Configuration
	PA4     ------> TIM3_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ce4:	2340      	movs	r3, #64	; 0x40
 8005ce6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf8:	f107 030c 	add.w	r3, r7, #12
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d02:	f004 fc3f 	bl	800a584 <HAL_GPIO_Init>


	// TIM3_MspInit 0

	/* TIM3 clock enable */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <SM_EnablePwmToAux+0x17c>)
 8005d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0a:	4a14      	ldr	r2, [pc, #80]	; (8005d5c <SM_EnablePwmToAux+0x17c>)
 8005d0c:	f043 0302 	orr.w	r3, r3, #2
 8005d10:	6593      	str	r3, [r2, #88]	; 0x58
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <SM_EnablePwmToAux+0x17c>)
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	607b      	str	r3, [r7, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]

	/* TIM3 interrupt Init */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2100      	movs	r1, #0
 8005d22:	201d      	movs	r0, #29
 8005d24:	f003 fd01 	bl	800972a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d28:	201d      	movs	r0, #29
 8005d2a:	f003 fd18 	bl	800975e <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN TIM3_MspInit 1 */

	/* USER CODE END TIM3_MspInit 1 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4808      	ldr	r0, [pc, #32]	; (8005d54 <SM_EnablePwmToAux+0x174>)
 8005d32:	f006 f879 	bl	800be28 <HAL_TIM_PWM_Start>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8005d36:	2007      	movs	r0, #7
 8005d38:	f7ff fd76 	bl	8005828 <GO_ApplyPresetToSignal>
	// 50% duty cycle
	TIM3->CCR1 = 32768;
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <SM_EnablePwmToAux+0x178>)
 8005d3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005d42:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->ARR = 65535;
 8005d44:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <SM_EnablePwmToAux+0x178>)
 8005d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d4c:	bf00      	nop
 8005d4e:	3758      	adds	r7, #88	; 0x58
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20001f18 	.word	0x20001f18
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40021000 	.word	0x40021000

08005d60 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_MspDeInit 0 */

	/* USER CODE END TIM3_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_TIM3_CLK_DISABLE();
 8005d64:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <SM_DisablePwmToAux+0x1c>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	4a04      	ldr	r2, [pc, #16]	; (8005d7c <SM_DisablePwmToAux+0x1c>)
 8005d6a:	f023 0302 	bic.w	r3, r3, #2
 8005d6e:	6593      	str	r3, [r2, #88]	; 0x58

	/* TIM3 interrupt Deinit */
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8005d70:	201d      	movs	r0, #29
 8005d72:	f003 fd02 	bl	800977a <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN TIM3_MspDeInit 1 */

	/* USER CODE END TIM3_MspDeInit 1 */
}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40021000 	.word	0x40021000

08005d80 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b0b0      	sub	sp, #192	; 0xc0
 8005d84:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8005d86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d8a:	2230      	movs	r2, #48	; 0x30
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f009 f8ae 	bl	800eef0 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d94:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8005da4:	4b41      	ldr	r3, [pc, #260]	; (8005eac <SM_EnableDacToAux+0x12c>)
 8005da6:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8005da8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005dac:	4618      	mov	r0, r3
 8005dae:	f003 fcfe 	bl	80097ae <HAL_DAC_Init>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <SM_EnableDacToAux+0x3c>
	{
		Error_Handler();
 8005db8:	f001 f9f2 	bl	80071a0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005dbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_SignedFormat = DISABLE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8005dd6:	2306      	movs	r3, #6
 8005dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005df4:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005df8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f003 febe 	bl	8009b80 <HAL_DAC_ConfigChannel>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <SM_EnableDacToAux+0x8e>
	{
		Error_Handler();
 8005e0a:	f001 f9c9 	bl	80071a0 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	__HAL_RCC_DAC2_CLK_ENABLE();
 8005e0e:	4b28      	ldr	r3, [pc, #160]	; (8005eb0 <SM_EnableDacToAux+0x130>)
 8005e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e12:	4a27      	ldr	r2, [pc, #156]	; (8005eb0 <SM_EnableDacToAux+0x130>)
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e1a:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <SM_EnableDacToAux+0x130>)
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005e26:	4b22      	ldr	r3, [pc, #136]	; (8005eb0 <SM_EnableDacToAux+0x130>)
 8005e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2a:	4a21      	ldr	r2, [pc, #132]	; (8005eb0 <SM_EnableDacToAux+0x130>)
 8005e2c:	f043 0301 	orr.w	r3, r3, #1
 8005e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e32:	4b1f      	ldr	r3, [pc, #124]	; (8005eb0 <SM_EnableDacToAux+0x130>)
 8005e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	683b      	ldr	r3, [r7, #0]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005e3e:	2340      	movs	r3, #64	; 0x40
 8005e40:	67fb      	str	r3, [r7, #124]	; 0x7c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e42:	2303      	movs	r3, #3
 8005e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e52:	4619      	mov	r1, r3
 8005e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e58:	f004 fb94 	bl	800a584 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8005e5c:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <SM_EnableDacToAux+0x134>)
 8005e5e:	60bb      	str	r3, [r7, #8]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8005e60:	2329      	movs	r3, #41	; 0x29
 8005e62:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e64:	2310      	movs	r3, #16
 8005e66:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005e6c:	2380      	movs	r3, #128	; 0x80
 8005e6e:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e74:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e7a:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8005e7c:	2320      	movs	r3, #32
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005e80:	2300      	movs	r3, #0
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8005e84:	f107 0308 	add.w	r3, r7, #8
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f004 f8af 	bl	8009fec <HAL_DMA_Init>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <SM_EnableDacToAux+0x118>
	{
	  Error_Handler();
 8005e94:	f001 f984 	bl	80071a0 <Error_Handler>
	}

	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8005e98:	f107 0308 	add.w	r3, r7, #8
 8005e9c:	673b      	str	r3, [r7, #112]	; 0x70
 8005e9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8005ea4:	bf00      	nop
 8005ea6:	37c0      	adds	r7, #192	; 0xc0
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	50000c00 	.word	0x50000c00
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40020030 	.word	0x40020030

08005eb8 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8005ebc:	2140      	movs	r1, #64	; 0x40
 8005ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ec2:	f004 fce1 	bl	800a888 <HAL_GPIO_DeInit>
}
 8005ec6:	bf00      	nop
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8005edc:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <SM_GetEncoderValue+0x34>)
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <SM_GetEncoderValue+0x34>)
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	e002      	b.n	8005ef4 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8005eee:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <SM_GetEncoderValue+0x34>)
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	b29b      	uxth	r3, r3
	}
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	40012c00 	.word	0x40012c00

08005f04 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8005f0a:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <SM_GetOutputInHertz+0x7c>)
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <SM_GetOutputInHertz+0x16>
 8005f12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	e007      	b.n	8005f2a <SM_GetOutputInHertz+0x26>
 8005f1a:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <SM_GetOutputInHertz+0x7c>)
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8005f2a:	4b15      	ldr	r3, [pc, #84]	; (8005f80 <SM_GetOutputInHertz+0x7c>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <SM_GetOutputInHertz+0x36>
 8005f32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005f36:	607b      	str	r3, [r7, #4]
 8005f38:	e007      	b.n	8005f4a <SM_GetOutputInHertz+0x46>
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <SM_GetOutputInHertz+0x7c>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8005f4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f56:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005f84 <SM_GetOutputInHertz+0x80>
 8005f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5e:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8005f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f66:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005f88 <SM_GetOutputInHertz+0x84>
 8005f6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f6e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005f72:	eeb0 0a67 	vmov.f32	s0, s15
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40013400 	.word	0x40013400
 8005f84:	4d2037a0 	.word	0x4d2037a0
 8005f88:	42f00000 	.word	0x42f00000

08005f8c <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8005f98:	887b      	ldrh	r3, [r7, #2]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <SM_ConvertPeriodToHertz+0x16>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8005fa2:	887b      	ldrh	r3, [r7, #2]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005fd4 <SM_ConvertPeriodToHertz+0x48>
 8005fbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005fc2:	eef0 7a66 	vmov.f32	s15, s13
}
 8005fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	4d2037a0 	.word	0x4d2037a0

08005fd8 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <SM_IsFuncPwmDutyMode+0x14>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20001e96 	.word	0x20001e96

08005ff0 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8005ff4:	4b05      	ldr	r3, [pc, #20]	; (800600c <SM_ToggleFuncPwmDutyMode+0x1c>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f083 0301 	eor.w	r3, r3, #1
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	4b03      	ldr	r3, [pc, #12]	; (800600c <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006000:	701a      	strb	r2, [r3, #0]
}
 8006002:	bf00      	nop
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20001e96 	.word	0x20001e96

08006010 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006014:	4b03      	ldr	r3, [pc, #12]	; (8006024 <SM_ResetFuncPwmDutyMode+0x14>)
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]

}
 800601a:	bf00      	nop
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	20001e96 	.word	0x20001e96

08006028 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 800602c:	4b03      	ldr	r3, [pc, #12]	; (800603c <VPP_ResetLastEncoderValue+0x14>)
 800602e:	2200      	movs	r2, #0
 8006030:	801a      	strh	r2, [r3, #0]
}
 8006032:	bf00      	nop
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	20001e98 	.word	0x20001e98

08006040 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800604a:	79fa      	ldrb	r2, [r7, #7]
 800604c:	4613      	mov	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4a10      	ldr	r2, [pc, #64]	; (8006098 <VPP_ApplyProfileToSignal+0x58>)
 8006056:	4413      	add	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 800605a:	2000      	movs	r0, #0
 800605c:	f7ff fdaa 	bl	8005bb4 <SM_GetOutputChannel>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	7a1b      	ldrb	r3, [r3, #8]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fbdb 	bl	8005828 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	edd3 7a04 	vldr	s15, [r3, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	ed93 7a05 	vldr	s14, [r3, #20]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8b1b      	ldrh	r3, [r3, #24]
 8006082:	4618      	mov	r0, r3
 8006084:	eef0 0a47 	vmov.f32	s1, s14
 8006088:	eeb0 0a67 	vmov.f32	s0, s15
 800608c:	f000 f830 	bl	80060f0 <_ProcessSignalDataTable>


}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20000178 	.word	0x20000178

0800609c <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80060a6:	79fa      	ldrb	r2, [r7, #7]
 80060a8:	4613      	mov	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4a0e      	ldr	r2, [pc, #56]	; (80060ec <VPP_ApplyProfileToAux+0x50>)
 80060b2:	4413      	add	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(Aux_CHANNEL)->amp_profile = pNextEncPreset;
 80060b6:	2001      	movs	r0, #1
 80060b8:	f7ff fd7c 	bl	8005bb4 <SM_GetOutputChannel>
 80060bc:	4602      	mov	r2, r0
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	ed93 7a05 	vldr	s14, [r3, #20]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8b1b      	ldrh	r3, [r3, #24]
 80060d4:	4618      	mov	r0, r3
 80060d6:	eef0 0a47 	vmov.f32	s1, s14
 80060da:	eeb0 0a67 	vmov.f32	s0, s15
 80060de:	f000 f88d 	bl	80061fc <_ProcessAuxDataTable>



}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000178 	.word	0x20000178

080060f0 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80060fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80060fe:	4603      	mov	r3, r0
 8006100:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8006102:	2000      	movs	r0, #0
 8006104:	f7ff fd56 	bl	8005bb4 <SM_GetOutputChannel>
 8006108:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b06      	cmp	r3, #6
 8006114:	d06b      	beq.n	80061ee <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006116:	2300      	movs	r3, #0
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
 800611a:	e00c      	b.n	8006136 <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4933      	ldr	r1, [pc, #204]	; (80061f8 <_ProcessSignalDataTable+0x108>)
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	3301      	adds	r3, #1
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	2b77      	cmp	r3, #119	; 0x77
 800613a:	ddef      	ble.n	800611c <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 800613c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006140:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	b29b      	uxth	r3, r3
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006156:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	e02e      	b.n	80061be <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006160:	4a25      	ldr	r2, [pc, #148]	; (80061f8 <_ProcessSignalDataTable+0x108>)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006170:	edd7 7a03 	vldr	s15, [r7, #12]
 8006174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617c:	ee17 1a90 	vmov	r1, s15
 8006180:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <_ProcessSignalDataTable+0x108>)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006188:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <_ProcessSignalDataTable+0x108>)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006190:	ee07 3a90 	vmov	s15, r3
 8006194:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006198:	edd7 7a08 	vldr	s15, [r7, #32]
 800619c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80061a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80061a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ac:	ee17 1a90 	vmov	r1, s15
 80061b0:	4a11      	ldr	r2, [pc, #68]	; (80061f8 <_ProcessSignalDataTable+0x108>)
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	3301      	adds	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	2b77      	cmp	r3, #119	; 0x77
 80061c2:	ddcd      	ble.n	8006160 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80061c4:	2300      	movs	r3, #0
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	e00e      	b.n	80061e8 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80061ca:	2000      	movs	r0, #0
 80061cc:	f7ff fcf2 	bl	8005bb4 <SM_GetOutputChannel>
 80061d0:	4601      	mov	r1, r0
 80061d2:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <_ProcessSignalDataTable+0x108>)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	3302      	adds	r3, #2
 80061de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	3301      	adds	r3, #1
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b77      	cmp	r3, #119	; 0x77
 80061ec:	dded      	ble.n	80061ca <_ProcessSignalDataTable+0xda>
		}
	}

}
 80061ee:	bf00      	nop
 80061f0:	3728      	adds	r7, #40	; 0x28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20002354 	.word	0x20002354

080061fc <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	ed87 0a03 	vstr	s0, [r7, #12]
 8006206:	edc7 0a02 	vstr	s1, [r7, #8]
 800620a:	4603      	mov	r3, r0
 800620c:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(Aux_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 800620e:	2001      	movs	r0, #1
 8006210:	f7ff fcd0 	bl	8005bb4 <SM_GetOutputChannel>
 8006214:	4603      	mov	r3, r0
 8006216:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b06      	cmp	r3, #6
 800621e:	d059      	beq.n	80062d4 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006220:	2300      	movs	r3, #0
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	e00f      	b.n	8006246 <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(Aux_CHANNEL)->ref_lut_data[i];
 8006226:	2001      	movs	r0, #1
 8006228:	f7ff fcc4 	bl	8005bb4 <SM_GetOutputChannel>
 800622c:	4603      	mov	r3, r0
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4933      	ldr	r1, [pc, #204]	; (8006308 <_ProcessAuxDataTable+0x10c>)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b77      	cmp	r3, #119	; 0x77
 800624a:	ddec      	ble.n	8006226 <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 800624c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006250:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	089b      	lsrs	r3, r3, #2
 800625c:	b29b      	uxth	r3, r3
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006266:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e02e      	b.n	80062ce <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006270:	4a25      	ldr	r2, [pc, #148]	; (8006308 <_ProcessAuxDataTable+0x10c>)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006278:	ee07 3a90 	vmov	s15, r3
 800627c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006280:	edd7 7a03 	vldr	s15, [r7, #12]
 8006284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628c:	ee17 1a90 	vmov	r1, s15
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <_ProcessAuxDataTable+0x10c>)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006298:	4a1b      	ldr	r2, [pc, #108]	; (8006308 <_ProcessAuxDataTable+0x10c>)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80062ac:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80062b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80062b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062bc:	ee17 1a90 	vmov	r1, s15
 80062c0:	4a11      	ldr	r2, [pc, #68]	; (8006308 <_ProcessAuxDataTable+0x10c>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	3301      	adds	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b77      	cmp	r3, #119	; 0x77
 80062d2:	ddcd      	ble.n	8006270 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80062d4:	2300      	movs	r3, #0
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	e00e      	b.n	80062f8 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(Aux_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80062da:	2001      	movs	r0, #1
 80062dc:	f7ff fc6a 	bl	8005bb4 <SM_GetOutputChannel>
 80062e0:	4601      	mov	r1, r0
 80062e2:	4a09      	ldr	r2, [pc, #36]	; (8006308 <_ProcessAuxDataTable+0x10c>)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3302      	adds	r3, #2
 80062ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	3301      	adds	r3, #1
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	2b77      	cmp	r3, #119	; 0x77
 80062fc:	dded      	ble.n	80062da <_ProcessAuxDataTable+0xde>
	}
}
 80062fe:	bf00      	nop
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20002354 	.word	0x20002354

0800630c <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8006316:	2000      	movs	r0, #0
 8006318:	f7ff fc4c 	bl	8005bb4 <SM_GetOutputChannel>
 800631c:	4603      	mov	r3, r0
 800631e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006326:	4b15      	ldr	r3, [pc, #84]	; (800637c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	429a      	cmp	r2, r3
 800632e:	d90c      	bls.n	800634a <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	3301      	adds	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b61      	cmp	r3, #97	; 0x61
 800633a:	d901      	bls.n	8006340 <VPP_MapEncoderPositionToSignalOutput+0x34>
 800633c:	2361      	movs	r3, #97	; 0x61
 800633e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fe7c 	bl	8006040 <VPP_ApplyProfileToSignal>
 8006348:	e010      	b.n	800636c <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 800634a:	4b0c      	ldr	r3, [pc, #48]	; (800637c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	429a      	cmp	r2, r3
 8006352:	d20b      	bcs.n	800636c <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	3b01      	subs	r3, #1
 8006358:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b61      	cmp	r3, #97	; 0x61
 800635e:	d901      	bls.n	8006364 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8006360:	2300      	movs	r3, #0
 8006362:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fe6a 	bl	8006040 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 800636c:	4a03      	ldr	r2, [pc, #12]	; (800637c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	8013      	strh	r3, [r2, #0]

}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20001e98 	.word	0x20001e98

08006380 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(Aux_CHANNEL)->amp_profile->amp_setting;
 800638a:	2001      	movs	r0, #1
 800638c:	f7ff fc12 	bl	8005bb4 <SM_GetOutputChannel>
 8006390:	4603      	mov	r3, r0
 8006392:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800639a:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d90c      	bls.n	80063be <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	3301      	adds	r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b61      	cmp	r3, #97	; 0x61
 80063ae:	d901      	bls.n	80063b4 <VPP_MapEncoderPositionToAuxOutput+0x34>
 80063b0:	2361      	movs	r3, #97	; 0x61
 80063b2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff fe70 	bl	800609c <VPP_ApplyProfileToAux>
 80063bc:	e010      	b.n	80063e0 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80063be:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d20b      	bcs.n	80063e0 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	2b61      	cmp	r3, #97	; 0x61
 80063d2:	d901      	bls.n	80063d8 <VPP_MapEncoderPositionToAuxOutput+0x58>
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fe5e 	bl	800609c <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 80063e0:	4a03      	ldr	r2, [pc, #12]	; (80063f0 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	8013      	strh	r3, [r2, #0]

}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20001e98 	.word	0x20001e98

080063f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	; 0x30
 80063f8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80063fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006406:	1d3b      	adds	r3, r7, #4
 8006408:	2220      	movs	r2, #32
 800640a:	2100      	movs	r1, #0
 800640c:	4618      	mov	r0, r3
 800640e:	f008 fd6f 	bl	800eef0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006412:	4b32      	ldr	r3, [pc, #200]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800641a:	4b30      	ldr	r3, [pc, #192]	; (80064dc <MX_ADC1_Init+0xe8>)
 800641c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006420:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006422:	4b2e      	ldr	r3, [pc, #184]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006424:	2200      	movs	r2, #0
 8006426:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006428:	4b2c      	ldr	r3, [pc, #176]	; (80064dc <MX_ADC1_Init+0xe8>)
 800642a:	2200      	movs	r2, #0
 800642c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800642e:	4b2b      	ldr	r3, [pc, #172]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006430:	2200      	movs	r2, #0
 8006432:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006434:	4b29      	ldr	r3, [pc, #164]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006436:	2200      	movs	r2, #0
 8006438:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800643a:	4b28      	ldr	r3, [pc, #160]	; (80064dc <MX_ADC1_Init+0xe8>)
 800643c:	2204      	movs	r2, #4
 800643e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006440:	4b26      	ldr	r3, [pc, #152]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006442:	2200      	movs	r2, #0
 8006444:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006446:	4b25      	ldr	r3, [pc, #148]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006448:	2201      	movs	r2, #1
 800644a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800644c:	4b23      	ldr	r3, [pc, #140]	; (80064dc <MX_ADC1_Init+0xe8>)
 800644e:	2201      	movs	r2, #1
 8006450:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006452:	4b22      	ldr	r3, [pc, #136]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800645a:	4b20      	ldr	r3, [pc, #128]	; (80064dc <MX_ADC1_Init+0xe8>)
 800645c:	2200      	movs	r2, #0
 800645e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006460:	4b1e      	ldr	r3, [pc, #120]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006466:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800646e:	4b1b      	ldr	r3, [pc, #108]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006470:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006474:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006476:	4b19      	ldr	r3, [pc, #100]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800647e:	4817      	ldr	r0, [pc, #92]	; (80064dc <MX_ADC1_Init+0xe8>)
 8006480:	f001 fed8 	bl	8008234 <HAL_ADC_Init>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800648a:	f000 fe89 	bl	80071a0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800648e:	2300      	movs	r3, #0
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006496:	4619      	mov	r1, r3
 8006498:	4810      	ldr	r0, [pc, #64]	; (80064dc <MX_ADC1_Init+0xe8>)
 800649a:	f002 fc61 	bl	8008d60 <HAL_ADCEx_MultiModeConfigChannel>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80064a4:	f000 fe7c 	bl	80071a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80064a8:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <MX_ADC1_Init+0xec>)
 80064aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80064ac:	2306      	movs	r3, #6
 80064ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80064b4:	237f      	movs	r3, #127	; 0x7f
 80064b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80064b8:	2304      	movs	r3, #4
 80064ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064c0:	1d3b      	adds	r3, r7, #4
 80064c2:	4619      	mov	r1, r3
 80064c4:	4805      	ldr	r0, [pc, #20]	; (80064dc <MX_ADC1_Init+0xe8>)
 80064c6:	f002 f875 	bl	80085b4 <HAL_ADC_ConfigChannel>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80064d0:	f000 fe66 	bl	80071a0 <Error_Handler>
  }

}
 80064d4:	bf00      	nop
 80064d6:	3730      	adds	r7, #48	; 0x30
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20002534 	.word	0x20002534
 80064e0:	0c900008 	.word	0x0c900008

080064e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ec:	f107 0314 	add.w	r3, r7, #20
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	605a      	str	r2, [r3, #4]
 80064f6:	609a      	str	r2, [r3, #8]
 80064f8:	60da      	str	r2, [r3, #12]
 80064fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006504:	d14f      	bne.n	80065a6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006506:	4b2a      	ldr	r3, [pc, #168]	; (80065b0 <HAL_ADC_MspInit+0xcc>)
 8006508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650a:	4a29      	ldr	r2, [pc, #164]	; (80065b0 <HAL_ADC_MspInit+0xcc>)
 800650c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006512:	4b27      	ldr	r3, [pc, #156]	; (80065b0 <HAL_ADC_MspInit+0xcc>)
 8006514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800651e:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <HAL_ADC_MspInit+0xcc>)
 8006520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006522:	4a23      	ldr	r2, [pc, #140]	; (80065b0 <HAL_ADC_MspInit+0xcc>)
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800652a:	4b21      	ldr	r3, [pc, #132]	; (80065b0 <HAL_ADC_MspInit+0xcc>)
 800652c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006536:	2304      	movs	r3, #4
 8006538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800653a:	2303      	movs	r3, #3
 800653c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006542:	f107 0314 	add.w	r3, r7, #20
 8006546:	4619      	mov	r1, r3
 8006548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800654c:	f004 f81a 	bl	800a584 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006550:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 8006552:	4a19      	ldr	r2, [pc, #100]	; (80065b8 <HAL_ADC_MspInit+0xd4>)
 8006554:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006556:	4b17      	ldr	r3, [pc, #92]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 8006558:	2205      	movs	r2, #5
 800655a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800655c:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 800655e:	2200      	movs	r2, #0
 8006560:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006562:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 8006564:	2200      	movs	r2, #0
 8006566:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006568:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 800656a:	2280      	movs	r2, #128	; 0x80
 800656c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800656e:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 8006570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006574:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 8006578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800657c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 8006580:	2220      	movs	r2, #32
 8006582:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 8006586:	2200      	movs	r2, #0
 8006588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800658a:	480a      	ldr	r0, [pc, #40]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 800658c:	f003 fd2e 	bl	8009fec <HAL_DMA_Init>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006596:	f000 fe03 	bl	80071a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a05      	ldr	r2, [pc, #20]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
 80065a0:	4a04      	ldr	r2, [pc, #16]	; (80065b4 <HAL_ADC_MspInit+0xd0>)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80065a6:	bf00      	nop
 80065a8:	3728      	adds	r7, #40	; 0x28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	200025a0 	.word	0x200025a0
 80065b8:	40020008 	.word	0x40020008

080065bc <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80065c0:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <MX_COMP1_Init+0x44>)
 80065c2:	4a10      	ldr	r2, [pc, #64]	; (8006604 <MX_COMP1_Init+0x48>)
 80065c4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80065c6:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <MX_COMP1_Init+0x44>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80065cc:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <MX_COMP1_Init+0x44>)
 80065ce:	4a0e      	ldr	r2, [pc, #56]	; (8006608 <MX_COMP1_Init+0x4c>)
 80065d0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80065d2:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <MX_COMP1_Init+0x44>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <MX_COMP1_Init+0x44>)
 80065da:	2200      	movs	r2, #0
 80065dc:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80065de:	4b08      	ldr	r3, [pc, #32]	; (8006600 <MX_COMP1_Init+0x44>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <MX_COMP1_Init+0x44>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80065ea:	4805      	ldr	r0, [pc, #20]	; (8006600 <MX_COMP1_Init+0x44>)
 80065ec:	f002 fe0c 	bl	8009208 <HAL_COMP_Init>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80065f6:	f000 fdd3 	bl	80071a0 <Error_Handler>
  }

}
 80065fa:	bf00      	nop
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20002600 	.word	0x20002600
 8006604:	40010200 	.word	0x40010200
 8006608:	00800030 	.word	0x00800030

0800660c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006614:	f107 030c 	add.w	r3, r7, #12
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	609a      	str	r2, [r3, #8]
 8006620:	60da      	str	r2, [r3, #12]
 8006622:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a0f      	ldr	r2, [pc, #60]	; (8006668 <HAL_COMP_MspInit+0x5c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d118      	bne.n	8006660 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <HAL_COMP_MspInit+0x60>)
 8006630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006632:	4a0e      	ldr	r2, [pc, #56]	; (800666c <HAL_COMP_MspInit+0x60>)
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800663a:	4b0c      	ldr	r3, [pc, #48]	; (800666c <HAL_COMP_MspInit+0x60>)
 800663c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006646:	2302      	movs	r3, #2
 8006648:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800664a:	2303      	movs	r3, #3
 800664c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006652:	f107 030c 	add.w	r3, r7, #12
 8006656:	4619      	mov	r1, r3
 8006658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800665c:	f003 ff92 	bl	800a584 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006660:	bf00      	nop
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40010200 	.word	0x40010200
 800666c:	40021000 	.word	0x40021000

08006670 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08c      	sub	sp, #48	; 0x30
 8006674:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006676:	463b      	mov	r3, r7
 8006678:	2230      	movs	r2, #48	; 0x30
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f008 fc37 	bl	800eef0 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006682:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <MX_DAC1_Init+0x8c>)
 8006684:	4a1e      	ldr	r2, [pc, #120]	; (8006700 <MX_DAC1_Init+0x90>)
 8006686:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006688:	481c      	ldr	r0, [pc, #112]	; (80066fc <MX_DAC1_Init+0x8c>)
 800668a:	f003 f890 	bl	80097ae <HAL_DAC_Init>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006694:	f000 fd84 	bl	80071a0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800669c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800669e:	2300      	movs	r3, #0
 80066a0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80066aa:	2306      	movs	r3, #6
 80066ac:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80066be:	463b      	mov	r3, r7
 80066c0:	2200      	movs	r2, #0
 80066c2:	4619      	mov	r1, r3
 80066c4:	480d      	ldr	r0, [pc, #52]	; (80066fc <MX_DAC1_Init+0x8c>)
 80066c6:	f003 fa5b 	bl	8009b80 <HAL_DAC_ConfigChannel>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80066d0:	f000 fd66 	bl	80071a0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80066d8:	2301      	movs	r3, #1
 80066da:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80066dc:	463b      	mov	r3, r7
 80066de:	2210      	movs	r2, #16
 80066e0:	4619      	mov	r1, r3
 80066e2:	4806      	ldr	r0, [pc, #24]	; (80066fc <MX_DAC1_Init+0x8c>)
 80066e4:	f003 fa4c 	bl	8009b80 <HAL_DAC_ConfigChannel>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80066ee:	f000 fd57 	bl	80071a0 <Error_Handler>
  }

}
 80066f2:	bf00      	nop
 80066f4:	3730      	adds	r7, #48	; 0x30
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20002638 	.word	0x20002638
 8006700:	50000800 	.word	0x50000800

08006704 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08c      	sub	sp, #48	; 0x30
 8006708:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800670a:	463b      	mov	r3, r7
 800670c:	2230      	movs	r2, #48	; 0x30
 800670e:	2100      	movs	r1, #0
 8006710:	4618      	mov	r0, r3
 8006712:	f008 fbed 	bl	800eef0 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006716:	4b16      	ldr	r3, [pc, #88]	; (8006770 <MX_DAC2_Init+0x6c>)
 8006718:	4a16      	ldr	r2, [pc, #88]	; (8006774 <MX_DAC2_Init+0x70>)
 800671a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800671c:	4814      	ldr	r0, [pc, #80]	; (8006770 <MX_DAC2_Init+0x6c>)
 800671e:	f003 f846 	bl	80097ae <HAL_DAC_Init>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006728:	f000 fd3a 	bl	80071a0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800672c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006730:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006732:	2300      	movs	r3, #0
 8006734:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006736:	2300      	movs	r3, #0
 8006738:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800673a:	2300      	movs	r3, #0
 800673c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800673e:	2306      	movs	r3, #6
 8006740:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006742:	2300      	movs	r3, #0
 8006744:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800674a:	2301      	movs	r3, #1
 800674c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800674e:	2300      	movs	r3, #0
 8006750:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006752:	463b      	mov	r3, r7
 8006754:	2200      	movs	r2, #0
 8006756:	4619      	mov	r1, r3
 8006758:	4805      	ldr	r0, [pc, #20]	; (8006770 <MX_DAC2_Init+0x6c>)
 800675a:	f003 fa11 	bl	8009b80 <HAL_DAC_ConfigChannel>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006764:	f000 fd1c 	bl	80071a0 <Error_Handler>
  }

}
 8006768:	bf00      	nop
 800676a:	3730      	adds	r7, #48	; 0x30
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20002624 	.word	0x20002624
 8006774:	50000c00 	.word	0x50000c00

08006778 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08c      	sub	sp, #48	; 0x30
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006780:	f107 031c 	add.w	r3, r7, #28
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	605a      	str	r2, [r3, #4]
 800678a:	609a      	str	r2, [r3, #8]
 800678c:	60da      	str	r2, [r3, #12]
 800678e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a56      	ldr	r2, [pc, #344]	; (80068f0 <HAL_DAC_MspInit+0x178>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d150      	bne.n	800683c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800679a:	4b56      	ldr	r3, [pc, #344]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 800679c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679e:	4a55      	ldr	r2, [pc, #340]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 80067a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067a6:	4b53      	ldr	r3, [pc, #332]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 80067a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067b2:	4b50      	ldr	r3, [pc, #320]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 80067b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b6:	4a4f      	ldr	r2, [pc, #316]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067be:	4b4d      	ldr	r3, [pc, #308]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80067ca:	2330      	movs	r3, #48	; 0x30
 80067cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067ce:	2303      	movs	r3, #3
 80067d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067d6:	f107 031c 	add.w	r3, r7, #28
 80067da:	4619      	mov	r1, r3
 80067dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067e0:	f003 fed0 	bl	800a584 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80067e4:	4b44      	ldr	r3, [pc, #272]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 80067e6:	4a45      	ldr	r2, [pc, #276]	; (80068fc <HAL_DAC_MspInit+0x184>)
 80067e8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80067ea:	4b43      	ldr	r3, [pc, #268]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 80067ec:	2206      	movs	r2, #6
 80067ee:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067f0:	4b41      	ldr	r3, [pc, #260]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 80067f2:	2210      	movs	r2, #16
 80067f4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80067f6:	4b40      	ldr	r3, [pc, #256]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80067fc:	4b3e      	ldr	r3, [pc, #248]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 80067fe:	2280      	movs	r2, #128	; 0x80
 8006800:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006802:	4b3d      	ldr	r3, [pc, #244]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 8006804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006808:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800680a:	4b3b      	ldr	r3, [pc, #236]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 800680c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006810:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006812:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 8006814:	2220      	movs	r2, #32
 8006816:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006818:	4b37      	ldr	r3, [pc, #220]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 800681a:	2200      	movs	r2, #0
 800681c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800681e:	4836      	ldr	r0, [pc, #216]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 8006820:	f003 fbe4 	bl	8009fec <HAL_DMA_Init>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800682a:	f000 fcb9 	bl	80071a0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a31      	ldr	r2, [pc, #196]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	4a30      	ldr	r2, [pc, #192]	; (80068f8 <HAL_DAC_MspInit+0x180>)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800683a:	e054      	b.n	80068e6 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a2f      	ldr	r2, [pc, #188]	; (8006900 <HAL_DAC_MspInit+0x188>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d14f      	bne.n	80068e6 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006846:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 8006848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684a:	4a2a      	ldr	r2, [pc, #168]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 800684c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006852:	4b28      	ldr	r3, [pc, #160]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 8006854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800685e:	4b25      	ldr	r3, [pc, #148]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 8006860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006862:	4a24      	ldr	r2, [pc, #144]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800686a:	4b22      	ldr	r3, [pc, #136]	; (80068f4 <HAL_DAC_MspInit+0x17c>)
 800686c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006876:	2340      	movs	r3, #64	; 0x40
 8006878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800687a:	2303      	movs	r3, #3
 800687c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687e:	2300      	movs	r3, #0
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006882:	f107 031c 	add.w	r3, r7, #28
 8006886:	4619      	mov	r1, r3
 8006888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800688c:	f003 fe7a 	bl	800a584 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006890:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 8006892:	4a1d      	ldr	r2, [pc, #116]	; (8006908 <HAL_DAC_MspInit+0x190>)
 8006894:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006896:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 8006898:	2229      	movs	r2, #41	; 0x29
 800689a:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800689c:	4b19      	ldr	r3, [pc, #100]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 800689e:	2210      	movs	r2, #16
 80068a0:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80068a2:	4b18      	ldr	r3, [pc, #96]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80068a8:	4b16      	ldr	r3, [pc, #88]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 80068aa:	2280      	movs	r2, #128	; 0x80
 80068ac:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80068ae:	4b15      	ldr	r3, [pc, #84]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 80068b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b4:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80068b6:	4b13      	ldr	r3, [pc, #76]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 80068b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068bc:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80068be:	4b11      	ldr	r3, [pc, #68]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 80068c0:	2220      	movs	r2, #32
 80068c2:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80068c4:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80068ca:	480e      	ldr	r0, [pc, #56]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 80068cc:	f003 fb8e 	bl	8009fec <HAL_DMA_Init>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80068d6:	f000 fc63 	bl	80071a0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a09      	ldr	r2, [pc, #36]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	4a08      	ldr	r2, [pc, #32]	; (8006904 <HAL_DAC_MspInit+0x18c>)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80068e6:	bf00      	nop
 80068e8:	3730      	adds	r7, #48	; 0x30
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	50000800 	.word	0x50000800
 80068f4:	40021000 	.word	0x40021000
 80068f8:	20001eac 	.word	0x20001eac
 80068fc:	4002001c 	.word	0x4002001c
 8006900:	50000c00 	.word	0x50000c00
 8006904:	2000264c 	.word	0x2000264c
 8006908:	40020030 	.word	0x40020030

0800690c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006912:	4b1a      	ldr	r3, [pc, #104]	; (800697c <MX_DMA_Init+0x70>)
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	4a19      	ldr	r2, [pc, #100]	; (800697c <MX_DMA_Init+0x70>)
 8006918:	f043 0304 	orr.w	r3, r3, #4
 800691c:	6493      	str	r3, [r2, #72]	; 0x48
 800691e:	4b17      	ldr	r3, [pc, #92]	; (800697c <MX_DMA_Init+0x70>)
 8006920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800692a:	4b14      	ldr	r3, [pc, #80]	; (800697c <MX_DMA_Init+0x70>)
 800692c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800692e:	4a13      	ldr	r2, [pc, #76]	; (800697c <MX_DMA_Init+0x70>)
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	6493      	str	r3, [r2, #72]	; 0x48
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <MX_DMA_Init+0x70>)
 8006938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006942:	2200      	movs	r2, #0
 8006944:	2101      	movs	r1, #1
 8006946:	200b      	movs	r0, #11
 8006948:	f002 feef 	bl	800972a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800694c:	200b      	movs	r0, #11
 800694e:	f002 ff06 	bl	800975e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006952:	2200      	movs	r2, #0
 8006954:	2100      	movs	r1, #0
 8006956:	200c      	movs	r0, #12
 8006958:	f002 fee7 	bl	800972a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800695c:	200c      	movs	r0, #12
 800695e:	f002 fefe 	bl	800975e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006962:	2200      	movs	r2, #0
 8006964:	2100      	movs	r1, #0
 8006966:	200d      	movs	r0, #13
 8006968:	f002 fedf 	bl	800972a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800696c:	200d      	movs	r0, #13
 800696e:	f002 fef6 	bl	800975e <HAL_NVIC_EnableIRQ>

}
 8006972:	bf00      	nop
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40021000 	.word	0x40021000

08006980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <__NVIC_GetPriorityGrouping+0x18>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	f003 0307 	and.w	r3, r3, #7
}
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	e000ed00 	.word	0xe000ed00

0800699c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	db0b      	blt.n	80069c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	f003 021f 	and.w	r2, r3, #31
 80069b4:	4907      	ldr	r1, [pc, #28]	; (80069d4 <__NVIC_EnableIRQ+0x38>)
 80069b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2001      	movs	r0, #1
 80069be:	fa00 f202 	lsl.w	r2, r0, r2
 80069c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	e000e100 	.word	0xe000e100

080069d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	6039      	str	r1, [r7, #0]
 80069e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	db0a      	blt.n	8006a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	490c      	ldr	r1, [pc, #48]	; (8006a24 <__NVIC_SetPriority+0x4c>)
 80069f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f6:	0112      	lsls	r2, r2, #4
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	440b      	add	r3, r1
 80069fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a00:	e00a      	b.n	8006a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4908      	ldr	r1, [pc, #32]	; (8006a28 <__NVIC_SetPriority+0x50>)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	0112      	lsls	r2, r2, #4
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	440b      	add	r3, r1
 8006a16:	761a      	strb	r2, [r3, #24]
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	e000e100 	.word	0xe000e100
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f1c3 0307 	rsb	r3, r3, #7
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf28      	it	cs
 8006a4a:	2304      	movcs	r3, #4
 8006a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3304      	adds	r3, #4
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d902      	bls.n	8006a5c <NVIC_EncodePriority+0x30>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3b03      	subs	r3, #3
 8006a5a:	e000      	b.n	8006a5e <NVIC_EncodePriority+0x32>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43da      	mvns	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	401a      	ands	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7e:	43d9      	mvns	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a84:	4313      	orrs	r3, r2
         );
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3724      	adds	r7, #36	; 0x24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8006a9e:	4a14      	ldr	r2, [pc, #80]	; (8006af0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	f003 0303 	and.w	r3, r3, #3
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	ea02 0103 	and.w	r1, r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	fa93 f3a3 	rbit	r3, r3
 8006ac2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	fab3 f383 	clz	r3, r3
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 031f 	and.w	r3, r3, #31
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	409a      	lsls	r2, r3
 8006ad4:	4806      	ldr	r0, [pc, #24]	; (8006af0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	430a      	orrs	r2, r1
 8006ade:	3302      	adds	r3, #2
 8006ae0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	40010000 	.word	0x40010000

08006af4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	; 0x24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	fa93 f3a3 	rbit	r3, r3
 8006b0e:	613b      	str	r3, [r7, #16]
  return result;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	fab3 f383 	clz	r3, r3
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	2103      	movs	r1, #3
 8006b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b20:	43db      	mvns	r3, r3
 8006b22:	401a      	ands	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	fa93 f3a3 	rbit	r3, r3
 8006b2e:	61bb      	str	r3, [r7, #24]
  return result;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	fab3 f383 	clz	r3, r3
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	601a      	str	r2, [r3, #0]
}
 8006b46:	bf00      	nop
 8006b48:	3724      	adds	r7, #36	; 0x24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b089      	sub	sp, #36	; 0x24
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	fa93 f3a3 	rbit	r3, r3
 8006b6c:	613b      	str	r3, [r7, #16]
  return result;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	fab3 f383 	clz	r3, r3
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	2103      	movs	r1, #3
 8006b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	401a      	ands	r2, r3
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	fa93 f3a3 	rbit	r3, r3
 8006b8c:	61bb      	str	r3, [r7, #24]
  return result;
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	fab3 f383 	clz	r3, r3
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	60da      	str	r2, [r3, #12]
}
 8006ba4:	bf00      	nop
 8006ba6:	3724      	adds	r7, #36	; 0x24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006bd4:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bd8:	4907      	ldr	r1, [pc, #28]	; (8006bf8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4013      	ands	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bea:	68fb      	ldr	r3, [r7, #12]
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	40021000 	.word	0x40021000

08006bfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	; 0x28
 8006c00:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8006c02:	f107 031c 	add.w	r3, r7, #28
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	609a      	str	r2, [r3, #8]
 8006c18:	60da      	str	r2, [r3, #12]
 8006c1a:	611a      	str	r2, [r3, #16]
 8006c1c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006c1e:	2004      	movs	r0, #4
 8006c20:	f7ff ffd4 	bl	8006bcc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006c24:	2020      	movs	r0, #32
 8006c26:	f7ff ffd1 	bl	8006bcc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	f7ff ffce 	bl	8006bcc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006c30:	2002      	movs	r0, #2
 8006c32:	f7ff ffcb 	bl	8006bcc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8006c36:	2108      	movs	r1, #8
 8006c38:	48d3      	ldr	r0, [pc, #844]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006c3a:	f7ff ffb9 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8006c3e:	2108      	movs	r1, #8
 8006c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c44:	f7ff ffb4 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8006c48:	2110      	movs	r1, #16
 8006c4a:	48cf      	ldr	r0, [pc, #828]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006c4c:	f7ff ffb0 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8006c50:	2120      	movs	r1, #32
 8006c52:	48cd      	ldr	r0, [pc, #820]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006c54:	f7ff ffac 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8006c58:	2101      	movs	r1, #1
 8006c5a:	48cc      	ldr	r0, [pc, #816]	; (8006f8c <MX_GPIO_Init+0x390>)
 8006c5c:	f7ff ffa8 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8006c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c64:	48c8      	ldr	r0, [pc, #800]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006c66:	f7ff ffa3 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8006c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c6e:	48c6      	ldr	r0, [pc, #792]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006c70:	f7ff ff9e 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8006c74:	2140      	movs	r1, #64	; 0x40
 8006c76:	48c5      	ldr	r0, [pc, #788]	; (8006f8c <MX_GPIO_Init+0x390>)
 8006c78:	f7ff ff9a 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8006c7c:	2180      	movs	r1, #128	; 0x80
 8006c7e:	48c3      	ldr	r0, [pc, #780]	; (8006f8c <MX_GPIO_Init+0x390>)
 8006c80:	f7ff ff96 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8006c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c88:	48c0      	ldr	r0, [pc, #768]	; (8006f8c <MX_GPIO_Init+0x390>)
 8006c8a:	f7ff ff91 	bl	8006bb0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8006c8e:	49c0      	ldr	r1, [pc, #768]	; (8006f90 <MX_GPIO_Init+0x394>)
 8006c90:	2002      	movs	r0, #2
 8006c92:	f7ff feff 	bl	8006a94 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8006c96:	49bf      	ldr	r1, [pc, #764]	; (8006f94 <MX_GPIO_Init+0x398>)
 8006c98:	2002      	movs	r0, #2
 8006c9a:	f7ff fefb 	bl	8006a94 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8006c9e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006ca2:	2005      	movs	r0, #5
 8006ca4:	f7ff fef6 	bl	8006a94 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8006ca8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8006cac:	2005      	movs	r0, #5
 8006cae:	f7ff fef1 	bl	8006a94 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8006cb2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8006cb6:	2002      	movs	r0, #2
 8006cb8:	f7ff feec 	bl	8006a94 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8006cbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cc0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006cd4:	f107 031c 	add.w	r3, r7, #28
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f006 fe27 	bl	800d92c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8006cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ce2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006cea:	2300      	movs	r3, #0
 8006cec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006cf6:	f107 031c 	add.w	r3, r7, #28
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f006 fe16 	bl	800d92c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8006d00:	2301      	movs	r3, #1
 8006d02:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006d10:	2302      	movs	r3, #2
 8006d12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006d16:	f107 031c 	add.w	r3, r7, #28
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f006 fe06 	bl	800d92c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8006d20:	2302      	movs	r3, #2
 8006d22:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006d24:	2301      	movs	r3, #1
 8006d26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006d30:	2302      	movs	r3, #2
 8006d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006d36:	f107 031c 	add.w	r3, r7, #28
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f006 fdf6 	bl	800d92c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8006d40:	2304      	movs	r3, #4
 8006d42:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006d50:	2302      	movs	r3, #2
 8006d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006d56:	f107 031c 	add.w	r3, r7, #28
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f006 fde6 	bl	800d92c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8006d60:	2201      	movs	r2, #1
 8006d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d66:	4888      	ldr	r0, [pc, #544]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006d68:	f7ff fef3 	bl	8006b52 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d72:	4885      	ldr	r0, [pc, #532]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006d74:	f7ff feed 	bl	8006b52 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8006d78:	2201      	movs	r2, #1
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	4886      	ldr	r0, [pc, #536]	; (8006f98 <MX_GPIO_Init+0x39c>)
 8006d7e:	f7ff fee8 	bl	8006b52 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8006d82:	2201      	movs	r2, #1
 8006d84:	2102      	movs	r1, #2
 8006d86:	4884      	ldr	r0, [pc, #528]	; (8006f98 <MX_GPIO_Init+0x39c>)
 8006d88:	f7ff fee3 	bl	8006b52 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	2104      	movs	r1, #4
 8006d90:	487d      	ldr	r0, [pc, #500]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006d92:	f7ff fede 	bl	8006b52 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8006d96:	2200      	movs	r2, #0
 8006d98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d9c:	487a      	ldr	r0, [pc, #488]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006d9e:	f7ff fea9 	bl	8006af4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8006da2:	2200      	movs	r2, #0
 8006da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006da8:	4877      	ldr	r0, [pc, #476]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006daa:	f7ff fea3 	bl	8006af4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8006dae:	2200      	movs	r2, #0
 8006db0:	2101      	movs	r1, #1
 8006db2:	4879      	ldr	r0, [pc, #484]	; (8006f98 <MX_GPIO_Init+0x39c>)
 8006db4:	f7ff fe9e 	bl	8006af4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8006db8:	2200      	movs	r2, #0
 8006dba:	2102      	movs	r1, #2
 8006dbc:	4876      	ldr	r0, [pc, #472]	; (8006f98 <MX_GPIO_Init+0x39c>)
 8006dbe:	f7ff fe99 	bl	8006af4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2104      	movs	r1, #4
 8006dc6:	4870      	ldr	r0, [pc, #448]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006dc8:	f7ff fe94 	bl	8006af4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8006dcc:	2308      	movs	r3, #8
 8006dce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8006de0:	1d3b      	adds	r3, r7, #4
 8006de2:	4619      	mov	r1, r3
 8006de4:	4868      	ldr	r0, [pc, #416]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006de6:	f006 ff94 	bl	800dd12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8006dea:	2308      	movs	r3, #8
 8006dec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006dee:	2301      	movs	r3, #1
 8006df0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8006dfe:	1d3b      	adds	r3, r7, #4
 8006e00:	4619      	mov	r1, r3
 8006e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e06:	f006 ff84 	bl	800dd12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8006e0a:	2310      	movs	r3, #16
 8006e0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4859      	ldr	r0, [pc, #356]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006e24:	f006 ff75 	bl	800dd12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8006e28:	2320      	movs	r3, #32
 8006e2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8006e3c:	1d3b      	adds	r3, r7, #4
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4851      	ldr	r0, [pc, #324]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006e42:	f006 ff66 	bl	800dd12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8006e46:	2301      	movs	r3, #1
 8006e48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8006e5a:	1d3b      	adds	r3, r7, #4
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	484b      	ldr	r0, [pc, #300]	; (8006f8c <MX_GPIO_Init+0x390>)
 8006e60:	f006 ff57 	bl	800dd12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8006e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8006e7a:	1d3b      	adds	r3, r7, #4
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4842      	ldr	r0, [pc, #264]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006e80:	f006 ff47 	bl	800dd12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8006e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8006e9a:	1d3b      	adds	r3, r7, #4
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	483a      	ldr	r0, [pc, #232]	; (8006f88 <MX_GPIO_Init+0x38c>)
 8006ea0:	f006 ff37 	bl	800dd12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8006ea4:	2340      	movs	r3, #64	; 0x40
 8006ea6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006eac:	2303      	movs	r3, #3
 8006eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8006eb8:	1d3b      	adds	r3, r7, #4
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4833      	ldr	r0, [pc, #204]	; (8006f8c <MX_GPIO_Init+0x390>)
 8006ebe:	f006 ff28 	bl	800dd12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8006ec2:	2380      	movs	r3, #128	; 0x80
 8006ec4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8006ed6:	1d3b      	adds	r3, r7, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	482c      	ldr	r0, [pc, #176]	; (8006f8c <MX_GPIO_Init+0x390>)
 8006edc:	f006 ff19 	bl	800dd12 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8006ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006eea:	2303      	movs	r3, #3
 8006eec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8006ef6:	1d3b      	adds	r3, r7, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4824      	ldr	r0, [pc, #144]	; (8006f8c <MX_GPIO_Init+0x390>)
 8006efc:	f006 ff09 	bl	800dd12 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006f00:	f7ff fd3e 	bl	8006980 <__NVIC_GetPriorityGrouping>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff fd8e 	bl	8006a2c <NVIC_EncodePriority>
 8006f10:	4603      	mov	r3, r0
 8006f12:	4619      	mov	r1, r3
 8006f14:	2006      	movs	r0, #6
 8006f16:	f7ff fd5f 	bl	80069d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8006f1a:	2006      	movs	r0, #6
 8006f1c:	f7ff fd3e 	bl	800699c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006f20:	f7ff fd2e 	bl	8006980 <__NVIC_GetPriorityGrouping>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2200      	movs	r2, #0
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fd7e 	bl	8006a2c <NVIC_EncodePriority>
 8006f30:	4603      	mov	r3, r0
 8006f32:	4619      	mov	r1, r3
 8006f34:	2007      	movs	r0, #7
 8006f36:	f7ff fd4f 	bl	80069d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8006f3a:	2007      	movs	r0, #7
 8006f3c:	f7ff fd2e 	bl	800699c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006f40:	f7ff fd1e 	bl	8006980 <__NVIC_GetPriorityGrouping>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2200      	movs	r2, #0
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fd6e 	bl	8006a2c <NVIC_EncodePriority>
 8006f50:	4603      	mov	r3, r0
 8006f52:	4619      	mov	r1, r3
 8006f54:	2008      	movs	r0, #8
 8006f56:	f7ff fd3f 	bl	80069d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8006f5a:	2008      	movs	r0, #8
 8006f5c:	f7ff fd1e 	bl	800699c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006f60:	f7ff fd0e 	bl	8006980 <__NVIC_GetPriorityGrouping>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2200      	movs	r2, #0
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff fd5e 	bl	8006a2c <NVIC_EncodePriority>
 8006f70:	4603      	mov	r3, r0
 8006f72:	4619      	mov	r1, r3
 8006f74:	2028      	movs	r0, #40	; 0x28
 8006f76:	f7ff fd2f 	bl	80069d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006f7a:	2028      	movs	r0, #40	; 0x28
 8006f7c:	f7ff fd0e 	bl	800699c <__NVIC_EnableIRQ>

}
 8006f80:	bf00      	nop
 8006f82:	3728      	adds	r7, #40	; 0x28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	e009      	b.n	8006f9c <MX_GPIO_Init+0x3a0>
 8006f88:	48000800 	.word	0x48000800
 8006f8c:	48000400 	.word	0x48000400
 8006f90:	0f000003 	.word	0x0f000003
 8006f94:	f0000003 	.word	0xf0000003
 8006f98:	48001400 	.word	0x48001400
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop

08006fa0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006fa8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006fac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d013      	beq.n	8006fe0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8006fb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006fbc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006fc0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8006fc8:	e000      	b.n	8006fcc <ITM_SendChar+0x2c>
    {
      __NOP();
 8006fca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8006fcc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f9      	beq.n	8006fca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8006fd6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006fe0:	687b      	ldr	r3, [r7, #4]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b086      	sub	sp, #24
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	607a      	str	r2, [r7, #4]
  int i=0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	e009      	b.n	8007018 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	60ba      	str	r2, [r7, #8]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff ffc7 	bl	8006fa0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	3301      	adds	r3, #1
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	dbf1      	blt.n	8007004 <_write+0x16>
  return len;
 8007020:	687b      	ldr	r3, [r7, #4]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007030:	f000 feab 	bl	8007d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007034:	f000 f846 	bl	80070c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007038:	f7ff fde0 	bl	8006bfc <MX_GPIO_Init>
  MX_DMA_Init();
 800703c:	f7ff fc66 	bl	800690c <MX_DMA_Init>
  MX_DAC1_Init();
 8007040:	f7ff fb16 	bl	8006670 <MX_DAC1_Init>
  MX_ADC1_Init();
 8007044:	f7ff f9d6 	bl	80063f4 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007048:	f7ff fab8 	bl	80065bc <MX_COMP1_Init>
  MX_TIM2_Init();
 800704c:	f000 fb86 	bl	800775c <MX_TIM2_Init>
  MX_SPI3_Init();
 8007050:	f000 f8e4 	bl	800721c <MX_SPI3_Init>
  MX_RNG_Init();
 8007054:	f000 f8d4 	bl	8007200 <MX_RNG_Init>
  MX_TIM1_Init();
 8007058:	f000 fb10 	bl	800767c <MX_TIM1_Init>
  MX_TIM8_Init();
 800705c:	f000 fc82 	bl	8007964 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007060:	f000 fd3a 	bl	8007ad8 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007064:	f000 fce6 	bl	8007a34 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007068:	f000 fc2e 	bl	80078c8 <MX_TIM5_Init>
  MX_TIM3_Init();
 800706c:	f000 fbde 	bl	800782c <MX_TIM3_Init>
  MX_DAC2_Init();
 8007070:	f7ff fb48 	bl	8006704 <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8007074:	f7fe fc8a 	bl	800598c <SM_Init>




// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007078:	2200      	movs	r2, #0
 800707a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800707e:	480e      	ldr	r0, [pc, #56]	; (80070b8 <main+0x8c>)
 8007080:	f003 fce4 	bl	800aa4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007084:	2200      	movs	r2, #0
 8007086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800708a:	480b      	ldr	r0, [pc, #44]	; (80070b8 <main+0x8c>)
 800708c:	f003 fcde 	bl	800aa4c <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007090:	480a      	ldr	r0, [pc, #40]	; (80070bc <main+0x90>)
 8007092:	f004 fdd5 	bl	800bc40 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <main+0x94>)
 8007098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800709c:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 800709e:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <main+0x94>)
 80070a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070a4:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80070a6:	f7f9 fe3d 	bl	8000d24 <DM_Init>
  DM_PostInit();
 80070aa:	f7f9 fe49 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 80070ae:	f7fd fd9f 	bl	8004bf0 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80070b2:	f7fc fe23 	bl	8003cfc <EM_ProcessEvent>
 80070b6:	e7fc      	b.n	80070b2 <main+0x86>
 80070b8:	48000800 	.word	0x48000800
 80070bc:	200027f4 	.word	0x200027f4
 80070c0:	40001000 	.word	0x40001000

080070c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b0a8      	sub	sp, #160	; 0xa0
 80070c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80070ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80070ce:	2238      	movs	r2, #56	; 0x38
 80070d0:	2100      	movs	r1, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f007 ff0c 	bl	800eef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80070d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	609a      	str	r2, [r3, #8]
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80070e8:	463b      	mov	r3, r7
 80070ea:	2254      	movs	r2, #84	; 0x54
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f007 fefe 	bl	800eef0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80070f4:	2000      	movs	r0, #0
 80070f6:	f003 fcc1 	bl	800aa7c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80070fa:	2322      	movs	r3, #34	; 0x22
 80070fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80070fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007102:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007104:	2340      	movs	r3, #64	; 0x40
 8007106:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007108:	2301      	movs	r3, #1
 800710a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800710e:	2302      	movs	r3, #2
 8007110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007114:	2302      	movs	r3, #2
 8007116:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800711a:	2302      	movs	r3, #2
 800711c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007120:	232a      	movs	r3, #42	; 0x2a
 8007122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8007126:	231e      	movs	r3, #30
 8007128:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800712c:	2304      	movs	r3, #4
 800712e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007132:	2302      	movs	r3, #2
 8007134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007138:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800713c:	4618      	mov	r0, r3
 800713e:	f003 fd41 	bl	800abc4 <HAL_RCC_OscConfig>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007148:	f000 f82a 	bl	80071a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800714c:	230f      	movs	r3, #15
 800714e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007150:	2303      	movs	r3, #3
 8007152:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007154:	2300      	movs	r3, #0
 8007156:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007158:	2300      	movs	r3, #0
 800715a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800715c:	2300      	movs	r3, #0
 800715e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007160:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007164:	2108      	movs	r1, #8
 8007166:	4618      	mov	r0, r3
 8007168:	f004 f844 	bl	800b1f4 <HAL_RCC_ClockConfig>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007172:	f000 f815 	bl	80071a0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007176:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800717a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800717c:	2300      	movs	r3, #0
 800717e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007180:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007184:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007186:	463b      	mov	r3, r7
 8007188:	4618      	mov	r0, r3
 800718a:	f004 fa23 	bl	800b5d4 <HAL_RCCEx_PeriphCLKConfig>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007194:	f000 f804 	bl	80071a0 <Error_Handler>
  }
}
 8007198:	bf00      	nop
 800719a:	37a0      	adds	r7, #160	; 0xa0
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80071a4:	bf00      	nop
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f043 0204 	orr.w	r2, r3, #4
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	601a      	str	r2, [r3, #0]
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <LL_AHB2_GRP1_EnableClock>:
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80071d8:	4b08      	ldr	r3, [pc, #32]	; (80071fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80071da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071dc:	4907      	ldr	r1, [pc, #28]	; (80071fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80071e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4013      	ands	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80071ee:	68fb      	ldr	r3, [r7, #12]
}
 80071f0:	bf00      	nop
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	40021000 	.word	0x40021000

08007200 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007204:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007208:	f7ff ffe2 	bl	80071d0 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 800720c:	4802      	ldr	r0, [pc, #8]	; (8007218 <MX_RNG_Init+0x18>)
 800720e:	f7ff ffce 	bl	80071ae <LL_RNG_Enable>

}
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	50060800 	.word	0x50060800

0800721c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007220:	4b1b      	ldr	r3, [pc, #108]	; (8007290 <MX_SPI3_Init+0x74>)
 8007222:	4a1c      	ldr	r2, [pc, #112]	; (8007294 <MX_SPI3_Init+0x78>)
 8007224:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007226:	4b1a      	ldr	r3, [pc, #104]	; (8007290 <MX_SPI3_Init+0x74>)
 8007228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800722c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800722e:	4b18      	ldr	r3, [pc, #96]	; (8007290 <MX_SPI3_Init+0x74>)
 8007230:	2200      	movs	r2, #0
 8007232:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007234:	4b16      	ldr	r3, [pc, #88]	; (8007290 <MX_SPI3_Init+0x74>)
 8007236:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800723a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800723c:	4b14      	ldr	r3, [pc, #80]	; (8007290 <MX_SPI3_Init+0x74>)
 800723e:	2200      	movs	r2, #0
 8007240:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007242:	4b13      	ldr	r3, [pc, #76]	; (8007290 <MX_SPI3_Init+0x74>)
 8007244:	2200      	movs	r2, #0
 8007246:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007248:	4b11      	ldr	r3, [pc, #68]	; (8007290 <MX_SPI3_Init+0x74>)
 800724a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800724e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007250:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <MX_SPI3_Init+0x74>)
 8007252:	2210      	movs	r2, #16
 8007254:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007256:	4b0e      	ldr	r3, [pc, #56]	; (8007290 <MX_SPI3_Init+0x74>)
 8007258:	2200      	movs	r2, #0
 800725a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800725c:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <MX_SPI3_Init+0x74>)
 800725e:	2200      	movs	r2, #0
 8007260:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007262:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <MX_SPI3_Init+0x74>)
 8007264:	2200      	movs	r2, #0
 8007266:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007268:	4b09      	ldr	r3, [pc, #36]	; (8007290 <MX_SPI3_Init+0x74>)
 800726a:	2207      	movs	r2, #7
 800726c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800726e:	4b08      	ldr	r3, [pc, #32]	; (8007290 <MX_SPI3_Init+0x74>)
 8007270:	2200      	movs	r2, #0
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <MX_SPI3_Init+0x74>)
 8007276:	2208      	movs	r2, #8
 8007278:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800727a:	4805      	ldr	r0, [pc, #20]	; (8007290 <MX_SPI3_Init+0x74>)
 800727c:	f004 fbf6 	bl	800ba6c <HAL_SPI_Init>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007286:	f7ff ff8b 	bl	80071a0 <Error_Handler>
  }

}
 800728a:	bf00      	nop
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	200026ac 	.word	0x200026ac
 8007294:	40003c00 	.word	0x40003c00

08007298 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	; 0x28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072a0:	f107 0314 	add.w	r3, r7, #20
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	605a      	str	r2, [r3, #4]
 80072aa:	609a      	str	r2, [r3, #8]
 80072ac:	60da      	str	r2, [r3, #12]
 80072ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a17      	ldr	r2, [pc, #92]	; (8007314 <HAL_SPI_MspInit+0x7c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d128      	bne.n	800730c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80072ba:	4b17      	ldr	r3, [pc, #92]	; (8007318 <HAL_SPI_MspInit+0x80>)
 80072bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072be:	4a16      	ldr	r2, [pc, #88]	; (8007318 <HAL_SPI_MspInit+0x80>)
 80072c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c4:	6593      	str	r3, [r2, #88]	; 0x58
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <HAL_SPI_MspInit+0x80>)
 80072c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072d2:	4b11      	ldr	r3, [pc, #68]	; (8007318 <HAL_SPI_MspInit+0x80>)
 80072d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d6:	4a10      	ldr	r2, [pc, #64]	; (8007318 <HAL_SPI_MspInit+0x80>)
 80072d8:	f043 0304 	orr.w	r3, r3, #4
 80072dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072de:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <HAL_SPI_MspInit+0x80>)
 80072e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e2:	f003 0304 	and.w	r3, r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80072ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80072ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f0:	2302      	movs	r3, #2
 80072f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072f8:	2300      	movs	r3, #0
 80072fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80072fc:	2306      	movs	r3, #6
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007300:	f107 0314 	add.w	r3, r7, #20
 8007304:	4619      	mov	r1, r3
 8007306:	4805      	ldr	r0, [pc, #20]	; (800731c <HAL_SPI_MspInit+0x84>)
 8007308:	f003 f93c 	bl	800a584 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800730c:	bf00      	nop
 800730e:	3728      	adds	r7, #40	; 0x28
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	40003c00 	.word	0x40003c00
 8007318:	40021000 	.word	0x40021000
 800731c:	48000800 	.word	0x48000800

08007320 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007324:	4b05      	ldr	r3, [pc, #20]	; (800733c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	4a04      	ldr	r2, [pc, #16]	; (800733c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800732a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800732e:	6093      	str	r3, [r2, #8]
}
 8007330:	bf00      	nop
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40007000 	.word	0x40007000

08007340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007346:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <HAL_MspInit+0x44>)
 8007348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734a:	4a0e      	ldr	r2, [pc, #56]	; (8007384 <HAL_MspInit+0x44>)
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	6613      	str	r3, [r2, #96]	; 0x60
 8007352:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <HAL_MspInit+0x44>)
 8007354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	607b      	str	r3, [r7, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <HAL_MspInit+0x44>)
 8007360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007362:	4a08      	ldr	r2, [pc, #32]	; (8007384 <HAL_MspInit+0x44>)
 8007364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007368:	6593      	str	r3, [r2, #88]	; 0x58
 800736a:	4b06      	ldr	r3, [pc, #24]	; (8007384 <HAL_MspInit+0x44>)
 800736c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007376:	f7ff ffd3 	bl	8007320 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	40021000 	.word	0x40021000

08007388 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007390:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007392:	695a      	ldr	r2, [r3, #20]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4013      	ands	r3, r2
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d101      	bne.n	80073a2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	40010400 	.word	0x40010400

080073b4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80073bc:	4a04      	ldr	r2, [pc, #16]	; (80073d0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6153      	str	r3, [r2, #20]
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	40010400 	.word	0x40010400

080073d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80073d8:	bf00      	nop
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073e2:	b480      	push	{r7}
 80073e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073e6:	e7fe      	b.n	80073e6 <HardFault_Handler+0x4>

080073e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073ec:	e7fe      	b.n	80073ec <MemManage_Handler+0x4>

080073ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073ee:	b480      	push	{r7}
 80073f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073f2:	e7fe      	b.n	80073f2 <BusFault_Handler+0x4>

080073f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073f8:	e7fe      	b.n	80073f8 <UsageFault_Handler+0x4>

080073fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073fa:	b480      	push	{r7}
 80073fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073fe:	bf00      	nop
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800740c:	bf00      	nop
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007416:	b480      	push	{r7}
 8007418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800741a:	bf00      	nop
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007428:	f000 fd02 	bl	8007e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800742c:	bf00      	nop
 800742e:	bd80      	pop	{r7, pc}

08007430 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007434:	f7fd fc94 	bl	8004d60 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007438:	2001      	movs	r0, #1
 800743a:	f7ff ffa5 	bl	8007388 <LL_EXTI_IsActiveFlag_0_31>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007444:	2001      	movs	r0, #1
 8007446:	f7ff ffb5 	bl	80073b4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800744a:	bf00      	nop
 800744c:	bd80      	pop	{r7, pc}

0800744e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007452:	f7fd fcab 	bl	8004dac <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007456:	2002      	movs	r0, #2
 8007458:	f7ff ff96 	bl	8007388 <LL_EXTI_IsActiveFlag_0_31>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007462:	2002      	movs	r0, #2
 8007464:	f7ff ffa6 	bl	80073b4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007468:	bf00      	nop
 800746a:	bd80      	pop	{r7, pc}

0800746c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007470:	f7fd fcc2 	bl	8004df8 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007474:	2004      	movs	r0, #4
 8007476:	f7ff ff87 	bl	8007388 <LL_EXTI_IsActiveFlag_0_31>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007480:	2004      	movs	r0, #4
 8007482:	f7ff ff97 	bl	80073b4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007490:	4802      	ldr	r0, [pc, #8]	; (800749c <DMA1_Channel1_IRQHandler+0x10>)
 8007492:	f002 ff27 	bl	800a2e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007496:	bf00      	nop
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	200025a0 	.word	0x200025a0

080074a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80074a4:	4802      	ldr	r0, [pc, #8]	; (80074b0 <DMA1_Channel2_IRQHandler+0x10>)
 80074a6:	f002 ff1d 	bl	800a2e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80074aa:	bf00      	nop
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20001eac 	.word	0x20001eac

080074b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80074b8:	4802      	ldr	r0, [pc, #8]	; (80074c4 <DMA1_Channel3_IRQHandler+0x10>)
 80074ba:	f002 ff13 	bl	800a2e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80074be:	bf00      	nop
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	2000264c 	.word	0x2000264c

080074c8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 80074cc:	f7f9 fc56 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 80074d0:	f7fd fcb8 	bl	8004e44 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80074d4:	4803      	ldr	r0, [pc, #12]	; (80074e4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80074d6:	f004 fe27 	bl	800c128 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80074da:	4803      	ldr	r0, [pc, #12]	; (80074e8 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80074dc:	f004 fe24 	bl	800c128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80074e0:	bf00      	nop
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	200027f4 	.word	0x200027f4
 80074e8:	2000275c 	.word	0x2000275c

080074ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80074f0:	4802      	ldr	r0, [pc, #8]	; (80074fc <TIM3_IRQHandler+0x10>)
 80074f2:	f004 fe19 	bl	800c128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20001f18 	.word	0x20001f18

08007500 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007504:	f7fd fbdc 	bl	8004cc0 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007508:	f7fd fc02 	bl	8004d10 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800750c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007510:	f7ff ff3a 	bl	8007388 <LL_EXTI_IsActiveFlag_0_31>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800751a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800751e:	f7ff ff49 	bl	80073b4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007522:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007526:	f7ff ff2f 	bl	8007388 <LL_EXTI_IsActiveFlag_0_31>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007534:	f7ff ff3e 	bl	80073b4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007538:	bf00      	nop
 800753a:	bd80      	pop	{r7, pc}

0800753c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007540:	f7fd fb66 	bl	8004c10 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007544:	4802      	ldr	r0, [pc, #8]	; (8007550 <TIM5_IRQHandler+0x14>)
 8007546:	f004 fdef 	bl	800c128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800754a:	bf00      	nop
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	200027a8 	.word	0x200027a8

08007554 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e00a      	b.n	800757c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007566:	f3af 8000 	nop.w
 800756a:	4601      	mov	r1, r0
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	60ba      	str	r2, [r7, #8]
 8007572:	b2ca      	uxtb	r2, r1
 8007574:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	3301      	adds	r3, #1
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	dbf0      	blt.n	8007566 <_read+0x12>
	}

return len;
 8007584:	687b      	ldr	r3, [r7, #4]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <_close>:
	}
	return len;
}

int _close(int file)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
	return -1;
 8007596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075b6:	605a      	str	r2, [r3, #4]
	return 0;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <_isatty>:

int _isatty(int file)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
	return 1;
 80075ce:	2301      	movs	r3, #1
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
	return 0;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007600:	4b11      	ldr	r3, [pc, #68]	; (8007648 <_sbrk+0x50>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <_sbrk+0x16>
		heap_end = &end;
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <_sbrk+0x50>)
 800760a:	4a10      	ldr	r2, [pc, #64]	; (800764c <_sbrk+0x54>)
 800760c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800760e:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <_sbrk+0x50>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <_sbrk+0x50>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4413      	add	r3, r2
 800761c:	466a      	mov	r2, sp
 800761e:	4293      	cmp	r3, r2
 8007620:	d907      	bls.n	8007632 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007622:	f007 fc3b 	bl	800ee9c <__errno>
 8007626:	4602      	mov	r2, r0
 8007628:	230c      	movs	r3, #12
 800762a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800762c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007630:	e006      	b.n	8007640 <_sbrk+0x48>
	}

	heap_end += incr;
 8007632:	4b05      	ldr	r3, [pc, #20]	; (8007648 <_sbrk+0x50>)
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4413      	add	r3, r2
 800763a:	4a03      	ldr	r2, [pc, #12]	; (8007648 <_sbrk+0x50>)
 800763c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800763e:	68fb      	ldr	r3, [r7, #12]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20001e9c 	.word	0x20001e9c
 800764c:	200028e0 	.word	0x200028e0

08007650 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007654:	4b08      	ldr	r3, [pc, #32]	; (8007678 <SystemInit+0x28>)
 8007656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765a:	4a07      	ldr	r2, [pc, #28]	; (8007678 <SystemInit+0x28>)
 800765c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007664:	4b04      	ldr	r3, [pc, #16]	; (8007678 <SystemInit+0x28>)
 8007666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800766a:	609a      	str	r2, [r3, #8]
#endif
}
 800766c:	bf00      	nop
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	e000ed00 	.word	0xe000ed00

0800767c <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b09a      	sub	sp, #104	; 0x68
 8007680:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007682:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007686:	2224      	movs	r2, #36	; 0x24
 8007688:	2100      	movs	r1, #0
 800768a:	4618      	mov	r0, r3
 800768c:	f007 fc30 	bl	800eef0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800769c:	1d3b      	adds	r3, r7, #4
 800769e:	2234      	movs	r2, #52	; 0x34
 80076a0:	2100      	movs	r1, #0
 80076a2:	4618      	mov	r0, r3
 80076a4:	f007 fc24 	bl	800eef0 <memset>

  htim1.Instance = TIM1;
 80076a8:	4b2a      	ldr	r3, [pc, #168]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076aa:	4a2b      	ldr	r2, [pc, #172]	; (8007758 <MX_TIM1_Init+0xdc>)
 80076ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80076ae:	4b29      	ldr	r3, [pc, #164]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80076b4:	4b27      	ldr	r3, [pc, #156]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076b6:	2260      	movs	r2, #96	; 0x60
 80076b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80076ba:	4b26      	ldr	r3, [pc, #152]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076c2:	4b24      	ldr	r3, [pc, #144]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80076c8:	4b22      	ldr	r3, [pc, #136]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80076ce:	4b21      	ldr	r3, [pc, #132]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076d0:	2280      	movs	r2, #128	; 0x80
 80076d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80076d4:	2302      	movs	r3, #2
 80076d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80076d8:	2300      	movs	r3, #0
 80076da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80076dc:	2301      	movs	r3, #1
 80076de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80076e0:	2300      	movs	r3, #0
 80076e2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80076e8:	2300      	movs	r3, #0
 80076ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80076ec:	2301      	movs	r3, #1
 80076ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80076f0:	2300      	movs	r3, #0
 80076f2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80076f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80076fc:	4619      	mov	r1, r3
 80076fe:	4815      	ldr	r0, [pc, #84]	; (8007754 <MX_TIM1_Init+0xd8>)
 8007700:	f004 fc6c 	bl	800bfdc <HAL_TIM_Encoder_Init>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800770a:	f7ff fd49 	bl	80071a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800770e:	2320      	movs	r3, #32
 8007710:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007712:	2300      	movs	r3, #0
 8007714:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007716:	2300      	movs	r3, #0
 8007718:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800771a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800771e:	4619      	mov	r1, r3
 8007720:	480c      	ldr	r0, [pc, #48]	; (8007754 <MX_TIM1_Init+0xd8>)
 8007722:	f005 fe45 	bl	800d3b0 <HAL_TIMEx_MasterConfigSynchronization>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800772c:	f7ff fd38 	bl	80071a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007730:	2300      	movs	r3, #0
 8007732:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007734:	2300      	movs	r3, #0
 8007736:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007738:	1d3b      	adds	r3, r7, #4
 800773a:	4619      	mov	r1, r3
 800773c:	4805      	ldr	r0, [pc, #20]	; (8007754 <MX_TIM1_Init+0xd8>)
 800773e:	f005 fecd 	bl	800d4dc <HAL_TIMEx_ConfigBreakDeadTime>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007748:	f7ff fd2a 	bl	80071a0 <Error_Handler>
  }

}
 800774c:	bf00      	nop
 800774e:	3768      	adds	r7, #104	; 0x68
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	200027f4 	.word	0x200027f4
 8007758:	40012c00 	.word	0x40012c00

0800775c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08c      	sub	sp, #48	; 0x30
 8007760:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007762:	f107 0320 	add.w	r3, r7, #32
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	605a      	str	r2, [r3, #4]
 800776c:	609a      	str	r2, [r3, #8]
 800776e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	605a      	str	r2, [r3, #4]
 800777a:	609a      	str	r2, [r3, #8]
 800777c:	60da      	str	r2, [r3, #12]
 800777e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007780:	463b      	mov	r3, r7
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	605a      	str	r2, [r3, #4]
 8007788:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800778a:	4b27      	ldr	r3, [pc, #156]	; (8007828 <MX_TIM2_Init+0xcc>)
 800778c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007790:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007792:	4b25      	ldr	r3, [pc, #148]	; (8007828 <MX_TIM2_Init+0xcc>)
 8007794:	2200      	movs	r2, #0
 8007796:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007798:	4b23      	ldr	r3, [pc, #140]	; (8007828 <MX_TIM2_Init+0xcc>)
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800779e:	4b22      	ldr	r3, [pc, #136]	; (8007828 <MX_TIM2_Init+0xcc>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077a4:	4b20      	ldr	r3, [pc, #128]	; (8007828 <MX_TIM2_Init+0xcc>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80077aa:	4b1f      	ldr	r3, [pc, #124]	; (8007828 <MX_TIM2_Init+0xcc>)
 80077ac:	2280      	movs	r2, #128	; 0x80
 80077ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80077b0:	481d      	ldr	r0, [pc, #116]	; (8007828 <MX_TIM2_Init+0xcc>)
 80077b2:	f004 f9ed 	bl	800bb90 <HAL_TIM_Base_Init>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80077bc:	f7ff fcf0 	bl	80071a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80077c6:	f107 0320 	add.w	r3, r7, #32
 80077ca:	4619      	mov	r1, r3
 80077cc:	4816      	ldr	r0, [pc, #88]	; (8007828 <MX_TIM2_Init+0xcc>)
 80077ce:	f004 ff3b 	bl	800c648 <HAL_TIM_ConfigClockSource>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80077d8:	f7ff fce2 	bl	80071a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80077dc:	2305      	movs	r3, #5
 80077de:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80077e0:	2350      	movs	r3, #80	; 0x50
 80077e2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80077ec:	f107 030c 	add.w	r3, r7, #12
 80077f0:	4619      	mov	r1, r3
 80077f2:	480d      	ldr	r0, [pc, #52]	; (8007828 <MX_TIM2_Init+0xcc>)
 80077f4:	f005 f818 	bl	800c828 <HAL_TIM_SlaveConfigSynchro>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 80077fe:	f7ff fccf 	bl	80071a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007802:	2320      	movs	r3, #32
 8007804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007806:	2300      	movs	r3, #0
 8007808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800780a:	463b      	mov	r3, r7
 800780c:	4619      	mov	r1, r3
 800780e:	4806      	ldr	r0, [pc, #24]	; (8007828 <MX_TIM2_Init+0xcc>)
 8007810:	f005 fdce 	bl	800d3b0 <HAL_TIMEx_MasterConfigSynchronization>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800781a:	f7ff fcc1 	bl	80071a0 <Error_Handler>
  }

}
 800781e:	bf00      	nop
 8007820:	3730      	adds	r7, #48	; 0x30
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20002840 	.word	0x20002840

0800782c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	605a      	str	r2, [r3, #4]
 800783c:	609a      	str	r2, [r3, #8]
 800783e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007840:	1d3b      	adds	r3, r7, #4
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	605a      	str	r2, [r3, #4]
 8007848:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800784a:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <MX_TIM3_Init+0x94>)
 800784c:	4a1d      	ldr	r2, [pc, #116]	; (80078c4 <MX_TIM3_Init+0x98>)
 800784e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007850:	4b1b      	ldr	r3, [pc, #108]	; (80078c0 <MX_TIM3_Init+0x94>)
 8007852:	2200      	movs	r2, #0
 8007854:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <MX_TIM3_Init+0x94>)
 8007858:	2210      	movs	r2, #16
 800785a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 800785c:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <MX_TIM3_Init+0x94>)
 800785e:	2201      	movs	r2, #1
 8007860:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007862:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <MX_TIM3_Init+0x94>)
 8007864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007868:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800786a:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <MX_TIM3_Init+0x94>)
 800786c:	2280      	movs	r2, #128	; 0x80
 800786e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007870:	4813      	ldr	r0, [pc, #76]	; (80078c0 <MX_TIM3_Init+0x94>)
 8007872:	f004 f98d 	bl	800bb90 <HAL_TIM_Base_Init>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800787c:	f7ff fc90 	bl	80071a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007886:	f107 0310 	add.w	r3, r7, #16
 800788a:	4619      	mov	r1, r3
 800788c:	480c      	ldr	r0, [pc, #48]	; (80078c0 <MX_TIM3_Init+0x94>)
 800788e:	f004 fedb 	bl	800c648 <HAL_TIM_ConfigClockSource>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007898:	f7ff fc82 	bl	80071a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800789c:	2320      	movs	r3, #32
 800789e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80078a4:	1d3b      	adds	r3, r7, #4
 80078a6:	4619      	mov	r1, r3
 80078a8:	4805      	ldr	r0, [pc, #20]	; (80078c0 <MX_TIM3_Init+0x94>)
 80078aa:	f005 fd81 	bl	800d3b0 <HAL_TIMEx_MasterConfigSynchronization>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80078b4:	f7ff fc74 	bl	80071a0 <Error_Handler>
  }

}
 80078b8:	bf00      	nop
 80078ba:	3720      	adds	r7, #32
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20001f18 	.word	0x20001f18
 80078c4:	40000400 	.word	0x40000400

080078c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078ce:	f107 0310 	add.w	r3, r7, #16
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	605a      	str	r2, [r3, #4]
 80078d8:	609a      	str	r2, [r3, #8]
 80078da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078dc:	1d3b      	adds	r3, r7, #4
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	605a      	str	r2, [r3, #4]
 80078e4:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80078e6:	4b1d      	ldr	r3, [pc, #116]	; (800795c <MX_TIM5_Init+0x94>)
 80078e8:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <MX_TIM5_Init+0x98>)
 80078ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80078ec:	4b1b      	ldr	r3, [pc, #108]	; (800795c <MX_TIM5_Init+0x94>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078f2:	4b1a      	ldr	r3, [pc, #104]	; (800795c <MX_TIM5_Init+0x94>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80078f8:	4b18      	ldr	r3, [pc, #96]	; (800795c <MX_TIM5_Init+0x94>)
 80078fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007900:	4b16      	ldr	r3, [pc, #88]	; (800795c <MX_TIM5_Init+0x94>)
 8007902:	2200      	movs	r2, #0
 8007904:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007906:	4b15      	ldr	r3, [pc, #84]	; (800795c <MX_TIM5_Init+0x94>)
 8007908:	2280      	movs	r2, #128	; 0x80
 800790a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800790c:	4813      	ldr	r0, [pc, #76]	; (800795c <MX_TIM5_Init+0x94>)
 800790e:	f004 f93f 	bl	800bb90 <HAL_TIM_Base_Init>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007918:	f7ff fc42 	bl	80071a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800791c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007920:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007922:	f107 0310 	add.w	r3, r7, #16
 8007926:	4619      	mov	r1, r3
 8007928:	480c      	ldr	r0, [pc, #48]	; (800795c <MX_TIM5_Init+0x94>)
 800792a:	f004 fe8d 	bl	800c648 <HAL_TIM_ConfigClockSource>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007934:	f7ff fc34 	bl	80071a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007938:	2300      	movs	r3, #0
 800793a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007940:	1d3b      	adds	r3, r7, #4
 8007942:	4619      	mov	r1, r3
 8007944:	4805      	ldr	r0, [pc, #20]	; (800795c <MX_TIM5_Init+0x94>)
 8007946:	f005 fd33 	bl	800d3b0 <HAL_TIMEx_MasterConfigSynchronization>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007950:	f7ff fc26 	bl	80071a0 <Error_Handler>
  }

}
 8007954:	bf00      	nop
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	200027a8 	.word	0x200027a8
 8007960:	40000c00 	.word	0x40000c00

08007964 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b094      	sub	sp, #80	; 0x50
 8007968:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800796a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	605a      	str	r2, [r3, #4]
 8007974:	609a      	str	r2, [r3, #8]
 8007976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007978:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007984:	463b      	mov	r3, r7
 8007986:	2234      	movs	r2, #52	; 0x34
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f007 fab0 	bl	800eef0 <memset>

  htim8.Instance = TIM8;
 8007990:	4b26      	ldr	r3, [pc, #152]	; (8007a2c <MX_TIM8_Init+0xc8>)
 8007992:	4a27      	ldr	r2, [pc, #156]	; (8007a30 <MX_TIM8_Init+0xcc>)
 8007994:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007996:	4b25      	ldr	r3, [pc, #148]	; (8007a2c <MX_TIM8_Init+0xc8>)
 8007998:	2200      	movs	r2, #0
 800799a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800799c:	4b23      	ldr	r3, [pc, #140]	; (8007a2c <MX_TIM8_Init+0xc8>)
 800799e:	2200      	movs	r2, #0
 80079a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80079a2:	4b22      	ldr	r3, [pc, #136]	; (8007a2c <MX_TIM8_Init+0xc8>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079a8:	4b20      	ldr	r3, [pc, #128]	; (8007a2c <MX_TIM8_Init+0xc8>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80079ae:	4b1f      	ldr	r3, [pc, #124]	; (8007a2c <MX_TIM8_Init+0xc8>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80079b4:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <MX_TIM8_Init+0xc8>)
 80079b6:	2280      	movs	r2, #128	; 0x80
 80079b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80079ba:	481c      	ldr	r0, [pc, #112]	; (8007a2c <MX_TIM8_Init+0xc8>)
 80079bc:	f004 f8e8 	bl	800bb90 <HAL_TIM_Base_Init>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80079c6:	f7ff fbeb 	bl	80071a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079ce:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80079d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079d4:	4619      	mov	r1, r3
 80079d6:	4815      	ldr	r0, [pc, #84]	; (8007a2c <MX_TIM8_Init+0xc8>)
 80079d8:	f004 fe36 	bl	800c648 <HAL_TIM_ConfigClockSource>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80079e2:	f7ff fbdd 	bl	80071a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80079e6:	2320      	movs	r3, #32
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80079ea:	2300      	movs	r3, #0
 80079ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80079f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80079f6:	4619      	mov	r1, r3
 80079f8:	480c      	ldr	r0, [pc, #48]	; (8007a2c <MX_TIM8_Init+0xc8>)
 80079fa:	f005 fcd9 	bl	800d3b0 <HAL_TIMEx_MasterConfigSynchronization>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007a04:	f7ff fbcc 	bl	80071a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007a10:	463b      	mov	r3, r7
 8007a12:	4619      	mov	r1, r3
 8007a14:	4805      	ldr	r0, [pc, #20]	; (8007a2c <MX_TIM8_Init+0xc8>)
 8007a16:	f005 fd61 	bl	800d4dc <HAL_TIMEx_ConfigBreakDeadTime>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8007a20:	f7ff fbbe 	bl	80071a0 <Error_Handler>
  }

}
 8007a24:	bf00      	nop
 8007a26:	3750      	adds	r7, #80	; 0x50
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20002710 	.word	0x20002710
 8007a30:	40013400 	.word	0x40013400

08007a34 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a3a:	f107 0310 	add.w	r3, r7, #16
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	605a      	str	r2, [r3, #4]
 8007a44:	609a      	str	r2, [r3, #8]
 8007a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a48:	1d3b      	adds	r3, r7, #4
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	605a      	str	r2, [r3, #4]
 8007a50:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007a52:	4b1f      	ldr	r3, [pc, #124]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007a54:	4a1f      	ldr	r2, [pc, #124]	; (8007ad4 <MX_TIM15_Init+0xa0>)
 8007a56:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8007a58:	4b1d      	ldr	r3, [pc, #116]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a5e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a60:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007a66:	4b1a      	ldr	r3, [pc, #104]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a6c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a6e:	4b18      	ldr	r3, [pc, #96]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007a74:	4b16      	ldr	r3, [pc, #88]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a7a:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007a80:	4813      	ldr	r0, [pc, #76]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007a82:	f004 f885 	bl	800bb90 <HAL_TIM_Base_Init>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8007a8c:	f7ff fb88 	bl	80071a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007a96:	f107 0310 	add.w	r3, r7, #16
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	480c      	ldr	r0, [pc, #48]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007a9e:	f004 fdd3 	bl	800c648 <HAL_TIM_ConfigClockSource>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8007aa8:	f7ff fb7a 	bl	80071a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007aac:	2300      	movs	r3, #0
 8007aae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007ab4:	1d3b      	adds	r3, r7, #4
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4805      	ldr	r0, [pc, #20]	; (8007ad0 <MX_TIM15_Init+0x9c>)
 8007aba:	f005 fc79 	bl	800d3b0 <HAL_TIMEx_MasterConfigSynchronization>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8007ac4:	f7ff fb6c 	bl	80071a0 <Error_Handler>
  }

}
 8007ac8:	bf00      	nop
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	2000275c 	.word	0x2000275c
 8007ad4:	40014000 	.word	0x40014000

08007ad8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8007adc:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <MX_TIM16_Init+0x48>)
 8007ade:	4a11      	ldr	r2, [pc, #68]	; (8007b24 <MX_TIM16_Init+0x4c>)
 8007ae0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8007ae2:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <MX_TIM16_Init+0x48>)
 8007ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ae8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007aea:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <MX_TIM16_Init+0x48>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007af0:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <MX_TIM16_Init+0x48>)
 8007af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007af6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007af8:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <MX_TIM16_Init+0x48>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007afe:	4b08      	ldr	r3, [pc, #32]	; (8007b20 <MX_TIM16_Init+0x48>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b04:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <MX_TIM16_Init+0x48>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007b0a:	4805      	ldr	r0, [pc, #20]	; (8007b20 <MX_TIM16_Init+0x48>)
 8007b0c:	f004 f840 	bl	800bb90 <HAL_TIM_Base_Init>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007b16:	f7ff fb43 	bl	80071a0 <Error_Handler>
  }

}
 8007b1a:	bf00      	nop
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	2000288c 	.word	0x2000288c
 8007b24:	40014400 	.word	0x40014400

08007b28 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	605a      	str	r2, [r3, #4]
 8007b3a:	609a      	str	r2, [r3, #8]
 8007b3c:	60da      	str	r2, [r3, #12]
 8007b3e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a1b      	ldr	r2, [pc, #108]	; (8007bb4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d12f      	bne.n	8007baa <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b4a:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b4e:	4a1a      	ldr	r2, [pc, #104]	; (8007bb8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b54:	6613      	str	r3, [r2, #96]	; 0x60
 8007b56:	4b18      	ldr	r3, [pc, #96]	; (8007bb8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b5e:	613b      	str	r3, [r7, #16]
 8007b60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b66:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b68:	f043 0304 	orr.w	r3, r3, #4
 8007b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b7e:	2302      	movs	r3, #2
 8007b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b86:	2300      	movs	r3, #0
 8007b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b8e:	f107 0314 	add.w	r3, r7, #20
 8007b92:	4619      	mov	r1, r3
 8007b94:	4809      	ldr	r0, [pc, #36]	; (8007bbc <HAL_TIM_Encoder_MspInit+0x94>)
 8007b96:	f002 fcf5 	bl	800a584 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	2018      	movs	r0, #24
 8007ba0:	f001 fdc3 	bl	800972a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007ba4:	2018      	movs	r0, #24
 8007ba6:	f001 fdda 	bl	800975e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007baa:	bf00      	nop
 8007bac:	3728      	adds	r7, #40	; 0x28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	40021000 	.word	0x40021000
 8007bbc:	48000800 	.word	0x48000800

08007bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08e      	sub	sp, #56	; 0x38
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	605a      	str	r2, [r3, #4]
 8007bd2:	609a      	str	r2, [r3, #8]
 8007bd4:	60da      	str	r2, [r3, #12]
 8007bd6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be0:	d129      	bne.n	8007c36 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007be2:	4b4f      	ldr	r3, [pc, #316]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be6:	4a4e      	ldr	r2, [pc, #312]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	6593      	str	r3, [r2, #88]	; 0x58
 8007bee:	4b4c      	ldr	r3, [pc, #304]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	623b      	str	r3, [r7, #32]
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bfa:	4b49      	ldr	r3, [pc, #292]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bfe:	4a48      	ldr	r2, [pc, #288]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007c00:	f043 0301 	orr.w	r3, r3, #1
 8007c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c06:	4b46      	ldr	r3, [pc, #280]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	61fb      	str	r3, [r7, #28]
 8007c10:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007c12:	2301      	movs	r3, #1
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c16:	2302      	movs	r3, #2
 8007c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c22:	2301      	movs	r3, #1
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c30:	f002 fca8 	bl	800a584 <HAL_GPIO_Init>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007c34:	e070      	b.n	8007d18 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a3a      	ldr	r2, [pc, #232]	; (8007d24 <HAL_TIM_Base_MspInit+0x164>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d114      	bne.n	8007c6a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007c40:	4b37      	ldr	r3, [pc, #220]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c44:	4a36      	ldr	r2, [pc, #216]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007c46:	f043 0302 	orr.w	r3, r3, #2
 8007c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8007c4c:	4b34      	ldr	r3, [pc, #208]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	61bb      	str	r3, [r7, #24]
 8007c56:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	201d      	movs	r0, #29
 8007c5e:	f001 fd64 	bl	800972a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007c62:	201d      	movs	r0, #29
 8007c64:	f001 fd7b 	bl	800975e <HAL_NVIC_EnableIRQ>
}
 8007c68:	e056      	b.n	8007d18 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a2e      	ldr	r2, [pc, #184]	; (8007d28 <HAL_TIM_Base_MspInit+0x168>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d114      	bne.n	8007c9e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007c74:	4b2a      	ldr	r3, [pc, #168]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c78:	4a29      	ldr	r2, [pc, #164]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007c7a:	f043 0308 	orr.w	r3, r3, #8
 8007c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c80:	4b27      	ldr	r3, [pc, #156]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2102      	movs	r1, #2
 8007c90:	2032      	movs	r0, #50	; 0x32
 8007c92:	f001 fd4a 	bl	800972a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007c96:	2032      	movs	r0, #50	; 0x32
 8007c98:	f001 fd61 	bl	800975e <HAL_NVIC_EnableIRQ>
}
 8007c9c:	e03c      	b.n	8007d18 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a22      	ldr	r2, [pc, #136]	; (8007d2c <HAL_TIM_Base_MspInit+0x16c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d10c      	bne.n	8007cc2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cac:	4a1c      	ldr	r2, [pc, #112]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007cae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cb2:	6613      	str	r3, [r2, #96]	; 0x60
 8007cb4:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	693b      	ldr	r3, [r7, #16]
}
 8007cc0:	e02a      	b.n	8007d18 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1a      	ldr	r2, [pc, #104]	; (8007d30 <HAL_TIM_Base_MspInit+0x170>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d114      	bne.n	8007cf6 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007ccc:	4b14      	ldr	r3, [pc, #80]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd0:	4a13      	ldr	r2, [pc, #76]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd6:	6613      	str	r3, [r2, #96]	; 0x60
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	2018      	movs	r0, #24
 8007cea:	f001 fd1e 	bl	800972a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007cee:	2018      	movs	r0, #24
 8007cf0:	f001 fd35 	bl	800975e <HAL_NVIC_EnableIRQ>
}
 8007cf4:	e010      	b.n	8007d18 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a0e      	ldr	r2, [pc, #56]	; (8007d34 <HAL_TIM_Base_MspInit+0x174>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10b      	bne.n	8007d18 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007d00:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d04:	4a06      	ldr	r2, [pc, #24]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d0a:	6613      	str	r3, [r2, #96]	; 0x60
 8007d0c:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <HAL_TIM_Base_MspInit+0x160>)
 8007d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	68bb      	ldr	r3, [r7, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	3738      	adds	r7, #56	; 0x38
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40021000 	.word	0x40021000
 8007d24:	40000400 	.word	0x40000400
 8007d28:	40000c00 	.word	0x40000c00
 8007d2c:	40013400 	.word	0x40013400
 8007d30:	40014000 	.word	0x40014000
 8007d34:	40014400 	.word	0x40014400

08007d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007d38:	480d      	ldr	r0, [pc, #52]	; (8007d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007d3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007d3c:	480d      	ldr	r0, [pc, #52]	; (8007d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8007d3e:	490e      	ldr	r1, [pc, #56]	; (8007d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007d40:	4a0e      	ldr	r2, [pc, #56]	; (8007d7c <LoopForever+0xe>)
  movs r3, #0
 8007d42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007d44:	e002      	b.n	8007d4c <LoopCopyDataInit>

08007d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d4a:	3304      	adds	r3, #4

08007d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d50:	d3f9      	bcc.n	8007d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d52:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007d54:	4c0b      	ldr	r4, [pc, #44]	; (8007d84 <LoopForever+0x16>)
  movs r3, #0
 8007d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d58:	e001      	b.n	8007d5e <LoopFillZerobss>

08007d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d5c:	3204      	adds	r2, #4

08007d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d60:	d3fb      	bcc.n	8007d5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007d62:	f7ff fc75 	bl	8007650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d66:	f007 f89f 	bl	800eea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007d6a:	f7ff f95f 	bl	800702c <main>

08007d6e <LoopForever>:

LoopForever:
    b LoopForever
 8007d6e:	e7fe      	b.n	8007d6e <LoopForever>
  ldr   r0, =_estack
 8007d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d78:	20001e08 	.word	0x20001e08
  ldr r2, =_sidata
 8007d7c:	080141e8 	.word	0x080141e8
  ldr r2, =_sbss
 8007d80:	20001e08 	.word	0x20001e08
  ldr r4, =_ebss
 8007d84:	200028e0 	.word	0x200028e0

08007d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007d88:	e7fe      	b.n	8007d88 <ADC1_2_IRQHandler>

08007d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d94:	2003      	movs	r0, #3
 8007d96:	f001 fcbd 	bl	8009714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	f000 f80e 	bl	8007dbc <HAL_InitTick>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	71fb      	strb	r3, [r7, #7]
 8007daa:	e001      	b.n	8007db0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007dac:	f7ff fac8 	bl	8007340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007db0:	79fb      	ldrb	r3, [r7, #7]

}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007dc8:	4b16      	ldr	r3, [pc, #88]	; (8007e24 <HAL_InitTick+0x68>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d022      	beq.n	8007e16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007dd0:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <HAL_InitTick+0x6c>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <HAL_InitTick+0x68>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 fcd6 	bl	8009796 <HAL_SYSTICK_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10f      	bne.n	8007e10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b0f      	cmp	r3, #15
 8007df4:	d809      	bhi.n	8007e0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007df6:	2200      	movs	r2, #0
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dfe:	f001 fc94 	bl	800972a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007e02:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <HAL_InitTick+0x70>)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e007      	b.n	8007e1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	73fb      	strb	r3, [r7, #15]
 8007e0e:	e004      	b.n	8007e1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
 8007e14:	e001      	b.n	8007e1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000c38 	.word	0x20000c38
 8007e28:	20000c30 	.word	0x20000c30
 8007e2c:	20000c34 	.word	0x20000c34

08007e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <HAL_IncTick+0x1c>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <HAL_IncTick+0x20>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	4a03      	ldr	r2, [pc, #12]	; (8007e4c <HAL_IncTick+0x1c>)
 8007e40:	6013      	str	r3, [r2, #0]
}
 8007e42:	bf00      	nop
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	200028d8 	.word	0x200028d8
 8007e50:	20000c38 	.word	0x20000c38

08007e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
  return uwTick;
 8007e58:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <HAL_GetTick+0x14>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	200028d8 	.word	0x200028d8

08007e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e74:	f7ff ffee 	bl	8007e54 <HAL_GetTick>
 8007e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e84:	d004      	beq.n	8007e90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e86:	4b09      	ldr	r3, [pc, #36]	; (8007eac <HAL_Delay+0x40>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e90:	bf00      	nop
 8007e92:	f7ff ffdf 	bl	8007e54 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d8f7      	bhi.n	8007e92 <HAL_Delay+0x26>
  {
  }
}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000c38 	.word	0x20000c38

08007eb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	609a      	str	r2, [r3, #8]
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	609a      	str	r2, [r3, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007f18:	b490      	push	{r4, r7}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3360      	adds	r3, #96	; 0x60
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007f34:	6822      	ldr	r2, [r4, #0]
 8007f36:	4b08      	ldr	r3, [pc, #32]	; (8007f58 <LL_ADC_SetOffset+0x40>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	4313      	orrs	r3, r2
 8007f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f4a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc90      	pop	{r4, r7}
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	03fff000 	.word	0x03fff000

08007f5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007f5c:	b490      	push	{r4, r7}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3360      	adds	r3, #96	; 0x60
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc90      	pop	{r4, r7}
 8007f82:	4770      	bx	lr

08007f84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007f84:	b490      	push	{r4, r7}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3360      	adds	r3, #96	; 0x60
 8007f94:	461a      	mov	r2, r3
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bc90      	pop	{r4, r7}
 8007fb2:	4770      	bx	lr

08007fb4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007fb4:	b490      	push	{r4, r7}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3360      	adds	r3, #96	; 0x60
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc90      	pop	{r4, r7}
 8007fe2:	4770      	bx	lr

08007fe4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007fe4:	b490      	push	{r4, r7}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3360      	adds	r3, #96	; 0x60
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4313      	orrs	r3, r2
 8008008:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bc90      	pop	{r4, r7}
 8008012:	4770      	bx	lr

08008014 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	615a      	str	r2, [r3, #20]
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800803a:	b490      	push	{r4, r7}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3330      	adds	r3, #48	; 0x30
 800804a:	461a      	mov	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	f003 030c 	and.w	r3, r3, #12
 8008056:	4413      	add	r3, r2
 8008058:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	211f      	movs	r1, #31
 8008064:	fa01 f303 	lsl.w	r3, r1, r3
 8008068:	43db      	mvns	r3, r3
 800806a:	401a      	ands	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	0e9b      	lsrs	r3, r3, #26
 8008070:	f003 011f 	and.w	r1, r3, #31
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f003 031f 	and.w	r3, r3, #31
 800807a:	fa01 f303 	lsl.w	r3, r1, r3
 800807e:	4313      	orrs	r3, r2
 8008080:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bc90      	pop	{r4, r7}
 800808a:	4770      	bx	lr

0800808c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800808c:	b490      	push	{r4, r7}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3314      	adds	r3, #20
 800809c:	461a      	mov	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	0e5b      	lsrs	r3, r3, #25
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	4413      	add	r3, r2
 80080aa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	0d1b      	lsrs	r3, r3, #20
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	2107      	movs	r1, #7
 80080b8:	fa01 f303 	lsl.w	r3, r1, r3
 80080bc:	43db      	mvns	r3, r3
 80080be:	401a      	ands	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	0d1b      	lsrs	r3, r3, #20
 80080c4:	f003 031f 	and.w	r3, r3, #31
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	fa01 f303 	lsl.w	r3, r1, r3
 80080ce:	4313      	orrs	r3, r2
 80080d0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc90      	pop	{r4, r7}
 80080da:	4770      	bx	lr

080080dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080f4:	43db      	mvns	r3, r3
 80080f6:	401a      	ands	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f003 0318 	and.w	r3, r3, #24
 80080fe:	4908      	ldr	r1, [pc, #32]	; (8008120 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008100:	40d9      	lsrs	r1, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	400b      	ands	r3, r1
 8008106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800810a:	431a      	orrs	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008112:	bf00      	nop
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	0007ffff 	.word	0x0007ffff

08008124 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6093      	str	r3, [r2, #8]
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800815c:	d101      	bne.n	8008162 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008184:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ac:	d101      	bne.n	80081b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e000      	b.n	80081b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <LL_ADC_IsEnabled+0x18>
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <LL_ADC_IsEnabled+0x1a>
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d101      	bne.n	80081fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f003 0308 	and.w	r3, r3, #8
 800821c:	2b08      	cmp	r3, #8
 800821e:	d101      	bne.n	8008224 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008220:	2301      	movs	r3, #1
 8008222:	e000      	b.n	8008226 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
	...

08008234 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008234:	b590      	push	{r4, r7, lr}
 8008236:	b089      	sub	sp, #36	; 0x24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008240:	2300      	movs	r3, #0
 8008242:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e1ad      	b.n	80085aa <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d109      	bne.n	8008270 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7fe f941 	bl	80064e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff ff67 	bl	8008148 <LL_ADC_IsDeepPowerDownEnabled>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff ff4d 	bl	8008124 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff ff82 	bl	8008198 <LL_ADC_IsInternalRegulatorEnabled>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d113      	bne.n	80082c2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff ff66 	bl	8008170 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80082a4:	4b9e      	ldr	r3, [pc, #632]	; (8008520 <HAL_ADC_Init+0x2ec>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	099b      	lsrs	r3, r3, #6
 80082aa:	4a9e      	ldr	r2, [pc, #632]	; (8008524 <HAL_ADC_Init+0x2f0>)
 80082ac:	fba2 2303 	umull	r2, r3, r2, r3
 80082b0:	099b      	lsrs	r3, r3, #6
 80082b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80082b4:	e002      	b.n	80082bc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1f9      	bne.n	80082b6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff ff66 	bl	8008198 <LL_ADC_IsInternalRegulatorEnabled>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10d      	bne.n	80082ee <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d6:	f043 0210 	orr.w	r2, r3, #16
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e2:	f043 0201 	orr.w	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff ff77 	bl	80081e6 <LL_ADC_REG_IsConversionOngoing>
 80082f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082fe:	f003 0310 	and.w	r3, r3, #16
 8008302:	2b00      	cmp	r3, #0
 8008304:	f040 8148 	bne.w	8008598 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f040 8144 	bne.w	8008598 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008314:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008318:	f043 0202 	orr.w	r2, r3, #2
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff ff4b 	bl	80081c0 <LL_ADC_IsEnabled>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d141      	bne.n	80083b4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008338:	d004      	beq.n	8008344 <HAL_ADC_Init+0x110>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a7a      	ldr	r2, [pc, #488]	; (8008528 <HAL_ADC_Init+0x2f4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d10f      	bne.n	8008364 <HAL_ADC_Init+0x130>
 8008344:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008348:	f7ff ff3a 	bl	80081c0 <LL_ADC_IsEnabled>
 800834c:	4604      	mov	r4, r0
 800834e:	4876      	ldr	r0, [pc, #472]	; (8008528 <HAL_ADC_Init+0x2f4>)
 8008350:	f7ff ff36 	bl	80081c0 <LL_ADC_IsEnabled>
 8008354:	4603      	mov	r3, r0
 8008356:	4323      	orrs	r3, r4
 8008358:	2b00      	cmp	r3, #0
 800835a:	bf0c      	ite	eq
 800835c:	2301      	moveq	r3, #1
 800835e:	2300      	movne	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	e012      	b.n	800838a <HAL_ADC_Init+0x156>
 8008364:	4871      	ldr	r0, [pc, #452]	; (800852c <HAL_ADC_Init+0x2f8>)
 8008366:	f7ff ff2b 	bl	80081c0 <LL_ADC_IsEnabled>
 800836a:	4604      	mov	r4, r0
 800836c:	4870      	ldr	r0, [pc, #448]	; (8008530 <HAL_ADC_Init+0x2fc>)
 800836e:	f7ff ff27 	bl	80081c0 <LL_ADC_IsEnabled>
 8008372:	4603      	mov	r3, r0
 8008374:	431c      	orrs	r4, r3
 8008376:	486f      	ldr	r0, [pc, #444]	; (8008534 <HAL_ADC_Init+0x300>)
 8008378:	f7ff ff22 	bl	80081c0 <LL_ADC_IsEnabled>
 800837c:	4603      	mov	r3, r0
 800837e:	4323      	orrs	r3, r4
 8008380:	2b00      	cmp	r3, #0
 8008382:	bf0c      	ite	eq
 8008384:	2301      	moveq	r3, #1
 8008386:	2300      	movne	r3, #0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d012      	beq.n	80083b4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008396:	d004      	beq.n	80083a2 <HAL_ADC_Init+0x16e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a62      	ldr	r2, [pc, #392]	; (8008528 <HAL_ADC_Init+0x2f4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d101      	bne.n	80083a6 <HAL_ADC_Init+0x172>
 80083a2:	4a65      	ldr	r2, [pc, #404]	; (8008538 <HAL_ADC_Init+0x304>)
 80083a4:	e000      	b.n	80083a8 <HAL_ADC_Init+0x174>
 80083a6:	4a65      	ldr	r2, [pc, #404]	; (800853c <HAL_ADC_Init+0x308>)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f7ff fd7e 	bl	8007eb0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	7f5b      	ldrb	r3, [r3, #29]
 80083b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80083be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80083c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80083ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80083d4:	4313      	orrs	r3, r2
 80083d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d106      	bne.n	80083f0 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e6:	3b01      	subs	r3, #1
 80083e8:	045b      	lsls	r3, r3, #17
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	4313      	orrs	r3, r2
 800840a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	4b4b      	ldr	r3, [pc, #300]	; (8008540 <HAL_ADC_Init+0x30c>)
 8008414:	4013      	ands	r3, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6812      	ldr	r2, [r2, #0]
 800841a:	69b9      	ldr	r1, [r7, #24]
 800841c:	430b      	orrs	r3, r1
 800841e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff fed3 	bl	80081e6 <LL_ADC_REG_IsConversionOngoing>
 8008440:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff fee0 	bl	800820c <LL_ADC_INJ_IsConversionOngoing>
 800844c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d17f      	bne.n	8008554 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d17c      	bne.n	8008554 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800845e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008466:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008468:	4313      	orrs	r3, r2
 800846a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008476:	f023 0302 	bic.w	r3, r3, #2
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6812      	ldr	r2, [r2, #0]
 800847e:	69b9      	ldr	r1, [r7, #24]
 8008480:	430b      	orrs	r3, r1
 8008482:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d017      	beq.n	80084bc <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800849a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80084a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80084a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6911      	ldr	r1, [r2, #16]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6812      	ldr	r2, [r2, #0]
 80084b4:	430b      	orrs	r3, r1
 80084b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80084ba:	e013      	b.n	80084e4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80084dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d12a      	bne.n	8008544 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80084f8:	f023 0304 	bic.w	r3, r3, #4
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008504:	4311      	orrs	r1, r2
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800850a:	4311      	orrs	r1, r2
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008510:	430a      	orrs	r2, r1
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f042 0201 	orr.w	r2, r2, #1
 800851c:	611a      	str	r2, [r3, #16]
 800851e:	e019      	b.n	8008554 <HAL_ADC_Init+0x320>
 8008520:	20000c30 	.word	0x20000c30
 8008524:	053e2d63 	.word	0x053e2d63
 8008528:	50000100 	.word	0x50000100
 800852c:	50000400 	.word	0x50000400
 8008530:	50000500 	.word	0x50000500
 8008534:	50000600 	.word	0x50000600
 8008538:	50000300 	.word	0x50000300
 800853c:	50000700 	.word	0x50000700
 8008540:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	691a      	ldr	r2, [r3, #16]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0201 	bic.w	r2, r2, #1
 8008552:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d10c      	bne.n	8008576 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	f023 010f 	bic.w	r1, r3, #15
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	1e5a      	subs	r2, r3, #1
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	631a      	str	r2, [r3, #48]	; 0x30
 8008574:	e007      	b.n	8008586 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 020f 	bic.w	r2, r2, #15
 8008584:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	f043 0201 	orr.w	r2, r3, #1
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	65da      	str	r2, [r3, #92]	; 0x5c
 8008596:	e007      	b.n	80085a8 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800859c:	f043 0210 	orr.w	r2, r3, #16
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80085a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3724      	adds	r7, #36	; 0x24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd90      	pop	{r4, r7, pc}
 80085b2:	bf00      	nop

080085b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b0a6      	sub	sp, #152	; 0x98
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d101      	bne.n	80085d6 <HAL_ADC_ConfigChannel+0x22>
 80085d2:	2302      	movs	r3, #2
 80085d4:	e38e      	b.n	8008cf4 <HAL_ADC_ConfigChannel+0x740>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff fdff 	bl	80081e6 <LL_ADC_REG_IsConversionOngoing>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f040 836f 	bne.w	8008cce <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	6859      	ldr	r1, [r3, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	f7ff fd1c 	bl	800803a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fded 	bl	80081e6 <LL_ADC_REG_IsConversionOngoing>
 800860c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff fdf9 	bl	800820c <LL_ADC_INJ_IsConversionOngoing>
 800861a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800861e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008622:	2b00      	cmp	r3, #0
 8008624:	f040 817b 	bne.w	800891e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 8176 	bne.w	800891e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800863a:	d10f      	bne.n	800865c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2200      	movs	r2, #0
 8008646:	4619      	mov	r1, r3
 8008648:	f7ff fd20 	bl	800808c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff fcdd 	bl	8008014 <LL_ADC_SetSamplingTimeCommonConfig>
 800865a:	e00e      	b.n	800867a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	6819      	ldr	r1, [r3, #0]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	461a      	mov	r2, r3
 800866a:	f7ff fd0f 	bl	800808c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2100      	movs	r1, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fccd 	bl	8008014 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	695a      	ldr	r2, [r3, #20]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	08db      	lsrs	r3, r3, #3
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	fa02 f303 	lsl.w	r3, r2, r3
 8008690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	2b04      	cmp	r3, #4
 800869a:	d022      	beq.n	80086e2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	6919      	ldr	r1, [r3, #16]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086ac:	f7ff fc34 	bl	8007f18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6818      	ldr	r0, [r3, #0]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	6919      	ldr	r1, [r3, #16]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	461a      	mov	r2, r3
 80086be:	f7ff fc79 	bl	8007fb4 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6919      	ldr	r1, [r3, #16]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	7f1b      	ldrb	r3, [r3, #28]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d102      	bne.n	80086d8 <HAL_ADC_ConfigChannel+0x124>
 80086d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086d6:	e000      	b.n	80086da <HAL_ADC_ConfigChannel+0x126>
 80086d8:	2300      	movs	r3, #0
 80086da:	461a      	mov	r2, r3
 80086dc:	f7ff fc82 	bl	8007fe4 <LL_ADC_SetOffsetSaturation>
 80086e0:	e11d      	b.n	800891e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2100      	movs	r1, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff fc37 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <HAL_ADC_ConfigChannel+0x15a>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2100      	movs	r1, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff fc2c 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 8008704:	4603      	mov	r3, r0
 8008706:	0e9b      	lsrs	r3, r3, #26
 8008708:	f003 021f 	and.w	r2, r3, #31
 800870c:	e012      	b.n	8008734 <HAL_ADC_ConfigChannel+0x180>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2100      	movs	r1, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fc21 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 800871a:	4603      	mov	r3, r0
 800871c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008720:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008724:	fa93 f3a3 	rbit	r3, r3
 8008728:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800872a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800872c:	fab3 f383 	clz	r3, r3
 8008730:	b2db      	uxtb	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800873c:	2b00      	cmp	r3, #0
 800873e:	d105      	bne.n	800874c <HAL_ADC_ConfigChannel+0x198>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	0e9b      	lsrs	r3, r3, #26
 8008746:	f003 031f 	and.w	r3, r3, #31
 800874a:	e00a      	b.n	8008762 <HAL_ADC_ConfigChannel+0x1ae>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008754:	fa93 f3a3 	rbit	r3, r3
 8008758:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800875a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800875c:	fab3 f383 	clz	r3, r3
 8008760:	b2db      	uxtb	r3, r3
 8008762:	429a      	cmp	r2, r3
 8008764:	d106      	bne.n	8008774 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2200      	movs	r2, #0
 800876c:	2100      	movs	r1, #0
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff fc08 	bl	8007f84 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2101      	movs	r1, #1
 800877a:	4618      	mov	r0, r3
 800877c:	f7ff fbee 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 8008780:	4603      	mov	r3, r0
 8008782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <HAL_ADC_ConfigChannel+0x1ec>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2101      	movs	r1, #1
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fbe3 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 8008796:	4603      	mov	r3, r0
 8008798:	0e9b      	lsrs	r3, r3, #26
 800879a:	f003 021f 	and.w	r2, r3, #31
 800879e:	e010      	b.n	80087c2 <HAL_ADC_ConfigChannel+0x20e>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2101      	movs	r1, #1
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff fbd8 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 80087ac:	4603      	mov	r3, r0
 80087ae:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087b2:	fa93 f3a3 	rbit	r3, r3
 80087b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80087b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ba:	fab3 f383 	clz	r3, r3
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <HAL_ADC_ConfigChannel+0x226>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	0e9b      	lsrs	r3, r3, #26
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	e00a      	b.n	80087f0 <HAL_ADC_ConfigChannel+0x23c>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087e2:	fa93 f3a3 	rbit	r3, r3
 80087e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80087e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087ea:	fab3 f383 	clz	r3, r3
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d106      	bne.n	8008802 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2200      	movs	r2, #0
 80087fa:	2101      	movs	r1, #1
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fbc1 	bl	8007f84 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2102      	movs	r1, #2
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff fba7 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 800880e:	4603      	mov	r3, r0
 8008810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <HAL_ADC_ConfigChannel+0x27a>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2102      	movs	r1, #2
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff fb9c 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 8008824:	4603      	mov	r3, r0
 8008826:	0e9b      	lsrs	r3, r3, #26
 8008828:	f003 021f 	and.w	r2, r3, #31
 800882c:	e010      	b.n	8008850 <HAL_ADC_ConfigChannel+0x29c>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2102      	movs	r1, #2
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff fb91 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 800883a:	4603      	mov	r3, r0
 800883c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800883e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008840:	fa93 f3a3 	rbit	r3, r3
 8008844:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008848:	fab3 f383 	clz	r3, r3
 800884c:	b2db      	uxtb	r3, r3
 800884e:	461a      	mov	r2, r3
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008858:	2b00      	cmp	r3, #0
 800885a:	d105      	bne.n	8008868 <HAL_ADC_ConfigChannel+0x2b4>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	0e9b      	lsrs	r3, r3, #26
 8008862:	f003 031f 	and.w	r3, r3, #31
 8008866:	e00a      	b.n	800887e <HAL_ADC_ConfigChannel+0x2ca>
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800886e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008870:	fa93 f3a3 	rbit	r3, r3
 8008874:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008878:	fab3 f383 	clz	r3, r3
 800887c:	b2db      	uxtb	r3, r3
 800887e:	429a      	cmp	r2, r3
 8008880:	d106      	bne.n	8008890 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2200      	movs	r2, #0
 8008888:	2102      	movs	r1, #2
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff fb7a 	bl	8007f84 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2103      	movs	r1, #3
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fb60 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 800889c:	4603      	mov	r3, r0
 800889e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10a      	bne.n	80088bc <HAL_ADC_ConfigChannel+0x308>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2103      	movs	r1, #3
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff fb55 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 80088b2:	4603      	mov	r3, r0
 80088b4:	0e9b      	lsrs	r3, r3, #26
 80088b6:	f003 021f 	and.w	r2, r3, #31
 80088ba:	e010      	b.n	80088de <HAL_ADC_ConfigChannel+0x32a>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2103      	movs	r1, #3
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff fb4a 	bl	8007f5c <LL_ADC_GetOffsetChannel>
 80088c8:	4603      	mov	r3, r0
 80088ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ce:	fa93 f3a3 	rbit	r3, r3
 80088d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80088d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d6:	fab3 f383 	clz	r3, r3
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	461a      	mov	r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d105      	bne.n	80088f6 <HAL_ADC_ConfigChannel+0x342>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	0e9b      	lsrs	r3, r3, #26
 80088f0:	f003 031f 	and.w	r3, r3, #31
 80088f4:	e00a      	b.n	800890c <HAL_ADC_ConfigChannel+0x358>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088fe:	fa93 f3a3 	rbit	r3, r3
 8008902:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008906:	fab3 f383 	clz	r3, r3
 800890a:	b2db      	uxtb	r3, r3
 800890c:	429a      	cmp	r2, r3
 800890e:	d106      	bne.n	800891e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2200      	movs	r2, #0
 8008916:	2103      	movs	r1, #3
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff fb33 	bl	8007f84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff fc4c 	bl	80081c0 <LL_ADC_IsEnabled>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	f040 810c 	bne.w	8008b48 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	6819      	ldr	r1, [r3, #0]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	461a      	mov	r2, r3
 800893e:	f7ff fbcd 	bl	80080dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	4aaf      	ldr	r2, [pc, #700]	; (8008c04 <HAL_ADC_ConfigChannel+0x650>)
 8008948:	4293      	cmp	r3, r2
 800894a:	f040 80fd 	bne.w	8008b48 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10b      	bne.n	8008976 <HAL_ADC_ConfigChannel+0x3c2>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	0e9b      	lsrs	r3, r3, #26
 8008964:	3301      	adds	r3, #1
 8008966:	f003 031f 	and.w	r3, r3, #31
 800896a:	2b09      	cmp	r3, #9
 800896c:	bf94      	ite	ls
 800896e:	2301      	movls	r3, #1
 8008970:	2300      	movhi	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	e012      	b.n	800899c <HAL_ADC_ConfigChannel+0x3e8>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800897c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897e:	fa93 f3a3 	rbit	r3, r3
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008986:	fab3 f383 	clz	r3, r3
 800898a:	b2db      	uxtb	r3, r3
 800898c:	3301      	adds	r3, #1
 800898e:	f003 031f 	and.w	r3, r3, #31
 8008992:	2b09      	cmp	r3, #9
 8008994:	bf94      	ite	ls
 8008996:	2301      	movls	r3, #1
 8008998:	2300      	movhi	r3, #0
 800899a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800899c:	2b00      	cmp	r3, #0
 800899e:	d064      	beq.n	8008a6a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d107      	bne.n	80089bc <HAL_ADC_ConfigChannel+0x408>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	0e9b      	lsrs	r3, r3, #26
 80089b2:	3301      	adds	r3, #1
 80089b4:	069b      	lsls	r3, r3, #26
 80089b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80089ba:	e00e      	b.n	80089da <HAL_ADC_ConfigChannel+0x426>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	fa93 f3a3 	rbit	r3, r3
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	fab3 f383 	clz	r3, r3
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	3301      	adds	r3, #1
 80089d4:	069b      	lsls	r3, r3, #26
 80089d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d109      	bne.n	80089fa <HAL_ADC_ConfigChannel+0x446>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	0e9b      	lsrs	r3, r3, #26
 80089ec:	3301      	adds	r3, #1
 80089ee:	f003 031f 	and.w	r3, r3, #31
 80089f2:	2101      	movs	r1, #1
 80089f4:	fa01 f303 	lsl.w	r3, r1, r3
 80089f8:	e010      	b.n	8008a1c <HAL_ADC_ConfigChannel+0x468>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	fa93 f3a3 	rbit	r3, r3
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0a:	fab3 f383 	clz	r3, r3
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	3301      	adds	r3, #1
 8008a12:	f003 031f 	and.w	r3, r3, #31
 8008a16:	2101      	movs	r1, #1
 8008a18:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1c:	ea42 0103 	orr.w	r1, r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <HAL_ADC_ConfigChannel+0x48e>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	0e9b      	lsrs	r3, r3, #26
 8008a32:	3301      	adds	r3, #1
 8008a34:	f003 021f 	and.w	r2, r3, #31
 8008a38:	4613      	mov	r3, r2
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	4413      	add	r3, r2
 8008a3e:	051b      	lsls	r3, r3, #20
 8008a40:	e011      	b.n	8008a66 <HAL_ADC_ConfigChannel+0x4b2>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	fa93 f3a3 	rbit	r3, r3
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	fab3 f383 	clz	r3, r3
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	3301      	adds	r3, #1
 8008a5a:	f003 021f 	and.w	r2, r3, #31
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a66:	430b      	orrs	r3, r1
 8008a68:	e069      	b.n	8008b3e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d107      	bne.n	8008a86 <HAL_ADC_ConfigChannel+0x4d2>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	0e9b      	lsrs	r3, r3, #26
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	069b      	lsls	r3, r3, #26
 8008a80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a84:	e00e      	b.n	8008aa4 <HAL_ADC_ConfigChannel+0x4f0>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	fa93 f3a3 	rbit	r3, r3
 8008a92:	61fb      	str	r3, [r7, #28]
  return result;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	fab3 f383 	clz	r3, r3
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	069b      	lsls	r3, r3, #26
 8008aa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d109      	bne.n	8008ac4 <HAL_ADC_ConfigChannel+0x510>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	0e9b      	lsrs	r3, r3, #26
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	f003 031f 	and.w	r3, r3, #31
 8008abc:	2101      	movs	r1, #1
 8008abe:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac2:	e010      	b.n	8008ae6 <HAL_ADC_ConfigChannel+0x532>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	fa93 f3a3 	rbit	r3, r3
 8008ad0:	617b      	str	r3, [r7, #20]
  return result;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	fab3 f383 	clz	r3, r3
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	3301      	adds	r3, #1
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae6:	ea42 0103 	orr.w	r1, r2, r3
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10d      	bne.n	8008b12 <HAL_ADC_ConfigChannel+0x55e>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	0e9b      	lsrs	r3, r3, #26
 8008afc:	3301      	adds	r3, #1
 8008afe:	f003 021f 	and.w	r2, r3, #31
 8008b02:	4613      	mov	r3, r2
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	4413      	add	r3, r2
 8008b08:	3b1e      	subs	r3, #30
 8008b0a:	051b      	lsls	r3, r3, #20
 8008b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008b10:	e014      	b.n	8008b3c <HAL_ADC_ConfigChannel+0x588>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	fa93 f3a3 	rbit	r3, r3
 8008b1e:	60fb      	str	r3, [r7, #12]
  return result;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	fab3 f383 	clz	r3, r3
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	3301      	adds	r3, #1
 8008b2a:	f003 021f 	and.w	r2, r3, #31
 8008b2e:	4613      	mov	r3, r2
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	4413      	add	r3, r2
 8008b34:	3b1e      	subs	r3, #30
 8008b36:	051b      	lsls	r3, r3, #20
 8008b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	6892      	ldr	r2, [r2, #8]
 8008b42:	4619      	mov	r1, r3
 8008b44:	f7ff faa2 	bl	800808c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	4b2e      	ldr	r3, [pc, #184]	; (8008c08 <HAL_ADC_ConfigChannel+0x654>)
 8008b4e:	4013      	ands	r3, r2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 80c9 	beq.w	8008ce8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b5e:	d004      	beq.n	8008b6a <HAL_ADC_ConfigChannel+0x5b6>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a29      	ldr	r2, [pc, #164]	; (8008c0c <HAL_ADC_ConfigChannel+0x658>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d101      	bne.n	8008b6e <HAL_ADC_ConfigChannel+0x5ba>
 8008b6a:	4b29      	ldr	r3, [pc, #164]	; (8008c10 <HAL_ADC_ConfigChannel+0x65c>)
 8008b6c:	e000      	b.n	8008b70 <HAL_ADC_ConfigChannel+0x5bc>
 8008b6e:	4b29      	ldr	r3, [pc, #164]	; (8008c14 <HAL_ADC_ConfigChannel+0x660>)
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff f9c3 	bl	8007efc <LL_ADC_GetCommonPathInternalCh>
 8008b76:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a26      	ldr	r2, [pc, #152]	; (8008c18 <HAL_ADC_ConfigChannel+0x664>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d004      	beq.n	8008b8e <HAL_ADC_ConfigChannel+0x5da>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a24      	ldr	r2, [pc, #144]	; (8008c1c <HAL_ADC_ConfigChannel+0x668>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d14e      	bne.n	8008c2c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d148      	bne.n	8008c2c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ba2:	d005      	beq.n	8008bb0 <HAL_ADC_ConfigChannel+0x5fc>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a1d      	ldr	r2, [pc, #116]	; (8008c20 <HAL_ADC_ConfigChannel+0x66c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	f040 8099 	bne.w	8008ce2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bb8:	d004      	beq.n	8008bc4 <HAL_ADC_ConfigChannel+0x610>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a13      	ldr	r2, [pc, #76]	; (8008c0c <HAL_ADC_ConfigChannel+0x658>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d101      	bne.n	8008bc8 <HAL_ADC_ConfigChannel+0x614>
 8008bc4:	4a12      	ldr	r2, [pc, #72]	; (8008c10 <HAL_ADC_ConfigChannel+0x65c>)
 8008bc6:	e000      	b.n	8008bca <HAL_ADC_ConfigChannel+0x616>
 8008bc8:	4a12      	ldr	r2, [pc, #72]	; (8008c14 <HAL_ADC_ConfigChannel+0x660>)
 8008bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	f7ff f97e 	bl	8007ed6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <HAL_ADC_ConfigChannel+0x670>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	099b      	lsrs	r3, r3, #6
 8008be0:	4a11      	ldr	r2, [pc, #68]	; (8008c28 <HAL_ADC_ConfigChannel+0x674>)
 8008be2:	fba2 2303 	umull	r2, r3, r2, r3
 8008be6:	099a      	lsrs	r2, r3, #6
 8008be8:	4613      	mov	r3, r2
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	4413      	add	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008bf2:	e002      	b.n	8008bfa <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f9      	bne.n	8008bf4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008c00:	e06f      	b.n	8008ce2 <HAL_ADC_ConfigChannel+0x72e>
 8008c02:	bf00      	nop
 8008c04:	407f0000 	.word	0x407f0000
 8008c08:	80080000 	.word	0x80080000
 8008c0c:	50000100 	.word	0x50000100
 8008c10:	50000300 	.word	0x50000300
 8008c14:	50000700 	.word	0x50000700
 8008c18:	c3210000 	.word	0xc3210000
 8008c1c:	90c00010 	.word	0x90c00010
 8008c20:	50000600 	.word	0x50000600
 8008c24:	20000c30 	.word	0x20000c30
 8008c28:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a32      	ldr	r2, [pc, #200]	; (8008cfc <HAL_ADC_ConfigChannel+0x748>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d125      	bne.n	8008c82 <HAL_ADC_ConfigChannel+0x6ce>
 8008c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d11f      	bne.n	8008c82 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a2e      	ldr	r2, [pc, #184]	; (8008d00 <HAL_ADC_ConfigChannel+0x74c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d104      	bne.n	8008c56 <HAL_ADC_ConfigChannel+0x6a2>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a2c      	ldr	r2, [pc, #176]	; (8008d04 <HAL_ADC_ConfigChannel+0x750>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d047      	beq.n	8008ce6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c5e:	d004      	beq.n	8008c6a <HAL_ADC_ConfigChannel+0x6b6>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a26      	ldr	r2, [pc, #152]	; (8008d00 <HAL_ADC_ConfigChannel+0x74c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d101      	bne.n	8008c6e <HAL_ADC_ConfigChannel+0x6ba>
 8008c6a:	4a27      	ldr	r2, [pc, #156]	; (8008d08 <HAL_ADC_ConfigChannel+0x754>)
 8008c6c:	e000      	b.n	8008c70 <HAL_ADC_ConfigChannel+0x6bc>
 8008c6e:	4a27      	ldr	r2, [pc, #156]	; (8008d0c <HAL_ADC_ConfigChannel+0x758>)
 8008c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	f7ff f92b 	bl	8007ed6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008c80:	e031      	b.n	8008ce6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a22      	ldr	r2, [pc, #136]	; (8008d10 <HAL_ADC_ConfigChannel+0x75c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d12d      	bne.n	8008ce8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d127      	bne.n	8008ce8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a18      	ldr	r2, [pc, #96]	; (8008d00 <HAL_ADC_ConfigChannel+0x74c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d022      	beq.n	8008ce8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008caa:	d004      	beq.n	8008cb6 <HAL_ADC_ConfigChannel+0x702>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a13      	ldr	r2, [pc, #76]	; (8008d00 <HAL_ADC_ConfigChannel+0x74c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d101      	bne.n	8008cba <HAL_ADC_ConfigChannel+0x706>
 8008cb6:	4a14      	ldr	r2, [pc, #80]	; (8008d08 <HAL_ADC_ConfigChannel+0x754>)
 8008cb8:	e000      	b.n	8008cbc <HAL_ADC_ConfigChannel+0x708>
 8008cba:	4a14      	ldr	r2, [pc, #80]	; (8008d0c <HAL_ADC_ConfigChannel+0x758>)
 8008cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	f7ff f905 	bl	8007ed6 <LL_ADC_SetCommonPathInternalCh>
 8008ccc:	e00c      	b.n	8008ce8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd2:	f043 0220 	orr.w	r2, r3, #32
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008ce0:	e002      	b.n	8008ce8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ce2:	bf00      	nop
 8008ce4:	e000      	b.n	8008ce8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ce6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008cf0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3798      	adds	r7, #152	; 0x98
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	c7520000 	.word	0xc7520000
 8008d00:	50000100 	.word	0x50000100
 8008d04:	50000500 	.word	0x50000500
 8008d08:	50000300 	.word	0x50000300
 8008d0c:	50000700 	.word	0x50000700
 8008d10:	cb840000 	.word	0xcb840000

08008d14 <LL_ADC_IsEnabled>:
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <LL_ADC_IsEnabled+0x18>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e000      	b.n	8008d2e <LL_ADC_IsEnabled+0x1a>
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <LL_ADC_REG_IsConversionOngoing>:
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b04      	cmp	r3, #4
 8008d4c:	d101      	bne.n	8008d52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b0a1      	sub	sp, #132	; 0x84
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d101      	bne.n	8008d7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	e0e3      	b.n	8008f46 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d8e:	d102      	bne.n	8008d96 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8008d90:	4b6f      	ldr	r3, [pc, #444]	; (8008f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008d92:	60bb      	str	r3, [r7, #8]
 8008d94:	e009      	b.n	8008daa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a6e      	ldr	r2, [pc, #440]	; (8008f54 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d102      	bne.n	8008da6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008da0:	4b6d      	ldr	r3, [pc, #436]	; (8008f58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008da2:	60bb      	str	r3, [r7, #8]
 8008da4:	e001      	b.n	8008daa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008da6:	2300      	movs	r3, #0
 8008da8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10b      	bne.n	8008dc8 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db4:	f043 0220 	orr.w	r2, r3, #32
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e0be      	b.n	8008f46 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff ffb5 	bl	8008d3a <LL_ADC_REG_IsConversionOngoing>
 8008dd0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7ff ffaf 	bl	8008d3a <LL_ADC_REG_IsConversionOngoing>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f040 80a0 	bne.w	8008f24 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f040 809c 	bne.w	8008f24 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008df4:	d004      	beq.n	8008e00 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a55      	ldr	r2, [pc, #340]	; (8008f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d101      	bne.n	8008e04 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8008e00:	4b56      	ldr	r3, [pc, #344]	; (8008f5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008e02:	e000      	b.n	8008e06 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8008e04:	4b56      	ldr	r3, [pc, #344]	; (8008f60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008e06:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d04b      	beq.n	8008ea8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	6859      	ldr	r1, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e22:	035b      	lsls	r3, r3, #13
 8008e24:	430b      	orrs	r3, r1
 8008e26:	431a      	orrs	r2, r3
 8008e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e34:	d004      	beq.n	8008e40 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a45      	ldr	r2, [pc, #276]	; (8008f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d10f      	bne.n	8008e60 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008e40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008e44:	f7ff ff66 	bl	8008d14 <LL_ADC_IsEnabled>
 8008e48:	4604      	mov	r4, r0
 8008e4a:	4841      	ldr	r0, [pc, #260]	; (8008f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008e4c:	f7ff ff62 	bl	8008d14 <LL_ADC_IsEnabled>
 8008e50:	4603      	mov	r3, r0
 8008e52:	4323      	orrs	r3, r4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bf0c      	ite	eq
 8008e58:	2301      	moveq	r3, #1
 8008e5a:	2300      	movne	r3, #0
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	e012      	b.n	8008e86 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8008e60:	483c      	ldr	r0, [pc, #240]	; (8008f54 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008e62:	f7ff ff57 	bl	8008d14 <LL_ADC_IsEnabled>
 8008e66:	4604      	mov	r4, r0
 8008e68:	483b      	ldr	r0, [pc, #236]	; (8008f58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e6a:	f7ff ff53 	bl	8008d14 <LL_ADC_IsEnabled>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	431c      	orrs	r4, r3
 8008e72:	483c      	ldr	r0, [pc, #240]	; (8008f64 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008e74:	f7ff ff4e 	bl	8008d14 <LL_ADC_IsEnabled>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	4323      	orrs	r3, r4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bf0c      	ite	eq
 8008e80:	2301      	moveq	r3, #1
 8008e82:	2300      	movne	r3, #0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d056      	beq.n	8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008e92:	f023 030f 	bic.w	r3, r3, #15
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	6811      	ldr	r1, [r2, #0]
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	6892      	ldr	r2, [r2, #8]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ea4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ea6:	e047      	b.n	8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eb2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ebc:	d004      	beq.n	8008ec8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a23      	ldr	r2, [pc, #140]	; (8008f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d10f      	bne.n	8008ee8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008ec8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008ecc:	f7ff ff22 	bl	8008d14 <LL_ADC_IsEnabled>
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	481f      	ldr	r0, [pc, #124]	; (8008f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008ed4:	f7ff ff1e 	bl	8008d14 <LL_ADC_IsEnabled>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	4323      	orrs	r3, r4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bf0c      	ite	eq
 8008ee0:	2301      	moveq	r3, #1
 8008ee2:	2300      	movne	r3, #0
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	e012      	b.n	8008f0e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8008ee8:	481a      	ldr	r0, [pc, #104]	; (8008f54 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008eea:	f7ff ff13 	bl	8008d14 <LL_ADC_IsEnabled>
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4819      	ldr	r0, [pc, #100]	; (8008f58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008ef2:	f7ff ff0f 	bl	8008d14 <LL_ADC_IsEnabled>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	431c      	orrs	r4, r3
 8008efa:	481a      	ldr	r0, [pc, #104]	; (8008f64 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008efc:	f7ff ff0a 	bl	8008d14 <LL_ADC_IsEnabled>
 8008f00:	4603      	mov	r3, r0
 8008f02:	4323      	orrs	r3, r4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bf0c      	ite	eq
 8008f08:	2301      	moveq	r3, #1
 8008f0a:	2300      	movne	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d012      	beq.n	8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f1a:	f023 030f 	bic.w	r3, r3, #15
 8008f1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f20:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f22:	e009      	b.n	8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f28:	f043 0220 	orr.w	r2, r3, #32
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008f36:	e000      	b.n	8008f3a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008f42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3784      	adds	r7, #132	; 0x84
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd90      	pop	{r4, r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	50000100 	.word	0x50000100
 8008f54:	50000400 	.word	0x50000400
 8008f58:	50000500 	.word	0x50000500
 8008f5c:	50000300 	.word	0x50000300
 8008f60:	50000700 	.word	0x50000700
 8008f64:	50000600 	.word	0x50000600

08008f68 <LL_EXTI_EnableIT_0_31>:
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008f70:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <LL_EXTI_EnableIT_0_31+0x20>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	4904      	ldr	r1, [pc, #16]	; (8008f88 <LL_EXTI_EnableIT_0_31+0x20>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	600b      	str	r3, [r1, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	40010400 	.word	0x40010400

08008f8c <LL_EXTI_EnableIT_32_63>:
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008f94:	4b05      	ldr	r3, [pc, #20]	; (8008fac <LL_EXTI_EnableIT_32_63+0x20>)
 8008f96:	6a1a      	ldr	r2, [r3, #32]
 8008f98:	4904      	ldr	r1, [pc, #16]	; (8008fac <LL_EXTI_EnableIT_32_63+0x20>)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	620b      	str	r3, [r1, #32]
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	40010400 	.word	0x40010400

08008fb0 <LL_EXTI_DisableIT_0_31>:
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8008fb8:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <LL_EXTI_DisableIT_0_31+0x24>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	43db      	mvns	r3, r3
 8008fc0:	4904      	ldr	r1, [pc, #16]	; (8008fd4 <LL_EXTI_DisableIT_0_31+0x24>)
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	600b      	str	r3, [r1, #0]
}
 8008fc6:	bf00      	nop
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	40010400 	.word	0x40010400

08008fd8 <LL_EXTI_DisableIT_32_63>:
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <LL_EXTI_DisableIT_32_63+0x24>)
 8008fe2:	6a1a      	ldr	r2, [r3, #32]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	43db      	mvns	r3, r3
 8008fe8:	4904      	ldr	r1, [pc, #16]	; (8008ffc <LL_EXTI_DisableIT_32_63+0x24>)
 8008fea:	4013      	ands	r3, r2
 8008fec:	620b      	str	r3, [r1, #32]
}
 8008fee:	bf00      	nop
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40010400 	.word	0x40010400

08009000 <LL_EXTI_EnableEvent_0_31>:
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009008:	4b05      	ldr	r3, [pc, #20]	; (8009020 <LL_EXTI_EnableEvent_0_31+0x20>)
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	4904      	ldr	r1, [pc, #16]	; (8009020 <LL_EXTI_EnableEvent_0_31+0x20>)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4313      	orrs	r3, r2
 8009012:	604b      	str	r3, [r1, #4]
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	40010400 	.word	0x40010400

08009024 <LL_EXTI_EnableEvent_32_63>:
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800902c:	4b05      	ldr	r3, [pc, #20]	; (8009044 <LL_EXTI_EnableEvent_32_63+0x20>)
 800902e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009030:	4904      	ldr	r1, [pc, #16]	; (8009044 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4313      	orrs	r3, r2
 8009036:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	40010400 	.word	0x40010400

08009048 <LL_EXTI_DisableEvent_0_31>:
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009050:	4b06      	ldr	r3, [pc, #24]	; (800906c <LL_EXTI_DisableEvent_0_31+0x24>)
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	43db      	mvns	r3, r3
 8009058:	4904      	ldr	r1, [pc, #16]	; (800906c <LL_EXTI_DisableEvent_0_31+0x24>)
 800905a:	4013      	ands	r3, r2
 800905c:	604b      	str	r3, [r1, #4]
}
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	40010400 	.word	0x40010400

08009070 <LL_EXTI_DisableEvent_32_63>:
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009078:	4b06      	ldr	r3, [pc, #24]	; (8009094 <LL_EXTI_DisableEvent_32_63+0x24>)
 800907a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	43db      	mvns	r3, r3
 8009080:	4904      	ldr	r1, [pc, #16]	; (8009094 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009082:	4013      	ands	r3, r2
 8009084:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	40010400 	.word	0x40010400

08009098 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80090a0:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	4904      	ldr	r1, [pc, #16]	; (80090b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	608b      	str	r3, [r1, #8]
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	40010400 	.word	0x40010400

080090bc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80090c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090c8:	4904      	ldr	r1, [pc, #16]	; (80090dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	628b      	str	r3, [r1, #40]	; 0x28
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	40010400 	.word	0x40010400

080090e0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80090e8:	4b06      	ldr	r3, [pc, #24]	; (8009104 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	43db      	mvns	r3, r3
 80090f0:	4904      	ldr	r1, [pc, #16]	; (8009104 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80090f2:	4013      	ands	r3, r2
 80090f4:	608b      	str	r3, [r1, #8]
}
 80090f6:	bf00      	nop
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	40010400 	.word	0x40010400

08009108 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	43db      	mvns	r3, r3
 8009118:	4904      	ldr	r1, [pc, #16]	; (800912c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800911a:	4013      	ands	r3, r2
 800911c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800911e:	bf00      	nop
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40010400 	.word	0x40010400

08009130 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	4904      	ldr	r1, [pc, #16]	; (8009150 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4313      	orrs	r3, r2
 8009142:	60cb      	str	r3, [r1, #12]
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	40010400 	.word	0x40010400

08009154 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800915e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009160:	4904      	ldr	r1, [pc, #16]	; (8009174 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4313      	orrs	r3, r2
 8009166:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	40010400 	.word	0x40010400

08009178 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	43db      	mvns	r3, r3
 8009188:	4904      	ldr	r1, [pc, #16]	; (800919c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800918a:	4013      	ands	r3, r2
 800918c:	60cb      	str	r3, [r1, #12]
}
 800918e:	bf00      	nop
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	40010400 	.word	0x40010400

080091a0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80091a8:	4b06      	ldr	r3, [pc, #24]	; (80091c4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80091aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	43db      	mvns	r3, r3
 80091b0:	4904      	ldr	r1, [pc, #16]	; (80091c4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80091b2:	4013      	ands	r3, r2
 80091b4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	40010400 	.word	0x40010400

080091c8 <LL_EXTI_ClearFlag_0_31>:
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80091d0:	4a04      	ldr	r2, [pc, #16]	; (80091e4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6153      	str	r3, [r2, #20]
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	40010400 	.word	0x40010400

080091e8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80091f0:	4a04      	ldr	r2, [pc, #16]	; (8009204 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40010400 	.word	0x40010400

08009208 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	77fb      	strb	r3, [r7, #31]
 8009222:	e180      	b.n	8009526 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800922e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009232:	d102      	bne.n	800923a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	77fb      	strb	r3, [r7, #31]
 8009238:	e175      	b.n	8009526 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	7f5b      	ldrb	r3, [r3, #29]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d108      	bne.n	8009256 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7fd f9db 	bl	800660c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009260:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800927c:	4313      	orrs	r3, r2
 800927e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	4b98      	ldr	r3, [pc, #608]	; (80094e8 <HAL_COMP_Init+0x2e0>)
 8009288:	4013      	ands	r3, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	6979      	ldr	r1, [r7, #20]
 8009290:	430b      	orrs	r3, r1
 8009292:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d015      	beq.n	80092ce <HAL_COMP_Init+0xc6>
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d112      	bne.n	80092ce <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80092a8:	4b90      	ldr	r3, [pc, #576]	; (80094ec <HAL_COMP_Init+0x2e4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	099b      	lsrs	r3, r3, #6
 80092ae:	4a90      	ldr	r2, [pc, #576]	; (80094f0 <HAL_COMP_Init+0x2e8>)
 80092b0:	fba2 2303 	umull	r2, r3, r2, r3
 80092b4:	099a      	lsrs	r2, r3, #6
 80092b6:	4613      	mov	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80092c0:	e002      	b.n	80092c8 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1f9      	bne.n	80092c2 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a88      	ldr	r2, [pc, #544]	; (80094f4 <HAL_COMP_Init+0x2ec>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d028      	beq.n	800932a <HAL_COMP_Init+0x122>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a86      	ldr	r2, [pc, #536]	; (80094f8 <HAL_COMP_Init+0x2f0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d020      	beq.n	8009324 <HAL_COMP_Init+0x11c>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a85      	ldr	r2, [pc, #532]	; (80094fc <HAL_COMP_Init+0x2f4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d018      	beq.n	800931e <HAL_COMP_Init+0x116>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a83      	ldr	r2, [pc, #524]	; (8009500 <HAL_COMP_Init+0x2f8>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d010      	beq.n	8009318 <HAL_COMP_Init+0x110>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a82      	ldr	r2, [pc, #520]	; (8009504 <HAL_COMP_Init+0x2fc>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d008      	beq.n	8009312 <HAL_COMP_Init+0x10a>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a80      	ldr	r2, [pc, #512]	; (8009508 <HAL_COMP_Init+0x300>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d101      	bne.n	800930e <HAL_COMP_Init+0x106>
 800930a:	2301      	movs	r3, #1
 800930c:	e00f      	b.n	800932e <HAL_COMP_Init+0x126>
 800930e:	2302      	movs	r3, #2
 8009310:	e00d      	b.n	800932e <HAL_COMP_Init+0x126>
 8009312:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009316:	e00a      	b.n	800932e <HAL_COMP_Init+0x126>
 8009318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800931c:	e007      	b.n	800932e <HAL_COMP_Init+0x126>
 800931e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009322:	e004      	b.n	800932e <HAL_COMP_Init+0x126>
 8009324:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009328:	e001      	b.n	800932e <HAL_COMP_Init+0x126>
 800932a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800932e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 80b6 	beq.w	80094aa <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	f003 0310 	and.w	r3, r3, #16
 8009346:	2b00      	cmp	r3, #0
 8009348:	d011      	beq.n	800936e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a6e      	ldr	r2, [pc, #440]	; (8009508 <HAL_COMP_Init+0x300>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d004      	beq.n	800935e <HAL_COMP_Init+0x156>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a6c      	ldr	r2, [pc, #432]	; (800950c <HAL_COMP_Init+0x304>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d103      	bne.n	8009366 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800935e:	6938      	ldr	r0, [r7, #16]
 8009360:	f7ff feac 	bl	80090bc <LL_EXTI_EnableRisingTrig_32_63>
 8009364:	e014      	b.n	8009390 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009366:	6938      	ldr	r0, [r7, #16]
 8009368:	f7ff fe96 	bl	8009098 <LL_EXTI_EnableRisingTrig_0_31>
 800936c:	e010      	b.n	8009390 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a65      	ldr	r2, [pc, #404]	; (8009508 <HAL_COMP_Init+0x300>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d004      	beq.n	8009382 <HAL_COMP_Init+0x17a>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a63      	ldr	r2, [pc, #396]	; (800950c <HAL_COMP_Init+0x304>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d103      	bne.n	800938a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009382:	6938      	ldr	r0, [r7, #16]
 8009384:	f7ff fec0 	bl	8009108 <LL_EXTI_DisableRisingTrig_32_63>
 8009388:	e002      	b.n	8009390 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800938a:	6938      	ldr	r0, [r7, #16]
 800938c:	f7ff fea8 	bl	80090e0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	d011      	beq.n	80093c0 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a59      	ldr	r2, [pc, #356]	; (8009508 <HAL_COMP_Init+0x300>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d004      	beq.n	80093b0 <HAL_COMP_Init+0x1a8>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a58      	ldr	r2, [pc, #352]	; (800950c <HAL_COMP_Init+0x304>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d103      	bne.n	80093b8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80093b0:	6938      	ldr	r0, [r7, #16]
 80093b2:	f7ff fecf 	bl	8009154 <LL_EXTI_EnableFallingTrig_32_63>
 80093b6:	e014      	b.n	80093e2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80093b8:	6938      	ldr	r0, [r7, #16]
 80093ba:	f7ff feb9 	bl	8009130 <LL_EXTI_EnableFallingTrig_0_31>
 80093be:	e010      	b.n	80093e2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a50      	ldr	r2, [pc, #320]	; (8009508 <HAL_COMP_Init+0x300>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d004      	beq.n	80093d4 <HAL_COMP_Init+0x1cc>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a4f      	ldr	r2, [pc, #316]	; (800950c <HAL_COMP_Init+0x304>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d103      	bne.n	80093dc <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80093d4:	6938      	ldr	r0, [r7, #16]
 80093d6:	f7ff fee3 	bl	80091a0 <LL_EXTI_DisableFallingTrig_32_63>
 80093da:	e002      	b.n	80093e2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80093dc:	6938      	ldr	r0, [r7, #16]
 80093de:	f7ff fecb 	bl	8009178 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a48      	ldr	r2, [pc, #288]	; (8009508 <HAL_COMP_Init+0x300>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d004      	beq.n	80093f6 <HAL_COMP_Init+0x1ee>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a46      	ldr	r2, [pc, #280]	; (800950c <HAL_COMP_Init+0x304>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d103      	bne.n	80093fe <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80093f6:	6938      	ldr	r0, [r7, #16]
 80093f8:	f7ff fef6 	bl	80091e8 <LL_EXTI_ClearFlag_32_63>
 80093fc:	e002      	b.n	8009404 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80093fe:	6938      	ldr	r0, [r7, #16]
 8009400:	f7ff fee2 	bl	80091c8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b00      	cmp	r3, #0
 800940e:	d011      	beq.n	8009434 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a3c      	ldr	r2, [pc, #240]	; (8009508 <HAL_COMP_Init+0x300>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d004      	beq.n	8009424 <HAL_COMP_Init+0x21c>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a3b      	ldr	r2, [pc, #236]	; (800950c <HAL_COMP_Init+0x304>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d103      	bne.n	800942c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009424:	6938      	ldr	r0, [r7, #16]
 8009426:	f7ff fdfd 	bl	8009024 <LL_EXTI_EnableEvent_32_63>
 800942a:	e014      	b.n	8009456 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800942c:	6938      	ldr	r0, [r7, #16]
 800942e:	f7ff fde7 	bl	8009000 <LL_EXTI_EnableEvent_0_31>
 8009432:	e010      	b.n	8009456 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a33      	ldr	r2, [pc, #204]	; (8009508 <HAL_COMP_Init+0x300>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d004      	beq.n	8009448 <HAL_COMP_Init+0x240>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a32      	ldr	r2, [pc, #200]	; (800950c <HAL_COMP_Init+0x304>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d103      	bne.n	8009450 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009448:	6938      	ldr	r0, [r7, #16]
 800944a:	f7ff fe11 	bl	8009070 <LL_EXTI_DisableEvent_32_63>
 800944e:	e002      	b.n	8009456 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009450:	6938      	ldr	r0, [r7, #16]
 8009452:	f7ff fdf9 	bl	8009048 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d011      	beq.n	8009486 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a28      	ldr	r2, [pc, #160]	; (8009508 <HAL_COMP_Init+0x300>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d004      	beq.n	8009476 <HAL_COMP_Init+0x26e>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a26      	ldr	r2, [pc, #152]	; (800950c <HAL_COMP_Init+0x304>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d103      	bne.n	800947e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009476:	6938      	ldr	r0, [r7, #16]
 8009478:	f7ff fd88 	bl	8008f8c <LL_EXTI_EnableIT_32_63>
 800947c:	e04b      	b.n	8009516 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800947e:	6938      	ldr	r0, [r7, #16]
 8009480:	f7ff fd72 	bl	8008f68 <LL_EXTI_EnableIT_0_31>
 8009484:	e047      	b.n	8009516 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a1f      	ldr	r2, [pc, #124]	; (8009508 <HAL_COMP_Init+0x300>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d004      	beq.n	800949a <HAL_COMP_Init+0x292>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a1d      	ldr	r2, [pc, #116]	; (800950c <HAL_COMP_Init+0x304>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d103      	bne.n	80094a2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800949a:	6938      	ldr	r0, [r7, #16]
 800949c:	f7ff fd9c 	bl	8008fd8 <LL_EXTI_DisableIT_32_63>
 80094a0:	e039      	b.n	8009516 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80094a2:	6938      	ldr	r0, [r7, #16]
 80094a4:	f7ff fd84 	bl	8008fb0 <LL_EXTI_DisableIT_0_31>
 80094a8:	e035      	b.n	8009516 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a16      	ldr	r2, [pc, #88]	; (8009508 <HAL_COMP_Init+0x300>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d004      	beq.n	80094be <HAL_COMP_Init+0x2b6>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a14      	ldr	r2, [pc, #80]	; (800950c <HAL_COMP_Init+0x304>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d103      	bne.n	80094c6 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80094be:	6938      	ldr	r0, [r7, #16]
 80094c0:	f7ff fdd6 	bl	8009070 <LL_EXTI_DisableEvent_32_63>
 80094c4:	e002      	b.n	80094cc <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80094c6:	6938      	ldr	r0, [r7, #16]
 80094c8:	f7ff fdbe 	bl	8009048 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a0d      	ldr	r2, [pc, #52]	; (8009508 <HAL_COMP_Init+0x300>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d004      	beq.n	80094e0 <HAL_COMP_Init+0x2d8>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a0c      	ldr	r2, [pc, #48]	; (800950c <HAL_COMP_Init+0x304>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d117      	bne.n	8009510 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80094e0:	6938      	ldr	r0, [r7, #16]
 80094e2:	f7ff fd79 	bl	8008fd8 <LL_EXTI_DisableIT_32_63>
 80094e6:	e016      	b.n	8009516 <HAL_COMP_Init+0x30e>
 80094e8:	ff007e0f 	.word	0xff007e0f
 80094ec:	20000c30 	.word	0x20000c30
 80094f0:	053e2d63 	.word	0x053e2d63
 80094f4:	40010200 	.word	0x40010200
 80094f8:	40010204 	.word	0x40010204
 80094fc:	40010208 	.word	0x40010208
 8009500:	4001020c 	.word	0x4001020c
 8009504:	40010210 	.word	0x40010210
 8009508:	40010214 	.word	0x40010214
 800950c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009510:	6938      	ldr	r0, [r7, #16]
 8009512:	f7ff fd4d 	bl	8008fb0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	7f5b      	ldrb	r3, [r3, #29]
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b00      	cmp	r3, #0
 800951e:	d102      	bne.n	8009526 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009526:	7ffb      	ldrb	r3, [r7, #31]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3720      	adds	r7, #32
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <__NVIC_SetPriorityGrouping>:
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009540:	4b0c      	ldr	r3, [pc, #48]	; (8009574 <__NVIC_SetPriorityGrouping+0x44>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800954c:	4013      	ands	r3, r2
 800954e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800955c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009562:	4a04      	ldr	r2, [pc, #16]	; (8009574 <__NVIC_SetPriorityGrouping+0x44>)
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	60d3      	str	r3, [r2, #12]
}
 8009568:	bf00      	nop
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	e000ed00 	.word	0xe000ed00

08009578 <__NVIC_GetPriorityGrouping>:
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800957c:	4b04      	ldr	r3, [pc, #16]	; (8009590 <__NVIC_GetPriorityGrouping+0x18>)
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	0a1b      	lsrs	r3, r3, #8
 8009582:	f003 0307 	and.w	r3, r3, #7
}
 8009586:	4618      	mov	r0, r3
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	e000ed00 	.word	0xe000ed00

08009594 <__NVIC_EnableIRQ>:
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800959e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	db0b      	blt.n	80095be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	f003 021f 	and.w	r2, r3, #31
 80095ac:	4907      	ldr	r1, [pc, #28]	; (80095cc <__NVIC_EnableIRQ+0x38>)
 80095ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095b2:	095b      	lsrs	r3, r3, #5
 80095b4:	2001      	movs	r0, #1
 80095b6:	fa00 f202 	lsl.w	r2, r0, r2
 80095ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	e000e100 	.word	0xe000e100

080095d0 <__NVIC_DisableIRQ>:
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	db10      	blt.n	8009604 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	f003 021f 	and.w	r2, r3, #31
 80095e8:	4909      	ldr	r1, [pc, #36]	; (8009610 <__NVIC_DisableIRQ+0x40>)
 80095ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ee:	095b      	lsrs	r3, r3, #5
 80095f0:	2001      	movs	r0, #1
 80095f2:	fa00 f202 	lsl.w	r2, r0, r2
 80095f6:	3320      	adds	r3, #32
 80095f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80095fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009600:	f3bf 8f6f 	isb	sy
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	e000e100 	.word	0xe000e100

08009614 <__NVIC_SetPriority>:
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009624:	2b00      	cmp	r3, #0
 8009626:	db0a      	blt.n	800963e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	b2da      	uxtb	r2, r3
 800962c:	490c      	ldr	r1, [pc, #48]	; (8009660 <__NVIC_SetPriority+0x4c>)
 800962e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009632:	0112      	lsls	r2, r2, #4
 8009634:	b2d2      	uxtb	r2, r2
 8009636:	440b      	add	r3, r1
 8009638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800963c:	e00a      	b.n	8009654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	b2da      	uxtb	r2, r3
 8009642:	4908      	ldr	r1, [pc, #32]	; (8009664 <__NVIC_SetPriority+0x50>)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	f003 030f 	and.w	r3, r3, #15
 800964a:	3b04      	subs	r3, #4
 800964c:	0112      	lsls	r2, r2, #4
 800964e:	b2d2      	uxtb	r2, r2
 8009650:	440b      	add	r3, r1
 8009652:	761a      	strb	r2, [r3, #24]
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	e000e100 	.word	0xe000e100
 8009664:	e000ed00 	.word	0xe000ed00

08009668 <NVIC_EncodePriority>:
{
 8009668:	b480      	push	{r7}
 800966a:	b089      	sub	sp, #36	; 0x24
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	f1c3 0307 	rsb	r3, r3, #7
 8009682:	2b04      	cmp	r3, #4
 8009684:	bf28      	it	cs
 8009686:	2304      	movcs	r3, #4
 8009688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	3304      	adds	r3, #4
 800968e:	2b06      	cmp	r3, #6
 8009690:	d902      	bls.n	8009698 <NVIC_EncodePriority+0x30>
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	3b03      	subs	r3, #3
 8009696:	e000      	b.n	800969a <NVIC_EncodePriority+0x32>
 8009698:	2300      	movs	r3, #0
 800969a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800969c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	fa02 f303 	lsl.w	r3, r2, r3
 80096a6:	43da      	mvns	r2, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	401a      	ands	r2, r3
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80096b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ba:	43d9      	mvns	r1, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096c0:	4313      	orrs	r3, r2
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3724      	adds	r7, #36	; 0x24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
	...

080096d0 <SysTick_Config>:
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	3b01      	subs	r3, #1
 80096dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096e0:	d301      	bcc.n	80096e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80096e2:	2301      	movs	r3, #1
 80096e4:	e00f      	b.n	8009706 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80096e6:	4a0a      	ldr	r2, [pc, #40]	; (8009710 <SysTick_Config+0x40>)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80096ee:	210f      	movs	r1, #15
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f4:	f7ff ff8e 	bl	8009614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <SysTick_Config+0x40>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80096fe:	4b04      	ldr	r3, [pc, #16]	; (8009710 <SysTick_Config+0x40>)
 8009700:	2207      	movs	r2, #7
 8009702:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	e000e010 	.word	0xe000e010

08009714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff ff07 	bl	8009530 <__NVIC_SetPriorityGrouping>
}
 8009722:	bf00      	nop
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b086      	sub	sp, #24
 800972e:	af00      	add	r7, sp, #0
 8009730:	4603      	mov	r3, r0
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009738:	f7ff ff1e 	bl	8009578 <__NVIC_GetPriorityGrouping>
 800973c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	6978      	ldr	r0, [r7, #20]
 8009744:	f7ff ff90 	bl	8009668 <NVIC_EncodePriority>
 8009748:	4602      	mov	r2, r0
 800974a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800974e:	4611      	mov	r1, r2
 8009750:	4618      	mov	r0, r3
 8009752:	f7ff ff5f 	bl	8009614 <__NVIC_SetPriority>
}
 8009756:	bf00      	nop
 8009758:	3718      	adds	r7, #24
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	4603      	mov	r3, r0
 8009766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff ff11 	bl	8009594 <__NVIC_EnableIRQ>
}
 8009772:	bf00      	nop
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	4603      	mov	r3, r0
 8009782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009788:	4618      	mov	r0, r3
 800978a:	f7ff ff21 	bl	80095d0 <__NVIC_DisableIRQ>
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff ff96 	bl	80096d0 <SysTick_Config>
 80097a4:	4603      	mov	r3, r0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e014      	b.n	80097ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	791b      	ldrb	r3, [r3, #4]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d105      	bne.n	80097d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7fc ffd1 	bl	8006778 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2202      	movs	r2, #2
 80097da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b082      	sub	sp, #8
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	795b      	ldrb	r3, [r3, #5]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <HAL_DAC_Start+0x16>
 8009804:	2302      	movs	r3, #2
 8009806:	e043      	b.n	8009890 <HAL_DAC_Start+0x9e>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2202      	movs	r2, #2
 8009812:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6819      	ldr	r1, [r3, #0]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	f003 0310 	and.w	r3, r3, #16
 8009820:	2201      	movs	r2, #1
 8009822:	409a      	lsls	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800982c:	2001      	movs	r0, #1
 800982e:	f7fe fb1d 	bl	8007e6c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10f      	bne.n	8009858 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009842:	2b02      	cmp	r3, #2
 8009844:	d11d      	bne.n	8009882 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0201 	orr.w	r2, r2, #1
 8009854:	605a      	str	r2, [r3, #4]
 8009856:	e014      	b.n	8009882 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	2102      	movs	r1, #2
 800986a:	fa01 f303 	lsl.w	r3, r1, r3
 800986e:	429a      	cmp	r2, r3
 8009870:	d107      	bne.n	8009882 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f042 0202 	orr.w	r2, r2, #2
 8009880:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	795b      	ldrb	r3, [r3, #5]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <HAL_DAC_Start_DMA+0x1e>
 80098b2:	2302      	movs	r3, #2
 80098b4:	e0a1      	b.n	80099fa <HAL_DAC_Start_DMA+0x162>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2202      	movs	r2, #2
 80098c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d12a      	bne.n	800991e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	4a4d      	ldr	r2, [pc, #308]	; (8009a04 <HAL_DAC_Start_DMA+0x16c>)
 80098ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	4a4c      	ldr	r2, [pc, #304]	; (8009a08 <HAL_DAC_Start_DMA+0x170>)
 80098d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	4a4b      	ldr	r2, [pc, #300]	; (8009a0c <HAL_DAC_Start_DMA+0x174>)
 80098de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	d009      	beq.n	800990a <HAL_DAC_Start_DMA+0x72>
 80098f6:	2b08      	cmp	r3, #8
 80098f8:	d00c      	beq.n	8009914 <HAL_DAC_Start_DMA+0x7c>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d000      	beq.n	8009900 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80098fe:	e039      	b.n	8009974 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3308      	adds	r3, #8
 8009906:	613b      	str	r3, [r7, #16]
        break;
 8009908:	e034      	b.n	8009974 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	330c      	adds	r3, #12
 8009910:	613b      	str	r3, [r7, #16]
        break;
 8009912:	e02f      	b.n	8009974 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3310      	adds	r3, #16
 800991a:	613b      	str	r3, [r7, #16]
        break;
 800991c:	e02a      	b.n	8009974 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	4a3b      	ldr	r2, [pc, #236]	; (8009a10 <HAL_DAC_Start_DMA+0x178>)
 8009924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	4a3a      	ldr	r2, [pc, #232]	; (8009a14 <HAL_DAC_Start_DMA+0x17c>)
 800992c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	4a39      	ldr	r2, [pc, #228]	; (8009a18 <HAL_DAC_Start_DMA+0x180>)
 8009934:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009944:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	2b04      	cmp	r3, #4
 800994a:	d009      	beq.n	8009960 <HAL_DAC_Start_DMA+0xc8>
 800994c:	2b08      	cmp	r3, #8
 800994e:	d00c      	beq.n	800996a <HAL_DAC_Start_DMA+0xd2>
 8009950:	2b00      	cmp	r3, #0
 8009952:	d000      	beq.n	8009956 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009954:	e00e      	b.n	8009974 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3314      	adds	r3, #20
 800995c:	613b      	str	r3, [r7, #16]
        break;
 800995e:	e009      	b.n	8009974 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3318      	adds	r3, #24
 8009966:	613b      	str	r3, [r7, #16]
        break;
 8009968:	e004      	b.n	8009974 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	331c      	adds	r3, #28
 8009970:	613b      	str	r3, [r7, #16]
        break;
 8009972:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d111      	bne.n	800999e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009988:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6898      	ldr	r0, [r3, #8]
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	f000 fbd2 	bl	800a13c <HAL_DMA_Start_IT>
 8009998:	4603      	mov	r3, r0
 800999a:	75fb      	strb	r3, [r7, #23]
 800999c:	e010      	b.n	80099c0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80099ac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	68d8      	ldr	r0, [r3, #12]
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	f000 fbc0 	bl	800a13c <HAL_DMA_Start_IT>
 80099bc:	4603      	mov	r3, r0
 80099be:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10f      	bne.n	80099ec <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6819      	ldr	r1, [r3, #0]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2201      	movs	r2, #1
 80099da:	409a      	lsls	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80099e4:	2001      	movs	r0, #1
 80099e6:	f7fe fa41 	bl	8007e6c <HAL_Delay>
 80099ea:	e005      	b.n	80099f8 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	f043 0204 	orr.w	r2, r3, #4
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	08009ed9 	.word	0x08009ed9
 8009a08:	08009efb 	.word	0x08009efb
 8009a0c:	08009f17 	.word	0x08009f17
 8009a10:	08009f81 	.word	0x08009f81
 8009a14:	08009fa3 	.word	0x08009fa3
 8009a18:	08009fbf 	.word	0x08009fbf

08009a1c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6819      	ldr	r1, [r3, #0]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	f003 0310 	and.w	r3, r3, #16
 8009a32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a36:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3a:	43da      	mvns	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	400a      	ands	r2, r1
 8009a42:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6819      	ldr	r1, [r3, #0]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	f003 0310 	and.w	r3, r3, #16
 8009a50:	2201      	movs	r2, #1
 8009a52:	fa02 f303 	lsl.w	r3, r2, r3
 8009a56:	43da      	mvns	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	400a      	ands	r2, r1
 8009a5e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009a60:	2001      	movs	r0, #1
 8009a62:	f7fe fa03 	bl	8007e6c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10f      	bne.n	8009a8c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fbde 	bl	800a232 <HAL_DMA_Abort>
 8009a76:	4603      	mov	r3, r0
 8009a78:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	e00e      	b.n	8009aaa <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fbce 	bl	800a232 <HAL_DMA_Abort>
 8009a96:	4603      	mov	r3, r0
 8009a98:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009aa8:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2204      	movs	r2, #4
 8009ab4:	711a      	strb	r2, [r3, #4]
 8009ab6:	e002      	b.n	8009abe <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d105      	bne.n	8009af8 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4413      	add	r3, r2
 8009af2:	3308      	adds	r3, #8
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e004      	b.n	8009b02 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4413      	add	r3, r2
 8009afe:	3314      	adds	r3, #20
 8009b00:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	461a      	mov	r2, r3
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	371c      	adds	r7, #28
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d103      	bne.n	8009b6c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	e002      	b.n	8009b72 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
	...

08009b80 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08a      	sub	sp, #40	; 0x28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	795b      	ldrb	r3, [r3, #5]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d101      	bne.n	8009b9c <HAL_DAC_ConfigChannel+0x1c>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e194      	b.n	8009ec6 <HAL_DAC_ConfigChannel+0x346>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d174      	bne.n	8009c9a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d137      	bne.n	8009c26 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8009bb6:	f7fe f94d 	bl	8007e54 <HAL_GetTick>
 8009bba:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009bbc:	e011      	b.n	8009be2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009bbe:	f7fe f949 	bl	8007e54 <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d90a      	bls.n	8009be2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f043 0208 	orr.w	r2, r3, #8
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2203      	movs	r2, #3
 8009bdc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e171      	b.n	8009ec6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1e6      	bne.n	8009bbe <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	f7fe f93b 	bl	8007e6c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8009c00:	e01e      	b.n	8009c40 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009c02:	f7fe f927 	bl	8007e54 <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d90a      	bls.n	8009c26 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	f043 0208 	orr.w	r2, r3, #8
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2203      	movs	r2, #3
 8009c20:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e14f      	b.n	8009ec6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	dbe8      	blt.n	8009c02 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009c30:	2001      	movs	r0, #1
 8009c32:	f7fe f91b 	bl	8007e6c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c3e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009c50:	fa01 f303 	lsl.w	r3, r1, r3
 8009c54:	43db      	mvns	r3, r3
 8009c56:	ea02 0103 	and.w	r1, r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	409a      	lsls	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f003 0310 	and.w	r3, r3, #16
 8009c7a:	21ff      	movs	r1, #255	; 0xff
 8009c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c80:	43db      	mvns	r3, r3
 8009c82:	ea02 0103 	and.w	r1, r2, r3
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f003 0310 	and.w	r3, r3, #16
 8009c90:	409a      	lsls	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d11d      	bne.n	8009cde <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	221f      	movs	r2, #31
 8009cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb6:	43db      	mvns	r3, r3
 8009cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cba:	4013      	ands	r3, r2
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f003 0310 	and.w	r3, r3, #16
 8009cca:	69ba      	ldr	r2, [r7, #24]
 8009ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cdc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f003 0310 	and.w	r3, r3, #16
 8009cec:	2207      	movs	r2, #7
 8009cee:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf2:	43db      	mvns	r3, r3
 8009cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	623b      	str	r3, [r7, #32]
 8009d0a:	e011      	b.n	8009d30 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	623b      	str	r3, [r7, #32]
 8009d1c:	e008      	b.n	8009d30 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009d26:	2301      	movs	r3, #1
 8009d28:	623b      	str	r3, [r7, #32]
 8009d2a:	e001      	b.n	8009d30 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	6a3a      	ldr	r2, [r7, #32]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f003 0310 	and.w	r3, r3, #16
 8009d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4e:	43db      	mvns	r3, r3
 8009d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d52:	4013      	ands	r3, r2
 8009d54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	791b      	ldrb	r3, [r3, #4]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d102      	bne.n	8009d64 <HAL_DAC_ConfigChannel+0x1e4>
 8009d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d62:	e000      	b.n	8009d66 <HAL_DAC_ConfigChannel+0x1e6>
 8009d64:	2300      	movs	r3, #0
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f003 0310 	and.w	r3, r3, #16
 8009d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d76:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7a:	43db      	mvns	r3, r3
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7e:	4013      	ands	r3, r2
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	795b      	ldrb	r3, [r3, #5]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d102      	bne.n	8009d90 <HAL_DAC_ConfigChannel+0x210>
 8009d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d8e:	e000      	b.n	8009d92 <HAL_DAC_ConfigChannel+0x212>
 8009d90:	2300      	movs	r3, #0
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d114      	bne.n	8009dd2 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009da8:	f001 fbc2 	bl	800b530 <HAL_RCC_GetHCLKFreq>
 8009dac:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	4a47      	ldr	r2, [pc, #284]	; (8009ed0 <HAL_DAC_ConfigChannel+0x350>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d904      	bls.n	8009dc0 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dbe:	e00d      	b.n	8009ddc <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	4a44      	ldr	r2, [pc, #272]	; (8009ed4 <HAL_DAC_ConfigChannel+0x354>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d909      	bls.n	8009ddc <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd0:	e004      	b.n	8009ddc <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f003 0310 	and.w	r3, r3, #16
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	fa02 f303 	lsl.w	r3, r2, r3
 8009de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dea:	4313      	orrs	r3, r2
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6819      	ldr	r1, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f003 0310 	and.w	r3, r3, #16
 8009e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e06:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0a:	43da      	mvns	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	400a      	ands	r2, r1
 8009e12:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f003 0310 	and.w	r3, r3, #16
 8009e22:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009e26:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2a:	43db      	mvns	r3, r3
 8009e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2e:	4013      	ands	r3, r2
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f003 0310 	and.w	r3, r3, #16
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	fa02 f303 	lsl.w	r3, r2, r3
 8009e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e46:	4313      	orrs	r3, r2
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e50:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6819      	ldr	r1, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f003 0310 	and.w	r3, r3, #16
 8009e5e:	22c0      	movs	r2, #192	; 0xc0
 8009e60:	fa02 f303 	lsl.w	r3, r2, r3
 8009e64:	43da      	mvns	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	400a      	ands	r2, r1
 8009e6c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	089b      	lsrs	r3, r3, #2
 8009e74:	f003 030f 	and.w	r3, r3, #15
 8009e78:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	089b      	lsrs	r3, r3, #2
 8009e80:	021b      	lsls	r3, r3, #8
 8009e82:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f003 0310 	and.w	r3, r3, #16
 8009e98:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	ea02 0103 	and.w	r1, r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f003 0310 	and.w	r3, r3, #16
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	409a      	lsls	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3728      	adds	r7, #40	; 0x28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	09896800 	.word	0x09896800
 8009ed4:	04c4b400 	.word	0x04c4b400

08009ed8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f7ff fe16 	bl	8009b18 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	711a      	strb	r2, [r3, #4]
}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f06:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f7ff fe0f 	bl	8009b2c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009f0e:	bf00      	nop
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	f043 0204 	orr.w	r2, r3, #4
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff fe05 	bl	8009b40 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	711a      	strb	r2, [r3, #4]
}
 8009f3c:	bf00      	nop
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff ffd8 	bl	8009f44 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2201      	movs	r2, #1
 8009f98:	711a      	strb	r2, [r3, #4]
}
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff ffd1 	bl	8009f58 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	f043 0204 	orr.w	r2, r3, #4
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff ffc7 	bl	8009f6c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	711a      	strb	r2, [r3, #4]
}
 8009fe4:	bf00      	nop
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e08d      	b.n	800a11a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	4b47      	ldr	r3, [pc, #284]	; (800a124 <HAL_DMA_Init+0x138>)
 800a006:	429a      	cmp	r2, r3
 800a008:	d80f      	bhi.n	800a02a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	4b45      	ldr	r3, [pc, #276]	; (800a128 <HAL_DMA_Init+0x13c>)
 800a012:	4413      	add	r3, r2
 800a014:	4a45      	ldr	r2, [pc, #276]	; (800a12c <HAL_DMA_Init+0x140>)
 800a016:	fba2 2303 	umull	r2, r3, r2, r3
 800a01a:	091b      	lsrs	r3, r3, #4
 800a01c:	009a      	lsls	r2, r3, #2
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a42      	ldr	r2, [pc, #264]	; (800a130 <HAL_DMA_Init+0x144>)
 800a026:	641a      	str	r2, [r3, #64]	; 0x40
 800a028:	e00e      	b.n	800a048 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	4b40      	ldr	r3, [pc, #256]	; (800a134 <HAL_DMA_Init+0x148>)
 800a032:	4413      	add	r3, r2
 800a034:	4a3d      	ldr	r2, [pc, #244]	; (800a12c <HAL_DMA_Init+0x140>)
 800a036:	fba2 2303 	umull	r2, r3, r2, r3
 800a03a:	091b      	lsrs	r3, r3, #4
 800a03c:	009a      	lsls	r2, r3, #2
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a3c      	ldr	r2, [pc, #240]	; (800a138 <HAL_DMA_Init+0x14c>)
 800a046:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a05e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a062:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a06c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa10 	bl	800a4c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a8:	d102      	bne.n	800a0b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0b8:	b2d2      	uxtb	r2, r2
 800a0ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a0c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d010      	beq.n	800a0f0 <HAL_DMA_Init+0x104>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	d80c      	bhi.n	800a0f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fa30 	bl	800a53c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a0ec:	605a      	str	r2, [r3, #4]
 800a0ee:	e008      	b.n	800a102 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	40020407 	.word	0x40020407
 800a128:	bffdfff8 	.word	0xbffdfff8
 800a12c:	cccccccd 	.word	0xcccccccd
 800a130:	40020000 	.word	0x40020000
 800a134:	bffdfbf8 	.word	0xbffdfbf8
 800a138:	40020400 	.word	0x40020400

0800a13c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
 800a148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a154:	2b01      	cmp	r3, #1
 800a156:	d101      	bne.n	800a15c <HAL_DMA_Start_IT+0x20>
 800a158:	2302      	movs	r3, #2
 800a15a:	e066      	b.n	800a22a <HAL_DMA_Start_IT+0xee>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d155      	bne.n	800a21c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2202      	movs	r2, #2
 800a174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f022 0201 	bic.w	r2, r2, #1
 800a18c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f954 	bl	800a442 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d008      	beq.n	800a1b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f042 020e 	orr.w	r2, r2, #14
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	e00f      	b.n	800a1d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f022 0204 	bic.w	r2, r2, #4
 800a1c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f042 020a 	orr.w	r2, r2, #10
 800a1d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d007      	beq.n	800a1f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d007      	beq.n	800a20a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a208:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f042 0201 	orr.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	e005      	b.n	800a228 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a224:	2302      	movs	r3, #2
 800a226:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a228:	7dfb      	ldrb	r3, [r7, #23]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a232:	b480      	push	{r7}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d005      	beq.n	800a256 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2204      	movs	r2, #4
 800a24e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	73fb      	strb	r3, [r7, #15]
 800a254:	e037      	b.n	800a2c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 020e 	bic.w	r2, r2, #14
 800a264:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a274:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 0201 	bic.w	r2, r2, #1
 800a284:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a28a:	f003 021f 	and.w	r2, r3, #31
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a292:	2101      	movs	r1, #1
 800a294:	fa01 f202 	lsl.w	r2, r1, r2
 800a298:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a2a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00c      	beq.n	800a2c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a2c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a300:	f003 031f 	and.w	r3, r3, #31
 800a304:	2204      	movs	r2, #4
 800a306:	409a      	lsls	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d026      	beq.n	800a35e <HAL_DMA_IRQHandler+0x7a>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f003 0304 	and.w	r3, r3, #4
 800a316:	2b00      	cmp	r3, #0
 800a318:	d021      	beq.n	800a35e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0320 	and.w	r3, r3, #32
 800a324:	2b00      	cmp	r3, #0
 800a326:	d107      	bne.n	800a338 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f022 0204 	bic.w	r2, r2, #4
 800a336:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33c:	f003 021f 	and.w	r2, r3, #31
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a344:	2104      	movs	r1, #4
 800a346:	fa01 f202 	lsl.w	r2, r1, r2
 800a34a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a350:	2b00      	cmp	r3, #0
 800a352:	d071      	beq.n	800a438 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a35c:	e06c      	b.n	800a438 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a362:	f003 031f 	and.w	r3, r3, #31
 800a366:	2202      	movs	r2, #2
 800a368:	409a      	lsls	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4013      	ands	r3, r2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d02e      	beq.n	800a3d0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f003 0302 	and.w	r3, r3, #2
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d029      	beq.n	800a3d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10b      	bne.n	800a3a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 020a 	bic.w	r2, r2, #10
 800a398:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a6:	f003 021f 	and.w	r2, r3, #31
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ae:	2102      	movs	r1, #2
 800a3b0:	fa01 f202 	lsl.w	r2, r1, r2
 800a3b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d038      	beq.n	800a438 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a3ce:	e033      	b.n	800a438 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d4:	f003 031f 	and.w	r3, r3, #31
 800a3d8:	2208      	movs	r2, #8
 800a3da:	409a      	lsls	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4013      	ands	r3, r2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d02a      	beq.n	800a43a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f003 0308 	and.w	r3, r3, #8
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d025      	beq.n	800a43a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 020e 	bic.w	r2, r2, #14
 800a3fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a402:	f003 021f 	and.w	r2, r3, #31
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40a:	2101      	movs	r1, #1
 800a40c:	fa01 f202 	lsl.w	r2, r1, r2
 800a410:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d004      	beq.n	800a43a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a438:	bf00      	nop
 800a43a:	bf00      	nop
}
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a442:	b480      	push	{r7}
 800a444:	b085      	sub	sp, #20
 800a446:	af00      	add	r7, sp, #0
 800a448:	60f8      	str	r0, [r7, #12]
 800a44a:	60b9      	str	r1, [r7, #8]
 800a44c:	607a      	str	r2, [r7, #4]
 800a44e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a458:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d004      	beq.n	800a46c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a46a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a470:	f003 021f 	and.w	r2, r3, #31
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a478:	2101      	movs	r1, #1
 800a47a:	fa01 f202 	lsl.w	r2, r1, r2
 800a47e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	2b10      	cmp	r3, #16
 800a48e:	d108      	bne.n	800a4a2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a4a0:	e007      	b.n	800a4b2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	60da      	str	r2, [r3, #12]
}
 800a4b2:	bf00      	nop
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
	...

0800a4c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	4b16      	ldr	r3, [pc, #88]	; (800a528 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d802      	bhi.n	800a4da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a4d4:	4b15      	ldr	r3, [pc, #84]	; (800a52c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	e001      	b.n	800a4de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a4da:	4b15      	ldr	r3, [pc, #84]	; (800a530 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a4dc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	3b08      	subs	r3, #8
 800a4ea:	4a12      	ldr	r2, [pc, #72]	; (800a534 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f0:	091b      	lsrs	r3, r3, #4
 800a4f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f8:	089b      	lsrs	r3, r3, #2
 800a4fa:	009a      	lsls	r2, r3, #2
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	4413      	add	r3, r2
 800a500:	461a      	mov	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a0b      	ldr	r2, [pc, #44]	; (800a538 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a50a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f003 031f 	and.w	r3, r3, #31
 800a512:	2201      	movs	r2, #1
 800a514:	409a      	lsls	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a51a:	bf00      	nop
 800a51c:	371c      	adds	r7, #28
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	40020407 	.word	0x40020407
 800a52c:	40020800 	.word	0x40020800
 800a530:	40020820 	.word	0x40020820
 800a534:	cccccccd 	.word	0xcccccccd
 800a538:	40020880 	.word	0x40020880

0800a53c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a550:	4413      	add	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	461a      	mov	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a08      	ldr	r2, [pc, #32]	; (800a580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a55e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	3b01      	subs	r3, #1
 800a564:	f003 031f 	and.w	r3, r3, #31
 800a568:	2201      	movs	r2, #1
 800a56a:	409a      	lsls	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a570:	bf00      	nop
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	1000823f 	.word	0x1000823f
 800a580:	40020940 	.word	0x40020940

0800a584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a58e:	2300      	movs	r3, #0
 800a590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a592:	e15a      	b.n	800a84a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	2101      	movs	r1, #1
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 814c 	beq.w	800a844 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d00b      	beq.n	800a5cc <HAL_GPIO_Init+0x48>
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d007      	beq.n	800a5cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a5c0:	2b11      	cmp	r3, #17
 800a5c2:	d003      	beq.n	800a5cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	2b12      	cmp	r3, #18
 800a5ca:	d130      	bne.n	800a62e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	005b      	lsls	r3, r3, #1
 800a5d6:	2203      	movs	r2, #3
 800a5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5dc:	43db      	mvns	r3, r3
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a602:	2201      	movs	r2, #1
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	fa02 f303 	lsl.w	r3, r2, r3
 800a60a:	43db      	mvns	r3, r3
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	4013      	ands	r3, r2
 800a610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	091b      	lsrs	r3, r3, #4
 800a618:	f003 0201 	and.w	r2, r3, #1
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	fa02 f303 	lsl.w	r3, r2, r3
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4313      	orrs	r3, r2
 800a626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	693a      	ldr	r2, [r7, #16]
 800a62c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	2203      	movs	r2, #3
 800a63a:	fa02 f303 	lsl.w	r3, r2, r3
 800a63e:	43db      	mvns	r3, r3
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	4013      	ands	r3, r2
 800a644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	fa02 f303 	lsl.w	r3, r2, r3
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	4313      	orrs	r3, r2
 800a656:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	2b02      	cmp	r3, #2
 800a664:	d003      	beq.n	800a66e <HAL_GPIO_Init+0xea>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	2b12      	cmp	r3, #18
 800a66c:	d123      	bne.n	800a6b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	08da      	lsrs	r2, r3, #3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3208      	adds	r2, #8
 800a676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a67a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f003 0307 	and.w	r3, r3, #7
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	220f      	movs	r2, #15
 800a686:	fa02 f303 	lsl.w	r3, r2, r3
 800a68a:	43db      	mvns	r3, r3
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	4013      	ands	r3, r2
 800a690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	691a      	ldr	r2, [r3, #16]
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	08da      	lsrs	r2, r3, #3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3208      	adds	r2, #8
 800a6b0:	6939      	ldr	r1, [r7, #16]
 800a6b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c6:	43db      	mvns	r3, r3
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f003 0203 	and.w	r2, r3, #3
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	005b      	lsls	r3, r3, #1
 800a6da:	fa02 f303 	lsl.w	r3, r2, r3
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 80a6 	beq.w	800a844 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6f8:	4b5b      	ldr	r3, [pc, #364]	; (800a868 <HAL_GPIO_Init+0x2e4>)
 800a6fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6fc:	4a5a      	ldr	r2, [pc, #360]	; (800a868 <HAL_GPIO_Init+0x2e4>)
 800a6fe:	f043 0301 	orr.w	r3, r3, #1
 800a702:	6613      	str	r3, [r2, #96]	; 0x60
 800a704:	4b58      	ldr	r3, [pc, #352]	; (800a868 <HAL_GPIO_Init+0x2e4>)
 800a706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	60bb      	str	r3, [r7, #8]
 800a70e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a710:	4a56      	ldr	r2, [pc, #344]	; (800a86c <HAL_GPIO_Init+0x2e8>)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	089b      	lsrs	r3, r3, #2
 800a716:	3302      	adds	r3, #2
 800a718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a71c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f003 0303 	and.w	r3, r3, #3
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	220f      	movs	r2, #15
 800a728:	fa02 f303 	lsl.w	r3, r2, r3
 800a72c:	43db      	mvns	r3, r3
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	4013      	ands	r3, r2
 800a732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a73a:	d01f      	beq.n	800a77c <HAL_GPIO_Init+0x1f8>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a4c      	ldr	r2, [pc, #304]	; (800a870 <HAL_GPIO_Init+0x2ec>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d019      	beq.n	800a778 <HAL_GPIO_Init+0x1f4>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a4b      	ldr	r2, [pc, #300]	; (800a874 <HAL_GPIO_Init+0x2f0>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d013      	beq.n	800a774 <HAL_GPIO_Init+0x1f0>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a4a      	ldr	r2, [pc, #296]	; (800a878 <HAL_GPIO_Init+0x2f4>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d00d      	beq.n	800a770 <HAL_GPIO_Init+0x1ec>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a49      	ldr	r2, [pc, #292]	; (800a87c <HAL_GPIO_Init+0x2f8>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d007      	beq.n	800a76c <HAL_GPIO_Init+0x1e8>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a48      	ldr	r2, [pc, #288]	; (800a880 <HAL_GPIO_Init+0x2fc>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d101      	bne.n	800a768 <HAL_GPIO_Init+0x1e4>
 800a764:	2305      	movs	r3, #5
 800a766:	e00a      	b.n	800a77e <HAL_GPIO_Init+0x1fa>
 800a768:	2306      	movs	r3, #6
 800a76a:	e008      	b.n	800a77e <HAL_GPIO_Init+0x1fa>
 800a76c:	2304      	movs	r3, #4
 800a76e:	e006      	b.n	800a77e <HAL_GPIO_Init+0x1fa>
 800a770:	2303      	movs	r3, #3
 800a772:	e004      	b.n	800a77e <HAL_GPIO_Init+0x1fa>
 800a774:	2302      	movs	r3, #2
 800a776:	e002      	b.n	800a77e <HAL_GPIO_Init+0x1fa>
 800a778:	2301      	movs	r3, #1
 800a77a:	e000      	b.n	800a77e <HAL_GPIO_Init+0x1fa>
 800a77c:	2300      	movs	r3, #0
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	f002 0203 	and.w	r2, r2, #3
 800a784:	0092      	lsls	r2, r2, #2
 800a786:	4093      	lsls	r3, r2
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a78e:	4937      	ldr	r1, [pc, #220]	; (800a86c <HAL_GPIO_Init+0x2e8>)
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	089b      	lsrs	r3, r3, #2
 800a794:	3302      	adds	r3, #2
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a79c:	4b39      	ldr	r3, [pc, #228]	; (800a884 <HAL_GPIO_Init+0x300>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	43db      	mvns	r3, r3
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d003      	beq.n	800a7c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a7c0:	4a30      	ldr	r2, [pc, #192]	; (800a884 <HAL_GPIO_Init+0x300>)
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a7c6:	4b2f      	ldr	r3, [pc, #188]	; (800a884 <HAL_GPIO_Init+0x300>)
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	43db      	mvns	r3, r3
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a7ea:	4a26      	ldr	r2, [pc, #152]	; (800a884 <HAL_GPIO_Init+0x300>)
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a7f0:	4b24      	ldr	r3, [pc, #144]	; (800a884 <HAL_GPIO_Init+0x300>)
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	43db      	mvns	r3, r3
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	4313      	orrs	r3, r2
 800a812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a814:	4a1b      	ldr	r2, [pc, #108]	; (800a884 <HAL_GPIO_Init+0x300>)
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a81a:	4b1a      	ldr	r3, [pc, #104]	; (800a884 <HAL_GPIO_Init+0x300>)
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	43db      	mvns	r3, r3
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	4013      	ands	r3, r2
 800a828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a83e:	4a11      	ldr	r2, [pc, #68]	; (800a884 <HAL_GPIO_Init+0x300>)
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	3301      	adds	r3, #1
 800a848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	fa22 f303 	lsr.w	r3, r2, r3
 800a854:	2b00      	cmp	r3, #0
 800a856:	f47f ae9d 	bne.w	800a594 <HAL_GPIO_Init+0x10>
  }
}
 800a85a:	bf00      	nop
 800a85c:	371c      	adds	r7, #28
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	40021000 	.word	0x40021000
 800a86c:	40010000 	.word	0x40010000
 800a870:	48000400 	.word	0x48000400
 800a874:	48000800 	.word	0x48000800
 800a878:	48000c00 	.word	0x48000c00
 800a87c:	48001000 	.word	0x48001000
 800a880:	48001400 	.word	0x48001400
 800a884:	40010400 	.word	0x40010400

0800a888 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a888:	b480      	push	{r7}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a892:	2300      	movs	r3, #0
 800a894:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a896:	e0bd      	b.n	800aa14 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a898:	2201      	movs	r2, #1
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 80b0 	beq.w	800aa0e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a8ae:	4a60      	ldr	r2, [pc, #384]	; (800aa30 <HAL_GPIO_DeInit+0x1a8>)
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	089b      	lsrs	r3, r3, #2
 800a8b4:	3302      	adds	r3, #2
 800a8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	220f      	movs	r2, #15
 800a8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a8d6:	d01f      	beq.n	800a918 <HAL_GPIO_DeInit+0x90>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a56      	ldr	r2, [pc, #344]	; (800aa34 <HAL_GPIO_DeInit+0x1ac>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d019      	beq.n	800a914 <HAL_GPIO_DeInit+0x8c>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a55      	ldr	r2, [pc, #340]	; (800aa38 <HAL_GPIO_DeInit+0x1b0>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d013      	beq.n	800a910 <HAL_GPIO_DeInit+0x88>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a54      	ldr	r2, [pc, #336]	; (800aa3c <HAL_GPIO_DeInit+0x1b4>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d00d      	beq.n	800a90c <HAL_GPIO_DeInit+0x84>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a53      	ldr	r2, [pc, #332]	; (800aa40 <HAL_GPIO_DeInit+0x1b8>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d007      	beq.n	800a908 <HAL_GPIO_DeInit+0x80>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a52      	ldr	r2, [pc, #328]	; (800aa44 <HAL_GPIO_DeInit+0x1bc>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d101      	bne.n	800a904 <HAL_GPIO_DeInit+0x7c>
 800a900:	2305      	movs	r3, #5
 800a902:	e00a      	b.n	800a91a <HAL_GPIO_DeInit+0x92>
 800a904:	2306      	movs	r3, #6
 800a906:	e008      	b.n	800a91a <HAL_GPIO_DeInit+0x92>
 800a908:	2304      	movs	r3, #4
 800a90a:	e006      	b.n	800a91a <HAL_GPIO_DeInit+0x92>
 800a90c:	2303      	movs	r3, #3
 800a90e:	e004      	b.n	800a91a <HAL_GPIO_DeInit+0x92>
 800a910:	2302      	movs	r3, #2
 800a912:	e002      	b.n	800a91a <HAL_GPIO_DeInit+0x92>
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <HAL_GPIO_DeInit+0x92>
 800a918:	2300      	movs	r3, #0
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	f002 0203 	and.w	r2, r2, #3
 800a920:	0092      	lsls	r2, r2, #2
 800a922:	4093      	lsls	r3, r2
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	429a      	cmp	r2, r3
 800a928:	d132      	bne.n	800a990 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a92a:	4b47      	ldr	r3, [pc, #284]	; (800aa48 <HAL_GPIO_DeInit+0x1c0>)
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	43db      	mvns	r3, r3
 800a932:	4945      	ldr	r1, [pc, #276]	; (800aa48 <HAL_GPIO_DeInit+0x1c0>)
 800a934:	4013      	ands	r3, r2
 800a936:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a938:	4b43      	ldr	r3, [pc, #268]	; (800aa48 <HAL_GPIO_DeInit+0x1c0>)
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	43db      	mvns	r3, r3
 800a940:	4941      	ldr	r1, [pc, #260]	; (800aa48 <HAL_GPIO_DeInit+0x1c0>)
 800a942:	4013      	ands	r3, r2
 800a944:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a946:	4b40      	ldr	r3, [pc, #256]	; (800aa48 <HAL_GPIO_DeInit+0x1c0>)
 800a948:	689a      	ldr	r2, [r3, #8]
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	43db      	mvns	r3, r3
 800a94e:	493e      	ldr	r1, [pc, #248]	; (800aa48 <HAL_GPIO_DeInit+0x1c0>)
 800a950:	4013      	ands	r3, r2
 800a952:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800a954:	4b3c      	ldr	r3, [pc, #240]	; (800aa48 <HAL_GPIO_DeInit+0x1c0>)
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	43db      	mvns	r3, r3
 800a95c:	493a      	ldr	r1, [pc, #232]	; (800aa48 <HAL_GPIO_DeInit+0x1c0>)
 800a95e:	4013      	ands	r3, r2
 800a960:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	220f      	movs	r2, #15
 800a96c:	fa02 f303 	lsl.w	r3, r2, r3
 800a970:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a972:	4a2f      	ldr	r2, [pc, #188]	; (800aa30 <HAL_GPIO_DeInit+0x1a8>)
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	089b      	lsrs	r3, r3, #2
 800a978:	3302      	adds	r3, #2
 800a97a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	43da      	mvns	r2, r3
 800a982:	482b      	ldr	r0, [pc, #172]	; (800aa30 <HAL_GPIO_DeInit+0x1a8>)
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	089b      	lsrs	r3, r3, #2
 800a988:	400a      	ands	r2, r1
 800a98a:	3302      	adds	r3, #2
 800a98c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	2103      	movs	r1, #3
 800a99a:	fa01 f303 	lsl.w	r3, r1, r3
 800a99e:	431a      	orrs	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	08da      	lsrs	r2, r3, #3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3208      	adds	r2, #8
 800a9ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f003 0307 	and.w	r3, r3, #7
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	220f      	movs	r2, #15
 800a9ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a9be:	43db      	mvns	r3, r3
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	08d2      	lsrs	r2, r2, #3
 800a9c4:	4019      	ands	r1, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3208      	adds	r2, #8
 800a9ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68da      	ldr	r2, [r3, #12]
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	2103      	movs	r1, #3
 800a9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9dc:	43db      	mvns	r3, r3
 800a9de:	401a      	ands	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	401a      	ands	r2, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	2103      	movs	r1, #3
 800aa02:	fa01 f303 	lsl.w	r3, r1, r3
 800aa06:	43db      	mvns	r3, r3
 800aa08:	401a      	ands	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	3301      	adds	r3, #1
 800aa12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f47f af3b 	bne.w	800a898 <HAL_GPIO_DeInit+0x10>
  }
}
 800aa22:	bf00      	nop
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	40010000 	.word	0x40010000
 800aa34:	48000400 	.word	0x48000400
 800aa38:	48000800 	.word	0x48000800
 800aa3c:	48000c00 	.word	0x48000c00
 800aa40:	48001000 	.word	0x48001000
 800aa44:	48001400 	.word	0x48001400
 800aa48:	40010400 	.word	0x40010400

0800aa4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	807b      	strh	r3, [r7, #2]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aa5c:	787b      	ldrb	r3, [r7, #1]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d003      	beq.n	800aa6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800aa62:	887a      	ldrh	r2, [r7, #2]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800aa68:	e002      	b.n	800aa70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800aa6a:	887a      	ldrh	r2, [r7, #2]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d141      	bne.n	800ab0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aa8a:	4b4b      	ldr	r3, [pc, #300]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa96:	d131      	bne.n	800aafc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aa98:	4b47      	ldr	r3, [pc, #284]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa9e:	4a46      	ldr	r2, [pc, #280]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aaa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aaa8:	4b43      	ldr	r3, [pc, #268]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aab0:	4a41      	ldr	r2, [pc, #260]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aab6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aab8:	4b40      	ldr	r3, [pc, #256]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2232      	movs	r2, #50	; 0x32
 800aabe:	fb02 f303 	mul.w	r3, r2, r3
 800aac2:	4a3f      	ldr	r2, [pc, #252]	; (800abc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800aac4:	fba2 2303 	umull	r2, r3, r2, r3
 800aac8:	0c9b      	lsrs	r3, r3, #18
 800aaca:	3301      	adds	r3, #1
 800aacc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aace:	e002      	b.n	800aad6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aad6:	4b38      	ldr	r3, [pc, #224]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aae2:	d102      	bne.n	800aaea <HAL_PWREx_ControlVoltageScaling+0x6e>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1f2      	bne.n	800aad0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800aaea:	4b33      	ldr	r3, [pc, #204]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaf6:	d158      	bne.n	800abaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e057      	b.n	800abac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aafc:	4b2e      	ldr	r3, [pc, #184]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab02:	4a2d      	ldr	r2, [pc, #180]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ab0c:	e04d      	b.n	800abaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab14:	d141      	bne.n	800ab9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab16:	4b28      	ldr	r3, [pc, #160]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab22:	d131      	bne.n	800ab88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab24:	4b24      	ldr	r3, [pc, #144]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab2a:	4a23      	ldr	r2, [pc, #140]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab34:	4b20      	ldr	r3, [pc, #128]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab3c:	4a1e      	ldr	r2, [pc, #120]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab44:	4b1d      	ldr	r3, [pc, #116]	; (800abbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2232      	movs	r2, #50	; 0x32
 800ab4a:	fb02 f303 	mul.w	r3, r2, r3
 800ab4e:	4a1c      	ldr	r2, [pc, #112]	; (800abc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ab50:	fba2 2303 	umull	r2, r3, r2, r3
 800ab54:	0c9b      	lsrs	r3, r3, #18
 800ab56:	3301      	adds	r3, #1
 800ab58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab5a:	e002      	b.n	800ab62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab62:	4b15      	ldr	r3, [pc, #84]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab6e:	d102      	bne.n	800ab76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1f2      	bne.n	800ab5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab76:	4b10      	ldr	r3, [pc, #64]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab82:	d112      	bne.n	800abaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e011      	b.n	800abac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab88:	4b0b      	ldr	r3, [pc, #44]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab8e:	4a0a      	ldr	r2, [pc, #40]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ab98:	e007      	b.n	800abaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ab9a:	4b07      	ldr	r3, [pc, #28]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aba2:	4a05      	ldr	r2, [pc, #20]	; (800abb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aba4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aba8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	40007000 	.word	0x40007000
 800abbc:	20000c30 	.word	0x20000c30
 800abc0:	431bde83 	.word	0x431bde83

0800abc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e308      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d075      	beq.n	800acce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abe2:	4ba3      	ldr	r3, [pc, #652]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 030c 	and.w	r3, r3, #12
 800abea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800abec:	4ba0      	ldr	r3, [pc, #640]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b0c      	cmp	r3, #12
 800abfa:	d102      	bne.n	800ac02 <HAL_RCC_OscConfig+0x3e>
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d002      	beq.n	800ac08 <HAL_RCC_OscConfig+0x44>
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	2b08      	cmp	r3, #8
 800ac06:	d10b      	bne.n	800ac20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac08:	4b99      	ldr	r3, [pc, #612]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d05b      	beq.n	800accc <HAL_RCC_OscConfig+0x108>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d157      	bne.n	800accc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e2e3      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac28:	d106      	bne.n	800ac38 <HAL_RCC_OscConfig+0x74>
 800ac2a:	4b91      	ldr	r3, [pc, #580]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a90      	ldr	r2, [pc, #576]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	e01d      	b.n	800ac74 <HAL_RCC_OscConfig+0xb0>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac40:	d10c      	bne.n	800ac5c <HAL_RCC_OscConfig+0x98>
 800ac42:	4b8b      	ldr	r3, [pc, #556]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a8a      	ldr	r2, [pc, #552]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	4b88      	ldr	r3, [pc, #544]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a87      	ldr	r2, [pc, #540]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	e00b      	b.n	800ac74 <HAL_RCC_OscConfig+0xb0>
 800ac5c:	4b84      	ldr	r3, [pc, #528]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a83      	ldr	r2, [pc, #524]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	4b81      	ldr	r3, [pc, #516]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a80      	ldr	r2, [pc, #512]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d013      	beq.n	800aca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac7c:	f7fd f8ea 	bl	8007e54 <HAL_GetTick>
 800ac80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac82:	e008      	b.n	800ac96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac84:	f7fd f8e6 	bl	8007e54 <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	2b64      	cmp	r3, #100	; 0x64
 800ac90:	d901      	bls.n	800ac96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	e2a8      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac96:	4b76      	ldr	r3, [pc, #472]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0f0      	beq.n	800ac84 <HAL_RCC_OscConfig+0xc0>
 800aca2:	e014      	b.n	800acce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aca4:	f7fd f8d6 	bl	8007e54 <HAL_GetTick>
 800aca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800acaa:	e008      	b.n	800acbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acac:	f7fd f8d2 	bl	8007e54 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b64      	cmp	r3, #100	; 0x64
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e294      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800acbe:	4b6c      	ldr	r3, [pc, #432]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1f0      	bne.n	800acac <HAL_RCC_OscConfig+0xe8>
 800acca:	e000      	b.n	800acce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800accc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d075      	beq.n	800adc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acda:	4b65      	ldr	r3, [pc, #404]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f003 030c 	and.w	r3, r3, #12
 800ace2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ace4:	4b62      	ldr	r3, [pc, #392]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b0c      	cmp	r3, #12
 800acf2:	d102      	bne.n	800acfa <HAL_RCC_OscConfig+0x136>
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d002      	beq.n	800ad00 <HAL_RCC_OscConfig+0x13c>
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b04      	cmp	r3, #4
 800acfe:	d11f      	bne.n	800ad40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad00:	4b5b      	ldr	r3, [pc, #364]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d005      	beq.n	800ad18 <HAL_RCC_OscConfig+0x154>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e267      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad18:	4b55      	ldr	r3, [pc, #340]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	061b      	lsls	r3, r3, #24
 800ad26:	4952      	ldr	r1, [pc, #328]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ad2c:	4b51      	ldr	r3, [pc, #324]	; (800ae74 <HAL_RCC_OscConfig+0x2b0>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fd f843 	bl	8007dbc <HAL_InitTick>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d043      	beq.n	800adc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e253      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d023      	beq.n	800ad90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad48:	4b49      	ldr	r3, [pc, #292]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a48      	ldr	r2, [pc, #288]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad54:	f7fd f87e 	bl	8007e54 <HAL_GetTick>
 800ad58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad5a:	e008      	b.n	800ad6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad5c:	f7fd f87a 	bl	8007e54 <HAL_GetTick>
 800ad60:	4602      	mov	r2, r0
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d901      	bls.n	800ad6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	e23c      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad6e:	4b40      	ldr	r3, [pc, #256]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d0f0      	beq.n	800ad5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad7a:	4b3d      	ldr	r3, [pc, #244]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	061b      	lsls	r3, r3, #24
 800ad88:	4939      	ldr	r1, [pc, #228]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	604b      	str	r3, [r1, #4]
 800ad8e:	e01a      	b.n	800adc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad90:	4b37      	ldr	r3, [pc, #220]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a36      	ldr	r2, [pc, #216]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad9c:	f7fd f85a 	bl	8007e54 <HAL_GetTick>
 800ada0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ada2:	e008      	b.n	800adb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ada4:	f7fd f856 	bl	8007e54 <HAL_GetTick>
 800ada8:	4602      	mov	r2, r0
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d901      	bls.n	800adb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e218      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800adb6:	4b2e      	ldr	r3, [pc, #184]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1f0      	bne.n	800ada4 <HAL_RCC_OscConfig+0x1e0>
 800adc2:	e000      	b.n	800adc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800adc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0308 	and.w	r3, r3, #8
 800adce:	2b00      	cmp	r3, #0
 800add0:	d03c      	beq.n	800ae4c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01c      	beq.n	800ae14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adda:	4b25      	ldr	r3, [pc, #148]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800addc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ade0:	4a23      	ldr	r2, [pc, #140]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ade2:	f043 0301 	orr.w	r3, r3, #1
 800ade6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adea:	f7fd f833 	bl	8007e54 <HAL_GetTick>
 800adee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800adf0:	e008      	b.n	800ae04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adf2:	f7fd f82f 	bl	8007e54 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d901      	bls.n	800ae04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e1f1      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ae04:	4b1a      	ldr	r3, [pc, #104]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d0ef      	beq.n	800adf2 <HAL_RCC_OscConfig+0x22e>
 800ae12:	e01b      	b.n	800ae4c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae14:	4b16      	ldr	r3, [pc, #88]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae1a:	4a15      	ldr	r2, [pc, #84]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae1c:	f023 0301 	bic.w	r3, r3, #1
 800ae20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae24:	f7fd f816 	bl	8007e54 <HAL_GetTick>
 800ae28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ae2a:	e008      	b.n	800ae3e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae2c:	f7fd f812 	bl	8007e54 <HAL_GetTick>
 800ae30:	4602      	mov	r2, r0
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d901      	bls.n	800ae3e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	e1d4      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ae3e:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae44:	f003 0302 	and.w	r3, r3, #2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1ef      	bne.n	800ae2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0304 	and.w	r3, r3, #4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 80ab 	beq.w	800afb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ae5e:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d106      	bne.n	800ae78 <HAL_RCC_OscConfig+0x2b4>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e005      	b.n	800ae7a <HAL_RCC_OscConfig+0x2b6>
 800ae6e:	bf00      	nop
 800ae70:	40021000 	.word	0x40021000
 800ae74:	20000c34 	.word	0x20000c34
 800ae78:	2300      	movs	r3, #0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00d      	beq.n	800ae9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae7e:	4baf      	ldr	r3, [pc, #700]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800ae80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae82:	4aae      	ldr	r2, [pc, #696]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800ae84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae88:	6593      	str	r3, [r2, #88]	; 0x58
 800ae8a:	4bac      	ldr	r3, [pc, #688]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800ae8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ae96:	2301      	movs	r3, #1
 800ae98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae9a:	4ba9      	ldr	r3, [pc, #676]	; (800b140 <HAL_RCC_OscConfig+0x57c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d118      	bne.n	800aed8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aea6:	4ba6      	ldr	r3, [pc, #664]	; (800b140 <HAL_RCC_OscConfig+0x57c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4aa5      	ldr	r2, [pc, #660]	; (800b140 <HAL_RCC_OscConfig+0x57c>)
 800aeac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aeb2:	f7fc ffcf 	bl	8007e54 <HAL_GetTick>
 800aeb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aeb8:	e008      	b.n	800aecc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aeba:	f7fc ffcb 	bl	8007e54 <HAL_GetTick>
 800aebe:	4602      	mov	r2, r0
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d901      	bls.n	800aecc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800aec8:	2303      	movs	r3, #3
 800aeca:	e18d      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aecc:	4b9c      	ldr	r3, [pc, #624]	; (800b140 <HAL_RCC_OscConfig+0x57c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d0f0      	beq.n	800aeba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d108      	bne.n	800aef2 <HAL_RCC_OscConfig+0x32e>
 800aee0:	4b96      	ldr	r3, [pc, #600]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800aee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aee6:	4a95      	ldr	r2, [pc, #596]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800aee8:	f043 0301 	orr.w	r3, r3, #1
 800aeec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aef0:	e024      	b.n	800af3c <HAL_RCC_OscConfig+0x378>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	2b05      	cmp	r3, #5
 800aef8:	d110      	bne.n	800af1c <HAL_RCC_OscConfig+0x358>
 800aefa:	4b90      	ldr	r3, [pc, #576]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800aefc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af00:	4a8e      	ldr	r2, [pc, #568]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800af02:	f043 0304 	orr.w	r3, r3, #4
 800af06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af0a:	4b8c      	ldr	r3, [pc, #560]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800af0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af10:	4a8a      	ldr	r2, [pc, #552]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800af12:	f043 0301 	orr.w	r3, r3, #1
 800af16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af1a:	e00f      	b.n	800af3c <HAL_RCC_OscConfig+0x378>
 800af1c:	4b87      	ldr	r3, [pc, #540]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800af1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af22:	4a86      	ldr	r2, [pc, #536]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800af24:	f023 0301 	bic.w	r3, r3, #1
 800af28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af2c:	4b83      	ldr	r3, [pc, #524]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800af2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af32:	4a82      	ldr	r2, [pc, #520]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800af34:	f023 0304 	bic.w	r3, r3, #4
 800af38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d016      	beq.n	800af72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af44:	f7fc ff86 	bl	8007e54 <HAL_GetTick>
 800af48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af4a:	e00a      	b.n	800af62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af4c:	f7fc ff82 	bl	8007e54 <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	f241 3288 	movw	r2, #5000	; 0x1388
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d901      	bls.n	800af62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	e142      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af62:	4b76      	ldr	r3, [pc, #472]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800af64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af68:	f003 0302 	and.w	r3, r3, #2
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d0ed      	beq.n	800af4c <HAL_RCC_OscConfig+0x388>
 800af70:	e015      	b.n	800af9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af72:	f7fc ff6f 	bl	8007e54 <HAL_GetTick>
 800af76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af78:	e00a      	b.n	800af90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af7a:	f7fc ff6b 	bl	8007e54 <HAL_GetTick>
 800af7e:	4602      	mov	r2, r0
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	f241 3288 	movw	r2, #5000	; 0x1388
 800af88:	4293      	cmp	r3, r2
 800af8a:	d901      	bls.n	800af90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e12b      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af90:	4b6a      	ldr	r3, [pc, #424]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800af92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af96:	f003 0302 	and.w	r3, r3, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1ed      	bne.n	800af7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800af9e:	7ffb      	ldrb	r3, [r7, #31]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d105      	bne.n	800afb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afa4:	4b65      	ldr	r3, [pc, #404]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800afa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa8:	4a64      	ldr	r2, [pc, #400]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800afaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 0320 	and.w	r3, r3, #32
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d03c      	beq.n	800b036 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d01c      	beq.n	800affe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800afc4:	4b5d      	ldr	r3, [pc, #372]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800afc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afca:	4a5c      	ldr	r2, [pc, #368]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800afcc:	f043 0301 	orr.w	r3, r3, #1
 800afd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afd4:	f7fc ff3e 	bl	8007e54 <HAL_GetTick>
 800afd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800afda:	e008      	b.n	800afee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afdc:	f7fc ff3a 	bl	8007e54 <HAL_GetTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d901      	bls.n	800afee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e0fc      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800afee:	4b53      	ldr	r3, [pc, #332]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800aff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0ef      	beq.n	800afdc <HAL_RCC_OscConfig+0x418>
 800affc:	e01b      	b.n	800b036 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800affe:	4b4f      	ldr	r3, [pc, #316]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b004:	4a4d      	ldr	r2, [pc, #308]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b006:	f023 0301 	bic.w	r3, r3, #1
 800b00a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b00e:	f7fc ff21 	bl	8007e54 <HAL_GetTick>
 800b012:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b014:	e008      	b.n	800b028 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b016:	f7fc ff1d 	bl	8007e54 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	2b02      	cmp	r3, #2
 800b022:	d901      	bls.n	800b028 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e0df      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b028:	4b44      	ldr	r3, [pc, #272]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b02a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b02e:	f003 0302 	and.w	r3, r3, #2
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1ef      	bne.n	800b016 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	69db      	ldr	r3, [r3, #28]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 80d3 	beq.w	800b1e6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b040:	4b3e      	ldr	r3, [pc, #248]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	f003 030c 	and.w	r3, r3, #12
 800b048:	2b0c      	cmp	r3, #12
 800b04a:	f000 808d 	beq.w	800b168 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	2b02      	cmp	r3, #2
 800b054:	d15a      	bne.n	800b10c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b056:	4b39      	ldr	r3, [pc, #228]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a38      	ldr	r2, [pc, #224]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b05c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b062:	f7fc fef7 	bl	8007e54 <HAL_GetTick>
 800b066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b068:	e008      	b.n	800b07c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b06a:	f7fc fef3 	bl	8007e54 <HAL_GetTick>
 800b06e:	4602      	mov	r2, r0
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	2b02      	cmp	r3, #2
 800b076:	d901      	bls.n	800b07c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e0b5      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b07c:	4b2f      	ldr	r3, [pc, #188]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1f0      	bne.n	800b06a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b088:	4b2c      	ldr	r3, [pc, #176]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b08a:	68da      	ldr	r2, [r3, #12]
 800b08c:	4b2d      	ldr	r3, [pc, #180]	; (800b144 <HAL_RCC_OscConfig+0x580>)
 800b08e:	4013      	ands	r3, r2
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	6a11      	ldr	r1, [r2, #32]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b098:	3a01      	subs	r2, #1
 800b09a:	0112      	lsls	r2, r2, #4
 800b09c:	4311      	orrs	r1, r2
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b0a2:	0212      	lsls	r2, r2, #8
 800b0a4:	4311      	orrs	r1, r2
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b0aa:	0852      	lsrs	r2, r2, #1
 800b0ac:	3a01      	subs	r2, #1
 800b0ae:	0552      	lsls	r2, r2, #21
 800b0b0:	4311      	orrs	r1, r2
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b0b6:	0852      	lsrs	r2, r2, #1
 800b0b8:	3a01      	subs	r2, #1
 800b0ba:	0652      	lsls	r2, r2, #25
 800b0bc:	4311      	orrs	r1, r2
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b0c2:	06d2      	lsls	r2, r2, #27
 800b0c4:	430a      	orrs	r2, r1
 800b0c6:	491d      	ldr	r1, [pc, #116]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0cc:	4b1b      	ldr	r3, [pc, #108]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a1a      	ldr	r2, [pc, #104]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b0d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b0d8:	4b18      	ldr	r3, [pc, #96]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	4a17      	ldr	r2, [pc, #92]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b0de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0e4:	f7fc feb6 	bl	8007e54 <HAL_GetTick>
 800b0e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0ea:	e008      	b.n	800b0fe <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0ec:	f7fc feb2 	bl	8007e54 <HAL_GetTick>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d901      	bls.n	800b0fe <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e074      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0f0      	beq.n	800b0ec <HAL_RCC_OscConfig+0x528>
 800b10a:	e06c      	b.n	800b1e6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b10c:	4b0b      	ldr	r3, [pc, #44]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a0a      	ldr	r2, [pc, #40]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b116:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b118:	4b08      	ldr	r3, [pc, #32]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	4a07      	ldr	r2, [pc, #28]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b11e:	f023 0303 	bic.w	r3, r3, #3
 800b122:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	4a04      	ldr	r2, [pc, #16]	; (800b13c <HAL_RCC_OscConfig+0x578>)
 800b12a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b12e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b132:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b134:	f7fc fe8e 	bl	8007e54 <HAL_GetTick>
 800b138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b13a:	e00e      	b.n	800b15a <HAL_RCC_OscConfig+0x596>
 800b13c:	40021000 	.word	0x40021000
 800b140:	40007000 	.word	0x40007000
 800b144:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b148:	f7fc fe84 	bl	8007e54 <HAL_GetTick>
 800b14c:	4602      	mov	r2, r0
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	2b02      	cmp	r3, #2
 800b154:	d901      	bls.n	800b15a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b156:	2303      	movs	r3, #3
 800b158:	e046      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b15a:	4b25      	ldr	r3, [pc, #148]	; (800b1f0 <HAL_RCC_OscConfig+0x62c>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1f0      	bne.n	800b148 <HAL_RCC_OscConfig+0x584>
 800b166:	e03e      	b.n	800b1e6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	69db      	ldr	r3, [r3, #28]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d101      	bne.n	800b174 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e039      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b174:	4b1e      	ldr	r3, [pc, #120]	; (800b1f0 <HAL_RCC_OscConfig+0x62c>)
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f003 0203 	and.w	r2, r3, #3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a1b      	ldr	r3, [r3, #32]
 800b184:	429a      	cmp	r2, r3
 800b186:	d12c      	bne.n	800b1e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	3b01      	subs	r3, #1
 800b194:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b196:	429a      	cmp	r2, r3
 800b198:	d123      	bne.n	800b1e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d11b      	bne.n	800b1e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d113      	bne.n	800b1e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c4:	085b      	lsrs	r3, r3, #1
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d109      	bne.n	800b1e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d8:	085b      	lsrs	r3, r3, #1
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d001      	beq.n	800b1e6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e000      	b.n	800b1e8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3720      	adds	r7, #32
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	40021000 	.word	0x40021000

0800b1f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d101      	bne.n	800b20c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e11e      	b.n	800b44a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b20c:	4b91      	ldr	r3, [pc, #580]	; (800b454 <HAL_RCC_ClockConfig+0x260>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 030f 	and.w	r3, r3, #15
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d910      	bls.n	800b23c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b21a:	4b8e      	ldr	r3, [pc, #568]	; (800b454 <HAL_RCC_ClockConfig+0x260>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f023 020f 	bic.w	r2, r3, #15
 800b222:	498c      	ldr	r1, [pc, #560]	; (800b454 <HAL_RCC_ClockConfig+0x260>)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	4313      	orrs	r3, r2
 800b228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b22a:	4b8a      	ldr	r3, [pc, #552]	; (800b454 <HAL_RCC_ClockConfig+0x260>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 030f 	and.w	r3, r3, #15
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d001      	beq.n	800b23c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e106      	b.n	800b44a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	2b00      	cmp	r3, #0
 800b246:	d073      	beq.n	800b330 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d129      	bne.n	800b2a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b250:	4b81      	ldr	r3, [pc, #516]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e0f4      	b.n	800b44a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b260:	f000 f972 	bl	800b548 <RCC_GetSysClockFreqFromPLLSource>
 800b264:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	4a7c      	ldr	r2, [pc, #496]	; (800b45c <HAL_RCC_ClockConfig+0x268>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d93f      	bls.n	800b2ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b26e:	4b7a      	ldr	r3, [pc, #488]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d009      	beq.n	800b28e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b282:	2b00      	cmp	r3, #0
 800b284:	d033      	beq.n	800b2ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d12f      	bne.n	800b2ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b28e:	4b72      	ldr	r3, [pc, #456]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b296:	4a70      	ldr	r2, [pc, #448]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b29c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b29e:	2380      	movs	r3, #128	; 0x80
 800b2a0:	617b      	str	r3, [r7, #20]
 800b2a2:	e024      	b.n	800b2ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d107      	bne.n	800b2bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b2ac:	4b6a      	ldr	r3, [pc, #424]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d109      	bne.n	800b2cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e0c6      	b.n	800b44a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b2bc:	4b66      	ldr	r3, [pc, #408]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e0be      	b.n	800b44a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b2cc:	f000 f8ce 	bl	800b46c <HAL_RCC_GetSysClockFreq>
 800b2d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	4a61      	ldr	r2, [pc, #388]	; (800b45c <HAL_RCC_ClockConfig+0x268>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d909      	bls.n	800b2ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b2da:	4b5f      	ldr	r3, [pc, #380]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2e2:	4a5d      	ldr	r2, [pc, #372]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b2ea:	2380      	movs	r3, #128	; 0x80
 800b2ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b2ee:	4b5a      	ldr	r3, [pc, #360]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	f023 0203 	bic.w	r2, r3, #3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	4957      	ldr	r1, [pc, #348]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b300:	f7fc fda8 	bl	8007e54 <HAL_GetTick>
 800b304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b306:	e00a      	b.n	800b31e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b308:	f7fc fda4 	bl	8007e54 <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	f241 3288 	movw	r2, #5000	; 0x1388
 800b316:	4293      	cmp	r3, r2
 800b318:	d901      	bls.n	800b31e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	e095      	b.n	800b44a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b31e:	4b4e      	ldr	r3, [pc, #312]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f003 020c 	and.w	r2, r3, #12
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d1eb      	bne.n	800b308 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f003 0302 	and.w	r3, r3, #2
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d023      	beq.n	800b384 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d005      	beq.n	800b354 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b348:	4b43      	ldr	r3, [pc, #268]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	4a42      	ldr	r2, [pc, #264]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b34e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b352:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 0308 	and.w	r3, r3, #8
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d007      	beq.n	800b370 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b360:	4b3d      	ldr	r3, [pc, #244]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b368:	4a3b      	ldr	r2, [pc, #236]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b36a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b36e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b370:	4b39      	ldr	r3, [pc, #228]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	4936      	ldr	r1, [pc, #216]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b37e:	4313      	orrs	r3, r2
 800b380:	608b      	str	r3, [r1, #8]
 800b382:	e008      	b.n	800b396 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2b80      	cmp	r3, #128	; 0x80
 800b388:	d105      	bne.n	800b396 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b38a:	4b33      	ldr	r3, [pc, #204]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	4a32      	ldr	r2, [pc, #200]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b394:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b396:	4b2f      	ldr	r3, [pc, #188]	; (800b454 <HAL_RCC_ClockConfig+0x260>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f003 030f 	and.w	r3, r3, #15
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d21d      	bcs.n	800b3e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3a4:	4b2b      	ldr	r3, [pc, #172]	; (800b454 <HAL_RCC_ClockConfig+0x260>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f023 020f 	bic.w	r2, r3, #15
 800b3ac:	4929      	ldr	r1, [pc, #164]	; (800b454 <HAL_RCC_ClockConfig+0x260>)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b3b4:	f7fc fd4e 	bl	8007e54 <HAL_GetTick>
 800b3b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3ba:	e00a      	b.n	800b3d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3bc:	f7fc fd4a 	bl	8007e54 <HAL_GetTick>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d901      	bls.n	800b3d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e03b      	b.n	800b44a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3d2:	4b20      	ldr	r3, [pc, #128]	; (800b454 <HAL_RCC_ClockConfig+0x260>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 030f 	and.w	r3, r3, #15
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d1ed      	bne.n	800b3bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0304 	and.w	r3, r3, #4
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d008      	beq.n	800b3fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3ec:	4b1a      	ldr	r3, [pc, #104]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	4917      	ldr	r1, [pc, #92]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 0308 	and.w	r3, r3, #8
 800b406:	2b00      	cmp	r3, #0
 800b408:	d009      	beq.n	800b41e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b40a:	4b13      	ldr	r3, [pc, #76]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	00db      	lsls	r3, r3, #3
 800b418:	490f      	ldr	r1, [pc, #60]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b41a:	4313      	orrs	r3, r2
 800b41c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b41e:	f000 f825 	bl	800b46c <HAL_RCC_GetSysClockFreq>
 800b422:	4601      	mov	r1, r0
 800b424:	4b0c      	ldr	r3, [pc, #48]	; (800b458 <HAL_RCC_ClockConfig+0x264>)
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	091b      	lsrs	r3, r3, #4
 800b42a:	f003 030f 	and.w	r3, r3, #15
 800b42e:	4a0c      	ldr	r2, [pc, #48]	; (800b460 <HAL_RCC_ClockConfig+0x26c>)
 800b430:	5cd3      	ldrb	r3, [r2, r3]
 800b432:	f003 031f 	and.w	r3, r3, #31
 800b436:	fa21 f303 	lsr.w	r3, r1, r3
 800b43a:	4a0a      	ldr	r2, [pc, #40]	; (800b464 <HAL_RCC_ClockConfig+0x270>)
 800b43c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b43e:	4b0a      	ldr	r3, [pc, #40]	; (800b468 <HAL_RCC_ClockConfig+0x274>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4618      	mov	r0, r3
 800b444:	f7fc fcba 	bl	8007dbc <HAL_InitTick>
 800b448:	4603      	mov	r3, r0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	40022000 	.word	0x40022000
 800b458:	40021000 	.word	0x40021000
 800b45c:	04c4b400 	.word	0x04c4b400
 800b460:	08013c80 	.word	0x08013c80
 800b464:	20000c30 	.word	0x20000c30
 800b468:	20000c34 	.word	0x20000c34

0800b46c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b087      	sub	sp, #28
 800b470:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b472:	4b2c      	ldr	r3, [pc, #176]	; (800b524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	f003 030c 	and.w	r3, r3, #12
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	d102      	bne.n	800b484 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b47e:	4b2a      	ldr	r3, [pc, #168]	; (800b528 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b480:	613b      	str	r3, [r7, #16]
 800b482:	e047      	b.n	800b514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b484:	4b27      	ldr	r3, [pc, #156]	; (800b524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	f003 030c 	and.w	r3, r3, #12
 800b48c:	2b08      	cmp	r3, #8
 800b48e:	d102      	bne.n	800b496 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b490:	4b26      	ldr	r3, [pc, #152]	; (800b52c <HAL_RCC_GetSysClockFreq+0xc0>)
 800b492:	613b      	str	r3, [r7, #16]
 800b494:	e03e      	b.n	800b514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b496:	4b23      	ldr	r3, [pc, #140]	; (800b524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f003 030c 	and.w	r3, r3, #12
 800b49e:	2b0c      	cmp	r3, #12
 800b4a0:	d136      	bne.n	800b510 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b4a2:	4b20      	ldr	r3, [pc, #128]	; (800b524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b4ac:	4b1d      	ldr	r3, [pc, #116]	; (800b524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	091b      	lsrs	r3, r3, #4
 800b4b2:	f003 030f 	and.w	r3, r3, #15
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d10c      	bne.n	800b4da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b4c0:	4a1a      	ldr	r2, [pc, #104]	; (800b52c <HAL_RCC_GetSysClockFreq+0xc0>)
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c8:	4a16      	ldr	r2, [pc, #88]	; (800b524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4ca:	68d2      	ldr	r2, [r2, #12]
 800b4cc:	0a12      	lsrs	r2, r2, #8
 800b4ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b4d2:	fb02 f303 	mul.w	r3, r2, r3
 800b4d6:	617b      	str	r3, [r7, #20]
      break;
 800b4d8:	e00c      	b.n	800b4f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b4da:	4a13      	ldr	r2, [pc, #76]	; (800b528 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e2:	4a10      	ldr	r2, [pc, #64]	; (800b524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4e4:	68d2      	ldr	r2, [r2, #12]
 800b4e6:	0a12      	lsrs	r2, r2, #8
 800b4e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b4ec:	fb02 f303 	mul.w	r3, r2, r3
 800b4f0:	617b      	str	r3, [r7, #20]
      break;
 800b4f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b4f4:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	0e5b      	lsrs	r3, r3, #25
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	3301      	adds	r3, #1
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	fbb2 f3f3 	udiv	r3, r2, r3
 800b50c:	613b      	str	r3, [r7, #16]
 800b50e:	e001      	b.n	800b514 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b510:	2300      	movs	r3, #0
 800b512:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b514:	693b      	ldr	r3, [r7, #16]
}
 800b516:	4618      	mov	r0, r3
 800b518:	371c      	adds	r7, #28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	40021000 	.word	0x40021000
 800b528:	00f42400 	.word	0x00f42400
 800b52c:	007a1200 	.word	0x007a1200

0800b530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b534:	4b03      	ldr	r3, [pc, #12]	; (800b544 <HAL_RCC_GetHCLKFreq+0x14>)
 800b536:	681b      	ldr	r3, [r3, #0]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	20000c30 	.word	0x20000c30

0800b548 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b54e:	4b1e      	ldr	r3, [pc, #120]	; (800b5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	f003 0303 	and.w	r3, r3, #3
 800b556:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b558:	4b1b      	ldr	r3, [pc, #108]	; (800b5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	091b      	lsrs	r3, r3, #4
 800b55e:	f003 030f 	and.w	r3, r3, #15
 800b562:	3301      	adds	r3, #1
 800b564:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d10c      	bne.n	800b586 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b56c:	4a17      	ldr	r2, [pc, #92]	; (800b5cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	fbb2 f3f3 	udiv	r3, r2, r3
 800b574:	4a14      	ldr	r2, [pc, #80]	; (800b5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b576:	68d2      	ldr	r2, [r2, #12]
 800b578:	0a12      	lsrs	r2, r2, #8
 800b57a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b57e:	fb02 f303 	mul.w	r3, r2, r3
 800b582:	617b      	str	r3, [r7, #20]
    break;
 800b584:	e00c      	b.n	800b5a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b586:	4a12      	ldr	r2, [pc, #72]	; (800b5d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b58e:	4a0e      	ldr	r2, [pc, #56]	; (800b5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b590:	68d2      	ldr	r2, [r2, #12]
 800b592:	0a12      	lsrs	r2, r2, #8
 800b594:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b598:	fb02 f303 	mul.w	r3, r2, r3
 800b59c:	617b      	str	r3, [r7, #20]
    break;
 800b59e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b5a0:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	0e5b      	lsrs	r3, r3, #25
 800b5a6:	f003 0303 	and.w	r3, r3, #3
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b5ba:	687b      	ldr	r3, [r7, #4]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	371c      	adds	r7, #28
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	40021000 	.word	0x40021000
 800b5cc:	007a1200 	.word	0x007a1200
 800b5d0:	00f42400 	.word	0x00f42400

0800b5d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5dc:	2300      	movs	r3, #0
 800b5de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 8098 	beq.w	800b722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5f6:	4b43      	ldr	r3, [pc, #268]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10d      	bne.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b602:	4b40      	ldr	r3, [pc, #256]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b606:	4a3f      	ldr	r2, [pc, #252]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b60c:	6593      	str	r3, [r2, #88]	; 0x58
 800b60e:	4b3d      	ldr	r3, [pc, #244]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b616:	60bb      	str	r3, [r7, #8]
 800b618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b61a:	2301      	movs	r3, #1
 800b61c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b61e:	4b3a      	ldr	r3, [pc, #232]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a39      	ldr	r2, [pc, #228]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b62a:	f7fc fc13 	bl	8007e54 <HAL_GetTick>
 800b62e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b630:	e009      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b632:	f7fc fc0f 	bl	8007e54 <HAL_GetTick>
 800b636:	4602      	mov	r2, r0
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d902      	bls.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b640:	2303      	movs	r3, #3
 800b642:	74fb      	strb	r3, [r7, #19]
        break;
 800b644:	e005      	b.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b646:	4b30      	ldr	r3, [pc, #192]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d0ef      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b652:	7cfb      	ldrb	r3, [r7, #19]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d159      	bne.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b658:	4b2a      	ldr	r3, [pc, #168]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b65e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b662:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d01e      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	429a      	cmp	r2, r3
 800b672:	d019      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b674:	4b23      	ldr	r3, [pc, #140]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b67a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b67e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b680:	4b20      	ldr	r3, [pc, #128]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b686:	4a1f      	ldr	r2, [pc, #124]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b68c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b690:	4b1c      	ldr	r3, [pc, #112]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b696:	4a1b      	ldr	r2, [pc, #108]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b69c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b6a0:	4a18      	ldr	r2, [pc, #96]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d016      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6b2:	f7fc fbcf 	bl	8007e54 <HAL_GetTick>
 800b6b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6b8:	e00b      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6ba:	f7fc fbcb 	bl	8007e54 <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d902      	bls.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	74fb      	strb	r3, [r7, #19]
            break;
 800b6d0:	e006      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6d2:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d8:	f003 0302 	and.w	r3, r3, #2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d0ec      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b6e0:	7cfb      	ldrb	r3, [r7, #19]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10b      	bne.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6e6:	4b07      	ldr	r3, [pc, #28]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6f4:	4903      	ldr	r1, [pc, #12]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b6fc:	e008      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b6fe:	7cfb      	ldrb	r3, [r7, #19]
 800b700:	74bb      	strb	r3, [r7, #18]
 800b702:	e005      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b704:	40021000 	.word	0x40021000
 800b708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b70c:	7cfb      	ldrb	r3, [r7, #19]
 800b70e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b710:	7c7b      	ldrb	r3, [r7, #17]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d105      	bne.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b716:	4baf      	ldr	r3, [pc, #700]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b71a:	4aae      	ldr	r2, [pc, #696]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b71c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b720:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00a      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b72e:	4ba9      	ldr	r3, [pc, #676]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b734:	f023 0203 	bic.w	r2, r3, #3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	49a5      	ldr	r1, [pc, #660]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b73e:	4313      	orrs	r3, r2
 800b740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0302 	and.w	r3, r3, #2
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00a      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b750:	4ba0      	ldr	r3, [pc, #640]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b756:	f023 020c 	bic.w	r2, r3, #12
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	499d      	ldr	r1, [pc, #628]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b760:	4313      	orrs	r3, r2
 800b762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0304 	and.w	r3, r3, #4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00a      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b772:	4b98      	ldr	r3, [pc, #608]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b778:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	4994      	ldr	r1, [pc, #592]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b782:	4313      	orrs	r3, r2
 800b784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 0308 	and.w	r3, r3, #8
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00a      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b794:	4b8f      	ldr	r3, [pc, #572]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b79a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	498c      	ldr	r1, [pc, #560]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0310 	and.w	r3, r3, #16
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00a      	beq.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b7b6:	4b87      	ldr	r3, [pc, #540]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	695b      	ldr	r3, [r3, #20]
 800b7c4:	4983      	ldr	r1, [pc, #524]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 0320 	and.w	r3, r3, #32
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00a      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b7d8:	4b7e      	ldr	r3, [pc, #504]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	497b      	ldr	r1, [pc, #492]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00a      	beq.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b7fa:	4b76      	ldr	r3, [pc, #472]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b800:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	69db      	ldr	r3, [r3, #28]
 800b808:	4972      	ldr	r1, [pc, #456]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b80a:	4313      	orrs	r3, r2
 800b80c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00a      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b81c:	4b6d      	ldr	r3, [pc, #436]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b822:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	496a      	ldr	r1, [pc, #424]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b82c:	4313      	orrs	r3, r2
 800b82e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00a      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b83e:	4b65      	ldr	r3, [pc, #404]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84c:	4961      	ldr	r1, [pc, #388]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b84e:	4313      	orrs	r3, r2
 800b850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00a      	beq.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b860:	4b5c      	ldr	r3, [pc, #368]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b866:	f023 0203 	bic.w	r2, r3, #3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86e:	4959      	ldr	r1, [pc, #356]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b870:	4313      	orrs	r3, r2
 800b872:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00a      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b882:	4b54      	ldr	r3, [pc, #336]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	4950      	ldr	r1, [pc, #320]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b892:	4313      	orrs	r3, r2
 800b894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d015      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b8a4:	4b4b      	ldr	r3, [pc, #300]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b2:	4948      	ldr	r1, [pc, #288]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8c2:	d105      	bne.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8c4:	4b43      	ldr	r3, [pc, #268]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	4a42      	ldr	r2, [pc, #264]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d015      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b8dc:	4b3d      	ldr	r3, [pc, #244]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ea:	493a      	ldr	r1, [pc, #232]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8fa:	d105      	bne.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8fc:	4b35      	ldr	r3, [pc, #212]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	4a34      	ldr	r2, [pc, #208]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b906:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d015      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b914:	4b2f      	ldr	r3, [pc, #188]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b91a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b922:	492c      	ldr	r1, [pc, #176]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b924:	4313      	orrs	r3, r2
 800b926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b932:	d105      	bne.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b934:	4b27      	ldr	r3, [pc, #156]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	4a26      	ldr	r2, [pc, #152]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b93a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b93e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d015      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b94c:	4b21      	ldr	r3, [pc, #132]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b95a:	491e      	ldr	r1, [pc, #120]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b95c:	4313      	orrs	r3, r2
 800b95e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b96a:	d105      	bne.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b96c:	4b19      	ldr	r3, [pc, #100]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	4a18      	ldr	r2, [pc, #96]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b976:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d015      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b984:	4b13      	ldr	r3, [pc, #76]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b98a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b992:	4910      	ldr	r1, [pc, #64]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b994:	4313      	orrs	r3, r2
 800b996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9a2:	d105      	bne.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b9a4:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	4a0a      	ldr	r2, [pc, #40]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d018      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b9bc:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ca:	4902      	ldr	r1, [pc, #8]	; (800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b9d2:	e001      	b.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b9d4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9e0:	d105      	bne.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b9e2:	4b21      	ldr	r3, [pc, #132]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	4a20      	ldr	r2, [pc, #128]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ec:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d015      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b9fa:	4b1b      	ldr	r3, [pc, #108]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba00:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba08:	4917      	ldr	r1, [pc, #92]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba18:	d105      	bne.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ba1a:	4b13      	ldr	r3, [pc, #76]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	4a12      	ldr	r2, [pc, #72]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba24:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d015      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ba32:	4b0d      	ldr	r3, [pc, #52]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba40:	4909      	ldr	r1, [pc, #36]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba42:	4313      	orrs	r3, r2
 800ba44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba50:	d105      	bne.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba52:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	4a04      	ldr	r2, [pc, #16]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba5c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ba5e:	7cbb      	ldrb	r3, [r7, #18]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	40021000 	.word	0x40021000

0800ba6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e084      	b.n	800bb88 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d106      	bne.n	800ba9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7fb fbfd 	bl	8007298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2202      	movs	r2, #2
 800baa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bab4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800babe:	d902      	bls.n	800bac6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bac0:	2300      	movs	r3, #0
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	e002      	b.n	800bacc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bad4:	d007      	beq.n	800bae6 <HAL_SPI_Init+0x7a>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bade:	d002      	beq.n	800bae6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10b      	bne.n	800bb06 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800baf6:	d903      	bls.n	800bb00 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2202      	movs	r2, #2
 800bafc:	631a      	str	r2, [r3, #48]	; 0x30
 800bafe:	e002      	b.n	800bb06 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	431a      	orrs	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	431a      	orrs	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	699b      	ldr	r3, [r3, #24]
 800bb20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a1b      	ldr	r3, [r3, #32]
 800bb30:	ea42 0103 	orr.w	r1, r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	430a      	orrs	r2, r1
 800bb3e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	0c1b      	lsrs	r3, r3, #16
 800bb46:	f003 0204 	and.w	r2, r3, #4
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb54:	431a      	orrs	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	ea42 0103 	orr.w	r1, r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	430a      	orrs	r2, r1
 800bb66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	69da      	ldr	r2, [r3, #28]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e049      	b.n	800bc36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d106      	bne.n	800bbbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7fc f802 	bl	8007bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4610      	mov	r0, r2
 800bbd0:	f000 fe9e 	bl	800c910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d001      	beq.n	800bc58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e019      	b.n	800bc8c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	689a      	ldr	r2, [r3, #8]
 800bc66:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <HAL_TIM_Base_Start+0x58>)
 800bc68:	4013      	ands	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2b06      	cmp	r3, #6
 800bc70:	d00b      	beq.n	800bc8a <HAL_TIM_Base_Start+0x4a>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc78:	d007      	beq.n	800bc8a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f042 0201 	orr.w	r2, r2, #1
 800bc88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	00010007 	.word	0x00010007

0800bc9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d001      	beq.n	800bcb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e021      	b.n	800bcf8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68da      	ldr	r2, [r3, #12]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f042 0201 	orr.w	r2, r2, #1
 800bcca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	689a      	ldr	r2, [r3, #8]
 800bcd2:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <HAL_TIM_Base_Start_IT+0x68>)
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2b06      	cmp	r3, #6
 800bcdc:	d00b      	beq.n	800bcf6 <HAL_TIM_Base_Start_IT+0x5a>
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bce4:	d007      	beq.n	800bcf6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f042 0201 	orr.w	r2, r2, #1
 800bcf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	00010007 	.word	0x00010007

0800bd08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68da      	ldr	r2, [r3, #12]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f022 0201 	bic.w	r2, r2, #1
 800bd1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6a1a      	ldr	r2, [r3, #32]
 800bd26:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10f      	bne.n	800bd50 <HAL_TIM_Base_Stop_IT+0x48>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6a1a      	ldr	r2, [r3, #32]
 800bd36:	f244 4344 	movw	r3, #17476	; 0x4444
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d107      	bne.n	800bd50 <HAL_TIM_Base_Stop_IT+0x48>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f022 0201 	bic.w	r2, r2, #1
 800bd4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b082      	sub	sp, #8
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	e049      	b.n	800be0c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d106      	bne.n	800bd92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f841 	bl	800be14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2202      	movs	r2, #2
 800bd96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	3304      	adds	r3, #4
 800bda2:	4619      	mov	r1, r3
 800bda4:	4610      	mov	r0, r2
 800bda6:	f000 fdb3 	bl	800c910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2201      	movs	r2, #1
 800bde6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d109      	bne.n	800be4c <HAL_TIM_PWM_Start+0x24>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	2b01      	cmp	r3, #1
 800be42:	bf14      	ite	ne
 800be44:	2301      	movne	r3, #1
 800be46:	2300      	moveq	r3, #0
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	e03c      	b.n	800bec6 <HAL_TIM_PWM_Start+0x9e>
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2b04      	cmp	r3, #4
 800be50:	d109      	bne.n	800be66 <HAL_TIM_PWM_Start+0x3e>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	bf14      	ite	ne
 800be5e:	2301      	movne	r3, #1
 800be60:	2300      	moveq	r3, #0
 800be62:	b2db      	uxtb	r3, r3
 800be64:	e02f      	b.n	800bec6 <HAL_TIM_PWM_Start+0x9e>
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2b08      	cmp	r3, #8
 800be6a:	d109      	bne.n	800be80 <HAL_TIM_PWM_Start+0x58>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b01      	cmp	r3, #1
 800be76:	bf14      	ite	ne
 800be78:	2301      	movne	r3, #1
 800be7a:	2300      	moveq	r3, #0
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	e022      	b.n	800bec6 <HAL_TIM_PWM_Start+0x9e>
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b0c      	cmp	r3, #12
 800be84:	d109      	bne.n	800be9a <HAL_TIM_PWM_Start+0x72>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b01      	cmp	r3, #1
 800be90:	bf14      	ite	ne
 800be92:	2301      	movne	r3, #1
 800be94:	2300      	moveq	r3, #0
 800be96:	b2db      	uxtb	r3, r3
 800be98:	e015      	b.n	800bec6 <HAL_TIM_PWM_Start+0x9e>
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b10      	cmp	r3, #16
 800be9e:	d109      	bne.n	800beb4 <HAL_TIM_PWM_Start+0x8c>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	bf14      	ite	ne
 800beac:	2301      	movne	r3, #1
 800beae:	2300      	moveq	r3, #0
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	e008      	b.n	800bec6 <HAL_TIM_PWM_Start+0x9e>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	bf14      	ite	ne
 800bec0:	2301      	movne	r3, #1
 800bec2:	2300      	moveq	r3, #0
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e073      	b.n	800bfb6 <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d104      	bne.n	800bede <HAL_TIM_PWM_Start+0xb6>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2202      	movs	r2, #2
 800bed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bedc:	e023      	b.n	800bf26 <HAL_TIM_PWM_Start+0xfe>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d104      	bne.n	800beee <HAL_TIM_PWM_Start+0xc6>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800beec:	e01b      	b.n	800bf26 <HAL_TIM_PWM_Start+0xfe>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2b08      	cmp	r3, #8
 800bef2:	d104      	bne.n	800befe <HAL_TIM_PWM_Start+0xd6>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2202      	movs	r2, #2
 800bef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800befc:	e013      	b.n	800bf26 <HAL_TIM_PWM_Start+0xfe>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b0c      	cmp	r3, #12
 800bf02:	d104      	bne.n	800bf0e <HAL_TIM_PWM_Start+0xe6>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2202      	movs	r2, #2
 800bf08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf0c:	e00b      	b.n	800bf26 <HAL_TIM_PWM_Start+0xfe>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b10      	cmp	r3, #16
 800bf12:	d104      	bne.n	800bf1e <HAL_TIM_PWM_Start+0xf6>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf1c:	e003      	b.n	800bf26 <HAL_TIM_PWM_Start+0xfe>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2202      	movs	r2, #2
 800bf22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f001 fa18 	bl	800d364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a21      	ldr	r2, [pc, #132]	; (800bfc0 <HAL_TIM_PWM_Start+0x198>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d018      	beq.n	800bf70 <HAL_TIM_PWM_Start+0x148>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a20      	ldr	r2, [pc, #128]	; (800bfc4 <HAL_TIM_PWM_Start+0x19c>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d013      	beq.n	800bf70 <HAL_TIM_PWM_Start+0x148>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a1e      	ldr	r2, [pc, #120]	; (800bfc8 <HAL_TIM_PWM_Start+0x1a0>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d00e      	beq.n	800bf70 <HAL_TIM_PWM_Start+0x148>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a1d      	ldr	r2, [pc, #116]	; (800bfcc <HAL_TIM_PWM_Start+0x1a4>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d009      	beq.n	800bf70 <HAL_TIM_PWM_Start+0x148>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a1b      	ldr	r2, [pc, #108]	; (800bfd0 <HAL_TIM_PWM_Start+0x1a8>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d004      	beq.n	800bf70 <HAL_TIM_PWM_Start+0x148>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a1a      	ldr	r2, [pc, #104]	; (800bfd4 <HAL_TIM_PWM_Start+0x1ac>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d101      	bne.n	800bf74 <HAL_TIM_PWM_Start+0x14c>
 800bf70:	2301      	movs	r3, #1
 800bf72:	e000      	b.n	800bf76 <HAL_TIM_PWM_Start+0x14e>
 800bf74:	2300      	movs	r3, #0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d007      	beq.n	800bf8a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	4b11      	ldr	r3, [pc, #68]	; (800bfd8 <HAL_TIM_PWM_Start+0x1b0>)
 800bf92:	4013      	ands	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b06      	cmp	r3, #6
 800bf9a:	d00b      	beq.n	800bfb4 <HAL_TIM_PWM_Start+0x18c>
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfa2:	d007      	beq.n	800bfb4 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f042 0201 	orr.w	r2, r2, #1
 800bfb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	40012c00 	.word	0x40012c00
 800bfc4:	40013400 	.word	0x40013400
 800bfc8:	40014000 	.word	0x40014000
 800bfcc:	40014400 	.word	0x40014400
 800bfd0:	40014800 	.word	0x40014800
 800bfd4:	40015000 	.word	0x40015000
 800bfd8:	00010007 	.word	0x00010007

0800bfdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d101      	bne.n	800bff0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e097      	b.n	800c120 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d106      	bne.n	800c00a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7fb fd8f 	bl	8007b28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2202      	movs	r2, #2
 800c00e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	6812      	ldr	r2, [r2, #0]
 800c01c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c020:	f023 0307 	bic.w	r3, r3, #7
 800c024:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	3304      	adds	r3, #4
 800c02e:	4619      	mov	r1, r3
 800c030:	4610      	mov	r0, r2
 800c032:	f000 fc6d 	bl	800c910 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	699b      	ldr	r3, [r3, #24]
 800c044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6a1b      	ldr	r3, [r3, #32]
 800c04c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	4313      	orrs	r3, r2
 800c056:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c05e:	f023 0303 	bic.w	r3, r3, #3
 800c062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	689a      	ldr	r2, [r3, #8]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	699b      	ldr	r3, [r3, #24]
 800c06c:	021b      	lsls	r3, r3, #8
 800c06e:	4313      	orrs	r3, r2
 800c070:	693a      	ldr	r2, [r7, #16]
 800c072:	4313      	orrs	r3, r2
 800c074:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c07c:	f023 030c 	bic.w	r3, r3, #12
 800c080:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c08c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	68da      	ldr	r2, [r3, #12]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	021b      	lsls	r3, r3, #8
 800c098:	4313      	orrs	r3, r2
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	011a      	lsls	r2, r3, #4
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	031b      	lsls	r3, r3, #12
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c0ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c0c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	685a      	ldr	r2, [r3, #4]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	011b      	lsls	r3, r3, #4
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2201      	movs	r2, #1
 800c11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3718      	adds	r7, #24
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d122      	bne.n	800c184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	f003 0302 	and.w	r3, r3, #2
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d11b      	bne.n	800c184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f06f 0202 	mvn.w	r2, #2
 800c154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	f003 0303 	and.w	r3, r3, #3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fbb2 	bl	800c8d4 <HAL_TIM_IC_CaptureCallback>
 800c170:	e005      	b.n	800c17e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fba4 	bl	800c8c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fbb5 	bl	800c8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	f003 0304 	and.w	r3, r3, #4
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d122      	bne.n	800c1d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	f003 0304 	and.w	r3, r3, #4
 800c19c:	2b04      	cmp	r3, #4
 800c19e:	d11b      	bne.n	800c1d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f06f 0204 	mvn.w	r2, #4
 800c1a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	699b      	ldr	r3, [r3, #24]
 800c1b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d003      	beq.n	800c1c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fb88 	bl	800c8d4 <HAL_TIM_IC_CaptureCallback>
 800c1c4:	e005      	b.n	800c1d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fb7a 	bl	800c8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fb8b 	bl	800c8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f003 0308 	and.w	r3, r3, #8
 800c1e2:	2b08      	cmp	r3, #8
 800c1e4:	d122      	bne.n	800c22c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	f003 0308 	and.w	r3, r3, #8
 800c1f0:	2b08      	cmp	r3, #8
 800c1f2:	d11b      	bne.n	800c22c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f06f 0208 	mvn.w	r2, #8
 800c1fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2204      	movs	r2, #4
 800c202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	f003 0303 	and.w	r3, r3, #3
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fb5e 	bl	800c8d4 <HAL_TIM_IC_CaptureCallback>
 800c218:	e005      	b.n	800c226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fb50 	bl	800c8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fb61 	bl	800c8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	f003 0310 	and.w	r3, r3, #16
 800c236:	2b10      	cmp	r3, #16
 800c238:	d122      	bne.n	800c280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	f003 0310 	and.w	r3, r3, #16
 800c244:	2b10      	cmp	r3, #16
 800c246:	d11b      	bne.n	800c280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f06f 0210 	mvn.w	r2, #16
 800c250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2208      	movs	r2, #8
 800c256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	69db      	ldr	r3, [r3, #28]
 800c25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c262:	2b00      	cmp	r3, #0
 800c264:	d003      	beq.n	800c26e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fb34 	bl	800c8d4 <HAL_TIM_IC_CaptureCallback>
 800c26c:	e005      	b.n	800c27a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fb26 	bl	800c8c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fb37 	bl	800c8e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d10e      	bne.n	800c2ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d107      	bne.n	800c2ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f06f 0201 	mvn.w	r2, #1
 800c2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fb00 	bl	800c8ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b6:	2b80      	cmp	r3, #128	; 0x80
 800c2b8:	d10e      	bne.n	800c2d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2c4:	2b80      	cmp	r3, #128	; 0x80
 800c2c6:	d107      	bne.n	800c2d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f001 f9be 	bl	800d654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2e6:	d10e      	bne.n	800c306 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f2:	2b80      	cmp	r3, #128	; 0x80
 800c2f4:	d107      	bne.n	800c306 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f001 f9b1 	bl	800d668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c310:	2b40      	cmp	r3, #64	; 0x40
 800c312:	d10e      	bne.n	800c332 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31e:	2b40      	cmp	r3, #64	; 0x40
 800c320:	d107      	bne.n	800c332 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fae5 	bl	800c8fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	f003 0320 	and.w	r3, r3, #32
 800c33c:	2b20      	cmp	r3, #32
 800c33e:	d10e      	bne.n	800c35e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	f003 0320 	and.w	r3, r3, #32
 800c34a:	2b20      	cmp	r3, #32
 800c34c:	d107      	bne.n	800c35e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f06f 0220 	mvn.w	r2, #32
 800c356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f001 f971 	bl	800d640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c36c:	d10f      	bne.n	800c38e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c37c:	d107      	bne.n	800c38e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 f977 	bl	800d67c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c39c:	d10f      	bne.n	800c3be <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3ac:	d107      	bne.n	800c3be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c3b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f001 f969 	bl	800d690 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3cc:	d10f      	bne.n	800c3ee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3dc:	d107      	bne.n	800c3ee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c3e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f001 f95b 	bl	800d6a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3fc:	d10f      	bne.n	800c41e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c40c:	d107      	bne.n	800c41e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f001 f94d 	bl	800d6b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d101      	bne.n	800c442 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c43e:	2302      	movs	r3, #2
 800c440:	e0fd      	b.n	800c63e <HAL_TIM_PWM_ConfigChannel+0x216>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2201      	movs	r2, #1
 800c446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2b14      	cmp	r3, #20
 800c44e:	f200 80f0 	bhi.w	800c632 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c452:	a201      	add	r2, pc, #4	; (adr r2, 800c458 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c458:	0800c4ad 	.word	0x0800c4ad
 800c45c:	0800c633 	.word	0x0800c633
 800c460:	0800c633 	.word	0x0800c633
 800c464:	0800c633 	.word	0x0800c633
 800c468:	0800c4ed 	.word	0x0800c4ed
 800c46c:	0800c633 	.word	0x0800c633
 800c470:	0800c633 	.word	0x0800c633
 800c474:	0800c633 	.word	0x0800c633
 800c478:	0800c52f 	.word	0x0800c52f
 800c47c:	0800c633 	.word	0x0800c633
 800c480:	0800c633 	.word	0x0800c633
 800c484:	0800c633 	.word	0x0800c633
 800c488:	0800c56f 	.word	0x0800c56f
 800c48c:	0800c633 	.word	0x0800c633
 800c490:	0800c633 	.word	0x0800c633
 800c494:	0800c633 	.word	0x0800c633
 800c498:	0800c5b1 	.word	0x0800c5b1
 800c49c:	0800c633 	.word	0x0800c633
 800c4a0:	0800c633 	.word	0x0800c633
 800c4a4:	0800c633 	.word	0x0800c633
 800c4a8:	0800c5f1 	.word	0x0800c5f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68b9      	ldr	r1, [r7, #8]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fad4 	bl	800ca60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	699a      	ldr	r2, [r3, #24]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f042 0208 	orr.w	r2, r2, #8
 800c4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	699a      	ldr	r2, [r3, #24]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f022 0204 	bic.w	r2, r2, #4
 800c4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6999      	ldr	r1, [r3, #24]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	691a      	ldr	r2, [r3, #16]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	619a      	str	r2, [r3, #24]
      break;
 800c4ea:	e0a3      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68b9      	ldr	r1, [r7, #8]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 fb4e 	bl	800cb94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	699a      	ldr	r2, [r3, #24]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	699a      	ldr	r2, [r3, #24]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6999      	ldr	r1, [r3, #24]
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	021a      	lsls	r2, r3, #8
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	430a      	orrs	r2, r1
 800c52a:	619a      	str	r2, [r3, #24]
      break;
 800c52c:	e082      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68b9      	ldr	r1, [r7, #8]
 800c534:	4618      	mov	r0, r3
 800c536:	f000 fbc1 	bl	800ccbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	69da      	ldr	r2, [r3, #28]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f042 0208 	orr.w	r2, r2, #8
 800c548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	69da      	ldr	r2, [r3, #28]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0204 	bic.w	r2, r2, #4
 800c558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	69d9      	ldr	r1, [r3, #28]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	691a      	ldr	r2, [r3, #16]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	430a      	orrs	r2, r1
 800c56a:	61da      	str	r2, [r3, #28]
      break;
 800c56c:	e062      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68b9      	ldr	r1, [r7, #8]
 800c574:	4618      	mov	r0, r3
 800c576:	f000 fc33 	bl	800cde0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	69da      	ldr	r2, [r3, #28]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	69da      	ldr	r2, [r3, #28]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	69d9      	ldr	r1, [r3, #28]
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	021a      	lsls	r2, r3, #8
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	61da      	str	r2, [r3, #28]
      break;
 800c5ae:	e041      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68b9      	ldr	r1, [r7, #8]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fca6 	bl	800cf08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f042 0208 	orr.w	r2, r2, #8
 800c5ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f022 0204 	bic.w	r2, r2, #4
 800c5da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	691a      	ldr	r2, [r3, #16]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	430a      	orrs	r2, r1
 800c5ec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c5ee:	e021      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68b9      	ldr	r1, [r7, #8]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 fcf0 	bl	800cfdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c60a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c61a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	021a      	lsls	r2, r3, #8
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	430a      	orrs	r2, r1
 800c62e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c630:	e000      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c632:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop

0800c648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d101      	bne.n	800c660 <HAL_TIM_ConfigClockSource+0x18>
 800c65c:	2302      	movs	r3, #2
 800c65e:	e0d2      	b.n	800c806 <HAL_TIM_ConfigClockSource+0x1be>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2202      	movs	r2, #2
 800c66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c67e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c682:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c68a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c69c:	f000 80a9 	beq.w	800c7f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6a4:	d81a      	bhi.n	800c6dc <HAL_TIM_ConfigClockSource+0x94>
 800c6a6:	2b30      	cmp	r3, #48	; 0x30
 800c6a8:	f000 809a 	beq.w	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
 800c6ac:	2b30      	cmp	r3, #48	; 0x30
 800c6ae:	d809      	bhi.n	800c6c4 <HAL_TIM_ConfigClockSource+0x7c>
 800c6b0:	2b10      	cmp	r3, #16
 800c6b2:	f000 8095 	beq.w	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
 800c6b6:	2b20      	cmp	r3, #32
 800c6b8:	f000 8092 	beq.w	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 808f 	beq.w	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c6c2:	e097      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6c4:	2b50      	cmp	r3, #80	; 0x50
 800c6c6:	d05b      	beq.n	800c780 <HAL_TIM_ConfigClockSource+0x138>
 800c6c8:	2b50      	cmp	r3, #80	; 0x50
 800c6ca:	d802      	bhi.n	800c6d2 <HAL_TIM_ConfigClockSource+0x8a>
 800c6cc:	2b40      	cmp	r3, #64	; 0x40
 800c6ce:	d077      	beq.n	800c7c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c6d0:	e090      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6d2:	2b60      	cmp	r3, #96	; 0x60
 800c6d4:	d064      	beq.n	800c7a0 <HAL_TIM_ConfigClockSource+0x158>
 800c6d6:	2b70      	cmp	r3, #112	; 0x70
 800c6d8:	d028      	beq.n	800c72c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c6da:	e08b      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6dc:	4a4c      	ldr	r2, [pc, #304]	; (800c810 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d07e      	beq.n	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
 800c6e2:	4a4b      	ldr	r2, [pc, #300]	; (800c810 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d810      	bhi.n	800c70a <HAL_TIM_ConfigClockSource+0xc2>
 800c6e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6ec:	d078      	beq.n	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
 800c6ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6f2:	d803      	bhi.n	800c6fc <HAL_TIM_ConfigClockSource+0xb4>
 800c6f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6f8:	d02f      	beq.n	800c75a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c6fa:	e07b      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c700:	d06e      	beq.n	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
 800c702:	4a44      	ldr	r2, [pc, #272]	; (800c814 <HAL_TIM_ConfigClockSource+0x1cc>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d06b      	beq.n	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c708:	e074      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c70a:	4a43      	ldr	r2, [pc, #268]	; (800c818 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d067      	beq.n	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
 800c710:	4a41      	ldr	r2, [pc, #260]	; (800c818 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d803      	bhi.n	800c71e <HAL_TIM_ConfigClockSource+0xd6>
 800c716:	4a41      	ldr	r2, [pc, #260]	; (800c81c <HAL_TIM_ConfigClockSource+0x1d4>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d061      	beq.n	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c71c:	e06a      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c71e:	4a40      	ldr	r2, [pc, #256]	; (800c820 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d05d      	beq.n	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
 800c724:	4a3f      	ldr	r2, [pc, #252]	; (800c824 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d05a      	beq.n	800c7e0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c72a:	e063      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6818      	ldr	r0, [r3, #0]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	6899      	ldr	r1, [r3, #8]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	685a      	ldr	r2, [r3, #4]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	f000 fdf2 	bl	800d324 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c74e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	609a      	str	r2, [r3, #8]
      break;
 800c758:	e04c      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	6899      	ldr	r1, [r3, #8]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	f000 fddb 	bl	800d324 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	689a      	ldr	r2, [r3, #8]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c77c:	609a      	str	r2, [r3, #8]
      break;
 800c77e:	e039      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6818      	ldr	r0, [r3, #0]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	6859      	ldr	r1, [r3, #4]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	461a      	mov	r2, r3
 800c78e:	f000 fd4d 	bl	800d22c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2150      	movs	r1, #80	; 0x50
 800c798:	4618      	mov	r0, r3
 800c79a:	f000 fda6 	bl	800d2ea <TIM_ITRx_SetConfig>
      break;
 800c79e:	e029      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6818      	ldr	r0, [r3, #0]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	6859      	ldr	r1, [r3, #4]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	f000 fd6c 	bl	800d28a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2160      	movs	r1, #96	; 0x60
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f000 fd96 	bl	800d2ea <TIM_ITRx_SetConfig>
      break;
 800c7be:	e019      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6818      	ldr	r0, [r3, #0]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	6859      	ldr	r1, [r3, #4]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	f000 fd2d 	bl	800d22c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2140      	movs	r1, #64	; 0x40
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 fd86 	bl	800d2ea <TIM_ITRx_SetConfig>
      break;
 800c7de:	e009      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	f000 fd7d 	bl	800d2ea <TIM_ITRx_SetConfig>
      break;
 800c7f0:	e000      	b.n	800c7f4 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c7f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	00100030 	.word	0x00100030
 800c814:	00100020 	.word	0x00100020
 800c818:	00100050 	.word	0x00100050
 800c81c:	00100040 	.word	0x00100040
 800c820:	00100060 	.word	0x00100060
 800c824:	00100070 	.word	0x00100070

0800c828 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d101      	bne.n	800c840 <HAL_TIM_SlaveConfigSynchro+0x18>
 800c83c:	2302      	movs	r3, #2
 800c83e:	e031      	b.n	800c8a4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2202      	movs	r2, #2
 800c84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fc2e 	bl	800d0b4 <TIM_SlaveTimer_SetConfig>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d009      	beq.n	800c872 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	e018      	b.n	800c8a4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68da      	ldr	r2, [r3, #12]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c880:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	68da      	ldr	r2, [r3, #12]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c890:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c8b4:	bf00      	nop
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8c8:	bf00      	nop
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c8f0:	bf00      	nop
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c910:	b480      	push	{r7}
 800c912:	b085      	sub	sp, #20
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4a46      	ldr	r2, [pc, #280]	; (800ca3c <TIM_Base_SetConfig+0x12c>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d017      	beq.n	800c958 <TIM_Base_SetConfig+0x48>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c92e:	d013      	beq.n	800c958 <TIM_Base_SetConfig+0x48>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a43      	ldr	r2, [pc, #268]	; (800ca40 <TIM_Base_SetConfig+0x130>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d00f      	beq.n	800c958 <TIM_Base_SetConfig+0x48>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a42      	ldr	r2, [pc, #264]	; (800ca44 <TIM_Base_SetConfig+0x134>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d00b      	beq.n	800c958 <TIM_Base_SetConfig+0x48>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a41      	ldr	r2, [pc, #260]	; (800ca48 <TIM_Base_SetConfig+0x138>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d007      	beq.n	800c958 <TIM_Base_SetConfig+0x48>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a40      	ldr	r2, [pc, #256]	; (800ca4c <TIM_Base_SetConfig+0x13c>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d003      	beq.n	800c958 <TIM_Base_SetConfig+0x48>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a3f      	ldr	r2, [pc, #252]	; (800ca50 <TIM_Base_SetConfig+0x140>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d108      	bne.n	800c96a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c95e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	4313      	orrs	r3, r2
 800c968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a33      	ldr	r2, [pc, #204]	; (800ca3c <TIM_Base_SetConfig+0x12c>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d023      	beq.n	800c9ba <TIM_Base_SetConfig+0xaa>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c978:	d01f      	beq.n	800c9ba <TIM_Base_SetConfig+0xaa>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a30      	ldr	r2, [pc, #192]	; (800ca40 <TIM_Base_SetConfig+0x130>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d01b      	beq.n	800c9ba <TIM_Base_SetConfig+0xaa>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a2f      	ldr	r2, [pc, #188]	; (800ca44 <TIM_Base_SetConfig+0x134>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d017      	beq.n	800c9ba <TIM_Base_SetConfig+0xaa>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a2e      	ldr	r2, [pc, #184]	; (800ca48 <TIM_Base_SetConfig+0x138>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d013      	beq.n	800c9ba <TIM_Base_SetConfig+0xaa>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a2d      	ldr	r2, [pc, #180]	; (800ca4c <TIM_Base_SetConfig+0x13c>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d00f      	beq.n	800c9ba <TIM_Base_SetConfig+0xaa>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a2d      	ldr	r2, [pc, #180]	; (800ca54 <TIM_Base_SetConfig+0x144>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d00b      	beq.n	800c9ba <TIM_Base_SetConfig+0xaa>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a2c      	ldr	r2, [pc, #176]	; (800ca58 <TIM_Base_SetConfig+0x148>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d007      	beq.n	800c9ba <TIM_Base_SetConfig+0xaa>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a2b      	ldr	r2, [pc, #172]	; (800ca5c <TIM_Base_SetConfig+0x14c>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d003      	beq.n	800c9ba <TIM_Base_SetConfig+0xaa>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a26      	ldr	r2, [pc, #152]	; (800ca50 <TIM_Base_SetConfig+0x140>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d108      	bne.n	800c9cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	689a      	ldr	r2, [r3, #8]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a12      	ldr	r2, [pc, #72]	; (800ca3c <TIM_Base_SetConfig+0x12c>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d013      	beq.n	800ca20 <TIM_Base_SetConfig+0x110>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a14      	ldr	r2, [pc, #80]	; (800ca4c <TIM_Base_SetConfig+0x13c>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d00f      	beq.n	800ca20 <TIM_Base_SetConfig+0x110>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a14      	ldr	r2, [pc, #80]	; (800ca54 <TIM_Base_SetConfig+0x144>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d00b      	beq.n	800ca20 <TIM_Base_SetConfig+0x110>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a13      	ldr	r2, [pc, #76]	; (800ca58 <TIM_Base_SetConfig+0x148>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d007      	beq.n	800ca20 <TIM_Base_SetConfig+0x110>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a12      	ldr	r2, [pc, #72]	; (800ca5c <TIM_Base_SetConfig+0x14c>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d003      	beq.n	800ca20 <TIM_Base_SetConfig+0x110>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4a0d      	ldr	r2, [pc, #52]	; (800ca50 <TIM_Base_SetConfig+0x140>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d103      	bne.n	800ca28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	691a      	ldr	r2, [r3, #16]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	615a      	str	r2, [r3, #20]
}
 800ca2e:	bf00      	nop
 800ca30:	3714      	adds	r7, #20
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	40012c00 	.word	0x40012c00
 800ca40:	40000400 	.word	0x40000400
 800ca44:	40000800 	.word	0x40000800
 800ca48:	40000c00 	.word	0x40000c00
 800ca4c:	40013400 	.word	0x40013400
 800ca50:	40015000 	.word	0x40015000
 800ca54:	40014000 	.word	0x40014000
 800ca58:	40014400 	.word	0x40014400
 800ca5c:	40014800 	.word	0x40014800

0800ca60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	f023 0201 	bic.w	r2, r3, #1
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	699b      	ldr	r3, [r3, #24]
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f023 0303 	bic.w	r3, r3, #3
 800ca9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f023 0302 	bic.w	r3, r3, #2
 800caac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a30      	ldr	r2, [pc, #192]	; (800cb7c <TIM_OC1_SetConfig+0x11c>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d013      	beq.n	800cae8 <TIM_OC1_SetConfig+0x88>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a2f      	ldr	r2, [pc, #188]	; (800cb80 <TIM_OC1_SetConfig+0x120>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d00f      	beq.n	800cae8 <TIM_OC1_SetConfig+0x88>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a2e      	ldr	r2, [pc, #184]	; (800cb84 <TIM_OC1_SetConfig+0x124>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d00b      	beq.n	800cae8 <TIM_OC1_SetConfig+0x88>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a2d      	ldr	r2, [pc, #180]	; (800cb88 <TIM_OC1_SetConfig+0x128>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d007      	beq.n	800cae8 <TIM_OC1_SetConfig+0x88>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a2c      	ldr	r2, [pc, #176]	; (800cb8c <TIM_OC1_SetConfig+0x12c>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d003      	beq.n	800cae8 <TIM_OC1_SetConfig+0x88>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a2b      	ldr	r2, [pc, #172]	; (800cb90 <TIM_OC1_SetConfig+0x130>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d10c      	bne.n	800cb02 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	f023 0308 	bic.w	r3, r3, #8
 800caee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	4313      	orrs	r3, r2
 800caf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f023 0304 	bic.w	r3, r3, #4
 800cb00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a1d      	ldr	r2, [pc, #116]	; (800cb7c <TIM_OC1_SetConfig+0x11c>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d013      	beq.n	800cb32 <TIM_OC1_SetConfig+0xd2>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a1c      	ldr	r2, [pc, #112]	; (800cb80 <TIM_OC1_SetConfig+0x120>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d00f      	beq.n	800cb32 <TIM_OC1_SetConfig+0xd2>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a1b      	ldr	r2, [pc, #108]	; (800cb84 <TIM_OC1_SetConfig+0x124>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d00b      	beq.n	800cb32 <TIM_OC1_SetConfig+0xd2>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4a1a      	ldr	r2, [pc, #104]	; (800cb88 <TIM_OC1_SetConfig+0x128>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d007      	beq.n	800cb32 <TIM_OC1_SetConfig+0xd2>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a19      	ldr	r2, [pc, #100]	; (800cb8c <TIM_OC1_SetConfig+0x12c>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d003      	beq.n	800cb32 <TIM_OC1_SetConfig+0xd2>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a18      	ldr	r2, [pc, #96]	; (800cb90 <TIM_OC1_SetConfig+0x130>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d111      	bne.n	800cb56 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	685a      	ldr	r2, [r3, #4]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	697a      	ldr	r2, [r7, #20]
 800cb6e:	621a      	str	r2, [r3, #32]
}
 800cb70:	bf00      	nop
 800cb72:	371c      	adds	r7, #28
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	40012c00 	.word	0x40012c00
 800cb80:	40013400 	.word	0x40013400
 800cb84:	40014000 	.word	0x40014000
 800cb88:	40014400 	.word	0x40014400
 800cb8c:	40014800 	.word	0x40014800
 800cb90:	40015000 	.word	0x40015000

0800cb94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b087      	sub	sp, #28
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	f023 0210 	bic.w	r2, r3, #16
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cbc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	021b      	lsls	r3, r3, #8
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	f023 0320 	bic.w	r3, r3, #32
 800cbe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	011b      	lsls	r3, r3, #4
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a2c      	ldr	r2, [pc, #176]	; (800cca4 <TIM_OC2_SetConfig+0x110>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d007      	beq.n	800cc08 <TIM_OC2_SetConfig+0x74>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a2b      	ldr	r2, [pc, #172]	; (800cca8 <TIM_OC2_SetConfig+0x114>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d003      	beq.n	800cc08 <TIM_OC2_SetConfig+0x74>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a2a      	ldr	r2, [pc, #168]	; (800ccac <TIM_OC2_SetConfig+0x118>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d10d      	bne.n	800cc24 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	011b      	lsls	r3, r3, #4
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a1f      	ldr	r2, [pc, #124]	; (800cca4 <TIM_OC2_SetConfig+0x110>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d013      	beq.n	800cc54 <TIM_OC2_SetConfig+0xc0>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a1e      	ldr	r2, [pc, #120]	; (800cca8 <TIM_OC2_SetConfig+0x114>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d00f      	beq.n	800cc54 <TIM_OC2_SetConfig+0xc0>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4a1e      	ldr	r2, [pc, #120]	; (800ccb0 <TIM_OC2_SetConfig+0x11c>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d00b      	beq.n	800cc54 <TIM_OC2_SetConfig+0xc0>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a1d      	ldr	r2, [pc, #116]	; (800ccb4 <TIM_OC2_SetConfig+0x120>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d007      	beq.n	800cc54 <TIM_OC2_SetConfig+0xc0>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a1c      	ldr	r2, [pc, #112]	; (800ccb8 <TIM_OC2_SetConfig+0x124>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d003      	beq.n	800cc54 <TIM_OC2_SetConfig+0xc0>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4a17      	ldr	r2, [pc, #92]	; (800ccac <TIM_OC2_SetConfig+0x118>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d113      	bne.n	800cc7c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	695b      	ldr	r3, [r3, #20]
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	693a      	ldr	r2, [r7, #16]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	697a      	ldr	r2, [r7, #20]
 800cc94:	621a      	str	r2, [r3, #32]
}
 800cc96:	bf00      	nop
 800cc98:	371c      	adds	r7, #28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	40012c00 	.word	0x40012c00
 800cca8:	40013400 	.word	0x40013400
 800ccac:	40015000 	.word	0x40015000
 800ccb0:	40014000 	.word	0x40014000
 800ccb4:	40014400 	.word	0x40014400
 800ccb8:	40014800 	.word	0x40014800

0800ccbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a1b      	ldr	r3, [r3, #32]
 800ccd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	69db      	ldr	r3, [r3, #28]
 800cce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ccea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f023 0303 	bic.w	r3, r3, #3
 800ccf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	021b      	lsls	r3, r3, #8
 800cd10:	697a      	ldr	r2, [r7, #20]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4a2b      	ldr	r2, [pc, #172]	; (800cdc8 <TIM_OC3_SetConfig+0x10c>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d007      	beq.n	800cd2e <TIM_OC3_SetConfig+0x72>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4a2a      	ldr	r2, [pc, #168]	; (800cdcc <TIM_OC3_SetConfig+0x110>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d003      	beq.n	800cd2e <TIM_OC3_SetConfig+0x72>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a29      	ldr	r2, [pc, #164]	; (800cdd0 <TIM_OC3_SetConfig+0x114>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d10d      	bne.n	800cd4a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	021b      	lsls	r3, r3, #8
 800cd3c:	697a      	ldr	r2, [r7, #20]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a1e      	ldr	r2, [pc, #120]	; (800cdc8 <TIM_OC3_SetConfig+0x10c>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d013      	beq.n	800cd7a <TIM_OC3_SetConfig+0xbe>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4a1d      	ldr	r2, [pc, #116]	; (800cdcc <TIM_OC3_SetConfig+0x110>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d00f      	beq.n	800cd7a <TIM_OC3_SetConfig+0xbe>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4a1d      	ldr	r2, [pc, #116]	; (800cdd4 <TIM_OC3_SetConfig+0x118>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d00b      	beq.n	800cd7a <TIM_OC3_SetConfig+0xbe>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4a1c      	ldr	r2, [pc, #112]	; (800cdd8 <TIM_OC3_SetConfig+0x11c>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d007      	beq.n	800cd7a <TIM_OC3_SetConfig+0xbe>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a1b      	ldr	r2, [pc, #108]	; (800cddc <TIM_OC3_SetConfig+0x120>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d003      	beq.n	800cd7a <TIM_OC3_SetConfig+0xbe>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a16      	ldr	r2, [pc, #88]	; (800cdd0 <TIM_OC3_SetConfig+0x114>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d113      	bne.n	800cda2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	695b      	ldr	r3, [r3, #20]
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	011b      	lsls	r3, r3, #4
 800cd9c:	693a      	ldr	r2, [r7, #16]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	693a      	ldr	r2, [r7, #16]
 800cda6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	697a      	ldr	r2, [r7, #20]
 800cdba:	621a      	str	r2, [r3, #32]
}
 800cdbc:	bf00      	nop
 800cdbe:	371c      	adds	r7, #28
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr
 800cdc8:	40012c00 	.word	0x40012c00
 800cdcc:	40013400 	.word	0x40013400
 800cdd0:	40015000 	.word	0x40015000
 800cdd4:	40014000 	.word	0x40014000
 800cdd8:	40014400 	.word	0x40014400
 800cddc:	40014800 	.word	0x40014800

0800cde0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a1b      	ldr	r3, [r3, #32]
 800cdee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	69db      	ldr	r3, [r3, #28]
 800ce06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	021b      	lsls	r3, r3, #8
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	031b      	lsls	r3, r3, #12
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a2c      	ldr	r2, [pc, #176]	; (800cef0 <TIM_OC4_SetConfig+0x110>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d007      	beq.n	800ce54 <TIM_OC4_SetConfig+0x74>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a2b      	ldr	r2, [pc, #172]	; (800cef4 <TIM_OC4_SetConfig+0x114>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d003      	beq.n	800ce54 <TIM_OC4_SetConfig+0x74>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a2a      	ldr	r2, [pc, #168]	; (800cef8 <TIM_OC4_SetConfig+0x118>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d10d      	bne.n	800ce70 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ce5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	031b      	lsls	r3, r3, #12
 800ce62:	697a      	ldr	r2, [r7, #20]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4a1f      	ldr	r2, [pc, #124]	; (800cef0 <TIM_OC4_SetConfig+0x110>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d013      	beq.n	800cea0 <TIM_OC4_SetConfig+0xc0>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a1e      	ldr	r2, [pc, #120]	; (800cef4 <TIM_OC4_SetConfig+0x114>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d00f      	beq.n	800cea0 <TIM_OC4_SetConfig+0xc0>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a1e      	ldr	r2, [pc, #120]	; (800cefc <TIM_OC4_SetConfig+0x11c>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d00b      	beq.n	800cea0 <TIM_OC4_SetConfig+0xc0>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a1d      	ldr	r2, [pc, #116]	; (800cf00 <TIM_OC4_SetConfig+0x120>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d007      	beq.n	800cea0 <TIM_OC4_SetConfig+0xc0>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4a1c      	ldr	r2, [pc, #112]	; (800cf04 <TIM_OC4_SetConfig+0x124>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d003      	beq.n	800cea0 <TIM_OC4_SetConfig+0xc0>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4a17      	ldr	r2, [pc, #92]	; (800cef8 <TIM_OC4_SetConfig+0x118>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d113      	bne.n	800cec8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cea6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ceae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	019b      	lsls	r3, r3, #6
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	699b      	ldr	r3, [r3, #24]
 800cec0:	019b      	lsls	r3, r3, #6
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	693a      	ldr	r2, [r7, #16]
 800cecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	621a      	str	r2, [r3, #32]
}
 800cee2:	bf00      	nop
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	40012c00 	.word	0x40012c00
 800cef4:	40013400 	.word	0x40013400
 800cef8:	40015000 	.word	0x40015000
 800cefc:	40014000 	.word	0x40014000
 800cf00:	40014400 	.word	0x40014400
 800cf04:	40014800 	.word	0x40014800

0800cf08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a1b      	ldr	r3, [r3, #32]
 800cf16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cf4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	041b      	lsls	r3, r3, #16
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a19      	ldr	r2, [pc, #100]	; (800cfc4 <TIM_OC5_SetConfig+0xbc>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d013      	beq.n	800cf8a <TIM_OC5_SetConfig+0x82>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a18      	ldr	r2, [pc, #96]	; (800cfc8 <TIM_OC5_SetConfig+0xc0>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d00f      	beq.n	800cf8a <TIM_OC5_SetConfig+0x82>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a17      	ldr	r2, [pc, #92]	; (800cfcc <TIM_OC5_SetConfig+0xc4>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d00b      	beq.n	800cf8a <TIM_OC5_SetConfig+0x82>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a16      	ldr	r2, [pc, #88]	; (800cfd0 <TIM_OC5_SetConfig+0xc8>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d007      	beq.n	800cf8a <TIM_OC5_SetConfig+0x82>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a15      	ldr	r2, [pc, #84]	; (800cfd4 <TIM_OC5_SetConfig+0xcc>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d003      	beq.n	800cf8a <TIM_OC5_SetConfig+0x82>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a14      	ldr	r2, [pc, #80]	; (800cfd8 <TIM_OC5_SetConfig+0xd0>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d109      	bne.n	800cf9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	695b      	ldr	r3, [r3, #20]
 800cf96:	021b      	lsls	r3, r3, #8
 800cf98:	697a      	ldr	r2, [r7, #20]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	697a      	ldr	r2, [r7, #20]
 800cfa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	693a      	ldr	r2, [r7, #16]
 800cfb6:	621a      	str	r2, [r3, #32]
}
 800cfb8:	bf00      	nop
 800cfba:	371c      	adds	r7, #28
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	40012c00 	.word	0x40012c00
 800cfc8:	40013400 	.word	0x40013400
 800cfcc:	40014000 	.word	0x40014000
 800cfd0:	40014400 	.word	0x40014400
 800cfd4:	40014800 	.word	0x40014800
 800cfd8:	40015000 	.word	0x40015000

0800cfdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b087      	sub	sp, #28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6a1b      	ldr	r3, [r3, #32]
 800cfea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a1b      	ldr	r3, [r3, #32]
 800cff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d00a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	021b      	lsls	r3, r3, #8
 800d016:	68fa      	ldr	r2, [r7, #12]
 800d018:	4313      	orrs	r3, r2
 800d01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	051b      	lsls	r3, r3, #20
 800d02a:	693a      	ldr	r2, [r7, #16]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a1a      	ldr	r2, [pc, #104]	; (800d09c <TIM_OC6_SetConfig+0xc0>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d013      	beq.n	800d060 <TIM_OC6_SetConfig+0x84>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a19      	ldr	r2, [pc, #100]	; (800d0a0 <TIM_OC6_SetConfig+0xc4>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d00f      	beq.n	800d060 <TIM_OC6_SetConfig+0x84>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a18      	ldr	r2, [pc, #96]	; (800d0a4 <TIM_OC6_SetConfig+0xc8>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d00b      	beq.n	800d060 <TIM_OC6_SetConfig+0x84>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a17      	ldr	r2, [pc, #92]	; (800d0a8 <TIM_OC6_SetConfig+0xcc>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d007      	beq.n	800d060 <TIM_OC6_SetConfig+0x84>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a16      	ldr	r2, [pc, #88]	; (800d0ac <TIM_OC6_SetConfig+0xd0>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d003      	beq.n	800d060 <TIM_OC6_SetConfig+0x84>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a15      	ldr	r2, [pc, #84]	; (800d0b0 <TIM_OC6_SetConfig+0xd4>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d109      	bne.n	800d074 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d066:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	695b      	ldr	r3, [r3, #20]
 800d06c:	029b      	lsls	r3, r3, #10
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	4313      	orrs	r3, r2
 800d072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	621a      	str	r2, [r3, #32]
}
 800d08e:	bf00      	nop
 800d090:	371c      	adds	r7, #28
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	40012c00 	.word	0x40012c00
 800d0a0:	40013400 	.word	0x40013400
 800d0a4:	40014000 	.word	0x40014000
 800d0a8:	40014400 	.word	0x40014400
 800d0ac:	40014800 	.word	0x40014800
 800d0b0:	40015000 	.word	0x40015000

0800d0b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d0cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0d0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0e2:	f023 0307 	bic.w	r3, r3, #7
 800d0e6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	697a      	ldr	r2, [r7, #20]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	697a      	ldr	r2, [r7, #20]
 800d0f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	2b70      	cmp	r3, #112	; 0x70
 800d100:	d034      	beq.n	800d16c <TIM_SlaveTimer_SetConfig+0xb8>
 800d102:	2b70      	cmp	r3, #112	; 0x70
 800d104:	d811      	bhi.n	800d12a <TIM_SlaveTimer_SetConfig+0x76>
 800d106:	2b30      	cmp	r3, #48	; 0x30
 800d108:	d07d      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
 800d10a:	2b30      	cmp	r3, #48	; 0x30
 800d10c:	d806      	bhi.n	800d11c <TIM_SlaveTimer_SetConfig+0x68>
 800d10e:	2b10      	cmp	r3, #16
 800d110:	d079      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
 800d112:	2b20      	cmp	r3, #32
 800d114:	d077      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
 800d116:	2b00      	cmp	r3, #0
 800d118:	d075      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800d11a:	e075      	b.n	800d208 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d11c:	2b50      	cmp	r3, #80	; 0x50
 800d11e:	d05e      	beq.n	800d1de <TIM_SlaveTimer_SetConfig+0x12a>
 800d120:	2b60      	cmp	r3, #96	; 0x60
 800d122:	d066      	beq.n	800d1f2 <TIM_SlaveTimer_SetConfig+0x13e>
 800d124:	2b40      	cmp	r3, #64	; 0x40
 800d126:	d02c      	beq.n	800d182 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800d128:	e06e      	b.n	800d208 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d12a:	4a3a      	ldr	r2, [pc, #232]	; (800d214 <TIM_SlaveTimer_SetConfig+0x160>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d06a      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
 800d130:	4a38      	ldr	r2, [pc, #224]	; (800d214 <TIM_SlaveTimer_SetConfig+0x160>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d809      	bhi.n	800d14a <TIM_SlaveTimer_SetConfig+0x96>
 800d136:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d13a:	d064      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
 800d13c:	4a36      	ldr	r2, [pc, #216]	; (800d218 <TIM_SlaveTimer_SetConfig+0x164>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d061      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
 800d142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d146:	d05e      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800d148:	e05e      	b.n	800d208 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d14a:	4a34      	ldr	r2, [pc, #208]	; (800d21c <TIM_SlaveTimer_SetConfig+0x168>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d05a      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
 800d150:	4a32      	ldr	r2, [pc, #200]	; (800d21c <TIM_SlaveTimer_SetConfig+0x168>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d803      	bhi.n	800d15e <TIM_SlaveTimer_SetConfig+0xaa>
 800d156:	4a32      	ldr	r2, [pc, #200]	; (800d220 <TIM_SlaveTimer_SetConfig+0x16c>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d054      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800d15c:	e054      	b.n	800d208 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d15e:	4a31      	ldr	r2, [pc, #196]	; (800d224 <TIM_SlaveTimer_SetConfig+0x170>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d050      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
 800d164:	4a30      	ldr	r2, [pc, #192]	; (800d228 <TIM_SlaveTimer_SetConfig+0x174>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d04d      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800d16a:	e04d      	b.n	800d208 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6818      	ldr	r0, [r3, #0]
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	68d9      	ldr	r1, [r3, #12]
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	689a      	ldr	r2, [r3, #8]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	f000 f8d2 	bl	800d324 <TIM_ETR_SetConfig>
      break;
 800d180:	e042      	b.n	800d208 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b05      	cmp	r3, #5
 800d188:	d004      	beq.n	800d194 <TIM_SlaveTimer_SetConfig+0xe0>
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800d192:	d101      	bne.n	800d198 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	e038      	b.n	800d20a <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	6a1b      	ldr	r3, [r3, #32]
 800d19e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6a1a      	ldr	r2, [r3, #32]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f022 0201 	bic.w	r2, r2, #1
 800d1ae:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	699b      	ldr	r3, [r3, #24]
 800d1b6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d1be:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	011b      	lsls	r3, r3, #4
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	621a      	str	r2, [r3, #32]
      break;
 800d1dc:	e014      	b.n	800d208 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6818      	ldr	r0, [r3, #0]
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	6899      	ldr	r1, [r3, #8]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f000 f81e 	bl	800d22c <TIM_TI1_ConfigInputStage>
      break;
 800d1f0:	e00a      	b.n	800d208 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6818      	ldr	r0, [r3, #0]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	6899      	ldr	r1, [r3, #8]
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	691b      	ldr	r3, [r3, #16]
 800d1fe:	461a      	mov	r2, r3
 800d200:	f000 f843 	bl	800d28a <TIM_TI2_ConfigInputStage>
      break;
 800d204:	e000      	b.n	800d208 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800d206:	bf00      	nop
  }
  return HAL_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3718      	adds	r7, #24
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	00100030 	.word	0x00100030
 800d218:	00100020 	.word	0x00100020
 800d21c:	00100050 	.word	0x00100050
 800d220:	00100040 	.word	0x00100040
 800d224:	00100060 	.word	0x00100060
 800d228:	00100070 	.word	0x00100070

0800d22c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b087      	sub	sp, #28
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6a1b      	ldr	r3, [r3, #32]
 800d23c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	f023 0201 	bic.w	r2, r3, #1
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	699b      	ldr	r3, [r3, #24]
 800d24e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	011b      	lsls	r3, r3, #4
 800d25c:	693a      	ldr	r2, [r7, #16]
 800d25e:	4313      	orrs	r3, r2
 800d260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	f023 030a 	bic.w	r3, r3, #10
 800d268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	4313      	orrs	r3, r2
 800d270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	697a      	ldr	r2, [r7, #20]
 800d27c:	621a      	str	r2, [r3, #32]
}
 800d27e:	bf00      	nop
 800d280:	371c      	adds	r7, #28
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d28a:	b480      	push	{r7}
 800d28c:	b087      	sub	sp, #28
 800d28e:	af00      	add	r7, sp, #0
 800d290:	60f8      	str	r0, [r7, #12]
 800d292:	60b9      	str	r1, [r7, #8]
 800d294:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	f023 0210 	bic.w	r2, r3, #16
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	699b      	ldr	r3, [r3, #24]
 800d2a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6a1b      	ldr	r3, [r3, #32]
 800d2ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d2b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	031b      	lsls	r3, r3, #12
 800d2ba:	697a      	ldr	r2, [r7, #20]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d2c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	011b      	lsls	r3, r3, #4
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	693a      	ldr	r2, [r7, #16]
 800d2dc:	621a      	str	r2, [r3, #32]
}
 800d2de:	bf00      	nop
 800d2e0:	371c      	adds	r7, #28
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d2ea:	b480      	push	{r7}
 800d2ec:	b085      	sub	sp, #20
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	f043 0307 	orr.w	r3, r3, #7
 800d310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	609a      	str	r2, [r3, #8]
}
 800d318:	bf00      	nop
 800d31a:	3714      	adds	r7, #20
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d324:	b480      	push	{r7}
 800d326:	b087      	sub	sp, #28
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
 800d330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d33e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	021a      	lsls	r2, r3, #8
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	431a      	orrs	r2, r3
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	697a      	ldr	r2, [r7, #20]
 800d34e:	4313      	orrs	r3, r2
 800d350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	697a      	ldr	r2, [r7, #20]
 800d356:	609a      	str	r2, [r3, #8]
}
 800d358:	bf00      	nop
 800d35a:	371c      	adds	r7, #28
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d364:	b480      	push	{r7}
 800d366:	b087      	sub	sp, #28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	f003 031f 	and.w	r3, r3, #31
 800d376:	2201      	movs	r2, #1
 800d378:	fa02 f303 	lsl.w	r3, r2, r3
 800d37c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6a1a      	ldr	r2, [r3, #32]
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	43db      	mvns	r3, r3
 800d386:	401a      	ands	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6a1a      	ldr	r2, [r3, #32]
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f003 031f 	and.w	r3, r3, #31
 800d396:	6879      	ldr	r1, [r7, #4]
 800d398:	fa01 f303 	lsl.w	r3, r1, r3
 800d39c:	431a      	orrs	r2, r3
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	621a      	str	r2, [r3, #32]
}
 800d3a2:	bf00      	nop
 800d3a4:	371c      	adds	r7, #28
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
	...

0800d3b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d101      	bne.n	800d3c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d3c4:	2302      	movs	r3, #2
 800d3c6:	e074      	b.n	800d4b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2202      	movs	r2, #2
 800d3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a34      	ldr	r2, [pc, #208]	; (800d4c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d009      	beq.n	800d406 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a33      	ldr	r2, [pc, #204]	; (800d4c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d004      	beq.n	800d406 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a31      	ldr	r2, [pc, #196]	; (800d4c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d108      	bne.n	800d418 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d40c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	4313      	orrs	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	4313      	orrs	r3, r2
 800d42c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a21      	ldr	r2, [pc, #132]	; (800d4c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d022      	beq.n	800d486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d448:	d01d      	beq.n	800d486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a1f      	ldr	r2, [pc, #124]	; (800d4cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d018      	beq.n	800d486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a1d      	ldr	r2, [pc, #116]	; (800d4d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d013      	beq.n	800d486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a1c      	ldr	r2, [pc, #112]	; (800d4d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d00e      	beq.n	800d486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a15      	ldr	r2, [pc, #84]	; (800d4c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d009      	beq.n	800d486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a18      	ldr	r2, [pc, #96]	; (800d4d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d004      	beq.n	800d486 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a11      	ldr	r2, [pc, #68]	; (800d4c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d10c      	bne.n	800d4a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d48c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	68ba      	ldr	r2, [r7, #8]
 800d494:	4313      	orrs	r3, r2
 800d496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3714      	adds	r7, #20
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	40012c00 	.word	0x40012c00
 800d4c4:	40013400 	.word	0x40013400
 800d4c8:	40015000 	.word	0x40015000
 800d4cc:	40000400 	.word	0x40000400
 800d4d0:	40000800 	.word	0x40000800
 800d4d4:	40000c00 	.word	0x40000c00
 800d4d8:	40014000 	.word	0x40014000

0800d4dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d101      	bne.n	800d4f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	e096      	b.n	800d626 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	4313      	orrs	r3, r2
 800d50c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	4313      	orrs	r3, r2
 800d51a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	4313      	orrs	r3, r2
 800d528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4313      	orrs	r3, r2
 800d536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	691b      	ldr	r3, [r3, #16]
 800d542:	4313      	orrs	r3, r2
 800d544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	4313      	orrs	r3, r2
 800d552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d55e:	4313      	orrs	r3, r2
 800d560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	699b      	ldr	r3, [r3, #24]
 800d56c:	041b      	lsls	r3, r3, #16
 800d56e:	4313      	orrs	r3, r2
 800d570:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a2f      	ldr	r2, [pc, #188]	; (800d634 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d009      	beq.n	800d590 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a2d      	ldr	r2, [pc, #180]	; (800d638 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d004      	beq.n	800d590 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a2c      	ldr	r2, [pc, #176]	; (800d63c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d106      	bne.n	800d59e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	69db      	ldr	r3, [r3, #28]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4a24      	ldr	r2, [pc, #144]	; (800d634 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d009      	beq.n	800d5bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a22      	ldr	r2, [pc, #136]	; (800d638 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d004      	beq.n	800d5bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a21      	ldr	r2, [pc, #132]	; (800d63c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d12b      	bne.n	800d614 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c6:	051b      	lsls	r3, r3, #20
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	6a1b      	ldr	r3, [r3, #32]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a11      	ldr	r2, [pc, #68]	; (800d634 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d009      	beq.n	800d606 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a10      	ldr	r2, [pc, #64]	; (800d638 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d004      	beq.n	800d606 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a0e      	ldr	r2, [pc, #56]	; (800d63c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d106      	bne.n	800d614 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d610:	4313      	orrs	r3, r2
 800d612:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	3714      	adds	r7, #20
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop
 800d634:	40012c00 	.word	0x40012c00
 800d638:	40013400 	.word	0x40013400
 800d63c:	40015000 	.word	0x40015000

0800d640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d6ac:	bf00      	nop
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b083      	sub	sp, #12
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d6c0:	bf00      	nop
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <LL_EXTI_EnableIT_0_31>:
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800d6d4:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <LL_EXTI_EnableIT_0_31+0x20>)
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	4904      	ldr	r1, [pc, #16]	; (800d6ec <LL_EXTI_EnableIT_0_31+0x20>)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	600b      	str	r3, [r1, #0]
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	40010400 	.word	0x40010400

0800d6f0 <LL_EXTI_EnableIT_32_63>:
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d6f8:	4b05      	ldr	r3, [pc, #20]	; (800d710 <LL_EXTI_EnableIT_32_63+0x20>)
 800d6fa:	6a1a      	ldr	r2, [r3, #32]
 800d6fc:	4904      	ldr	r1, [pc, #16]	; (800d710 <LL_EXTI_EnableIT_32_63+0x20>)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4313      	orrs	r3, r2
 800d702:	620b      	str	r3, [r1, #32]
}
 800d704:	bf00      	nop
 800d706:	370c      	adds	r7, #12
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr
 800d710:	40010400 	.word	0x40010400

0800d714 <LL_EXTI_DisableIT_0_31>:
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d71c:	4b06      	ldr	r3, [pc, #24]	; (800d738 <LL_EXTI_DisableIT_0_31+0x24>)
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	43db      	mvns	r3, r3
 800d724:	4904      	ldr	r1, [pc, #16]	; (800d738 <LL_EXTI_DisableIT_0_31+0x24>)
 800d726:	4013      	ands	r3, r2
 800d728:	600b      	str	r3, [r1, #0]
}
 800d72a:	bf00      	nop
 800d72c:	370c      	adds	r7, #12
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	40010400 	.word	0x40010400

0800d73c <LL_EXTI_DisableIT_32_63>:
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d744:	4b06      	ldr	r3, [pc, #24]	; (800d760 <LL_EXTI_DisableIT_32_63+0x24>)
 800d746:	6a1a      	ldr	r2, [r3, #32]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	43db      	mvns	r3, r3
 800d74c:	4904      	ldr	r1, [pc, #16]	; (800d760 <LL_EXTI_DisableIT_32_63+0x24>)
 800d74e:	4013      	ands	r3, r2
 800d750:	620b      	str	r3, [r1, #32]
}
 800d752:	bf00      	nop
 800d754:	370c      	adds	r7, #12
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	40010400 	.word	0x40010400

0800d764 <LL_EXTI_EnableEvent_0_31>:
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d76c:	4b05      	ldr	r3, [pc, #20]	; (800d784 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d76e:	685a      	ldr	r2, [r3, #4]
 800d770:	4904      	ldr	r1, [pc, #16]	; (800d784 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4313      	orrs	r3, r2
 800d776:	604b      	str	r3, [r1, #4]
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr
 800d784:	40010400 	.word	0x40010400

0800d788 <LL_EXTI_EnableEvent_32_63>:
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d790:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d794:	4904      	ldr	r1, [pc, #16]	; (800d7a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4313      	orrs	r3, r2
 800d79a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	40010400 	.word	0x40010400

0800d7ac <LL_EXTI_DisableEvent_0_31>:
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d7b4:	4b06      	ldr	r3, [pc, #24]	; (800d7d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d7b6:	685a      	ldr	r2, [r3, #4]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	43db      	mvns	r3, r3
 800d7bc:	4904      	ldr	r1, [pc, #16]	; (800d7d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d7be:	4013      	ands	r3, r2
 800d7c0:	604b      	str	r3, [r1, #4]
}
 800d7c2:	bf00      	nop
 800d7c4:	370c      	adds	r7, #12
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	40010400 	.word	0x40010400

0800d7d4 <LL_EXTI_DisableEvent_32_63>:
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d7dc:	4b06      	ldr	r3, [pc, #24]	; (800d7f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d7de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	43db      	mvns	r3, r3
 800d7e4:	4904      	ldr	r1, [pc, #16]	; (800d7f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d7ea:	bf00      	nop
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	40010400 	.word	0x40010400

0800d7fc <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d804:	4b05      	ldr	r3, [pc, #20]	; (800d81c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d806:	689a      	ldr	r2, [r3, #8]
 800d808:	4904      	ldr	r1, [pc, #16]	; (800d81c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	608b      	str	r3, [r1, #8]
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	40010400 	.word	0x40010400

0800d820 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d828:	4b05      	ldr	r3, [pc, #20]	; (800d840 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d82a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d82c:	4904      	ldr	r1, [pc, #16]	; (800d840 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4313      	orrs	r3, r2
 800d832:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d834:	bf00      	nop
 800d836:	370c      	adds	r7, #12
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr
 800d840:	40010400 	.word	0x40010400

0800d844 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d84c:	4b06      	ldr	r3, [pc, #24]	; (800d868 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d84e:	689a      	ldr	r2, [r3, #8]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	43db      	mvns	r3, r3
 800d854:	4904      	ldr	r1, [pc, #16]	; (800d868 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d856:	4013      	ands	r3, r2
 800d858:	608b      	str	r3, [r1, #8]
}
 800d85a:	bf00      	nop
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	40010400 	.word	0x40010400

0800d86c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d874:	4b06      	ldr	r3, [pc, #24]	; (800d890 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	43db      	mvns	r3, r3
 800d87c:	4904      	ldr	r1, [pc, #16]	; (800d890 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d87e:	4013      	ands	r3, r2
 800d880:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d882:	bf00      	nop
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	40010400 	.word	0x40010400

0800d894 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d89c:	4b05      	ldr	r3, [pc, #20]	; (800d8b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d89e:	68da      	ldr	r2, [r3, #12]
 800d8a0:	4904      	ldr	r1, [pc, #16]	; (800d8b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	60cb      	str	r3, [r1, #12]
}
 800d8a8:	bf00      	nop
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr
 800d8b4:	40010400 	.word	0x40010400

0800d8b8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d8c0:	4b05      	ldr	r3, [pc, #20]	; (800d8d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c4:	4904      	ldr	r1, [pc, #16]	; (800d8d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d8cc:	bf00      	nop
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	40010400 	.word	0x40010400

0800d8dc <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d8e4:	4b06      	ldr	r3, [pc, #24]	; (800d900 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d8e6:	68da      	ldr	r2, [r3, #12]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	43db      	mvns	r3, r3
 800d8ec:	4904      	ldr	r1, [pc, #16]	; (800d900 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	60cb      	str	r3, [r1, #12]
}
 800d8f2:	bf00      	nop
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	40010400 	.word	0x40010400

0800d904 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d90c:	4b06      	ldr	r3, [pc, #24]	; (800d928 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	43db      	mvns	r3, r3
 800d914:	4904      	ldr	r1, [pc, #16]	; (800d928 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d916:	4013      	ands	r3, r2
 800d918:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d91a:	bf00      	nop
 800d91c:	370c      	adds	r7, #12
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	40010400 	.word	0x40010400

0800d92c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d934:	2300      	movs	r3, #0
 800d936:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	7a1b      	ldrb	r3, [r3, #8]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f000 80c8 	beq.w	800dad2 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d05d      	beq.n	800da06 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	7a5b      	ldrb	r3, [r3, #9]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d00e      	beq.n	800d970 <LL_EXTI_Init+0x44>
 800d952:	2b02      	cmp	r3, #2
 800d954:	d017      	beq.n	800d986 <LL_EXTI_Init+0x5a>
 800d956:	2b00      	cmp	r3, #0
 800d958:	d120      	bne.n	800d99c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff ff24 	bl	800d7ac <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff feaf 	bl	800d6cc <LL_EXTI_EnableIT_0_31>
          break;
 800d96e:	e018      	b.n	800d9a2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4618      	mov	r0, r3
 800d976:	f7ff fecd 	bl	800d714 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4618      	mov	r0, r3
 800d980:	f7ff fef0 	bl	800d764 <LL_EXTI_EnableEvent_0_31>
          break;
 800d984:	e00d      	b.n	800d9a2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7ff fe9e 	bl	800d6cc <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4618      	mov	r0, r3
 800d996:	f7ff fee5 	bl	800d764 <LL_EXTI_EnableEvent_0_31>
          break;
 800d99a:	e002      	b.n	800d9a2 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d99c:	2301      	movs	r3, #1
 800d99e:	60fb      	str	r3, [r7, #12]
          break;
 800d9a0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	7a9b      	ldrb	r3, [r3, #10]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d02d      	beq.n	800da06 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	7a9b      	ldrb	r3, [r3, #10]
 800d9ae:	2b02      	cmp	r3, #2
 800d9b0:	d00e      	beq.n	800d9d0 <LL_EXTI_Init+0xa4>
 800d9b2:	2b03      	cmp	r3, #3
 800d9b4:	d017      	beq.n	800d9e6 <LL_EXTI_Init+0xba>
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d120      	bne.n	800d9fc <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7ff ff8c 	bl	800d8dc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7ff ff17 	bl	800d7fc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d9ce:	e01b      	b.n	800da08 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7ff ff35 	bl	800d844 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff ff58 	bl	800d894 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d9e4:	e010      	b.n	800da08 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff ff06 	bl	800d7fc <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7ff ff4d 	bl	800d894 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d9fa:	e005      	b.n	800da08 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f043 0302 	orr.w	r3, r3, #2
 800da02:	60fb      	str	r3, [r7, #12]
            break;
 800da04:	e000      	b.n	800da08 <LL_EXTI_Init+0xdc>
        }
      }
 800da06:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d075      	beq.n	800dafc <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	7a5b      	ldrb	r3, [r3, #9]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d00e      	beq.n	800da36 <LL_EXTI_Init+0x10a>
 800da18:	2b02      	cmp	r3, #2
 800da1a:	d017      	beq.n	800da4c <LL_EXTI_Init+0x120>
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d120      	bne.n	800da62 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	4618      	mov	r0, r3
 800da26:	f7ff fed5 	bl	800d7d4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	4618      	mov	r0, r3
 800da30:	f7ff fe5e 	bl	800d6f0 <LL_EXTI_EnableIT_32_63>
          break;
 800da34:	e01a      	b.n	800da6c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff fe7e 	bl	800d73c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	4618      	mov	r0, r3
 800da46:	f7ff fe9f 	bl	800d788 <LL_EXTI_EnableEvent_32_63>
          break;
 800da4a:	e00f      	b.n	800da6c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	4618      	mov	r0, r3
 800da52:	f7ff fe4d 	bl	800d6f0 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff fe94 	bl	800d788 <LL_EXTI_EnableEvent_32_63>
          break;
 800da60:	e004      	b.n	800da6c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f043 0304 	orr.w	r3, r3, #4
 800da68:	60fb      	str	r3, [r7, #12]
          break;
 800da6a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	7a9b      	ldrb	r3, [r3, #10]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d043      	beq.n	800dafc <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	7a9b      	ldrb	r3, [r3, #10]
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d00e      	beq.n	800da9a <LL_EXTI_Init+0x16e>
 800da7c:	2b03      	cmp	r3, #3
 800da7e:	d017      	beq.n	800dab0 <LL_EXTI_Init+0x184>
 800da80:	2b01      	cmp	r3, #1
 800da82:	d120      	bne.n	800dac6 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff ff3b 	bl	800d904 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fec4 	bl	800d820 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800da98:	e031      	b.n	800dafe <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7ff fee4 	bl	800d86c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7ff ff05 	bl	800d8b8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800daae:	e026      	b.n	800dafe <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7ff feb3 	bl	800d820 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7ff fefa 	bl	800d8b8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800dac4:	e01b      	b.n	800dafe <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f043 0305 	orr.w	r3, r3, #5
 800dacc:	60fb      	str	r3, [r7, #12]
            break;
 800dace:	bf00      	nop
 800dad0:	e015      	b.n	800dafe <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7ff fe1c 	bl	800d714 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff fe63 	bl	800d7ac <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	4618      	mov	r0, r3
 800daec:	f7ff fe26 	bl	800d73c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7ff fe6d 	bl	800d7d4 <LL_EXTI_DisableEvent_32_63>
 800dafa:	e000      	b.n	800dafe <LL_EXTI_Init+0x1d2>
      }
 800dafc:	bf00      	nop
  }

  return status;
 800dafe:	68fb      	ldr	r3, [r7, #12]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <LL_GPIO_SetPinMode>:
{
 800db08:	b480      	push	{r7}
 800db0a:	b089      	sub	sp, #36	; 0x24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	fa93 f3a3 	rbit	r3, r3
 800db22:	613b      	str	r3, [r7, #16]
  return result;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	fab3 f383 	clz	r3, r3
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	2103      	movs	r1, #3
 800db30:	fa01 f303 	lsl.w	r3, r1, r3
 800db34:	43db      	mvns	r3, r3
 800db36:	401a      	ands	r2, r3
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	fa93 f3a3 	rbit	r3, r3
 800db42:	61bb      	str	r3, [r7, #24]
  return result;
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	fab3 f383 	clz	r3, r3
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	005b      	lsls	r3, r3, #1
 800db4e:	6879      	ldr	r1, [r7, #4]
 800db50:	fa01 f303 	lsl.w	r3, r1, r3
 800db54:	431a      	orrs	r2, r3
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	601a      	str	r2, [r3, #0]
}
 800db5a:	bf00      	nop
 800db5c:	3724      	adds	r7, #36	; 0x24
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <LL_GPIO_SetPinOutputType>:
{
 800db66:	b480      	push	{r7}
 800db68:	b085      	sub	sp, #20
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	60f8      	str	r0, [r7, #12]
 800db6e:	60b9      	str	r1, [r7, #8]
 800db70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	685a      	ldr	r2, [r3, #4]
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	43db      	mvns	r3, r3
 800db7a:	401a      	ands	r2, r3
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	6879      	ldr	r1, [r7, #4]
 800db80:	fb01 f303 	mul.w	r3, r1, r3
 800db84:	431a      	orrs	r2, r3
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	605a      	str	r2, [r3, #4]
}
 800db8a:	bf00      	nop
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <LL_GPIO_SetPinSpeed>:
{
 800db96:	b480      	push	{r7}
 800db98:	b089      	sub	sp, #36	; 0x24
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	60f8      	str	r0, [r7, #12]
 800db9e:	60b9      	str	r1, [r7, #8]
 800dba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	689a      	ldr	r2, [r3, #8]
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	fa93 f3a3 	rbit	r3, r3
 800dbb0:	613b      	str	r3, [r7, #16]
  return result;
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	fab3 f383 	clz	r3, r3
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	2103      	movs	r1, #3
 800dbbe:	fa01 f303 	lsl.w	r3, r1, r3
 800dbc2:	43db      	mvns	r3, r3
 800dbc4:	401a      	ands	r2, r3
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	fa93 f3a3 	rbit	r3, r3
 800dbd0:	61bb      	str	r3, [r7, #24]
  return result;
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	fab3 f383 	clz	r3, r3
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	005b      	lsls	r3, r3, #1
 800dbdc:	6879      	ldr	r1, [r7, #4]
 800dbde:	fa01 f303 	lsl.w	r3, r1, r3
 800dbe2:	431a      	orrs	r2, r3
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	609a      	str	r2, [r3, #8]
}
 800dbe8:	bf00      	nop
 800dbea:	3724      	adds	r7, #36	; 0x24
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <LL_GPIO_SetPinPull>:
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b089      	sub	sp, #36	; 0x24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	68da      	ldr	r2, [r3, #12]
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	fa93 f3a3 	rbit	r3, r3
 800dc0e:	613b      	str	r3, [r7, #16]
  return result;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	fab3 f383 	clz	r3, r3
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	2103      	movs	r1, #3
 800dc1c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc20:	43db      	mvns	r3, r3
 800dc22:	401a      	ands	r2, r3
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	fa93 f3a3 	rbit	r3, r3
 800dc2e:	61bb      	str	r3, [r7, #24]
  return result;
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	fab3 f383 	clz	r3, r3
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	005b      	lsls	r3, r3, #1
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc40:	431a      	orrs	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	60da      	str	r2, [r3, #12]
}
 800dc46:	bf00      	nop
 800dc48:	3724      	adds	r7, #36	; 0x24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <LL_GPIO_SetAFPin_0_7>:
{
 800dc52:	b480      	push	{r7}
 800dc54:	b089      	sub	sp, #36	; 0x24
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	60f8      	str	r0, [r7, #12]
 800dc5a:	60b9      	str	r1, [r7, #8]
 800dc5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6a1a      	ldr	r2, [r3, #32]
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	fa93 f3a3 	rbit	r3, r3
 800dc6c:	613b      	str	r3, [r7, #16]
  return result;
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	fab3 f383 	clz	r3, r3
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	210f      	movs	r1, #15
 800dc7a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc7e:	43db      	mvns	r3, r3
 800dc80:	401a      	ands	r2, r3
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	fa93 f3a3 	rbit	r3, r3
 800dc8c:	61bb      	str	r3, [r7, #24]
  return result;
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	fab3 f383 	clz	r3, r3
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	621a      	str	r2, [r3, #32]
}
 800dca4:	bf00      	nop
 800dca6:	3724      	adds	r7, #36	; 0x24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <LL_GPIO_SetAFPin_8_15>:
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b089      	sub	sp, #36	; 0x24
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	0a1b      	lsrs	r3, r3, #8
 800dcc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	fa93 f3a3 	rbit	r3, r3
 800dccc:	613b      	str	r3, [r7, #16]
  return result;
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	fab3 f383 	clz	r3, r3
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	210f      	movs	r1, #15
 800dcda:	fa01 f303 	lsl.w	r3, r1, r3
 800dcde:	43db      	mvns	r3, r3
 800dce0:	401a      	ands	r2, r3
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	0a1b      	lsrs	r3, r3, #8
 800dce6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	fa93 f3a3 	rbit	r3, r3
 800dcee:	61bb      	str	r3, [r7, #24]
  return result;
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	fab3 f383 	clz	r3, r3
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	6879      	ldr	r1, [r7, #4]
 800dcfc:	fa01 f303 	lsl.w	r3, r1, r3
 800dd00:	431a      	orrs	r2, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dd06:	bf00      	nop
 800dd08:	3724      	adds	r7, #36	; 0x24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b086      	sub	sp, #24
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	fa93 f3a3 	rbit	r3, r3
 800dd28:	60bb      	str	r3, [r7, #8]
  return result;
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	fab3 f383 	clz	r3, r3
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800dd34:	e040      	b.n	800ddb8 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	2101      	movs	r1, #1
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd42:	4013      	ands	r3, r2
 800dd44:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d032      	beq.n	800ddb2 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	461a      	mov	r2, r3
 800dd52:	6939      	ldr	r1, [r7, #16]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7ff fed7 	bl	800db08 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d003      	beq.n	800dd6a <LL_GPIO_Init+0x58>
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d106      	bne.n	800dd78 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	6939      	ldr	r1, [r7, #16]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff ff0f 	bl	800db96 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	6939      	ldr	r1, [r7, #16]
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff ff37 	bl	800dbf4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d111      	bne.n	800ddb2 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2bff      	cmp	r3, #255	; 0xff
 800dd92:	d807      	bhi.n	800dda4 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	695b      	ldr	r3, [r3, #20]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	6939      	ldr	r1, [r7, #16]
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff ff58 	bl	800dc52 <LL_GPIO_SetAFPin_0_7>
 800dda2:	e006      	b.n	800ddb2 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	695b      	ldr	r3, [r3, #20]
 800dda8:	461a      	mov	r2, r3
 800ddaa:	6939      	ldr	r1, [r7, #16]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff ff7f 	bl	800dcb0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	fa22 f303 	lsr.w	r3, r2, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1b7      	bne.n	800dd36 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d003      	beq.n	800ddd6 <LL_GPIO_Init+0xc4>
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	2b02      	cmp	r3, #2
 800ddd4:	d107      	bne.n	800dde6 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	6819      	ldr	r1, [r3, #0]
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	461a      	mov	r2, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff fec0 	bl	800db66 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800ddf0:	b590      	push	{r4, r7, lr}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	4623      	mov	r3, r4
 800de00:	80fb      	strh	r3, [r7, #6]
 800de02:	4603      	mov	r3, r0
 800de04:	80bb      	strh	r3, [r7, #4]
 800de06:	460b      	mov	r3, r1
 800de08:	70fb      	strb	r3, [r7, #3]
 800de0a:	4613      	mov	r3, r2
 800de0c:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800de0e:	2300      	movs	r3, #0
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	e026      	b.n	800de62 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800de14:	2300      	movs	r3, #0
 800de16:	60bb      	str	r3, [r7, #8]
 800de18:	e01c      	b.n	800de54 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	88fb      	ldrh	r3, [r7, #6]
 800de20:	4413      	add	r3, r2
 800de22:	b298      	uxth	r0, r3
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de2a:	4413      	add	r3, r2
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de32:	fbb2 f3f3 	udiv	r3, r2, r3
 800de36:	b29a      	uxth	r2, r3
 800de38:	88bb      	ldrh	r3, [r7, #4]
 800de3a:	4413      	add	r3, r2
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	b29b      	uxth	r3, r3
 800de42:	4413      	add	r3, r2
 800de44:	b29b      	uxth	r3, r3
 800de46:	883a      	ldrh	r2, [r7, #0]
 800de48:	4619      	mov	r1, r3
 800de4a:	f000 fc1f 	bl	800e68c <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	3301      	adds	r3, #1
 800de52:	60bb      	str	r3, [r7, #8]
 800de54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de56:	68ba      	ldr	r2, [r7, #8]
 800de58:	429a      	cmp	r2, r3
 800de5a:	dbde      	blt.n	800de1a <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	3301      	adds	r3, #1
 800de60:	60fb      	str	r3, [r7, #12]
 800de62:	78fb      	ldrb	r3, [r7, #3]
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	429a      	cmp	r2, r3
 800de68:	dbd4      	blt.n	800de14 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800de6a:	bf00      	nop
 800de6c:	3714      	adds	r7, #20
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd90      	pop	{r4, r7, pc}

0800de72 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800de72:	b590      	push	{r4, r7, lr}
 800de74:	b087      	sub	sp, #28
 800de76:	af02      	add	r7, sp, #8
 800de78:	4604      	mov	r4, r0
 800de7a:	4608      	mov	r0, r1
 800de7c:	4611      	mov	r1, r2
 800de7e:	461a      	mov	r2, r3
 800de80:	4623      	mov	r3, r4
 800de82:	80fb      	strh	r3, [r7, #6]
 800de84:	4603      	mov	r3, r0
 800de86:	80bb      	strh	r3, [r7, #4]
 800de88:	460b      	mov	r3, r1
 800de8a:	807b      	strh	r3, [r7, #2]
 800de8c:	4613      	mov	r3, r2
 800de8e:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800de90:	2300      	movs	r3, #0
 800de92:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800de94:	7bfa      	ldrb	r2, [r7, #15]
 800de96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d939      	bls.n	800df12 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800de9e:	88ba      	ldrh	r2, [r7, #4]
 800dea0:	7bfb      	ldrb	r3, [r7, #15]
 800dea2:	441a      	add	r2, r3
 800dea4:	88b9      	ldrh	r1, [r7, #4]
 800dea6:	883b      	ldrh	r3, [r7, #0]
 800dea8:	4419      	add	r1, r3
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
 800deac:	1acb      	subs	r3, r1, r3
 800deae:	429a      	cmp	r2, r3
 800deb0:	f000 8089 	beq.w	800dfc6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800deb4:	88fa      	ldrh	r2, [r7, #6]
 800deb6:	7bfb      	ldrb	r3, [r7, #15]
 800deb8:	441a      	add	r2, r3
 800deba:	88f9      	ldrh	r1, [r7, #6]
 800debc:	887b      	ldrh	r3, [r7, #2]
 800debe:	4419      	add	r1, r3
 800dec0:	7bfb      	ldrb	r3, [r7, #15]
 800dec2:	1acb      	subs	r3, r1, r3
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d07e      	beq.n	800dfc6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800dec8:	7bfb      	ldrb	r3, [r7, #15]
 800deca:	b29a      	uxth	r2, r3
 800decc:	88fb      	ldrh	r3, [r7, #6]
 800dece:	4413      	add	r3, r2
 800ded0:	b298      	uxth	r0, r3
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	88bb      	ldrh	r3, [r7, #4]
 800ded8:	4413      	add	r3, r2
 800deda:	b299      	uxth	r1, r3
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
 800dede:	b29b      	uxth	r3, r3
 800dee0:	005b      	lsls	r3, r3, #1
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	887a      	ldrh	r2, [r7, #2]
 800dee6:	1ad3      	subs	r3, r2, r3
 800dee8:	b29b      	uxth	r3, r3
 800deea:	3301      	adds	r3, #1
 800deec:	b29c      	uxth	r4, r3
 800deee:	7bfb      	ldrb	r3, [r7, #15]
 800def0:	b29b      	uxth	r3, r3
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	b29b      	uxth	r3, r3
 800def6:	883a      	ldrh	r2, [r7, #0]
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	b29b      	uxth	r3, r3
 800defc:	3301      	adds	r3, #1
 800defe:	b29a      	uxth	r2, r3
 800df00:	2304      	movs	r3, #4
 800df02:	9301      	str	r3, [sp, #4]
 800df04:	8c3b      	ldrh	r3, [r7, #32]
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	4613      	mov	r3, r2
 800df0a:	4622      	mov	r2, r4
 800df0c:	f000 fd18 	bl	800e940 <ILI9341_Draw_Rectangle>
				goto finish;
 800df10:	e05a      	b.n	800dfc8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800df12:	7bfb      	ldrb	r3, [r7, #15]
 800df14:	b29a      	uxth	r2, r3
 800df16:	88fb      	ldrh	r3, [r7, #6]
 800df18:	4413      	add	r3, r2
 800df1a:	b298      	uxth	r0, r3
 800df1c:	7bfb      	ldrb	r3, [r7, #15]
 800df1e:	b29a      	uxth	r2, r3
 800df20:	88bb      	ldrh	r3, [r7, #4]
 800df22:	4413      	add	r3, r2
 800df24:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800df26:	7bfb      	ldrb	r3, [r7, #15]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	887a      	ldrh	r2, [r7, #2]
 800df2c:	1ad3      	subs	r3, r2, r3
 800df2e:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800df30:	3301      	adds	r3, #1
 800df32:	b29a      	uxth	r2, r3
 800df34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df36:	f000 fa6b 	bl	800e410 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	88fb      	ldrh	r3, [r7, #6]
 800df40:	4413      	add	r3, r2
 800df42:	b298      	uxth	r0, r3
										(y + h) - b,
 800df44:	88ba      	ldrh	r2, [r7, #4]
 800df46:	883b      	ldrh	r3, [r7, #0]
 800df48:	4413      	add	r3, r2
 800df4a:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800df4c:	7bfb      	ldrb	r3, [r7, #15]
 800df4e:	b29b      	uxth	r3, r3
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	b299      	uxth	r1, r3
										(w - b)+1,
 800df54:	7bfb      	ldrb	r3, [r7, #15]
 800df56:	b29b      	uxth	r3, r3
 800df58:	887a      	ldrh	r2, [r7, #2]
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800df5e:	3301      	adds	r3, #1
 800df60:	b29a      	uxth	r2, r3
 800df62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df64:	f000 fa54 	bl	800e410 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800df68:	7bfb      	ldrb	r3, [r7, #15]
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	88fb      	ldrh	r3, [r7, #6]
 800df6e:	4413      	add	r3, r2
 800df70:	b298      	uxth	r0, r3
 800df72:	7bfb      	ldrb	r3, [r7, #15]
 800df74:	b29a      	uxth	r2, r3
 800df76:	88bb      	ldrh	r3, [r7, #4]
 800df78:	4413      	add	r3, r2
 800df7a:	b299      	uxth	r1, r3
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
 800df7e:	b29b      	uxth	r3, r3
 800df80:	005b      	lsls	r3, r3, #1
 800df82:	b29b      	uxth	r3, r3
 800df84:	883a      	ldrh	r2, [r7, #0]
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	b29a      	uxth	r2, r3
 800df8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df8c:	f000 faa4 	bl	800e4d8 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800df90:	88fa      	ldrh	r2, [r7, #6]
 800df92:	887b      	ldrh	r3, [r7, #2]
 800df94:	4413      	add	r3, r2
 800df96:	b29a      	uxth	r2, r3
 800df98:	7bfb      	ldrb	r3, [r7, #15]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	b298      	uxth	r0, r3
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	88bb      	ldrh	r3, [r7, #4]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	b299      	uxth	r1, r3
 800dfaa:	7bfb      	ldrb	r3, [r7, #15]
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	005b      	lsls	r3, r3, #1
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	883a      	ldrh	r2, [r7, #0]
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dfba:	f000 fa8d 	bl	800e4d8 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800dfbe:	7bfb      	ldrb	r3, [r7, #15]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800dfc4:	e766      	b.n	800de94 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800dfc6:	bf00      	nop
	// done
	return;
 800dfc8:	bf00      	nop
}
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd90      	pop	{r4, r7, pc}

0800dfd0 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800dfd0:	b590      	push	{r4, r7, lr}
 800dfd2:	b089      	sub	sp, #36	; 0x24
 800dfd4:	af02      	add	r7, sp, #8
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	4608      	mov	r0, r1
 800dfda:	4611      	mov	r1, r2
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4623      	mov	r3, r4
 800dfe0:	71fb      	strb	r3, [r7, #7]
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	80bb      	strh	r3, [r7, #4]
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	807b      	strh	r3, [r7, #2]
 800dfea:	4613      	mov	r3, r2
 800dfec:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800dfee:	79fb      	ldrb	r3, [r7, #7]
 800dff0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800dff2:	7dfb      	ldrb	r3, [r7, #23]
 800dff4:	2b1f      	cmp	r3, #31
 800dff6:	d802      	bhi.n	800dffe <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800dff8:	2300      	movs	r3, #0
 800dffa:	71fb      	strb	r3, [r7, #7]
 800dffc:	e002      	b.n	800e004 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800dffe:	7dfb      	ldrb	r3, [r7, #23]
 800e000:	3b20      	subs	r3, #32
 800e002:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e004:	2300      	movs	r3, #0
 800e006:	753b      	strb	r3, [r7, #20]
 800e008:	e012      	b.n	800e030 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800e00a:	7dfa      	ldrb	r2, [r7, #23]
 800e00c:	7d38      	ldrb	r0, [r7, #20]
 800e00e:	7d39      	ldrb	r1, [r7, #20]
 800e010:	4c48      	ldr	r4, [pc, #288]	; (800e134 <ILI9341_Draw_Char+0x164>)
 800e012:	4613      	mov	r3, r2
 800e014:	005b      	lsls	r3, r3, #1
 800e016:	4413      	add	r3, r2
 800e018:	005b      	lsls	r3, r3, #1
 800e01a:	4423      	add	r3, r4
 800e01c:	4403      	add	r3, r0
 800e01e:	781a      	ldrb	r2, [r3, #0]
 800e020:	f107 0318 	add.w	r3, r7, #24
 800e024:	440b      	add	r3, r1
 800e026:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e02a:	7d3b      	ldrb	r3, [r7, #20]
 800e02c:	3301      	adds	r3, #1
 800e02e:	753b      	strb	r3, [r7, #20]
 800e030:	7d3b      	ldrb	r3, [r7, #20]
 800e032:	2b05      	cmp	r3, #5
 800e034:	d9e9      	bls.n	800e00a <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800e036:	2300      	movs	r3, #0
 800e038:	757b      	strb	r3, [r7, #21]
 800e03a:	e074      	b.n	800e126 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800e03c:	2300      	movs	r3, #0
 800e03e:	75bb      	strb	r3, [r7, #22]
 800e040:	e06b      	b.n	800e11a <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800e042:	7d7b      	ldrb	r3, [r7, #21]
 800e044:	f107 0218 	add.w	r2, r7, #24
 800e048:	4413      	add	r3, r2
 800e04a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e04e:	461a      	mov	r2, r3
 800e050:	7dbb      	ldrb	r3, [r7, #22]
 800e052:	fa42 f303 	asr.w	r3, r2, r3
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d02d      	beq.n	800e0ba <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800e05e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e060:	2b01      	cmp	r3, #1
 800e062:	d10e      	bne.n	800e082 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800e064:	7d7b      	ldrb	r3, [r7, #21]
 800e066:	b29a      	uxth	r2, r3
 800e068:	88bb      	ldrh	r3, [r7, #4]
 800e06a:	4413      	add	r3, r2
 800e06c:	b298      	uxth	r0, r3
 800e06e:	7dbb      	ldrb	r3, [r7, #22]
 800e070:	b29a      	uxth	r2, r3
 800e072:	887b      	ldrh	r3, [r7, #2]
 800e074:	4413      	add	r3, r2
 800e076:	b29b      	uxth	r3, r3
 800e078:	883a      	ldrh	r2, [r7, #0]
 800e07a:	4619      	mov	r1, r3
 800e07c:	f000 fb06 	bl	800e68c <ILI9341_Draw_Pixel>
 800e080:	e048      	b.n	800e114 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800e082:	7d7b      	ldrb	r3, [r7, #21]
 800e084:	b29b      	uxth	r3, r3
 800e086:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e088:	fb12 f303 	smulbb	r3, r2, r3
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	88bb      	ldrh	r3, [r7, #4]
 800e090:	4413      	add	r3, r2
 800e092:	b298      	uxth	r0, r3
 800e094:	7dbb      	ldrb	r3, [r7, #22]
 800e096:	b29b      	uxth	r3, r3
 800e098:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e09a:	fb12 f303 	smulbb	r3, r2, r3
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	887b      	ldrh	r3, [r7, #2]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	b299      	uxth	r1, r3
 800e0a6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e0a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	9301      	str	r3, [sp, #4]
 800e0ae:	883b      	ldrh	r3, [r7, #0]
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	4623      	mov	r3, r4
 800e0b4:	f000 fc44 	bl	800e940 <ILI9341_Draw_Rectangle>
 800e0b8:	e02c      	b.n	800e114 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800e0ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d10e      	bne.n	800e0de <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800e0c0:	7d7b      	ldrb	r3, [r7, #21]
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	88bb      	ldrh	r3, [r7, #4]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	b298      	uxth	r0, r3
 800e0ca:	7dbb      	ldrb	r3, [r7, #22]
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	887b      	ldrh	r3, [r7, #2]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	f000 fad8 	bl	800e68c <ILI9341_Draw_Pixel>
 800e0dc:	e01a      	b.n	800e114 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800e0de:	7d7b      	ldrb	r3, [r7, #21]
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e0e4:	fb12 f303 	smulbb	r3, r2, r3
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	88bb      	ldrh	r3, [r7, #4]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	b298      	uxth	r0, r3
 800e0f0:	7dbb      	ldrb	r3, [r7, #22]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e0f6:	fb12 f303 	smulbb	r3, r2, r3
 800e0fa:	b29a      	uxth	r2, r3
 800e0fc:	887b      	ldrh	r3, [r7, #2]
 800e0fe:	4413      	add	r3, r2
 800e100:	b299      	uxth	r1, r3
 800e102:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e104:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e106:	2301      	movs	r3, #1
 800e108:	9301      	str	r3, [sp, #4]
 800e10a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	4623      	mov	r3, r4
 800e110:	f000 fc16 	bl	800e940 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800e114:	7dbb      	ldrb	r3, [r7, #22]
 800e116:	3301      	adds	r3, #1
 800e118:	75bb      	strb	r3, [r7, #22]
 800e11a:	7dbb      	ldrb	r3, [r7, #22]
 800e11c:	2b07      	cmp	r3, #7
 800e11e:	d990      	bls.n	800e042 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800e120:	7d7b      	ldrb	r3, [r7, #21]
 800e122:	3301      	adds	r3, #1
 800e124:	757b      	strb	r3, [r7, #21]
 800e126:	7d7b      	ldrb	r3, [r7, #21]
 800e128:	2b05      	cmp	r3, #5
 800e12a:	d987      	bls.n	800e03c <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800e12c:	bf00      	nop
 800e12e:	371c      	adds	r7, #28
 800e130:	46bd      	mov	sp, r7
 800e132:	bd90      	pop	{r4, r7, pc}
 800e134:	08013c90 	.word	0x08013c90

0800e138 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b087      	sub	sp, #28
 800e13c:	af02      	add	r7, sp, #8
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	4608      	mov	r0, r1
 800e142:	4611      	mov	r1, r2
 800e144:	461a      	mov	r2, r3
 800e146:	4603      	mov	r3, r0
 800e148:	817b      	strh	r3, [r7, #10]
 800e14a:	460b      	mov	r3, r1
 800e14c:	813b      	strh	r3, [r7, #8]
 800e14e:	4613      	mov	r3, r2
 800e150:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800e152:	897b      	ldrh	r3, [r7, #10]
 800e154:	3b01      	subs	r3, #1
 800e156:	b298      	uxth	r0, r3
 800e158:	8c3b      	ldrh	r3, [r7, #32]
 800e15a:	00db      	lsls	r3, r3, #3
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e160:	8939      	ldrh	r1, [r7, #8]
 800e162:	f000 f9b9 	bl	800e4d8 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800e166:	897b      	ldrh	r3, [r7, #10]
 800e168:	3b02      	subs	r3, #2
 800e16a:	b298      	uxth	r0, r3
 800e16c:	8c3b      	ldrh	r3, [r7, #32]
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	b29a      	uxth	r2, r3
 800e172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e174:	8939      	ldrh	r1, [r7, #8]
 800e176:	f000 f9af 	bl	800e4d8 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800e17a:	e016      	b.n	800e1aa <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	1c5a      	adds	r2, r3, #1
 800e180:	60fa      	str	r2, [r7, #12]
 800e182:	7818      	ldrb	r0, [r3, #0]
 800e184:	88fc      	ldrh	r4, [r7, #6]
 800e186:	893a      	ldrh	r2, [r7, #8]
 800e188:	8979      	ldrh	r1, [r7, #10]
 800e18a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e18c:	9301      	str	r3, [sp, #4]
 800e18e:	8c3b      	ldrh	r3, [r7, #32]
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	4623      	mov	r3, r4
 800e194:	f7ff ff1c 	bl	800dfd0 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800e198:	8c3b      	ldrh	r3, [r7, #32]
 800e19a:	461a      	mov	r2, r3
 800e19c:	0052      	lsls	r2, r2, #1
 800e19e:	4413      	add	r3, r2
 800e1a0:	005b      	lsls	r3, r3, #1
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	897b      	ldrh	r3, [r7, #10]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1e4      	bne.n	800e17c <ILI9341_Draw_Text+0x44>
    }


}
 800e1b2:	bf00      	nop
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd90      	pop	{r4, r7, pc}

0800e1ba <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800e1be:	f000 fca3 	bl	800eb08 <_LCD_Enable>
	ILI9341_SPI_Init();
 800e1c2:	f000 f907 	bl	800e3d4 <ILI9341_SPI_Init>
	_LCD_Reset();
 800e1c6:	f000 fcaf 	bl	800eb28 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800e1ca:	2001      	movs	r0, #1
 800e1cc:	f000 fd7a 	bl	800ecc4 <_LCD_SendCommand>
	HAL_Delay(2000);
 800e1d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e1d4:	f7f9 fe4a 	bl	8007e6c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800e1d8:	20cb      	movs	r0, #203	; 0xcb
 800e1da:	f000 fd73 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800e1de:	2039      	movs	r0, #57	; 0x39
 800e1e0:	f000 fda2 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800e1e4:	202c      	movs	r0, #44	; 0x2c
 800e1e6:	f000 fd9f 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	f000 fd9c 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x34);
 800e1f0:	2034      	movs	r0, #52	; 0x34
 800e1f2:	f000 fd99 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x02);
 800e1f6:	2002      	movs	r0, #2
 800e1f8:	f000 fd96 	bl	800ed28 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800e1fc:	20cf      	movs	r0, #207	; 0xcf
 800e1fe:	f000 fd61 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e202:	2000      	movs	r0, #0
 800e204:	f000 fd90 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e208:	20c1      	movs	r0, #193	; 0xc1
 800e20a:	f000 fd8d 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x30);
 800e20e:	2030      	movs	r0, #48	; 0x30
 800e210:	f000 fd8a 	bl	800ed28 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800e214:	20e8      	movs	r0, #232	; 0xe8
 800e216:	f000 fd55 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800e21a:	2085      	movs	r0, #133	; 0x85
 800e21c:	f000 fd84 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e220:	2000      	movs	r0, #0
 800e222:	f000 fd81 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x78);
 800e226:	2078      	movs	r0, #120	; 0x78
 800e228:	f000 fd7e 	bl	800ed28 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800e22c:	20ea      	movs	r0, #234	; 0xea
 800e22e:	f000 fd49 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e232:	2000      	movs	r0, #0
 800e234:	f000 fd78 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e238:	2000      	movs	r0, #0
 800e23a:	f000 fd75 	bl	800ed28 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800e23e:	20ed      	movs	r0, #237	; 0xed
 800e240:	f000 fd40 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800e244:	2064      	movs	r0, #100	; 0x64
 800e246:	f000 fd6f 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e24a:	2003      	movs	r0, #3
 800e24c:	f000 fd6c 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x12);
 800e250:	2012      	movs	r0, #18
 800e252:	f000 fd69 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x81);
 800e256:	2081      	movs	r0, #129	; 0x81
 800e258:	f000 fd66 	bl	800ed28 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800e25c:	20f7      	movs	r0, #247	; 0xf7
 800e25e:	f000 fd31 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800e262:	2020      	movs	r0, #32
 800e264:	f000 fd60 	bl	800ed28 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800e268:	20c0      	movs	r0, #192	; 0xc0
 800e26a:	f000 fd2b 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800e26e:	2023      	movs	r0, #35	; 0x23
 800e270:	f000 fd5a 	bl	800ed28 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800e274:	20c1      	movs	r0, #193	; 0xc1
 800e276:	f000 fd25 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800e27a:	2010      	movs	r0, #16
 800e27c:	f000 fd54 	bl	800ed28 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800e280:	20c5      	movs	r0, #197	; 0xc5
 800e282:	f000 fd1f 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800e286:	203e      	movs	r0, #62	; 0x3e
 800e288:	f000 fd4e 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x28);
 800e28c:	2028      	movs	r0, #40	; 0x28
 800e28e:	f000 fd4b 	bl	800ed28 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800e292:	20c7      	movs	r0, #199	; 0xc7
 800e294:	f000 fd16 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800e298:	2086      	movs	r0, #134	; 0x86
 800e29a:	f000 fd45 	bl	800ed28 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800e29e:	2036      	movs	r0, #54	; 0x36
 800e2a0:	f000 fd10 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800e2a4:	2048      	movs	r0, #72	; 0x48
 800e2a6:	f000 fd3f 	bl	800ed28 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800e2aa:	203a      	movs	r0, #58	; 0x3a
 800e2ac:	f000 fd0a 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800e2b0:	2055      	movs	r0, #85	; 0x55
 800e2b2:	f000 fd39 	bl	800ed28 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800e2b6:	20b1      	movs	r0, #177	; 0xb1
 800e2b8:	f000 fd04 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e2bc:	2000      	movs	r0, #0
 800e2be:	f000 fd33 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x18);
 800e2c2:	2018      	movs	r0, #24
 800e2c4:	f000 fd30 	bl	800ed28 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800e2c8:	20b6      	movs	r0, #182	; 0xb6
 800e2ca:	f000 fcfb 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800e2ce:	2008      	movs	r0, #8
 800e2d0:	f000 fd2a 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x82);
 800e2d4:	2082      	movs	r0, #130	; 0x82
 800e2d6:	f000 fd27 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x27);
 800e2da:	2027      	movs	r0, #39	; 0x27
 800e2dc:	f000 fd24 	bl	800ed28 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800e2e0:	20f2      	movs	r0, #242	; 0xf2
 800e2e2:	f000 fcef 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	f000 fd1e 	bl	800ed28 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800e2ec:	2026      	movs	r0, #38	; 0x26
 800e2ee:	f000 fce9 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	f000 fd18 	bl	800ed28 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800e2f8:	20e0      	movs	r0, #224	; 0xe0
 800e2fa:	f000 fce3 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800e2fe:	200f      	movs	r0, #15
 800e300:	f000 fd12 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e304:	2031      	movs	r0, #49	; 0x31
 800e306:	f000 fd0f 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800e30a:	202b      	movs	r0, #43	; 0x2b
 800e30c:	f000 fd0c 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e310:	200c      	movs	r0, #12
 800e312:	f000 fd09 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e316:	200e      	movs	r0, #14
 800e318:	f000 fd06 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e31c:	2008      	movs	r0, #8
 800e31e:	f000 fd03 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800e322:	204e      	movs	r0, #78	; 0x4e
 800e324:	f000 fd00 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800e328:	20f1      	movs	r0, #241	; 0xf1
 800e32a:	f000 fcfd 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x37);
 800e32e:	2037      	movs	r0, #55	; 0x37
 800e330:	f000 fcfa 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e334:	2007      	movs	r0, #7
 800e336:	f000 fcf7 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x10);
 800e33a:	2010      	movs	r0, #16
 800e33c:	f000 fcf4 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e340:	2003      	movs	r0, #3
 800e342:	f000 fcf1 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e346:	200e      	movs	r0, #14
 800e348:	f000 fcee 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x09);
 800e34c:	2009      	movs	r0, #9
 800e34e:	f000 fceb 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e352:	2000      	movs	r0, #0
 800e354:	f000 fce8 	bl	800ed28 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800e358:	20e1      	movs	r0, #225	; 0xe1
 800e35a:	f000 fcb3 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e35e:	2000      	movs	r0, #0
 800e360:	f000 fce2 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e364:	200e      	movs	r0, #14
 800e366:	f000 fcdf 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x14);
 800e36a:	2014      	movs	r0, #20
 800e36c:	f000 fcdc 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e370:	2003      	movs	r0, #3
 800e372:	f000 fcd9 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x11);
 800e376:	2011      	movs	r0, #17
 800e378:	f000 fcd6 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e37c:	2007      	movs	r0, #7
 800e37e:	f000 fcd3 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e382:	2031      	movs	r0, #49	; 0x31
 800e384:	f000 fcd0 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e388:	20c1      	movs	r0, #193	; 0xc1
 800e38a:	f000 fccd 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x48);
 800e38e:	2048      	movs	r0, #72	; 0x48
 800e390:	f000 fcca 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e394:	2008      	movs	r0, #8
 800e396:	f000 fcc7 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e39a:	200f      	movs	r0, #15
 800e39c:	f000 fcc4 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e3a0:	200c      	movs	r0, #12
 800e3a2:	f000 fcc1 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e3a6:	2031      	movs	r0, #49	; 0x31
 800e3a8:	f000 fcbe 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x36);
 800e3ac:	2036      	movs	r0, #54	; 0x36
 800e3ae:	f000 fcbb 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e3b2:	200f      	movs	r0, #15
 800e3b4:	f000 fcb8 	bl	800ed28 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800e3b8:	2011      	movs	r0, #17
 800e3ba:	f000 fc83 	bl	800ecc4 <_LCD_SendCommand>
	HAL_Delay(240);
 800e3be:	20f0      	movs	r0, #240	; 0xf0
 800e3c0:	f7f9 fd54 	bl	8007e6c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800e3c4:	2029      	movs	r0, #41	; 0x29
 800e3c6:	f000 fc7d 	bl	800ecc4 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	f000 fb4e 	bl	800ea6c <ILI9341_Set_Rotation>
}
 800e3d0:	bf00      	nop
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e3d8:	4b0b      	ldr	r3, [pc, #44]	; (800e408 <ILI9341_SPI_Init+0x34>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3e0:	2b40      	cmp	r3, #64	; 0x40
 800e3e2:	d005      	beq.n	800e3f0 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800e3e4:	4b08      	ldr	r3, [pc, #32]	; (800e408 <ILI9341_SPI_Init+0x34>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a07      	ldr	r2, [pc, #28]	; (800e408 <ILI9341_SPI_Init+0x34>)
 800e3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3ee:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e3f0:	4b06      	ldr	r3, [pc, #24]	; (800e40c <ILI9341_SPI_Init+0x38>)
 800e3f2:	695b      	ldr	r3, [r3, #20]
 800e3f4:	4a05      	ldr	r2, [pc, #20]	; (800e40c <ILI9341_SPI_Init+0x38>)
 800e3f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3fa:	6153      	str	r3, [r2, #20]
}
 800e3fc:	bf00      	nop
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop
 800e408:	40003c00 	.word	0x40003c00
 800e40c:	48000400 	.word	0x48000400

0800e410 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800e410:	b590      	push	{r4, r7, lr}
 800e412:	b087      	sub	sp, #28
 800e414:	af02      	add	r7, sp, #8
 800e416:	4604      	mov	r4, r0
 800e418:	4608      	mov	r0, r1
 800e41a:	4611      	mov	r1, r2
 800e41c:	461a      	mov	r2, r3
 800e41e:	4623      	mov	r3, r4
 800e420:	80fb      	strh	r3, [r7, #6]
 800e422:	4603      	mov	r3, r0
 800e424:	80bb      	strh	r3, [r7, #4]
 800e426:	460b      	mov	r3, r1
 800e428:	807b      	strh	r3, [r7, #2]
 800e42a:	4613      	mov	r3, r2
 800e42c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e42e:	4b28      	ldr	r3, [pc, #160]	; (800e4d0 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e430:	881b      	ldrh	r3, [r3, #0]
 800e432:	b29b      	uxth	r3, r3
 800e434:	88fa      	ldrh	r2, [r7, #6]
 800e436:	429a      	cmp	r2, r3
 800e438:	d246      	bcs.n	800e4c8 <ILI9341_Draw_Horizontal_Line+0xb8>
 800e43a:	4b26      	ldr	r3, [pc, #152]	; (800e4d4 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800e43c:	881b      	ldrh	r3, [r3, #0]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	88ba      	ldrh	r2, [r7, #4]
 800e442:	429a      	cmp	r2, r3
 800e444:	d240      	bcs.n	800e4c8 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800e446:	88fa      	ldrh	r2, [r7, #6]
 800e448:	887b      	ldrh	r3, [r7, #2]
 800e44a:	4413      	add	r3, r2
 800e44c:	3b01      	subs	r3, #1
 800e44e:	4a20      	ldr	r2, [pc, #128]	; (800e4d0 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e450:	8812      	ldrh	r2, [r2, #0]
 800e452:	b292      	uxth	r2, r2
 800e454:	4293      	cmp	r3, r2
 800e456:	db05      	blt.n	800e464 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800e458:	4b1d      	ldr	r3, [pc, #116]	; (800e4d0 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e45a:	881b      	ldrh	r3, [r3, #0]
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	88fb      	ldrh	r3, [r7, #6]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800e464:	88fa      	ldrh	r2, [r7, #6]
 800e466:	887b      	ldrh	r3, [r7, #2]
 800e468:	4413      	add	r3, r2
 800e46a:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e46c:	3b01      	subs	r3, #1
 800e46e:	b29a      	uxth	r2, r3
 800e470:	88bb      	ldrh	r3, [r7, #4]
 800e472:	88b9      	ldrh	r1, [r7, #4]
 800e474:	88f8      	ldrh	r0, [r7, #6]
 800e476:	f000 f893 	bl	800e5a0 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800e47a:	2300      	movs	r3, #0
 800e47c:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800e47e:	887b      	ldrh	r3, [r7, #2]
 800e480:	f003 0301 	and.w	r3, r3, #1
 800e484:	2b00      	cmp	r3, #0
 800e486:	d009      	beq.n	800e49c <ILI9341_Draw_Horizontal_Line+0x8c>
 800e488:	887b      	ldrh	r3, [r7, #2]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d906      	bls.n	800e49c <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800e48e:	2301      	movs	r3, #1
 800e490:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800e492:	887b      	ldrh	r3, [r7, #2]
 800e494:	085b      	lsrs	r3, r3, #1
 800e496:	b29b      	uxth	r3, r3
 800e498:	005b      	lsls	r3, r3, #1
 800e49a:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800e49c:	887c      	ldrh	r4, [r7, #2]
 800e49e:	883a      	ldrh	r2, [r7, #0]
 800e4a0:	88b9      	ldrh	r1, [r7, #4]
 800e4a2:	88f8      	ldrh	r0, [r7, #6]
 800e4a4:	2303      	movs	r3, #3
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	4623      	mov	r3, r4
 800e4aa:	f000 fb5b 	bl	800eb64 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800e4ae:	7bfb      	ldrb	r3, [r7, #15]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d00a      	beq.n	800e4ca <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800e4b4:	88fa      	ldrh	r2, [r7, #6]
 800e4b6:	887b      	ldrh	r3, [r7, #2]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	883a      	ldrh	r2, [r7, #0]
 800e4be:	88b9      	ldrh	r1, [r7, #4]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f000 f8e3 	bl	800e68c <ILI9341_Draw_Pixel>
 800e4c6:	e000      	b.n	800e4ca <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e4c8:	bf00      	nop
							(ypos),
							colour);
	}


}
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd90      	pop	{r4, r7, pc}
 800e4d0:	20000c3e 	.word	0x20000c3e
 800e4d4:	20000c3c 	.word	0x20000c3c

0800e4d8 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800e4d8:	b590      	push	{r4, r7, lr}
 800e4da:	b087      	sub	sp, #28
 800e4dc:	af02      	add	r7, sp, #8
 800e4de:	4604      	mov	r4, r0
 800e4e0:	4608      	mov	r0, r1
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	4623      	mov	r3, r4
 800e4e8:	80fb      	strh	r3, [r7, #6]
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	80bb      	strh	r3, [r7, #4]
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	807b      	strh	r3, [r7, #2]
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e4f6:	4b28      	ldr	r3, [pc, #160]	; (800e598 <ILI9341_Draw_Vertical_Line+0xc0>)
 800e4f8:	881b      	ldrh	r3, [r3, #0]
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	88fa      	ldrh	r2, [r7, #6]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d246      	bcs.n	800e590 <ILI9341_Draw_Vertical_Line+0xb8>
 800e502:	4b26      	ldr	r3, [pc, #152]	; (800e59c <ILI9341_Draw_Vertical_Line+0xc4>)
 800e504:	881b      	ldrh	r3, [r3, #0]
 800e506:	b29b      	uxth	r3, r3
 800e508:	88ba      	ldrh	r2, [r7, #4]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d240      	bcs.n	800e590 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800e50e:	88ba      	ldrh	r2, [r7, #4]
 800e510:	887b      	ldrh	r3, [r7, #2]
 800e512:	4413      	add	r3, r2
 800e514:	3b01      	subs	r3, #1
 800e516:	4a21      	ldr	r2, [pc, #132]	; (800e59c <ILI9341_Draw_Vertical_Line+0xc4>)
 800e518:	8812      	ldrh	r2, [r2, #0]
 800e51a:	b292      	uxth	r2, r2
 800e51c:	4293      	cmp	r3, r2
 800e51e:	db05      	blt.n	800e52c <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800e520:	4b1e      	ldr	r3, [pc, #120]	; (800e59c <ILI9341_Draw_Vertical_Line+0xc4>)
 800e522:	881b      	ldrh	r3, [r3, #0]
 800e524:	b29a      	uxth	r2, r3
 800e526:	88bb      	ldrh	r3, [r7, #4]
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800e52c:	88ba      	ldrh	r2, [r7, #4]
 800e52e:	887b      	ldrh	r3, [r7, #2]
 800e530:	4413      	add	r3, r2
 800e532:	b29b      	uxth	r3, r3
 800e534:	3b01      	subs	r3, #1
 800e536:	b29b      	uxth	r3, r3
 800e538:	88fa      	ldrh	r2, [r7, #6]
 800e53a:	88b9      	ldrh	r1, [r7, #4]
 800e53c:	88f8      	ldrh	r0, [r7, #6]
 800e53e:	f000 f82f 	bl	800e5a0 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800e542:	2300      	movs	r3, #0
 800e544:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800e546:	887b      	ldrh	r3, [r7, #2]
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d009      	beq.n	800e564 <ILI9341_Draw_Vertical_Line+0x8c>
 800e550:	887b      	ldrh	r3, [r7, #2]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d906      	bls.n	800e564 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800e556:	2301      	movs	r3, #1
 800e558:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800e55a:	887b      	ldrh	r3, [r7, #2]
 800e55c:	085b      	lsrs	r3, r3, #1
 800e55e:	b29b      	uxth	r3, r3
 800e560:	005b      	lsls	r3, r3, #1
 800e562:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800e564:	7bfb      	ldrb	r3, [r7, #15]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d008      	beq.n	800e57c <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800e56a:	88ba      	ldrh	r2, [r7, #4]
 800e56c:	887b      	ldrh	r3, [r7, #2]
 800e56e:	4413      	add	r3, r2
 800e570:	b299      	uxth	r1, r3
 800e572:	883a      	ldrh	r2, [r7, #0]
 800e574:	88fb      	ldrh	r3, [r7, #6]
 800e576:	4618      	mov	r0, r3
 800e578:	f000 f888 	bl	800e68c <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800e57c:	887c      	ldrh	r4, [r7, #2]
 800e57e:	883a      	ldrh	r2, [r7, #0]
 800e580:	88b9      	ldrh	r1, [r7, #4]
 800e582:	88f8      	ldrh	r0, [r7, #6]
 800e584:	2303      	movs	r3, #3
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	4623      	mov	r3, r4
 800e58a:	f000 faeb 	bl	800eb64 <_LCD_Write_Frame>
 800e58e:	e000      	b.n	800e592 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e590:	bf00      	nop
}
 800e592:	3714      	adds	r7, #20
 800e594:	46bd      	mov	sp, r7
 800e596:	bd90      	pop	{r4, r7, pc}
 800e598:	20000c3e 	.word	0x20000c3e
 800e59c:	20000c3c 	.word	0x20000c3c

0800e5a0 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800e5a0:	b590      	push	{r4, r7, lr}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	4608      	mov	r0, r1
 800e5aa:	4611      	mov	r1, r2
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	4623      	mov	r3, r4
 800e5b0:	80fb      	strh	r3, [r7, #6]
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	80bb      	strh	r3, [r7, #4]
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	807b      	strh	r3, [r7, #2]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800e5be:	202a      	movs	r0, #42	; 0x2a
 800e5c0:	f000 fb80 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800e5c4:	88fb      	ldrh	r3, [r7, #6]
 800e5c6:	0a1b      	lsrs	r3, r3, #8
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f000 fbab 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(sc);
 800e5d2:	88fb      	ldrh	r3, [r7, #6]
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f000 fba6 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800e5dc:	887b      	ldrh	r3, [r7, #2]
 800e5de:	0a1b      	lsrs	r3, r3, #8
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f000 fb9f 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(ec);
 800e5ea:	887b      	ldrh	r3, [r7, #2]
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f000 fb9a 	bl	800ed28 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800e5f4:	202b      	movs	r0, #43	; 0x2b
 800e5f6:	f000 fb65 	bl	800ecc4 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800e5fa:	88bb      	ldrh	r3, [r7, #4]
 800e5fc:	0a1b      	lsrs	r3, r3, #8
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	b2db      	uxtb	r3, r3
 800e602:	4618      	mov	r0, r3
 800e604:	f000 fb90 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(sp);
 800e608:	88bb      	ldrh	r3, [r7, #4]
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	4618      	mov	r0, r3
 800e60e:	f000 fb8b 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800e612:	883b      	ldrh	r3, [r7, #0]
 800e614:	0a1b      	lsrs	r3, r3, #8
 800e616:	b29b      	uxth	r3, r3
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	4618      	mov	r0, r3
 800e61c:	f000 fb84 	bl	800ed28 <_LCD_SendData>
	_LCD_SendData(ep);
 800e620:	883b      	ldrh	r3, [r7, #0]
 800e622:	b2db      	uxtb	r3, r3
 800e624:	4618      	mov	r0, r3
 800e626:	f000 fb7f 	bl	800ed28 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800e62a:	202c      	movs	r0, #44	; 0x2c
 800e62c:	f000 fb4a 	bl	800ecc4 <_LCD_SendCommand>
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	bd90      	pop	{r4, r7, pc}

0800e638 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af02      	add	r7, sp, #8
 800e63e:	4603      	mov	r3, r0
 800e640:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800e642:	4b10      	ldr	r3, [pc, #64]	; (800e684 <ILI9341_Fill_Screen+0x4c>)
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	b29a      	uxth	r2, r3
 800e648:	4b0f      	ldr	r3, [pc, #60]	; (800e688 <ILI9341_Fill_Screen+0x50>)
 800e64a:	881b      	ldrh	r3, [r3, #0]
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	2100      	movs	r1, #0
 800e650:	2000      	movs	r0, #0
 800e652:	f7ff ffa5 	bl	800e5a0 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800e656:	4b0b      	ldr	r3, [pc, #44]	; (800e684 <ILI9341_Fill_Screen+0x4c>)
 800e658:	881b      	ldrh	r3, [r3, #0]
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	461a      	mov	r2, r3
 800e65e:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <ILI9341_Fill_Screen+0x50>)
 800e660:	881b      	ldrh	r3, [r3, #0]
 800e662:	b29b      	uxth	r3, r3
 800e664:	fb03 f302 	mul.w	r3, r3, r2
 800e668:	4619      	mov	r1, r3
 800e66a:	88fa      	ldrh	r2, [r7, #6]
 800e66c:	2304      	movs	r3, #4
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	460b      	mov	r3, r1
 800e672:	2100      	movs	r1, #0
 800e674:	2000      	movs	r0, #0
 800e676:	f000 fa75 	bl	800eb64 <_LCD_Write_Frame>
}
 800e67a:	bf00      	nop
 800e67c:	3708      	adds	r7, #8
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20000c3e 	.word	0x20000c3e
 800e688:	20000c3c 	.word	0x20000c3c

0800e68c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b08e      	sub	sp, #56	; 0x38
 800e690:	af00      	add	r7, sp, #0
 800e692:	4603      	mov	r3, r0
 800e694:	80fb      	strh	r3, [r7, #6]
 800e696:	460b      	mov	r3, r1
 800e698:	80bb      	strh	r3, [r7, #4]
 800e69a:	4613      	mov	r3, r2
 800e69c:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e69e:	4b98      	ldr	r3, [pc, #608]	; (800e900 <ILI9341_Draw_Pixel+0x274>)
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	88fa      	ldrh	r2, [r7, #6]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	f080 8143 	bcs.w	800e932 <ILI9341_Draw_Pixel+0x2a6>
 800e6ac:	4b95      	ldr	r3, [pc, #596]	; (800e904 <ILI9341_Draw_Pixel+0x278>)
 800e6ae:	881b      	ldrh	r3, [r3, #0]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	88ba      	ldrh	r2, [r7, #4]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	f080 813c 	bcs.w	800e932 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e6ba:	4b93      	ldr	r3, [pc, #588]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e6bc:	695b      	ldr	r3, [r3, #20]
 800e6be:	4a92      	ldr	r2, [pc, #584]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e6c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6c4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e6c6:	4b90      	ldr	r3, [pc, #576]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e6c8:	695b      	ldr	r3, [r3, #20]
 800e6ca:	4a8f      	ldr	r2, [pc, #572]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e6cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6d0:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800e6d2:	220a      	movs	r2, #10
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	202a      	movs	r0, #42	; 0x2a
 800e6d8:	f000 fb58 	bl	800ed8c <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e6dc:	2300      	movs	r3, #0
 800e6de:	637b      	str	r3, [r7, #52]	; 0x34
 800e6e0:	e008      	b.n	800e6f4 <ILI9341_Draw_Pixel+0x68>
 800e6e2:	4b89      	ldr	r3, [pc, #548]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e6e4:	695b      	ldr	r3, [r3, #20]
 800e6e6:	4a88      	ldr	r2, [pc, #544]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e6e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6ec:	6153      	str	r3, [r2, #20]
 800e6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	637b      	str	r3, [r7, #52]	; 0x34
 800e6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	ddf3      	ble.n	800e6e2 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e6fa:	4b83      	ldr	r3, [pc, #524]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e6fc:	695b      	ldr	r3, [r3, #20]
 800e6fe:	4a82      	ldr	r2, [pc, #520]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e704:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e706:	4b80      	ldr	r3, [pc, #512]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	4a7f      	ldr	r2, [pc, #508]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e710:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e712:	4b7d      	ldr	r3, [pc, #500]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e714:	695b      	ldr	r3, [r3, #20]
 800e716:	4a7c      	ldr	r2, [pc, #496]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e71c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800e71e:	88fb      	ldrh	r3, [r7, #6]
 800e720:	0a1b      	lsrs	r3, r3, #8
 800e722:	b29b      	uxth	r3, r3
 800e724:	b2db      	uxtb	r3, r3
 800e726:	753b      	strb	r3, [r7, #20]
 800e728:	88fb      	ldrh	r3, [r7, #6]
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	757b      	strb	r3, [r7, #21]
 800e72e:	88fb      	ldrh	r3, [r7, #6]
 800e730:	3301      	adds	r3, #1
 800e732:	121b      	asrs	r3, r3, #8
 800e734:	b2db      	uxtb	r3, r3
 800e736:	75bb      	strb	r3, [r7, #22]
 800e738:	88fb      	ldrh	r3, [r7, #6]
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	3301      	adds	r3, #1
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800e742:	f107 0014 	add.w	r0, r7, #20
 800e746:	230a      	movs	r3, #10
 800e748:	2200      	movs	r2, #0
 800e74a:	2104      	movs	r1, #4
 800e74c:	f000 fb50 	bl	800edf0 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e750:	2300      	movs	r3, #0
 800e752:	633b      	str	r3, [r7, #48]	; 0x30
 800e754:	e008      	b.n	800e768 <ILI9341_Draw_Pixel+0xdc>
 800e756:	4b6c      	ldr	r3, [pc, #432]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e758:	695b      	ldr	r3, [r3, #20]
 800e75a:	4a6b      	ldr	r2, [pc, #428]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e75c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e760:	6153      	str	r3, [r2, #20]
 800e762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e764:	3301      	adds	r3, #1
 800e766:	633b      	str	r3, [r7, #48]	; 0x30
 800e768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	ddf3      	ble.n	800e756 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e76e:	4b66      	ldr	r3, [pc, #408]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e770:	695b      	ldr	r3, [r3, #20]
 800e772:	4a65      	ldr	r2, [pc, #404]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e778:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e77a:	4b63      	ldr	r3, [pc, #396]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e77c:	695b      	ldr	r3, [r3, #20]
 800e77e:	4a62      	ldr	r2, [pc, #392]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e784:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e786:	4b60      	ldr	r3, [pc, #384]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e788:	695b      	ldr	r3, [r3, #20]
 800e78a:	4a5f      	ldr	r2, [pc, #380]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e78c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e790:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800e792:	220a      	movs	r2, #10
 800e794:	2100      	movs	r1, #0
 800e796:	202b      	movs	r0, #43	; 0x2b
 800e798:	f000 faf8 	bl	800ed8c <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e79c:	2300      	movs	r3, #0
 800e79e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7a0:	e008      	b.n	800e7b4 <ILI9341_Draw_Pixel+0x128>
 800e7a2:	4b59      	ldr	r3, [pc, #356]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e7a4:	695b      	ldr	r3, [r3, #20]
 800e7a6:	4a58      	ldr	r2, [pc, #352]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e7a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7ac:	6153      	str	r3, [r2, #20]
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	ddf3      	ble.n	800e7a2 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e7ba:	4b53      	ldr	r3, [pc, #332]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	4a52      	ldr	r2, [pc, #328]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7c4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e7c6:	4b50      	ldr	r3, [pc, #320]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e7c8:	695b      	ldr	r3, [r3, #20]
 800e7ca:	4a4f      	ldr	r2, [pc, #316]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d0:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e7d2:	4b4d      	ldr	r3, [pc, #308]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e7d4:	695b      	ldr	r3, [r3, #20]
 800e7d6:	4a4c      	ldr	r2, [pc, #304]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e7d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7dc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800e7de:	88bb      	ldrh	r3, [r7, #4]
 800e7e0:	0a1b      	lsrs	r3, r3, #8
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	743b      	strb	r3, [r7, #16]
 800e7e8:	88bb      	ldrh	r3, [r7, #4]
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	747b      	strb	r3, [r7, #17]
 800e7ee:	88bb      	ldrh	r3, [r7, #4]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	121b      	asrs	r3, r3, #8
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	74bb      	strb	r3, [r7, #18]
 800e7f8:	88bb      	ldrh	r3, [r7, #4]
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e802:	f107 0010 	add.w	r0, r7, #16
 800e806:	230a      	movs	r3, #10
 800e808:	2200      	movs	r2, #0
 800e80a:	2104      	movs	r1, #4
 800e80c:	f000 faf0 	bl	800edf0 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e810:	2300      	movs	r3, #0
 800e812:	62bb      	str	r3, [r7, #40]	; 0x28
 800e814:	e008      	b.n	800e828 <ILI9341_Draw_Pixel+0x19c>
 800e816:	4b3c      	ldr	r3, [pc, #240]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e818:	695b      	ldr	r3, [r3, #20]
 800e81a:	4a3b      	ldr	r2, [pc, #236]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e81c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e820:	6153      	str	r3, [r2, #20]
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	3301      	adds	r3, #1
 800e826:	62bb      	str	r3, [r7, #40]	; 0x28
 800e828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82a:	2b02      	cmp	r3, #2
 800e82c:	ddf3      	ble.n	800e816 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e82e:	4b36      	ldr	r3, [pc, #216]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e830:	695b      	ldr	r3, [r3, #20]
 800e832:	4a35      	ldr	r2, [pc, #212]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e838:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e83a:	4b33      	ldr	r3, [pc, #204]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e83c:	695b      	ldr	r3, [r3, #20]
 800e83e:	4a32      	ldr	r2, [pc, #200]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e844:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e846:	4b30      	ldr	r3, [pc, #192]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e848:	695b      	ldr	r3, [r3, #20]
 800e84a:	4a2f      	ldr	r2, [pc, #188]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e84c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e850:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800e852:	220a      	movs	r2, #10
 800e854:	2100      	movs	r1, #0
 800e856:	202c      	movs	r0, #44	; 0x2c
 800e858:	f000 fa98 	bl	800ed8c <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e85c:	2300      	movs	r3, #0
 800e85e:	627b      	str	r3, [r7, #36]	; 0x24
 800e860:	e008      	b.n	800e874 <ILI9341_Draw_Pixel+0x1e8>
 800e862:	4b29      	ldr	r3, [pc, #164]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e864:	695b      	ldr	r3, [r3, #20]
 800e866:	4a28      	ldr	r2, [pc, #160]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e86c:	6153      	str	r3, [r2, #20]
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	3301      	adds	r3, #1
 800e872:	627b      	str	r3, [r7, #36]	; 0x24
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	2b02      	cmp	r3, #2
 800e878:	ddf3      	ble.n	800e862 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e87a:	4b23      	ldr	r3, [pc, #140]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e87c:	695b      	ldr	r3, [r3, #20]
 800e87e:	4a22      	ldr	r2, [pc, #136]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e884:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e886:	4b20      	ldr	r3, [pc, #128]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e888:	695b      	ldr	r3, [r3, #20]
 800e88a:	4a1f      	ldr	r2, [pc, #124]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e890:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e892:	4b1d      	ldr	r3, [pc, #116]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e894:	695b      	ldr	r3, [r3, #20]
 800e896:	4a1c      	ldr	r2, [pc, #112]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e89c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e89e:	887b      	ldrh	r3, [r7, #2]
 800e8a0:	0a1b      	lsrs	r3, r3, #8
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	733b      	strb	r3, [r7, #12]
 800e8a8:	887b      	ldrh	r3, [r7, #2]
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800e8ae:	f107 000c 	add.w	r0, r7, #12
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	2102      	movs	r1, #2
 800e8b8:	f000 fa9a 	bl	800edf0 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e8bc:	2300      	movs	r3, #0
 800e8be:	623b      	str	r3, [r7, #32]
 800e8c0:	e008      	b.n	800e8d4 <ILI9341_Draw_Pixel+0x248>
 800e8c2:	4b11      	ldr	r3, [pc, #68]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e8c4:	695b      	ldr	r3, [r3, #20]
 800e8c6:	4a10      	ldr	r2, [pc, #64]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e8c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8cc:	6153      	str	r3, [r2, #20]
 800e8ce:	6a3b      	ldr	r3, [r7, #32]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	623b      	str	r3, [r7, #32]
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	ddf3      	ble.n	800e8c2 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e8da:	2300      	movs	r3, #0
 800e8dc:	61fb      	str	r3, [r7, #28]
 800e8de:	e008      	b.n	800e8f2 <ILI9341_Draw_Pixel+0x266>
 800e8e0:	4b09      	ldr	r3, [pc, #36]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e8e2:	695b      	ldr	r3, [r3, #20]
 800e8e4:	4a08      	ldr	r2, [pc, #32]	; (800e908 <ILI9341_Draw_Pixel+0x27c>)
 800e8e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8ea:	6153      	str	r3, [r2, #20]
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	61fb      	str	r3, [r7, #28]
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	ddf3      	ble.n	800e8e0 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	61bb      	str	r3, [r7, #24]
 800e8fc:	e00f      	b.n	800e91e <ILI9341_Draw_Pixel+0x292>
 800e8fe:	bf00      	nop
 800e900:	20000c3e 	.word	0x20000c3e
 800e904:	20000c3c 	.word	0x20000c3c
 800e908:	48000400 	.word	0x48000400
 800e90c:	4b0b      	ldr	r3, [pc, #44]	; (800e93c <ILI9341_Draw_Pixel+0x2b0>)
 800e90e:	695b      	ldr	r3, [r3, #20]
 800e910:	4a0a      	ldr	r2, [pc, #40]	; (800e93c <ILI9341_Draw_Pixel+0x2b0>)
 800e912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e916:	6153      	str	r3, [r2, #20]
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	3301      	adds	r3, #1
 800e91c:	61bb      	str	r3, [r7, #24]
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	2b02      	cmp	r3, #2
 800e922:	ddf3      	ble.n	800e90c <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e924:	4b05      	ldr	r3, [pc, #20]	; (800e93c <ILI9341_Draw_Pixel+0x2b0>)
 800e926:	695b      	ldr	r3, [r3, #20]
 800e928:	4a04      	ldr	r2, [pc, #16]	; (800e93c <ILI9341_Draw_Pixel+0x2b0>)
 800e92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e92e:	6153      	str	r3, [r2, #20]
 800e930:	e000      	b.n	800e934 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e932:	bf00      	nop


}
 800e934:	3738      	adds	r7, #56	; 0x38
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	48000400 	.word	0x48000400

0800e940 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800e940:	b590      	push	{r4, r7, lr}
 800e942:	b087      	sub	sp, #28
 800e944:	af02      	add	r7, sp, #8
 800e946:	4604      	mov	r4, r0
 800e948:	4608      	mov	r0, r1
 800e94a:	4611      	mov	r1, r2
 800e94c:	461a      	mov	r2, r3
 800e94e:	4623      	mov	r3, r4
 800e950:	80fb      	strh	r3, [r7, #6]
 800e952:	4603      	mov	r3, r0
 800e954:	80bb      	strh	r3, [r7, #4]
 800e956:	460b      	mov	r3, r1
 800e958:	807b      	strh	r3, [r7, #2]
 800e95a:	4613      	mov	r3, r2
 800e95c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e95e:	4b41      	ldr	r3, [pc, #260]	; (800ea64 <ILI9341_Draw_Rectangle+0x124>)
 800e960:	881b      	ldrh	r3, [r3, #0]
 800e962:	b29b      	uxth	r3, r3
 800e964:	88fa      	ldrh	r2, [r7, #6]
 800e966:	429a      	cmp	r2, r3
 800e968:	d278      	bcs.n	800ea5c <ILI9341_Draw_Rectangle+0x11c>
 800e96a:	4b3f      	ldr	r3, [pc, #252]	; (800ea68 <ILI9341_Draw_Rectangle+0x128>)
 800e96c:	881b      	ldrh	r3, [r3, #0]
 800e96e:	b29b      	uxth	r3, r3
 800e970:	88ba      	ldrh	r2, [r7, #4]
 800e972:	429a      	cmp	r2, r3
 800e974:	d272      	bcs.n	800ea5c <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800e976:	88fa      	ldrh	r2, [r7, #6]
 800e978:	887b      	ldrh	r3, [r7, #2]
 800e97a:	4413      	add	r3, r2
 800e97c:	3b01      	subs	r3, #1
 800e97e:	4a39      	ldr	r2, [pc, #228]	; (800ea64 <ILI9341_Draw_Rectangle+0x124>)
 800e980:	8812      	ldrh	r2, [r2, #0]
 800e982:	b292      	uxth	r2, r2
 800e984:	4293      	cmp	r3, r2
 800e986:	db05      	blt.n	800e994 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e988:	4b36      	ldr	r3, [pc, #216]	; (800ea64 <ILI9341_Draw_Rectangle+0x124>)
 800e98a:	881b      	ldrh	r3, [r3, #0]
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	88fb      	ldrh	r3, [r7, #6]
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e994:	88ba      	ldrh	r2, [r7, #4]
 800e996:	883b      	ldrh	r3, [r7, #0]
 800e998:	4413      	add	r3, r2
 800e99a:	3b01      	subs	r3, #1
 800e99c:	4a32      	ldr	r2, [pc, #200]	; (800ea68 <ILI9341_Draw_Rectangle+0x128>)
 800e99e:	8812      	ldrh	r2, [r2, #0]
 800e9a0:	b292      	uxth	r2, r2
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	db05      	blt.n	800e9b2 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e9a6:	4b30      	ldr	r3, [pc, #192]	; (800ea68 <ILI9341_Draw_Rectangle+0x128>)
 800e9a8:	881b      	ldrh	r3, [r3, #0]
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	88bb      	ldrh	r3, [r7, #4]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e9b2:	88fa      	ldrh	r2, [r7, #6]
 800e9b4:	887b      	ldrh	r3, [r7, #2]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e9be:	88ba      	ldrh	r2, [r7, #4]
 800e9c0:	883b      	ldrh	r3, [r7, #0]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e9c6:	3b01      	subs	r3, #1
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	88b9      	ldrh	r1, [r7, #4]
 800e9cc:	88f8      	ldrh	r0, [r7, #6]
 800e9ce:	4622      	mov	r2, r4
 800e9d0:	f7ff fde6 	bl	800e5a0 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e9d4:	883a      	ldrh	r2, [r7, #0]
 800e9d6:	887b      	ldrh	r3, [r7, #2]
 800e9d8:	fb12 f303 	smulbb	r3, r2, r3
 800e9dc:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e9e2:	89fb      	ldrh	r3, [r7, #14]
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d009      	beq.n	800ea00 <ILI9341_Draw_Rectangle+0xc0>
 800e9ec:	89fb      	ldrh	r3, [r7, #14]
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d906      	bls.n	800ea00 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e9f6:	89fb      	ldrh	r3, [r7, #14]
 800e9f8:	085b      	lsrs	r3, r3, #1
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	005b      	lsls	r3, r3, #1
 800e9fe:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ea00:	89fc      	ldrh	r4, [r7, #14]
 800ea02:	8c3a      	ldrh	r2, [r7, #32]
 800ea04:	88b9      	ldrh	r1, [r7, #4]
 800ea06:	88f8      	ldrh	r0, [r7, #6]
 800ea08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	4623      	mov	r3, r4
 800ea10:	f000 f8a8 	bl	800eb64 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800ea14:	7b7b      	ldrb	r3, [r7, #13]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d021      	beq.n	800ea5e <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ea1a:	88fa      	ldrh	r2, [r7, #6]
 800ea1c:	887b      	ldrh	r3, [r7, #2]
 800ea1e:	4413      	add	r3, r2
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	3b02      	subs	r3, #2
 800ea24:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ea26:	88ba      	ldrh	r2, [r7, #4]
 800ea28:	883b      	ldrh	r3, [r7, #0]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	8c3a      	ldrh	r2, [r7, #32]
 800ea34:	4619      	mov	r1, r3
 800ea36:	f7ff fe29 	bl	800e68c <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ea3a:	88fa      	ldrh	r2, [r7, #6]
 800ea3c:	887b      	ldrh	r3, [r7, #2]
 800ea3e:	4413      	add	r3, r2
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	3b01      	subs	r3, #1
 800ea44:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ea46:	88ba      	ldrh	r2, [r7, #4]
 800ea48:	883b      	ldrh	r3, [r7, #0]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	8c3a      	ldrh	r2, [r7, #32]
 800ea54:	4619      	mov	r1, r3
 800ea56:	f7ff fe19 	bl	800e68c <ILI9341_Draw_Pixel>
 800ea5a:	e000      	b.n	800ea5e <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ea5c:	bf00      	nop
							colour);
	}
}
 800ea5e:	3714      	adds	r7, #20
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd90      	pop	{r4, r7, pc}
 800ea64:	20000c3e 	.word	0x20000c3e
 800ea68:	20000c3c 	.word	0x20000c3c

0800ea6c <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800ea76:	79fb      	ldrb	r3, [r7, #7]
 800ea78:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800ea7a:	2036      	movs	r0, #54	; 0x36
 800ea7c:	f000 f922 	bl	800ecc4 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800ea80:	7bfb      	ldrb	r3, [r7, #15]
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d836      	bhi.n	800eaf4 <ILI9341_Set_Rotation+0x88>
 800ea86:	a201      	add	r2, pc, #4	; (adr r2, 800ea8c <ILI9341_Set_Rotation+0x20>)
 800ea88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea8c:	0800ea9d 	.word	0x0800ea9d
 800ea90:	0800eab3 	.word	0x0800eab3
 800ea94:	0800eac9 	.word	0x0800eac9
 800ea98:	0800eadf 	.word	0x0800eadf
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800ea9c:	2048      	movs	r0, #72	; 0x48
 800ea9e:	f000 f943 	bl	800ed28 <_LCD_SendData>
			LCD_WIDTH = 240;
 800eaa2:	4b17      	ldr	r3, [pc, #92]	; (800eb00 <ILI9341_Set_Rotation+0x94>)
 800eaa4:	22f0      	movs	r2, #240	; 0xf0
 800eaa6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800eaa8:	4b16      	ldr	r3, [pc, #88]	; (800eb04 <ILI9341_Set_Rotation+0x98>)
 800eaaa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800eaae:	801a      	strh	r2, [r3, #0]
			break;
 800eab0:	e021      	b.n	800eaf6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800eab2:	2028      	movs	r0, #40	; 0x28
 800eab4:	f000 f938 	bl	800ed28 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800eab8:	4b11      	ldr	r3, [pc, #68]	; (800eb00 <ILI9341_Set_Rotation+0x94>)
 800eaba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800eabe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800eac0:	4b10      	ldr	r3, [pc, #64]	; (800eb04 <ILI9341_Set_Rotation+0x98>)
 800eac2:	22f0      	movs	r2, #240	; 0xf0
 800eac4:	801a      	strh	r2, [r3, #0]
			break;
 800eac6:	e016      	b.n	800eaf6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800eac8:	2088      	movs	r0, #136	; 0x88
 800eaca:	f000 f92d 	bl	800ed28 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800eace:	4b0c      	ldr	r3, [pc, #48]	; (800eb00 <ILI9341_Set_Rotation+0x94>)
 800ead0:	22f0      	movs	r2, #240	; 0xf0
 800ead2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ead4:	4b0b      	ldr	r3, [pc, #44]	; (800eb04 <ILI9341_Set_Rotation+0x98>)
 800ead6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800eada:	801a      	strh	r2, [r3, #0]
			break;
 800eadc:	e00b      	b.n	800eaf6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800eade:	20e8      	movs	r0, #232	; 0xe8
 800eae0:	f000 f922 	bl	800ed28 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800eae4:	4b06      	ldr	r3, [pc, #24]	; (800eb00 <ILI9341_Set_Rotation+0x94>)
 800eae6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800eaea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800eaec:	4b05      	ldr	r3, [pc, #20]	; (800eb04 <ILI9341_Set_Rotation+0x98>)
 800eaee:	22f0      	movs	r2, #240	; 0xf0
 800eaf0:	801a      	strh	r2, [r3, #0]
			break;
 800eaf2:	e000      	b.n	800eaf6 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800eaf4:	bf00      	nop
	}
}
 800eaf6:	bf00      	nop
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	20000c3e 	.word	0x20000c3e
 800eb04:	20000c3c 	.word	0x20000c3c

0800eb08 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800eb08:	b480      	push	{r7}
 800eb0a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800eb0c:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <_LCD_Enable+0x1c>)
 800eb0e:	695b      	ldr	r3, [r3, #20]
 800eb10:	4a04      	ldr	r2, [pc, #16]	; (800eb24 <_LCD_Enable+0x1c>)
 800eb12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb16:	6153      	str	r3, [r2, #20]
}
 800eb18:	bf00      	nop
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	48000400 	.word	0x48000400

0800eb28 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800eb2c:	4b0c      	ldr	r3, [pc, #48]	; (800eb60 <_LCD_Reset+0x38>)
 800eb2e:	695b      	ldr	r3, [r3, #20]
 800eb30:	4a0b      	ldr	r2, [pc, #44]	; (800eb60 <_LCD_Reset+0x38>)
 800eb32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb36:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800eb38:	20c8      	movs	r0, #200	; 0xc8
 800eb3a:	f7f9 f997 	bl	8007e6c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb3e:	4b08      	ldr	r3, [pc, #32]	; (800eb60 <_LCD_Reset+0x38>)
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	4a07      	ldr	r2, [pc, #28]	; (800eb60 <_LCD_Reset+0x38>)
 800eb44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb48:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800eb4a:	20c8      	movs	r0, #200	; 0xc8
 800eb4c:	f7f9 f98e 	bl	8007e6c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800eb50:	4b03      	ldr	r3, [pc, #12]	; (800eb60 <_LCD_Reset+0x38>)
 800eb52:	695b      	ldr	r3, [r3, #20]
 800eb54:	4a02      	ldr	r2, [pc, #8]	; (800eb60 <_LCD_Reset+0x38>)
 800eb56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb5a:	6153      	str	r3, [r2, #20]
}
 800eb5c:	bf00      	nop
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	48000400 	.word	0x48000400

0800eb64 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800eb64:	b5b0      	push	{r4, r5, r7, lr}
 800eb66:	b08e      	sub	sp, #56	; 0x38
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	607b      	str	r3, [r7, #4]
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	81fb      	strh	r3, [r7, #14]
 800eb70:	460b      	mov	r3, r1
 800eb72:	81bb      	strh	r3, [r7, #12]
 800eb74:	4613      	mov	r3, r2
 800eb76:	817b      	strh	r3, [r7, #10]
 800eb78:	466b      	mov	r3, sp
 800eb7a:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	005b      	lsls	r3, r3, #1
 800eb84:	4a4d      	ldr	r2, [pc, #308]	; (800ecbc <_LCD_Write_Frame+0x158>)
 800eb86:	8812      	ldrh	r2, [r2, #0]
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d202      	bcs.n	800eb92 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb90:	e002      	b.n	800eb98 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800eb92:	4b4a      	ldr	r3, [pc, #296]	; (800ecbc <_LCD_Write_Frame+0x158>)
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800eb98:	897b      	ldrh	r3, [r7, #10]
 800eb9a:	0a1b      	lsrs	r3, r3, #8
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800eba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eba2:	4603      	mov	r3, r0
 800eba4:	3b01      	subs	r3, #1
 800eba6:	61bb      	str	r3, [r7, #24]
 800eba8:	4601      	mov	r1, r0
 800ebaa:	f04f 0200 	mov.w	r2, #0
 800ebae:	f04f 0300 	mov.w	r3, #0
 800ebb2:	f04f 0400 	mov.w	r4, #0
 800ebb6:	00d4      	lsls	r4, r2, #3
 800ebb8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ebbc:	00cb      	lsls	r3, r1, #3
 800ebbe:	4601      	mov	r1, r0
 800ebc0:	f04f 0200 	mov.w	r2, #0
 800ebc4:	f04f 0300 	mov.w	r3, #0
 800ebc8:	f04f 0400 	mov.w	r4, #0
 800ebcc:	00d4      	lsls	r4, r2, #3
 800ebce:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ebd2:	00cb      	lsls	r3, r1, #3
 800ebd4:	1dc3      	adds	r3, r0, #7
 800ebd6:	08db      	lsrs	r3, r3, #3
 800ebd8:	00db      	lsls	r3, r3, #3
 800ebda:	ebad 0d03 	sub.w	sp, sp, r3
 800ebde:	466b      	mov	r3, sp
 800ebe0:	3300      	adds	r3, #0
 800ebe2:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	633b      	str	r3, [r7, #48]	; 0x30
 800ebe8:	e00d      	b.n	800ec06 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800ebea:	697a      	ldr	r2, [r7, #20]
 800ebec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebee:	4413      	add	r3, r2
 800ebf0:	7ffa      	ldrb	r2, [r7, #31]
 800ebf2:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800ebf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	897a      	ldrh	r2, [r7, #10]
 800ebfa:	b2d1      	uxtb	r1, r2
 800ebfc:	697a      	ldr	r2, [r7, #20]
 800ebfe:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	3302      	adds	r3, #2
 800ec04:	633b      	str	r3, [r7, #48]	; 0x30
 800ec06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d3ed      	bcc.n	800ebea <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	005b      	lsls	r3, r3, #1
 800ec12:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800ec14:	2301      	movs	r3, #1
 800ec16:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d00d      	beq.n	800ec3e <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec2a:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec30:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec36:	fb01 f202 	mul.w	r2, r1, r2
 800ec3a:	1a9b      	subs	r3, r3, r2
 800ec3c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ec3e:	4b20      	ldr	r3, [pc, #128]	; (800ecc0 <_LCD_Write_Frame+0x15c>)
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	4a1f      	ldr	r2, [pc, #124]	; (800ecc0 <_LCD_Write_Frame+0x15c>)
 800ec44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec48:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec4a:	4b1d      	ldr	r3, [pc, #116]	; (800ecc0 <_LCD_Write_Frame+0x15c>)
 800ec4c:	695b      	ldr	r3, [r3, #20]
 800ec4e:	4a1c      	ldr	r2, [pc, #112]	; (800ecc0 <_LCD_Write_Frame+0x15c>)
 800ec50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec54:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800ec56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00f      	beq.n	800ec7c <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec60:	e008      	b.n	800ec74 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800ec62:	6978      	ldr	r0, [r7, #20]
 800ec64:	230a      	movs	r3, #10
 800ec66:	2200      	movs	r2, #0
 800ec68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec6a:	f000 f8c1 	bl	800edf0 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec70:	3301      	adds	r3, #1
 800ec72:	627b      	str	r3, [r7, #36]	; 0x24
 800ec74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d3f2      	bcc.n	800ec62 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800ec7c:	6978      	ldr	r0, [r7, #20]
 800ec7e:	230a      	movs	r3, #10
 800ec80:	2200      	movs	r2, #0
 800ec82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec84:	f000 f8b4 	bl	800edf0 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ec88:	2300      	movs	r3, #0
 800ec8a:	623b      	str	r3, [r7, #32]
 800ec8c:	e008      	b.n	800eca0 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec8e:	4b0c      	ldr	r3, [pc, #48]	; (800ecc0 <_LCD_Write_Frame+0x15c>)
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	4a0b      	ldr	r2, [pc, #44]	; (800ecc0 <_LCD_Write_Frame+0x15c>)
 800ec94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec98:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	623b      	str	r3, [r7, #32]
 800eca0:	6a3b      	ldr	r3, [r7, #32]
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	ddf3      	ble.n	800ec8e <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800eca6:	4b06      	ldr	r3, [pc, #24]	; (800ecc0 <_LCD_Write_Frame+0x15c>)
 800eca8:	695b      	ldr	r3, [r3, #20]
 800ecaa:	4a05      	ldr	r2, [pc, #20]	; (800ecc0 <_LCD_Write_Frame+0x15c>)
 800ecac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecb0:	6153      	str	r3, [r2, #20]
 800ecb2:	46ad      	mov	sp, r5

}
 800ecb4:	bf00      	nop
 800ecb6:	3738      	adds	r7, #56	; 0x38
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bdb0      	pop	{r4, r5, r7, pc}
 800ecbc:	20000c40 	.word	0x20000c40
 800ecc0:	48000400 	.word	0x48000400

0800ecc4 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	4603      	mov	r3, r0
 800eccc:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ecce:	4b15      	ldr	r3, [pc, #84]	; (800ed24 <_LCD_SendCommand+0x60>)
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	4a14      	ldr	r2, [pc, #80]	; (800ed24 <_LCD_SendCommand+0x60>)
 800ecd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecd8:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ecda:	4b12      	ldr	r3, [pc, #72]	; (800ed24 <_LCD_SendCommand+0x60>)
 800ecdc:	695b      	ldr	r3, [r3, #20]
 800ecde:	4a11      	ldr	r2, [pc, #68]	; (800ed24 <_LCD_SendCommand+0x60>)
 800ece0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ece4:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800ece6:	79fb      	ldrb	r3, [r7, #7]
 800ece8:	2200      	movs	r2, #0
 800ecea:	2100      	movs	r1, #0
 800ecec:	4618      	mov	r0, r3
 800ecee:	f000 f84d 	bl	800ed8c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	60fb      	str	r3, [r7, #12]
 800ecf6:	e008      	b.n	800ed0a <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ecf8:	4b0a      	ldr	r3, [pc, #40]	; (800ed24 <_LCD_SendCommand+0x60>)
 800ecfa:	695b      	ldr	r3, [r3, #20]
 800ecfc:	4a09      	ldr	r2, [pc, #36]	; (800ed24 <_LCD_SendCommand+0x60>)
 800ecfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed02:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	3301      	adds	r3, #1
 800ed08:	60fb      	str	r3, [r7, #12]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	ddf3      	ble.n	800ecf8 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ed10:	4b04      	ldr	r3, [pc, #16]	; (800ed24 <_LCD_SendCommand+0x60>)
 800ed12:	695b      	ldr	r3, [r3, #20]
 800ed14:	4a03      	ldr	r2, [pc, #12]	; (800ed24 <_LCD_SendCommand+0x60>)
 800ed16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed1a:	6153      	str	r3, [r2, #20]
}
 800ed1c:	bf00      	nop
 800ed1e:	3710      	adds	r7, #16
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	48000400 	.word	0x48000400

0800ed28 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	4603      	mov	r3, r0
 800ed30:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ed32:	4b15      	ldr	r3, [pc, #84]	; (800ed88 <_LCD_SendData+0x60>)
 800ed34:	695b      	ldr	r3, [r3, #20]
 800ed36:	4a14      	ldr	r2, [pc, #80]	; (800ed88 <_LCD_SendData+0x60>)
 800ed38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed3c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed3e:	4b12      	ldr	r3, [pc, #72]	; (800ed88 <_LCD_SendData+0x60>)
 800ed40:	695b      	ldr	r3, [r3, #20]
 800ed42:	4a11      	ldr	r2, [pc, #68]	; (800ed88 <_LCD_SendData+0x60>)
 800ed44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed48:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800ed4a:	79fb      	ldrb	r3, [r7, #7]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2100      	movs	r1, #0
 800ed50:	4618      	mov	r0, r3
 800ed52:	f000 f81b 	bl	800ed8c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ed56:	2300      	movs	r3, #0
 800ed58:	60fb      	str	r3, [r7, #12]
 800ed5a:	e008      	b.n	800ed6e <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed5c:	4b0a      	ldr	r3, [pc, #40]	; (800ed88 <_LCD_SendData+0x60>)
 800ed5e:	695b      	ldr	r3, [r3, #20]
 800ed60:	4a09      	ldr	r2, [pc, #36]	; (800ed88 <_LCD_SendData+0x60>)
 800ed62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed66:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	60fb      	str	r3, [r7, #12]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	ddf3      	ble.n	800ed5c <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed74:	4b04      	ldr	r3, [pc, #16]	; (800ed88 <_LCD_SendData+0x60>)
 800ed76:	695b      	ldr	r3, [r3, #20]
 800ed78:	4a03      	ldr	r2, [pc, #12]	; (800ed88 <_LCD_SendData+0x60>)
 800ed7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed7e:	6153      	str	r3, [r2, #20]
}
 800ed80:	bf00      	nop
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	48000400 	.word	0x48000400

0800ed8c <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	4603      	mov	r3, r0
 800ed94:	71fb      	strb	r3, [r7, #7]
 800ed96:	460b      	mov	r3, r1
 800ed98:	71bb      	strb	r3, [r7, #6]
 800ed9a:	4613      	mov	r3, r2
 800ed9c:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ed9e:	2300      	movs	r3, #0
 800eda0:	60fb      	str	r3, [r7, #12]
 800eda2:	e003      	b.n	800edac <_SPI_SendByte+0x20>
   		asm("nop");
 800eda4:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	3301      	adds	r3, #1
 800edaa:	60fb      	str	r3, [r7, #12]
 800edac:	79bb      	ldrb	r3, [r7, #6]
 800edae:	68fa      	ldr	r2, [r7, #12]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	dbf7      	blt.n	800eda4 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800edb4:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <_SPI_SendByte+0x5c>)
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	f003 0302 	and.w	r3, r3, #2
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d102      	bne.n	800edc6 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800edc0:	4a0a      	ldr	r2, [pc, #40]	; (800edec <_SPI_SendByte+0x60>)
 800edc2:	79fb      	ldrb	r3, [r7, #7]
 800edc4:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800edc6:	2300      	movs	r3, #0
 800edc8:	60bb      	str	r3, [r7, #8]
 800edca:	e003      	b.n	800edd4 <_SPI_SendByte+0x48>
   		asm("nop");
 800edcc:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	3301      	adds	r3, #1
 800edd2:	60bb      	str	r3, [r7, #8]
 800edd4:	797b      	ldrb	r3, [r7, #5]
 800edd6:	68ba      	ldr	r2, [r7, #8]
 800edd8:	429a      	cmp	r2, r3
 800edda:	dbf7      	blt.n	800edcc <_SPI_SendByte+0x40>

#endif

}
 800eddc:	bf00      	nop
 800edde:	3714      	adds	r7, #20
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	40003c00 	.word	0x40003c00
 800edec:	40003c0c 	.word	0x40003c0c

0800edf0 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b089      	sub	sp, #36	; 0x24
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	4611      	mov	r1, r2
 800edfc:	461a      	mov	r2, r3
 800edfe:	460b      	mov	r3, r1
 800ee00:	71fb      	strb	r3, [r7, #7]
 800ee02:	4613      	mov	r3, r2
 800ee04:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ee06:	2300      	movs	r3, #0
 800ee08:	61fb      	str	r3, [r7, #28]
 800ee0a:	e003      	b.n	800ee14 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800ee0c:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	3301      	adds	r3, #1
 800ee12:	61fb      	str	r3, [r7, #28]
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	69fa      	ldr	r2, [r7, #28]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	dbf7      	blt.n	800ee0c <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800ee20:	e01d      	b.n	800ee5e <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ee22:	4b1c      	ldr	r3, [pc, #112]	; (800ee94 <_SPI_SendByteMultiByte+0xa4>)
 800ee24:	689b      	ldr	r3, [r3, #8]
 800ee26:	f003 0302 	and.w	r3, r3, #2
 800ee2a:	2b02      	cmp	r3, #2
 800ee2c:	d117      	bne.n	800ee5e <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d90a      	bls.n	800ee4a <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	881a      	ldrh	r2, [r3, #0]
 800ee38:	4b16      	ldr	r3, [pc, #88]	; (800ee94 <_SPI_SendByteMultiByte+0xa4>)
 800ee3a:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	3302      	adds	r3, #2
 800ee40:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	3b02      	subs	r3, #2
 800ee46:	60bb      	str	r3, [r7, #8]
 800ee48:	e009      	b.n	800ee5e <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800ee4a:	4a13      	ldr	r2, [pc, #76]	; (800ee98 <_SPI_SendByteMultiByte+0xa8>)
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	3301      	adds	r3, #1
 800ee56:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1de      	bne.n	800ee22 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800ee64:	4b0b      	ldr	r3, [pc, #44]	; (800ee94 <_SPI_SendByteMultiByte+0xa4>)
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	4a0a      	ldr	r2, [pc, #40]	; (800ee94 <_SPI_SendByteMultiByte+0xa4>)
 800ee6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee6e:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800ee70:	2300      	movs	r3, #0
 800ee72:	617b      	str	r3, [r7, #20]
 800ee74:	e003      	b.n	800ee7e <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800ee76:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	617b      	str	r3, [r7, #20]
 800ee7e:	79bb      	ldrb	r3, [r7, #6]
 800ee80:	697a      	ldr	r2, [r7, #20]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	dbf7      	blt.n	800ee76 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800ee86:	bf00      	nop
 800ee88:	3724      	adds	r7, #36	; 0x24
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	40003c00 	.word	0x40003c00
 800ee98:	40003c0c 	.word	0x40003c0c

0800ee9c <__errno>:
 800ee9c:	4b01      	ldr	r3, [pc, #4]	; (800eea4 <__errno+0x8>)
 800ee9e:	6818      	ldr	r0, [r3, #0]
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	20001c34 	.word	0x20001c34

0800eea8 <__libc_init_array>:
 800eea8:	b570      	push	{r4, r5, r6, lr}
 800eeaa:	4e0d      	ldr	r6, [pc, #52]	; (800eee0 <__libc_init_array+0x38>)
 800eeac:	4c0d      	ldr	r4, [pc, #52]	; (800eee4 <__libc_init_array+0x3c>)
 800eeae:	1ba4      	subs	r4, r4, r6
 800eeb0:	10a4      	asrs	r4, r4, #2
 800eeb2:	2500      	movs	r5, #0
 800eeb4:	42a5      	cmp	r5, r4
 800eeb6:	d109      	bne.n	800eecc <__libc_init_array+0x24>
 800eeb8:	4e0b      	ldr	r6, [pc, #44]	; (800eee8 <__libc_init_array+0x40>)
 800eeba:	4c0c      	ldr	r4, [pc, #48]	; (800eeec <__libc_init_array+0x44>)
 800eebc:	f003 ff46 	bl	8012d4c <_init>
 800eec0:	1ba4      	subs	r4, r4, r6
 800eec2:	10a4      	asrs	r4, r4, #2
 800eec4:	2500      	movs	r5, #0
 800eec6:	42a5      	cmp	r5, r4
 800eec8:	d105      	bne.n	800eed6 <__libc_init_array+0x2e>
 800eeca:	bd70      	pop	{r4, r5, r6, pc}
 800eecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eed0:	4798      	blx	r3
 800eed2:	3501      	adds	r5, #1
 800eed4:	e7ee      	b.n	800eeb4 <__libc_init_array+0xc>
 800eed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eeda:	4798      	blx	r3
 800eedc:	3501      	adds	r5, #1
 800eede:	e7f2      	b.n	800eec6 <__libc_init_array+0x1e>
 800eee0:	080141e0 	.word	0x080141e0
 800eee4:	080141e0 	.word	0x080141e0
 800eee8:	080141e0 	.word	0x080141e0
 800eeec:	080141e4 	.word	0x080141e4

0800eef0 <memset>:
 800eef0:	4402      	add	r2, r0
 800eef2:	4603      	mov	r3, r0
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d100      	bne.n	800eefa <memset+0xa>
 800eef8:	4770      	bx	lr
 800eefa:	f803 1b01 	strb.w	r1, [r3], #1
 800eefe:	e7f9      	b.n	800eef4 <memset+0x4>

0800ef00 <__cvt>:
 800ef00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef04:	ec55 4b10 	vmov	r4, r5, d0
 800ef08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ef0a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ef0e:	2d00      	cmp	r5, #0
 800ef10:	460e      	mov	r6, r1
 800ef12:	4691      	mov	r9, r2
 800ef14:	4619      	mov	r1, r3
 800ef16:	bfb8      	it	lt
 800ef18:	4622      	movlt	r2, r4
 800ef1a:	462b      	mov	r3, r5
 800ef1c:	f027 0720 	bic.w	r7, r7, #32
 800ef20:	bfbb      	ittet	lt
 800ef22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ef26:	461d      	movlt	r5, r3
 800ef28:	2300      	movge	r3, #0
 800ef2a:	232d      	movlt	r3, #45	; 0x2d
 800ef2c:	bfb8      	it	lt
 800ef2e:	4614      	movlt	r4, r2
 800ef30:	2f46      	cmp	r7, #70	; 0x46
 800ef32:	700b      	strb	r3, [r1, #0]
 800ef34:	d004      	beq.n	800ef40 <__cvt+0x40>
 800ef36:	2f45      	cmp	r7, #69	; 0x45
 800ef38:	d100      	bne.n	800ef3c <__cvt+0x3c>
 800ef3a:	3601      	adds	r6, #1
 800ef3c:	2102      	movs	r1, #2
 800ef3e:	e000      	b.n	800ef42 <__cvt+0x42>
 800ef40:	2103      	movs	r1, #3
 800ef42:	ab03      	add	r3, sp, #12
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	ab02      	add	r3, sp, #8
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	4632      	mov	r2, r6
 800ef4c:	4653      	mov	r3, sl
 800ef4e:	ec45 4b10 	vmov	d0, r4, r5
 800ef52:	f000 fe25 	bl	800fba0 <_dtoa_r>
 800ef56:	2f47      	cmp	r7, #71	; 0x47
 800ef58:	4680      	mov	r8, r0
 800ef5a:	d102      	bne.n	800ef62 <__cvt+0x62>
 800ef5c:	f019 0f01 	tst.w	r9, #1
 800ef60:	d026      	beq.n	800efb0 <__cvt+0xb0>
 800ef62:	2f46      	cmp	r7, #70	; 0x46
 800ef64:	eb08 0906 	add.w	r9, r8, r6
 800ef68:	d111      	bne.n	800ef8e <__cvt+0x8e>
 800ef6a:	f898 3000 	ldrb.w	r3, [r8]
 800ef6e:	2b30      	cmp	r3, #48	; 0x30
 800ef70:	d10a      	bne.n	800ef88 <__cvt+0x88>
 800ef72:	2200      	movs	r2, #0
 800ef74:	2300      	movs	r3, #0
 800ef76:	4620      	mov	r0, r4
 800ef78:	4629      	mov	r1, r5
 800ef7a:	f7f1 fdcd 	bl	8000b18 <__aeabi_dcmpeq>
 800ef7e:	b918      	cbnz	r0, 800ef88 <__cvt+0x88>
 800ef80:	f1c6 0601 	rsb	r6, r6, #1
 800ef84:	f8ca 6000 	str.w	r6, [sl]
 800ef88:	f8da 3000 	ldr.w	r3, [sl]
 800ef8c:	4499      	add	r9, r3
 800ef8e:	2200      	movs	r2, #0
 800ef90:	2300      	movs	r3, #0
 800ef92:	4620      	mov	r0, r4
 800ef94:	4629      	mov	r1, r5
 800ef96:	f7f1 fdbf 	bl	8000b18 <__aeabi_dcmpeq>
 800ef9a:	b938      	cbnz	r0, 800efac <__cvt+0xac>
 800ef9c:	2230      	movs	r2, #48	; 0x30
 800ef9e:	9b03      	ldr	r3, [sp, #12]
 800efa0:	454b      	cmp	r3, r9
 800efa2:	d205      	bcs.n	800efb0 <__cvt+0xb0>
 800efa4:	1c59      	adds	r1, r3, #1
 800efa6:	9103      	str	r1, [sp, #12]
 800efa8:	701a      	strb	r2, [r3, #0]
 800efaa:	e7f8      	b.n	800ef9e <__cvt+0x9e>
 800efac:	f8cd 900c 	str.w	r9, [sp, #12]
 800efb0:	9b03      	ldr	r3, [sp, #12]
 800efb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efb4:	eba3 0308 	sub.w	r3, r3, r8
 800efb8:	4640      	mov	r0, r8
 800efba:	6013      	str	r3, [r2, #0]
 800efbc:	b004      	add	sp, #16
 800efbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800efc2 <__exponent>:
 800efc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efc4:	2900      	cmp	r1, #0
 800efc6:	4604      	mov	r4, r0
 800efc8:	bfba      	itte	lt
 800efca:	4249      	neglt	r1, r1
 800efcc:	232d      	movlt	r3, #45	; 0x2d
 800efce:	232b      	movge	r3, #43	; 0x2b
 800efd0:	2909      	cmp	r1, #9
 800efd2:	f804 2b02 	strb.w	r2, [r4], #2
 800efd6:	7043      	strb	r3, [r0, #1]
 800efd8:	dd20      	ble.n	800f01c <__exponent+0x5a>
 800efda:	f10d 0307 	add.w	r3, sp, #7
 800efde:	461f      	mov	r7, r3
 800efe0:	260a      	movs	r6, #10
 800efe2:	fb91 f5f6 	sdiv	r5, r1, r6
 800efe6:	fb06 1115 	mls	r1, r6, r5, r1
 800efea:	3130      	adds	r1, #48	; 0x30
 800efec:	2d09      	cmp	r5, #9
 800efee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eff2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800eff6:	4629      	mov	r1, r5
 800eff8:	dc09      	bgt.n	800f00e <__exponent+0x4c>
 800effa:	3130      	adds	r1, #48	; 0x30
 800effc:	3b02      	subs	r3, #2
 800effe:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f002:	42bb      	cmp	r3, r7
 800f004:	4622      	mov	r2, r4
 800f006:	d304      	bcc.n	800f012 <__exponent+0x50>
 800f008:	1a10      	subs	r0, r2, r0
 800f00a:	b003      	add	sp, #12
 800f00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f00e:	4613      	mov	r3, r2
 800f010:	e7e7      	b.n	800efe2 <__exponent+0x20>
 800f012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f016:	f804 2b01 	strb.w	r2, [r4], #1
 800f01a:	e7f2      	b.n	800f002 <__exponent+0x40>
 800f01c:	2330      	movs	r3, #48	; 0x30
 800f01e:	4419      	add	r1, r3
 800f020:	7083      	strb	r3, [r0, #2]
 800f022:	1d02      	adds	r2, r0, #4
 800f024:	70c1      	strb	r1, [r0, #3]
 800f026:	e7ef      	b.n	800f008 <__exponent+0x46>

0800f028 <_printf_float>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	b08d      	sub	sp, #52	; 0x34
 800f02e:	460c      	mov	r4, r1
 800f030:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f034:	4616      	mov	r6, r2
 800f036:	461f      	mov	r7, r3
 800f038:	4605      	mov	r5, r0
 800f03a:	f001 fce3 	bl	8010a04 <_localeconv_r>
 800f03e:	6803      	ldr	r3, [r0, #0]
 800f040:	9304      	str	r3, [sp, #16]
 800f042:	4618      	mov	r0, r3
 800f044:	f7f1 f8ec 	bl	8000220 <strlen>
 800f048:	2300      	movs	r3, #0
 800f04a:	930a      	str	r3, [sp, #40]	; 0x28
 800f04c:	f8d8 3000 	ldr.w	r3, [r8]
 800f050:	9005      	str	r0, [sp, #20]
 800f052:	3307      	adds	r3, #7
 800f054:	f023 0307 	bic.w	r3, r3, #7
 800f058:	f103 0208 	add.w	r2, r3, #8
 800f05c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f060:	f8d4 b000 	ldr.w	fp, [r4]
 800f064:	f8c8 2000 	str.w	r2, [r8]
 800f068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f070:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f074:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f078:	9307      	str	r3, [sp, #28]
 800f07a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f07e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f082:	4ba7      	ldr	r3, [pc, #668]	; (800f320 <_printf_float+0x2f8>)
 800f084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f088:	f7f1 fd78 	bl	8000b7c <__aeabi_dcmpun>
 800f08c:	bb70      	cbnz	r0, 800f0ec <_printf_float+0xc4>
 800f08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f092:	4ba3      	ldr	r3, [pc, #652]	; (800f320 <_printf_float+0x2f8>)
 800f094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f098:	f7f1 fd52 	bl	8000b40 <__aeabi_dcmple>
 800f09c:	bb30      	cbnz	r0, 800f0ec <_printf_float+0xc4>
 800f09e:	2200      	movs	r2, #0
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	4640      	mov	r0, r8
 800f0a4:	4649      	mov	r1, r9
 800f0a6:	f7f1 fd41 	bl	8000b2c <__aeabi_dcmplt>
 800f0aa:	b110      	cbz	r0, 800f0b2 <_printf_float+0x8a>
 800f0ac:	232d      	movs	r3, #45	; 0x2d
 800f0ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0b2:	4a9c      	ldr	r2, [pc, #624]	; (800f324 <_printf_float+0x2fc>)
 800f0b4:	4b9c      	ldr	r3, [pc, #624]	; (800f328 <_printf_float+0x300>)
 800f0b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f0ba:	bf8c      	ite	hi
 800f0bc:	4690      	movhi	r8, r2
 800f0be:	4698      	movls	r8, r3
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	f02b 0204 	bic.w	r2, fp, #4
 800f0c6:	6123      	str	r3, [r4, #16]
 800f0c8:	6022      	str	r2, [r4, #0]
 800f0ca:	f04f 0900 	mov.w	r9, #0
 800f0ce:	9700      	str	r7, [sp, #0]
 800f0d0:	4633      	mov	r3, r6
 800f0d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	f000 f9e6 	bl	800f4a8 <_printf_common>
 800f0dc:	3001      	adds	r0, #1
 800f0de:	f040 808d 	bne.w	800f1fc <_printf_float+0x1d4>
 800f0e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0e6:	b00d      	add	sp, #52	; 0x34
 800f0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ec:	4642      	mov	r2, r8
 800f0ee:	464b      	mov	r3, r9
 800f0f0:	4640      	mov	r0, r8
 800f0f2:	4649      	mov	r1, r9
 800f0f4:	f7f1 fd42 	bl	8000b7c <__aeabi_dcmpun>
 800f0f8:	b110      	cbz	r0, 800f100 <_printf_float+0xd8>
 800f0fa:	4a8c      	ldr	r2, [pc, #560]	; (800f32c <_printf_float+0x304>)
 800f0fc:	4b8c      	ldr	r3, [pc, #560]	; (800f330 <_printf_float+0x308>)
 800f0fe:	e7da      	b.n	800f0b6 <_printf_float+0x8e>
 800f100:	6861      	ldr	r1, [r4, #4]
 800f102:	1c4b      	adds	r3, r1, #1
 800f104:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f108:	a80a      	add	r0, sp, #40	; 0x28
 800f10a:	d13e      	bne.n	800f18a <_printf_float+0x162>
 800f10c:	2306      	movs	r3, #6
 800f10e:	6063      	str	r3, [r4, #4]
 800f110:	2300      	movs	r3, #0
 800f112:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f116:	ab09      	add	r3, sp, #36	; 0x24
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	ec49 8b10 	vmov	d0, r8, r9
 800f11e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f122:	6022      	str	r2, [r4, #0]
 800f124:	f8cd a004 	str.w	sl, [sp, #4]
 800f128:	6861      	ldr	r1, [r4, #4]
 800f12a:	4628      	mov	r0, r5
 800f12c:	f7ff fee8 	bl	800ef00 <__cvt>
 800f130:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f134:	2b47      	cmp	r3, #71	; 0x47
 800f136:	4680      	mov	r8, r0
 800f138:	d109      	bne.n	800f14e <_printf_float+0x126>
 800f13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f13c:	1cd8      	adds	r0, r3, #3
 800f13e:	db02      	blt.n	800f146 <_printf_float+0x11e>
 800f140:	6862      	ldr	r2, [r4, #4]
 800f142:	4293      	cmp	r3, r2
 800f144:	dd47      	ble.n	800f1d6 <_printf_float+0x1ae>
 800f146:	f1aa 0a02 	sub.w	sl, sl, #2
 800f14a:	fa5f fa8a 	uxtb.w	sl, sl
 800f14e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f152:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f154:	d824      	bhi.n	800f1a0 <_printf_float+0x178>
 800f156:	3901      	subs	r1, #1
 800f158:	4652      	mov	r2, sl
 800f15a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f15e:	9109      	str	r1, [sp, #36]	; 0x24
 800f160:	f7ff ff2f 	bl	800efc2 <__exponent>
 800f164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f166:	1813      	adds	r3, r2, r0
 800f168:	2a01      	cmp	r2, #1
 800f16a:	4681      	mov	r9, r0
 800f16c:	6123      	str	r3, [r4, #16]
 800f16e:	dc02      	bgt.n	800f176 <_printf_float+0x14e>
 800f170:	6822      	ldr	r2, [r4, #0]
 800f172:	07d1      	lsls	r1, r2, #31
 800f174:	d501      	bpl.n	800f17a <_printf_float+0x152>
 800f176:	3301      	adds	r3, #1
 800f178:	6123      	str	r3, [r4, #16]
 800f17a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d0a5      	beq.n	800f0ce <_printf_float+0xa6>
 800f182:	232d      	movs	r3, #45	; 0x2d
 800f184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f188:	e7a1      	b.n	800f0ce <_printf_float+0xa6>
 800f18a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f18e:	f000 8177 	beq.w	800f480 <_printf_float+0x458>
 800f192:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f196:	d1bb      	bne.n	800f110 <_printf_float+0xe8>
 800f198:	2900      	cmp	r1, #0
 800f19a:	d1b9      	bne.n	800f110 <_printf_float+0xe8>
 800f19c:	2301      	movs	r3, #1
 800f19e:	e7b6      	b.n	800f10e <_printf_float+0xe6>
 800f1a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f1a4:	d119      	bne.n	800f1da <_printf_float+0x1b2>
 800f1a6:	2900      	cmp	r1, #0
 800f1a8:	6863      	ldr	r3, [r4, #4]
 800f1aa:	dd0c      	ble.n	800f1c6 <_printf_float+0x19e>
 800f1ac:	6121      	str	r1, [r4, #16]
 800f1ae:	b913      	cbnz	r3, 800f1b6 <_printf_float+0x18e>
 800f1b0:	6822      	ldr	r2, [r4, #0]
 800f1b2:	07d2      	lsls	r2, r2, #31
 800f1b4:	d502      	bpl.n	800f1bc <_printf_float+0x194>
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	440b      	add	r3, r1
 800f1ba:	6123      	str	r3, [r4, #16]
 800f1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1be:	65a3      	str	r3, [r4, #88]	; 0x58
 800f1c0:	f04f 0900 	mov.w	r9, #0
 800f1c4:	e7d9      	b.n	800f17a <_printf_float+0x152>
 800f1c6:	b913      	cbnz	r3, 800f1ce <_printf_float+0x1a6>
 800f1c8:	6822      	ldr	r2, [r4, #0]
 800f1ca:	07d0      	lsls	r0, r2, #31
 800f1cc:	d501      	bpl.n	800f1d2 <_printf_float+0x1aa>
 800f1ce:	3302      	adds	r3, #2
 800f1d0:	e7f3      	b.n	800f1ba <_printf_float+0x192>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e7f1      	b.n	800f1ba <_printf_float+0x192>
 800f1d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f1da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	db05      	blt.n	800f1ee <_printf_float+0x1c6>
 800f1e2:	6822      	ldr	r2, [r4, #0]
 800f1e4:	6123      	str	r3, [r4, #16]
 800f1e6:	07d1      	lsls	r1, r2, #31
 800f1e8:	d5e8      	bpl.n	800f1bc <_printf_float+0x194>
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	e7e5      	b.n	800f1ba <_printf_float+0x192>
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	bfd4      	ite	le
 800f1f2:	f1c3 0302 	rsble	r3, r3, #2
 800f1f6:	2301      	movgt	r3, #1
 800f1f8:	4413      	add	r3, r2
 800f1fa:	e7de      	b.n	800f1ba <_printf_float+0x192>
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	055a      	lsls	r2, r3, #21
 800f200:	d407      	bmi.n	800f212 <_printf_float+0x1ea>
 800f202:	6923      	ldr	r3, [r4, #16]
 800f204:	4642      	mov	r2, r8
 800f206:	4631      	mov	r1, r6
 800f208:	4628      	mov	r0, r5
 800f20a:	47b8      	blx	r7
 800f20c:	3001      	adds	r0, #1
 800f20e:	d12b      	bne.n	800f268 <_printf_float+0x240>
 800f210:	e767      	b.n	800f0e2 <_printf_float+0xba>
 800f212:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f216:	f240 80dc 	bls.w	800f3d2 <_printf_float+0x3aa>
 800f21a:	2200      	movs	r2, #0
 800f21c:	2300      	movs	r3, #0
 800f21e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f222:	f7f1 fc79 	bl	8000b18 <__aeabi_dcmpeq>
 800f226:	2800      	cmp	r0, #0
 800f228:	d033      	beq.n	800f292 <_printf_float+0x26a>
 800f22a:	2301      	movs	r3, #1
 800f22c:	4a41      	ldr	r2, [pc, #260]	; (800f334 <_printf_float+0x30c>)
 800f22e:	4631      	mov	r1, r6
 800f230:	4628      	mov	r0, r5
 800f232:	47b8      	blx	r7
 800f234:	3001      	adds	r0, #1
 800f236:	f43f af54 	beq.w	800f0e2 <_printf_float+0xba>
 800f23a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f23e:	429a      	cmp	r2, r3
 800f240:	db02      	blt.n	800f248 <_printf_float+0x220>
 800f242:	6823      	ldr	r3, [r4, #0]
 800f244:	07d8      	lsls	r0, r3, #31
 800f246:	d50f      	bpl.n	800f268 <_printf_float+0x240>
 800f248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f24c:	4631      	mov	r1, r6
 800f24e:	4628      	mov	r0, r5
 800f250:	47b8      	blx	r7
 800f252:	3001      	adds	r0, #1
 800f254:	f43f af45 	beq.w	800f0e2 <_printf_float+0xba>
 800f258:	f04f 0800 	mov.w	r8, #0
 800f25c:	f104 091a 	add.w	r9, r4, #26
 800f260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f262:	3b01      	subs	r3, #1
 800f264:	4543      	cmp	r3, r8
 800f266:	dc09      	bgt.n	800f27c <_printf_float+0x254>
 800f268:	6823      	ldr	r3, [r4, #0]
 800f26a:	079b      	lsls	r3, r3, #30
 800f26c:	f100 8103 	bmi.w	800f476 <_printf_float+0x44e>
 800f270:	68e0      	ldr	r0, [r4, #12]
 800f272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f274:	4298      	cmp	r0, r3
 800f276:	bfb8      	it	lt
 800f278:	4618      	movlt	r0, r3
 800f27a:	e734      	b.n	800f0e6 <_printf_float+0xbe>
 800f27c:	2301      	movs	r3, #1
 800f27e:	464a      	mov	r2, r9
 800f280:	4631      	mov	r1, r6
 800f282:	4628      	mov	r0, r5
 800f284:	47b8      	blx	r7
 800f286:	3001      	adds	r0, #1
 800f288:	f43f af2b 	beq.w	800f0e2 <_printf_float+0xba>
 800f28c:	f108 0801 	add.w	r8, r8, #1
 800f290:	e7e6      	b.n	800f260 <_printf_float+0x238>
 800f292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f294:	2b00      	cmp	r3, #0
 800f296:	dc2b      	bgt.n	800f2f0 <_printf_float+0x2c8>
 800f298:	2301      	movs	r3, #1
 800f29a:	4a26      	ldr	r2, [pc, #152]	; (800f334 <_printf_float+0x30c>)
 800f29c:	4631      	mov	r1, r6
 800f29e:	4628      	mov	r0, r5
 800f2a0:	47b8      	blx	r7
 800f2a2:	3001      	adds	r0, #1
 800f2a4:	f43f af1d 	beq.w	800f0e2 <_printf_float+0xba>
 800f2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2aa:	b923      	cbnz	r3, 800f2b6 <_printf_float+0x28e>
 800f2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2ae:	b913      	cbnz	r3, 800f2b6 <_printf_float+0x28e>
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	07d9      	lsls	r1, r3, #31
 800f2b4:	d5d8      	bpl.n	800f268 <_printf_float+0x240>
 800f2b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2ba:	4631      	mov	r1, r6
 800f2bc:	4628      	mov	r0, r5
 800f2be:	47b8      	blx	r7
 800f2c0:	3001      	adds	r0, #1
 800f2c2:	f43f af0e 	beq.w	800f0e2 <_printf_float+0xba>
 800f2c6:	f04f 0900 	mov.w	r9, #0
 800f2ca:	f104 0a1a 	add.w	sl, r4, #26
 800f2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2d0:	425b      	negs	r3, r3
 800f2d2:	454b      	cmp	r3, r9
 800f2d4:	dc01      	bgt.n	800f2da <_printf_float+0x2b2>
 800f2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d8:	e794      	b.n	800f204 <_printf_float+0x1dc>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	4652      	mov	r2, sl
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	47b8      	blx	r7
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	f43f aefc 	beq.w	800f0e2 <_printf_float+0xba>
 800f2ea:	f109 0901 	add.w	r9, r9, #1
 800f2ee:	e7ee      	b.n	800f2ce <_printf_float+0x2a6>
 800f2f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	bfa8      	it	ge
 800f2f8:	461a      	movge	r2, r3
 800f2fa:	2a00      	cmp	r2, #0
 800f2fc:	4691      	mov	r9, r2
 800f2fe:	dd07      	ble.n	800f310 <_printf_float+0x2e8>
 800f300:	4613      	mov	r3, r2
 800f302:	4631      	mov	r1, r6
 800f304:	4642      	mov	r2, r8
 800f306:	4628      	mov	r0, r5
 800f308:	47b8      	blx	r7
 800f30a:	3001      	adds	r0, #1
 800f30c:	f43f aee9 	beq.w	800f0e2 <_printf_float+0xba>
 800f310:	f104 031a 	add.w	r3, r4, #26
 800f314:	f04f 0b00 	mov.w	fp, #0
 800f318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f31c:	9306      	str	r3, [sp, #24]
 800f31e:	e015      	b.n	800f34c <_printf_float+0x324>
 800f320:	7fefffff 	.word	0x7fefffff
 800f324:	08013ed8 	.word	0x08013ed8
 800f328:	08013ed4 	.word	0x08013ed4
 800f32c:	08013ee0 	.word	0x08013ee0
 800f330:	08013edc 	.word	0x08013edc
 800f334:	08014194 	.word	0x08014194
 800f338:	2301      	movs	r3, #1
 800f33a:	9a06      	ldr	r2, [sp, #24]
 800f33c:	4631      	mov	r1, r6
 800f33e:	4628      	mov	r0, r5
 800f340:	47b8      	blx	r7
 800f342:	3001      	adds	r0, #1
 800f344:	f43f aecd 	beq.w	800f0e2 <_printf_float+0xba>
 800f348:	f10b 0b01 	add.w	fp, fp, #1
 800f34c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f350:	ebaa 0309 	sub.w	r3, sl, r9
 800f354:	455b      	cmp	r3, fp
 800f356:	dcef      	bgt.n	800f338 <_printf_float+0x310>
 800f358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f35c:	429a      	cmp	r2, r3
 800f35e:	44d0      	add	r8, sl
 800f360:	db15      	blt.n	800f38e <_printf_float+0x366>
 800f362:	6823      	ldr	r3, [r4, #0]
 800f364:	07da      	lsls	r2, r3, #31
 800f366:	d412      	bmi.n	800f38e <_printf_float+0x366>
 800f368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f36a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f36c:	eba3 020a 	sub.w	r2, r3, sl
 800f370:	eba3 0a01 	sub.w	sl, r3, r1
 800f374:	4592      	cmp	sl, r2
 800f376:	bfa8      	it	ge
 800f378:	4692      	movge	sl, r2
 800f37a:	f1ba 0f00 	cmp.w	sl, #0
 800f37e:	dc0e      	bgt.n	800f39e <_printf_float+0x376>
 800f380:	f04f 0800 	mov.w	r8, #0
 800f384:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f388:	f104 091a 	add.w	r9, r4, #26
 800f38c:	e019      	b.n	800f3c2 <_printf_float+0x39a>
 800f38e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f392:	4631      	mov	r1, r6
 800f394:	4628      	mov	r0, r5
 800f396:	47b8      	blx	r7
 800f398:	3001      	adds	r0, #1
 800f39a:	d1e5      	bne.n	800f368 <_printf_float+0x340>
 800f39c:	e6a1      	b.n	800f0e2 <_printf_float+0xba>
 800f39e:	4653      	mov	r3, sl
 800f3a0:	4642      	mov	r2, r8
 800f3a2:	4631      	mov	r1, r6
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	47b8      	blx	r7
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d1e9      	bne.n	800f380 <_printf_float+0x358>
 800f3ac:	e699      	b.n	800f0e2 <_printf_float+0xba>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	464a      	mov	r2, r9
 800f3b2:	4631      	mov	r1, r6
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	47b8      	blx	r7
 800f3b8:	3001      	adds	r0, #1
 800f3ba:	f43f ae92 	beq.w	800f0e2 <_printf_float+0xba>
 800f3be:	f108 0801 	add.w	r8, r8, #1
 800f3c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3c6:	1a9b      	subs	r3, r3, r2
 800f3c8:	eba3 030a 	sub.w	r3, r3, sl
 800f3cc:	4543      	cmp	r3, r8
 800f3ce:	dcee      	bgt.n	800f3ae <_printf_float+0x386>
 800f3d0:	e74a      	b.n	800f268 <_printf_float+0x240>
 800f3d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3d4:	2a01      	cmp	r2, #1
 800f3d6:	dc01      	bgt.n	800f3dc <_printf_float+0x3b4>
 800f3d8:	07db      	lsls	r3, r3, #31
 800f3da:	d53a      	bpl.n	800f452 <_printf_float+0x42a>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	4642      	mov	r2, r8
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	47b8      	blx	r7
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	f43f ae7b 	beq.w	800f0e2 <_printf_float+0xba>
 800f3ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3f0:	4631      	mov	r1, r6
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	47b8      	blx	r7
 800f3f6:	3001      	adds	r0, #1
 800f3f8:	f108 0801 	add.w	r8, r8, #1
 800f3fc:	f43f ae71 	beq.w	800f0e2 <_printf_float+0xba>
 800f400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f402:	2200      	movs	r2, #0
 800f404:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f40c:	2300      	movs	r3, #0
 800f40e:	f7f1 fb83 	bl	8000b18 <__aeabi_dcmpeq>
 800f412:	b9c8      	cbnz	r0, 800f448 <_printf_float+0x420>
 800f414:	4653      	mov	r3, sl
 800f416:	4642      	mov	r2, r8
 800f418:	4631      	mov	r1, r6
 800f41a:	4628      	mov	r0, r5
 800f41c:	47b8      	blx	r7
 800f41e:	3001      	adds	r0, #1
 800f420:	d10e      	bne.n	800f440 <_printf_float+0x418>
 800f422:	e65e      	b.n	800f0e2 <_printf_float+0xba>
 800f424:	2301      	movs	r3, #1
 800f426:	4652      	mov	r2, sl
 800f428:	4631      	mov	r1, r6
 800f42a:	4628      	mov	r0, r5
 800f42c:	47b8      	blx	r7
 800f42e:	3001      	adds	r0, #1
 800f430:	f43f ae57 	beq.w	800f0e2 <_printf_float+0xba>
 800f434:	f108 0801 	add.w	r8, r8, #1
 800f438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f43a:	3b01      	subs	r3, #1
 800f43c:	4543      	cmp	r3, r8
 800f43e:	dcf1      	bgt.n	800f424 <_printf_float+0x3fc>
 800f440:	464b      	mov	r3, r9
 800f442:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f446:	e6de      	b.n	800f206 <_printf_float+0x1de>
 800f448:	f04f 0800 	mov.w	r8, #0
 800f44c:	f104 0a1a 	add.w	sl, r4, #26
 800f450:	e7f2      	b.n	800f438 <_printf_float+0x410>
 800f452:	2301      	movs	r3, #1
 800f454:	e7df      	b.n	800f416 <_printf_float+0x3ee>
 800f456:	2301      	movs	r3, #1
 800f458:	464a      	mov	r2, r9
 800f45a:	4631      	mov	r1, r6
 800f45c:	4628      	mov	r0, r5
 800f45e:	47b8      	blx	r7
 800f460:	3001      	adds	r0, #1
 800f462:	f43f ae3e 	beq.w	800f0e2 <_printf_float+0xba>
 800f466:	f108 0801 	add.w	r8, r8, #1
 800f46a:	68e3      	ldr	r3, [r4, #12]
 800f46c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f46e:	1a9b      	subs	r3, r3, r2
 800f470:	4543      	cmp	r3, r8
 800f472:	dcf0      	bgt.n	800f456 <_printf_float+0x42e>
 800f474:	e6fc      	b.n	800f270 <_printf_float+0x248>
 800f476:	f04f 0800 	mov.w	r8, #0
 800f47a:	f104 0919 	add.w	r9, r4, #25
 800f47e:	e7f4      	b.n	800f46a <_printf_float+0x442>
 800f480:	2900      	cmp	r1, #0
 800f482:	f43f ae8b 	beq.w	800f19c <_printf_float+0x174>
 800f486:	2300      	movs	r3, #0
 800f488:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f48c:	ab09      	add	r3, sp, #36	; 0x24
 800f48e:	9300      	str	r3, [sp, #0]
 800f490:	ec49 8b10 	vmov	d0, r8, r9
 800f494:	6022      	str	r2, [r4, #0]
 800f496:	f8cd a004 	str.w	sl, [sp, #4]
 800f49a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f7ff fd2e 	bl	800ef00 <__cvt>
 800f4a4:	4680      	mov	r8, r0
 800f4a6:	e648      	b.n	800f13a <_printf_float+0x112>

0800f4a8 <_printf_common>:
 800f4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ac:	4691      	mov	r9, r2
 800f4ae:	461f      	mov	r7, r3
 800f4b0:	688a      	ldr	r2, [r1, #8]
 800f4b2:	690b      	ldr	r3, [r1, #16]
 800f4b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	bfb8      	it	lt
 800f4bc:	4613      	movlt	r3, r2
 800f4be:	f8c9 3000 	str.w	r3, [r9]
 800f4c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	b112      	cbz	r2, 800f4d2 <_printf_common+0x2a>
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	f8c9 3000 	str.w	r3, [r9]
 800f4d2:	6823      	ldr	r3, [r4, #0]
 800f4d4:	0699      	lsls	r1, r3, #26
 800f4d6:	bf42      	ittt	mi
 800f4d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f4dc:	3302      	addmi	r3, #2
 800f4de:	f8c9 3000 	strmi.w	r3, [r9]
 800f4e2:	6825      	ldr	r5, [r4, #0]
 800f4e4:	f015 0506 	ands.w	r5, r5, #6
 800f4e8:	d107      	bne.n	800f4fa <_printf_common+0x52>
 800f4ea:	f104 0a19 	add.w	sl, r4, #25
 800f4ee:	68e3      	ldr	r3, [r4, #12]
 800f4f0:	f8d9 2000 	ldr.w	r2, [r9]
 800f4f4:	1a9b      	subs	r3, r3, r2
 800f4f6:	42ab      	cmp	r3, r5
 800f4f8:	dc28      	bgt.n	800f54c <_printf_common+0xa4>
 800f4fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f4fe:	6822      	ldr	r2, [r4, #0]
 800f500:	3300      	adds	r3, #0
 800f502:	bf18      	it	ne
 800f504:	2301      	movne	r3, #1
 800f506:	0692      	lsls	r2, r2, #26
 800f508:	d42d      	bmi.n	800f566 <_printf_common+0xbe>
 800f50a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f50e:	4639      	mov	r1, r7
 800f510:	4630      	mov	r0, r6
 800f512:	47c0      	blx	r8
 800f514:	3001      	adds	r0, #1
 800f516:	d020      	beq.n	800f55a <_printf_common+0xb2>
 800f518:	6823      	ldr	r3, [r4, #0]
 800f51a:	68e5      	ldr	r5, [r4, #12]
 800f51c:	f8d9 2000 	ldr.w	r2, [r9]
 800f520:	f003 0306 	and.w	r3, r3, #6
 800f524:	2b04      	cmp	r3, #4
 800f526:	bf08      	it	eq
 800f528:	1aad      	subeq	r5, r5, r2
 800f52a:	68a3      	ldr	r3, [r4, #8]
 800f52c:	6922      	ldr	r2, [r4, #16]
 800f52e:	bf0c      	ite	eq
 800f530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f534:	2500      	movne	r5, #0
 800f536:	4293      	cmp	r3, r2
 800f538:	bfc4      	itt	gt
 800f53a:	1a9b      	subgt	r3, r3, r2
 800f53c:	18ed      	addgt	r5, r5, r3
 800f53e:	f04f 0900 	mov.w	r9, #0
 800f542:	341a      	adds	r4, #26
 800f544:	454d      	cmp	r5, r9
 800f546:	d11a      	bne.n	800f57e <_printf_common+0xd6>
 800f548:	2000      	movs	r0, #0
 800f54a:	e008      	b.n	800f55e <_printf_common+0xb6>
 800f54c:	2301      	movs	r3, #1
 800f54e:	4652      	mov	r2, sl
 800f550:	4639      	mov	r1, r7
 800f552:	4630      	mov	r0, r6
 800f554:	47c0      	blx	r8
 800f556:	3001      	adds	r0, #1
 800f558:	d103      	bne.n	800f562 <_printf_common+0xba>
 800f55a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f562:	3501      	adds	r5, #1
 800f564:	e7c3      	b.n	800f4ee <_printf_common+0x46>
 800f566:	18e1      	adds	r1, r4, r3
 800f568:	1c5a      	adds	r2, r3, #1
 800f56a:	2030      	movs	r0, #48	; 0x30
 800f56c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f570:	4422      	add	r2, r4
 800f572:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f576:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f57a:	3302      	adds	r3, #2
 800f57c:	e7c5      	b.n	800f50a <_printf_common+0x62>
 800f57e:	2301      	movs	r3, #1
 800f580:	4622      	mov	r2, r4
 800f582:	4639      	mov	r1, r7
 800f584:	4630      	mov	r0, r6
 800f586:	47c0      	blx	r8
 800f588:	3001      	adds	r0, #1
 800f58a:	d0e6      	beq.n	800f55a <_printf_common+0xb2>
 800f58c:	f109 0901 	add.w	r9, r9, #1
 800f590:	e7d8      	b.n	800f544 <_printf_common+0x9c>
	...

0800f594 <_printf_i>:
 800f594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f598:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f59c:	460c      	mov	r4, r1
 800f59e:	7e09      	ldrb	r1, [r1, #24]
 800f5a0:	b085      	sub	sp, #20
 800f5a2:	296e      	cmp	r1, #110	; 0x6e
 800f5a4:	4617      	mov	r7, r2
 800f5a6:	4606      	mov	r6, r0
 800f5a8:	4698      	mov	r8, r3
 800f5aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5ac:	f000 80b3 	beq.w	800f716 <_printf_i+0x182>
 800f5b0:	d822      	bhi.n	800f5f8 <_printf_i+0x64>
 800f5b2:	2963      	cmp	r1, #99	; 0x63
 800f5b4:	d036      	beq.n	800f624 <_printf_i+0x90>
 800f5b6:	d80a      	bhi.n	800f5ce <_printf_i+0x3a>
 800f5b8:	2900      	cmp	r1, #0
 800f5ba:	f000 80b9 	beq.w	800f730 <_printf_i+0x19c>
 800f5be:	2958      	cmp	r1, #88	; 0x58
 800f5c0:	f000 8083 	beq.w	800f6ca <_printf_i+0x136>
 800f5c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f5cc:	e032      	b.n	800f634 <_printf_i+0xa0>
 800f5ce:	2964      	cmp	r1, #100	; 0x64
 800f5d0:	d001      	beq.n	800f5d6 <_printf_i+0x42>
 800f5d2:	2969      	cmp	r1, #105	; 0x69
 800f5d4:	d1f6      	bne.n	800f5c4 <_printf_i+0x30>
 800f5d6:	6820      	ldr	r0, [r4, #0]
 800f5d8:	6813      	ldr	r3, [r2, #0]
 800f5da:	0605      	lsls	r5, r0, #24
 800f5dc:	f103 0104 	add.w	r1, r3, #4
 800f5e0:	d52a      	bpl.n	800f638 <_printf_i+0xa4>
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	6011      	str	r1, [r2, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	da03      	bge.n	800f5f2 <_printf_i+0x5e>
 800f5ea:	222d      	movs	r2, #45	; 0x2d
 800f5ec:	425b      	negs	r3, r3
 800f5ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f5f2:	486f      	ldr	r0, [pc, #444]	; (800f7b0 <_printf_i+0x21c>)
 800f5f4:	220a      	movs	r2, #10
 800f5f6:	e039      	b.n	800f66c <_printf_i+0xd8>
 800f5f8:	2973      	cmp	r1, #115	; 0x73
 800f5fa:	f000 809d 	beq.w	800f738 <_printf_i+0x1a4>
 800f5fe:	d808      	bhi.n	800f612 <_printf_i+0x7e>
 800f600:	296f      	cmp	r1, #111	; 0x6f
 800f602:	d020      	beq.n	800f646 <_printf_i+0xb2>
 800f604:	2970      	cmp	r1, #112	; 0x70
 800f606:	d1dd      	bne.n	800f5c4 <_printf_i+0x30>
 800f608:	6823      	ldr	r3, [r4, #0]
 800f60a:	f043 0320 	orr.w	r3, r3, #32
 800f60e:	6023      	str	r3, [r4, #0]
 800f610:	e003      	b.n	800f61a <_printf_i+0x86>
 800f612:	2975      	cmp	r1, #117	; 0x75
 800f614:	d017      	beq.n	800f646 <_printf_i+0xb2>
 800f616:	2978      	cmp	r1, #120	; 0x78
 800f618:	d1d4      	bne.n	800f5c4 <_printf_i+0x30>
 800f61a:	2378      	movs	r3, #120	; 0x78
 800f61c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f620:	4864      	ldr	r0, [pc, #400]	; (800f7b4 <_printf_i+0x220>)
 800f622:	e055      	b.n	800f6d0 <_printf_i+0x13c>
 800f624:	6813      	ldr	r3, [r2, #0]
 800f626:	1d19      	adds	r1, r3, #4
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	6011      	str	r1, [r2, #0]
 800f62c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f634:	2301      	movs	r3, #1
 800f636:	e08c      	b.n	800f752 <_printf_i+0x1be>
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	6011      	str	r1, [r2, #0]
 800f63c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f640:	bf18      	it	ne
 800f642:	b21b      	sxthne	r3, r3
 800f644:	e7cf      	b.n	800f5e6 <_printf_i+0x52>
 800f646:	6813      	ldr	r3, [r2, #0]
 800f648:	6825      	ldr	r5, [r4, #0]
 800f64a:	1d18      	adds	r0, r3, #4
 800f64c:	6010      	str	r0, [r2, #0]
 800f64e:	0628      	lsls	r0, r5, #24
 800f650:	d501      	bpl.n	800f656 <_printf_i+0xc2>
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	e002      	b.n	800f65c <_printf_i+0xc8>
 800f656:	0668      	lsls	r0, r5, #25
 800f658:	d5fb      	bpl.n	800f652 <_printf_i+0xbe>
 800f65a:	881b      	ldrh	r3, [r3, #0]
 800f65c:	4854      	ldr	r0, [pc, #336]	; (800f7b0 <_printf_i+0x21c>)
 800f65e:	296f      	cmp	r1, #111	; 0x6f
 800f660:	bf14      	ite	ne
 800f662:	220a      	movne	r2, #10
 800f664:	2208      	moveq	r2, #8
 800f666:	2100      	movs	r1, #0
 800f668:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f66c:	6865      	ldr	r5, [r4, #4]
 800f66e:	60a5      	str	r5, [r4, #8]
 800f670:	2d00      	cmp	r5, #0
 800f672:	f2c0 8095 	blt.w	800f7a0 <_printf_i+0x20c>
 800f676:	6821      	ldr	r1, [r4, #0]
 800f678:	f021 0104 	bic.w	r1, r1, #4
 800f67c:	6021      	str	r1, [r4, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d13d      	bne.n	800f6fe <_printf_i+0x16a>
 800f682:	2d00      	cmp	r5, #0
 800f684:	f040 808e 	bne.w	800f7a4 <_printf_i+0x210>
 800f688:	4665      	mov	r5, ip
 800f68a:	2a08      	cmp	r2, #8
 800f68c:	d10b      	bne.n	800f6a6 <_printf_i+0x112>
 800f68e:	6823      	ldr	r3, [r4, #0]
 800f690:	07db      	lsls	r3, r3, #31
 800f692:	d508      	bpl.n	800f6a6 <_printf_i+0x112>
 800f694:	6923      	ldr	r3, [r4, #16]
 800f696:	6862      	ldr	r2, [r4, #4]
 800f698:	429a      	cmp	r2, r3
 800f69a:	bfde      	ittt	le
 800f69c:	2330      	movle	r3, #48	; 0x30
 800f69e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f6a2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f6a6:	ebac 0305 	sub.w	r3, ip, r5
 800f6aa:	6123      	str	r3, [r4, #16]
 800f6ac:	f8cd 8000 	str.w	r8, [sp]
 800f6b0:	463b      	mov	r3, r7
 800f6b2:	aa03      	add	r2, sp, #12
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f7ff fef6 	bl	800f4a8 <_printf_common>
 800f6bc:	3001      	adds	r0, #1
 800f6be:	d14d      	bne.n	800f75c <_printf_i+0x1c8>
 800f6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6c4:	b005      	add	sp, #20
 800f6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ca:	4839      	ldr	r0, [pc, #228]	; (800f7b0 <_printf_i+0x21c>)
 800f6cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f6d0:	6813      	ldr	r3, [r2, #0]
 800f6d2:	6821      	ldr	r1, [r4, #0]
 800f6d4:	1d1d      	adds	r5, r3, #4
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	6015      	str	r5, [r2, #0]
 800f6da:	060a      	lsls	r2, r1, #24
 800f6dc:	d50b      	bpl.n	800f6f6 <_printf_i+0x162>
 800f6de:	07ca      	lsls	r2, r1, #31
 800f6e0:	bf44      	itt	mi
 800f6e2:	f041 0120 	orrmi.w	r1, r1, #32
 800f6e6:	6021      	strmi	r1, [r4, #0]
 800f6e8:	b91b      	cbnz	r3, 800f6f2 <_printf_i+0x15e>
 800f6ea:	6822      	ldr	r2, [r4, #0]
 800f6ec:	f022 0220 	bic.w	r2, r2, #32
 800f6f0:	6022      	str	r2, [r4, #0]
 800f6f2:	2210      	movs	r2, #16
 800f6f4:	e7b7      	b.n	800f666 <_printf_i+0xd2>
 800f6f6:	064d      	lsls	r5, r1, #25
 800f6f8:	bf48      	it	mi
 800f6fa:	b29b      	uxthmi	r3, r3
 800f6fc:	e7ef      	b.n	800f6de <_printf_i+0x14a>
 800f6fe:	4665      	mov	r5, ip
 800f700:	fbb3 f1f2 	udiv	r1, r3, r2
 800f704:	fb02 3311 	mls	r3, r2, r1, r3
 800f708:	5cc3      	ldrb	r3, [r0, r3]
 800f70a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f70e:	460b      	mov	r3, r1
 800f710:	2900      	cmp	r1, #0
 800f712:	d1f5      	bne.n	800f700 <_printf_i+0x16c>
 800f714:	e7b9      	b.n	800f68a <_printf_i+0xf6>
 800f716:	6813      	ldr	r3, [r2, #0]
 800f718:	6825      	ldr	r5, [r4, #0]
 800f71a:	6961      	ldr	r1, [r4, #20]
 800f71c:	1d18      	adds	r0, r3, #4
 800f71e:	6010      	str	r0, [r2, #0]
 800f720:	0628      	lsls	r0, r5, #24
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	d501      	bpl.n	800f72a <_printf_i+0x196>
 800f726:	6019      	str	r1, [r3, #0]
 800f728:	e002      	b.n	800f730 <_printf_i+0x19c>
 800f72a:	066a      	lsls	r2, r5, #25
 800f72c:	d5fb      	bpl.n	800f726 <_printf_i+0x192>
 800f72e:	8019      	strh	r1, [r3, #0]
 800f730:	2300      	movs	r3, #0
 800f732:	6123      	str	r3, [r4, #16]
 800f734:	4665      	mov	r5, ip
 800f736:	e7b9      	b.n	800f6ac <_printf_i+0x118>
 800f738:	6813      	ldr	r3, [r2, #0]
 800f73a:	1d19      	adds	r1, r3, #4
 800f73c:	6011      	str	r1, [r2, #0]
 800f73e:	681d      	ldr	r5, [r3, #0]
 800f740:	6862      	ldr	r2, [r4, #4]
 800f742:	2100      	movs	r1, #0
 800f744:	4628      	mov	r0, r5
 800f746:	f7f0 fd73 	bl	8000230 <memchr>
 800f74a:	b108      	cbz	r0, 800f750 <_printf_i+0x1bc>
 800f74c:	1b40      	subs	r0, r0, r5
 800f74e:	6060      	str	r0, [r4, #4]
 800f750:	6863      	ldr	r3, [r4, #4]
 800f752:	6123      	str	r3, [r4, #16]
 800f754:	2300      	movs	r3, #0
 800f756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f75a:	e7a7      	b.n	800f6ac <_printf_i+0x118>
 800f75c:	6923      	ldr	r3, [r4, #16]
 800f75e:	462a      	mov	r2, r5
 800f760:	4639      	mov	r1, r7
 800f762:	4630      	mov	r0, r6
 800f764:	47c0      	blx	r8
 800f766:	3001      	adds	r0, #1
 800f768:	d0aa      	beq.n	800f6c0 <_printf_i+0x12c>
 800f76a:	6823      	ldr	r3, [r4, #0]
 800f76c:	079b      	lsls	r3, r3, #30
 800f76e:	d413      	bmi.n	800f798 <_printf_i+0x204>
 800f770:	68e0      	ldr	r0, [r4, #12]
 800f772:	9b03      	ldr	r3, [sp, #12]
 800f774:	4298      	cmp	r0, r3
 800f776:	bfb8      	it	lt
 800f778:	4618      	movlt	r0, r3
 800f77a:	e7a3      	b.n	800f6c4 <_printf_i+0x130>
 800f77c:	2301      	movs	r3, #1
 800f77e:	464a      	mov	r2, r9
 800f780:	4639      	mov	r1, r7
 800f782:	4630      	mov	r0, r6
 800f784:	47c0      	blx	r8
 800f786:	3001      	adds	r0, #1
 800f788:	d09a      	beq.n	800f6c0 <_printf_i+0x12c>
 800f78a:	3501      	adds	r5, #1
 800f78c:	68e3      	ldr	r3, [r4, #12]
 800f78e:	9a03      	ldr	r2, [sp, #12]
 800f790:	1a9b      	subs	r3, r3, r2
 800f792:	42ab      	cmp	r3, r5
 800f794:	dcf2      	bgt.n	800f77c <_printf_i+0x1e8>
 800f796:	e7eb      	b.n	800f770 <_printf_i+0x1dc>
 800f798:	2500      	movs	r5, #0
 800f79a:	f104 0919 	add.w	r9, r4, #25
 800f79e:	e7f5      	b.n	800f78c <_printf_i+0x1f8>
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1ac      	bne.n	800f6fe <_printf_i+0x16a>
 800f7a4:	7803      	ldrb	r3, [r0, #0]
 800f7a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7ae:	e76c      	b.n	800f68a <_printf_i+0xf6>
 800f7b0:	08013ee4 	.word	0x08013ee4
 800f7b4:	08013ef5 	.word	0x08013ef5

0800f7b8 <_puts_r>:
 800f7b8:	b570      	push	{r4, r5, r6, lr}
 800f7ba:	460e      	mov	r6, r1
 800f7bc:	4605      	mov	r5, r0
 800f7be:	b118      	cbz	r0, 800f7c8 <_puts_r+0x10>
 800f7c0:	6983      	ldr	r3, [r0, #24]
 800f7c2:	b90b      	cbnz	r3, 800f7c8 <_puts_r+0x10>
 800f7c4:	f001 f894 	bl	80108f0 <__sinit>
 800f7c8:	69ab      	ldr	r3, [r5, #24]
 800f7ca:	68ac      	ldr	r4, [r5, #8]
 800f7cc:	b913      	cbnz	r3, 800f7d4 <_puts_r+0x1c>
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	f001 f88e 	bl	80108f0 <__sinit>
 800f7d4:	4b23      	ldr	r3, [pc, #140]	; (800f864 <_puts_r+0xac>)
 800f7d6:	429c      	cmp	r4, r3
 800f7d8:	d117      	bne.n	800f80a <_puts_r+0x52>
 800f7da:	686c      	ldr	r4, [r5, #4]
 800f7dc:	89a3      	ldrh	r3, [r4, #12]
 800f7de:	071b      	lsls	r3, r3, #28
 800f7e0:	d51d      	bpl.n	800f81e <_puts_r+0x66>
 800f7e2:	6923      	ldr	r3, [r4, #16]
 800f7e4:	b1db      	cbz	r3, 800f81e <_puts_r+0x66>
 800f7e6:	3e01      	subs	r6, #1
 800f7e8:	68a3      	ldr	r3, [r4, #8]
 800f7ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	60a3      	str	r3, [r4, #8]
 800f7f2:	b9e9      	cbnz	r1, 800f830 <_puts_r+0x78>
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	da2e      	bge.n	800f856 <_puts_r+0x9e>
 800f7f8:	4622      	mov	r2, r4
 800f7fa:	210a      	movs	r1, #10
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	f000 f883 	bl	800f908 <__swbuf_r>
 800f802:	3001      	adds	r0, #1
 800f804:	d011      	beq.n	800f82a <_puts_r+0x72>
 800f806:	200a      	movs	r0, #10
 800f808:	e011      	b.n	800f82e <_puts_r+0x76>
 800f80a:	4b17      	ldr	r3, [pc, #92]	; (800f868 <_puts_r+0xb0>)
 800f80c:	429c      	cmp	r4, r3
 800f80e:	d101      	bne.n	800f814 <_puts_r+0x5c>
 800f810:	68ac      	ldr	r4, [r5, #8]
 800f812:	e7e3      	b.n	800f7dc <_puts_r+0x24>
 800f814:	4b15      	ldr	r3, [pc, #84]	; (800f86c <_puts_r+0xb4>)
 800f816:	429c      	cmp	r4, r3
 800f818:	bf08      	it	eq
 800f81a:	68ec      	ldreq	r4, [r5, #12]
 800f81c:	e7de      	b.n	800f7dc <_puts_r+0x24>
 800f81e:	4621      	mov	r1, r4
 800f820:	4628      	mov	r0, r5
 800f822:	f000 f8c3 	bl	800f9ac <__swsetup_r>
 800f826:	2800      	cmp	r0, #0
 800f828:	d0dd      	beq.n	800f7e6 <_puts_r+0x2e>
 800f82a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f82e:	bd70      	pop	{r4, r5, r6, pc}
 800f830:	2b00      	cmp	r3, #0
 800f832:	da04      	bge.n	800f83e <_puts_r+0x86>
 800f834:	69a2      	ldr	r2, [r4, #24]
 800f836:	429a      	cmp	r2, r3
 800f838:	dc06      	bgt.n	800f848 <_puts_r+0x90>
 800f83a:	290a      	cmp	r1, #10
 800f83c:	d004      	beq.n	800f848 <_puts_r+0x90>
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	1c5a      	adds	r2, r3, #1
 800f842:	6022      	str	r2, [r4, #0]
 800f844:	7019      	strb	r1, [r3, #0]
 800f846:	e7cf      	b.n	800f7e8 <_puts_r+0x30>
 800f848:	4622      	mov	r2, r4
 800f84a:	4628      	mov	r0, r5
 800f84c:	f000 f85c 	bl	800f908 <__swbuf_r>
 800f850:	3001      	adds	r0, #1
 800f852:	d1c9      	bne.n	800f7e8 <_puts_r+0x30>
 800f854:	e7e9      	b.n	800f82a <_puts_r+0x72>
 800f856:	6823      	ldr	r3, [r4, #0]
 800f858:	200a      	movs	r0, #10
 800f85a:	1c5a      	adds	r2, r3, #1
 800f85c:	6022      	str	r2, [r4, #0]
 800f85e:	7018      	strb	r0, [r3, #0]
 800f860:	e7e5      	b.n	800f82e <_puts_r+0x76>
 800f862:	bf00      	nop
 800f864:	08013f34 	.word	0x08013f34
 800f868:	08013f54 	.word	0x08013f54
 800f86c:	08013f14 	.word	0x08013f14

0800f870 <puts>:
 800f870:	4b02      	ldr	r3, [pc, #8]	; (800f87c <puts+0xc>)
 800f872:	4601      	mov	r1, r0
 800f874:	6818      	ldr	r0, [r3, #0]
 800f876:	f7ff bf9f 	b.w	800f7b8 <_puts_r>
 800f87a:	bf00      	nop
 800f87c:	20001c34 	.word	0x20001c34

0800f880 <sniprintf>:
 800f880:	b40c      	push	{r2, r3}
 800f882:	b530      	push	{r4, r5, lr}
 800f884:	4b17      	ldr	r3, [pc, #92]	; (800f8e4 <sniprintf+0x64>)
 800f886:	1e0c      	subs	r4, r1, #0
 800f888:	b09d      	sub	sp, #116	; 0x74
 800f88a:	681d      	ldr	r5, [r3, #0]
 800f88c:	da08      	bge.n	800f8a0 <sniprintf+0x20>
 800f88e:	238b      	movs	r3, #139	; 0x8b
 800f890:	602b      	str	r3, [r5, #0]
 800f892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f896:	b01d      	add	sp, #116	; 0x74
 800f898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f89c:	b002      	add	sp, #8
 800f89e:	4770      	bx	lr
 800f8a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f8a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f8a8:	bf14      	ite	ne
 800f8aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f8ae:	4623      	moveq	r3, r4
 800f8b0:	9304      	str	r3, [sp, #16]
 800f8b2:	9307      	str	r3, [sp, #28]
 800f8b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8b8:	9002      	str	r0, [sp, #8]
 800f8ba:	9006      	str	r0, [sp, #24]
 800f8bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f8c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f8c2:	ab21      	add	r3, sp, #132	; 0x84
 800f8c4:	a902      	add	r1, sp, #8
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	9301      	str	r3, [sp, #4]
 800f8ca:	f001 fd0b 	bl	80112e4 <_svfiprintf_r>
 800f8ce:	1c43      	adds	r3, r0, #1
 800f8d0:	bfbc      	itt	lt
 800f8d2:	238b      	movlt	r3, #139	; 0x8b
 800f8d4:	602b      	strlt	r3, [r5, #0]
 800f8d6:	2c00      	cmp	r4, #0
 800f8d8:	d0dd      	beq.n	800f896 <sniprintf+0x16>
 800f8da:	9b02      	ldr	r3, [sp, #8]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	701a      	strb	r2, [r3, #0]
 800f8e0:	e7d9      	b.n	800f896 <sniprintf+0x16>
 800f8e2:	bf00      	nop
 800f8e4:	20001c34 	.word	0x20001c34

0800f8e8 <strcat>:
 800f8e8:	b510      	push	{r4, lr}
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	781a      	ldrb	r2, [r3, #0]
 800f8ee:	1c5c      	adds	r4, r3, #1
 800f8f0:	b93a      	cbnz	r2, 800f902 <strcat+0x1a>
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f8fc:	2a00      	cmp	r2, #0
 800f8fe:	d1f9      	bne.n	800f8f4 <strcat+0xc>
 800f900:	bd10      	pop	{r4, pc}
 800f902:	4623      	mov	r3, r4
 800f904:	e7f2      	b.n	800f8ec <strcat+0x4>
	...

0800f908 <__swbuf_r>:
 800f908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90a:	460e      	mov	r6, r1
 800f90c:	4614      	mov	r4, r2
 800f90e:	4605      	mov	r5, r0
 800f910:	b118      	cbz	r0, 800f91a <__swbuf_r+0x12>
 800f912:	6983      	ldr	r3, [r0, #24]
 800f914:	b90b      	cbnz	r3, 800f91a <__swbuf_r+0x12>
 800f916:	f000 ffeb 	bl	80108f0 <__sinit>
 800f91a:	4b21      	ldr	r3, [pc, #132]	; (800f9a0 <__swbuf_r+0x98>)
 800f91c:	429c      	cmp	r4, r3
 800f91e:	d12a      	bne.n	800f976 <__swbuf_r+0x6e>
 800f920:	686c      	ldr	r4, [r5, #4]
 800f922:	69a3      	ldr	r3, [r4, #24]
 800f924:	60a3      	str	r3, [r4, #8]
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	071a      	lsls	r2, r3, #28
 800f92a:	d52e      	bpl.n	800f98a <__swbuf_r+0x82>
 800f92c:	6923      	ldr	r3, [r4, #16]
 800f92e:	b363      	cbz	r3, 800f98a <__swbuf_r+0x82>
 800f930:	6923      	ldr	r3, [r4, #16]
 800f932:	6820      	ldr	r0, [r4, #0]
 800f934:	1ac0      	subs	r0, r0, r3
 800f936:	6963      	ldr	r3, [r4, #20]
 800f938:	b2f6      	uxtb	r6, r6
 800f93a:	4283      	cmp	r3, r0
 800f93c:	4637      	mov	r7, r6
 800f93e:	dc04      	bgt.n	800f94a <__swbuf_r+0x42>
 800f940:	4621      	mov	r1, r4
 800f942:	4628      	mov	r0, r5
 800f944:	f000 ff6a 	bl	801081c <_fflush_r>
 800f948:	bb28      	cbnz	r0, 800f996 <__swbuf_r+0x8e>
 800f94a:	68a3      	ldr	r3, [r4, #8]
 800f94c:	3b01      	subs	r3, #1
 800f94e:	60a3      	str	r3, [r4, #8]
 800f950:	6823      	ldr	r3, [r4, #0]
 800f952:	1c5a      	adds	r2, r3, #1
 800f954:	6022      	str	r2, [r4, #0]
 800f956:	701e      	strb	r6, [r3, #0]
 800f958:	6963      	ldr	r3, [r4, #20]
 800f95a:	3001      	adds	r0, #1
 800f95c:	4283      	cmp	r3, r0
 800f95e:	d004      	beq.n	800f96a <__swbuf_r+0x62>
 800f960:	89a3      	ldrh	r3, [r4, #12]
 800f962:	07db      	lsls	r3, r3, #31
 800f964:	d519      	bpl.n	800f99a <__swbuf_r+0x92>
 800f966:	2e0a      	cmp	r6, #10
 800f968:	d117      	bne.n	800f99a <__swbuf_r+0x92>
 800f96a:	4621      	mov	r1, r4
 800f96c:	4628      	mov	r0, r5
 800f96e:	f000 ff55 	bl	801081c <_fflush_r>
 800f972:	b190      	cbz	r0, 800f99a <__swbuf_r+0x92>
 800f974:	e00f      	b.n	800f996 <__swbuf_r+0x8e>
 800f976:	4b0b      	ldr	r3, [pc, #44]	; (800f9a4 <__swbuf_r+0x9c>)
 800f978:	429c      	cmp	r4, r3
 800f97a:	d101      	bne.n	800f980 <__swbuf_r+0x78>
 800f97c:	68ac      	ldr	r4, [r5, #8]
 800f97e:	e7d0      	b.n	800f922 <__swbuf_r+0x1a>
 800f980:	4b09      	ldr	r3, [pc, #36]	; (800f9a8 <__swbuf_r+0xa0>)
 800f982:	429c      	cmp	r4, r3
 800f984:	bf08      	it	eq
 800f986:	68ec      	ldreq	r4, [r5, #12]
 800f988:	e7cb      	b.n	800f922 <__swbuf_r+0x1a>
 800f98a:	4621      	mov	r1, r4
 800f98c:	4628      	mov	r0, r5
 800f98e:	f000 f80d 	bl	800f9ac <__swsetup_r>
 800f992:	2800      	cmp	r0, #0
 800f994:	d0cc      	beq.n	800f930 <__swbuf_r+0x28>
 800f996:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f99a:	4638      	mov	r0, r7
 800f99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	08013f34 	.word	0x08013f34
 800f9a4:	08013f54 	.word	0x08013f54
 800f9a8:	08013f14 	.word	0x08013f14

0800f9ac <__swsetup_r>:
 800f9ac:	4b32      	ldr	r3, [pc, #200]	; (800fa78 <__swsetup_r+0xcc>)
 800f9ae:	b570      	push	{r4, r5, r6, lr}
 800f9b0:	681d      	ldr	r5, [r3, #0]
 800f9b2:	4606      	mov	r6, r0
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	b125      	cbz	r5, 800f9c2 <__swsetup_r+0x16>
 800f9b8:	69ab      	ldr	r3, [r5, #24]
 800f9ba:	b913      	cbnz	r3, 800f9c2 <__swsetup_r+0x16>
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f000 ff97 	bl	80108f0 <__sinit>
 800f9c2:	4b2e      	ldr	r3, [pc, #184]	; (800fa7c <__swsetup_r+0xd0>)
 800f9c4:	429c      	cmp	r4, r3
 800f9c6:	d10f      	bne.n	800f9e8 <__swsetup_r+0x3c>
 800f9c8:	686c      	ldr	r4, [r5, #4]
 800f9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	0715      	lsls	r5, r2, #28
 800f9d2:	d42c      	bmi.n	800fa2e <__swsetup_r+0x82>
 800f9d4:	06d0      	lsls	r0, r2, #27
 800f9d6:	d411      	bmi.n	800f9fc <__swsetup_r+0x50>
 800f9d8:	2209      	movs	r2, #9
 800f9da:	6032      	str	r2, [r6, #0]
 800f9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e0:	81a3      	strh	r3, [r4, #12]
 800f9e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9e6:	e03e      	b.n	800fa66 <__swsetup_r+0xba>
 800f9e8:	4b25      	ldr	r3, [pc, #148]	; (800fa80 <__swsetup_r+0xd4>)
 800f9ea:	429c      	cmp	r4, r3
 800f9ec:	d101      	bne.n	800f9f2 <__swsetup_r+0x46>
 800f9ee:	68ac      	ldr	r4, [r5, #8]
 800f9f0:	e7eb      	b.n	800f9ca <__swsetup_r+0x1e>
 800f9f2:	4b24      	ldr	r3, [pc, #144]	; (800fa84 <__swsetup_r+0xd8>)
 800f9f4:	429c      	cmp	r4, r3
 800f9f6:	bf08      	it	eq
 800f9f8:	68ec      	ldreq	r4, [r5, #12]
 800f9fa:	e7e6      	b.n	800f9ca <__swsetup_r+0x1e>
 800f9fc:	0751      	lsls	r1, r2, #29
 800f9fe:	d512      	bpl.n	800fa26 <__swsetup_r+0x7a>
 800fa00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa02:	b141      	cbz	r1, 800fa16 <__swsetup_r+0x6a>
 800fa04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa08:	4299      	cmp	r1, r3
 800fa0a:	d002      	beq.n	800fa12 <__swsetup_r+0x66>
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f001 fb67 	bl	80110e0 <_free_r>
 800fa12:	2300      	movs	r3, #0
 800fa14:	6363      	str	r3, [r4, #52]	; 0x34
 800fa16:	89a3      	ldrh	r3, [r4, #12]
 800fa18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa1c:	81a3      	strh	r3, [r4, #12]
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6063      	str	r3, [r4, #4]
 800fa22:	6923      	ldr	r3, [r4, #16]
 800fa24:	6023      	str	r3, [r4, #0]
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	f043 0308 	orr.w	r3, r3, #8
 800fa2c:	81a3      	strh	r3, [r4, #12]
 800fa2e:	6923      	ldr	r3, [r4, #16]
 800fa30:	b94b      	cbnz	r3, 800fa46 <__swsetup_r+0x9a>
 800fa32:	89a3      	ldrh	r3, [r4, #12]
 800fa34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa3c:	d003      	beq.n	800fa46 <__swsetup_r+0x9a>
 800fa3e:	4621      	mov	r1, r4
 800fa40:	4630      	mov	r0, r6
 800fa42:	f001 f811 	bl	8010a68 <__smakebuf_r>
 800fa46:	89a2      	ldrh	r2, [r4, #12]
 800fa48:	f012 0301 	ands.w	r3, r2, #1
 800fa4c:	d00c      	beq.n	800fa68 <__swsetup_r+0xbc>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	60a3      	str	r3, [r4, #8]
 800fa52:	6963      	ldr	r3, [r4, #20]
 800fa54:	425b      	negs	r3, r3
 800fa56:	61a3      	str	r3, [r4, #24]
 800fa58:	6923      	ldr	r3, [r4, #16]
 800fa5a:	b953      	cbnz	r3, 800fa72 <__swsetup_r+0xc6>
 800fa5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa60:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fa64:	d1ba      	bne.n	800f9dc <__swsetup_r+0x30>
 800fa66:	bd70      	pop	{r4, r5, r6, pc}
 800fa68:	0792      	lsls	r2, r2, #30
 800fa6a:	bf58      	it	pl
 800fa6c:	6963      	ldrpl	r3, [r4, #20]
 800fa6e:	60a3      	str	r3, [r4, #8]
 800fa70:	e7f2      	b.n	800fa58 <__swsetup_r+0xac>
 800fa72:	2000      	movs	r0, #0
 800fa74:	e7f7      	b.n	800fa66 <__swsetup_r+0xba>
 800fa76:	bf00      	nop
 800fa78:	20001c34 	.word	0x20001c34
 800fa7c:	08013f34 	.word	0x08013f34
 800fa80:	08013f54 	.word	0x08013f54
 800fa84:	08013f14 	.word	0x08013f14

0800fa88 <quorem>:
 800fa88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa8c:	6903      	ldr	r3, [r0, #16]
 800fa8e:	690c      	ldr	r4, [r1, #16]
 800fa90:	42a3      	cmp	r3, r4
 800fa92:	4680      	mov	r8, r0
 800fa94:	f2c0 8082 	blt.w	800fb9c <quorem+0x114>
 800fa98:	3c01      	subs	r4, #1
 800fa9a:	f101 0714 	add.w	r7, r1, #20
 800fa9e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800faa2:	f100 0614 	add.w	r6, r0, #20
 800faa6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800faaa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800faae:	eb06 030c 	add.w	r3, r6, ip
 800fab2:	3501      	adds	r5, #1
 800fab4:	eb07 090c 	add.w	r9, r7, ip
 800fab8:	9301      	str	r3, [sp, #4]
 800faba:	fbb0 f5f5 	udiv	r5, r0, r5
 800fabe:	b395      	cbz	r5, 800fb26 <quorem+0x9e>
 800fac0:	f04f 0a00 	mov.w	sl, #0
 800fac4:	4638      	mov	r0, r7
 800fac6:	46b6      	mov	lr, r6
 800fac8:	46d3      	mov	fp, sl
 800faca:	f850 2b04 	ldr.w	r2, [r0], #4
 800face:	b293      	uxth	r3, r2
 800fad0:	fb05 a303 	mla	r3, r5, r3, sl
 800fad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fad8:	b29b      	uxth	r3, r3
 800fada:	ebab 0303 	sub.w	r3, fp, r3
 800fade:	0c12      	lsrs	r2, r2, #16
 800fae0:	f8de b000 	ldr.w	fp, [lr]
 800fae4:	fb05 a202 	mla	r2, r5, r2, sl
 800fae8:	fa13 f38b 	uxtah	r3, r3, fp
 800faec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800faf0:	fa1f fb82 	uxth.w	fp, r2
 800faf4:	f8de 2000 	ldr.w	r2, [lr]
 800faf8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800fafc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb06:	4581      	cmp	r9, r0
 800fb08:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800fb0c:	f84e 3b04 	str.w	r3, [lr], #4
 800fb10:	d2db      	bcs.n	800faca <quorem+0x42>
 800fb12:	f856 300c 	ldr.w	r3, [r6, ip]
 800fb16:	b933      	cbnz	r3, 800fb26 <quorem+0x9e>
 800fb18:	9b01      	ldr	r3, [sp, #4]
 800fb1a:	3b04      	subs	r3, #4
 800fb1c:	429e      	cmp	r6, r3
 800fb1e:	461a      	mov	r2, r3
 800fb20:	d330      	bcc.n	800fb84 <quorem+0xfc>
 800fb22:	f8c8 4010 	str.w	r4, [r8, #16]
 800fb26:	4640      	mov	r0, r8
 800fb28:	f001 fa06 	bl	8010f38 <__mcmp>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	db25      	blt.n	800fb7c <quorem+0xf4>
 800fb30:	3501      	adds	r5, #1
 800fb32:	4630      	mov	r0, r6
 800fb34:	f04f 0c00 	mov.w	ip, #0
 800fb38:	f857 2b04 	ldr.w	r2, [r7], #4
 800fb3c:	f8d0 e000 	ldr.w	lr, [r0]
 800fb40:	b293      	uxth	r3, r2
 800fb42:	ebac 0303 	sub.w	r3, ip, r3
 800fb46:	0c12      	lsrs	r2, r2, #16
 800fb48:	fa13 f38e 	uxtah	r3, r3, lr
 800fb4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fb50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb5a:	45b9      	cmp	r9, r7
 800fb5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fb60:	f840 3b04 	str.w	r3, [r0], #4
 800fb64:	d2e8      	bcs.n	800fb38 <quorem+0xb0>
 800fb66:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fb6a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fb6e:	b92a      	cbnz	r2, 800fb7c <quorem+0xf4>
 800fb70:	3b04      	subs	r3, #4
 800fb72:	429e      	cmp	r6, r3
 800fb74:	461a      	mov	r2, r3
 800fb76:	d30b      	bcc.n	800fb90 <quorem+0x108>
 800fb78:	f8c8 4010 	str.w	r4, [r8, #16]
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	b003      	add	sp, #12
 800fb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb84:	6812      	ldr	r2, [r2, #0]
 800fb86:	3b04      	subs	r3, #4
 800fb88:	2a00      	cmp	r2, #0
 800fb8a:	d1ca      	bne.n	800fb22 <quorem+0x9a>
 800fb8c:	3c01      	subs	r4, #1
 800fb8e:	e7c5      	b.n	800fb1c <quorem+0x94>
 800fb90:	6812      	ldr	r2, [r2, #0]
 800fb92:	3b04      	subs	r3, #4
 800fb94:	2a00      	cmp	r2, #0
 800fb96:	d1ef      	bne.n	800fb78 <quorem+0xf0>
 800fb98:	3c01      	subs	r4, #1
 800fb9a:	e7ea      	b.n	800fb72 <quorem+0xea>
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	e7ee      	b.n	800fb7e <quorem+0xf6>

0800fba0 <_dtoa_r>:
 800fba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba4:	ec57 6b10 	vmov	r6, r7, d0
 800fba8:	b097      	sub	sp, #92	; 0x5c
 800fbaa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fbac:	9106      	str	r1, [sp, #24]
 800fbae:	4604      	mov	r4, r0
 800fbb0:	920b      	str	r2, [sp, #44]	; 0x2c
 800fbb2:	9312      	str	r3, [sp, #72]	; 0x48
 800fbb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fbb8:	e9cd 6700 	strd	r6, r7, [sp]
 800fbbc:	b93d      	cbnz	r5, 800fbce <_dtoa_r+0x2e>
 800fbbe:	2010      	movs	r0, #16
 800fbc0:	f000 ff92 	bl	8010ae8 <malloc>
 800fbc4:	6260      	str	r0, [r4, #36]	; 0x24
 800fbc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fbca:	6005      	str	r5, [r0, #0]
 800fbcc:	60c5      	str	r5, [r0, #12]
 800fbce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbd0:	6819      	ldr	r1, [r3, #0]
 800fbd2:	b151      	cbz	r1, 800fbea <_dtoa_r+0x4a>
 800fbd4:	685a      	ldr	r2, [r3, #4]
 800fbd6:	604a      	str	r2, [r1, #4]
 800fbd8:	2301      	movs	r3, #1
 800fbda:	4093      	lsls	r3, r2
 800fbdc:	608b      	str	r3, [r1, #8]
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f000 ffc9 	bl	8010b76 <_Bfree>
 800fbe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	1e3b      	subs	r3, r7, #0
 800fbec:	bfbb      	ittet	lt
 800fbee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fbf2:	9301      	strlt	r3, [sp, #4]
 800fbf4:	2300      	movge	r3, #0
 800fbf6:	2201      	movlt	r2, #1
 800fbf8:	bfac      	ite	ge
 800fbfa:	f8c8 3000 	strge.w	r3, [r8]
 800fbfe:	f8c8 2000 	strlt.w	r2, [r8]
 800fc02:	4baf      	ldr	r3, [pc, #700]	; (800fec0 <_dtoa_r+0x320>)
 800fc04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fc08:	ea33 0308 	bics.w	r3, r3, r8
 800fc0c:	d114      	bne.n	800fc38 <_dtoa_r+0x98>
 800fc0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc10:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc14:	6013      	str	r3, [r2, #0]
 800fc16:	9b00      	ldr	r3, [sp, #0]
 800fc18:	b923      	cbnz	r3, 800fc24 <_dtoa_r+0x84>
 800fc1a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	f000 8542 	beq.w	80106a8 <_dtoa_r+0xb08>
 800fc24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc26:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fed4 <_dtoa_r+0x334>
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f000 8544 	beq.w	80106b8 <_dtoa_r+0xb18>
 800fc30:	f10b 0303 	add.w	r3, fp, #3
 800fc34:	f000 bd3e 	b.w	80106b4 <_dtoa_r+0xb14>
 800fc38:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2300      	movs	r3, #0
 800fc40:	4630      	mov	r0, r6
 800fc42:	4639      	mov	r1, r7
 800fc44:	f7f0 ff68 	bl	8000b18 <__aeabi_dcmpeq>
 800fc48:	4681      	mov	r9, r0
 800fc4a:	b168      	cbz	r0, 800fc68 <_dtoa_r+0xc8>
 800fc4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc4e:	2301      	movs	r3, #1
 800fc50:	6013      	str	r3, [r2, #0]
 800fc52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	f000 8524 	beq.w	80106a2 <_dtoa_r+0xb02>
 800fc5a:	4b9a      	ldr	r3, [pc, #616]	; (800fec4 <_dtoa_r+0x324>)
 800fc5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc5e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800fc62:	6013      	str	r3, [r2, #0]
 800fc64:	f000 bd28 	b.w	80106b8 <_dtoa_r+0xb18>
 800fc68:	aa14      	add	r2, sp, #80	; 0x50
 800fc6a:	a915      	add	r1, sp, #84	; 0x54
 800fc6c:	ec47 6b10 	vmov	d0, r6, r7
 800fc70:	4620      	mov	r0, r4
 800fc72:	f001 f9d8 	bl	8011026 <__d2b>
 800fc76:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fc7a:	9004      	str	r0, [sp, #16]
 800fc7c:	2d00      	cmp	r5, #0
 800fc7e:	d07c      	beq.n	800fd7a <_dtoa_r+0x1da>
 800fc80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc84:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fc88:	46b2      	mov	sl, r6
 800fc8a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fc8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc92:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fc96:	2200      	movs	r2, #0
 800fc98:	4b8b      	ldr	r3, [pc, #556]	; (800fec8 <_dtoa_r+0x328>)
 800fc9a:	4650      	mov	r0, sl
 800fc9c:	4659      	mov	r1, fp
 800fc9e:	f7f0 fb1b 	bl	80002d8 <__aeabi_dsub>
 800fca2:	a381      	add	r3, pc, #516	; (adr r3, 800fea8 <_dtoa_r+0x308>)
 800fca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca8:	f7f0 fcce 	bl	8000648 <__aeabi_dmul>
 800fcac:	a380      	add	r3, pc, #512	; (adr r3, 800feb0 <_dtoa_r+0x310>)
 800fcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb2:	f7f0 fb13 	bl	80002dc <__adddf3>
 800fcb6:	4606      	mov	r6, r0
 800fcb8:	4628      	mov	r0, r5
 800fcba:	460f      	mov	r7, r1
 800fcbc:	f7f0 fc5a 	bl	8000574 <__aeabi_i2d>
 800fcc0:	a37d      	add	r3, pc, #500	; (adr r3, 800feb8 <_dtoa_r+0x318>)
 800fcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc6:	f7f0 fcbf 	bl	8000648 <__aeabi_dmul>
 800fcca:	4602      	mov	r2, r0
 800fccc:	460b      	mov	r3, r1
 800fcce:	4630      	mov	r0, r6
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	f7f0 fb03 	bl	80002dc <__adddf3>
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	460f      	mov	r7, r1
 800fcda:	f7f0 ff65 	bl	8000ba8 <__aeabi_d2iz>
 800fcde:	2200      	movs	r2, #0
 800fce0:	4682      	mov	sl, r0
 800fce2:	2300      	movs	r3, #0
 800fce4:	4630      	mov	r0, r6
 800fce6:	4639      	mov	r1, r7
 800fce8:	f7f0 ff20 	bl	8000b2c <__aeabi_dcmplt>
 800fcec:	b148      	cbz	r0, 800fd02 <_dtoa_r+0x162>
 800fcee:	4650      	mov	r0, sl
 800fcf0:	f7f0 fc40 	bl	8000574 <__aeabi_i2d>
 800fcf4:	4632      	mov	r2, r6
 800fcf6:	463b      	mov	r3, r7
 800fcf8:	f7f0 ff0e 	bl	8000b18 <__aeabi_dcmpeq>
 800fcfc:	b908      	cbnz	r0, 800fd02 <_dtoa_r+0x162>
 800fcfe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fd02:	f1ba 0f16 	cmp.w	sl, #22
 800fd06:	d859      	bhi.n	800fdbc <_dtoa_r+0x21c>
 800fd08:	4970      	ldr	r1, [pc, #448]	; (800fecc <_dtoa_r+0x32c>)
 800fd0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fd0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd16:	f7f0 ff27 	bl	8000b68 <__aeabi_dcmpgt>
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	d050      	beq.n	800fdc0 <_dtoa_r+0x220>
 800fd1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fd22:	2300      	movs	r3, #0
 800fd24:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd28:	1b5d      	subs	r5, r3, r5
 800fd2a:	f1b5 0801 	subs.w	r8, r5, #1
 800fd2e:	bf49      	itett	mi
 800fd30:	f1c5 0301 	rsbmi	r3, r5, #1
 800fd34:	2300      	movpl	r3, #0
 800fd36:	9305      	strmi	r3, [sp, #20]
 800fd38:	f04f 0800 	movmi.w	r8, #0
 800fd3c:	bf58      	it	pl
 800fd3e:	9305      	strpl	r3, [sp, #20]
 800fd40:	f1ba 0f00 	cmp.w	sl, #0
 800fd44:	db3e      	blt.n	800fdc4 <_dtoa_r+0x224>
 800fd46:	2300      	movs	r3, #0
 800fd48:	44d0      	add	r8, sl
 800fd4a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fd4e:	9307      	str	r3, [sp, #28]
 800fd50:	9b06      	ldr	r3, [sp, #24]
 800fd52:	2b09      	cmp	r3, #9
 800fd54:	f200 8090 	bhi.w	800fe78 <_dtoa_r+0x2d8>
 800fd58:	2b05      	cmp	r3, #5
 800fd5a:	bfc4      	itt	gt
 800fd5c:	3b04      	subgt	r3, #4
 800fd5e:	9306      	strgt	r3, [sp, #24]
 800fd60:	9b06      	ldr	r3, [sp, #24]
 800fd62:	f1a3 0302 	sub.w	r3, r3, #2
 800fd66:	bfcc      	ite	gt
 800fd68:	2500      	movgt	r5, #0
 800fd6a:	2501      	movle	r5, #1
 800fd6c:	2b03      	cmp	r3, #3
 800fd6e:	f200 808f 	bhi.w	800fe90 <_dtoa_r+0x2f0>
 800fd72:	e8df f003 	tbb	[pc, r3]
 800fd76:	7f7d      	.short	0x7f7d
 800fd78:	7131      	.short	0x7131
 800fd7a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fd7e:	441d      	add	r5, r3
 800fd80:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fd84:	2820      	cmp	r0, #32
 800fd86:	dd13      	ble.n	800fdb0 <_dtoa_r+0x210>
 800fd88:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fd8c:	9b00      	ldr	r3, [sp, #0]
 800fd8e:	fa08 f800 	lsl.w	r8, r8, r0
 800fd92:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fd96:	fa23 f000 	lsr.w	r0, r3, r0
 800fd9a:	ea48 0000 	orr.w	r0, r8, r0
 800fd9e:	f7f0 fbd9 	bl	8000554 <__aeabi_ui2d>
 800fda2:	2301      	movs	r3, #1
 800fda4:	4682      	mov	sl, r0
 800fda6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fdaa:	3d01      	subs	r5, #1
 800fdac:	9313      	str	r3, [sp, #76]	; 0x4c
 800fdae:	e772      	b.n	800fc96 <_dtoa_r+0xf6>
 800fdb0:	9b00      	ldr	r3, [sp, #0]
 800fdb2:	f1c0 0020 	rsb	r0, r0, #32
 800fdb6:	fa03 f000 	lsl.w	r0, r3, r0
 800fdba:	e7f0      	b.n	800fd9e <_dtoa_r+0x1fe>
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	e7b1      	b.n	800fd24 <_dtoa_r+0x184>
 800fdc0:	900f      	str	r0, [sp, #60]	; 0x3c
 800fdc2:	e7b0      	b.n	800fd26 <_dtoa_r+0x186>
 800fdc4:	9b05      	ldr	r3, [sp, #20]
 800fdc6:	eba3 030a 	sub.w	r3, r3, sl
 800fdca:	9305      	str	r3, [sp, #20]
 800fdcc:	f1ca 0300 	rsb	r3, sl, #0
 800fdd0:	9307      	str	r3, [sp, #28]
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	930e      	str	r3, [sp, #56]	; 0x38
 800fdd6:	e7bb      	b.n	800fd50 <_dtoa_r+0x1b0>
 800fdd8:	2301      	movs	r3, #1
 800fdda:	930a      	str	r3, [sp, #40]	; 0x28
 800fddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	dd59      	ble.n	800fe96 <_dtoa_r+0x2f6>
 800fde2:	9302      	str	r3, [sp, #8]
 800fde4:	4699      	mov	r9, r3
 800fde6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fde8:	2200      	movs	r2, #0
 800fdea:	6072      	str	r2, [r6, #4]
 800fdec:	2204      	movs	r2, #4
 800fdee:	f102 0014 	add.w	r0, r2, #20
 800fdf2:	4298      	cmp	r0, r3
 800fdf4:	6871      	ldr	r1, [r6, #4]
 800fdf6:	d953      	bls.n	800fea0 <_dtoa_r+0x300>
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f000 fe88 	bl	8010b0e <_Balloc>
 800fdfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe00:	6030      	str	r0, [r6, #0]
 800fe02:	f1b9 0f0e 	cmp.w	r9, #14
 800fe06:	f8d3 b000 	ldr.w	fp, [r3]
 800fe0a:	f200 80e6 	bhi.w	800ffda <_dtoa_r+0x43a>
 800fe0e:	2d00      	cmp	r5, #0
 800fe10:	f000 80e3 	beq.w	800ffda <_dtoa_r+0x43a>
 800fe14:	ed9d 7b00 	vldr	d7, [sp]
 800fe18:	f1ba 0f00 	cmp.w	sl, #0
 800fe1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fe20:	dd74      	ble.n	800ff0c <_dtoa_r+0x36c>
 800fe22:	4a2a      	ldr	r2, [pc, #168]	; (800fecc <_dtoa_r+0x32c>)
 800fe24:	f00a 030f 	and.w	r3, sl, #15
 800fe28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fe2c:	ed93 7b00 	vldr	d7, [r3]
 800fe30:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fe34:	06f0      	lsls	r0, r6, #27
 800fe36:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fe3a:	d565      	bpl.n	800ff08 <_dtoa_r+0x368>
 800fe3c:	4b24      	ldr	r3, [pc, #144]	; (800fed0 <_dtoa_r+0x330>)
 800fe3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fe42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe46:	f7f0 fd29 	bl	800089c <__aeabi_ddiv>
 800fe4a:	e9cd 0100 	strd	r0, r1, [sp]
 800fe4e:	f006 060f 	and.w	r6, r6, #15
 800fe52:	2503      	movs	r5, #3
 800fe54:	4f1e      	ldr	r7, [pc, #120]	; (800fed0 <_dtoa_r+0x330>)
 800fe56:	e04c      	b.n	800fef2 <_dtoa_r+0x352>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	930a      	str	r3, [sp, #40]	; 0x28
 800fe5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe5e:	4453      	add	r3, sl
 800fe60:	f103 0901 	add.w	r9, r3, #1
 800fe64:	9302      	str	r3, [sp, #8]
 800fe66:	464b      	mov	r3, r9
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	bfb8      	it	lt
 800fe6c:	2301      	movlt	r3, #1
 800fe6e:	e7ba      	b.n	800fde6 <_dtoa_r+0x246>
 800fe70:	2300      	movs	r3, #0
 800fe72:	e7b2      	b.n	800fdda <_dtoa_r+0x23a>
 800fe74:	2300      	movs	r3, #0
 800fe76:	e7f0      	b.n	800fe5a <_dtoa_r+0x2ba>
 800fe78:	2501      	movs	r5, #1
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	9306      	str	r3, [sp, #24]
 800fe7e:	950a      	str	r5, [sp, #40]	; 0x28
 800fe80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe84:	9302      	str	r3, [sp, #8]
 800fe86:	4699      	mov	r9, r3
 800fe88:	2200      	movs	r2, #0
 800fe8a:	2312      	movs	r3, #18
 800fe8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800fe8e:	e7aa      	b.n	800fde6 <_dtoa_r+0x246>
 800fe90:	2301      	movs	r3, #1
 800fe92:	930a      	str	r3, [sp, #40]	; 0x28
 800fe94:	e7f4      	b.n	800fe80 <_dtoa_r+0x2e0>
 800fe96:	2301      	movs	r3, #1
 800fe98:	9302      	str	r3, [sp, #8]
 800fe9a:	4699      	mov	r9, r3
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	e7f5      	b.n	800fe8c <_dtoa_r+0x2ec>
 800fea0:	3101      	adds	r1, #1
 800fea2:	6071      	str	r1, [r6, #4]
 800fea4:	0052      	lsls	r2, r2, #1
 800fea6:	e7a2      	b.n	800fdee <_dtoa_r+0x24e>
 800fea8:	636f4361 	.word	0x636f4361
 800feac:	3fd287a7 	.word	0x3fd287a7
 800feb0:	8b60c8b3 	.word	0x8b60c8b3
 800feb4:	3fc68a28 	.word	0x3fc68a28
 800feb8:	509f79fb 	.word	0x509f79fb
 800febc:	3fd34413 	.word	0x3fd34413
 800fec0:	7ff00000 	.word	0x7ff00000
 800fec4:	08014195 	.word	0x08014195
 800fec8:	3ff80000 	.word	0x3ff80000
 800fecc:	08013fa0 	.word	0x08013fa0
 800fed0:	08013f78 	.word	0x08013f78
 800fed4:	08013f0f 	.word	0x08013f0f
 800fed8:	07f1      	lsls	r1, r6, #31
 800feda:	d508      	bpl.n	800feee <_dtoa_r+0x34e>
 800fedc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fee4:	f7f0 fbb0 	bl	8000648 <__aeabi_dmul>
 800fee8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800feec:	3501      	adds	r5, #1
 800feee:	1076      	asrs	r6, r6, #1
 800fef0:	3708      	adds	r7, #8
 800fef2:	2e00      	cmp	r6, #0
 800fef4:	d1f0      	bne.n	800fed8 <_dtoa_r+0x338>
 800fef6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fefa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fefe:	f7f0 fccd 	bl	800089c <__aeabi_ddiv>
 800ff02:	e9cd 0100 	strd	r0, r1, [sp]
 800ff06:	e01a      	b.n	800ff3e <_dtoa_r+0x39e>
 800ff08:	2502      	movs	r5, #2
 800ff0a:	e7a3      	b.n	800fe54 <_dtoa_r+0x2b4>
 800ff0c:	f000 80a0 	beq.w	8010050 <_dtoa_r+0x4b0>
 800ff10:	f1ca 0600 	rsb	r6, sl, #0
 800ff14:	4b9f      	ldr	r3, [pc, #636]	; (8010194 <_dtoa_r+0x5f4>)
 800ff16:	4fa0      	ldr	r7, [pc, #640]	; (8010198 <_dtoa_r+0x5f8>)
 800ff18:	f006 020f 	and.w	r2, r6, #15
 800ff1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ff28:	f7f0 fb8e 	bl	8000648 <__aeabi_dmul>
 800ff2c:	e9cd 0100 	strd	r0, r1, [sp]
 800ff30:	1136      	asrs	r6, r6, #4
 800ff32:	2300      	movs	r3, #0
 800ff34:	2502      	movs	r5, #2
 800ff36:	2e00      	cmp	r6, #0
 800ff38:	d17f      	bne.n	801003a <_dtoa_r+0x49a>
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d1e1      	bne.n	800ff02 <_dtoa_r+0x362>
 800ff3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	f000 8087 	beq.w	8010054 <_dtoa_r+0x4b4>
 800ff46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	4b93      	ldr	r3, [pc, #588]	; (801019c <_dtoa_r+0x5fc>)
 800ff4e:	4630      	mov	r0, r6
 800ff50:	4639      	mov	r1, r7
 800ff52:	f7f0 fdeb 	bl	8000b2c <__aeabi_dcmplt>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d07c      	beq.n	8010054 <_dtoa_r+0x4b4>
 800ff5a:	f1b9 0f00 	cmp.w	r9, #0
 800ff5e:	d079      	beq.n	8010054 <_dtoa_r+0x4b4>
 800ff60:	9b02      	ldr	r3, [sp, #8]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	dd35      	ble.n	800ffd2 <_dtoa_r+0x432>
 800ff66:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ff6a:	9308      	str	r3, [sp, #32]
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	2200      	movs	r2, #0
 800ff70:	4b8b      	ldr	r3, [pc, #556]	; (80101a0 <_dtoa_r+0x600>)
 800ff72:	4630      	mov	r0, r6
 800ff74:	f7f0 fb68 	bl	8000648 <__aeabi_dmul>
 800ff78:	e9cd 0100 	strd	r0, r1, [sp]
 800ff7c:	9f02      	ldr	r7, [sp, #8]
 800ff7e:	3501      	adds	r5, #1
 800ff80:	4628      	mov	r0, r5
 800ff82:	f7f0 faf7 	bl	8000574 <__aeabi_i2d>
 800ff86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff8a:	f7f0 fb5d 	bl	8000648 <__aeabi_dmul>
 800ff8e:	2200      	movs	r2, #0
 800ff90:	4b84      	ldr	r3, [pc, #528]	; (80101a4 <_dtoa_r+0x604>)
 800ff92:	f7f0 f9a3 	bl	80002dc <__adddf3>
 800ff96:	4605      	mov	r5, r0
 800ff98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ff9c:	2f00      	cmp	r7, #0
 800ff9e:	d15d      	bne.n	801005c <_dtoa_r+0x4bc>
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	4b81      	ldr	r3, [pc, #516]	; (80101a8 <_dtoa_r+0x608>)
 800ffa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffa8:	f7f0 f996 	bl	80002d8 <__aeabi_dsub>
 800ffac:	462a      	mov	r2, r5
 800ffae:	4633      	mov	r3, r6
 800ffb0:	e9cd 0100 	strd	r0, r1, [sp]
 800ffb4:	f7f0 fdd8 	bl	8000b68 <__aeabi_dcmpgt>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	f040 8288 	bne.w	80104ce <_dtoa_r+0x92e>
 800ffbe:	462a      	mov	r2, r5
 800ffc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ffc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffc8:	f7f0 fdb0 	bl	8000b2c <__aeabi_dcmplt>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	f040 827c 	bne.w	80104ca <_dtoa_r+0x92a>
 800ffd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ffd6:	e9cd 2300 	strd	r2, r3, [sp]
 800ffda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	f2c0 8150 	blt.w	8010282 <_dtoa_r+0x6e2>
 800ffe2:	f1ba 0f0e 	cmp.w	sl, #14
 800ffe6:	f300 814c 	bgt.w	8010282 <_dtoa_r+0x6e2>
 800ffea:	4b6a      	ldr	r3, [pc, #424]	; (8010194 <_dtoa_r+0x5f4>)
 800ffec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fff0:	ed93 7b00 	vldr	d7, [r3]
 800fff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fffc:	f280 80d8 	bge.w	80101b0 <_dtoa_r+0x610>
 8010000:	f1b9 0f00 	cmp.w	r9, #0
 8010004:	f300 80d4 	bgt.w	80101b0 <_dtoa_r+0x610>
 8010008:	f040 825e 	bne.w	80104c8 <_dtoa_r+0x928>
 801000c:	2200      	movs	r2, #0
 801000e:	4b66      	ldr	r3, [pc, #408]	; (80101a8 <_dtoa_r+0x608>)
 8010010:	ec51 0b17 	vmov	r0, r1, d7
 8010014:	f7f0 fb18 	bl	8000648 <__aeabi_dmul>
 8010018:	e9dd 2300 	ldrd	r2, r3, [sp]
 801001c:	f7f0 fd9a 	bl	8000b54 <__aeabi_dcmpge>
 8010020:	464f      	mov	r7, r9
 8010022:	464e      	mov	r6, r9
 8010024:	2800      	cmp	r0, #0
 8010026:	f040 8234 	bne.w	8010492 <_dtoa_r+0x8f2>
 801002a:	2331      	movs	r3, #49	; 0x31
 801002c:	f10b 0501 	add.w	r5, fp, #1
 8010030:	f88b 3000 	strb.w	r3, [fp]
 8010034:	f10a 0a01 	add.w	sl, sl, #1
 8010038:	e22f      	b.n	801049a <_dtoa_r+0x8fa>
 801003a:	07f2      	lsls	r2, r6, #31
 801003c:	d505      	bpl.n	801004a <_dtoa_r+0x4aa>
 801003e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010042:	f7f0 fb01 	bl	8000648 <__aeabi_dmul>
 8010046:	3501      	adds	r5, #1
 8010048:	2301      	movs	r3, #1
 801004a:	1076      	asrs	r6, r6, #1
 801004c:	3708      	adds	r7, #8
 801004e:	e772      	b.n	800ff36 <_dtoa_r+0x396>
 8010050:	2502      	movs	r5, #2
 8010052:	e774      	b.n	800ff3e <_dtoa_r+0x39e>
 8010054:	f8cd a020 	str.w	sl, [sp, #32]
 8010058:	464f      	mov	r7, r9
 801005a:	e791      	b.n	800ff80 <_dtoa_r+0x3e0>
 801005c:	4b4d      	ldr	r3, [pc, #308]	; (8010194 <_dtoa_r+0x5f4>)
 801005e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010062:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010068:	2b00      	cmp	r3, #0
 801006a:	d047      	beq.n	80100fc <_dtoa_r+0x55c>
 801006c:	4602      	mov	r2, r0
 801006e:	460b      	mov	r3, r1
 8010070:	2000      	movs	r0, #0
 8010072:	494e      	ldr	r1, [pc, #312]	; (80101ac <_dtoa_r+0x60c>)
 8010074:	f7f0 fc12 	bl	800089c <__aeabi_ddiv>
 8010078:	462a      	mov	r2, r5
 801007a:	4633      	mov	r3, r6
 801007c:	f7f0 f92c 	bl	80002d8 <__aeabi_dsub>
 8010080:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010084:	465d      	mov	r5, fp
 8010086:	e9dd 0100 	ldrd	r0, r1, [sp]
 801008a:	f7f0 fd8d 	bl	8000ba8 <__aeabi_d2iz>
 801008e:	4606      	mov	r6, r0
 8010090:	f7f0 fa70 	bl	8000574 <__aeabi_i2d>
 8010094:	4602      	mov	r2, r0
 8010096:	460b      	mov	r3, r1
 8010098:	e9dd 0100 	ldrd	r0, r1, [sp]
 801009c:	f7f0 f91c 	bl	80002d8 <__aeabi_dsub>
 80100a0:	3630      	adds	r6, #48	; 0x30
 80100a2:	f805 6b01 	strb.w	r6, [r5], #1
 80100a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80100aa:	e9cd 0100 	strd	r0, r1, [sp]
 80100ae:	f7f0 fd3d 	bl	8000b2c <__aeabi_dcmplt>
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d163      	bne.n	801017e <_dtoa_r+0x5de>
 80100b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100ba:	2000      	movs	r0, #0
 80100bc:	4937      	ldr	r1, [pc, #220]	; (801019c <_dtoa_r+0x5fc>)
 80100be:	f7f0 f90b 	bl	80002d8 <__aeabi_dsub>
 80100c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80100c6:	f7f0 fd31 	bl	8000b2c <__aeabi_dcmplt>
 80100ca:	2800      	cmp	r0, #0
 80100cc:	f040 80b7 	bne.w	801023e <_dtoa_r+0x69e>
 80100d0:	eba5 030b 	sub.w	r3, r5, fp
 80100d4:	429f      	cmp	r7, r3
 80100d6:	f77f af7c 	ble.w	800ffd2 <_dtoa_r+0x432>
 80100da:	2200      	movs	r2, #0
 80100dc:	4b30      	ldr	r3, [pc, #192]	; (80101a0 <_dtoa_r+0x600>)
 80100de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80100e2:	f7f0 fab1 	bl	8000648 <__aeabi_dmul>
 80100e6:	2200      	movs	r2, #0
 80100e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80100ec:	4b2c      	ldr	r3, [pc, #176]	; (80101a0 <_dtoa_r+0x600>)
 80100ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100f2:	f7f0 faa9 	bl	8000648 <__aeabi_dmul>
 80100f6:	e9cd 0100 	strd	r0, r1, [sp]
 80100fa:	e7c4      	b.n	8010086 <_dtoa_r+0x4e6>
 80100fc:	462a      	mov	r2, r5
 80100fe:	4633      	mov	r3, r6
 8010100:	f7f0 faa2 	bl	8000648 <__aeabi_dmul>
 8010104:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010108:	eb0b 0507 	add.w	r5, fp, r7
 801010c:	465e      	mov	r6, fp
 801010e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010112:	f7f0 fd49 	bl	8000ba8 <__aeabi_d2iz>
 8010116:	4607      	mov	r7, r0
 8010118:	f7f0 fa2c 	bl	8000574 <__aeabi_i2d>
 801011c:	3730      	adds	r7, #48	; 0x30
 801011e:	4602      	mov	r2, r0
 8010120:	460b      	mov	r3, r1
 8010122:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010126:	f7f0 f8d7 	bl	80002d8 <__aeabi_dsub>
 801012a:	f806 7b01 	strb.w	r7, [r6], #1
 801012e:	42ae      	cmp	r6, r5
 8010130:	e9cd 0100 	strd	r0, r1, [sp]
 8010134:	f04f 0200 	mov.w	r2, #0
 8010138:	d126      	bne.n	8010188 <_dtoa_r+0x5e8>
 801013a:	4b1c      	ldr	r3, [pc, #112]	; (80101ac <_dtoa_r+0x60c>)
 801013c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010140:	f7f0 f8cc 	bl	80002dc <__adddf3>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	e9dd 0100 	ldrd	r0, r1, [sp]
 801014c:	f7f0 fd0c 	bl	8000b68 <__aeabi_dcmpgt>
 8010150:	2800      	cmp	r0, #0
 8010152:	d174      	bne.n	801023e <_dtoa_r+0x69e>
 8010154:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010158:	2000      	movs	r0, #0
 801015a:	4914      	ldr	r1, [pc, #80]	; (80101ac <_dtoa_r+0x60c>)
 801015c:	f7f0 f8bc 	bl	80002d8 <__aeabi_dsub>
 8010160:	4602      	mov	r2, r0
 8010162:	460b      	mov	r3, r1
 8010164:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010168:	f7f0 fce0 	bl	8000b2c <__aeabi_dcmplt>
 801016c:	2800      	cmp	r0, #0
 801016e:	f43f af30 	beq.w	800ffd2 <_dtoa_r+0x432>
 8010172:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010176:	2b30      	cmp	r3, #48	; 0x30
 8010178:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801017c:	d002      	beq.n	8010184 <_dtoa_r+0x5e4>
 801017e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010182:	e04a      	b.n	801021a <_dtoa_r+0x67a>
 8010184:	4615      	mov	r5, r2
 8010186:	e7f4      	b.n	8010172 <_dtoa_r+0x5d2>
 8010188:	4b05      	ldr	r3, [pc, #20]	; (80101a0 <_dtoa_r+0x600>)
 801018a:	f7f0 fa5d 	bl	8000648 <__aeabi_dmul>
 801018e:	e9cd 0100 	strd	r0, r1, [sp]
 8010192:	e7bc      	b.n	801010e <_dtoa_r+0x56e>
 8010194:	08013fa0 	.word	0x08013fa0
 8010198:	08013f78 	.word	0x08013f78
 801019c:	3ff00000 	.word	0x3ff00000
 80101a0:	40240000 	.word	0x40240000
 80101a4:	401c0000 	.word	0x401c0000
 80101a8:	40140000 	.word	0x40140000
 80101ac:	3fe00000 	.word	0x3fe00000
 80101b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80101b4:	465d      	mov	r5, fp
 80101b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101ba:	4630      	mov	r0, r6
 80101bc:	4639      	mov	r1, r7
 80101be:	f7f0 fb6d 	bl	800089c <__aeabi_ddiv>
 80101c2:	f7f0 fcf1 	bl	8000ba8 <__aeabi_d2iz>
 80101c6:	4680      	mov	r8, r0
 80101c8:	f7f0 f9d4 	bl	8000574 <__aeabi_i2d>
 80101cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101d0:	f7f0 fa3a 	bl	8000648 <__aeabi_dmul>
 80101d4:	4602      	mov	r2, r0
 80101d6:	460b      	mov	r3, r1
 80101d8:	4630      	mov	r0, r6
 80101da:	4639      	mov	r1, r7
 80101dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80101e0:	f7f0 f87a 	bl	80002d8 <__aeabi_dsub>
 80101e4:	f805 6b01 	strb.w	r6, [r5], #1
 80101e8:	eba5 060b 	sub.w	r6, r5, fp
 80101ec:	45b1      	cmp	r9, r6
 80101ee:	4602      	mov	r2, r0
 80101f0:	460b      	mov	r3, r1
 80101f2:	d139      	bne.n	8010268 <_dtoa_r+0x6c8>
 80101f4:	f7f0 f872 	bl	80002dc <__adddf3>
 80101f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101fc:	4606      	mov	r6, r0
 80101fe:	460f      	mov	r7, r1
 8010200:	f7f0 fcb2 	bl	8000b68 <__aeabi_dcmpgt>
 8010204:	b9c8      	cbnz	r0, 801023a <_dtoa_r+0x69a>
 8010206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801020a:	4630      	mov	r0, r6
 801020c:	4639      	mov	r1, r7
 801020e:	f7f0 fc83 	bl	8000b18 <__aeabi_dcmpeq>
 8010212:	b110      	cbz	r0, 801021a <_dtoa_r+0x67a>
 8010214:	f018 0f01 	tst.w	r8, #1
 8010218:	d10f      	bne.n	801023a <_dtoa_r+0x69a>
 801021a:	9904      	ldr	r1, [sp, #16]
 801021c:	4620      	mov	r0, r4
 801021e:	f000 fcaa 	bl	8010b76 <_Bfree>
 8010222:	2300      	movs	r3, #0
 8010224:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010226:	702b      	strb	r3, [r5, #0]
 8010228:	f10a 0301 	add.w	r3, sl, #1
 801022c:	6013      	str	r3, [r2, #0]
 801022e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010230:	2b00      	cmp	r3, #0
 8010232:	f000 8241 	beq.w	80106b8 <_dtoa_r+0xb18>
 8010236:	601d      	str	r5, [r3, #0]
 8010238:	e23e      	b.n	80106b8 <_dtoa_r+0xb18>
 801023a:	f8cd a020 	str.w	sl, [sp, #32]
 801023e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010242:	2a39      	cmp	r2, #57	; 0x39
 8010244:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8010248:	d108      	bne.n	801025c <_dtoa_r+0x6bc>
 801024a:	459b      	cmp	fp, r3
 801024c:	d10a      	bne.n	8010264 <_dtoa_r+0x6c4>
 801024e:	9b08      	ldr	r3, [sp, #32]
 8010250:	3301      	adds	r3, #1
 8010252:	9308      	str	r3, [sp, #32]
 8010254:	2330      	movs	r3, #48	; 0x30
 8010256:	f88b 3000 	strb.w	r3, [fp]
 801025a:	465b      	mov	r3, fp
 801025c:	781a      	ldrb	r2, [r3, #0]
 801025e:	3201      	adds	r2, #1
 8010260:	701a      	strb	r2, [r3, #0]
 8010262:	e78c      	b.n	801017e <_dtoa_r+0x5de>
 8010264:	461d      	mov	r5, r3
 8010266:	e7ea      	b.n	801023e <_dtoa_r+0x69e>
 8010268:	2200      	movs	r2, #0
 801026a:	4b9b      	ldr	r3, [pc, #620]	; (80104d8 <_dtoa_r+0x938>)
 801026c:	f7f0 f9ec 	bl	8000648 <__aeabi_dmul>
 8010270:	2200      	movs	r2, #0
 8010272:	2300      	movs	r3, #0
 8010274:	4606      	mov	r6, r0
 8010276:	460f      	mov	r7, r1
 8010278:	f7f0 fc4e 	bl	8000b18 <__aeabi_dcmpeq>
 801027c:	2800      	cmp	r0, #0
 801027e:	d09a      	beq.n	80101b6 <_dtoa_r+0x616>
 8010280:	e7cb      	b.n	801021a <_dtoa_r+0x67a>
 8010282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010284:	2a00      	cmp	r2, #0
 8010286:	f000 808b 	beq.w	80103a0 <_dtoa_r+0x800>
 801028a:	9a06      	ldr	r2, [sp, #24]
 801028c:	2a01      	cmp	r2, #1
 801028e:	dc6e      	bgt.n	801036e <_dtoa_r+0x7ce>
 8010290:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010292:	2a00      	cmp	r2, #0
 8010294:	d067      	beq.n	8010366 <_dtoa_r+0x7c6>
 8010296:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801029a:	9f07      	ldr	r7, [sp, #28]
 801029c:	9d05      	ldr	r5, [sp, #20]
 801029e:	9a05      	ldr	r2, [sp, #20]
 80102a0:	2101      	movs	r1, #1
 80102a2:	441a      	add	r2, r3
 80102a4:	4620      	mov	r0, r4
 80102a6:	9205      	str	r2, [sp, #20]
 80102a8:	4498      	add	r8, r3
 80102aa:	f000 fd04 	bl	8010cb6 <__i2b>
 80102ae:	4606      	mov	r6, r0
 80102b0:	2d00      	cmp	r5, #0
 80102b2:	dd0c      	ble.n	80102ce <_dtoa_r+0x72e>
 80102b4:	f1b8 0f00 	cmp.w	r8, #0
 80102b8:	dd09      	ble.n	80102ce <_dtoa_r+0x72e>
 80102ba:	4545      	cmp	r5, r8
 80102bc:	9a05      	ldr	r2, [sp, #20]
 80102be:	462b      	mov	r3, r5
 80102c0:	bfa8      	it	ge
 80102c2:	4643      	movge	r3, r8
 80102c4:	1ad2      	subs	r2, r2, r3
 80102c6:	9205      	str	r2, [sp, #20]
 80102c8:	1aed      	subs	r5, r5, r3
 80102ca:	eba8 0803 	sub.w	r8, r8, r3
 80102ce:	9b07      	ldr	r3, [sp, #28]
 80102d0:	b1eb      	cbz	r3, 801030e <_dtoa_r+0x76e>
 80102d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d067      	beq.n	80103a8 <_dtoa_r+0x808>
 80102d8:	b18f      	cbz	r7, 80102fe <_dtoa_r+0x75e>
 80102da:	4631      	mov	r1, r6
 80102dc:	463a      	mov	r2, r7
 80102de:	4620      	mov	r0, r4
 80102e0:	f000 fd88 	bl	8010df4 <__pow5mult>
 80102e4:	9a04      	ldr	r2, [sp, #16]
 80102e6:	4601      	mov	r1, r0
 80102e8:	4606      	mov	r6, r0
 80102ea:	4620      	mov	r0, r4
 80102ec:	f000 fcec 	bl	8010cc8 <__multiply>
 80102f0:	9904      	ldr	r1, [sp, #16]
 80102f2:	9008      	str	r0, [sp, #32]
 80102f4:	4620      	mov	r0, r4
 80102f6:	f000 fc3e 	bl	8010b76 <_Bfree>
 80102fa:	9b08      	ldr	r3, [sp, #32]
 80102fc:	9304      	str	r3, [sp, #16]
 80102fe:	9b07      	ldr	r3, [sp, #28]
 8010300:	1bda      	subs	r2, r3, r7
 8010302:	d004      	beq.n	801030e <_dtoa_r+0x76e>
 8010304:	9904      	ldr	r1, [sp, #16]
 8010306:	4620      	mov	r0, r4
 8010308:	f000 fd74 	bl	8010df4 <__pow5mult>
 801030c:	9004      	str	r0, [sp, #16]
 801030e:	2101      	movs	r1, #1
 8010310:	4620      	mov	r0, r4
 8010312:	f000 fcd0 	bl	8010cb6 <__i2b>
 8010316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010318:	4607      	mov	r7, r0
 801031a:	2b00      	cmp	r3, #0
 801031c:	f000 81d0 	beq.w	80106c0 <_dtoa_r+0xb20>
 8010320:	461a      	mov	r2, r3
 8010322:	4601      	mov	r1, r0
 8010324:	4620      	mov	r0, r4
 8010326:	f000 fd65 	bl	8010df4 <__pow5mult>
 801032a:	9b06      	ldr	r3, [sp, #24]
 801032c:	2b01      	cmp	r3, #1
 801032e:	4607      	mov	r7, r0
 8010330:	dc40      	bgt.n	80103b4 <_dtoa_r+0x814>
 8010332:	9b00      	ldr	r3, [sp, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d139      	bne.n	80103ac <_dtoa_r+0x80c>
 8010338:	9b01      	ldr	r3, [sp, #4]
 801033a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801033e:	2b00      	cmp	r3, #0
 8010340:	d136      	bne.n	80103b0 <_dtoa_r+0x810>
 8010342:	9b01      	ldr	r3, [sp, #4]
 8010344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010348:	0d1b      	lsrs	r3, r3, #20
 801034a:	051b      	lsls	r3, r3, #20
 801034c:	b12b      	cbz	r3, 801035a <_dtoa_r+0x7ba>
 801034e:	9b05      	ldr	r3, [sp, #20]
 8010350:	3301      	adds	r3, #1
 8010352:	9305      	str	r3, [sp, #20]
 8010354:	f108 0801 	add.w	r8, r8, #1
 8010358:	2301      	movs	r3, #1
 801035a:	9307      	str	r3, [sp, #28]
 801035c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801035e:	2b00      	cmp	r3, #0
 8010360:	d12a      	bne.n	80103b8 <_dtoa_r+0x818>
 8010362:	2001      	movs	r0, #1
 8010364:	e030      	b.n	80103c8 <_dtoa_r+0x828>
 8010366:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010368:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801036c:	e795      	b.n	801029a <_dtoa_r+0x6fa>
 801036e:	9b07      	ldr	r3, [sp, #28]
 8010370:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8010374:	42bb      	cmp	r3, r7
 8010376:	bfbf      	itttt	lt
 8010378:	9b07      	ldrlt	r3, [sp, #28]
 801037a:	9707      	strlt	r7, [sp, #28]
 801037c:	1afa      	sublt	r2, r7, r3
 801037e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010380:	bfbb      	ittet	lt
 8010382:	189b      	addlt	r3, r3, r2
 8010384:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010386:	1bdf      	subge	r7, r3, r7
 8010388:	2700      	movlt	r7, #0
 801038a:	f1b9 0f00 	cmp.w	r9, #0
 801038e:	bfb5      	itete	lt
 8010390:	9b05      	ldrlt	r3, [sp, #20]
 8010392:	9d05      	ldrge	r5, [sp, #20]
 8010394:	eba3 0509 	sublt.w	r5, r3, r9
 8010398:	464b      	movge	r3, r9
 801039a:	bfb8      	it	lt
 801039c:	2300      	movlt	r3, #0
 801039e:	e77e      	b.n	801029e <_dtoa_r+0x6fe>
 80103a0:	9f07      	ldr	r7, [sp, #28]
 80103a2:	9d05      	ldr	r5, [sp, #20]
 80103a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80103a6:	e783      	b.n	80102b0 <_dtoa_r+0x710>
 80103a8:	9a07      	ldr	r2, [sp, #28]
 80103aa:	e7ab      	b.n	8010304 <_dtoa_r+0x764>
 80103ac:	2300      	movs	r3, #0
 80103ae:	e7d4      	b.n	801035a <_dtoa_r+0x7ba>
 80103b0:	9b00      	ldr	r3, [sp, #0]
 80103b2:	e7d2      	b.n	801035a <_dtoa_r+0x7ba>
 80103b4:	2300      	movs	r3, #0
 80103b6:	9307      	str	r3, [sp, #28]
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80103be:	6918      	ldr	r0, [r3, #16]
 80103c0:	f000 fc2b 	bl	8010c1a <__hi0bits>
 80103c4:	f1c0 0020 	rsb	r0, r0, #32
 80103c8:	4440      	add	r0, r8
 80103ca:	f010 001f 	ands.w	r0, r0, #31
 80103ce:	d047      	beq.n	8010460 <_dtoa_r+0x8c0>
 80103d0:	f1c0 0320 	rsb	r3, r0, #32
 80103d4:	2b04      	cmp	r3, #4
 80103d6:	dd3b      	ble.n	8010450 <_dtoa_r+0x8b0>
 80103d8:	9b05      	ldr	r3, [sp, #20]
 80103da:	f1c0 001c 	rsb	r0, r0, #28
 80103de:	4403      	add	r3, r0
 80103e0:	9305      	str	r3, [sp, #20]
 80103e2:	4405      	add	r5, r0
 80103e4:	4480      	add	r8, r0
 80103e6:	9b05      	ldr	r3, [sp, #20]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	dd05      	ble.n	80103f8 <_dtoa_r+0x858>
 80103ec:	461a      	mov	r2, r3
 80103ee:	9904      	ldr	r1, [sp, #16]
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 fd4d 	bl	8010e90 <__lshift>
 80103f6:	9004      	str	r0, [sp, #16]
 80103f8:	f1b8 0f00 	cmp.w	r8, #0
 80103fc:	dd05      	ble.n	801040a <_dtoa_r+0x86a>
 80103fe:	4639      	mov	r1, r7
 8010400:	4642      	mov	r2, r8
 8010402:	4620      	mov	r0, r4
 8010404:	f000 fd44 	bl	8010e90 <__lshift>
 8010408:	4607      	mov	r7, r0
 801040a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801040c:	b353      	cbz	r3, 8010464 <_dtoa_r+0x8c4>
 801040e:	4639      	mov	r1, r7
 8010410:	9804      	ldr	r0, [sp, #16]
 8010412:	f000 fd91 	bl	8010f38 <__mcmp>
 8010416:	2800      	cmp	r0, #0
 8010418:	da24      	bge.n	8010464 <_dtoa_r+0x8c4>
 801041a:	2300      	movs	r3, #0
 801041c:	220a      	movs	r2, #10
 801041e:	9904      	ldr	r1, [sp, #16]
 8010420:	4620      	mov	r0, r4
 8010422:	f000 fbbf 	bl	8010ba4 <__multadd>
 8010426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010428:	9004      	str	r0, [sp, #16]
 801042a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801042e:	2b00      	cmp	r3, #0
 8010430:	f000 814d 	beq.w	80106ce <_dtoa_r+0xb2e>
 8010434:	2300      	movs	r3, #0
 8010436:	4631      	mov	r1, r6
 8010438:	220a      	movs	r2, #10
 801043a:	4620      	mov	r0, r4
 801043c:	f000 fbb2 	bl	8010ba4 <__multadd>
 8010440:	9b02      	ldr	r3, [sp, #8]
 8010442:	2b00      	cmp	r3, #0
 8010444:	4606      	mov	r6, r0
 8010446:	dc4f      	bgt.n	80104e8 <_dtoa_r+0x948>
 8010448:	9b06      	ldr	r3, [sp, #24]
 801044a:	2b02      	cmp	r3, #2
 801044c:	dd4c      	ble.n	80104e8 <_dtoa_r+0x948>
 801044e:	e011      	b.n	8010474 <_dtoa_r+0x8d4>
 8010450:	d0c9      	beq.n	80103e6 <_dtoa_r+0x846>
 8010452:	9a05      	ldr	r2, [sp, #20]
 8010454:	331c      	adds	r3, #28
 8010456:	441a      	add	r2, r3
 8010458:	9205      	str	r2, [sp, #20]
 801045a:	441d      	add	r5, r3
 801045c:	4498      	add	r8, r3
 801045e:	e7c2      	b.n	80103e6 <_dtoa_r+0x846>
 8010460:	4603      	mov	r3, r0
 8010462:	e7f6      	b.n	8010452 <_dtoa_r+0x8b2>
 8010464:	f1b9 0f00 	cmp.w	r9, #0
 8010468:	dc38      	bgt.n	80104dc <_dtoa_r+0x93c>
 801046a:	9b06      	ldr	r3, [sp, #24]
 801046c:	2b02      	cmp	r3, #2
 801046e:	dd35      	ble.n	80104dc <_dtoa_r+0x93c>
 8010470:	f8cd 9008 	str.w	r9, [sp, #8]
 8010474:	9b02      	ldr	r3, [sp, #8]
 8010476:	b963      	cbnz	r3, 8010492 <_dtoa_r+0x8f2>
 8010478:	4639      	mov	r1, r7
 801047a:	2205      	movs	r2, #5
 801047c:	4620      	mov	r0, r4
 801047e:	f000 fb91 	bl	8010ba4 <__multadd>
 8010482:	4601      	mov	r1, r0
 8010484:	4607      	mov	r7, r0
 8010486:	9804      	ldr	r0, [sp, #16]
 8010488:	f000 fd56 	bl	8010f38 <__mcmp>
 801048c:	2800      	cmp	r0, #0
 801048e:	f73f adcc 	bgt.w	801002a <_dtoa_r+0x48a>
 8010492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010494:	465d      	mov	r5, fp
 8010496:	ea6f 0a03 	mvn.w	sl, r3
 801049a:	f04f 0900 	mov.w	r9, #0
 801049e:	4639      	mov	r1, r7
 80104a0:	4620      	mov	r0, r4
 80104a2:	f000 fb68 	bl	8010b76 <_Bfree>
 80104a6:	2e00      	cmp	r6, #0
 80104a8:	f43f aeb7 	beq.w	801021a <_dtoa_r+0x67a>
 80104ac:	f1b9 0f00 	cmp.w	r9, #0
 80104b0:	d005      	beq.n	80104be <_dtoa_r+0x91e>
 80104b2:	45b1      	cmp	r9, r6
 80104b4:	d003      	beq.n	80104be <_dtoa_r+0x91e>
 80104b6:	4649      	mov	r1, r9
 80104b8:	4620      	mov	r0, r4
 80104ba:	f000 fb5c 	bl	8010b76 <_Bfree>
 80104be:	4631      	mov	r1, r6
 80104c0:	4620      	mov	r0, r4
 80104c2:	f000 fb58 	bl	8010b76 <_Bfree>
 80104c6:	e6a8      	b.n	801021a <_dtoa_r+0x67a>
 80104c8:	2700      	movs	r7, #0
 80104ca:	463e      	mov	r6, r7
 80104cc:	e7e1      	b.n	8010492 <_dtoa_r+0x8f2>
 80104ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80104d2:	463e      	mov	r6, r7
 80104d4:	e5a9      	b.n	801002a <_dtoa_r+0x48a>
 80104d6:	bf00      	nop
 80104d8:	40240000 	.word	0x40240000
 80104dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104de:	f8cd 9008 	str.w	r9, [sp, #8]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	f000 80fa 	beq.w	80106dc <_dtoa_r+0xb3c>
 80104e8:	2d00      	cmp	r5, #0
 80104ea:	dd05      	ble.n	80104f8 <_dtoa_r+0x958>
 80104ec:	4631      	mov	r1, r6
 80104ee:	462a      	mov	r2, r5
 80104f0:	4620      	mov	r0, r4
 80104f2:	f000 fccd 	bl	8010e90 <__lshift>
 80104f6:	4606      	mov	r6, r0
 80104f8:	9b07      	ldr	r3, [sp, #28]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d04c      	beq.n	8010598 <_dtoa_r+0x9f8>
 80104fe:	6871      	ldr	r1, [r6, #4]
 8010500:	4620      	mov	r0, r4
 8010502:	f000 fb04 	bl	8010b0e <_Balloc>
 8010506:	6932      	ldr	r2, [r6, #16]
 8010508:	3202      	adds	r2, #2
 801050a:	4605      	mov	r5, r0
 801050c:	0092      	lsls	r2, r2, #2
 801050e:	f106 010c 	add.w	r1, r6, #12
 8010512:	300c      	adds	r0, #12
 8010514:	f000 faf0 	bl	8010af8 <memcpy>
 8010518:	2201      	movs	r2, #1
 801051a:	4629      	mov	r1, r5
 801051c:	4620      	mov	r0, r4
 801051e:	f000 fcb7 	bl	8010e90 <__lshift>
 8010522:	9b00      	ldr	r3, [sp, #0]
 8010524:	f8cd b014 	str.w	fp, [sp, #20]
 8010528:	f003 0301 	and.w	r3, r3, #1
 801052c:	46b1      	mov	r9, r6
 801052e:	9307      	str	r3, [sp, #28]
 8010530:	4606      	mov	r6, r0
 8010532:	4639      	mov	r1, r7
 8010534:	9804      	ldr	r0, [sp, #16]
 8010536:	f7ff faa7 	bl	800fa88 <quorem>
 801053a:	4649      	mov	r1, r9
 801053c:	4605      	mov	r5, r0
 801053e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010542:	9804      	ldr	r0, [sp, #16]
 8010544:	f000 fcf8 	bl	8010f38 <__mcmp>
 8010548:	4632      	mov	r2, r6
 801054a:	9000      	str	r0, [sp, #0]
 801054c:	4639      	mov	r1, r7
 801054e:	4620      	mov	r0, r4
 8010550:	f000 fd0c 	bl	8010f6c <__mdiff>
 8010554:	68c3      	ldr	r3, [r0, #12]
 8010556:	4602      	mov	r2, r0
 8010558:	bb03      	cbnz	r3, 801059c <_dtoa_r+0x9fc>
 801055a:	4601      	mov	r1, r0
 801055c:	9008      	str	r0, [sp, #32]
 801055e:	9804      	ldr	r0, [sp, #16]
 8010560:	f000 fcea 	bl	8010f38 <__mcmp>
 8010564:	9a08      	ldr	r2, [sp, #32]
 8010566:	4603      	mov	r3, r0
 8010568:	4611      	mov	r1, r2
 801056a:	4620      	mov	r0, r4
 801056c:	9308      	str	r3, [sp, #32]
 801056e:	f000 fb02 	bl	8010b76 <_Bfree>
 8010572:	9b08      	ldr	r3, [sp, #32]
 8010574:	b9a3      	cbnz	r3, 80105a0 <_dtoa_r+0xa00>
 8010576:	9a06      	ldr	r2, [sp, #24]
 8010578:	b992      	cbnz	r2, 80105a0 <_dtoa_r+0xa00>
 801057a:	9a07      	ldr	r2, [sp, #28]
 801057c:	b982      	cbnz	r2, 80105a0 <_dtoa_r+0xa00>
 801057e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010582:	d029      	beq.n	80105d8 <_dtoa_r+0xa38>
 8010584:	9b00      	ldr	r3, [sp, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	dd01      	ble.n	801058e <_dtoa_r+0x9ee>
 801058a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801058e:	9b05      	ldr	r3, [sp, #20]
 8010590:	1c5d      	adds	r5, r3, #1
 8010592:	f883 8000 	strb.w	r8, [r3]
 8010596:	e782      	b.n	801049e <_dtoa_r+0x8fe>
 8010598:	4630      	mov	r0, r6
 801059a:	e7c2      	b.n	8010522 <_dtoa_r+0x982>
 801059c:	2301      	movs	r3, #1
 801059e:	e7e3      	b.n	8010568 <_dtoa_r+0x9c8>
 80105a0:	9a00      	ldr	r2, [sp, #0]
 80105a2:	2a00      	cmp	r2, #0
 80105a4:	db04      	blt.n	80105b0 <_dtoa_r+0xa10>
 80105a6:	d125      	bne.n	80105f4 <_dtoa_r+0xa54>
 80105a8:	9a06      	ldr	r2, [sp, #24]
 80105aa:	bb1a      	cbnz	r2, 80105f4 <_dtoa_r+0xa54>
 80105ac:	9a07      	ldr	r2, [sp, #28]
 80105ae:	bb0a      	cbnz	r2, 80105f4 <_dtoa_r+0xa54>
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	ddec      	ble.n	801058e <_dtoa_r+0x9ee>
 80105b4:	2201      	movs	r2, #1
 80105b6:	9904      	ldr	r1, [sp, #16]
 80105b8:	4620      	mov	r0, r4
 80105ba:	f000 fc69 	bl	8010e90 <__lshift>
 80105be:	4639      	mov	r1, r7
 80105c0:	9004      	str	r0, [sp, #16]
 80105c2:	f000 fcb9 	bl	8010f38 <__mcmp>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	dc03      	bgt.n	80105d2 <_dtoa_r+0xa32>
 80105ca:	d1e0      	bne.n	801058e <_dtoa_r+0x9ee>
 80105cc:	f018 0f01 	tst.w	r8, #1
 80105d0:	d0dd      	beq.n	801058e <_dtoa_r+0x9ee>
 80105d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80105d6:	d1d8      	bne.n	801058a <_dtoa_r+0x9ea>
 80105d8:	9b05      	ldr	r3, [sp, #20]
 80105da:	9a05      	ldr	r2, [sp, #20]
 80105dc:	1c5d      	adds	r5, r3, #1
 80105de:	2339      	movs	r3, #57	; 0x39
 80105e0:	7013      	strb	r3, [r2, #0]
 80105e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80105e6:	2b39      	cmp	r3, #57	; 0x39
 80105e8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80105ec:	d04f      	beq.n	801068e <_dtoa_r+0xaee>
 80105ee:	3301      	adds	r3, #1
 80105f0:	7013      	strb	r3, [r2, #0]
 80105f2:	e754      	b.n	801049e <_dtoa_r+0x8fe>
 80105f4:	9a05      	ldr	r2, [sp, #20]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f102 0501 	add.w	r5, r2, #1
 80105fc:	dd06      	ble.n	801060c <_dtoa_r+0xa6c>
 80105fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010602:	d0e9      	beq.n	80105d8 <_dtoa_r+0xa38>
 8010604:	f108 0801 	add.w	r8, r8, #1
 8010608:	9b05      	ldr	r3, [sp, #20]
 801060a:	e7c2      	b.n	8010592 <_dtoa_r+0x9f2>
 801060c:	9a02      	ldr	r2, [sp, #8]
 801060e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010612:	eba5 030b 	sub.w	r3, r5, fp
 8010616:	4293      	cmp	r3, r2
 8010618:	d021      	beq.n	801065e <_dtoa_r+0xabe>
 801061a:	2300      	movs	r3, #0
 801061c:	220a      	movs	r2, #10
 801061e:	9904      	ldr	r1, [sp, #16]
 8010620:	4620      	mov	r0, r4
 8010622:	f000 fabf 	bl	8010ba4 <__multadd>
 8010626:	45b1      	cmp	r9, r6
 8010628:	9004      	str	r0, [sp, #16]
 801062a:	f04f 0300 	mov.w	r3, #0
 801062e:	f04f 020a 	mov.w	r2, #10
 8010632:	4649      	mov	r1, r9
 8010634:	4620      	mov	r0, r4
 8010636:	d105      	bne.n	8010644 <_dtoa_r+0xaa4>
 8010638:	f000 fab4 	bl	8010ba4 <__multadd>
 801063c:	4681      	mov	r9, r0
 801063e:	4606      	mov	r6, r0
 8010640:	9505      	str	r5, [sp, #20]
 8010642:	e776      	b.n	8010532 <_dtoa_r+0x992>
 8010644:	f000 faae 	bl	8010ba4 <__multadd>
 8010648:	4631      	mov	r1, r6
 801064a:	4681      	mov	r9, r0
 801064c:	2300      	movs	r3, #0
 801064e:	220a      	movs	r2, #10
 8010650:	4620      	mov	r0, r4
 8010652:	f000 faa7 	bl	8010ba4 <__multadd>
 8010656:	4606      	mov	r6, r0
 8010658:	e7f2      	b.n	8010640 <_dtoa_r+0xaa0>
 801065a:	f04f 0900 	mov.w	r9, #0
 801065e:	2201      	movs	r2, #1
 8010660:	9904      	ldr	r1, [sp, #16]
 8010662:	4620      	mov	r0, r4
 8010664:	f000 fc14 	bl	8010e90 <__lshift>
 8010668:	4639      	mov	r1, r7
 801066a:	9004      	str	r0, [sp, #16]
 801066c:	f000 fc64 	bl	8010f38 <__mcmp>
 8010670:	2800      	cmp	r0, #0
 8010672:	dcb6      	bgt.n	80105e2 <_dtoa_r+0xa42>
 8010674:	d102      	bne.n	801067c <_dtoa_r+0xadc>
 8010676:	f018 0f01 	tst.w	r8, #1
 801067a:	d1b2      	bne.n	80105e2 <_dtoa_r+0xa42>
 801067c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010680:	2b30      	cmp	r3, #48	; 0x30
 8010682:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010686:	f47f af0a 	bne.w	801049e <_dtoa_r+0x8fe>
 801068a:	4615      	mov	r5, r2
 801068c:	e7f6      	b.n	801067c <_dtoa_r+0xadc>
 801068e:	4593      	cmp	fp, r2
 8010690:	d105      	bne.n	801069e <_dtoa_r+0xafe>
 8010692:	2331      	movs	r3, #49	; 0x31
 8010694:	f10a 0a01 	add.w	sl, sl, #1
 8010698:	f88b 3000 	strb.w	r3, [fp]
 801069c:	e6ff      	b.n	801049e <_dtoa_r+0x8fe>
 801069e:	4615      	mov	r5, r2
 80106a0:	e79f      	b.n	80105e2 <_dtoa_r+0xa42>
 80106a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010708 <_dtoa_r+0xb68>
 80106a6:	e007      	b.n	80106b8 <_dtoa_r+0xb18>
 80106a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 801070c <_dtoa_r+0xb6c>
 80106ae:	b11b      	cbz	r3, 80106b8 <_dtoa_r+0xb18>
 80106b0:	f10b 0308 	add.w	r3, fp, #8
 80106b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80106b6:	6013      	str	r3, [r2, #0]
 80106b8:	4658      	mov	r0, fp
 80106ba:	b017      	add	sp, #92	; 0x5c
 80106bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c0:	9b06      	ldr	r3, [sp, #24]
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	f77f ae35 	ble.w	8010332 <_dtoa_r+0x792>
 80106c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106ca:	9307      	str	r3, [sp, #28]
 80106cc:	e649      	b.n	8010362 <_dtoa_r+0x7c2>
 80106ce:	9b02      	ldr	r3, [sp, #8]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	dc03      	bgt.n	80106dc <_dtoa_r+0xb3c>
 80106d4:	9b06      	ldr	r3, [sp, #24]
 80106d6:	2b02      	cmp	r3, #2
 80106d8:	f73f aecc 	bgt.w	8010474 <_dtoa_r+0x8d4>
 80106dc:	465d      	mov	r5, fp
 80106de:	4639      	mov	r1, r7
 80106e0:	9804      	ldr	r0, [sp, #16]
 80106e2:	f7ff f9d1 	bl	800fa88 <quorem>
 80106e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80106ea:	f805 8b01 	strb.w	r8, [r5], #1
 80106ee:	9a02      	ldr	r2, [sp, #8]
 80106f0:	eba5 030b 	sub.w	r3, r5, fp
 80106f4:	429a      	cmp	r2, r3
 80106f6:	ddb0      	ble.n	801065a <_dtoa_r+0xaba>
 80106f8:	2300      	movs	r3, #0
 80106fa:	220a      	movs	r2, #10
 80106fc:	9904      	ldr	r1, [sp, #16]
 80106fe:	4620      	mov	r0, r4
 8010700:	f000 fa50 	bl	8010ba4 <__multadd>
 8010704:	9004      	str	r0, [sp, #16]
 8010706:	e7ea      	b.n	80106de <_dtoa_r+0xb3e>
 8010708:	08014194 	.word	0x08014194
 801070c:	08013f06 	.word	0x08013f06

08010710 <__sflush_r>:
 8010710:	898a      	ldrh	r2, [r1, #12]
 8010712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010716:	4605      	mov	r5, r0
 8010718:	0710      	lsls	r0, r2, #28
 801071a:	460c      	mov	r4, r1
 801071c:	d458      	bmi.n	80107d0 <__sflush_r+0xc0>
 801071e:	684b      	ldr	r3, [r1, #4]
 8010720:	2b00      	cmp	r3, #0
 8010722:	dc05      	bgt.n	8010730 <__sflush_r+0x20>
 8010724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010726:	2b00      	cmp	r3, #0
 8010728:	dc02      	bgt.n	8010730 <__sflush_r+0x20>
 801072a:	2000      	movs	r0, #0
 801072c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010732:	2e00      	cmp	r6, #0
 8010734:	d0f9      	beq.n	801072a <__sflush_r+0x1a>
 8010736:	2300      	movs	r3, #0
 8010738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801073c:	682f      	ldr	r7, [r5, #0]
 801073e:	6a21      	ldr	r1, [r4, #32]
 8010740:	602b      	str	r3, [r5, #0]
 8010742:	d032      	beq.n	80107aa <__sflush_r+0x9a>
 8010744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010746:	89a3      	ldrh	r3, [r4, #12]
 8010748:	075a      	lsls	r2, r3, #29
 801074a:	d505      	bpl.n	8010758 <__sflush_r+0x48>
 801074c:	6863      	ldr	r3, [r4, #4]
 801074e:	1ac0      	subs	r0, r0, r3
 8010750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010752:	b10b      	cbz	r3, 8010758 <__sflush_r+0x48>
 8010754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010756:	1ac0      	subs	r0, r0, r3
 8010758:	2300      	movs	r3, #0
 801075a:	4602      	mov	r2, r0
 801075c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801075e:	6a21      	ldr	r1, [r4, #32]
 8010760:	4628      	mov	r0, r5
 8010762:	47b0      	blx	r6
 8010764:	1c43      	adds	r3, r0, #1
 8010766:	89a3      	ldrh	r3, [r4, #12]
 8010768:	d106      	bne.n	8010778 <__sflush_r+0x68>
 801076a:	6829      	ldr	r1, [r5, #0]
 801076c:	291d      	cmp	r1, #29
 801076e:	d848      	bhi.n	8010802 <__sflush_r+0xf2>
 8010770:	4a29      	ldr	r2, [pc, #164]	; (8010818 <__sflush_r+0x108>)
 8010772:	40ca      	lsrs	r2, r1
 8010774:	07d6      	lsls	r6, r2, #31
 8010776:	d544      	bpl.n	8010802 <__sflush_r+0xf2>
 8010778:	2200      	movs	r2, #0
 801077a:	6062      	str	r2, [r4, #4]
 801077c:	04d9      	lsls	r1, r3, #19
 801077e:	6922      	ldr	r2, [r4, #16]
 8010780:	6022      	str	r2, [r4, #0]
 8010782:	d504      	bpl.n	801078e <__sflush_r+0x7e>
 8010784:	1c42      	adds	r2, r0, #1
 8010786:	d101      	bne.n	801078c <__sflush_r+0x7c>
 8010788:	682b      	ldr	r3, [r5, #0]
 801078a:	b903      	cbnz	r3, 801078e <__sflush_r+0x7e>
 801078c:	6560      	str	r0, [r4, #84]	; 0x54
 801078e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010790:	602f      	str	r7, [r5, #0]
 8010792:	2900      	cmp	r1, #0
 8010794:	d0c9      	beq.n	801072a <__sflush_r+0x1a>
 8010796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801079a:	4299      	cmp	r1, r3
 801079c:	d002      	beq.n	80107a4 <__sflush_r+0x94>
 801079e:	4628      	mov	r0, r5
 80107a0:	f000 fc9e 	bl	80110e0 <_free_r>
 80107a4:	2000      	movs	r0, #0
 80107a6:	6360      	str	r0, [r4, #52]	; 0x34
 80107a8:	e7c0      	b.n	801072c <__sflush_r+0x1c>
 80107aa:	2301      	movs	r3, #1
 80107ac:	4628      	mov	r0, r5
 80107ae:	47b0      	blx	r6
 80107b0:	1c41      	adds	r1, r0, #1
 80107b2:	d1c8      	bne.n	8010746 <__sflush_r+0x36>
 80107b4:	682b      	ldr	r3, [r5, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d0c5      	beq.n	8010746 <__sflush_r+0x36>
 80107ba:	2b1d      	cmp	r3, #29
 80107bc:	d001      	beq.n	80107c2 <__sflush_r+0xb2>
 80107be:	2b16      	cmp	r3, #22
 80107c0:	d101      	bne.n	80107c6 <__sflush_r+0xb6>
 80107c2:	602f      	str	r7, [r5, #0]
 80107c4:	e7b1      	b.n	801072a <__sflush_r+0x1a>
 80107c6:	89a3      	ldrh	r3, [r4, #12]
 80107c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107cc:	81a3      	strh	r3, [r4, #12]
 80107ce:	e7ad      	b.n	801072c <__sflush_r+0x1c>
 80107d0:	690f      	ldr	r7, [r1, #16]
 80107d2:	2f00      	cmp	r7, #0
 80107d4:	d0a9      	beq.n	801072a <__sflush_r+0x1a>
 80107d6:	0793      	lsls	r3, r2, #30
 80107d8:	680e      	ldr	r6, [r1, #0]
 80107da:	bf08      	it	eq
 80107dc:	694b      	ldreq	r3, [r1, #20]
 80107de:	600f      	str	r7, [r1, #0]
 80107e0:	bf18      	it	ne
 80107e2:	2300      	movne	r3, #0
 80107e4:	eba6 0807 	sub.w	r8, r6, r7
 80107e8:	608b      	str	r3, [r1, #8]
 80107ea:	f1b8 0f00 	cmp.w	r8, #0
 80107ee:	dd9c      	ble.n	801072a <__sflush_r+0x1a>
 80107f0:	4643      	mov	r3, r8
 80107f2:	463a      	mov	r2, r7
 80107f4:	6a21      	ldr	r1, [r4, #32]
 80107f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80107f8:	4628      	mov	r0, r5
 80107fa:	47b0      	blx	r6
 80107fc:	2800      	cmp	r0, #0
 80107fe:	dc06      	bgt.n	801080e <__sflush_r+0xfe>
 8010800:	89a3      	ldrh	r3, [r4, #12]
 8010802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010806:	81a3      	strh	r3, [r4, #12]
 8010808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801080c:	e78e      	b.n	801072c <__sflush_r+0x1c>
 801080e:	4407      	add	r7, r0
 8010810:	eba8 0800 	sub.w	r8, r8, r0
 8010814:	e7e9      	b.n	80107ea <__sflush_r+0xda>
 8010816:	bf00      	nop
 8010818:	20400001 	.word	0x20400001

0801081c <_fflush_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	690b      	ldr	r3, [r1, #16]
 8010820:	4605      	mov	r5, r0
 8010822:	460c      	mov	r4, r1
 8010824:	b1db      	cbz	r3, 801085e <_fflush_r+0x42>
 8010826:	b118      	cbz	r0, 8010830 <_fflush_r+0x14>
 8010828:	6983      	ldr	r3, [r0, #24]
 801082a:	b90b      	cbnz	r3, 8010830 <_fflush_r+0x14>
 801082c:	f000 f860 	bl	80108f0 <__sinit>
 8010830:	4b0c      	ldr	r3, [pc, #48]	; (8010864 <_fflush_r+0x48>)
 8010832:	429c      	cmp	r4, r3
 8010834:	d109      	bne.n	801084a <_fflush_r+0x2e>
 8010836:	686c      	ldr	r4, [r5, #4]
 8010838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801083c:	b17b      	cbz	r3, 801085e <_fflush_r+0x42>
 801083e:	4621      	mov	r1, r4
 8010840:	4628      	mov	r0, r5
 8010842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010846:	f7ff bf63 	b.w	8010710 <__sflush_r>
 801084a:	4b07      	ldr	r3, [pc, #28]	; (8010868 <_fflush_r+0x4c>)
 801084c:	429c      	cmp	r4, r3
 801084e:	d101      	bne.n	8010854 <_fflush_r+0x38>
 8010850:	68ac      	ldr	r4, [r5, #8]
 8010852:	e7f1      	b.n	8010838 <_fflush_r+0x1c>
 8010854:	4b05      	ldr	r3, [pc, #20]	; (801086c <_fflush_r+0x50>)
 8010856:	429c      	cmp	r4, r3
 8010858:	bf08      	it	eq
 801085a:	68ec      	ldreq	r4, [r5, #12]
 801085c:	e7ec      	b.n	8010838 <_fflush_r+0x1c>
 801085e:	2000      	movs	r0, #0
 8010860:	bd38      	pop	{r3, r4, r5, pc}
 8010862:	bf00      	nop
 8010864:	08013f34 	.word	0x08013f34
 8010868:	08013f54 	.word	0x08013f54
 801086c:	08013f14 	.word	0x08013f14

08010870 <std>:
 8010870:	2300      	movs	r3, #0
 8010872:	b510      	push	{r4, lr}
 8010874:	4604      	mov	r4, r0
 8010876:	e9c0 3300 	strd	r3, r3, [r0]
 801087a:	6083      	str	r3, [r0, #8]
 801087c:	8181      	strh	r1, [r0, #12]
 801087e:	6643      	str	r3, [r0, #100]	; 0x64
 8010880:	81c2      	strh	r2, [r0, #14]
 8010882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010886:	6183      	str	r3, [r0, #24]
 8010888:	4619      	mov	r1, r3
 801088a:	2208      	movs	r2, #8
 801088c:	305c      	adds	r0, #92	; 0x5c
 801088e:	f7fe fb2f 	bl	800eef0 <memset>
 8010892:	4b05      	ldr	r3, [pc, #20]	; (80108a8 <std+0x38>)
 8010894:	6263      	str	r3, [r4, #36]	; 0x24
 8010896:	4b05      	ldr	r3, [pc, #20]	; (80108ac <std+0x3c>)
 8010898:	62a3      	str	r3, [r4, #40]	; 0x28
 801089a:	4b05      	ldr	r3, [pc, #20]	; (80108b0 <std+0x40>)
 801089c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801089e:	4b05      	ldr	r3, [pc, #20]	; (80108b4 <std+0x44>)
 80108a0:	6224      	str	r4, [r4, #32]
 80108a2:	6323      	str	r3, [r4, #48]	; 0x30
 80108a4:	bd10      	pop	{r4, pc}
 80108a6:	bf00      	nop
 80108a8:	080114f5 	.word	0x080114f5
 80108ac:	08011517 	.word	0x08011517
 80108b0:	0801154f 	.word	0x0801154f
 80108b4:	08011573 	.word	0x08011573

080108b8 <_cleanup_r>:
 80108b8:	4901      	ldr	r1, [pc, #4]	; (80108c0 <_cleanup_r+0x8>)
 80108ba:	f000 b885 	b.w	80109c8 <_fwalk_reent>
 80108be:	bf00      	nop
 80108c0:	0801081d 	.word	0x0801081d

080108c4 <__sfmoreglue>:
 80108c4:	b570      	push	{r4, r5, r6, lr}
 80108c6:	1e4a      	subs	r2, r1, #1
 80108c8:	2568      	movs	r5, #104	; 0x68
 80108ca:	4355      	muls	r5, r2
 80108cc:	460e      	mov	r6, r1
 80108ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80108d2:	f000 fc53 	bl	801117c <_malloc_r>
 80108d6:	4604      	mov	r4, r0
 80108d8:	b140      	cbz	r0, 80108ec <__sfmoreglue+0x28>
 80108da:	2100      	movs	r1, #0
 80108dc:	e9c0 1600 	strd	r1, r6, [r0]
 80108e0:	300c      	adds	r0, #12
 80108e2:	60a0      	str	r0, [r4, #8]
 80108e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80108e8:	f7fe fb02 	bl	800eef0 <memset>
 80108ec:	4620      	mov	r0, r4
 80108ee:	bd70      	pop	{r4, r5, r6, pc}

080108f0 <__sinit>:
 80108f0:	6983      	ldr	r3, [r0, #24]
 80108f2:	b510      	push	{r4, lr}
 80108f4:	4604      	mov	r4, r0
 80108f6:	bb33      	cbnz	r3, 8010946 <__sinit+0x56>
 80108f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80108fc:	6503      	str	r3, [r0, #80]	; 0x50
 80108fe:	4b12      	ldr	r3, [pc, #72]	; (8010948 <__sinit+0x58>)
 8010900:	4a12      	ldr	r2, [pc, #72]	; (801094c <__sinit+0x5c>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	6282      	str	r2, [r0, #40]	; 0x28
 8010906:	4298      	cmp	r0, r3
 8010908:	bf04      	itt	eq
 801090a:	2301      	moveq	r3, #1
 801090c:	6183      	streq	r3, [r0, #24]
 801090e:	f000 f81f 	bl	8010950 <__sfp>
 8010912:	6060      	str	r0, [r4, #4]
 8010914:	4620      	mov	r0, r4
 8010916:	f000 f81b 	bl	8010950 <__sfp>
 801091a:	60a0      	str	r0, [r4, #8]
 801091c:	4620      	mov	r0, r4
 801091e:	f000 f817 	bl	8010950 <__sfp>
 8010922:	2200      	movs	r2, #0
 8010924:	60e0      	str	r0, [r4, #12]
 8010926:	2104      	movs	r1, #4
 8010928:	6860      	ldr	r0, [r4, #4]
 801092a:	f7ff ffa1 	bl	8010870 <std>
 801092e:	2201      	movs	r2, #1
 8010930:	2109      	movs	r1, #9
 8010932:	68a0      	ldr	r0, [r4, #8]
 8010934:	f7ff ff9c 	bl	8010870 <std>
 8010938:	2202      	movs	r2, #2
 801093a:	2112      	movs	r1, #18
 801093c:	68e0      	ldr	r0, [r4, #12]
 801093e:	f7ff ff97 	bl	8010870 <std>
 8010942:	2301      	movs	r3, #1
 8010944:	61a3      	str	r3, [r4, #24]
 8010946:	bd10      	pop	{r4, pc}
 8010948:	08013ed0 	.word	0x08013ed0
 801094c:	080108b9 	.word	0x080108b9

08010950 <__sfp>:
 8010950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010952:	4b1b      	ldr	r3, [pc, #108]	; (80109c0 <__sfp+0x70>)
 8010954:	681e      	ldr	r6, [r3, #0]
 8010956:	69b3      	ldr	r3, [r6, #24]
 8010958:	4607      	mov	r7, r0
 801095a:	b913      	cbnz	r3, 8010962 <__sfp+0x12>
 801095c:	4630      	mov	r0, r6
 801095e:	f7ff ffc7 	bl	80108f0 <__sinit>
 8010962:	3648      	adds	r6, #72	; 0x48
 8010964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010968:	3b01      	subs	r3, #1
 801096a:	d503      	bpl.n	8010974 <__sfp+0x24>
 801096c:	6833      	ldr	r3, [r6, #0]
 801096e:	b133      	cbz	r3, 801097e <__sfp+0x2e>
 8010970:	6836      	ldr	r6, [r6, #0]
 8010972:	e7f7      	b.n	8010964 <__sfp+0x14>
 8010974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010978:	b16d      	cbz	r5, 8010996 <__sfp+0x46>
 801097a:	3468      	adds	r4, #104	; 0x68
 801097c:	e7f4      	b.n	8010968 <__sfp+0x18>
 801097e:	2104      	movs	r1, #4
 8010980:	4638      	mov	r0, r7
 8010982:	f7ff ff9f 	bl	80108c4 <__sfmoreglue>
 8010986:	6030      	str	r0, [r6, #0]
 8010988:	2800      	cmp	r0, #0
 801098a:	d1f1      	bne.n	8010970 <__sfp+0x20>
 801098c:	230c      	movs	r3, #12
 801098e:	603b      	str	r3, [r7, #0]
 8010990:	4604      	mov	r4, r0
 8010992:	4620      	mov	r0, r4
 8010994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010996:	4b0b      	ldr	r3, [pc, #44]	; (80109c4 <__sfp+0x74>)
 8010998:	6665      	str	r5, [r4, #100]	; 0x64
 801099a:	e9c4 5500 	strd	r5, r5, [r4]
 801099e:	60a5      	str	r5, [r4, #8]
 80109a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80109a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80109a8:	2208      	movs	r2, #8
 80109aa:	4629      	mov	r1, r5
 80109ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80109b0:	f7fe fa9e 	bl	800eef0 <memset>
 80109b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80109b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80109bc:	e7e9      	b.n	8010992 <__sfp+0x42>
 80109be:	bf00      	nop
 80109c0:	08013ed0 	.word	0x08013ed0
 80109c4:	ffff0001 	.word	0xffff0001

080109c8 <_fwalk_reent>:
 80109c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109cc:	4680      	mov	r8, r0
 80109ce:	4689      	mov	r9, r1
 80109d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80109d4:	2600      	movs	r6, #0
 80109d6:	b914      	cbnz	r4, 80109de <_fwalk_reent+0x16>
 80109d8:	4630      	mov	r0, r6
 80109da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80109e2:	3f01      	subs	r7, #1
 80109e4:	d501      	bpl.n	80109ea <_fwalk_reent+0x22>
 80109e6:	6824      	ldr	r4, [r4, #0]
 80109e8:	e7f5      	b.n	80109d6 <_fwalk_reent+0xe>
 80109ea:	89ab      	ldrh	r3, [r5, #12]
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d907      	bls.n	8010a00 <_fwalk_reent+0x38>
 80109f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109f4:	3301      	adds	r3, #1
 80109f6:	d003      	beq.n	8010a00 <_fwalk_reent+0x38>
 80109f8:	4629      	mov	r1, r5
 80109fa:	4640      	mov	r0, r8
 80109fc:	47c8      	blx	r9
 80109fe:	4306      	orrs	r6, r0
 8010a00:	3568      	adds	r5, #104	; 0x68
 8010a02:	e7ee      	b.n	80109e2 <_fwalk_reent+0x1a>

08010a04 <_localeconv_r>:
 8010a04:	4b04      	ldr	r3, [pc, #16]	; (8010a18 <_localeconv_r+0x14>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	6a18      	ldr	r0, [r3, #32]
 8010a0a:	4b04      	ldr	r3, [pc, #16]	; (8010a1c <_localeconv_r+0x18>)
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	bf08      	it	eq
 8010a10:	4618      	moveq	r0, r3
 8010a12:	30f0      	adds	r0, #240	; 0xf0
 8010a14:	4770      	bx	lr
 8010a16:	bf00      	nop
 8010a18:	20001c34 	.word	0x20001c34
 8010a1c:	20001c98 	.word	0x20001c98

08010a20 <__swhatbuf_r>:
 8010a20:	b570      	push	{r4, r5, r6, lr}
 8010a22:	460e      	mov	r6, r1
 8010a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a28:	2900      	cmp	r1, #0
 8010a2a:	b096      	sub	sp, #88	; 0x58
 8010a2c:	4614      	mov	r4, r2
 8010a2e:	461d      	mov	r5, r3
 8010a30:	da07      	bge.n	8010a42 <__swhatbuf_r+0x22>
 8010a32:	2300      	movs	r3, #0
 8010a34:	602b      	str	r3, [r5, #0]
 8010a36:	89b3      	ldrh	r3, [r6, #12]
 8010a38:	061a      	lsls	r2, r3, #24
 8010a3a:	d410      	bmi.n	8010a5e <__swhatbuf_r+0x3e>
 8010a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a40:	e00e      	b.n	8010a60 <__swhatbuf_r+0x40>
 8010a42:	466a      	mov	r2, sp
 8010a44:	f000 fdbc 	bl	80115c0 <_fstat_r>
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	dbf2      	blt.n	8010a32 <__swhatbuf_r+0x12>
 8010a4c:	9a01      	ldr	r2, [sp, #4]
 8010a4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a56:	425a      	negs	r2, r3
 8010a58:	415a      	adcs	r2, r3
 8010a5a:	602a      	str	r2, [r5, #0]
 8010a5c:	e7ee      	b.n	8010a3c <__swhatbuf_r+0x1c>
 8010a5e:	2340      	movs	r3, #64	; 0x40
 8010a60:	2000      	movs	r0, #0
 8010a62:	6023      	str	r3, [r4, #0]
 8010a64:	b016      	add	sp, #88	; 0x58
 8010a66:	bd70      	pop	{r4, r5, r6, pc}

08010a68 <__smakebuf_r>:
 8010a68:	898b      	ldrh	r3, [r1, #12]
 8010a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a6c:	079d      	lsls	r5, r3, #30
 8010a6e:	4606      	mov	r6, r0
 8010a70:	460c      	mov	r4, r1
 8010a72:	d507      	bpl.n	8010a84 <__smakebuf_r+0x1c>
 8010a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a78:	6023      	str	r3, [r4, #0]
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	6163      	str	r3, [r4, #20]
 8010a80:	b002      	add	sp, #8
 8010a82:	bd70      	pop	{r4, r5, r6, pc}
 8010a84:	ab01      	add	r3, sp, #4
 8010a86:	466a      	mov	r2, sp
 8010a88:	f7ff ffca 	bl	8010a20 <__swhatbuf_r>
 8010a8c:	9900      	ldr	r1, [sp, #0]
 8010a8e:	4605      	mov	r5, r0
 8010a90:	4630      	mov	r0, r6
 8010a92:	f000 fb73 	bl	801117c <_malloc_r>
 8010a96:	b948      	cbnz	r0, 8010aac <__smakebuf_r+0x44>
 8010a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a9c:	059a      	lsls	r2, r3, #22
 8010a9e:	d4ef      	bmi.n	8010a80 <__smakebuf_r+0x18>
 8010aa0:	f023 0303 	bic.w	r3, r3, #3
 8010aa4:	f043 0302 	orr.w	r3, r3, #2
 8010aa8:	81a3      	strh	r3, [r4, #12]
 8010aaa:	e7e3      	b.n	8010a74 <__smakebuf_r+0xc>
 8010aac:	4b0d      	ldr	r3, [pc, #52]	; (8010ae4 <__smakebuf_r+0x7c>)
 8010aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ab0:	89a3      	ldrh	r3, [r4, #12]
 8010ab2:	6020      	str	r0, [r4, #0]
 8010ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ab8:	81a3      	strh	r3, [r4, #12]
 8010aba:	9b00      	ldr	r3, [sp, #0]
 8010abc:	6163      	str	r3, [r4, #20]
 8010abe:	9b01      	ldr	r3, [sp, #4]
 8010ac0:	6120      	str	r0, [r4, #16]
 8010ac2:	b15b      	cbz	r3, 8010adc <__smakebuf_r+0x74>
 8010ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f000 fd8b 	bl	80115e4 <_isatty_r>
 8010ace:	b128      	cbz	r0, 8010adc <__smakebuf_r+0x74>
 8010ad0:	89a3      	ldrh	r3, [r4, #12]
 8010ad2:	f023 0303 	bic.w	r3, r3, #3
 8010ad6:	f043 0301 	orr.w	r3, r3, #1
 8010ada:	81a3      	strh	r3, [r4, #12]
 8010adc:	89a3      	ldrh	r3, [r4, #12]
 8010ade:	431d      	orrs	r5, r3
 8010ae0:	81a5      	strh	r5, [r4, #12]
 8010ae2:	e7cd      	b.n	8010a80 <__smakebuf_r+0x18>
 8010ae4:	080108b9 	.word	0x080108b9

08010ae8 <malloc>:
 8010ae8:	4b02      	ldr	r3, [pc, #8]	; (8010af4 <malloc+0xc>)
 8010aea:	4601      	mov	r1, r0
 8010aec:	6818      	ldr	r0, [r3, #0]
 8010aee:	f000 bb45 	b.w	801117c <_malloc_r>
 8010af2:	bf00      	nop
 8010af4:	20001c34 	.word	0x20001c34

08010af8 <memcpy>:
 8010af8:	b510      	push	{r4, lr}
 8010afa:	1e43      	subs	r3, r0, #1
 8010afc:	440a      	add	r2, r1
 8010afe:	4291      	cmp	r1, r2
 8010b00:	d100      	bne.n	8010b04 <memcpy+0xc>
 8010b02:	bd10      	pop	{r4, pc}
 8010b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b0c:	e7f7      	b.n	8010afe <memcpy+0x6>

08010b0e <_Balloc>:
 8010b0e:	b570      	push	{r4, r5, r6, lr}
 8010b10:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010b12:	4604      	mov	r4, r0
 8010b14:	460e      	mov	r6, r1
 8010b16:	b93d      	cbnz	r5, 8010b28 <_Balloc+0x1a>
 8010b18:	2010      	movs	r0, #16
 8010b1a:	f7ff ffe5 	bl	8010ae8 <malloc>
 8010b1e:	6260      	str	r0, [r4, #36]	; 0x24
 8010b20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b24:	6005      	str	r5, [r0, #0]
 8010b26:	60c5      	str	r5, [r0, #12]
 8010b28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010b2a:	68eb      	ldr	r3, [r5, #12]
 8010b2c:	b183      	cbz	r3, 8010b50 <_Balloc+0x42>
 8010b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010b36:	b9b8      	cbnz	r0, 8010b68 <_Balloc+0x5a>
 8010b38:	2101      	movs	r1, #1
 8010b3a:	fa01 f506 	lsl.w	r5, r1, r6
 8010b3e:	1d6a      	adds	r2, r5, #5
 8010b40:	0092      	lsls	r2, r2, #2
 8010b42:	4620      	mov	r0, r4
 8010b44:	f000 fabe 	bl	80110c4 <_calloc_r>
 8010b48:	b160      	cbz	r0, 8010b64 <_Balloc+0x56>
 8010b4a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010b4e:	e00e      	b.n	8010b6e <_Balloc+0x60>
 8010b50:	2221      	movs	r2, #33	; 0x21
 8010b52:	2104      	movs	r1, #4
 8010b54:	4620      	mov	r0, r4
 8010b56:	f000 fab5 	bl	80110c4 <_calloc_r>
 8010b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b5c:	60e8      	str	r0, [r5, #12]
 8010b5e:	68db      	ldr	r3, [r3, #12]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d1e4      	bne.n	8010b2e <_Balloc+0x20>
 8010b64:	2000      	movs	r0, #0
 8010b66:	bd70      	pop	{r4, r5, r6, pc}
 8010b68:	6802      	ldr	r2, [r0, #0]
 8010b6a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010b6e:	2300      	movs	r3, #0
 8010b70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b74:	e7f7      	b.n	8010b66 <_Balloc+0x58>

08010b76 <_Bfree>:
 8010b76:	b570      	push	{r4, r5, r6, lr}
 8010b78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010b7a:	4606      	mov	r6, r0
 8010b7c:	460d      	mov	r5, r1
 8010b7e:	b93c      	cbnz	r4, 8010b90 <_Bfree+0x1a>
 8010b80:	2010      	movs	r0, #16
 8010b82:	f7ff ffb1 	bl	8010ae8 <malloc>
 8010b86:	6270      	str	r0, [r6, #36]	; 0x24
 8010b88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b8c:	6004      	str	r4, [r0, #0]
 8010b8e:	60c4      	str	r4, [r0, #12]
 8010b90:	b13d      	cbz	r5, 8010ba2 <_Bfree+0x2c>
 8010b92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010b94:	686a      	ldr	r2, [r5, #4]
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b9c:	6029      	str	r1, [r5, #0]
 8010b9e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}

08010ba4 <__multadd>:
 8010ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba8:	690d      	ldr	r5, [r1, #16]
 8010baa:	461f      	mov	r7, r3
 8010bac:	4606      	mov	r6, r0
 8010bae:	460c      	mov	r4, r1
 8010bb0:	f101 0c14 	add.w	ip, r1, #20
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f8dc 0000 	ldr.w	r0, [ip]
 8010bba:	b281      	uxth	r1, r0
 8010bbc:	fb02 7101 	mla	r1, r2, r1, r7
 8010bc0:	0c0f      	lsrs	r7, r1, #16
 8010bc2:	0c00      	lsrs	r0, r0, #16
 8010bc4:	fb02 7000 	mla	r0, r2, r0, r7
 8010bc8:	b289      	uxth	r1, r1
 8010bca:	3301      	adds	r3, #1
 8010bcc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010bd0:	429d      	cmp	r5, r3
 8010bd2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010bd6:	f84c 1b04 	str.w	r1, [ip], #4
 8010bda:	dcec      	bgt.n	8010bb6 <__multadd+0x12>
 8010bdc:	b1d7      	cbz	r7, 8010c14 <__multadd+0x70>
 8010bde:	68a3      	ldr	r3, [r4, #8]
 8010be0:	42ab      	cmp	r3, r5
 8010be2:	dc12      	bgt.n	8010c0a <__multadd+0x66>
 8010be4:	6861      	ldr	r1, [r4, #4]
 8010be6:	4630      	mov	r0, r6
 8010be8:	3101      	adds	r1, #1
 8010bea:	f7ff ff90 	bl	8010b0e <_Balloc>
 8010bee:	6922      	ldr	r2, [r4, #16]
 8010bf0:	3202      	adds	r2, #2
 8010bf2:	f104 010c 	add.w	r1, r4, #12
 8010bf6:	4680      	mov	r8, r0
 8010bf8:	0092      	lsls	r2, r2, #2
 8010bfa:	300c      	adds	r0, #12
 8010bfc:	f7ff ff7c 	bl	8010af8 <memcpy>
 8010c00:	4621      	mov	r1, r4
 8010c02:	4630      	mov	r0, r6
 8010c04:	f7ff ffb7 	bl	8010b76 <_Bfree>
 8010c08:	4644      	mov	r4, r8
 8010c0a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c0e:	3501      	adds	r5, #1
 8010c10:	615f      	str	r7, [r3, #20]
 8010c12:	6125      	str	r5, [r4, #16]
 8010c14:	4620      	mov	r0, r4
 8010c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010c1a <__hi0bits>:
 8010c1a:	0c02      	lsrs	r2, r0, #16
 8010c1c:	0412      	lsls	r2, r2, #16
 8010c1e:	4603      	mov	r3, r0
 8010c20:	b9b2      	cbnz	r2, 8010c50 <__hi0bits+0x36>
 8010c22:	0403      	lsls	r3, r0, #16
 8010c24:	2010      	movs	r0, #16
 8010c26:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010c2a:	bf04      	itt	eq
 8010c2c:	021b      	lsleq	r3, r3, #8
 8010c2e:	3008      	addeq	r0, #8
 8010c30:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010c34:	bf04      	itt	eq
 8010c36:	011b      	lsleq	r3, r3, #4
 8010c38:	3004      	addeq	r0, #4
 8010c3a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010c3e:	bf04      	itt	eq
 8010c40:	009b      	lsleq	r3, r3, #2
 8010c42:	3002      	addeq	r0, #2
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	db06      	blt.n	8010c56 <__hi0bits+0x3c>
 8010c48:	005b      	lsls	r3, r3, #1
 8010c4a:	d503      	bpl.n	8010c54 <__hi0bits+0x3a>
 8010c4c:	3001      	adds	r0, #1
 8010c4e:	4770      	bx	lr
 8010c50:	2000      	movs	r0, #0
 8010c52:	e7e8      	b.n	8010c26 <__hi0bits+0xc>
 8010c54:	2020      	movs	r0, #32
 8010c56:	4770      	bx	lr

08010c58 <__lo0bits>:
 8010c58:	6803      	ldr	r3, [r0, #0]
 8010c5a:	f013 0207 	ands.w	r2, r3, #7
 8010c5e:	4601      	mov	r1, r0
 8010c60:	d00b      	beq.n	8010c7a <__lo0bits+0x22>
 8010c62:	07da      	lsls	r2, r3, #31
 8010c64:	d423      	bmi.n	8010cae <__lo0bits+0x56>
 8010c66:	0798      	lsls	r0, r3, #30
 8010c68:	bf49      	itett	mi
 8010c6a:	085b      	lsrmi	r3, r3, #1
 8010c6c:	089b      	lsrpl	r3, r3, #2
 8010c6e:	2001      	movmi	r0, #1
 8010c70:	600b      	strmi	r3, [r1, #0]
 8010c72:	bf5c      	itt	pl
 8010c74:	600b      	strpl	r3, [r1, #0]
 8010c76:	2002      	movpl	r0, #2
 8010c78:	4770      	bx	lr
 8010c7a:	b298      	uxth	r0, r3
 8010c7c:	b9a8      	cbnz	r0, 8010caa <__lo0bits+0x52>
 8010c7e:	0c1b      	lsrs	r3, r3, #16
 8010c80:	2010      	movs	r0, #16
 8010c82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010c86:	bf04      	itt	eq
 8010c88:	0a1b      	lsreq	r3, r3, #8
 8010c8a:	3008      	addeq	r0, #8
 8010c8c:	071a      	lsls	r2, r3, #28
 8010c8e:	bf04      	itt	eq
 8010c90:	091b      	lsreq	r3, r3, #4
 8010c92:	3004      	addeq	r0, #4
 8010c94:	079a      	lsls	r2, r3, #30
 8010c96:	bf04      	itt	eq
 8010c98:	089b      	lsreq	r3, r3, #2
 8010c9a:	3002      	addeq	r0, #2
 8010c9c:	07da      	lsls	r2, r3, #31
 8010c9e:	d402      	bmi.n	8010ca6 <__lo0bits+0x4e>
 8010ca0:	085b      	lsrs	r3, r3, #1
 8010ca2:	d006      	beq.n	8010cb2 <__lo0bits+0x5a>
 8010ca4:	3001      	adds	r0, #1
 8010ca6:	600b      	str	r3, [r1, #0]
 8010ca8:	4770      	bx	lr
 8010caa:	4610      	mov	r0, r2
 8010cac:	e7e9      	b.n	8010c82 <__lo0bits+0x2a>
 8010cae:	2000      	movs	r0, #0
 8010cb0:	4770      	bx	lr
 8010cb2:	2020      	movs	r0, #32
 8010cb4:	4770      	bx	lr

08010cb6 <__i2b>:
 8010cb6:	b510      	push	{r4, lr}
 8010cb8:	460c      	mov	r4, r1
 8010cba:	2101      	movs	r1, #1
 8010cbc:	f7ff ff27 	bl	8010b0e <_Balloc>
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	6144      	str	r4, [r0, #20]
 8010cc4:	6102      	str	r2, [r0, #16]
 8010cc6:	bd10      	pop	{r4, pc}

08010cc8 <__multiply>:
 8010cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	4614      	mov	r4, r2
 8010cce:	690a      	ldr	r2, [r1, #16]
 8010cd0:	6923      	ldr	r3, [r4, #16]
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	bfb8      	it	lt
 8010cd6:	460b      	movlt	r3, r1
 8010cd8:	4688      	mov	r8, r1
 8010cda:	bfbc      	itt	lt
 8010cdc:	46a0      	movlt	r8, r4
 8010cde:	461c      	movlt	r4, r3
 8010ce0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ce4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010ce8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010cf0:	eb07 0609 	add.w	r6, r7, r9
 8010cf4:	42b3      	cmp	r3, r6
 8010cf6:	bfb8      	it	lt
 8010cf8:	3101      	addlt	r1, #1
 8010cfa:	f7ff ff08 	bl	8010b0e <_Balloc>
 8010cfe:	f100 0514 	add.w	r5, r0, #20
 8010d02:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010d06:	462b      	mov	r3, r5
 8010d08:	2200      	movs	r2, #0
 8010d0a:	4573      	cmp	r3, lr
 8010d0c:	d316      	bcc.n	8010d3c <__multiply+0x74>
 8010d0e:	f104 0214 	add.w	r2, r4, #20
 8010d12:	f108 0114 	add.w	r1, r8, #20
 8010d16:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010d1a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	9b00      	ldr	r3, [sp, #0]
 8010d22:	9201      	str	r2, [sp, #4]
 8010d24:	4293      	cmp	r3, r2
 8010d26:	d80c      	bhi.n	8010d42 <__multiply+0x7a>
 8010d28:	2e00      	cmp	r6, #0
 8010d2a:	dd03      	ble.n	8010d34 <__multiply+0x6c>
 8010d2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d05d      	beq.n	8010df0 <__multiply+0x128>
 8010d34:	6106      	str	r6, [r0, #16]
 8010d36:	b003      	add	sp, #12
 8010d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3c:	f843 2b04 	str.w	r2, [r3], #4
 8010d40:	e7e3      	b.n	8010d0a <__multiply+0x42>
 8010d42:	f8b2 b000 	ldrh.w	fp, [r2]
 8010d46:	f1bb 0f00 	cmp.w	fp, #0
 8010d4a:	d023      	beq.n	8010d94 <__multiply+0xcc>
 8010d4c:	4689      	mov	r9, r1
 8010d4e:	46ac      	mov	ip, r5
 8010d50:	f04f 0800 	mov.w	r8, #0
 8010d54:	f859 4b04 	ldr.w	r4, [r9], #4
 8010d58:	f8dc a000 	ldr.w	sl, [ip]
 8010d5c:	b2a3      	uxth	r3, r4
 8010d5e:	fa1f fa8a 	uxth.w	sl, sl
 8010d62:	fb0b a303 	mla	r3, fp, r3, sl
 8010d66:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010d6a:	f8dc 4000 	ldr.w	r4, [ip]
 8010d6e:	4443      	add	r3, r8
 8010d70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010d74:	fb0b 840a 	mla	r4, fp, sl, r8
 8010d78:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010d7c:	46e2      	mov	sl, ip
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010d84:	454f      	cmp	r7, r9
 8010d86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010d8a:	f84a 3b04 	str.w	r3, [sl], #4
 8010d8e:	d82b      	bhi.n	8010de8 <__multiply+0x120>
 8010d90:	f8cc 8004 	str.w	r8, [ip, #4]
 8010d94:	9b01      	ldr	r3, [sp, #4]
 8010d96:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010d9a:	3204      	adds	r2, #4
 8010d9c:	f1ba 0f00 	cmp.w	sl, #0
 8010da0:	d020      	beq.n	8010de4 <__multiply+0x11c>
 8010da2:	682b      	ldr	r3, [r5, #0]
 8010da4:	4689      	mov	r9, r1
 8010da6:	46a8      	mov	r8, r5
 8010da8:	f04f 0b00 	mov.w	fp, #0
 8010dac:	f8b9 c000 	ldrh.w	ip, [r9]
 8010db0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010db4:	fb0a 440c 	mla	r4, sl, ip, r4
 8010db8:	445c      	add	r4, fp
 8010dba:	46c4      	mov	ip, r8
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010dc2:	f84c 3b04 	str.w	r3, [ip], #4
 8010dc6:	f859 3b04 	ldr.w	r3, [r9], #4
 8010dca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010dce:	0c1b      	lsrs	r3, r3, #16
 8010dd0:	fb0a b303 	mla	r3, sl, r3, fp
 8010dd4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010dd8:	454f      	cmp	r7, r9
 8010dda:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010dde:	d805      	bhi.n	8010dec <__multiply+0x124>
 8010de0:	f8c8 3004 	str.w	r3, [r8, #4]
 8010de4:	3504      	adds	r5, #4
 8010de6:	e79b      	b.n	8010d20 <__multiply+0x58>
 8010de8:	46d4      	mov	ip, sl
 8010dea:	e7b3      	b.n	8010d54 <__multiply+0x8c>
 8010dec:	46e0      	mov	r8, ip
 8010dee:	e7dd      	b.n	8010dac <__multiply+0xe4>
 8010df0:	3e01      	subs	r6, #1
 8010df2:	e799      	b.n	8010d28 <__multiply+0x60>

08010df4 <__pow5mult>:
 8010df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010df8:	4615      	mov	r5, r2
 8010dfa:	f012 0203 	ands.w	r2, r2, #3
 8010dfe:	4606      	mov	r6, r0
 8010e00:	460f      	mov	r7, r1
 8010e02:	d007      	beq.n	8010e14 <__pow5mult+0x20>
 8010e04:	3a01      	subs	r2, #1
 8010e06:	4c21      	ldr	r4, [pc, #132]	; (8010e8c <__pow5mult+0x98>)
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e0e:	f7ff fec9 	bl	8010ba4 <__multadd>
 8010e12:	4607      	mov	r7, r0
 8010e14:	10ad      	asrs	r5, r5, #2
 8010e16:	d035      	beq.n	8010e84 <__pow5mult+0x90>
 8010e18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e1a:	b93c      	cbnz	r4, 8010e2c <__pow5mult+0x38>
 8010e1c:	2010      	movs	r0, #16
 8010e1e:	f7ff fe63 	bl	8010ae8 <malloc>
 8010e22:	6270      	str	r0, [r6, #36]	; 0x24
 8010e24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e28:	6004      	str	r4, [r0, #0]
 8010e2a:	60c4      	str	r4, [r0, #12]
 8010e2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e34:	b94c      	cbnz	r4, 8010e4a <__pow5mult+0x56>
 8010e36:	f240 2171 	movw	r1, #625	; 0x271
 8010e3a:	4630      	mov	r0, r6
 8010e3c:	f7ff ff3b 	bl	8010cb6 <__i2b>
 8010e40:	2300      	movs	r3, #0
 8010e42:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e46:	4604      	mov	r4, r0
 8010e48:	6003      	str	r3, [r0, #0]
 8010e4a:	f04f 0800 	mov.w	r8, #0
 8010e4e:	07eb      	lsls	r3, r5, #31
 8010e50:	d50a      	bpl.n	8010e68 <__pow5mult+0x74>
 8010e52:	4639      	mov	r1, r7
 8010e54:	4622      	mov	r2, r4
 8010e56:	4630      	mov	r0, r6
 8010e58:	f7ff ff36 	bl	8010cc8 <__multiply>
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	4681      	mov	r9, r0
 8010e60:	4630      	mov	r0, r6
 8010e62:	f7ff fe88 	bl	8010b76 <_Bfree>
 8010e66:	464f      	mov	r7, r9
 8010e68:	106d      	asrs	r5, r5, #1
 8010e6a:	d00b      	beq.n	8010e84 <__pow5mult+0x90>
 8010e6c:	6820      	ldr	r0, [r4, #0]
 8010e6e:	b938      	cbnz	r0, 8010e80 <__pow5mult+0x8c>
 8010e70:	4622      	mov	r2, r4
 8010e72:	4621      	mov	r1, r4
 8010e74:	4630      	mov	r0, r6
 8010e76:	f7ff ff27 	bl	8010cc8 <__multiply>
 8010e7a:	6020      	str	r0, [r4, #0]
 8010e7c:	f8c0 8000 	str.w	r8, [r0]
 8010e80:	4604      	mov	r4, r0
 8010e82:	e7e4      	b.n	8010e4e <__pow5mult+0x5a>
 8010e84:	4638      	mov	r0, r7
 8010e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e8a:	bf00      	nop
 8010e8c:	08014068 	.word	0x08014068

08010e90 <__lshift>:
 8010e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e94:	460c      	mov	r4, r1
 8010e96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e9a:	6923      	ldr	r3, [r4, #16]
 8010e9c:	6849      	ldr	r1, [r1, #4]
 8010e9e:	eb0a 0903 	add.w	r9, sl, r3
 8010ea2:	68a3      	ldr	r3, [r4, #8]
 8010ea4:	4607      	mov	r7, r0
 8010ea6:	4616      	mov	r6, r2
 8010ea8:	f109 0501 	add.w	r5, r9, #1
 8010eac:	42ab      	cmp	r3, r5
 8010eae:	db32      	blt.n	8010f16 <__lshift+0x86>
 8010eb0:	4638      	mov	r0, r7
 8010eb2:	f7ff fe2c 	bl	8010b0e <_Balloc>
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	4680      	mov	r8, r0
 8010eba:	f100 0114 	add.w	r1, r0, #20
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	4553      	cmp	r3, sl
 8010ec2:	db2b      	blt.n	8010f1c <__lshift+0x8c>
 8010ec4:	6920      	ldr	r0, [r4, #16]
 8010ec6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010eca:	f104 0314 	add.w	r3, r4, #20
 8010ece:	f016 021f 	ands.w	r2, r6, #31
 8010ed2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ed6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010eda:	d025      	beq.n	8010f28 <__lshift+0x98>
 8010edc:	f1c2 0e20 	rsb	lr, r2, #32
 8010ee0:	2000      	movs	r0, #0
 8010ee2:	681e      	ldr	r6, [r3, #0]
 8010ee4:	468a      	mov	sl, r1
 8010ee6:	4096      	lsls	r6, r2
 8010ee8:	4330      	orrs	r0, r6
 8010eea:	f84a 0b04 	str.w	r0, [sl], #4
 8010eee:	f853 0b04 	ldr.w	r0, [r3], #4
 8010ef2:	459c      	cmp	ip, r3
 8010ef4:	fa20 f00e 	lsr.w	r0, r0, lr
 8010ef8:	d814      	bhi.n	8010f24 <__lshift+0x94>
 8010efa:	6048      	str	r0, [r1, #4]
 8010efc:	b108      	cbz	r0, 8010f02 <__lshift+0x72>
 8010efe:	f109 0502 	add.w	r5, r9, #2
 8010f02:	3d01      	subs	r5, #1
 8010f04:	4638      	mov	r0, r7
 8010f06:	f8c8 5010 	str.w	r5, [r8, #16]
 8010f0a:	4621      	mov	r1, r4
 8010f0c:	f7ff fe33 	bl	8010b76 <_Bfree>
 8010f10:	4640      	mov	r0, r8
 8010f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f16:	3101      	adds	r1, #1
 8010f18:	005b      	lsls	r3, r3, #1
 8010f1a:	e7c7      	b.n	8010eac <__lshift+0x1c>
 8010f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010f20:	3301      	adds	r3, #1
 8010f22:	e7cd      	b.n	8010ec0 <__lshift+0x30>
 8010f24:	4651      	mov	r1, sl
 8010f26:	e7dc      	b.n	8010ee2 <__lshift+0x52>
 8010f28:	3904      	subs	r1, #4
 8010f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f32:	459c      	cmp	ip, r3
 8010f34:	d8f9      	bhi.n	8010f2a <__lshift+0x9a>
 8010f36:	e7e4      	b.n	8010f02 <__lshift+0x72>

08010f38 <__mcmp>:
 8010f38:	6903      	ldr	r3, [r0, #16]
 8010f3a:	690a      	ldr	r2, [r1, #16]
 8010f3c:	1a9b      	subs	r3, r3, r2
 8010f3e:	b530      	push	{r4, r5, lr}
 8010f40:	d10c      	bne.n	8010f5c <__mcmp+0x24>
 8010f42:	0092      	lsls	r2, r2, #2
 8010f44:	3014      	adds	r0, #20
 8010f46:	3114      	adds	r1, #20
 8010f48:	1884      	adds	r4, r0, r2
 8010f4a:	4411      	add	r1, r2
 8010f4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010f50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010f54:	4295      	cmp	r5, r2
 8010f56:	d003      	beq.n	8010f60 <__mcmp+0x28>
 8010f58:	d305      	bcc.n	8010f66 <__mcmp+0x2e>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	bd30      	pop	{r4, r5, pc}
 8010f60:	42a0      	cmp	r0, r4
 8010f62:	d3f3      	bcc.n	8010f4c <__mcmp+0x14>
 8010f64:	e7fa      	b.n	8010f5c <__mcmp+0x24>
 8010f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f6a:	e7f7      	b.n	8010f5c <__mcmp+0x24>

08010f6c <__mdiff>:
 8010f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f70:	460d      	mov	r5, r1
 8010f72:	4607      	mov	r7, r0
 8010f74:	4611      	mov	r1, r2
 8010f76:	4628      	mov	r0, r5
 8010f78:	4614      	mov	r4, r2
 8010f7a:	f7ff ffdd 	bl	8010f38 <__mcmp>
 8010f7e:	1e06      	subs	r6, r0, #0
 8010f80:	d108      	bne.n	8010f94 <__mdiff+0x28>
 8010f82:	4631      	mov	r1, r6
 8010f84:	4638      	mov	r0, r7
 8010f86:	f7ff fdc2 	bl	8010b0e <_Balloc>
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f94:	bfa4      	itt	ge
 8010f96:	4623      	movge	r3, r4
 8010f98:	462c      	movge	r4, r5
 8010f9a:	4638      	mov	r0, r7
 8010f9c:	6861      	ldr	r1, [r4, #4]
 8010f9e:	bfa6      	itte	ge
 8010fa0:	461d      	movge	r5, r3
 8010fa2:	2600      	movge	r6, #0
 8010fa4:	2601      	movlt	r6, #1
 8010fa6:	f7ff fdb2 	bl	8010b0e <_Balloc>
 8010faa:	692b      	ldr	r3, [r5, #16]
 8010fac:	60c6      	str	r6, [r0, #12]
 8010fae:	6926      	ldr	r6, [r4, #16]
 8010fb0:	f105 0914 	add.w	r9, r5, #20
 8010fb4:	f104 0214 	add.w	r2, r4, #20
 8010fb8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010fbc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010fc0:	f100 0514 	add.w	r5, r0, #20
 8010fc4:	f04f 0e00 	mov.w	lr, #0
 8010fc8:	f852 ab04 	ldr.w	sl, [r2], #4
 8010fcc:	f859 4b04 	ldr.w	r4, [r9], #4
 8010fd0:	fa1e f18a 	uxtah	r1, lr, sl
 8010fd4:	b2a3      	uxth	r3, r4
 8010fd6:	1ac9      	subs	r1, r1, r3
 8010fd8:	0c23      	lsrs	r3, r4, #16
 8010fda:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010fde:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010fe2:	b289      	uxth	r1, r1
 8010fe4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010fe8:	45c8      	cmp	r8, r9
 8010fea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010fee:	4694      	mov	ip, r2
 8010ff0:	f845 3b04 	str.w	r3, [r5], #4
 8010ff4:	d8e8      	bhi.n	8010fc8 <__mdiff+0x5c>
 8010ff6:	45bc      	cmp	ip, r7
 8010ff8:	d304      	bcc.n	8011004 <__mdiff+0x98>
 8010ffa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010ffe:	b183      	cbz	r3, 8011022 <__mdiff+0xb6>
 8011000:	6106      	str	r6, [r0, #16]
 8011002:	e7c5      	b.n	8010f90 <__mdiff+0x24>
 8011004:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011008:	fa1e f381 	uxtah	r3, lr, r1
 801100c:	141a      	asrs	r2, r3, #16
 801100e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011012:	b29b      	uxth	r3, r3
 8011014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011018:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801101c:	f845 3b04 	str.w	r3, [r5], #4
 8011020:	e7e9      	b.n	8010ff6 <__mdiff+0x8a>
 8011022:	3e01      	subs	r6, #1
 8011024:	e7e9      	b.n	8010ffa <__mdiff+0x8e>

08011026 <__d2b>:
 8011026:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801102a:	460e      	mov	r6, r1
 801102c:	2101      	movs	r1, #1
 801102e:	ec59 8b10 	vmov	r8, r9, d0
 8011032:	4615      	mov	r5, r2
 8011034:	f7ff fd6b 	bl	8010b0e <_Balloc>
 8011038:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801103c:	4607      	mov	r7, r0
 801103e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011042:	bb34      	cbnz	r4, 8011092 <__d2b+0x6c>
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	f1b8 0300 	subs.w	r3, r8, #0
 801104a:	d027      	beq.n	801109c <__d2b+0x76>
 801104c:	a802      	add	r0, sp, #8
 801104e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011052:	f7ff fe01 	bl	8010c58 <__lo0bits>
 8011056:	9900      	ldr	r1, [sp, #0]
 8011058:	b1f0      	cbz	r0, 8011098 <__d2b+0x72>
 801105a:	9a01      	ldr	r2, [sp, #4]
 801105c:	f1c0 0320 	rsb	r3, r0, #32
 8011060:	fa02 f303 	lsl.w	r3, r2, r3
 8011064:	430b      	orrs	r3, r1
 8011066:	40c2      	lsrs	r2, r0
 8011068:	617b      	str	r3, [r7, #20]
 801106a:	9201      	str	r2, [sp, #4]
 801106c:	9b01      	ldr	r3, [sp, #4]
 801106e:	61bb      	str	r3, [r7, #24]
 8011070:	2b00      	cmp	r3, #0
 8011072:	bf14      	ite	ne
 8011074:	2102      	movne	r1, #2
 8011076:	2101      	moveq	r1, #1
 8011078:	6139      	str	r1, [r7, #16]
 801107a:	b1c4      	cbz	r4, 80110ae <__d2b+0x88>
 801107c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011080:	4404      	add	r4, r0
 8011082:	6034      	str	r4, [r6, #0]
 8011084:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011088:	6028      	str	r0, [r5, #0]
 801108a:	4638      	mov	r0, r7
 801108c:	b003      	add	sp, #12
 801108e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011096:	e7d5      	b.n	8011044 <__d2b+0x1e>
 8011098:	6179      	str	r1, [r7, #20]
 801109a:	e7e7      	b.n	801106c <__d2b+0x46>
 801109c:	a801      	add	r0, sp, #4
 801109e:	f7ff fddb 	bl	8010c58 <__lo0bits>
 80110a2:	9b01      	ldr	r3, [sp, #4]
 80110a4:	617b      	str	r3, [r7, #20]
 80110a6:	2101      	movs	r1, #1
 80110a8:	6139      	str	r1, [r7, #16]
 80110aa:	3020      	adds	r0, #32
 80110ac:	e7e5      	b.n	801107a <__d2b+0x54>
 80110ae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80110b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80110b6:	6030      	str	r0, [r6, #0]
 80110b8:	6918      	ldr	r0, [r3, #16]
 80110ba:	f7ff fdae 	bl	8010c1a <__hi0bits>
 80110be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80110c2:	e7e1      	b.n	8011088 <__d2b+0x62>

080110c4 <_calloc_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	fb02 f401 	mul.w	r4, r2, r1
 80110ca:	4621      	mov	r1, r4
 80110cc:	f000 f856 	bl	801117c <_malloc_r>
 80110d0:	4605      	mov	r5, r0
 80110d2:	b118      	cbz	r0, 80110dc <_calloc_r+0x18>
 80110d4:	4622      	mov	r2, r4
 80110d6:	2100      	movs	r1, #0
 80110d8:	f7fd ff0a 	bl	800eef0 <memset>
 80110dc:	4628      	mov	r0, r5
 80110de:	bd38      	pop	{r3, r4, r5, pc}

080110e0 <_free_r>:
 80110e0:	b538      	push	{r3, r4, r5, lr}
 80110e2:	4605      	mov	r5, r0
 80110e4:	2900      	cmp	r1, #0
 80110e6:	d045      	beq.n	8011174 <_free_r+0x94>
 80110e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110ec:	1f0c      	subs	r4, r1, #4
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	bfb8      	it	lt
 80110f2:	18e4      	addlt	r4, r4, r3
 80110f4:	f000 fac3 	bl	801167e <__malloc_lock>
 80110f8:	4a1f      	ldr	r2, [pc, #124]	; (8011178 <_free_r+0x98>)
 80110fa:	6813      	ldr	r3, [r2, #0]
 80110fc:	4610      	mov	r0, r2
 80110fe:	b933      	cbnz	r3, 801110e <_free_r+0x2e>
 8011100:	6063      	str	r3, [r4, #4]
 8011102:	6014      	str	r4, [r2, #0]
 8011104:	4628      	mov	r0, r5
 8011106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801110a:	f000 bab9 	b.w	8011680 <__malloc_unlock>
 801110e:	42a3      	cmp	r3, r4
 8011110:	d90c      	bls.n	801112c <_free_r+0x4c>
 8011112:	6821      	ldr	r1, [r4, #0]
 8011114:	1862      	adds	r2, r4, r1
 8011116:	4293      	cmp	r3, r2
 8011118:	bf04      	itt	eq
 801111a:	681a      	ldreq	r2, [r3, #0]
 801111c:	685b      	ldreq	r3, [r3, #4]
 801111e:	6063      	str	r3, [r4, #4]
 8011120:	bf04      	itt	eq
 8011122:	1852      	addeq	r2, r2, r1
 8011124:	6022      	streq	r2, [r4, #0]
 8011126:	6004      	str	r4, [r0, #0]
 8011128:	e7ec      	b.n	8011104 <_free_r+0x24>
 801112a:	4613      	mov	r3, r2
 801112c:	685a      	ldr	r2, [r3, #4]
 801112e:	b10a      	cbz	r2, 8011134 <_free_r+0x54>
 8011130:	42a2      	cmp	r2, r4
 8011132:	d9fa      	bls.n	801112a <_free_r+0x4a>
 8011134:	6819      	ldr	r1, [r3, #0]
 8011136:	1858      	adds	r0, r3, r1
 8011138:	42a0      	cmp	r0, r4
 801113a:	d10b      	bne.n	8011154 <_free_r+0x74>
 801113c:	6820      	ldr	r0, [r4, #0]
 801113e:	4401      	add	r1, r0
 8011140:	1858      	adds	r0, r3, r1
 8011142:	4282      	cmp	r2, r0
 8011144:	6019      	str	r1, [r3, #0]
 8011146:	d1dd      	bne.n	8011104 <_free_r+0x24>
 8011148:	6810      	ldr	r0, [r2, #0]
 801114a:	6852      	ldr	r2, [r2, #4]
 801114c:	605a      	str	r2, [r3, #4]
 801114e:	4401      	add	r1, r0
 8011150:	6019      	str	r1, [r3, #0]
 8011152:	e7d7      	b.n	8011104 <_free_r+0x24>
 8011154:	d902      	bls.n	801115c <_free_r+0x7c>
 8011156:	230c      	movs	r3, #12
 8011158:	602b      	str	r3, [r5, #0]
 801115a:	e7d3      	b.n	8011104 <_free_r+0x24>
 801115c:	6820      	ldr	r0, [r4, #0]
 801115e:	1821      	adds	r1, r4, r0
 8011160:	428a      	cmp	r2, r1
 8011162:	bf04      	itt	eq
 8011164:	6811      	ldreq	r1, [r2, #0]
 8011166:	6852      	ldreq	r2, [r2, #4]
 8011168:	6062      	str	r2, [r4, #4]
 801116a:	bf04      	itt	eq
 801116c:	1809      	addeq	r1, r1, r0
 801116e:	6021      	streq	r1, [r4, #0]
 8011170:	605c      	str	r4, [r3, #4]
 8011172:	e7c7      	b.n	8011104 <_free_r+0x24>
 8011174:	bd38      	pop	{r3, r4, r5, pc}
 8011176:	bf00      	nop
 8011178:	20001ea0 	.word	0x20001ea0

0801117c <_malloc_r>:
 801117c:	b570      	push	{r4, r5, r6, lr}
 801117e:	1ccd      	adds	r5, r1, #3
 8011180:	f025 0503 	bic.w	r5, r5, #3
 8011184:	3508      	adds	r5, #8
 8011186:	2d0c      	cmp	r5, #12
 8011188:	bf38      	it	cc
 801118a:	250c      	movcc	r5, #12
 801118c:	2d00      	cmp	r5, #0
 801118e:	4606      	mov	r6, r0
 8011190:	db01      	blt.n	8011196 <_malloc_r+0x1a>
 8011192:	42a9      	cmp	r1, r5
 8011194:	d903      	bls.n	801119e <_malloc_r+0x22>
 8011196:	230c      	movs	r3, #12
 8011198:	6033      	str	r3, [r6, #0]
 801119a:	2000      	movs	r0, #0
 801119c:	bd70      	pop	{r4, r5, r6, pc}
 801119e:	f000 fa6e 	bl	801167e <__malloc_lock>
 80111a2:	4a21      	ldr	r2, [pc, #132]	; (8011228 <_malloc_r+0xac>)
 80111a4:	6814      	ldr	r4, [r2, #0]
 80111a6:	4621      	mov	r1, r4
 80111a8:	b991      	cbnz	r1, 80111d0 <_malloc_r+0x54>
 80111aa:	4c20      	ldr	r4, [pc, #128]	; (801122c <_malloc_r+0xb0>)
 80111ac:	6823      	ldr	r3, [r4, #0]
 80111ae:	b91b      	cbnz	r3, 80111b8 <_malloc_r+0x3c>
 80111b0:	4630      	mov	r0, r6
 80111b2:	f000 f98f 	bl	80114d4 <_sbrk_r>
 80111b6:	6020      	str	r0, [r4, #0]
 80111b8:	4629      	mov	r1, r5
 80111ba:	4630      	mov	r0, r6
 80111bc:	f000 f98a 	bl	80114d4 <_sbrk_r>
 80111c0:	1c43      	adds	r3, r0, #1
 80111c2:	d124      	bne.n	801120e <_malloc_r+0x92>
 80111c4:	230c      	movs	r3, #12
 80111c6:	6033      	str	r3, [r6, #0]
 80111c8:	4630      	mov	r0, r6
 80111ca:	f000 fa59 	bl	8011680 <__malloc_unlock>
 80111ce:	e7e4      	b.n	801119a <_malloc_r+0x1e>
 80111d0:	680b      	ldr	r3, [r1, #0]
 80111d2:	1b5b      	subs	r3, r3, r5
 80111d4:	d418      	bmi.n	8011208 <_malloc_r+0x8c>
 80111d6:	2b0b      	cmp	r3, #11
 80111d8:	d90f      	bls.n	80111fa <_malloc_r+0x7e>
 80111da:	600b      	str	r3, [r1, #0]
 80111dc:	50cd      	str	r5, [r1, r3]
 80111de:	18cc      	adds	r4, r1, r3
 80111e0:	4630      	mov	r0, r6
 80111e2:	f000 fa4d 	bl	8011680 <__malloc_unlock>
 80111e6:	f104 000b 	add.w	r0, r4, #11
 80111ea:	1d23      	adds	r3, r4, #4
 80111ec:	f020 0007 	bic.w	r0, r0, #7
 80111f0:	1ac3      	subs	r3, r0, r3
 80111f2:	d0d3      	beq.n	801119c <_malloc_r+0x20>
 80111f4:	425a      	negs	r2, r3
 80111f6:	50e2      	str	r2, [r4, r3]
 80111f8:	e7d0      	b.n	801119c <_malloc_r+0x20>
 80111fa:	428c      	cmp	r4, r1
 80111fc:	684b      	ldr	r3, [r1, #4]
 80111fe:	bf16      	itet	ne
 8011200:	6063      	strne	r3, [r4, #4]
 8011202:	6013      	streq	r3, [r2, #0]
 8011204:	460c      	movne	r4, r1
 8011206:	e7eb      	b.n	80111e0 <_malloc_r+0x64>
 8011208:	460c      	mov	r4, r1
 801120a:	6849      	ldr	r1, [r1, #4]
 801120c:	e7cc      	b.n	80111a8 <_malloc_r+0x2c>
 801120e:	1cc4      	adds	r4, r0, #3
 8011210:	f024 0403 	bic.w	r4, r4, #3
 8011214:	42a0      	cmp	r0, r4
 8011216:	d005      	beq.n	8011224 <_malloc_r+0xa8>
 8011218:	1a21      	subs	r1, r4, r0
 801121a:	4630      	mov	r0, r6
 801121c:	f000 f95a 	bl	80114d4 <_sbrk_r>
 8011220:	3001      	adds	r0, #1
 8011222:	d0cf      	beq.n	80111c4 <_malloc_r+0x48>
 8011224:	6025      	str	r5, [r4, #0]
 8011226:	e7db      	b.n	80111e0 <_malloc_r+0x64>
 8011228:	20001ea0 	.word	0x20001ea0
 801122c:	20001ea4 	.word	0x20001ea4

08011230 <__ssputs_r>:
 8011230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011234:	688e      	ldr	r6, [r1, #8]
 8011236:	429e      	cmp	r6, r3
 8011238:	4682      	mov	sl, r0
 801123a:	460c      	mov	r4, r1
 801123c:	4690      	mov	r8, r2
 801123e:	4699      	mov	r9, r3
 8011240:	d837      	bhi.n	80112b2 <__ssputs_r+0x82>
 8011242:	898a      	ldrh	r2, [r1, #12]
 8011244:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011248:	d031      	beq.n	80112ae <__ssputs_r+0x7e>
 801124a:	6825      	ldr	r5, [r4, #0]
 801124c:	6909      	ldr	r1, [r1, #16]
 801124e:	1a6f      	subs	r7, r5, r1
 8011250:	6965      	ldr	r5, [r4, #20]
 8011252:	2302      	movs	r3, #2
 8011254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011258:	fb95 f5f3 	sdiv	r5, r5, r3
 801125c:	f109 0301 	add.w	r3, r9, #1
 8011260:	443b      	add	r3, r7
 8011262:	429d      	cmp	r5, r3
 8011264:	bf38      	it	cc
 8011266:	461d      	movcc	r5, r3
 8011268:	0553      	lsls	r3, r2, #21
 801126a:	d530      	bpl.n	80112ce <__ssputs_r+0x9e>
 801126c:	4629      	mov	r1, r5
 801126e:	f7ff ff85 	bl	801117c <_malloc_r>
 8011272:	4606      	mov	r6, r0
 8011274:	b950      	cbnz	r0, 801128c <__ssputs_r+0x5c>
 8011276:	230c      	movs	r3, #12
 8011278:	f8ca 3000 	str.w	r3, [sl]
 801127c:	89a3      	ldrh	r3, [r4, #12]
 801127e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011282:	81a3      	strh	r3, [r4, #12]
 8011284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801128c:	463a      	mov	r2, r7
 801128e:	6921      	ldr	r1, [r4, #16]
 8011290:	f7ff fc32 	bl	8010af8 <memcpy>
 8011294:	89a3      	ldrh	r3, [r4, #12]
 8011296:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801129a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801129e:	81a3      	strh	r3, [r4, #12]
 80112a0:	6126      	str	r6, [r4, #16]
 80112a2:	6165      	str	r5, [r4, #20]
 80112a4:	443e      	add	r6, r7
 80112a6:	1bed      	subs	r5, r5, r7
 80112a8:	6026      	str	r6, [r4, #0]
 80112aa:	60a5      	str	r5, [r4, #8]
 80112ac:	464e      	mov	r6, r9
 80112ae:	454e      	cmp	r6, r9
 80112b0:	d900      	bls.n	80112b4 <__ssputs_r+0x84>
 80112b2:	464e      	mov	r6, r9
 80112b4:	4632      	mov	r2, r6
 80112b6:	4641      	mov	r1, r8
 80112b8:	6820      	ldr	r0, [r4, #0]
 80112ba:	f000 f9c7 	bl	801164c <memmove>
 80112be:	68a3      	ldr	r3, [r4, #8]
 80112c0:	1b9b      	subs	r3, r3, r6
 80112c2:	60a3      	str	r3, [r4, #8]
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	441e      	add	r6, r3
 80112c8:	6026      	str	r6, [r4, #0]
 80112ca:	2000      	movs	r0, #0
 80112cc:	e7dc      	b.n	8011288 <__ssputs_r+0x58>
 80112ce:	462a      	mov	r2, r5
 80112d0:	f000 f9d7 	bl	8011682 <_realloc_r>
 80112d4:	4606      	mov	r6, r0
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d1e2      	bne.n	80112a0 <__ssputs_r+0x70>
 80112da:	6921      	ldr	r1, [r4, #16]
 80112dc:	4650      	mov	r0, sl
 80112de:	f7ff feff 	bl	80110e0 <_free_r>
 80112e2:	e7c8      	b.n	8011276 <__ssputs_r+0x46>

080112e4 <_svfiprintf_r>:
 80112e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e8:	461d      	mov	r5, r3
 80112ea:	898b      	ldrh	r3, [r1, #12]
 80112ec:	061f      	lsls	r7, r3, #24
 80112ee:	b09d      	sub	sp, #116	; 0x74
 80112f0:	4680      	mov	r8, r0
 80112f2:	460c      	mov	r4, r1
 80112f4:	4616      	mov	r6, r2
 80112f6:	d50f      	bpl.n	8011318 <_svfiprintf_r+0x34>
 80112f8:	690b      	ldr	r3, [r1, #16]
 80112fa:	b96b      	cbnz	r3, 8011318 <_svfiprintf_r+0x34>
 80112fc:	2140      	movs	r1, #64	; 0x40
 80112fe:	f7ff ff3d 	bl	801117c <_malloc_r>
 8011302:	6020      	str	r0, [r4, #0]
 8011304:	6120      	str	r0, [r4, #16]
 8011306:	b928      	cbnz	r0, 8011314 <_svfiprintf_r+0x30>
 8011308:	230c      	movs	r3, #12
 801130a:	f8c8 3000 	str.w	r3, [r8]
 801130e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011312:	e0c8      	b.n	80114a6 <_svfiprintf_r+0x1c2>
 8011314:	2340      	movs	r3, #64	; 0x40
 8011316:	6163      	str	r3, [r4, #20]
 8011318:	2300      	movs	r3, #0
 801131a:	9309      	str	r3, [sp, #36]	; 0x24
 801131c:	2320      	movs	r3, #32
 801131e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011322:	2330      	movs	r3, #48	; 0x30
 8011324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011328:	9503      	str	r5, [sp, #12]
 801132a:	f04f 0b01 	mov.w	fp, #1
 801132e:	4637      	mov	r7, r6
 8011330:	463d      	mov	r5, r7
 8011332:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011336:	b10b      	cbz	r3, 801133c <_svfiprintf_r+0x58>
 8011338:	2b25      	cmp	r3, #37	; 0x25
 801133a:	d13e      	bne.n	80113ba <_svfiprintf_r+0xd6>
 801133c:	ebb7 0a06 	subs.w	sl, r7, r6
 8011340:	d00b      	beq.n	801135a <_svfiprintf_r+0x76>
 8011342:	4653      	mov	r3, sl
 8011344:	4632      	mov	r2, r6
 8011346:	4621      	mov	r1, r4
 8011348:	4640      	mov	r0, r8
 801134a:	f7ff ff71 	bl	8011230 <__ssputs_r>
 801134e:	3001      	adds	r0, #1
 8011350:	f000 80a4 	beq.w	801149c <_svfiprintf_r+0x1b8>
 8011354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011356:	4453      	add	r3, sl
 8011358:	9309      	str	r3, [sp, #36]	; 0x24
 801135a:	783b      	ldrb	r3, [r7, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 809d 	beq.w	801149c <_svfiprintf_r+0x1b8>
 8011362:	2300      	movs	r3, #0
 8011364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801136c:	9304      	str	r3, [sp, #16]
 801136e:	9307      	str	r3, [sp, #28]
 8011370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011374:	931a      	str	r3, [sp, #104]	; 0x68
 8011376:	462f      	mov	r7, r5
 8011378:	2205      	movs	r2, #5
 801137a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801137e:	4850      	ldr	r0, [pc, #320]	; (80114c0 <_svfiprintf_r+0x1dc>)
 8011380:	f7ee ff56 	bl	8000230 <memchr>
 8011384:	9b04      	ldr	r3, [sp, #16]
 8011386:	b9d0      	cbnz	r0, 80113be <_svfiprintf_r+0xda>
 8011388:	06d9      	lsls	r1, r3, #27
 801138a:	bf44      	itt	mi
 801138c:	2220      	movmi	r2, #32
 801138e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011392:	071a      	lsls	r2, r3, #28
 8011394:	bf44      	itt	mi
 8011396:	222b      	movmi	r2, #43	; 0x2b
 8011398:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801139c:	782a      	ldrb	r2, [r5, #0]
 801139e:	2a2a      	cmp	r2, #42	; 0x2a
 80113a0:	d015      	beq.n	80113ce <_svfiprintf_r+0xea>
 80113a2:	9a07      	ldr	r2, [sp, #28]
 80113a4:	462f      	mov	r7, r5
 80113a6:	2000      	movs	r0, #0
 80113a8:	250a      	movs	r5, #10
 80113aa:	4639      	mov	r1, r7
 80113ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113b0:	3b30      	subs	r3, #48	; 0x30
 80113b2:	2b09      	cmp	r3, #9
 80113b4:	d94d      	bls.n	8011452 <_svfiprintf_r+0x16e>
 80113b6:	b1b8      	cbz	r0, 80113e8 <_svfiprintf_r+0x104>
 80113b8:	e00f      	b.n	80113da <_svfiprintf_r+0xf6>
 80113ba:	462f      	mov	r7, r5
 80113bc:	e7b8      	b.n	8011330 <_svfiprintf_r+0x4c>
 80113be:	4a40      	ldr	r2, [pc, #256]	; (80114c0 <_svfiprintf_r+0x1dc>)
 80113c0:	1a80      	subs	r0, r0, r2
 80113c2:	fa0b f000 	lsl.w	r0, fp, r0
 80113c6:	4318      	orrs	r0, r3
 80113c8:	9004      	str	r0, [sp, #16]
 80113ca:	463d      	mov	r5, r7
 80113cc:	e7d3      	b.n	8011376 <_svfiprintf_r+0x92>
 80113ce:	9a03      	ldr	r2, [sp, #12]
 80113d0:	1d11      	adds	r1, r2, #4
 80113d2:	6812      	ldr	r2, [r2, #0]
 80113d4:	9103      	str	r1, [sp, #12]
 80113d6:	2a00      	cmp	r2, #0
 80113d8:	db01      	blt.n	80113de <_svfiprintf_r+0xfa>
 80113da:	9207      	str	r2, [sp, #28]
 80113dc:	e004      	b.n	80113e8 <_svfiprintf_r+0x104>
 80113de:	4252      	negs	r2, r2
 80113e0:	f043 0302 	orr.w	r3, r3, #2
 80113e4:	9207      	str	r2, [sp, #28]
 80113e6:	9304      	str	r3, [sp, #16]
 80113e8:	783b      	ldrb	r3, [r7, #0]
 80113ea:	2b2e      	cmp	r3, #46	; 0x2e
 80113ec:	d10c      	bne.n	8011408 <_svfiprintf_r+0x124>
 80113ee:	787b      	ldrb	r3, [r7, #1]
 80113f0:	2b2a      	cmp	r3, #42	; 0x2a
 80113f2:	d133      	bne.n	801145c <_svfiprintf_r+0x178>
 80113f4:	9b03      	ldr	r3, [sp, #12]
 80113f6:	1d1a      	adds	r2, r3, #4
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	9203      	str	r2, [sp, #12]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	bfb8      	it	lt
 8011400:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011404:	3702      	adds	r7, #2
 8011406:	9305      	str	r3, [sp, #20]
 8011408:	4d2e      	ldr	r5, [pc, #184]	; (80114c4 <_svfiprintf_r+0x1e0>)
 801140a:	7839      	ldrb	r1, [r7, #0]
 801140c:	2203      	movs	r2, #3
 801140e:	4628      	mov	r0, r5
 8011410:	f7ee ff0e 	bl	8000230 <memchr>
 8011414:	b138      	cbz	r0, 8011426 <_svfiprintf_r+0x142>
 8011416:	2340      	movs	r3, #64	; 0x40
 8011418:	1b40      	subs	r0, r0, r5
 801141a:	fa03 f000 	lsl.w	r0, r3, r0
 801141e:	9b04      	ldr	r3, [sp, #16]
 8011420:	4303      	orrs	r3, r0
 8011422:	3701      	adds	r7, #1
 8011424:	9304      	str	r3, [sp, #16]
 8011426:	7839      	ldrb	r1, [r7, #0]
 8011428:	4827      	ldr	r0, [pc, #156]	; (80114c8 <_svfiprintf_r+0x1e4>)
 801142a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801142e:	2206      	movs	r2, #6
 8011430:	1c7e      	adds	r6, r7, #1
 8011432:	f7ee fefd 	bl	8000230 <memchr>
 8011436:	2800      	cmp	r0, #0
 8011438:	d038      	beq.n	80114ac <_svfiprintf_r+0x1c8>
 801143a:	4b24      	ldr	r3, [pc, #144]	; (80114cc <_svfiprintf_r+0x1e8>)
 801143c:	bb13      	cbnz	r3, 8011484 <_svfiprintf_r+0x1a0>
 801143e:	9b03      	ldr	r3, [sp, #12]
 8011440:	3307      	adds	r3, #7
 8011442:	f023 0307 	bic.w	r3, r3, #7
 8011446:	3308      	adds	r3, #8
 8011448:	9303      	str	r3, [sp, #12]
 801144a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801144c:	444b      	add	r3, r9
 801144e:	9309      	str	r3, [sp, #36]	; 0x24
 8011450:	e76d      	b.n	801132e <_svfiprintf_r+0x4a>
 8011452:	fb05 3202 	mla	r2, r5, r2, r3
 8011456:	2001      	movs	r0, #1
 8011458:	460f      	mov	r7, r1
 801145a:	e7a6      	b.n	80113aa <_svfiprintf_r+0xc6>
 801145c:	2300      	movs	r3, #0
 801145e:	3701      	adds	r7, #1
 8011460:	9305      	str	r3, [sp, #20]
 8011462:	4619      	mov	r1, r3
 8011464:	250a      	movs	r5, #10
 8011466:	4638      	mov	r0, r7
 8011468:	f810 2b01 	ldrb.w	r2, [r0], #1
 801146c:	3a30      	subs	r2, #48	; 0x30
 801146e:	2a09      	cmp	r2, #9
 8011470:	d903      	bls.n	801147a <_svfiprintf_r+0x196>
 8011472:	2b00      	cmp	r3, #0
 8011474:	d0c8      	beq.n	8011408 <_svfiprintf_r+0x124>
 8011476:	9105      	str	r1, [sp, #20]
 8011478:	e7c6      	b.n	8011408 <_svfiprintf_r+0x124>
 801147a:	fb05 2101 	mla	r1, r5, r1, r2
 801147e:	2301      	movs	r3, #1
 8011480:	4607      	mov	r7, r0
 8011482:	e7f0      	b.n	8011466 <_svfiprintf_r+0x182>
 8011484:	ab03      	add	r3, sp, #12
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	4622      	mov	r2, r4
 801148a:	4b11      	ldr	r3, [pc, #68]	; (80114d0 <_svfiprintf_r+0x1ec>)
 801148c:	a904      	add	r1, sp, #16
 801148e:	4640      	mov	r0, r8
 8011490:	f7fd fdca 	bl	800f028 <_printf_float>
 8011494:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011498:	4681      	mov	r9, r0
 801149a:	d1d6      	bne.n	801144a <_svfiprintf_r+0x166>
 801149c:	89a3      	ldrh	r3, [r4, #12]
 801149e:	065b      	lsls	r3, r3, #25
 80114a0:	f53f af35 	bmi.w	801130e <_svfiprintf_r+0x2a>
 80114a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114a6:	b01d      	add	sp, #116	; 0x74
 80114a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ac:	ab03      	add	r3, sp, #12
 80114ae:	9300      	str	r3, [sp, #0]
 80114b0:	4622      	mov	r2, r4
 80114b2:	4b07      	ldr	r3, [pc, #28]	; (80114d0 <_svfiprintf_r+0x1ec>)
 80114b4:	a904      	add	r1, sp, #16
 80114b6:	4640      	mov	r0, r8
 80114b8:	f7fe f86c 	bl	800f594 <_printf_i>
 80114bc:	e7ea      	b.n	8011494 <_svfiprintf_r+0x1b0>
 80114be:	bf00      	nop
 80114c0:	08014074 	.word	0x08014074
 80114c4:	0801407a 	.word	0x0801407a
 80114c8:	0801407e 	.word	0x0801407e
 80114cc:	0800f029 	.word	0x0800f029
 80114d0:	08011231 	.word	0x08011231

080114d4 <_sbrk_r>:
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	4c06      	ldr	r4, [pc, #24]	; (80114f0 <_sbrk_r+0x1c>)
 80114d8:	2300      	movs	r3, #0
 80114da:	4605      	mov	r5, r0
 80114dc:	4608      	mov	r0, r1
 80114de:	6023      	str	r3, [r4, #0]
 80114e0:	f7f6 f88a 	bl	80075f8 <_sbrk>
 80114e4:	1c43      	adds	r3, r0, #1
 80114e6:	d102      	bne.n	80114ee <_sbrk_r+0x1a>
 80114e8:	6823      	ldr	r3, [r4, #0]
 80114ea:	b103      	cbz	r3, 80114ee <_sbrk_r+0x1a>
 80114ec:	602b      	str	r3, [r5, #0]
 80114ee:	bd38      	pop	{r3, r4, r5, pc}
 80114f0:	200028dc 	.word	0x200028dc

080114f4 <__sread>:
 80114f4:	b510      	push	{r4, lr}
 80114f6:	460c      	mov	r4, r1
 80114f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114fc:	f000 f8e8 	bl	80116d0 <_read_r>
 8011500:	2800      	cmp	r0, #0
 8011502:	bfab      	itete	ge
 8011504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011506:	89a3      	ldrhlt	r3, [r4, #12]
 8011508:	181b      	addge	r3, r3, r0
 801150a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801150e:	bfac      	ite	ge
 8011510:	6563      	strge	r3, [r4, #84]	; 0x54
 8011512:	81a3      	strhlt	r3, [r4, #12]
 8011514:	bd10      	pop	{r4, pc}

08011516 <__swrite>:
 8011516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801151a:	461f      	mov	r7, r3
 801151c:	898b      	ldrh	r3, [r1, #12]
 801151e:	05db      	lsls	r3, r3, #23
 8011520:	4605      	mov	r5, r0
 8011522:	460c      	mov	r4, r1
 8011524:	4616      	mov	r6, r2
 8011526:	d505      	bpl.n	8011534 <__swrite+0x1e>
 8011528:	2302      	movs	r3, #2
 801152a:	2200      	movs	r2, #0
 801152c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011530:	f000 f868 	bl	8011604 <_lseek_r>
 8011534:	89a3      	ldrh	r3, [r4, #12]
 8011536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801153a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801153e:	81a3      	strh	r3, [r4, #12]
 8011540:	4632      	mov	r2, r6
 8011542:	463b      	mov	r3, r7
 8011544:	4628      	mov	r0, r5
 8011546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801154a:	f000 b817 	b.w	801157c <_write_r>

0801154e <__sseek>:
 801154e:	b510      	push	{r4, lr}
 8011550:	460c      	mov	r4, r1
 8011552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011556:	f000 f855 	bl	8011604 <_lseek_r>
 801155a:	1c43      	adds	r3, r0, #1
 801155c:	89a3      	ldrh	r3, [r4, #12]
 801155e:	bf15      	itete	ne
 8011560:	6560      	strne	r0, [r4, #84]	; 0x54
 8011562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801156a:	81a3      	strheq	r3, [r4, #12]
 801156c:	bf18      	it	ne
 801156e:	81a3      	strhne	r3, [r4, #12]
 8011570:	bd10      	pop	{r4, pc}

08011572 <__sclose>:
 8011572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011576:	f000 b813 	b.w	80115a0 <_close_r>
	...

0801157c <_write_r>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	4c07      	ldr	r4, [pc, #28]	; (801159c <_write_r+0x20>)
 8011580:	4605      	mov	r5, r0
 8011582:	4608      	mov	r0, r1
 8011584:	4611      	mov	r1, r2
 8011586:	2200      	movs	r2, #0
 8011588:	6022      	str	r2, [r4, #0]
 801158a:	461a      	mov	r2, r3
 801158c:	f7f5 fd2f 	bl	8006fee <_write>
 8011590:	1c43      	adds	r3, r0, #1
 8011592:	d102      	bne.n	801159a <_write_r+0x1e>
 8011594:	6823      	ldr	r3, [r4, #0]
 8011596:	b103      	cbz	r3, 801159a <_write_r+0x1e>
 8011598:	602b      	str	r3, [r5, #0]
 801159a:	bd38      	pop	{r3, r4, r5, pc}
 801159c:	200028dc 	.word	0x200028dc

080115a0 <_close_r>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	4c06      	ldr	r4, [pc, #24]	; (80115bc <_close_r+0x1c>)
 80115a4:	2300      	movs	r3, #0
 80115a6:	4605      	mov	r5, r0
 80115a8:	4608      	mov	r0, r1
 80115aa:	6023      	str	r3, [r4, #0]
 80115ac:	f7f5 ffef 	bl	800758e <_close>
 80115b0:	1c43      	adds	r3, r0, #1
 80115b2:	d102      	bne.n	80115ba <_close_r+0x1a>
 80115b4:	6823      	ldr	r3, [r4, #0]
 80115b6:	b103      	cbz	r3, 80115ba <_close_r+0x1a>
 80115b8:	602b      	str	r3, [r5, #0]
 80115ba:	bd38      	pop	{r3, r4, r5, pc}
 80115bc:	200028dc 	.word	0x200028dc

080115c0 <_fstat_r>:
 80115c0:	b538      	push	{r3, r4, r5, lr}
 80115c2:	4c07      	ldr	r4, [pc, #28]	; (80115e0 <_fstat_r+0x20>)
 80115c4:	2300      	movs	r3, #0
 80115c6:	4605      	mov	r5, r0
 80115c8:	4608      	mov	r0, r1
 80115ca:	4611      	mov	r1, r2
 80115cc:	6023      	str	r3, [r4, #0]
 80115ce:	f7f5 ffea 	bl	80075a6 <_fstat>
 80115d2:	1c43      	adds	r3, r0, #1
 80115d4:	d102      	bne.n	80115dc <_fstat_r+0x1c>
 80115d6:	6823      	ldr	r3, [r4, #0]
 80115d8:	b103      	cbz	r3, 80115dc <_fstat_r+0x1c>
 80115da:	602b      	str	r3, [r5, #0]
 80115dc:	bd38      	pop	{r3, r4, r5, pc}
 80115de:	bf00      	nop
 80115e0:	200028dc 	.word	0x200028dc

080115e4 <_isatty_r>:
 80115e4:	b538      	push	{r3, r4, r5, lr}
 80115e6:	4c06      	ldr	r4, [pc, #24]	; (8011600 <_isatty_r+0x1c>)
 80115e8:	2300      	movs	r3, #0
 80115ea:	4605      	mov	r5, r0
 80115ec:	4608      	mov	r0, r1
 80115ee:	6023      	str	r3, [r4, #0]
 80115f0:	f7f5 ffe9 	bl	80075c6 <_isatty>
 80115f4:	1c43      	adds	r3, r0, #1
 80115f6:	d102      	bne.n	80115fe <_isatty_r+0x1a>
 80115f8:	6823      	ldr	r3, [r4, #0]
 80115fa:	b103      	cbz	r3, 80115fe <_isatty_r+0x1a>
 80115fc:	602b      	str	r3, [r5, #0]
 80115fe:	bd38      	pop	{r3, r4, r5, pc}
 8011600:	200028dc 	.word	0x200028dc

08011604 <_lseek_r>:
 8011604:	b538      	push	{r3, r4, r5, lr}
 8011606:	4c07      	ldr	r4, [pc, #28]	; (8011624 <_lseek_r+0x20>)
 8011608:	4605      	mov	r5, r0
 801160a:	4608      	mov	r0, r1
 801160c:	4611      	mov	r1, r2
 801160e:	2200      	movs	r2, #0
 8011610:	6022      	str	r2, [r4, #0]
 8011612:	461a      	mov	r2, r3
 8011614:	f7f5 ffe2 	bl	80075dc <_lseek>
 8011618:	1c43      	adds	r3, r0, #1
 801161a:	d102      	bne.n	8011622 <_lseek_r+0x1e>
 801161c:	6823      	ldr	r3, [r4, #0]
 801161e:	b103      	cbz	r3, 8011622 <_lseek_r+0x1e>
 8011620:	602b      	str	r3, [r5, #0]
 8011622:	bd38      	pop	{r3, r4, r5, pc}
 8011624:	200028dc 	.word	0x200028dc

08011628 <__ascii_mbtowc>:
 8011628:	b082      	sub	sp, #8
 801162a:	b901      	cbnz	r1, 801162e <__ascii_mbtowc+0x6>
 801162c:	a901      	add	r1, sp, #4
 801162e:	b142      	cbz	r2, 8011642 <__ascii_mbtowc+0x1a>
 8011630:	b14b      	cbz	r3, 8011646 <__ascii_mbtowc+0x1e>
 8011632:	7813      	ldrb	r3, [r2, #0]
 8011634:	600b      	str	r3, [r1, #0]
 8011636:	7812      	ldrb	r2, [r2, #0]
 8011638:	1c10      	adds	r0, r2, #0
 801163a:	bf18      	it	ne
 801163c:	2001      	movne	r0, #1
 801163e:	b002      	add	sp, #8
 8011640:	4770      	bx	lr
 8011642:	4610      	mov	r0, r2
 8011644:	e7fb      	b.n	801163e <__ascii_mbtowc+0x16>
 8011646:	f06f 0001 	mvn.w	r0, #1
 801164a:	e7f8      	b.n	801163e <__ascii_mbtowc+0x16>

0801164c <memmove>:
 801164c:	4288      	cmp	r0, r1
 801164e:	b510      	push	{r4, lr}
 8011650:	eb01 0302 	add.w	r3, r1, r2
 8011654:	d807      	bhi.n	8011666 <memmove+0x1a>
 8011656:	1e42      	subs	r2, r0, #1
 8011658:	4299      	cmp	r1, r3
 801165a:	d00a      	beq.n	8011672 <memmove+0x26>
 801165c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011660:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011664:	e7f8      	b.n	8011658 <memmove+0xc>
 8011666:	4283      	cmp	r3, r0
 8011668:	d9f5      	bls.n	8011656 <memmove+0xa>
 801166a:	1881      	adds	r1, r0, r2
 801166c:	1ad2      	subs	r2, r2, r3
 801166e:	42d3      	cmn	r3, r2
 8011670:	d100      	bne.n	8011674 <memmove+0x28>
 8011672:	bd10      	pop	{r4, pc}
 8011674:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011678:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801167c:	e7f7      	b.n	801166e <memmove+0x22>

0801167e <__malloc_lock>:
 801167e:	4770      	bx	lr

08011680 <__malloc_unlock>:
 8011680:	4770      	bx	lr

08011682 <_realloc_r>:
 8011682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011684:	4607      	mov	r7, r0
 8011686:	4614      	mov	r4, r2
 8011688:	460e      	mov	r6, r1
 801168a:	b921      	cbnz	r1, 8011696 <_realloc_r+0x14>
 801168c:	4611      	mov	r1, r2
 801168e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011692:	f7ff bd73 	b.w	801117c <_malloc_r>
 8011696:	b922      	cbnz	r2, 80116a2 <_realloc_r+0x20>
 8011698:	f7ff fd22 	bl	80110e0 <_free_r>
 801169c:	4625      	mov	r5, r4
 801169e:	4628      	mov	r0, r5
 80116a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a2:	f000 f834 	bl	801170e <_malloc_usable_size_r>
 80116a6:	42a0      	cmp	r0, r4
 80116a8:	d20f      	bcs.n	80116ca <_realloc_r+0x48>
 80116aa:	4621      	mov	r1, r4
 80116ac:	4638      	mov	r0, r7
 80116ae:	f7ff fd65 	bl	801117c <_malloc_r>
 80116b2:	4605      	mov	r5, r0
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d0f2      	beq.n	801169e <_realloc_r+0x1c>
 80116b8:	4631      	mov	r1, r6
 80116ba:	4622      	mov	r2, r4
 80116bc:	f7ff fa1c 	bl	8010af8 <memcpy>
 80116c0:	4631      	mov	r1, r6
 80116c2:	4638      	mov	r0, r7
 80116c4:	f7ff fd0c 	bl	80110e0 <_free_r>
 80116c8:	e7e9      	b.n	801169e <_realloc_r+0x1c>
 80116ca:	4635      	mov	r5, r6
 80116cc:	e7e7      	b.n	801169e <_realloc_r+0x1c>
	...

080116d0 <_read_r>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	4c07      	ldr	r4, [pc, #28]	; (80116f0 <_read_r+0x20>)
 80116d4:	4605      	mov	r5, r0
 80116d6:	4608      	mov	r0, r1
 80116d8:	4611      	mov	r1, r2
 80116da:	2200      	movs	r2, #0
 80116dc:	6022      	str	r2, [r4, #0]
 80116de:	461a      	mov	r2, r3
 80116e0:	f7f5 ff38 	bl	8007554 <_read>
 80116e4:	1c43      	adds	r3, r0, #1
 80116e6:	d102      	bne.n	80116ee <_read_r+0x1e>
 80116e8:	6823      	ldr	r3, [r4, #0]
 80116ea:	b103      	cbz	r3, 80116ee <_read_r+0x1e>
 80116ec:	602b      	str	r3, [r5, #0]
 80116ee:	bd38      	pop	{r3, r4, r5, pc}
 80116f0:	200028dc 	.word	0x200028dc

080116f4 <__ascii_wctomb>:
 80116f4:	b149      	cbz	r1, 801170a <__ascii_wctomb+0x16>
 80116f6:	2aff      	cmp	r2, #255	; 0xff
 80116f8:	bf85      	ittet	hi
 80116fa:	238a      	movhi	r3, #138	; 0x8a
 80116fc:	6003      	strhi	r3, [r0, #0]
 80116fe:	700a      	strbls	r2, [r1, #0]
 8011700:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011704:	bf98      	it	ls
 8011706:	2001      	movls	r0, #1
 8011708:	4770      	bx	lr
 801170a:	4608      	mov	r0, r1
 801170c:	4770      	bx	lr

0801170e <_malloc_usable_size_r>:
 801170e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011712:	1f18      	subs	r0, r3, #4
 8011714:	2b00      	cmp	r3, #0
 8011716:	bfbc      	itt	lt
 8011718:	580b      	ldrlt	r3, [r1, r0]
 801171a:	18c0      	addlt	r0, r0, r3
 801171c:	4770      	bx	lr
	...

08011720 <log10>:
 8011720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011722:	ed2d 8b02 	vpush	{d8}
 8011726:	b08b      	sub	sp, #44	; 0x2c
 8011728:	ec55 4b10 	vmov	r4, r5, d0
 801172c:	f000 f9e8 	bl	8011b00 <__ieee754_log10>
 8011730:	4b36      	ldr	r3, [pc, #216]	; (801180c <log10+0xec>)
 8011732:	eeb0 8a40 	vmov.f32	s16, s0
 8011736:	eef0 8a60 	vmov.f32	s17, s1
 801173a:	f993 6000 	ldrsb.w	r6, [r3]
 801173e:	1c73      	adds	r3, r6, #1
 8011740:	d05c      	beq.n	80117fc <log10+0xdc>
 8011742:	4622      	mov	r2, r4
 8011744:	462b      	mov	r3, r5
 8011746:	4620      	mov	r0, r4
 8011748:	4629      	mov	r1, r5
 801174a:	f7ef fa17 	bl	8000b7c <__aeabi_dcmpun>
 801174e:	4607      	mov	r7, r0
 8011750:	2800      	cmp	r0, #0
 8011752:	d153      	bne.n	80117fc <log10+0xdc>
 8011754:	2200      	movs	r2, #0
 8011756:	2300      	movs	r3, #0
 8011758:	4620      	mov	r0, r4
 801175a:	4629      	mov	r1, r5
 801175c:	f7ef f9f0 	bl	8000b40 <__aeabi_dcmple>
 8011760:	2800      	cmp	r0, #0
 8011762:	d04b      	beq.n	80117fc <log10+0xdc>
 8011764:	4b2a      	ldr	r3, [pc, #168]	; (8011810 <log10+0xf0>)
 8011766:	9301      	str	r3, [sp, #4]
 8011768:	9708      	str	r7, [sp, #32]
 801176a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801176e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011772:	b9a6      	cbnz	r6, 801179e <log10+0x7e>
 8011774:	4b27      	ldr	r3, [pc, #156]	; (8011814 <log10+0xf4>)
 8011776:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801177a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801177e:	4620      	mov	r0, r4
 8011780:	2200      	movs	r2, #0
 8011782:	2300      	movs	r3, #0
 8011784:	4629      	mov	r1, r5
 8011786:	f7ef f9c7 	bl	8000b18 <__aeabi_dcmpeq>
 801178a:	bb40      	cbnz	r0, 80117de <log10+0xbe>
 801178c:	2301      	movs	r3, #1
 801178e:	2e02      	cmp	r6, #2
 8011790:	9300      	str	r3, [sp, #0]
 8011792:	d119      	bne.n	80117c8 <log10+0xa8>
 8011794:	f7fd fb82 	bl	800ee9c <__errno>
 8011798:	2321      	movs	r3, #33	; 0x21
 801179a:	6003      	str	r3, [r0, #0]
 801179c:	e019      	b.n	80117d2 <log10+0xb2>
 801179e:	4b1e      	ldr	r3, [pc, #120]	; (8011818 <log10+0xf8>)
 80117a0:	2200      	movs	r2, #0
 80117a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80117a6:	4620      	mov	r0, r4
 80117a8:	2200      	movs	r2, #0
 80117aa:	2300      	movs	r3, #0
 80117ac:	4629      	mov	r1, r5
 80117ae:	f7ef f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 80117b2:	2800      	cmp	r0, #0
 80117b4:	d0ea      	beq.n	801178c <log10+0x6c>
 80117b6:	2302      	movs	r3, #2
 80117b8:	429e      	cmp	r6, r3
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	d111      	bne.n	80117e2 <log10+0xc2>
 80117be:	f7fd fb6d 	bl	800ee9c <__errno>
 80117c2:	2322      	movs	r3, #34	; 0x22
 80117c4:	6003      	str	r3, [r0, #0]
 80117c6:	e011      	b.n	80117ec <log10+0xcc>
 80117c8:	4668      	mov	r0, sp
 80117ca:	f000 fff4 	bl	80127b6 <matherr>
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d0e0      	beq.n	8011794 <log10+0x74>
 80117d2:	4812      	ldr	r0, [pc, #72]	; (801181c <log10+0xfc>)
 80117d4:	f000 fff4 	bl	80127c0 <nan>
 80117d8:	ed8d 0b06 	vstr	d0, [sp, #24]
 80117dc:	e006      	b.n	80117ec <log10+0xcc>
 80117de:	2302      	movs	r3, #2
 80117e0:	9300      	str	r3, [sp, #0]
 80117e2:	4668      	mov	r0, sp
 80117e4:	f000 ffe7 	bl	80127b6 <matherr>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	d0e8      	beq.n	80117be <log10+0x9e>
 80117ec:	9b08      	ldr	r3, [sp, #32]
 80117ee:	b11b      	cbz	r3, 80117f8 <log10+0xd8>
 80117f0:	f7fd fb54 	bl	800ee9c <__errno>
 80117f4:	9b08      	ldr	r3, [sp, #32]
 80117f6:	6003      	str	r3, [r0, #0]
 80117f8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80117fc:	eeb0 0a48 	vmov.f32	s0, s16
 8011800:	eef0 0a68 	vmov.f32	s1, s17
 8011804:	b00b      	add	sp, #44	; 0x2c
 8011806:	ecbd 8b02 	vpop	{d8}
 801180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801180c:	20001e04 	.word	0x20001e04
 8011810:	08014190 	.word	0x08014190
 8011814:	c7efffff 	.word	0xc7efffff
 8011818:	fff00000 	.word	0xfff00000
 801181c:	08014079 	.word	0x08014079

08011820 <pow>:
 8011820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	ed2d 8b04 	vpush	{d8-d9}
 8011828:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011afc <pow+0x2dc>
 801182c:	b08d      	sub	sp, #52	; 0x34
 801182e:	ec57 6b10 	vmov	r6, r7, d0
 8011832:	ec55 4b11 	vmov	r4, r5, d1
 8011836:	f000 f9ef 	bl	8011c18 <__ieee754_pow>
 801183a:	f999 3000 	ldrsb.w	r3, [r9]
 801183e:	9300      	str	r3, [sp, #0]
 8011840:	3301      	adds	r3, #1
 8011842:	eeb0 8a40 	vmov.f32	s16, s0
 8011846:	eef0 8a60 	vmov.f32	s17, s1
 801184a:	46c8      	mov	r8, r9
 801184c:	d05f      	beq.n	801190e <pow+0xee>
 801184e:	4622      	mov	r2, r4
 8011850:	462b      	mov	r3, r5
 8011852:	4620      	mov	r0, r4
 8011854:	4629      	mov	r1, r5
 8011856:	f7ef f991 	bl	8000b7c <__aeabi_dcmpun>
 801185a:	4683      	mov	fp, r0
 801185c:	2800      	cmp	r0, #0
 801185e:	d156      	bne.n	801190e <pow+0xee>
 8011860:	4632      	mov	r2, r6
 8011862:	463b      	mov	r3, r7
 8011864:	4630      	mov	r0, r6
 8011866:	4639      	mov	r1, r7
 8011868:	f7ef f988 	bl	8000b7c <__aeabi_dcmpun>
 801186c:	9001      	str	r0, [sp, #4]
 801186e:	b1e8      	cbz	r0, 80118ac <pow+0x8c>
 8011870:	2200      	movs	r2, #0
 8011872:	2300      	movs	r3, #0
 8011874:	4620      	mov	r0, r4
 8011876:	4629      	mov	r1, r5
 8011878:	f7ef f94e 	bl	8000b18 <__aeabi_dcmpeq>
 801187c:	2800      	cmp	r0, #0
 801187e:	d046      	beq.n	801190e <pow+0xee>
 8011880:	2301      	movs	r3, #1
 8011882:	9302      	str	r3, [sp, #8]
 8011884:	4b96      	ldr	r3, [pc, #600]	; (8011ae0 <pow+0x2c0>)
 8011886:	9303      	str	r3, [sp, #12]
 8011888:	4b96      	ldr	r3, [pc, #600]	; (8011ae4 <pow+0x2c4>)
 801188a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801188e:	2200      	movs	r2, #0
 8011890:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011894:	9b00      	ldr	r3, [sp, #0]
 8011896:	2b02      	cmp	r3, #2
 8011898:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801189c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80118a0:	d033      	beq.n	801190a <pow+0xea>
 80118a2:	a802      	add	r0, sp, #8
 80118a4:	f000 ff87 	bl	80127b6 <matherr>
 80118a8:	bb48      	cbnz	r0, 80118fe <pow+0xde>
 80118aa:	e05d      	b.n	8011968 <pow+0x148>
 80118ac:	f04f 0a00 	mov.w	sl, #0
 80118b0:	f04f 0b00 	mov.w	fp, #0
 80118b4:	4652      	mov	r2, sl
 80118b6:	465b      	mov	r3, fp
 80118b8:	4630      	mov	r0, r6
 80118ba:	4639      	mov	r1, r7
 80118bc:	f7ef f92c 	bl	8000b18 <__aeabi_dcmpeq>
 80118c0:	ec4b ab19 	vmov	d9, sl, fp
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d054      	beq.n	8011972 <pow+0x152>
 80118c8:	4652      	mov	r2, sl
 80118ca:	465b      	mov	r3, fp
 80118cc:	4620      	mov	r0, r4
 80118ce:	4629      	mov	r1, r5
 80118d0:	f7ef f922 	bl	8000b18 <__aeabi_dcmpeq>
 80118d4:	4680      	mov	r8, r0
 80118d6:	b318      	cbz	r0, 8011920 <pow+0x100>
 80118d8:	2301      	movs	r3, #1
 80118da:	9302      	str	r3, [sp, #8]
 80118dc:	4b80      	ldr	r3, [pc, #512]	; (8011ae0 <pow+0x2c0>)
 80118de:	9303      	str	r3, [sp, #12]
 80118e0:	9b01      	ldr	r3, [sp, #4]
 80118e2:	930a      	str	r3, [sp, #40]	; 0x28
 80118e4:	9b00      	ldr	r3, [sp, #0]
 80118e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80118ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80118ee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d0d5      	beq.n	80118a2 <pow+0x82>
 80118f6:	4b7b      	ldr	r3, [pc, #492]	; (8011ae4 <pow+0x2c4>)
 80118f8:	2200      	movs	r2, #0
 80118fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80118fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011900:	b11b      	cbz	r3, 801190a <pow+0xea>
 8011902:	f7fd facb 	bl	800ee9c <__errno>
 8011906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011908:	6003      	str	r3, [r0, #0]
 801190a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801190e:	eeb0 0a48 	vmov.f32	s0, s16
 8011912:	eef0 0a68 	vmov.f32	s1, s17
 8011916:	b00d      	add	sp, #52	; 0x34
 8011918:	ecbd 8b04 	vpop	{d8-d9}
 801191c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011920:	ec45 4b10 	vmov	d0, r4, r5
 8011924:	f000 ff3f 	bl	80127a6 <finite>
 8011928:	2800      	cmp	r0, #0
 801192a:	d0f0      	beq.n	801190e <pow+0xee>
 801192c:	4652      	mov	r2, sl
 801192e:	465b      	mov	r3, fp
 8011930:	4620      	mov	r0, r4
 8011932:	4629      	mov	r1, r5
 8011934:	f7ef f8fa 	bl	8000b2c <__aeabi_dcmplt>
 8011938:	2800      	cmp	r0, #0
 801193a:	d0e8      	beq.n	801190e <pow+0xee>
 801193c:	2301      	movs	r3, #1
 801193e:	9302      	str	r3, [sp, #8]
 8011940:	4b67      	ldr	r3, [pc, #412]	; (8011ae0 <pow+0x2c0>)
 8011942:	9303      	str	r3, [sp, #12]
 8011944:	f999 3000 	ldrsb.w	r3, [r9]
 8011948:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801194c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011950:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011954:	b913      	cbnz	r3, 801195c <pow+0x13c>
 8011956:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801195a:	e7a2      	b.n	80118a2 <pow+0x82>
 801195c:	4962      	ldr	r1, [pc, #392]	; (8011ae8 <pow+0x2c8>)
 801195e:	2000      	movs	r0, #0
 8011960:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011964:	2b02      	cmp	r3, #2
 8011966:	d19c      	bne.n	80118a2 <pow+0x82>
 8011968:	f7fd fa98 	bl	800ee9c <__errno>
 801196c:	2321      	movs	r3, #33	; 0x21
 801196e:	6003      	str	r3, [r0, #0]
 8011970:	e7c5      	b.n	80118fe <pow+0xde>
 8011972:	eeb0 0a48 	vmov.f32	s0, s16
 8011976:	eef0 0a68 	vmov.f32	s1, s17
 801197a:	f000 ff14 	bl	80127a6 <finite>
 801197e:	9000      	str	r0, [sp, #0]
 8011980:	2800      	cmp	r0, #0
 8011982:	f040 8081 	bne.w	8011a88 <pow+0x268>
 8011986:	ec47 6b10 	vmov	d0, r6, r7
 801198a:	f000 ff0c 	bl	80127a6 <finite>
 801198e:	2800      	cmp	r0, #0
 8011990:	d07a      	beq.n	8011a88 <pow+0x268>
 8011992:	ec45 4b10 	vmov	d0, r4, r5
 8011996:	f000 ff06 	bl	80127a6 <finite>
 801199a:	2800      	cmp	r0, #0
 801199c:	d074      	beq.n	8011a88 <pow+0x268>
 801199e:	ec53 2b18 	vmov	r2, r3, d8
 80119a2:	ee18 0a10 	vmov	r0, s16
 80119a6:	4619      	mov	r1, r3
 80119a8:	f7ef f8e8 	bl	8000b7c <__aeabi_dcmpun>
 80119ac:	f999 9000 	ldrsb.w	r9, [r9]
 80119b0:	4b4b      	ldr	r3, [pc, #300]	; (8011ae0 <pow+0x2c0>)
 80119b2:	b1b0      	cbz	r0, 80119e2 <pow+0x1c2>
 80119b4:	2201      	movs	r2, #1
 80119b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80119ba:	9b00      	ldr	r3, [sp, #0]
 80119bc:	930a      	str	r3, [sp, #40]	; 0x28
 80119be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80119c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80119c6:	f1b9 0f00 	cmp.w	r9, #0
 80119ca:	d0c4      	beq.n	8011956 <pow+0x136>
 80119cc:	4652      	mov	r2, sl
 80119ce:	465b      	mov	r3, fp
 80119d0:	4650      	mov	r0, sl
 80119d2:	4659      	mov	r1, fp
 80119d4:	f7ee ff62 	bl	800089c <__aeabi_ddiv>
 80119d8:	f1b9 0f02 	cmp.w	r9, #2
 80119dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80119e0:	e7c1      	b.n	8011966 <pow+0x146>
 80119e2:	2203      	movs	r2, #3
 80119e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80119e8:	900a      	str	r0, [sp, #40]	; 0x28
 80119ea:	4629      	mov	r1, r5
 80119ec:	4620      	mov	r0, r4
 80119ee:	2200      	movs	r2, #0
 80119f0:	4b3e      	ldr	r3, [pc, #248]	; (8011aec <pow+0x2cc>)
 80119f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80119f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80119fa:	f7ee fe25 	bl	8000648 <__aeabi_dmul>
 80119fe:	4604      	mov	r4, r0
 8011a00:	460d      	mov	r5, r1
 8011a02:	f1b9 0f00 	cmp.w	r9, #0
 8011a06:	d124      	bne.n	8011a52 <pow+0x232>
 8011a08:	4b39      	ldr	r3, [pc, #228]	; (8011af0 <pow+0x2d0>)
 8011a0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011a0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a12:	4630      	mov	r0, r6
 8011a14:	4652      	mov	r2, sl
 8011a16:	465b      	mov	r3, fp
 8011a18:	4639      	mov	r1, r7
 8011a1a:	f7ef f887 	bl	8000b2c <__aeabi_dcmplt>
 8011a1e:	2800      	cmp	r0, #0
 8011a20:	d056      	beq.n	8011ad0 <pow+0x2b0>
 8011a22:	ec45 4b10 	vmov	d0, r4, r5
 8011a26:	f000 fed3 	bl	80127d0 <rint>
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	462b      	mov	r3, r5
 8011a2e:	ec51 0b10 	vmov	r0, r1, d0
 8011a32:	f7ef f871 	bl	8000b18 <__aeabi_dcmpeq>
 8011a36:	b920      	cbnz	r0, 8011a42 <pow+0x222>
 8011a38:	4b2e      	ldr	r3, [pc, #184]	; (8011af4 <pow+0x2d4>)
 8011a3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011a3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a42:	f998 3000 	ldrsb.w	r3, [r8]
 8011a46:	2b02      	cmp	r3, #2
 8011a48:	d142      	bne.n	8011ad0 <pow+0x2b0>
 8011a4a:	f7fd fa27 	bl	800ee9c <__errno>
 8011a4e:	2322      	movs	r3, #34	; 0x22
 8011a50:	e78d      	b.n	801196e <pow+0x14e>
 8011a52:	4b29      	ldr	r3, [pc, #164]	; (8011af8 <pow+0x2d8>)
 8011a54:	2200      	movs	r2, #0
 8011a56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	4652      	mov	r2, sl
 8011a5e:	465b      	mov	r3, fp
 8011a60:	4639      	mov	r1, r7
 8011a62:	f7ef f863 	bl	8000b2c <__aeabi_dcmplt>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	d0eb      	beq.n	8011a42 <pow+0x222>
 8011a6a:	ec45 4b10 	vmov	d0, r4, r5
 8011a6e:	f000 feaf 	bl	80127d0 <rint>
 8011a72:	4622      	mov	r2, r4
 8011a74:	462b      	mov	r3, r5
 8011a76:	ec51 0b10 	vmov	r0, r1, d0
 8011a7a:	f7ef f84d 	bl	8000b18 <__aeabi_dcmpeq>
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	d1df      	bne.n	8011a42 <pow+0x222>
 8011a82:	2200      	movs	r2, #0
 8011a84:	4b18      	ldr	r3, [pc, #96]	; (8011ae8 <pow+0x2c8>)
 8011a86:	e7da      	b.n	8011a3e <pow+0x21e>
 8011a88:	2200      	movs	r2, #0
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	ec51 0b18 	vmov	r0, r1, d8
 8011a90:	f7ef f842 	bl	8000b18 <__aeabi_dcmpeq>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	f43f af3a 	beq.w	801190e <pow+0xee>
 8011a9a:	ec47 6b10 	vmov	d0, r6, r7
 8011a9e:	f000 fe82 	bl	80127a6 <finite>
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	f43f af33 	beq.w	801190e <pow+0xee>
 8011aa8:	ec45 4b10 	vmov	d0, r4, r5
 8011aac:	f000 fe7b 	bl	80127a6 <finite>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	f43f af2c 	beq.w	801190e <pow+0xee>
 8011ab6:	2304      	movs	r3, #4
 8011ab8:	9302      	str	r3, [sp, #8]
 8011aba:	4b09      	ldr	r3, [pc, #36]	; (8011ae0 <pow+0x2c0>)
 8011abc:	9303      	str	r3, [sp, #12]
 8011abe:	2300      	movs	r3, #0
 8011ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8011ac2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011ac6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011aca:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011ace:	e7b8      	b.n	8011a42 <pow+0x222>
 8011ad0:	a802      	add	r0, sp, #8
 8011ad2:	f000 fe70 	bl	80127b6 <matherr>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	f47f af11 	bne.w	80118fe <pow+0xde>
 8011adc:	e7b5      	b.n	8011a4a <pow+0x22a>
 8011ade:	bf00      	nop
 8011ae0:	08014196 	.word	0x08014196
 8011ae4:	3ff00000 	.word	0x3ff00000
 8011ae8:	fff00000 	.word	0xfff00000
 8011aec:	3fe00000 	.word	0x3fe00000
 8011af0:	47efffff 	.word	0x47efffff
 8011af4:	c7efffff 	.word	0xc7efffff
 8011af8:	7ff00000 	.word	0x7ff00000
 8011afc:	20001e04 	.word	0x20001e04

08011b00 <__ieee754_log10>:
 8011b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b04:	ec55 4b10 	vmov	r4, r5, d0
 8011b08:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8011b0c:	462b      	mov	r3, r5
 8011b0e:	da2f      	bge.n	8011b70 <__ieee754_log10+0x70>
 8011b10:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8011b14:	4322      	orrs	r2, r4
 8011b16:	d10a      	bne.n	8011b2e <__ieee754_log10+0x2e>
 8011b18:	493b      	ldr	r1, [pc, #236]	; (8011c08 <__ieee754_log10+0x108>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	2000      	movs	r0, #0
 8011b20:	f7ee febc 	bl	800089c <__aeabi_ddiv>
 8011b24:	ec41 0b10 	vmov	d0, r0, r1
 8011b28:	b003      	add	sp, #12
 8011b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b2e:	2d00      	cmp	r5, #0
 8011b30:	da08      	bge.n	8011b44 <__ieee754_log10+0x44>
 8011b32:	ee10 2a10 	vmov	r2, s0
 8011b36:	4620      	mov	r0, r4
 8011b38:	4629      	mov	r1, r5
 8011b3a:	f7ee fbcd 	bl	80002d8 <__aeabi_dsub>
 8011b3e:	2200      	movs	r2, #0
 8011b40:	2300      	movs	r3, #0
 8011b42:	e7ed      	b.n	8011b20 <__ieee754_log10+0x20>
 8011b44:	2200      	movs	r2, #0
 8011b46:	4b31      	ldr	r3, [pc, #196]	; (8011c0c <__ieee754_log10+0x10c>)
 8011b48:	4629      	mov	r1, r5
 8011b4a:	ee10 0a10 	vmov	r0, s0
 8011b4e:	f7ee fd7b 	bl	8000648 <__aeabi_dmul>
 8011b52:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011b56:	4604      	mov	r4, r0
 8011b58:	460d      	mov	r5, r1
 8011b5a:	460b      	mov	r3, r1
 8011b5c:	492c      	ldr	r1, [pc, #176]	; (8011c10 <__ieee754_log10+0x110>)
 8011b5e:	428b      	cmp	r3, r1
 8011b60:	dd08      	ble.n	8011b74 <__ieee754_log10+0x74>
 8011b62:	4622      	mov	r2, r4
 8011b64:	462b      	mov	r3, r5
 8011b66:	4620      	mov	r0, r4
 8011b68:	4629      	mov	r1, r5
 8011b6a:	f7ee fbb7 	bl	80002dc <__adddf3>
 8011b6e:	e7d9      	b.n	8011b24 <__ieee754_log10+0x24>
 8011b70:	2200      	movs	r2, #0
 8011b72:	e7f3      	b.n	8011b5c <__ieee754_log10+0x5c>
 8011b74:	1518      	asrs	r0, r3, #20
 8011b76:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011b7a:	4410      	add	r0, r2
 8011b7c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8011b80:	4448      	add	r0, r9
 8011b82:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8011b86:	f7ee fcf5 	bl	8000574 <__aeabi_i2d>
 8011b8a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8011b8e:	3303      	adds	r3, #3
 8011b90:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8011b94:	ec45 4b10 	vmov	d0, r4, r5
 8011b98:	4606      	mov	r6, r0
 8011b9a:	460f      	mov	r7, r1
 8011b9c:	f000 ff14 	bl	80129c8 <__ieee754_log>
 8011ba0:	a313      	add	r3, pc, #76	; (adr r3, 8011bf0 <__ieee754_log10+0xf0>)
 8011ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	4639      	mov	r1, r7
 8011baa:	ed8d 0b00 	vstr	d0, [sp]
 8011bae:	f7ee fd4b 	bl	8000648 <__aeabi_dmul>
 8011bb2:	ed9d 0b00 	vldr	d0, [sp]
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	460d      	mov	r5, r1
 8011bba:	a30f      	add	r3, pc, #60	; (adr r3, 8011bf8 <__ieee754_log10+0xf8>)
 8011bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc0:	ec51 0b10 	vmov	r0, r1, d0
 8011bc4:	f7ee fd40 	bl	8000648 <__aeabi_dmul>
 8011bc8:	4602      	mov	r2, r0
 8011bca:	460b      	mov	r3, r1
 8011bcc:	4620      	mov	r0, r4
 8011bce:	4629      	mov	r1, r5
 8011bd0:	f7ee fb84 	bl	80002dc <__adddf3>
 8011bd4:	a30a      	add	r3, pc, #40	; (adr r3, 8011c00 <__ieee754_log10+0x100>)
 8011bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bda:	4604      	mov	r4, r0
 8011bdc:	460d      	mov	r5, r1
 8011bde:	4630      	mov	r0, r6
 8011be0:	4639      	mov	r1, r7
 8011be2:	f7ee fd31 	bl	8000648 <__aeabi_dmul>
 8011be6:	4602      	mov	r2, r0
 8011be8:	460b      	mov	r3, r1
 8011bea:	4620      	mov	r0, r4
 8011bec:	4629      	mov	r1, r5
 8011bee:	e7bc      	b.n	8011b6a <__ieee754_log10+0x6a>
 8011bf0:	11f12b36 	.word	0x11f12b36
 8011bf4:	3d59fef3 	.word	0x3d59fef3
 8011bf8:	1526e50e 	.word	0x1526e50e
 8011bfc:	3fdbcb7b 	.word	0x3fdbcb7b
 8011c00:	509f6000 	.word	0x509f6000
 8011c04:	3fd34413 	.word	0x3fd34413
 8011c08:	c3500000 	.word	0xc3500000
 8011c0c:	43500000 	.word	0x43500000
 8011c10:	7fefffff 	.word	0x7fefffff
 8011c14:	00000000 	.word	0x00000000

08011c18 <__ieee754_pow>:
 8011c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c1c:	b091      	sub	sp, #68	; 0x44
 8011c1e:	ed8d 1b00 	vstr	d1, [sp]
 8011c22:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011c26:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011c2a:	ea58 0302 	orrs.w	r3, r8, r2
 8011c2e:	ec57 6b10 	vmov	r6, r7, d0
 8011c32:	f000 84be 	beq.w	80125b2 <__ieee754_pow+0x99a>
 8011c36:	4b7a      	ldr	r3, [pc, #488]	; (8011e20 <__ieee754_pow+0x208>)
 8011c38:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011c3c:	429c      	cmp	r4, r3
 8011c3e:	463d      	mov	r5, r7
 8011c40:	ee10 aa10 	vmov	sl, s0
 8011c44:	dc09      	bgt.n	8011c5a <__ieee754_pow+0x42>
 8011c46:	d103      	bne.n	8011c50 <__ieee754_pow+0x38>
 8011c48:	b93e      	cbnz	r6, 8011c5a <__ieee754_pow+0x42>
 8011c4a:	45a0      	cmp	r8, r4
 8011c4c:	dc0d      	bgt.n	8011c6a <__ieee754_pow+0x52>
 8011c4e:	e001      	b.n	8011c54 <__ieee754_pow+0x3c>
 8011c50:	4598      	cmp	r8, r3
 8011c52:	dc02      	bgt.n	8011c5a <__ieee754_pow+0x42>
 8011c54:	4598      	cmp	r8, r3
 8011c56:	d10e      	bne.n	8011c76 <__ieee754_pow+0x5e>
 8011c58:	b16a      	cbz	r2, 8011c76 <__ieee754_pow+0x5e>
 8011c5a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011c5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011c62:	ea54 030a 	orrs.w	r3, r4, sl
 8011c66:	f000 84a4 	beq.w	80125b2 <__ieee754_pow+0x99a>
 8011c6a:	486e      	ldr	r0, [pc, #440]	; (8011e24 <__ieee754_pow+0x20c>)
 8011c6c:	b011      	add	sp, #68	; 0x44
 8011c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c72:	f000 bda5 	b.w	80127c0 <nan>
 8011c76:	2d00      	cmp	r5, #0
 8011c78:	da53      	bge.n	8011d22 <__ieee754_pow+0x10a>
 8011c7a:	4b6b      	ldr	r3, [pc, #428]	; (8011e28 <__ieee754_pow+0x210>)
 8011c7c:	4598      	cmp	r8, r3
 8011c7e:	dc4d      	bgt.n	8011d1c <__ieee754_pow+0x104>
 8011c80:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011c84:	4598      	cmp	r8, r3
 8011c86:	dd4c      	ble.n	8011d22 <__ieee754_pow+0x10a>
 8011c88:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011c8c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011c90:	2b14      	cmp	r3, #20
 8011c92:	dd26      	ble.n	8011ce2 <__ieee754_pow+0xca>
 8011c94:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011c98:	fa22 f103 	lsr.w	r1, r2, r3
 8011c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8011ca0:	4293      	cmp	r3, r2
 8011ca2:	d13e      	bne.n	8011d22 <__ieee754_pow+0x10a>
 8011ca4:	f001 0101 	and.w	r1, r1, #1
 8011ca8:	f1c1 0b02 	rsb	fp, r1, #2
 8011cac:	2a00      	cmp	r2, #0
 8011cae:	d15b      	bne.n	8011d68 <__ieee754_pow+0x150>
 8011cb0:	4b5b      	ldr	r3, [pc, #364]	; (8011e20 <__ieee754_pow+0x208>)
 8011cb2:	4598      	cmp	r8, r3
 8011cb4:	d124      	bne.n	8011d00 <__ieee754_pow+0xe8>
 8011cb6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011cba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011cbe:	ea53 030a 	orrs.w	r3, r3, sl
 8011cc2:	f000 8476 	beq.w	80125b2 <__ieee754_pow+0x99a>
 8011cc6:	4b59      	ldr	r3, [pc, #356]	; (8011e2c <__ieee754_pow+0x214>)
 8011cc8:	429c      	cmp	r4, r3
 8011cca:	dd2d      	ble.n	8011d28 <__ieee754_pow+0x110>
 8011ccc:	f1b9 0f00 	cmp.w	r9, #0
 8011cd0:	f280 8473 	bge.w	80125ba <__ieee754_pow+0x9a2>
 8011cd4:	2000      	movs	r0, #0
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	ec41 0b10 	vmov	d0, r0, r1
 8011cdc:	b011      	add	sp, #68	; 0x44
 8011cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ce2:	2a00      	cmp	r2, #0
 8011ce4:	d13e      	bne.n	8011d64 <__ieee754_pow+0x14c>
 8011ce6:	f1c3 0314 	rsb	r3, r3, #20
 8011cea:	fa48 f103 	asr.w	r1, r8, r3
 8011cee:	fa01 f303 	lsl.w	r3, r1, r3
 8011cf2:	4543      	cmp	r3, r8
 8011cf4:	f040 8469 	bne.w	80125ca <__ieee754_pow+0x9b2>
 8011cf8:	f001 0101 	and.w	r1, r1, #1
 8011cfc:	f1c1 0b02 	rsb	fp, r1, #2
 8011d00:	4b4b      	ldr	r3, [pc, #300]	; (8011e30 <__ieee754_pow+0x218>)
 8011d02:	4598      	cmp	r8, r3
 8011d04:	d118      	bne.n	8011d38 <__ieee754_pow+0x120>
 8011d06:	f1b9 0f00 	cmp.w	r9, #0
 8011d0a:	f280 845a 	bge.w	80125c2 <__ieee754_pow+0x9aa>
 8011d0e:	4948      	ldr	r1, [pc, #288]	; (8011e30 <__ieee754_pow+0x218>)
 8011d10:	4632      	mov	r2, r6
 8011d12:	463b      	mov	r3, r7
 8011d14:	2000      	movs	r0, #0
 8011d16:	f7ee fdc1 	bl	800089c <__aeabi_ddiv>
 8011d1a:	e7dd      	b.n	8011cd8 <__ieee754_pow+0xc0>
 8011d1c:	f04f 0b02 	mov.w	fp, #2
 8011d20:	e7c4      	b.n	8011cac <__ieee754_pow+0x94>
 8011d22:	f04f 0b00 	mov.w	fp, #0
 8011d26:	e7c1      	b.n	8011cac <__ieee754_pow+0x94>
 8011d28:	f1b9 0f00 	cmp.w	r9, #0
 8011d2c:	dad2      	bge.n	8011cd4 <__ieee754_pow+0xbc>
 8011d2e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011d32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011d36:	e7cf      	b.n	8011cd8 <__ieee754_pow+0xc0>
 8011d38:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011d3c:	d106      	bne.n	8011d4c <__ieee754_pow+0x134>
 8011d3e:	4632      	mov	r2, r6
 8011d40:	463b      	mov	r3, r7
 8011d42:	4610      	mov	r0, r2
 8011d44:	4619      	mov	r1, r3
 8011d46:	f7ee fc7f 	bl	8000648 <__aeabi_dmul>
 8011d4a:	e7c5      	b.n	8011cd8 <__ieee754_pow+0xc0>
 8011d4c:	4b39      	ldr	r3, [pc, #228]	; (8011e34 <__ieee754_pow+0x21c>)
 8011d4e:	4599      	cmp	r9, r3
 8011d50:	d10a      	bne.n	8011d68 <__ieee754_pow+0x150>
 8011d52:	2d00      	cmp	r5, #0
 8011d54:	db08      	blt.n	8011d68 <__ieee754_pow+0x150>
 8011d56:	ec47 6b10 	vmov	d0, r6, r7
 8011d5a:	b011      	add	sp, #68	; 0x44
 8011d5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d60:	f000 bc68 	b.w	8012634 <__ieee754_sqrt>
 8011d64:	f04f 0b00 	mov.w	fp, #0
 8011d68:	ec47 6b10 	vmov	d0, r6, r7
 8011d6c:	f000 fd12 	bl	8012794 <fabs>
 8011d70:	ec51 0b10 	vmov	r0, r1, d0
 8011d74:	f1ba 0f00 	cmp.w	sl, #0
 8011d78:	d127      	bne.n	8011dca <__ieee754_pow+0x1b2>
 8011d7a:	b124      	cbz	r4, 8011d86 <__ieee754_pow+0x16e>
 8011d7c:	4b2c      	ldr	r3, [pc, #176]	; (8011e30 <__ieee754_pow+0x218>)
 8011d7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d121      	bne.n	8011dca <__ieee754_pow+0x1b2>
 8011d86:	f1b9 0f00 	cmp.w	r9, #0
 8011d8a:	da05      	bge.n	8011d98 <__ieee754_pow+0x180>
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	460b      	mov	r3, r1
 8011d90:	2000      	movs	r0, #0
 8011d92:	4927      	ldr	r1, [pc, #156]	; (8011e30 <__ieee754_pow+0x218>)
 8011d94:	f7ee fd82 	bl	800089c <__aeabi_ddiv>
 8011d98:	2d00      	cmp	r5, #0
 8011d9a:	da9d      	bge.n	8011cd8 <__ieee754_pow+0xc0>
 8011d9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011da0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011da4:	ea54 030b 	orrs.w	r3, r4, fp
 8011da8:	d108      	bne.n	8011dbc <__ieee754_pow+0x1a4>
 8011daa:	4602      	mov	r2, r0
 8011dac:	460b      	mov	r3, r1
 8011dae:	4610      	mov	r0, r2
 8011db0:	4619      	mov	r1, r3
 8011db2:	f7ee fa91 	bl	80002d8 <__aeabi_dsub>
 8011db6:	4602      	mov	r2, r0
 8011db8:	460b      	mov	r3, r1
 8011dba:	e7ac      	b.n	8011d16 <__ieee754_pow+0xfe>
 8011dbc:	f1bb 0f01 	cmp.w	fp, #1
 8011dc0:	d18a      	bne.n	8011cd8 <__ieee754_pow+0xc0>
 8011dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	e786      	b.n	8011cd8 <__ieee754_pow+0xc0>
 8011dca:	0fed      	lsrs	r5, r5, #31
 8011dcc:	1e6b      	subs	r3, r5, #1
 8011dce:	930d      	str	r3, [sp, #52]	; 0x34
 8011dd0:	ea5b 0303 	orrs.w	r3, fp, r3
 8011dd4:	d102      	bne.n	8011ddc <__ieee754_pow+0x1c4>
 8011dd6:	4632      	mov	r2, r6
 8011dd8:	463b      	mov	r3, r7
 8011dda:	e7e8      	b.n	8011dae <__ieee754_pow+0x196>
 8011ddc:	4b16      	ldr	r3, [pc, #88]	; (8011e38 <__ieee754_pow+0x220>)
 8011dde:	4598      	cmp	r8, r3
 8011de0:	f340 80fe 	ble.w	8011fe0 <__ieee754_pow+0x3c8>
 8011de4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011de8:	4598      	cmp	r8, r3
 8011dea:	dd0a      	ble.n	8011e02 <__ieee754_pow+0x1ea>
 8011dec:	4b0f      	ldr	r3, [pc, #60]	; (8011e2c <__ieee754_pow+0x214>)
 8011dee:	429c      	cmp	r4, r3
 8011df0:	dc0d      	bgt.n	8011e0e <__ieee754_pow+0x1f6>
 8011df2:	f1b9 0f00 	cmp.w	r9, #0
 8011df6:	f6bf af6d 	bge.w	8011cd4 <__ieee754_pow+0xbc>
 8011dfa:	a307      	add	r3, pc, #28	; (adr r3, 8011e18 <__ieee754_pow+0x200>)
 8011dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e00:	e79f      	b.n	8011d42 <__ieee754_pow+0x12a>
 8011e02:	4b0e      	ldr	r3, [pc, #56]	; (8011e3c <__ieee754_pow+0x224>)
 8011e04:	429c      	cmp	r4, r3
 8011e06:	ddf4      	ble.n	8011df2 <__ieee754_pow+0x1da>
 8011e08:	4b09      	ldr	r3, [pc, #36]	; (8011e30 <__ieee754_pow+0x218>)
 8011e0a:	429c      	cmp	r4, r3
 8011e0c:	dd18      	ble.n	8011e40 <__ieee754_pow+0x228>
 8011e0e:	f1b9 0f00 	cmp.w	r9, #0
 8011e12:	dcf2      	bgt.n	8011dfa <__ieee754_pow+0x1e2>
 8011e14:	e75e      	b.n	8011cd4 <__ieee754_pow+0xbc>
 8011e16:	bf00      	nop
 8011e18:	8800759c 	.word	0x8800759c
 8011e1c:	7e37e43c 	.word	0x7e37e43c
 8011e20:	7ff00000 	.word	0x7ff00000
 8011e24:	08014079 	.word	0x08014079
 8011e28:	433fffff 	.word	0x433fffff
 8011e2c:	3fefffff 	.word	0x3fefffff
 8011e30:	3ff00000 	.word	0x3ff00000
 8011e34:	3fe00000 	.word	0x3fe00000
 8011e38:	41e00000 	.word	0x41e00000
 8011e3c:	3feffffe 	.word	0x3feffffe
 8011e40:	2200      	movs	r2, #0
 8011e42:	4b63      	ldr	r3, [pc, #396]	; (8011fd0 <__ieee754_pow+0x3b8>)
 8011e44:	f7ee fa48 	bl	80002d8 <__aeabi_dsub>
 8011e48:	a355      	add	r3, pc, #340	; (adr r3, 8011fa0 <__ieee754_pow+0x388>)
 8011e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e4e:	4604      	mov	r4, r0
 8011e50:	460d      	mov	r5, r1
 8011e52:	f7ee fbf9 	bl	8000648 <__aeabi_dmul>
 8011e56:	a354      	add	r3, pc, #336	; (adr r3, 8011fa8 <__ieee754_pow+0x390>)
 8011e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5c:	4606      	mov	r6, r0
 8011e5e:	460f      	mov	r7, r1
 8011e60:	4620      	mov	r0, r4
 8011e62:	4629      	mov	r1, r5
 8011e64:	f7ee fbf0 	bl	8000648 <__aeabi_dmul>
 8011e68:	2200      	movs	r2, #0
 8011e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e6e:	4b59      	ldr	r3, [pc, #356]	; (8011fd4 <__ieee754_pow+0x3bc>)
 8011e70:	4620      	mov	r0, r4
 8011e72:	4629      	mov	r1, r5
 8011e74:	f7ee fbe8 	bl	8000648 <__aeabi_dmul>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	a14c      	add	r1, pc, #304	; (adr r1, 8011fb0 <__ieee754_pow+0x398>)
 8011e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e82:	f7ee fa29 	bl	80002d8 <__aeabi_dsub>
 8011e86:	4622      	mov	r2, r4
 8011e88:	462b      	mov	r3, r5
 8011e8a:	f7ee fbdd 	bl	8000648 <__aeabi_dmul>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	460b      	mov	r3, r1
 8011e92:	2000      	movs	r0, #0
 8011e94:	4950      	ldr	r1, [pc, #320]	; (8011fd8 <__ieee754_pow+0x3c0>)
 8011e96:	f7ee fa1f 	bl	80002d8 <__aeabi_dsub>
 8011e9a:	4622      	mov	r2, r4
 8011e9c:	462b      	mov	r3, r5
 8011e9e:	4680      	mov	r8, r0
 8011ea0:	4689      	mov	r9, r1
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	f7ee fbcf 	bl	8000648 <__aeabi_dmul>
 8011eaa:	4602      	mov	r2, r0
 8011eac:	460b      	mov	r3, r1
 8011eae:	4640      	mov	r0, r8
 8011eb0:	4649      	mov	r1, r9
 8011eb2:	f7ee fbc9 	bl	8000648 <__aeabi_dmul>
 8011eb6:	a340      	add	r3, pc, #256	; (adr r3, 8011fb8 <__ieee754_pow+0x3a0>)
 8011eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ebc:	f7ee fbc4 	bl	8000648 <__aeabi_dmul>
 8011ec0:	4602      	mov	r2, r0
 8011ec2:	460b      	mov	r3, r1
 8011ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ec8:	f7ee fa06 	bl	80002d8 <__aeabi_dsub>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	460b      	mov	r3, r1
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	460d      	mov	r5, r1
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	4639      	mov	r1, r7
 8011ed8:	f7ee fa00 	bl	80002dc <__adddf3>
 8011edc:	2000      	movs	r0, #0
 8011ede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ee2:	4632      	mov	r2, r6
 8011ee4:	463b      	mov	r3, r7
 8011ee6:	f7ee f9f7 	bl	80002d8 <__aeabi_dsub>
 8011eea:	4602      	mov	r2, r0
 8011eec:	460b      	mov	r3, r1
 8011eee:	4620      	mov	r0, r4
 8011ef0:	4629      	mov	r1, r5
 8011ef2:	f7ee f9f1 	bl	80002d8 <__aeabi_dsub>
 8011ef6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ef8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8011efc:	4313      	orrs	r3, r2
 8011efe:	4606      	mov	r6, r0
 8011f00:	460f      	mov	r7, r1
 8011f02:	f040 81eb 	bne.w	80122dc <__ieee754_pow+0x6c4>
 8011f06:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011fc0 <__ieee754_pow+0x3a8>
 8011f0a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011f0e:	2400      	movs	r4, #0
 8011f10:	4622      	mov	r2, r4
 8011f12:	462b      	mov	r3, r5
 8011f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f1c:	f7ee f9dc 	bl	80002d8 <__aeabi_dsub>
 8011f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f24:	f7ee fb90 	bl	8000648 <__aeabi_dmul>
 8011f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f2c:	4680      	mov	r8, r0
 8011f2e:	4689      	mov	r9, r1
 8011f30:	4630      	mov	r0, r6
 8011f32:	4639      	mov	r1, r7
 8011f34:	f7ee fb88 	bl	8000648 <__aeabi_dmul>
 8011f38:	4602      	mov	r2, r0
 8011f3a:	460b      	mov	r3, r1
 8011f3c:	4640      	mov	r0, r8
 8011f3e:	4649      	mov	r1, r9
 8011f40:	f7ee f9cc 	bl	80002dc <__adddf3>
 8011f44:	4622      	mov	r2, r4
 8011f46:	462b      	mov	r3, r5
 8011f48:	4680      	mov	r8, r0
 8011f4a:	4689      	mov	r9, r1
 8011f4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f50:	f7ee fb7a 	bl	8000648 <__aeabi_dmul>
 8011f54:	460b      	mov	r3, r1
 8011f56:	4604      	mov	r4, r0
 8011f58:	460d      	mov	r5, r1
 8011f5a:	4602      	mov	r2, r0
 8011f5c:	4649      	mov	r1, r9
 8011f5e:	4640      	mov	r0, r8
 8011f60:	e9cd 4500 	strd	r4, r5, [sp]
 8011f64:	f7ee f9ba 	bl	80002dc <__adddf3>
 8011f68:	4b1c      	ldr	r3, [pc, #112]	; (8011fdc <__ieee754_pow+0x3c4>)
 8011f6a:	4299      	cmp	r1, r3
 8011f6c:	4606      	mov	r6, r0
 8011f6e:	460f      	mov	r7, r1
 8011f70:	468b      	mov	fp, r1
 8011f72:	f340 82f7 	ble.w	8012564 <__ieee754_pow+0x94c>
 8011f76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011f7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011f7e:	4303      	orrs	r3, r0
 8011f80:	f000 81ea 	beq.w	8012358 <__ieee754_pow+0x740>
 8011f84:	a310      	add	r3, pc, #64	; (adr r3, 8011fc8 <__ieee754_pow+0x3b0>)
 8011f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f8e:	f7ee fb5b 	bl	8000648 <__aeabi_dmul>
 8011f92:	a30d      	add	r3, pc, #52	; (adr r3, 8011fc8 <__ieee754_pow+0x3b0>)
 8011f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f98:	e6d5      	b.n	8011d46 <__ieee754_pow+0x12e>
 8011f9a:	bf00      	nop
 8011f9c:	f3af 8000 	nop.w
 8011fa0:	60000000 	.word	0x60000000
 8011fa4:	3ff71547 	.word	0x3ff71547
 8011fa8:	f85ddf44 	.word	0xf85ddf44
 8011fac:	3e54ae0b 	.word	0x3e54ae0b
 8011fb0:	55555555 	.word	0x55555555
 8011fb4:	3fd55555 	.word	0x3fd55555
 8011fb8:	652b82fe 	.word	0x652b82fe
 8011fbc:	3ff71547 	.word	0x3ff71547
 8011fc0:	00000000 	.word	0x00000000
 8011fc4:	bff00000 	.word	0xbff00000
 8011fc8:	8800759c 	.word	0x8800759c
 8011fcc:	7e37e43c 	.word	0x7e37e43c
 8011fd0:	3ff00000 	.word	0x3ff00000
 8011fd4:	3fd00000 	.word	0x3fd00000
 8011fd8:	3fe00000 	.word	0x3fe00000
 8011fdc:	408fffff 	.word	0x408fffff
 8011fe0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011fe4:	f04f 0200 	mov.w	r2, #0
 8011fe8:	da05      	bge.n	8011ff6 <__ieee754_pow+0x3de>
 8011fea:	4bd3      	ldr	r3, [pc, #844]	; (8012338 <__ieee754_pow+0x720>)
 8011fec:	f7ee fb2c 	bl	8000648 <__aeabi_dmul>
 8011ff0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011ff4:	460c      	mov	r4, r1
 8011ff6:	1523      	asrs	r3, r4, #20
 8011ff8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011ffc:	4413      	add	r3, r2
 8011ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8012000:	4bce      	ldr	r3, [pc, #824]	; (801233c <__ieee754_pow+0x724>)
 8012002:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012006:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801200a:	429c      	cmp	r4, r3
 801200c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012010:	dd08      	ble.n	8012024 <__ieee754_pow+0x40c>
 8012012:	4bcb      	ldr	r3, [pc, #812]	; (8012340 <__ieee754_pow+0x728>)
 8012014:	429c      	cmp	r4, r3
 8012016:	f340 815e 	ble.w	80122d6 <__ieee754_pow+0x6be>
 801201a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801201c:	3301      	adds	r3, #1
 801201e:	9309      	str	r3, [sp, #36]	; 0x24
 8012020:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012024:	f04f 0a00 	mov.w	sl, #0
 8012028:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801202c:	930c      	str	r3, [sp, #48]	; 0x30
 801202e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012030:	4bc4      	ldr	r3, [pc, #784]	; (8012344 <__ieee754_pow+0x72c>)
 8012032:	4413      	add	r3, r2
 8012034:	ed93 7b00 	vldr	d7, [r3]
 8012038:	4629      	mov	r1, r5
 801203a:	ec53 2b17 	vmov	r2, r3, d7
 801203e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012042:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012046:	f7ee f947 	bl	80002d8 <__aeabi_dsub>
 801204a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801204e:	4606      	mov	r6, r0
 8012050:	460f      	mov	r7, r1
 8012052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012056:	f7ee f941 	bl	80002dc <__adddf3>
 801205a:	4602      	mov	r2, r0
 801205c:	460b      	mov	r3, r1
 801205e:	2000      	movs	r0, #0
 8012060:	49b9      	ldr	r1, [pc, #740]	; (8012348 <__ieee754_pow+0x730>)
 8012062:	f7ee fc1b 	bl	800089c <__aeabi_ddiv>
 8012066:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801206a:	4602      	mov	r2, r0
 801206c:	460b      	mov	r3, r1
 801206e:	4630      	mov	r0, r6
 8012070:	4639      	mov	r1, r7
 8012072:	f7ee fae9 	bl	8000648 <__aeabi_dmul>
 8012076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801207a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801207e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012082:	2300      	movs	r3, #0
 8012084:	9302      	str	r3, [sp, #8]
 8012086:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801208a:	106d      	asrs	r5, r5, #1
 801208c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012090:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012094:	2200      	movs	r2, #0
 8012096:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801209a:	4640      	mov	r0, r8
 801209c:	4649      	mov	r1, r9
 801209e:	4614      	mov	r4, r2
 80120a0:	461d      	mov	r5, r3
 80120a2:	f7ee fad1 	bl	8000648 <__aeabi_dmul>
 80120a6:	4602      	mov	r2, r0
 80120a8:	460b      	mov	r3, r1
 80120aa:	4630      	mov	r0, r6
 80120ac:	4639      	mov	r1, r7
 80120ae:	f7ee f913 	bl	80002d8 <__aeabi_dsub>
 80120b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80120b6:	4606      	mov	r6, r0
 80120b8:	460f      	mov	r7, r1
 80120ba:	4620      	mov	r0, r4
 80120bc:	4629      	mov	r1, r5
 80120be:	f7ee f90b 	bl	80002d8 <__aeabi_dsub>
 80120c2:	4602      	mov	r2, r0
 80120c4:	460b      	mov	r3, r1
 80120c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120ca:	f7ee f905 	bl	80002d8 <__aeabi_dsub>
 80120ce:	4642      	mov	r2, r8
 80120d0:	464b      	mov	r3, r9
 80120d2:	f7ee fab9 	bl	8000648 <__aeabi_dmul>
 80120d6:	4602      	mov	r2, r0
 80120d8:	460b      	mov	r3, r1
 80120da:	4630      	mov	r0, r6
 80120dc:	4639      	mov	r1, r7
 80120de:	f7ee f8fb 	bl	80002d8 <__aeabi_dsub>
 80120e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80120e6:	f7ee faaf 	bl	8000648 <__aeabi_dmul>
 80120ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80120f2:	4610      	mov	r0, r2
 80120f4:	4619      	mov	r1, r3
 80120f6:	f7ee faa7 	bl	8000648 <__aeabi_dmul>
 80120fa:	a37b      	add	r3, pc, #492	; (adr r3, 80122e8 <__ieee754_pow+0x6d0>)
 80120fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012100:	4604      	mov	r4, r0
 8012102:	460d      	mov	r5, r1
 8012104:	f7ee faa0 	bl	8000648 <__aeabi_dmul>
 8012108:	a379      	add	r3, pc, #484	; (adr r3, 80122f0 <__ieee754_pow+0x6d8>)
 801210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210e:	f7ee f8e5 	bl	80002dc <__adddf3>
 8012112:	4622      	mov	r2, r4
 8012114:	462b      	mov	r3, r5
 8012116:	f7ee fa97 	bl	8000648 <__aeabi_dmul>
 801211a:	a377      	add	r3, pc, #476	; (adr r3, 80122f8 <__ieee754_pow+0x6e0>)
 801211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012120:	f7ee f8dc 	bl	80002dc <__adddf3>
 8012124:	4622      	mov	r2, r4
 8012126:	462b      	mov	r3, r5
 8012128:	f7ee fa8e 	bl	8000648 <__aeabi_dmul>
 801212c:	a374      	add	r3, pc, #464	; (adr r3, 8012300 <__ieee754_pow+0x6e8>)
 801212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012132:	f7ee f8d3 	bl	80002dc <__adddf3>
 8012136:	4622      	mov	r2, r4
 8012138:	462b      	mov	r3, r5
 801213a:	f7ee fa85 	bl	8000648 <__aeabi_dmul>
 801213e:	a372      	add	r3, pc, #456	; (adr r3, 8012308 <__ieee754_pow+0x6f0>)
 8012140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012144:	f7ee f8ca 	bl	80002dc <__adddf3>
 8012148:	4622      	mov	r2, r4
 801214a:	462b      	mov	r3, r5
 801214c:	f7ee fa7c 	bl	8000648 <__aeabi_dmul>
 8012150:	a36f      	add	r3, pc, #444	; (adr r3, 8012310 <__ieee754_pow+0x6f8>)
 8012152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012156:	f7ee f8c1 	bl	80002dc <__adddf3>
 801215a:	4622      	mov	r2, r4
 801215c:	4606      	mov	r6, r0
 801215e:	460f      	mov	r7, r1
 8012160:	462b      	mov	r3, r5
 8012162:	4620      	mov	r0, r4
 8012164:	4629      	mov	r1, r5
 8012166:	f7ee fa6f 	bl	8000648 <__aeabi_dmul>
 801216a:	4602      	mov	r2, r0
 801216c:	460b      	mov	r3, r1
 801216e:	4630      	mov	r0, r6
 8012170:	4639      	mov	r1, r7
 8012172:	f7ee fa69 	bl	8000648 <__aeabi_dmul>
 8012176:	4642      	mov	r2, r8
 8012178:	4604      	mov	r4, r0
 801217a:	460d      	mov	r5, r1
 801217c:	464b      	mov	r3, r9
 801217e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012182:	f7ee f8ab 	bl	80002dc <__adddf3>
 8012186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801218a:	f7ee fa5d 	bl	8000648 <__aeabi_dmul>
 801218e:	4622      	mov	r2, r4
 8012190:	462b      	mov	r3, r5
 8012192:	f7ee f8a3 	bl	80002dc <__adddf3>
 8012196:	4642      	mov	r2, r8
 8012198:	4606      	mov	r6, r0
 801219a:	460f      	mov	r7, r1
 801219c:	464b      	mov	r3, r9
 801219e:	4640      	mov	r0, r8
 80121a0:	4649      	mov	r1, r9
 80121a2:	f7ee fa51 	bl	8000648 <__aeabi_dmul>
 80121a6:	2200      	movs	r2, #0
 80121a8:	4b68      	ldr	r3, [pc, #416]	; (801234c <__ieee754_pow+0x734>)
 80121aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80121ae:	f7ee f895 	bl	80002dc <__adddf3>
 80121b2:	4632      	mov	r2, r6
 80121b4:	463b      	mov	r3, r7
 80121b6:	f7ee f891 	bl	80002dc <__adddf3>
 80121ba:	9802      	ldr	r0, [sp, #8]
 80121bc:	460d      	mov	r5, r1
 80121be:	4604      	mov	r4, r0
 80121c0:	4602      	mov	r2, r0
 80121c2:	460b      	mov	r3, r1
 80121c4:	4640      	mov	r0, r8
 80121c6:	4649      	mov	r1, r9
 80121c8:	f7ee fa3e 	bl	8000648 <__aeabi_dmul>
 80121cc:	2200      	movs	r2, #0
 80121ce:	4680      	mov	r8, r0
 80121d0:	4689      	mov	r9, r1
 80121d2:	4b5e      	ldr	r3, [pc, #376]	; (801234c <__ieee754_pow+0x734>)
 80121d4:	4620      	mov	r0, r4
 80121d6:	4629      	mov	r1, r5
 80121d8:	f7ee f87e 	bl	80002d8 <__aeabi_dsub>
 80121dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80121e0:	f7ee f87a 	bl	80002d8 <__aeabi_dsub>
 80121e4:	4602      	mov	r2, r0
 80121e6:	460b      	mov	r3, r1
 80121e8:	4630      	mov	r0, r6
 80121ea:	4639      	mov	r1, r7
 80121ec:	f7ee f874 	bl	80002d8 <__aeabi_dsub>
 80121f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121f4:	f7ee fa28 	bl	8000648 <__aeabi_dmul>
 80121f8:	4622      	mov	r2, r4
 80121fa:	4606      	mov	r6, r0
 80121fc:	460f      	mov	r7, r1
 80121fe:	462b      	mov	r3, r5
 8012200:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012204:	f7ee fa20 	bl	8000648 <__aeabi_dmul>
 8012208:	4602      	mov	r2, r0
 801220a:	460b      	mov	r3, r1
 801220c:	4630      	mov	r0, r6
 801220e:	4639      	mov	r1, r7
 8012210:	f7ee f864 	bl	80002dc <__adddf3>
 8012214:	4606      	mov	r6, r0
 8012216:	460f      	mov	r7, r1
 8012218:	4602      	mov	r2, r0
 801221a:	460b      	mov	r3, r1
 801221c:	4640      	mov	r0, r8
 801221e:	4649      	mov	r1, r9
 8012220:	f7ee f85c 	bl	80002dc <__adddf3>
 8012224:	9802      	ldr	r0, [sp, #8]
 8012226:	a33c      	add	r3, pc, #240	; (adr r3, 8012318 <__ieee754_pow+0x700>)
 8012228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222c:	4604      	mov	r4, r0
 801222e:	460d      	mov	r5, r1
 8012230:	f7ee fa0a 	bl	8000648 <__aeabi_dmul>
 8012234:	4642      	mov	r2, r8
 8012236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801223a:	464b      	mov	r3, r9
 801223c:	4620      	mov	r0, r4
 801223e:	4629      	mov	r1, r5
 8012240:	f7ee f84a 	bl	80002d8 <__aeabi_dsub>
 8012244:	4602      	mov	r2, r0
 8012246:	460b      	mov	r3, r1
 8012248:	4630      	mov	r0, r6
 801224a:	4639      	mov	r1, r7
 801224c:	f7ee f844 	bl	80002d8 <__aeabi_dsub>
 8012250:	a333      	add	r3, pc, #204	; (adr r3, 8012320 <__ieee754_pow+0x708>)
 8012252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012256:	f7ee f9f7 	bl	8000648 <__aeabi_dmul>
 801225a:	a333      	add	r3, pc, #204	; (adr r3, 8012328 <__ieee754_pow+0x710>)
 801225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012260:	4606      	mov	r6, r0
 8012262:	460f      	mov	r7, r1
 8012264:	4620      	mov	r0, r4
 8012266:	4629      	mov	r1, r5
 8012268:	f7ee f9ee 	bl	8000648 <__aeabi_dmul>
 801226c:	4602      	mov	r2, r0
 801226e:	460b      	mov	r3, r1
 8012270:	4630      	mov	r0, r6
 8012272:	4639      	mov	r1, r7
 8012274:	f7ee f832 	bl	80002dc <__adddf3>
 8012278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801227a:	4b35      	ldr	r3, [pc, #212]	; (8012350 <__ieee754_pow+0x738>)
 801227c:	4413      	add	r3, r2
 801227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012282:	f7ee f82b 	bl	80002dc <__adddf3>
 8012286:	4604      	mov	r4, r0
 8012288:	9809      	ldr	r0, [sp, #36]	; 0x24
 801228a:	460d      	mov	r5, r1
 801228c:	f7ee f972 	bl	8000574 <__aeabi_i2d>
 8012290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012292:	4b30      	ldr	r3, [pc, #192]	; (8012354 <__ieee754_pow+0x73c>)
 8012294:	4413      	add	r3, r2
 8012296:	e9d3 8900 	ldrd	r8, r9, [r3]
 801229a:	4606      	mov	r6, r0
 801229c:	460f      	mov	r7, r1
 801229e:	4622      	mov	r2, r4
 80122a0:	462b      	mov	r3, r5
 80122a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80122a6:	f7ee f819 	bl	80002dc <__adddf3>
 80122aa:	4642      	mov	r2, r8
 80122ac:	464b      	mov	r3, r9
 80122ae:	f7ee f815 	bl	80002dc <__adddf3>
 80122b2:	4632      	mov	r2, r6
 80122b4:	463b      	mov	r3, r7
 80122b6:	f7ee f811 	bl	80002dc <__adddf3>
 80122ba:	9802      	ldr	r0, [sp, #8]
 80122bc:	4632      	mov	r2, r6
 80122be:	463b      	mov	r3, r7
 80122c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122c4:	f7ee f808 	bl	80002d8 <__aeabi_dsub>
 80122c8:	4642      	mov	r2, r8
 80122ca:	464b      	mov	r3, r9
 80122cc:	f7ee f804 	bl	80002d8 <__aeabi_dsub>
 80122d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122d4:	e607      	b.n	8011ee6 <__ieee754_pow+0x2ce>
 80122d6:	f04f 0a01 	mov.w	sl, #1
 80122da:	e6a5      	b.n	8012028 <__ieee754_pow+0x410>
 80122dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012330 <__ieee754_pow+0x718>
 80122e0:	e613      	b.n	8011f0a <__ieee754_pow+0x2f2>
 80122e2:	bf00      	nop
 80122e4:	f3af 8000 	nop.w
 80122e8:	4a454eef 	.word	0x4a454eef
 80122ec:	3fca7e28 	.word	0x3fca7e28
 80122f0:	93c9db65 	.word	0x93c9db65
 80122f4:	3fcd864a 	.word	0x3fcd864a
 80122f8:	a91d4101 	.word	0xa91d4101
 80122fc:	3fd17460 	.word	0x3fd17460
 8012300:	518f264d 	.word	0x518f264d
 8012304:	3fd55555 	.word	0x3fd55555
 8012308:	db6fabff 	.word	0xdb6fabff
 801230c:	3fdb6db6 	.word	0x3fdb6db6
 8012310:	33333303 	.word	0x33333303
 8012314:	3fe33333 	.word	0x3fe33333
 8012318:	e0000000 	.word	0xe0000000
 801231c:	3feec709 	.word	0x3feec709
 8012320:	dc3a03fd 	.word	0xdc3a03fd
 8012324:	3feec709 	.word	0x3feec709
 8012328:	145b01f5 	.word	0x145b01f5
 801232c:	be3e2fe0 	.word	0xbe3e2fe0
 8012330:	00000000 	.word	0x00000000
 8012334:	3ff00000 	.word	0x3ff00000
 8012338:	43400000 	.word	0x43400000
 801233c:	0003988e 	.word	0x0003988e
 8012340:	000bb679 	.word	0x000bb679
 8012344:	080141a0 	.word	0x080141a0
 8012348:	3ff00000 	.word	0x3ff00000
 801234c:	40080000 	.word	0x40080000
 8012350:	080141c0 	.word	0x080141c0
 8012354:	080141b0 	.word	0x080141b0
 8012358:	a3b4      	add	r3, pc, #720	; (adr r3, 801262c <__ieee754_pow+0xa14>)
 801235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235e:	4640      	mov	r0, r8
 8012360:	4649      	mov	r1, r9
 8012362:	f7ed ffbb 	bl	80002dc <__adddf3>
 8012366:	4622      	mov	r2, r4
 8012368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801236c:	462b      	mov	r3, r5
 801236e:	4630      	mov	r0, r6
 8012370:	4639      	mov	r1, r7
 8012372:	f7ed ffb1 	bl	80002d8 <__aeabi_dsub>
 8012376:	4602      	mov	r2, r0
 8012378:	460b      	mov	r3, r1
 801237a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801237e:	f7ee fbf3 	bl	8000b68 <__aeabi_dcmpgt>
 8012382:	2800      	cmp	r0, #0
 8012384:	f47f adfe 	bne.w	8011f84 <__ieee754_pow+0x36c>
 8012388:	4aa3      	ldr	r2, [pc, #652]	; (8012618 <__ieee754_pow+0xa00>)
 801238a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801238e:	4293      	cmp	r3, r2
 8012390:	f340 810a 	ble.w	80125a8 <__ieee754_pow+0x990>
 8012394:	151b      	asrs	r3, r3, #20
 8012396:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801239a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801239e:	fa4a f303 	asr.w	r3, sl, r3
 80123a2:	445b      	add	r3, fp
 80123a4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80123a8:	4e9c      	ldr	r6, [pc, #624]	; (801261c <__ieee754_pow+0xa04>)
 80123aa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80123ae:	4116      	asrs	r6, r2
 80123b0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80123b4:	2000      	movs	r0, #0
 80123b6:	ea23 0106 	bic.w	r1, r3, r6
 80123ba:	f1c2 0214 	rsb	r2, r2, #20
 80123be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80123c2:	fa4a fa02 	asr.w	sl, sl, r2
 80123c6:	f1bb 0f00 	cmp.w	fp, #0
 80123ca:	4602      	mov	r2, r0
 80123cc:	460b      	mov	r3, r1
 80123ce:	4620      	mov	r0, r4
 80123d0:	4629      	mov	r1, r5
 80123d2:	bfb8      	it	lt
 80123d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80123d8:	f7ed ff7e 	bl	80002d8 <__aeabi_dsub>
 80123dc:	e9cd 0100 	strd	r0, r1, [sp]
 80123e0:	4642      	mov	r2, r8
 80123e2:	464b      	mov	r3, r9
 80123e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123e8:	f7ed ff78 	bl	80002dc <__adddf3>
 80123ec:	2000      	movs	r0, #0
 80123ee:	a378      	add	r3, pc, #480	; (adr r3, 80125d0 <__ieee754_pow+0x9b8>)
 80123f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f4:	4604      	mov	r4, r0
 80123f6:	460d      	mov	r5, r1
 80123f8:	f7ee f926 	bl	8000648 <__aeabi_dmul>
 80123fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012400:	4606      	mov	r6, r0
 8012402:	460f      	mov	r7, r1
 8012404:	4620      	mov	r0, r4
 8012406:	4629      	mov	r1, r5
 8012408:	f7ed ff66 	bl	80002d8 <__aeabi_dsub>
 801240c:	4602      	mov	r2, r0
 801240e:	460b      	mov	r3, r1
 8012410:	4640      	mov	r0, r8
 8012412:	4649      	mov	r1, r9
 8012414:	f7ed ff60 	bl	80002d8 <__aeabi_dsub>
 8012418:	a36f      	add	r3, pc, #444	; (adr r3, 80125d8 <__ieee754_pow+0x9c0>)
 801241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241e:	f7ee f913 	bl	8000648 <__aeabi_dmul>
 8012422:	a36f      	add	r3, pc, #444	; (adr r3, 80125e0 <__ieee754_pow+0x9c8>)
 8012424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012428:	4680      	mov	r8, r0
 801242a:	4689      	mov	r9, r1
 801242c:	4620      	mov	r0, r4
 801242e:	4629      	mov	r1, r5
 8012430:	f7ee f90a 	bl	8000648 <__aeabi_dmul>
 8012434:	4602      	mov	r2, r0
 8012436:	460b      	mov	r3, r1
 8012438:	4640      	mov	r0, r8
 801243a:	4649      	mov	r1, r9
 801243c:	f7ed ff4e 	bl	80002dc <__adddf3>
 8012440:	4604      	mov	r4, r0
 8012442:	460d      	mov	r5, r1
 8012444:	4602      	mov	r2, r0
 8012446:	460b      	mov	r3, r1
 8012448:	4630      	mov	r0, r6
 801244a:	4639      	mov	r1, r7
 801244c:	f7ed ff46 	bl	80002dc <__adddf3>
 8012450:	4632      	mov	r2, r6
 8012452:	463b      	mov	r3, r7
 8012454:	4680      	mov	r8, r0
 8012456:	4689      	mov	r9, r1
 8012458:	f7ed ff3e 	bl	80002d8 <__aeabi_dsub>
 801245c:	4602      	mov	r2, r0
 801245e:	460b      	mov	r3, r1
 8012460:	4620      	mov	r0, r4
 8012462:	4629      	mov	r1, r5
 8012464:	f7ed ff38 	bl	80002d8 <__aeabi_dsub>
 8012468:	4642      	mov	r2, r8
 801246a:	4606      	mov	r6, r0
 801246c:	460f      	mov	r7, r1
 801246e:	464b      	mov	r3, r9
 8012470:	4640      	mov	r0, r8
 8012472:	4649      	mov	r1, r9
 8012474:	f7ee f8e8 	bl	8000648 <__aeabi_dmul>
 8012478:	a35b      	add	r3, pc, #364	; (adr r3, 80125e8 <__ieee754_pow+0x9d0>)
 801247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801247e:	4604      	mov	r4, r0
 8012480:	460d      	mov	r5, r1
 8012482:	f7ee f8e1 	bl	8000648 <__aeabi_dmul>
 8012486:	a35a      	add	r3, pc, #360	; (adr r3, 80125f0 <__ieee754_pow+0x9d8>)
 8012488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801248c:	f7ed ff24 	bl	80002d8 <__aeabi_dsub>
 8012490:	4622      	mov	r2, r4
 8012492:	462b      	mov	r3, r5
 8012494:	f7ee f8d8 	bl	8000648 <__aeabi_dmul>
 8012498:	a357      	add	r3, pc, #348	; (adr r3, 80125f8 <__ieee754_pow+0x9e0>)
 801249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249e:	f7ed ff1d 	bl	80002dc <__adddf3>
 80124a2:	4622      	mov	r2, r4
 80124a4:	462b      	mov	r3, r5
 80124a6:	f7ee f8cf 	bl	8000648 <__aeabi_dmul>
 80124aa:	a355      	add	r3, pc, #340	; (adr r3, 8012600 <__ieee754_pow+0x9e8>)
 80124ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b0:	f7ed ff12 	bl	80002d8 <__aeabi_dsub>
 80124b4:	4622      	mov	r2, r4
 80124b6:	462b      	mov	r3, r5
 80124b8:	f7ee f8c6 	bl	8000648 <__aeabi_dmul>
 80124bc:	a352      	add	r3, pc, #328	; (adr r3, 8012608 <__ieee754_pow+0x9f0>)
 80124be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c2:	f7ed ff0b 	bl	80002dc <__adddf3>
 80124c6:	4622      	mov	r2, r4
 80124c8:	462b      	mov	r3, r5
 80124ca:	f7ee f8bd 	bl	8000648 <__aeabi_dmul>
 80124ce:	4602      	mov	r2, r0
 80124d0:	460b      	mov	r3, r1
 80124d2:	4640      	mov	r0, r8
 80124d4:	4649      	mov	r1, r9
 80124d6:	f7ed feff 	bl	80002d8 <__aeabi_dsub>
 80124da:	4604      	mov	r4, r0
 80124dc:	460d      	mov	r5, r1
 80124de:	4602      	mov	r2, r0
 80124e0:	460b      	mov	r3, r1
 80124e2:	4640      	mov	r0, r8
 80124e4:	4649      	mov	r1, r9
 80124e6:	f7ee f8af 	bl	8000648 <__aeabi_dmul>
 80124ea:	2200      	movs	r2, #0
 80124ec:	e9cd 0100 	strd	r0, r1, [sp]
 80124f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80124f4:	4620      	mov	r0, r4
 80124f6:	4629      	mov	r1, r5
 80124f8:	f7ed feee 	bl	80002d8 <__aeabi_dsub>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012504:	f7ee f9ca 	bl	800089c <__aeabi_ddiv>
 8012508:	4632      	mov	r2, r6
 801250a:	4604      	mov	r4, r0
 801250c:	460d      	mov	r5, r1
 801250e:	463b      	mov	r3, r7
 8012510:	4640      	mov	r0, r8
 8012512:	4649      	mov	r1, r9
 8012514:	f7ee f898 	bl	8000648 <__aeabi_dmul>
 8012518:	4632      	mov	r2, r6
 801251a:	463b      	mov	r3, r7
 801251c:	f7ed fede 	bl	80002dc <__adddf3>
 8012520:	4602      	mov	r2, r0
 8012522:	460b      	mov	r3, r1
 8012524:	4620      	mov	r0, r4
 8012526:	4629      	mov	r1, r5
 8012528:	f7ed fed6 	bl	80002d8 <__aeabi_dsub>
 801252c:	4642      	mov	r2, r8
 801252e:	464b      	mov	r3, r9
 8012530:	f7ed fed2 	bl	80002d8 <__aeabi_dsub>
 8012534:	4602      	mov	r2, r0
 8012536:	460b      	mov	r3, r1
 8012538:	2000      	movs	r0, #0
 801253a:	4939      	ldr	r1, [pc, #228]	; (8012620 <__ieee754_pow+0xa08>)
 801253c:	f7ed fecc 	bl	80002d8 <__aeabi_dsub>
 8012540:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8012544:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012548:	4602      	mov	r2, r0
 801254a:	460b      	mov	r3, r1
 801254c:	da2f      	bge.n	80125ae <__ieee754_pow+0x996>
 801254e:	4650      	mov	r0, sl
 8012550:	ec43 2b10 	vmov	d0, r2, r3
 8012554:	f000 f9c0 	bl	80128d8 <scalbn>
 8012558:	ec51 0b10 	vmov	r0, r1, d0
 801255c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012560:	f7ff bbf1 	b.w	8011d46 <__ieee754_pow+0x12e>
 8012564:	4b2f      	ldr	r3, [pc, #188]	; (8012624 <__ieee754_pow+0xa0c>)
 8012566:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801256a:	429e      	cmp	r6, r3
 801256c:	f77f af0c 	ble.w	8012388 <__ieee754_pow+0x770>
 8012570:	4b2d      	ldr	r3, [pc, #180]	; (8012628 <__ieee754_pow+0xa10>)
 8012572:	440b      	add	r3, r1
 8012574:	4303      	orrs	r3, r0
 8012576:	d00b      	beq.n	8012590 <__ieee754_pow+0x978>
 8012578:	a325      	add	r3, pc, #148	; (adr r3, 8012610 <__ieee754_pow+0x9f8>)
 801257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012582:	f7ee f861 	bl	8000648 <__aeabi_dmul>
 8012586:	a322      	add	r3, pc, #136	; (adr r3, 8012610 <__ieee754_pow+0x9f8>)
 8012588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258c:	f7ff bbdb 	b.w	8011d46 <__ieee754_pow+0x12e>
 8012590:	4622      	mov	r2, r4
 8012592:	462b      	mov	r3, r5
 8012594:	f7ed fea0 	bl	80002d8 <__aeabi_dsub>
 8012598:	4642      	mov	r2, r8
 801259a:	464b      	mov	r3, r9
 801259c:	f7ee fada 	bl	8000b54 <__aeabi_dcmpge>
 80125a0:	2800      	cmp	r0, #0
 80125a2:	f43f aef1 	beq.w	8012388 <__ieee754_pow+0x770>
 80125a6:	e7e7      	b.n	8012578 <__ieee754_pow+0x960>
 80125a8:	f04f 0a00 	mov.w	sl, #0
 80125ac:	e718      	b.n	80123e0 <__ieee754_pow+0x7c8>
 80125ae:	4621      	mov	r1, r4
 80125b0:	e7d4      	b.n	801255c <__ieee754_pow+0x944>
 80125b2:	2000      	movs	r0, #0
 80125b4:	491a      	ldr	r1, [pc, #104]	; (8012620 <__ieee754_pow+0xa08>)
 80125b6:	f7ff bb8f 	b.w	8011cd8 <__ieee754_pow+0xc0>
 80125ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125be:	f7ff bb8b 	b.w	8011cd8 <__ieee754_pow+0xc0>
 80125c2:	4630      	mov	r0, r6
 80125c4:	4639      	mov	r1, r7
 80125c6:	f7ff bb87 	b.w	8011cd8 <__ieee754_pow+0xc0>
 80125ca:	4693      	mov	fp, r2
 80125cc:	f7ff bb98 	b.w	8011d00 <__ieee754_pow+0xe8>
 80125d0:	00000000 	.word	0x00000000
 80125d4:	3fe62e43 	.word	0x3fe62e43
 80125d8:	fefa39ef 	.word	0xfefa39ef
 80125dc:	3fe62e42 	.word	0x3fe62e42
 80125e0:	0ca86c39 	.word	0x0ca86c39
 80125e4:	be205c61 	.word	0xbe205c61
 80125e8:	72bea4d0 	.word	0x72bea4d0
 80125ec:	3e663769 	.word	0x3e663769
 80125f0:	c5d26bf1 	.word	0xc5d26bf1
 80125f4:	3ebbbd41 	.word	0x3ebbbd41
 80125f8:	af25de2c 	.word	0xaf25de2c
 80125fc:	3f11566a 	.word	0x3f11566a
 8012600:	16bebd93 	.word	0x16bebd93
 8012604:	3f66c16c 	.word	0x3f66c16c
 8012608:	5555553e 	.word	0x5555553e
 801260c:	3fc55555 	.word	0x3fc55555
 8012610:	c2f8f359 	.word	0xc2f8f359
 8012614:	01a56e1f 	.word	0x01a56e1f
 8012618:	3fe00000 	.word	0x3fe00000
 801261c:	000fffff 	.word	0x000fffff
 8012620:	3ff00000 	.word	0x3ff00000
 8012624:	4090cbff 	.word	0x4090cbff
 8012628:	3f6f3400 	.word	0x3f6f3400
 801262c:	652b82fe 	.word	0x652b82fe
 8012630:	3c971547 	.word	0x3c971547

08012634 <__ieee754_sqrt>:
 8012634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012638:	4955      	ldr	r1, [pc, #340]	; (8012790 <__ieee754_sqrt+0x15c>)
 801263a:	ec55 4b10 	vmov	r4, r5, d0
 801263e:	43a9      	bics	r1, r5
 8012640:	462b      	mov	r3, r5
 8012642:	462a      	mov	r2, r5
 8012644:	d112      	bne.n	801266c <__ieee754_sqrt+0x38>
 8012646:	ee10 2a10 	vmov	r2, s0
 801264a:	ee10 0a10 	vmov	r0, s0
 801264e:	4629      	mov	r1, r5
 8012650:	f7ed fffa 	bl	8000648 <__aeabi_dmul>
 8012654:	4602      	mov	r2, r0
 8012656:	460b      	mov	r3, r1
 8012658:	4620      	mov	r0, r4
 801265a:	4629      	mov	r1, r5
 801265c:	f7ed fe3e 	bl	80002dc <__adddf3>
 8012660:	4604      	mov	r4, r0
 8012662:	460d      	mov	r5, r1
 8012664:	ec45 4b10 	vmov	d0, r4, r5
 8012668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801266c:	2d00      	cmp	r5, #0
 801266e:	ee10 0a10 	vmov	r0, s0
 8012672:	4621      	mov	r1, r4
 8012674:	dc0f      	bgt.n	8012696 <__ieee754_sqrt+0x62>
 8012676:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801267a:	4330      	orrs	r0, r6
 801267c:	d0f2      	beq.n	8012664 <__ieee754_sqrt+0x30>
 801267e:	b155      	cbz	r5, 8012696 <__ieee754_sqrt+0x62>
 8012680:	ee10 2a10 	vmov	r2, s0
 8012684:	4620      	mov	r0, r4
 8012686:	4629      	mov	r1, r5
 8012688:	f7ed fe26 	bl	80002d8 <__aeabi_dsub>
 801268c:	4602      	mov	r2, r0
 801268e:	460b      	mov	r3, r1
 8012690:	f7ee f904 	bl	800089c <__aeabi_ddiv>
 8012694:	e7e4      	b.n	8012660 <__ieee754_sqrt+0x2c>
 8012696:	151b      	asrs	r3, r3, #20
 8012698:	d073      	beq.n	8012782 <__ieee754_sqrt+0x14e>
 801269a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801269e:	07dd      	lsls	r5, r3, #31
 80126a0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80126a4:	bf48      	it	mi
 80126a6:	0fc8      	lsrmi	r0, r1, #31
 80126a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80126ac:	bf44      	itt	mi
 80126ae:	0049      	lslmi	r1, r1, #1
 80126b0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80126b4:	2500      	movs	r5, #0
 80126b6:	1058      	asrs	r0, r3, #1
 80126b8:	0fcb      	lsrs	r3, r1, #31
 80126ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80126be:	0049      	lsls	r1, r1, #1
 80126c0:	2316      	movs	r3, #22
 80126c2:	462c      	mov	r4, r5
 80126c4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80126c8:	19a7      	adds	r7, r4, r6
 80126ca:	4297      	cmp	r7, r2
 80126cc:	bfde      	ittt	le
 80126ce:	19bc      	addle	r4, r7, r6
 80126d0:	1bd2      	suble	r2, r2, r7
 80126d2:	19ad      	addle	r5, r5, r6
 80126d4:	0fcf      	lsrs	r7, r1, #31
 80126d6:	3b01      	subs	r3, #1
 80126d8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80126dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80126e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80126e4:	d1f0      	bne.n	80126c8 <__ieee754_sqrt+0x94>
 80126e6:	f04f 0c20 	mov.w	ip, #32
 80126ea:	469e      	mov	lr, r3
 80126ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80126f0:	42a2      	cmp	r2, r4
 80126f2:	eb06 070e 	add.w	r7, r6, lr
 80126f6:	dc02      	bgt.n	80126fe <__ieee754_sqrt+0xca>
 80126f8:	d112      	bne.n	8012720 <__ieee754_sqrt+0xec>
 80126fa:	428f      	cmp	r7, r1
 80126fc:	d810      	bhi.n	8012720 <__ieee754_sqrt+0xec>
 80126fe:	2f00      	cmp	r7, #0
 8012700:	eb07 0e06 	add.w	lr, r7, r6
 8012704:	da42      	bge.n	801278c <__ieee754_sqrt+0x158>
 8012706:	f1be 0f00 	cmp.w	lr, #0
 801270a:	db3f      	blt.n	801278c <__ieee754_sqrt+0x158>
 801270c:	f104 0801 	add.w	r8, r4, #1
 8012710:	1b12      	subs	r2, r2, r4
 8012712:	428f      	cmp	r7, r1
 8012714:	bf88      	it	hi
 8012716:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801271a:	1bc9      	subs	r1, r1, r7
 801271c:	4433      	add	r3, r6
 801271e:	4644      	mov	r4, r8
 8012720:	0052      	lsls	r2, r2, #1
 8012722:	f1bc 0c01 	subs.w	ip, ip, #1
 8012726:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801272a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801272e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012732:	d1dd      	bne.n	80126f0 <__ieee754_sqrt+0xbc>
 8012734:	430a      	orrs	r2, r1
 8012736:	d006      	beq.n	8012746 <__ieee754_sqrt+0x112>
 8012738:	1c5c      	adds	r4, r3, #1
 801273a:	bf13      	iteet	ne
 801273c:	3301      	addne	r3, #1
 801273e:	3501      	addeq	r5, #1
 8012740:	4663      	moveq	r3, ip
 8012742:	f023 0301 	bicne.w	r3, r3, #1
 8012746:	106a      	asrs	r2, r5, #1
 8012748:	085b      	lsrs	r3, r3, #1
 801274a:	07e9      	lsls	r1, r5, #31
 801274c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012750:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012754:	bf48      	it	mi
 8012756:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801275a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801275e:	461c      	mov	r4, r3
 8012760:	e780      	b.n	8012664 <__ieee754_sqrt+0x30>
 8012762:	0aca      	lsrs	r2, r1, #11
 8012764:	3815      	subs	r0, #21
 8012766:	0549      	lsls	r1, r1, #21
 8012768:	2a00      	cmp	r2, #0
 801276a:	d0fa      	beq.n	8012762 <__ieee754_sqrt+0x12e>
 801276c:	02d6      	lsls	r6, r2, #11
 801276e:	d50a      	bpl.n	8012786 <__ieee754_sqrt+0x152>
 8012770:	f1c3 0420 	rsb	r4, r3, #32
 8012774:	fa21 f404 	lsr.w	r4, r1, r4
 8012778:	1e5d      	subs	r5, r3, #1
 801277a:	4099      	lsls	r1, r3
 801277c:	4322      	orrs	r2, r4
 801277e:	1b43      	subs	r3, r0, r5
 8012780:	e78b      	b.n	801269a <__ieee754_sqrt+0x66>
 8012782:	4618      	mov	r0, r3
 8012784:	e7f0      	b.n	8012768 <__ieee754_sqrt+0x134>
 8012786:	0052      	lsls	r2, r2, #1
 8012788:	3301      	adds	r3, #1
 801278a:	e7ef      	b.n	801276c <__ieee754_sqrt+0x138>
 801278c:	46a0      	mov	r8, r4
 801278e:	e7bf      	b.n	8012710 <__ieee754_sqrt+0xdc>
 8012790:	7ff00000 	.word	0x7ff00000

08012794 <fabs>:
 8012794:	ec51 0b10 	vmov	r0, r1, d0
 8012798:	ee10 2a10 	vmov	r2, s0
 801279c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80127a0:	ec43 2b10 	vmov	d0, r2, r3
 80127a4:	4770      	bx	lr

080127a6 <finite>:
 80127a6:	ee10 3a90 	vmov	r3, s1
 80127aa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80127ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80127b2:	0fc0      	lsrs	r0, r0, #31
 80127b4:	4770      	bx	lr

080127b6 <matherr>:
 80127b6:	2000      	movs	r0, #0
 80127b8:	4770      	bx	lr
 80127ba:	0000      	movs	r0, r0
 80127bc:	0000      	movs	r0, r0
	...

080127c0 <nan>:
 80127c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80127c8 <nan+0x8>
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	00000000 	.word	0x00000000
 80127cc:	7ff80000 	.word	0x7ff80000

080127d0 <rint>:
 80127d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127d2:	ec51 0b10 	vmov	r0, r1, d0
 80127d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80127da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80127de:	2e13      	cmp	r6, #19
 80127e0:	460b      	mov	r3, r1
 80127e2:	ee10 4a10 	vmov	r4, s0
 80127e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80127ea:	dc56      	bgt.n	801289a <rint+0xca>
 80127ec:	2e00      	cmp	r6, #0
 80127ee:	da2b      	bge.n	8012848 <rint+0x78>
 80127f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80127f4:	4302      	orrs	r2, r0
 80127f6:	d023      	beq.n	8012840 <rint+0x70>
 80127f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80127fc:	4302      	orrs	r2, r0
 80127fe:	4254      	negs	r4, r2
 8012800:	4314      	orrs	r4, r2
 8012802:	0c4b      	lsrs	r3, r1, #17
 8012804:	0b24      	lsrs	r4, r4, #12
 8012806:	045b      	lsls	r3, r3, #17
 8012808:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801280c:	ea44 0103 	orr.w	r1, r4, r3
 8012810:	460b      	mov	r3, r1
 8012812:	492f      	ldr	r1, [pc, #188]	; (80128d0 <rint+0x100>)
 8012814:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012818:	e9d1 6700 	ldrd	r6, r7, [r1]
 801281c:	4602      	mov	r2, r0
 801281e:	4639      	mov	r1, r7
 8012820:	4630      	mov	r0, r6
 8012822:	f7ed fd5b 	bl	80002dc <__adddf3>
 8012826:	e9cd 0100 	strd	r0, r1, [sp]
 801282a:	463b      	mov	r3, r7
 801282c:	4632      	mov	r2, r6
 801282e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012832:	f7ed fd51 	bl	80002d8 <__aeabi_dsub>
 8012836:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801283a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801283e:	4639      	mov	r1, r7
 8012840:	ec41 0b10 	vmov	d0, r0, r1
 8012844:	b003      	add	sp, #12
 8012846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012848:	4a22      	ldr	r2, [pc, #136]	; (80128d4 <rint+0x104>)
 801284a:	4132      	asrs	r2, r6
 801284c:	ea01 0702 	and.w	r7, r1, r2
 8012850:	4307      	orrs	r7, r0
 8012852:	d0f5      	beq.n	8012840 <rint+0x70>
 8012854:	0852      	lsrs	r2, r2, #1
 8012856:	4011      	ands	r1, r2
 8012858:	430c      	orrs	r4, r1
 801285a:	d00b      	beq.n	8012874 <rint+0xa4>
 801285c:	ea23 0202 	bic.w	r2, r3, r2
 8012860:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012864:	2e13      	cmp	r6, #19
 8012866:	fa43 f306 	asr.w	r3, r3, r6
 801286a:	bf0c      	ite	eq
 801286c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012870:	2400      	movne	r4, #0
 8012872:	4313      	orrs	r3, r2
 8012874:	4916      	ldr	r1, [pc, #88]	; (80128d0 <rint+0x100>)
 8012876:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801287a:	4622      	mov	r2, r4
 801287c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012880:	4620      	mov	r0, r4
 8012882:	4629      	mov	r1, r5
 8012884:	f7ed fd2a 	bl	80002dc <__adddf3>
 8012888:	e9cd 0100 	strd	r0, r1, [sp]
 801288c:	4622      	mov	r2, r4
 801288e:	462b      	mov	r3, r5
 8012890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012894:	f7ed fd20 	bl	80002d8 <__aeabi_dsub>
 8012898:	e7d2      	b.n	8012840 <rint+0x70>
 801289a:	2e33      	cmp	r6, #51	; 0x33
 801289c:	dd07      	ble.n	80128ae <rint+0xde>
 801289e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80128a2:	d1cd      	bne.n	8012840 <rint+0x70>
 80128a4:	ee10 2a10 	vmov	r2, s0
 80128a8:	f7ed fd18 	bl	80002dc <__adddf3>
 80128ac:	e7c8      	b.n	8012840 <rint+0x70>
 80128ae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80128b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128b6:	40f2      	lsrs	r2, r6
 80128b8:	4210      	tst	r0, r2
 80128ba:	d0c1      	beq.n	8012840 <rint+0x70>
 80128bc:	0852      	lsrs	r2, r2, #1
 80128be:	4210      	tst	r0, r2
 80128c0:	bf1f      	itttt	ne
 80128c2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80128c6:	ea20 0202 	bicne.w	r2, r0, r2
 80128ca:	4134      	asrne	r4, r6
 80128cc:	4314      	orrne	r4, r2
 80128ce:	e7d1      	b.n	8012874 <rint+0xa4>
 80128d0:	080141d0 	.word	0x080141d0
 80128d4:	000fffff 	.word	0x000fffff

080128d8 <scalbn>:
 80128d8:	b570      	push	{r4, r5, r6, lr}
 80128da:	ec55 4b10 	vmov	r4, r5, d0
 80128de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80128e2:	4606      	mov	r6, r0
 80128e4:	462b      	mov	r3, r5
 80128e6:	b9aa      	cbnz	r2, 8012914 <scalbn+0x3c>
 80128e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80128ec:	4323      	orrs	r3, r4
 80128ee:	d03b      	beq.n	8012968 <scalbn+0x90>
 80128f0:	4b31      	ldr	r3, [pc, #196]	; (80129b8 <scalbn+0xe0>)
 80128f2:	4629      	mov	r1, r5
 80128f4:	2200      	movs	r2, #0
 80128f6:	ee10 0a10 	vmov	r0, s0
 80128fa:	f7ed fea5 	bl	8000648 <__aeabi_dmul>
 80128fe:	4b2f      	ldr	r3, [pc, #188]	; (80129bc <scalbn+0xe4>)
 8012900:	429e      	cmp	r6, r3
 8012902:	4604      	mov	r4, r0
 8012904:	460d      	mov	r5, r1
 8012906:	da12      	bge.n	801292e <scalbn+0x56>
 8012908:	a327      	add	r3, pc, #156	; (adr r3, 80129a8 <scalbn+0xd0>)
 801290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290e:	f7ed fe9b 	bl	8000648 <__aeabi_dmul>
 8012912:	e009      	b.n	8012928 <scalbn+0x50>
 8012914:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012918:	428a      	cmp	r2, r1
 801291a:	d10c      	bne.n	8012936 <scalbn+0x5e>
 801291c:	ee10 2a10 	vmov	r2, s0
 8012920:	4620      	mov	r0, r4
 8012922:	4629      	mov	r1, r5
 8012924:	f7ed fcda 	bl	80002dc <__adddf3>
 8012928:	4604      	mov	r4, r0
 801292a:	460d      	mov	r5, r1
 801292c:	e01c      	b.n	8012968 <scalbn+0x90>
 801292e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012932:	460b      	mov	r3, r1
 8012934:	3a36      	subs	r2, #54	; 0x36
 8012936:	4432      	add	r2, r6
 8012938:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801293c:	428a      	cmp	r2, r1
 801293e:	dd0b      	ble.n	8012958 <scalbn+0x80>
 8012940:	ec45 4b11 	vmov	d1, r4, r5
 8012944:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80129b0 <scalbn+0xd8>
 8012948:	f000 f9f0 	bl	8012d2c <copysign>
 801294c:	a318      	add	r3, pc, #96	; (adr r3, 80129b0 <scalbn+0xd8>)
 801294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012952:	ec51 0b10 	vmov	r0, r1, d0
 8012956:	e7da      	b.n	801290e <scalbn+0x36>
 8012958:	2a00      	cmp	r2, #0
 801295a:	dd08      	ble.n	801296e <scalbn+0x96>
 801295c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012960:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012964:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012968:	ec45 4b10 	vmov	d0, r4, r5
 801296c:	bd70      	pop	{r4, r5, r6, pc}
 801296e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012972:	da0d      	bge.n	8012990 <scalbn+0xb8>
 8012974:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012978:	429e      	cmp	r6, r3
 801297a:	ec45 4b11 	vmov	d1, r4, r5
 801297e:	dce1      	bgt.n	8012944 <scalbn+0x6c>
 8012980:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80129a8 <scalbn+0xd0>
 8012984:	f000 f9d2 	bl	8012d2c <copysign>
 8012988:	a307      	add	r3, pc, #28	; (adr r3, 80129a8 <scalbn+0xd0>)
 801298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298e:	e7e0      	b.n	8012952 <scalbn+0x7a>
 8012990:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012994:	3236      	adds	r2, #54	; 0x36
 8012996:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801299a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801299e:	4620      	mov	r0, r4
 80129a0:	4629      	mov	r1, r5
 80129a2:	2200      	movs	r2, #0
 80129a4:	4b06      	ldr	r3, [pc, #24]	; (80129c0 <scalbn+0xe8>)
 80129a6:	e7b2      	b.n	801290e <scalbn+0x36>
 80129a8:	c2f8f359 	.word	0xc2f8f359
 80129ac:	01a56e1f 	.word	0x01a56e1f
 80129b0:	8800759c 	.word	0x8800759c
 80129b4:	7e37e43c 	.word	0x7e37e43c
 80129b8:	43500000 	.word	0x43500000
 80129bc:	ffff3cb0 	.word	0xffff3cb0
 80129c0:	3c900000 	.word	0x3c900000
 80129c4:	00000000 	.word	0x00000000

080129c8 <__ieee754_log>:
 80129c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129cc:	ec51 0b10 	vmov	r0, r1, d0
 80129d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80129d4:	b087      	sub	sp, #28
 80129d6:	460d      	mov	r5, r1
 80129d8:	da27      	bge.n	8012a2a <__ieee754_log+0x62>
 80129da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80129de:	4303      	orrs	r3, r0
 80129e0:	ee10 2a10 	vmov	r2, s0
 80129e4:	d10a      	bne.n	80129fc <__ieee754_log+0x34>
 80129e6:	49cc      	ldr	r1, [pc, #816]	; (8012d18 <__ieee754_log+0x350>)
 80129e8:	2200      	movs	r2, #0
 80129ea:	2300      	movs	r3, #0
 80129ec:	2000      	movs	r0, #0
 80129ee:	f7ed ff55 	bl	800089c <__aeabi_ddiv>
 80129f2:	ec41 0b10 	vmov	d0, r0, r1
 80129f6:	b007      	add	sp, #28
 80129f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129fc:	2900      	cmp	r1, #0
 80129fe:	da05      	bge.n	8012a0c <__ieee754_log+0x44>
 8012a00:	460b      	mov	r3, r1
 8012a02:	f7ed fc69 	bl	80002d8 <__aeabi_dsub>
 8012a06:	2200      	movs	r2, #0
 8012a08:	2300      	movs	r3, #0
 8012a0a:	e7f0      	b.n	80129ee <__ieee754_log+0x26>
 8012a0c:	4bc3      	ldr	r3, [pc, #780]	; (8012d1c <__ieee754_log+0x354>)
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f7ed fe1a 	bl	8000648 <__aeabi_dmul>
 8012a14:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012a18:	460d      	mov	r5, r1
 8012a1a:	4ac1      	ldr	r2, [pc, #772]	; (8012d20 <__ieee754_log+0x358>)
 8012a1c:	4295      	cmp	r5, r2
 8012a1e:	dd06      	ble.n	8012a2e <__ieee754_log+0x66>
 8012a20:	4602      	mov	r2, r0
 8012a22:	460b      	mov	r3, r1
 8012a24:	f7ed fc5a 	bl	80002dc <__adddf3>
 8012a28:	e7e3      	b.n	80129f2 <__ieee754_log+0x2a>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	e7f5      	b.n	8012a1a <__ieee754_log+0x52>
 8012a2e:	152c      	asrs	r4, r5, #20
 8012a30:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012a34:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012a38:	441c      	add	r4, r3
 8012a3a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012a3e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012a46:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012a4a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012a4e:	ea42 0105 	orr.w	r1, r2, r5
 8012a52:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012a56:	2200      	movs	r2, #0
 8012a58:	4bb2      	ldr	r3, [pc, #712]	; (8012d24 <__ieee754_log+0x35c>)
 8012a5a:	f7ed fc3d 	bl	80002d8 <__aeabi_dsub>
 8012a5e:	1cab      	adds	r3, r5, #2
 8012a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a64:	2b02      	cmp	r3, #2
 8012a66:	4682      	mov	sl, r0
 8012a68:	468b      	mov	fp, r1
 8012a6a:	f04f 0200 	mov.w	r2, #0
 8012a6e:	dc53      	bgt.n	8012b18 <__ieee754_log+0x150>
 8012a70:	2300      	movs	r3, #0
 8012a72:	f7ee f851 	bl	8000b18 <__aeabi_dcmpeq>
 8012a76:	b1d0      	cbz	r0, 8012aae <__ieee754_log+0xe6>
 8012a78:	2c00      	cmp	r4, #0
 8012a7a:	f000 8120 	beq.w	8012cbe <__ieee754_log+0x2f6>
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f7ed fd78 	bl	8000574 <__aeabi_i2d>
 8012a84:	a390      	add	r3, pc, #576	; (adr r3, 8012cc8 <__ieee754_log+0x300>)
 8012a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8a:	4606      	mov	r6, r0
 8012a8c:	460f      	mov	r7, r1
 8012a8e:	f7ed fddb 	bl	8000648 <__aeabi_dmul>
 8012a92:	a38f      	add	r3, pc, #572	; (adr r3, 8012cd0 <__ieee754_log+0x308>)
 8012a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a98:	4604      	mov	r4, r0
 8012a9a:	460d      	mov	r5, r1
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	4639      	mov	r1, r7
 8012aa0:	f7ed fdd2 	bl	8000648 <__aeabi_dmul>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	4629      	mov	r1, r5
 8012aac:	e7ba      	b.n	8012a24 <__ieee754_log+0x5c>
 8012aae:	a38a      	add	r3, pc, #552	; (adr r3, 8012cd8 <__ieee754_log+0x310>)
 8012ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab4:	4650      	mov	r0, sl
 8012ab6:	4659      	mov	r1, fp
 8012ab8:	f7ed fdc6 	bl	8000648 <__aeabi_dmul>
 8012abc:	4602      	mov	r2, r0
 8012abe:	460b      	mov	r3, r1
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	4999      	ldr	r1, [pc, #612]	; (8012d28 <__ieee754_log+0x360>)
 8012ac4:	f7ed fc08 	bl	80002d8 <__aeabi_dsub>
 8012ac8:	4652      	mov	r2, sl
 8012aca:	4606      	mov	r6, r0
 8012acc:	460f      	mov	r7, r1
 8012ace:	465b      	mov	r3, fp
 8012ad0:	4650      	mov	r0, sl
 8012ad2:	4659      	mov	r1, fp
 8012ad4:	f7ed fdb8 	bl	8000648 <__aeabi_dmul>
 8012ad8:	4602      	mov	r2, r0
 8012ada:	460b      	mov	r3, r1
 8012adc:	4630      	mov	r0, r6
 8012ade:	4639      	mov	r1, r7
 8012ae0:	f7ed fdb2 	bl	8000648 <__aeabi_dmul>
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	460f      	mov	r7, r1
 8012ae8:	b914      	cbnz	r4, 8012af0 <__ieee754_log+0x128>
 8012aea:	4632      	mov	r2, r6
 8012aec:	463b      	mov	r3, r7
 8012aee:	e0a0      	b.n	8012c32 <__ieee754_log+0x26a>
 8012af0:	4620      	mov	r0, r4
 8012af2:	f7ed fd3f 	bl	8000574 <__aeabi_i2d>
 8012af6:	a374      	add	r3, pc, #464	; (adr r3, 8012cc8 <__ieee754_log+0x300>)
 8012af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afc:	4680      	mov	r8, r0
 8012afe:	4689      	mov	r9, r1
 8012b00:	f7ed fda2 	bl	8000648 <__aeabi_dmul>
 8012b04:	a372      	add	r3, pc, #456	; (adr r3, 8012cd0 <__ieee754_log+0x308>)
 8012b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0a:	4604      	mov	r4, r0
 8012b0c:	460d      	mov	r5, r1
 8012b0e:	4640      	mov	r0, r8
 8012b10:	4649      	mov	r1, r9
 8012b12:	f7ed fd99 	bl	8000648 <__aeabi_dmul>
 8012b16:	e0a5      	b.n	8012c64 <__ieee754_log+0x29c>
 8012b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012b1c:	f7ed fbde 	bl	80002dc <__adddf3>
 8012b20:	4602      	mov	r2, r0
 8012b22:	460b      	mov	r3, r1
 8012b24:	4650      	mov	r0, sl
 8012b26:	4659      	mov	r1, fp
 8012b28:	f7ed feb8 	bl	800089c <__aeabi_ddiv>
 8012b2c:	e9cd 0100 	strd	r0, r1, [sp]
 8012b30:	4620      	mov	r0, r4
 8012b32:	f7ed fd1f 	bl	8000574 <__aeabi_i2d>
 8012b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b3e:	4610      	mov	r0, r2
 8012b40:	4619      	mov	r1, r3
 8012b42:	f7ed fd81 	bl	8000648 <__aeabi_dmul>
 8012b46:	4602      	mov	r2, r0
 8012b48:	460b      	mov	r3, r1
 8012b4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b4e:	f7ed fd7b 	bl	8000648 <__aeabi_dmul>
 8012b52:	a363      	add	r3, pc, #396	; (adr r3, 8012ce0 <__ieee754_log+0x318>)
 8012b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b58:	4680      	mov	r8, r0
 8012b5a:	4689      	mov	r9, r1
 8012b5c:	f7ed fd74 	bl	8000648 <__aeabi_dmul>
 8012b60:	a361      	add	r3, pc, #388	; (adr r3, 8012ce8 <__ieee754_log+0x320>)
 8012b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b66:	f7ed fbb9 	bl	80002dc <__adddf3>
 8012b6a:	4642      	mov	r2, r8
 8012b6c:	464b      	mov	r3, r9
 8012b6e:	f7ed fd6b 	bl	8000648 <__aeabi_dmul>
 8012b72:	a35f      	add	r3, pc, #380	; (adr r3, 8012cf0 <__ieee754_log+0x328>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	f7ed fbb0 	bl	80002dc <__adddf3>
 8012b7c:	4642      	mov	r2, r8
 8012b7e:	464b      	mov	r3, r9
 8012b80:	f7ed fd62 	bl	8000648 <__aeabi_dmul>
 8012b84:	a35c      	add	r3, pc, #368	; (adr r3, 8012cf8 <__ieee754_log+0x330>)
 8012b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b8a:	f7ed fba7 	bl	80002dc <__adddf3>
 8012b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b92:	f7ed fd59 	bl	8000648 <__aeabi_dmul>
 8012b96:	a35a      	add	r3, pc, #360	; (adr r3, 8012d00 <__ieee754_log+0x338>)
 8012b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ba0:	4640      	mov	r0, r8
 8012ba2:	4649      	mov	r1, r9
 8012ba4:	f7ed fd50 	bl	8000648 <__aeabi_dmul>
 8012ba8:	a357      	add	r3, pc, #348	; (adr r3, 8012d08 <__ieee754_log+0x340>)
 8012baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bae:	f7ed fb95 	bl	80002dc <__adddf3>
 8012bb2:	4642      	mov	r2, r8
 8012bb4:	464b      	mov	r3, r9
 8012bb6:	f7ed fd47 	bl	8000648 <__aeabi_dmul>
 8012bba:	a355      	add	r3, pc, #340	; (adr r3, 8012d10 <__ieee754_log+0x348>)
 8012bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc0:	f7ed fb8c 	bl	80002dc <__adddf3>
 8012bc4:	4642      	mov	r2, r8
 8012bc6:	464b      	mov	r3, r9
 8012bc8:	f7ed fd3e 	bl	8000648 <__aeabi_dmul>
 8012bcc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8012bd0:	4602      	mov	r2, r0
 8012bd2:	460b      	mov	r3, r1
 8012bd4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8012bd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bdc:	f7ed fb7e 	bl	80002dc <__adddf3>
 8012be0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8012be4:	3551      	adds	r5, #81	; 0x51
 8012be6:	4335      	orrs	r5, r6
 8012be8:	2d00      	cmp	r5, #0
 8012bea:	4680      	mov	r8, r0
 8012bec:	4689      	mov	r9, r1
 8012bee:	dd48      	ble.n	8012c82 <__ieee754_log+0x2ba>
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	4b4d      	ldr	r3, [pc, #308]	; (8012d28 <__ieee754_log+0x360>)
 8012bf4:	4650      	mov	r0, sl
 8012bf6:	4659      	mov	r1, fp
 8012bf8:	f7ed fd26 	bl	8000648 <__aeabi_dmul>
 8012bfc:	4652      	mov	r2, sl
 8012bfe:	465b      	mov	r3, fp
 8012c00:	f7ed fd22 	bl	8000648 <__aeabi_dmul>
 8012c04:	4602      	mov	r2, r0
 8012c06:	460b      	mov	r3, r1
 8012c08:	4606      	mov	r6, r0
 8012c0a:	460f      	mov	r7, r1
 8012c0c:	4640      	mov	r0, r8
 8012c0e:	4649      	mov	r1, r9
 8012c10:	f7ed fb64 	bl	80002dc <__adddf3>
 8012c14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c18:	f7ed fd16 	bl	8000648 <__aeabi_dmul>
 8012c1c:	4680      	mov	r8, r0
 8012c1e:	4689      	mov	r9, r1
 8012c20:	b964      	cbnz	r4, 8012c3c <__ieee754_log+0x274>
 8012c22:	4602      	mov	r2, r0
 8012c24:	460b      	mov	r3, r1
 8012c26:	4630      	mov	r0, r6
 8012c28:	4639      	mov	r1, r7
 8012c2a:	f7ed fb55 	bl	80002d8 <__aeabi_dsub>
 8012c2e:	4602      	mov	r2, r0
 8012c30:	460b      	mov	r3, r1
 8012c32:	4650      	mov	r0, sl
 8012c34:	4659      	mov	r1, fp
 8012c36:	f7ed fb4f 	bl	80002d8 <__aeabi_dsub>
 8012c3a:	e6da      	b.n	80129f2 <__ieee754_log+0x2a>
 8012c3c:	a322      	add	r3, pc, #136	; (adr r3, 8012cc8 <__ieee754_log+0x300>)
 8012c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c46:	f7ed fcff 	bl	8000648 <__aeabi_dmul>
 8012c4a:	a321      	add	r3, pc, #132	; (adr r3, 8012cd0 <__ieee754_log+0x308>)
 8012c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c50:	4604      	mov	r4, r0
 8012c52:	460d      	mov	r5, r1
 8012c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c58:	f7ed fcf6 	bl	8000648 <__aeabi_dmul>
 8012c5c:	4642      	mov	r2, r8
 8012c5e:	464b      	mov	r3, r9
 8012c60:	f7ed fb3c 	bl	80002dc <__adddf3>
 8012c64:	4602      	mov	r2, r0
 8012c66:	460b      	mov	r3, r1
 8012c68:	4630      	mov	r0, r6
 8012c6a:	4639      	mov	r1, r7
 8012c6c:	f7ed fb34 	bl	80002d8 <__aeabi_dsub>
 8012c70:	4652      	mov	r2, sl
 8012c72:	465b      	mov	r3, fp
 8012c74:	f7ed fb30 	bl	80002d8 <__aeabi_dsub>
 8012c78:	4602      	mov	r2, r0
 8012c7a:	460b      	mov	r3, r1
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	4629      	mov	r1, r5
 8012c80:	e7d9      	b.n	8012c36 <__ieee754_log+0x26e>
 8012c82:	4602      	mov	r2, r0
 8012c84:	460b      	mov	r3, r1
 8012c86:	4650      	mov	r0, sl
 8012c88:	4659      	mov	r1, fp
 8012c8a:	f7ed fb25 	bl	80002d8 <__aeabi_dsub>
 8012c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c92:	f7ed fcd9 	bl	8000648 <__aeabi_dmul>
 8012c96:	4606      	mov	r6, r0
 8012c98:	460f      	mov	r7, r1
 8012c9a:	2c00      	cmp	r4, #0
 8012c9c:	f43f af25 	beq.w	8012aea <__ieee754_log+0x122>
 8012ca0:	a309      	add	r3, pc, #36	; (adr r3, 8012cc8 <__ieee754_log+0x300>)
 8012ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012caa:	f7ed fccd 	bl	8000648 <__aeabi_dmul>
 8012cae:	a308      	add	r3, pc, #32	; (adr r3, 8012cd0 <__ieee754_log+0x308>)
 8012cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb4:	4604      	mov	r4, r0
 8012cb6:	460d      	mov	r5, r1
 8012cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cbc:	e729      	b.n	8012b12 <__ieee754_log+0x14a>
 8012cbe:	2000      	movs	r0, #0
 8012cc0:	2100      	movs	r1, #0
 8012cc2:	e696      	b.n	80129f2 <__ieee754_log+0x2a>
 8012cc4:	f3af 8000 	nop.w
 8012cc8:	fee00000 	.word	0xfee00000
 8012ccc:	3fe62e42 	.word	0x3fe62e42
 8012cd0:	35793c76 	.word	0x35793c76
 8012cd4:	3dea39ef 	.word	0x3dea39ef
 8012cd8:	55555555 	.word	0x55555555
 8012cdc:	3fd55555 	.word	0x3fd55555
 8012ce0:	df3e5244 	.word	0xdf3e5244
 8012ce4:	3fc2f112 	.word	0x3fc2f112
 8012ce8:	96cb03de 	.word	0x96cb03de
 8012cec:	3fc74664 	.word	0x3fc74664
 8012cf0:	94229359 	.word	0x94229359
 8012cf4:	3fd24924 	.word	0x3fd24924
 8012cf8:	55555593 	.word	0x55555593
 8012cfc:	3fe55555 	.word	0x3fe55555
 8012d00:	d078c69f 	.word	0xd078c69f
 8012d04:	3fc39a09 	.word	0x3fc39a09
 8012d08:	1d8e78af 	.word	0x1d8e78af
 8012d0c:	3fcc71c5 	.word	0x3fcc71c5
 8012d10:	9997fa04 	.word	0x9997fa04
 8012d14:	3fd99999 	.word	0x3fd99999
 8012d18:	c3500000 	.word	0xc3500000
 8012d1c:	43500000 	.word	0x43500000
 8012d20:	7fefffff 	.word	0x7fefffff
 8012d24:	3ff00000 	.word	0x3ff00000
 8012d28:	3fe00000 	.word	0x3fe00000

08012d2c <copysign>:
 8012d2c:	ec51 0b10 	vmov	r0, r1, d0
 8012d30:	ee11 0a90 	vmov	r0, s3
 8012d34:	ee10 2a10 	vmov	r2, s0
 8012d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012d3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012d40:	ea41 0300 	orr.w	r3, r1, r0
 8012d44:	ec43 2b10 	vmov	d0, r2, r3
 8012d48:	4770      	bx	lr
	...

08012d4c <_init>:
 8012d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d4e:	bf00      	nop
 8012d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d52:	bc08      	pop	{r3}
 8012d54:	469e      	mov	lr, r3
 8012d56:	4770      	bx	lr

08012d58 <_fini>:
 8012d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d5a:	bf00      	nop
 8012d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d5e:	bc08      	pop	{r3}
 8012d60:	469e      	mov	lr, r3
 8012d62:	4770      	bx	lr
