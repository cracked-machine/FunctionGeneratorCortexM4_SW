
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f5c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001920  08012140  08012140  00022140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a60  08013a60  00031ed0  2**0
                  CONTENTS
  4 .ARM          00000000  08013a60  08013a60  00031ed0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013a60  08013a60  00031ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a60  08013a60  00023a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a64  08013a64  00023a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ed0  20000000  08013a68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  20001ed0  08015938  00031ed0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000296c  08015938  0003296c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ed0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004004b  00000000  00000000  00031f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007301  00000000  00000000  00071f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002160  00000000  00000000  00079250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d78  00000000  00000000  0007b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003406b  00000000  00000000  0007d128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002bfe1  00000000  00000000  000b1193  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125e00  00000000  00000000  000dd174  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00202f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009378  00000000  00000000  00202ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001ed0 	.word	0x20001ed0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012124 	.word	0x08012124

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001ed4 	.word	0x20001ed4
 800021c:	08012124 	.word	0x08012124

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d000      	beq.n	8000c4a <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000c48:	e002      	b.n	8000c50 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000c4a:	f000 f805 	bl	8000c58 <BiasMenu_DrawMainMenu>
			break;
 8000c4e:	bf00      	nop

	}
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, WHITE, 2, BLACK);
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	2302      	movs	r3, #2
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6a:	220a      	movs	r2, #10
 8000c6c:	210a      	movs	r1, #10
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <BiasMenu_DrawMainMenu+0x28>)
 8000c70:	f00c ff64 	bl	800db3c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000c74:	f000 f936 	bl	8000ee4 <DM_DisplayFormattedOutput>

}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	08012140 	.word	0x08012140

08000c84 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c88:	f00c ffaa 	bl	800dbe0 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f00d fb97 	bl	800e3c0 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c96:	f00d f9ab 	bl	800dff0 <ILI9341_Fill_Screen>

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	2301      	movs	r3, #1
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	220a      	movs	r2, #10
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <DM_PostInit+0x34>)
 8000cb8:	f00c ff40 	bl	800db3c <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f007 fd94 	bl	80087ec <HAL_Delay>

	  DM_RefreshScreen();
 8000cc4:	f000 fa80 	bl	80011c8 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <DM_PostInit+0x38>)
 8000cca:	f00e fa7b 	bl	800f1c4 <puts>
#endif


}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	0801214c 	.word	0x0801214c
 8000cd8:	0801215c 	.word	0x0801215c

08000cdc <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	; 0x70
 8000ce0:	af02      	add	r7, sp, #8

	if(ToplevelMenu_getStatus())
 8000ce2:	f003 fd8f 	bl	8004804 <ToplevelMenu_getStatus>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d018      	beq.n	8000d1e <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000cec:	4872      	ldr	r0, [pc, #456]	; (8000eb8 <DM_UpdateDisplay+0x1dc>)
 8000cee:	f00e fa69 	bl	800f1c4 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000cf2:	f003 fd87 	bl	8004804 <ToplevelMenu_getStatus>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d008      	beq.n	8000d0e <DM_UpdateDisplay+0x32>
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d00a      	beq.n	8000d16 <DM_UpdateDisplay+0x3a>
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d000      	beq.n	8000d06 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000d04:	e089      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f002 fcbe 	bl	8003688 <ToplevelMenu_DrawMenu>
				break;
 8000d0c:	e085      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f002 fcba 	bl	8003688 <ToplevelMenu_DrawMenu>
				break;
 8000d14:	e081      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f002 fcb6 	bl	8003688 <ToplevelMenu_DrawMenu>
				break;
 8000d1c:	e07d      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
		}
	}

	// Function menus
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000d1e:	f003 fb71 	bl	8004404 <FuncMenu_getStatus>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d018      	beq.n	8000d5a <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d28:	4863      	ldr	r0, [pc, #396]	; (8000eb8 <DM_UpdateDisplay+0x1dc>)
 8000d2a:	f00e fa4b 	bl	800f1c4 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000d2e:	f003 fb69 	bl	8004404 <FuncMenu_getStatus>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d008      	beq.n	8000d4a <DM_UpdateDisplay+0x6e>
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d00a      	beq.n	8000d52 <DM_UpdateDisplay+0x76>
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d000      	beq.n	8000d42 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000d40:	e06b      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f001 fff0 	bl	8002d28 <FuncMenu_DrawMenu>
				break;
 8000d48:	e067      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f001 ffec 	bl	8002d28 <FuncMenu_DrawMenu>
				break;
 8000d50:	e063      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000d52:	2003      	movs	r0, #3
 8000d54:	f001 ffe8 	bl	8002d28 <FuncMenu_DrawMenu>
				break;
 8000d58:	e05f      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
		}

	}
	// Gain menus
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000d5a:	f003 fc55 	bl	8004608 <GainMenu_getStatus>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d018      	beq.n	8000d96 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000d64:	4855      	ldr	r0, [pc, #340]	; (8000ebc <DM_UpdateDisplay+0x1e0>)
 8000d66:	f00e fa2d 	bl	800f1c4 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000d6a:	f003 fc4d 	bl	8004608 <GainMenu_getStatus>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d008      	beq.n	8000d86 <DM_UpdateDisplay+0xaa>
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d00a      	beq.n	8000d8e <DM_UpdateDisplay+0xb2>
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d000      	beq.n	8000d7e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000d7c:	e04d      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f002 fbf4 	bl	800356c <GainMenu_DrawMenu>
				break;
 8000d84:	e049      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000d86:	2002      	movs	r0, #2
 8000d88:	f002 fbf0 	bl	800356c <GainMenu_DrawMenu>
				break;
 8000d8c:	e045      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f002 fbec 	bl	800356c <GainMenu_DrawMenu>
				break;
 8000d94:	e041      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
		}

	}

	// Frequency menus
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000d96:	f003 fb29 	bl	80043ec <FreqMenu_getStatus>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d023      	beq.n	8000de8 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000da0:	4847      	ldr	r0, [pc, #284]	; (8000ec0 <DM_UpdateDisplay+0x1e4>)
 8000da2:	f00e fa0f 	bl	800f1c4 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000da6:	f003 fb21 	bl	80043ec <FreqMenu_getStatus>
 8000daa:	4603      	mov	r3, r0
 8000dac:	3b01      	subs	r3, #1
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d832      	bhi.n	8000e18 <DM_UpdateDisplay+0x13c>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <DM_UpdateDisplay+0xdc>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000dc9 	.word	0x08000dc9
 8000dbc:	08000dd1 	.word	0x08000dd1
 8000dc0:	08000dd9 	.word	0x08000dd9
 8000dc4:	08000de1 	.word	0x08000de1
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f000 fa59 	bl	8001280 <FreqMenu_DrawMenu>

				break;
 8000dce:	e024      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f000 fa55 	bl	8001280 <FreqMenu_DrawMenu>
				break;
 8000dd6:	e020      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 fa51 	bl	8001280 <FreqMenu_DrawMenu>

				break;
 8000dde:	e01c      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000de0:	2004      	movs	r0, #4
 8000de2:	f000 fa4d 	bl	8001280 <FreqMenu_DrawMenu>
				break;
 8000de6:	e018      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
		}

	}

	// Bias menu
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000de8:	f002 fd08 	bl	80037fc <BiasMenu_getStatus>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000df2:	4834      	ldr	r0, [pc, #208]	; (8000ec4 <DM_UpdateDisplay+0x1e8>)
 8000df4:	f00e f9e6 	bl	800f1c4 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff ff1d 	bl	8000c38 <BiasMenu_DrawMenu>
 8000dfe:	e00c      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
	}
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, BLACK, 1, RED);
 8000e00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2232      	movs	r2, #50	; 0x32
 8000e0e:	210a      	movs	r1, #10
 8000e10:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <DM_UpdateDisplay+0x1ec>)
 8000e12:	f00c fe93 	bl	800db3c <ILI9341_Draw_Text>
 8000e16:	e000      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				break;
 8000e18:	bf00      	nop
	}

	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e22:	222e      	movs	r2, #46	; 0x2e
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00d fd0c 	bl	800e844 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OUTPUT_TIMER->ARR: %5lu", OUTPUT_TIMER->ARR);
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <DM_UpdateDisplay+0x1f0>)
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000e34:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <DM_UpdateDisplay+0x1f4>)
 8000e36:	2132      	movs	r1, #50	; 0x32
 8000e38:	f00e f9cc 	bl	800f1d4 <sniprintf>
		//if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
			ILI9341_Draw_Text(tim5_text, 10, 180, BLACK, 1, RED);
 8000e3c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000e40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2301      	movs	r3, #1
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	22b4      	movs	r2, #180	; 0xb4
 8000e4e:	210a      	movs	r1, #10
 8000e50:	f00c fe74 	bl	800db3c <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	222e      	movs	r2, #46	; 0x2e
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00d fcf0 	bl	800e844 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <DM_UpdateDisplay+0x1f8>)
 8000e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <DM_UpdateDisplay+0x1fc>)
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <DM_UpdateDisplay+0x200>)
 8000e74:	2132      	movs	r1, #50	; 0x32
 8000e76:	f00e f9ad 	bl	800f1d4 <sniprintf>
		//if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
			ILI9341_Draw_Text(encoder_value, 10, 190, BLACK, 1, RED);
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	2301      	movs	r3, #1
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2300      	movs	r3, #0
 8000e88:	22be      	movs	r2, #190	; 0xbe
 8000e8a:	210a      	movs	r1, #10
 8000e8c:	f00c fe56 	bl	800db3c <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <DM_UpdateDisplay+0x204>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00a      	beq.n	8000eae <DM_UpdateDisplay+0x1d2>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 8000e98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	22be      	movs	r2, #190	; 0xbe
 8000ea6:	210a      	movs	r1, #10
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <DM_UpdateDisplay+0x204>)
 8000eaa:	f00c fe47 	bl	800db3c <ILI9341_Draw_Text>

}
 8000eae:	bf00      	nop
 8000eb0:	3768      	adds	r7, #104	; 0x68
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0801216c 	.word	0x0801216c
 8000ebc:	08012180 	.word	0x08012180
 8000ec0:	08012194 	.word	0x08012194
 8000ec4:	080121a8 	.word	0x080121a8
 8000ec8:	080121bc 	.word	0x080121bc
 8000ecc:	40013400 	.word	0x40013400
 8000ed0:	080121e0 	.word	0x080121e0
 8000ed4:	40000c00 	.word	0x40000c00
 8000ed8:	40012c00 	.word	0x40012c00
 8000edc:	080121f8 	.word	0x080121f8
 8000ee0:	20001eec 	.word	0x20001eec

08000ee4 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b09b      	sub	sp, #108	; 0x6c
 8000ee8:	af02      	add	r7, sp, #8
	uint8_t text_size = 2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	char out_hertz[15] = "";
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 150;
 8000f02:	2396      	movs	r3, #150	; 0x96
 8000f04:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	uint8_t out_hertz_y = 40;
 8000f08:	2328      	movs	r3, #40	; 0x28
 8000f0a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	char out_vpp[18] = "";
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 150;
 8000f20:	2396      	movs	r3, #150	; 0x96
 8000f22:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	uint8_t out_vpp_y = 70;
 8000f26:	2346      	movs	r3, #70	; 0x46
 8000f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char out_decibels[13] = "";
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	721a      	strb	r2, [r3, #8]
	uint8_t out_decibels_x = 150;
 8000f3c:	2396      	movs	r3, #150	; 0x96
 8000f3e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t out_decibels_y = 100;
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55


	float volts_per_thou = 0.00075;
 8000f48:	4b94      	ldr	r3, [pc, #592]	; (800119c <DM_DisplayFormattedOutput+0x2b8>)
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
	char out_dcvolts[12] = "";
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 150;
 8000f5a:	2396      	movs	r3, #150	; 0x96
 8000f5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_dcvolts_y = 130;
 8000f60:	2382      	movs	r3, #130	; 0x82
 8000f62:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	ILI9341_Draw_Text(" FREQ:", 10, out_hertz_y , BLACK, text_size, WHITE);
 8000f66:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f76:	9201      	str	r2, [sp, #4]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	210a      	movs	r1, #10
 8000f80:	4887      	ldr	r0, [pc, #540]	; (80011a0 <DM_DisplayFormattedOutput+0x2bc>)
 8000f82:	f00c fddb 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP:", 10, out_vpp_y, BLACK, text_size, WHITE);
 8000f86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f96:	9201      	str	r2, [sp, #4]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	210a      	movs	r1, #10
 8000fa0:	4880      	ldr	r0, [pc, #512]	; (80011a4 <DM_DisplayFormattedOutput+0x2c0>)
 8000fa2:	f00c fdcb 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN:", 10, out_decibels_y, BLACK, text_size, WHITE);
 8000fa6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000faa:	b299      	uxth	r1, r3
 8000fac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb6:	9201      	str	r2, [sp, #4]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	210a      	movs	r1, #10
 8000fc0:	4879      	ldr	r0, [pc, #484]	; (80011a8 <DM_DisplayFormattedOutput+0x2c4>)
 8000fc2:	f00c fdbb 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET:", 10, out_dcvolts_y, BLACK, text_size, WHITE);
 8000fc6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fca:	b299      	uxth	r1, r3
 8000fcc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd6:	9201      	str	r2, [sp, #4]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	210a      	movs	r1, #10
 8000fe0:	4872      	ldr	r0, [pc, #456]	; (80011ac <DM_DisplayFormattedOutput+0x2c8>)
 8000fe2:	f00c fdab 	bl	800db3c <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f Hz ", SM_GetOutputInHertz());
 8000fe6:	f004 fba5 	bl	8005734 <SM_GetOutputInHertz>
 8000fea:	ee10 3a10 	vmov	r3, s0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fad2 	bl	8000598 <__aeabi_f2d>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	460c      	mov	r4, r1
 8000ff8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000ffc:	e9cd 3400 	strd	r3, r4, [sp]
 8001000:	4a6b      	ldr	r2, [pc, #428]	; (80011b0 <DM_DisplayFormattedOutput+0x2cc>)
 8001002:	210f      	movs	r1, #15
 8001004:	f00e f8e6 	bl	800f1d4 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, text_size, WHITE);
 8001008:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800100c:	b299      	uxth	r1, r3
 800100e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001012:	b29c      	uxth	r4, r3
 8001014:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001018:	b29b      	uxth	r3, r3
 800101a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800101e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001022:	9201      	str	r2, [sp, #4]
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2300      	movs	r3, #0
 8001028:	4622      	mov	r2, r4
 800102a:	f00c fd87 	bl	800db3c <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800102e:	2000      	movs	r0, #0
 8001030:	f004 fb4e 	bl	80056d0 <SM_GetOutputChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48

	if(pTmpVppPreset)
 800103c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800103e:	2b00      	cmp	r3, #0
 8001040:	d016      	beq.n	8001070 <DM_DisplayFormattedOutput+0x18c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f V ", pTmpVppPreset->amp_value);
 8001042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff faa6 	bl	8000598 <__aeabi_f2d>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001054:	e9cd 3400 	strd	r3, r4, [sp]
 8001058:	4a56      	ldr	r2, [pc, #344]	; (80011b4 <DM_DisplayFormattedOutput+0x2d0>)
 800105a:	2112      	movs	r1, #18
 800105c:	f00e f8ba 	bl	800f1d4 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %s ", pTmpVppPreset->gain_decibels);
 8001060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f107 0014 	add.w	r0, r7, #20
 8001068:	4a53      	ldr	r2, [pc, #332]	; (80011b8 <DM_DisplayFormattedOutput+0x2d4>)
 800106a:	210d      	movs	r1, #13
 800106c:	f00e f8b2 	bl	800f1d4 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, BLACK, text_size, WHITE);
 8001070:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001074:	b299      	uxth	r1, r3
 8001076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800107a:	b29c      	uxth	r4, r3
 800107c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001080:	b29b      	uxth	r3, r3
 8001082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	4622      	mov	r2, r4
 8001092:	f00c fd53 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, text_size, WHITE);
 8001096:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800109a:	b299      	uxth	r1, r3
 800109c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80010a0:	b29c      	uxth	r4, r3
 80010a2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f107 0014 	add.w	r0, r7, #20
 80010ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b0:	9201      	str	r2, [sp, #4]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2300      	movs	r3, #0
 80010b6:	4622      	mov	r2, r4
 80010b8:	f00c fd40 	bl	800db3c <ILI9341_Draw_Text>



	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 80010bc:	f003 fdd2 	bl	8004c64 <BO_GetOutputBias>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <DM_DisplayFormattedOutput+0x1ea>
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010cc:	e00b      	b.n	80010e6 <DM_DisplayFormattedOutput+0x202>
 80010ce:	f003 fdc9 	bl	8004c64 <BO_GetOutputBias>
 80010d2:	ee07 0a90 	vmov	s15, r0
 80010d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010da:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80010de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	snprintf(out_dcvolts, sizeof(out_dcvolts), " %1.4f v ", dc_volts);
 80010e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80010e8:	f7ff fa56 	bl	8000598 <__aeabi_f2d>
 80010ec:	4603      	mov	r3, r0
 80010ee:	460c      	mov	r4, r1
 80010f0:	f107 0008 	add.w	r0, r7, #8
 80010f4:	e9cd 3400 	strd	r3, r4, [sp]
 80010f8:	4a30      	ldr	r2, [pc, #192]	; (80011bc <DM_DisplayFormattedOutput+0x2d8>)
 80010fa:	210c      	movs	r1, #12
 80010fc:	f00e f86a 	bl	800f1d4 <sniprintf>
	if(BO_GetBiasPolarity())
 8001100:	f003 fd50 	bl	8004ba4 <BO_GetBiasPolarity>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d022      	beq.n	8001150 <DM_DisplayFormattedOutput+0x26c>
	{
		char symbol[3] = " +\0";
 800110a:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <DM_DisplayFormattedOutput+0x2dc>)
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	4611      	mov	r1, r2
 8001112:	8019      	strh	r1, [r3, #0]
 8001114:	3302      	adds	r3, #2
 8001116:	0c12      	lsrs	r2, r2, #16
 8001118:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, text_size, WHITE);
 800111a:	f107 0208 	add.w	r2, r7, #8
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f00e f88a 	bl	800f23c <strcat>
 8001128:	4604      	mov	r4, r0
 800112a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800112e:	b299      	uxth	r1, r3
 8001130:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001134:	b298      	uxth	r0, r3
 8001136:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800113a:	b29b      	uxth	r3, r3
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	9201      	str	r2, [sp, #4]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2300      	movs	r3, #0
 8001146:	4602      	mov	r2, r0
 8001148:	4620      	mov	r0, r4
 800114a:	f00c fcf7 	bl	800db3c <ILI9341_Draw_Text>
	{
		char symbol[3] = " -\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, text_size, WHITE);
	}

}
 800114e:	e021      	b.n	8001194 <DM_DisplayFormattedOutput+0x2b0>
		char symbol[3] = " -\0";
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <DM_DisplayFormattedOutput+0x2e0>)
 8001152:	463b      	mov	r3, r7
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	4611      	mov	r1, r2
 8001158:	8019      	strh	r1, [r3, #0]
 800115a:	3302      	adds	r3, #2
 800115c:	0c12      	lsrs	r2, r2, #16
 800115e:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, text_size, WHITE);
 8001160:	f107 0208 	add.w	r2, r7, #8
 8001164:	463b      	mov	r3, r7
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f00e f867 	bl	800f23c <strcat>
 800116e:	4604      	mov	r4, r0
 8001170:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001174:	b299      	uxth	r1, r3
 8001176:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800117a:	b298      	uxth	r0, r3
 800117c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001180:	b29b      	uxth	r3, r3
 8001182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001186:	9201      	str	r2, [sp, #4]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	4602      	mov	r2, r0
 800118e:	4620      	mov	r0, r4
 8001190:	f00c fcd4 	bl	800db3c <ILI9341_Draw_Text>
}
 8001194:	bf00      	nop
 8001196:	3764      	adds	r7, #100	; 0x64
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	3a449ba6 	.word	0x3a449ba6
 80011a0:	08012220 	.word	0x08012220
 80011a4:	08012228 	.word	0x08012228
 80011a8:	08012230 	.word	0x08012230
 80011ac:	08012238 	.word	0x08012238
 80011b0:	08012244 	.word	0x08012244
 80011b4:	08012250 	.word	0x08012250
 80011b8:	0801225c 	.word	0x0801225c
 80011bc:	08012264 	.word	0x08012264
 80011c0:	08012270 	.word	0x08012270
 80011c4:	08012274 	.word	0x08012274

080011c8 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af04      	add	r7, sp, #16
	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80011ce:	4821      	ldr	r0, [pc, #132]	; (8001254 <DM_RefreshScreen+0x8c>)
 80011d0:	f00b f970 	bl	800c4b4 <HAL_TIM_Base_Stop_IT>


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 80011d4:	f00c fce0 	bl	800db98 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <DM_RefreshScreen+0x90>)
 80011da:	8818      	ldrh	r0, [r3, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2302      	movs	r3, #2
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2332      	movs	r3, #50	; 0x32
 80011ec:	2250      	movs	r2, #80	; 0x50
 80011ee:	21c8      	movs	r1, #200	; 0xc8
 80011f0:	f00c fb3a 	bl	800d868 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <DM_RefreshScreen+0x90>)
 80011f6:	8858      	ldrh	r0, [r3, #2]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2302      	movs	r3, #2
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2332      	movs	r3, #50	; 0x32
 8001208:	2250      	movs	r2, #80	; 0x50
 800120a:	21c8      	movs	r1, #200	; 0xc8
 800120c:	f00c fb2c 	bl	800d868 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <DM_RefreshScreen+0x90>)
 8001212:	8898      	ldrh	r0, [r3, #4]
 8001214:	2300      	movs	r3, #0
 8001216:	9302      	str	r3, [sp, #8]
 8001218:	2302      	movs	r3, #2
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2332      	movs	r3, #50	; 0x32
 8001224:	2250      	movs	r2, #80	; 0x50
 8001226:	21c8      	movs	r1, #200	; 0xc8
 8001228:	f00c fb1e 	bl	800d868 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <DM_RefreshScreen+0x90>)
 800122e:	88d8      	ldrh	r0, [r3, #6]
 8001230:	2300      	movs	r3, #0
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2302      	movs	r3, #2
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2332      	movs	r3, #50	; 0x32
 8001240:	2250      	movs	r2, #80	; 0x50
 8001242:	21c8      	movs	r1, #200	; 0xc8
 8001244:	f00c fb10 	bl	800d868 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <DM_RefreshScreen+0x8c>)
 800124a:	f00b f8fd 	bl	800c448 <HAL_TIM_Base_Start_IT>
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000279c 	.word	0x2000279c
 8001258:	20000000 	.word	0x20000000

0800125c <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <DM_SetErrorDebugMsg+0x1c>)
 8001268:	212d      	movs	r1, #45	; 0x2d
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <DM_SetErrorDebugMsg+0x20>)
 800126c:	f00d ffb2 	bl	800f1d4 <sniprintf>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	080122f4 	.word	0x080122f4
 800127c:	20001eec 	.word	0x20001eec

08001280 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	3b01      	subs	r3, #1
 800128e:	2b03      	cmp	r3, #3
 8001290:	d816      	bhi.n	80012c0 <FreqMenu_DrawMenu+0x40>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <FreqMenu_DrawMenu+0x18>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	080012a9 	.word	0x080012a9
 800129c:	080012af 	.word	0x080012af
 80012a0:	080012b5 	.word	0x080012b5
 80012a4:	080012bb 	.word	0x080012bb
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 80012a8:	f000 f810 	bl	80012cc <FreqMenu_DrawMainMenu>
			break;
 80012ac:	e009      	b.n	80012c2 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80012ae:	f000 f849 	bl	8001344 <FreqMenu_DrawPresetMenu>
			break;
 80012b2:	e006      	b.n	80012c2 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80012b4:	f001 faf4 	bl	80028a0 <FreqMenu_DrawAdjustMenu>
			break;
 80012b8:	e003      	b.n	80012c2 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80012ba:	f001 fb07 	bl	80028cc <FreqMenu_DrawSweepMenu>
			break;
 80012be:	e000      	b.n	80012c2 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80012c0:	bf00      	nop

	}
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop

080012cc <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	10, 10, WHITE, 2, BLACK);
 80012d2:	2300      	movs	r3, #0
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	2302      	movs	r3, #2
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012de:	220a      	movs	r2, #10
 80012e0:	210a      	movs	r1, #10
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <FreqMenu_DrawMainMenu+0x68>)
 80012e4:	f00c fc2a 	bl	800db3c <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80012e8:	f7ff fdfc 	bl	8000ee4 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80012ec:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	2302      	movs	r3, #2
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2300      	movs	r3, #0
 80012f8:	22d2      	movs	r2, #210	; 0xd2
 80012fa:	2105      	movs	r1, #5
 80012fc:	480e      	ldr	r0, [pc, #56]	; (8001338 <FreqMenu_DrawMainMenu+0x6c>)
 80012fe:	f00c fc1d 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 8001302:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	2302      	movs	r3, #2
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2300      	movs	r3, #0
 800130e:	22d2      	movs	r2, #210	; 0xd2
 8001310:	2157      	movs	r1, #87	; 0x57
 8001312:	480a      	ldr	r0, [pc, #40]	; (800133c <FreqMenu_DrawMainMenu+0x70>)
 8001314:	f00c fc12 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 8001318:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	2302      	movs	r3, #2
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2300      	movs	r3, #0
 8001324:	22d2      	movs	r2, #210	; 0xd2
 8001326:	21ae      	movs	r1, #174	; 0xae
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <FreqMenu_DrawMainMenu+0x74>)
 800132a:	f00c fc07 	bl	800db3c <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	080122f8 	.word	0x080122f8
 8001338:	08012304 	.word	0x08012304
 800133c:	0801230c 	.word	0x0801230c
 8001340:	08012314 	.word	0x08012314

08001344 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	10, 10, WHITE, 2, BLACK);
 800134a:	2300      	movs	r3, #0
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	2302      	movs	r3, #2
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001356:	220a      	movs	r2, #10
 8001358:	210a      	movs	r1, #10
 800135a:	4886      	ldr	r0, [pc, #536]	; (8001574 <FreqMenu_DrawPresetMenu+0x230>)
 800135c:	f00c fbee 	bl	800db3c <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 50;
 8001360:	2332      	movs	r3, #50	; 0x32
 8001362:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 8001364:	2346      	movs	r3, #70	; 0x46
 8001366:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 8001368:	235a      	movs	r3, #90	; 0x5a
 800136a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 800136c:	236e      	movs	r3, #110	; 0x6e
 800136e:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 8001370:	2382      	movs	r3, #130	; 0x82
 8001372:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 8001374:	2396      	movs	r3, #150	; 0x96
 8001376:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 8001378:	23aa      	movs	r3, #170	; 0xaa
 800137a:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800137c:	f003 fe28 	bl	8004fd0 <FreqO_GetFPresetObject>
 8001380:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	f001 825d 	beq.w	8002844 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001392:	4293      	cmp	r3, r2
 8001394:	f000 849a 	beq.w	8001ccc <FreqMenu_DrawPresetMenu+0x988>
 8001398:	f240 22ee 	movw	r2, #750	; 0x2ee
 800139c:	4293      	cmp	r3, r2
 800139e:	d817      	bhi.n	80013d0 <FreqMenu_DrawPresetMenu+0x8c>
 80013a0:	2b32      	cmp	r3, #50	; 0x32
 80013a2:	f000 81b3 	beq.w	800170c <FreqMenu_DrawPresetMenu+0x3c8>
 80013a6:	2b32      	cmp	r3, #50	; 0x32
 80013a8:	d806      	bhi.n	80013b8 <FreqMenu_DrawPresetMenu+0x74>
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d038      	beq.n	8001420 <FreqMenu_DrawPresetMenu+0xdc>
 80013ae:	2b0a      	cmp	r3, #10
 80013b0:	f000 8102 	beq.w	80015b8 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 80013b4:	f001 ba52 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80013b8:	2bfa      	cmp	r3, #250	; 0xfa
 80013ba:	f000 8317 	beq.w	80019ec <FreqMenu_DrawPresetMenu+0x6a8>
 80013be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013c2:	f000 83d9 	beq.w	8001b78 <FreqMenu_DrawPresetMenu+0x834>
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	f000 8266 	beq.w	8001898 <FreqMenu_DrawPresetMenu+0x554>
}
 80013cc:	f001 ba46 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80013d0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80013d4:	4293      	cmp	r3, r2
 80013d6:	f000 8758 	beq.w	800228a <FreqMenu_DrawPresetMenu+0xf46>
 80013da:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80013de:	4293      	cmp	r3, r2
 80013e0:	d80f      	bhi.n	8001402 <FreqMenu_DrawPresetMenu+0xbe>
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f000 85e0 	beq.w	8001fac <FreqMenu_DrawPresetMenu+0xc68>
 80013ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80013f0:	4293      	cmp	r3, r2
 80013f2:	f000 86a1 	beq.w	8002138 <FreqMenu_DrawPresetMenu+0xdf4>
 80013f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013fa:	f000 852d 	beq.w	8001e58 <FreqMenu_DrawPresetMenu+0xb14>
}
 80013fe:	f001 ba2d 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001402:	4a5d      	ldr	r2, [pc, #372]	; (8001578 <FreqMenu_DrawPresetMenu+0x234>)
 8001404:	4293      	cmp	r3, r2
 8001406:	f001 80ae 	beq.w	8002566 <FreqMenu_DrawPresetMenu+0x1222>
 800140a:	4a5c      	ldr	r2, [pc, #368]	; (800157c <FreqMenu_DrawPresetMenu+0x238>)
 800140c:	4293      	cmp	r3, r2
 800140e:	f001 816f 	beq.w	80026f0 <FreqMenu_DrawPresetMenu+0x13ac>
 8001412:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001416:	4293      	cmp	r3, r2
 8001418:	f000 87fc 	beq.w	8002414 <FreqMenu_DrawPresetMenu+0x10d0>
}
 800141c:	f001 ba1e 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	b29a      	uxth	r2, r3
 8001424:	2300      	movs	r3, #0
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	2302      	movs	r3, #2
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001430:	210a      	movs	r1, #10
 8001432:	4853      	ldr	r0, [pc, #332]	; (8001580 <FreqMenu_DrawPresetMenu+0x23c>)
 8001434:	f00c fb82 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	b29a      	uxth	r2, r3
 800143c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2302      	movs	r3, #2
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	210a      	movs	r1, #10
 800144a:	484e      	ldr	r0, [pc, #312]	; (8001584 <FreqMenu_DrawPresetMenu+0x240>)
 800144c:	f00c fb76 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001450:	7b7b      	ldrb	r3, [r7, #13]
 8001452:	b29a      	uxth	r2, r3
 8001454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	2302      	movs	r3, #2
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2300      	movs	r3, #0
 8001460:	210a      	movs	r1, #10
 8001462:	4849      	ldr	r0, [pc, #292]	; (8001588 <FreqMenu_DrawPresetMenu+0x244>)
 8001464:	f00c fb6a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	b29a      	uxth	r2, r3
 800146c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	2302      	movs	r3, #2
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	210a      	movs	r1, #10
 800147a:	4844      	ldr	r0, [pc, #272]	; (800158c <FreqMenu_DrawPresetMenu+0x248>)
 800147c:	f00c fb5e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001480:	7afb      	ldrb	r3, [r7, #11]
 8001482:	b29a      	uxth	r2, r3
 8001484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	2302      	movs	r3, #2
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	210a      	movs	r1, #10
 8001492:	483f      	ldr	r0, [pc, #252]	; (8001590 <FreqMenu_DrawPresetMenu+0x24c>)
 8001494:	f00c fb52 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001498:	7abb      	ldrb	r3, [r7, #10]
 800149a:	b29a      	uxth	r2, r3
 800149c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	2302      	movs	r3, #2
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	210a      	movs	r1, #10
 80014aa:	483a      	ldr	r0, [pc, #232]	; (8001594 <FreqMenu_DrawPresetMenu+0x250>)
 80014ac:	f00c fb46 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80014b0:	7a7b      	ldrb	r3, [r7, #9]
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	2302      	movs	r3, #2
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2300      	movs	r3, #0
 80014c0:	210a      	movs	r1, #10
 80014c2:	4835      	ldr	r0, [pc, #212]	; (8001598 <FreqMenu_DrawPresetMenu+0x254>)
 80014c4:	f00c fb3a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	2302      	movs	r3, #2
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2300      	movs	r3, #0
 80014d8:	2178      	movs	r1, #120	; 0x78
 80014da:	4830      	ldr	r0, [pc, #192]	; (800159c <FreqMenu_DrawPresetMenu+0x258>)
 80014dc:	f00c fb2e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	2302      	movs	r3, #2
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2300      	movs	r3, #0
 80014f0:	2178      	movs	r1, #120	; 0x78
 80014f2:	482b      	ldr	r0, [pc, #172]	; (80015a0 <FreqMenu_DrawPresetMenu+0x25c>)
 80014f4:	f00c fb22 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	2302      	movs	r3, #2
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2300      	movs	r3, #0
 8001508:	2178      	movs	r1, #120	; 0x78
 800150a:	4826      	ldr	r0, [pc, #152]	; (80015a4 <FreqMenu_DrawPresetMenu+0x260>)
 800150c:	f00c fb16 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001510:	7b3b      	ldrb	r3, [r7, #12]
 8001512:	b29a      	uxth	r2, r3
 8001514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	2302      	movs	r3, #2
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	2178      	movs	r1, #120	; 0x78
 8001522:	4821      	ldr	r0, [pc, #132]	; (80015a8 <FreqMenu_DrawPresetMenu+0x264>)
 8001524:	f00c fb0a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	b29a      	uxth	r2, r3
 800152c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	2302      	movs	r3, #2
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	2178      	movs	r1, #120	; 0x78
 800153a:	481c      	ldr	r0, [pc, #112]	; (80015ac <FreqMenu_DrawPresetMenu+0x268>)
 800153c:	f00c fafe 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001540:	7abb      	ldrb	r3, [r7, #10]
 8001542:	b29a      	uxth	r2, r3
 8001544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	2302      	movs	r3, #2
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2300      	movs	r3, #0
 8001550:	2178      	movs	r1, #120	; 0x78
 8001552:	4817      	ldr	r0, [pc, #92]	; (80015b0 <FreqMenu_DrawPresetMenu+0x26c>)
 8001554:	f00c faf2 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001558:	7a7b      	ldrb	r3, [r7, #9]
 800155a:	b29a      	uxth	r2, r3
 800155c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	2302      	movs	r3, #2
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2300      	movs	r3, #0
 8001568:	2178      	movs	r1, #120	; 0x78
 800156a:	4812      	ldr	r0, [pc, #72]	; (80015b4 <FreqMenu_DrawPresetMenu+0x270>)
 800156c:	f00c fae6 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8001570:	f001 b974 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
 8001574:	0801231c 	.word	0x0801231c
 8001578:	000124f8 	.word	0x000124f8
 800157c:	000186a0 	.word	0x000186a0
 8001580:	08012330 	.word	0x08012330
 8001584:	08012338 	.word	0x08012338
 8001588:	08012340 	.word	0x08012340
 800158c:	08012348 	.word	0x08012348
 8001590:	08012350 	.word	0x08012350
 8001594:	08012358 	.word	0x08012358
 8001598:	08012360 	.word	0x08012360
 800159c:	08012368 	.word	0x08012368
 80015a0:	08012370 	.word	0x08012370
 80015a4:	08012378 	.word	0x08012378
 80015a8:	08012380 	.word	0x08012380
 80015ac:	08012388 	.word	0x08012388
 80015b0:	08012390 	.word	0x08012390
 80015b4:	08012398 	.word	0x08012398
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2302      	movs	r3, #2
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	210a      	movs	r1, #10
 80015ca:	48a5      	ldr	r0, [pc, #660]	; (8001860 <FreqMenu_DrawPresetMenu+0x51c>)
 80015cc:	f00c fab6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	2300      	movs	r3, #0
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2302      	movs	r3, #2
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e0:	210a      	movs	r1, #10
 80015e2:	48a0      	ldr	r0, [pc, #640]	; (8001864 <FreqMenu_DrawPresetMenu+0x520>)
 80015e4:	f00c faaa 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	2302      	movs	r3, #2
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	210a      	movs	r1, #10
 80015fa:	489b      	ldr	r0, [pc, #620]	; (8001868 <FreqMenu_DrawPresetMenu+0x524>)
 80015fc:	f00c fa9e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001600:	7b3b      	ldrb	r3, [r7, #12]
 8001602:	b29a      	uxth	r2, r3
 8001604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	2302      	movs	r3, #2
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	210a      	movs	r1, #10
 8001612:	4896      	ldr	r0, [pc, #600]	; (800186c <FreqMenu_DrawPresetMenu+0x528>)
 8001614:	f00c fa92 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	b29a      	uxth	r2, r3
 800161c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	2302      	movs	r3, #2
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2300      	movs	r3, #0
 8001628:	210a      	movs	r1, #10
 800162a:	4891      	ldr	r0, [pc, #580]	; (8001870 <FreqMenu_DrawPresetMenu+0x52c>)
 800162c:	f00c fa86 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001630:	7abb      	ldrb	r3, [r7, #10]
 8001632:	b29a      	uxth	r2, r3
 8001634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	2302      	movs	r3, #2
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2300      	movs	r3, #0
 8001640:	210a      	movs	r1, #10
 8001642:	488c      	ldr	r0, [pc, #560]	; (8001874 <FreqMenu_DrawPresetMenu+0x530>)
 8001644:	f00c fa7a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001648:	7a7b      	ldrb	r3, [r7, #9]
 800164a:	b29a      	uxth	r2, r3
 800164c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	2302      	movs	r3, #2
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	210a      	movs	r1, #10
 800165a:	4887      	ldr	r0, [pc, #540]	; (8001878 <FreqMenu_DrawPresetMenu+0x534>)
 800165c:	f00c fa6e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	b29a      	uxth	r2, r3
 8001664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	2302      	movs	r3, #2
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	2178      	movs	r1, #120	; 0x78
 8001672:	4882      	ldr	r0, [pc, #520]	; (800187c <FreqMenu_DrawPresetMenu+0x538>)
 8001674:	f00c fa62 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	b29a      	uxth	r2, r3
 800167c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	2302      	movs	r3, #2
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2300      	movs	r3, #0
 8001688:	2178      	movs	r1, #120	; 0x78
 800168a:	487d      	ldr	r0, [pc, #500]	; (8001880 <FreqMenu_DrawPresetMenu+0x53c>)
 800168c:	f00c fa56 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001690:	7b7b      	ldrb	r3, [r7, #13]
 8001692:	b29a      	uxth	r2, r3
 8001694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2302      	movs	r3, #2
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	2178      	movs	r1, #120	; 0x78
 80016a2:	4878      	ldr	r0, [pc, #480]	; (8001884 <FreqMenu_DrawPresetMenu+0x540>)
 80016a4:	f00c fa4a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80016a8:	7b3b      	ldrb	r3, [r7, #12]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	2302      	movs	r3, #2
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	2178      	movs	r1, #120	; 0x78
 80016ba:	4873      	ldr	r0, [pc, #460]	; (8001888 <FreqMenu_DrawPresetMenu+0x544>)
 80016bc:	f00c fa3e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80016c0:	7afb      	ldrb	r3, [r7, #11]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	2302      	movs	r3, #2
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2300      	movs	r3, #0
 80016d0:	2178      	movs	r1, #120	; 0x78
 80016d2:	486e      	ldr	r0, [pc, #440]	; (800188c <FreqMenu_DrawPresetMenu+0x548>)
 80016d4:	f00c fa32 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80016d8:	7abb      	ldrb	r3, [r7, #10]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	2302      	movs	r3, #2
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	2178      	movs	r1, #120	; 0x78
 80016ea:	4869      	ldr	r0, [pc, #420]	; (8001890 <FreqMenu_DrawPresetMenu+0x54c>)
 80016ec:	f00c fa26 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80016f0:	7a7b      	ldrb	r3, [r7, #9]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	2302      	movs	r3, #2
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2300      	movs	r3, #0
 8001700:	2178      	movs	r1, #120	; 0x78
 8001702:	4864      	ldr	r0, [pc, #400]	; (8001894 <FreqMenu_DrawPresetMenu+0x550>)
 8001704:	f00c fa1a 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8001708:	f001 b8a8 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	b29a      	uxth	r2, r3
 8001710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	2302      	movs	r3, #2
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	210a      	movs	r1, #10
 800171e:	4850      	ldr	r0, [pc, #320]	; (8001860 <FreqMenu_DrawPresetMenu+0x51c>)
 8001720:	f00c fa0c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	b29a      	uxth	r2, r3
 8001728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	2302      	movs	r3, #2
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2300      	movs	r3, #0
 8001734:	210a      	movs	r1, #10
 8001736:	484b      	ldr	r0, [pc, #300]	; (8001864 <FreqMenu_DrawPresetMenu+0x520>)
 8001738:	f00c fa00 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 800173c:	7b7b      	ldrb	r3, [r7, #13]
 800173e:	b29a      	uxth	r2, r3
 8001740:	2300      	movs	r3, #0
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	2302      	movs	r3, #2
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174c:	210a      	movs	r1, #10
 800174e:	4846      	ldr	r0, [pc, #280]	; (8001868 <FreqMenu_DrawPresetMenu+0x524>)
 8001750:	f00c f9f4 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001754:	7b3b      	ldrb	r3, [r7, #12]
 8001756:	b29a      	uxth	r2, r3
 8001758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	2302      	movs	r3, #2
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2300      	movs	r3, #0
 8001764:	210a      	movs	r1, #10
 8001766:	4841      	ldr	r0, [pc, #260]	; (800186c <FreqMenu_DrawPresetMenu+0x528>)
 8001768:	f00c f9e8 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	b29a      	uxth	r2, r3
 8001770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	2302      	movs	r3, #2
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	210a      	movs	r1, #10
 800177e:	483c      	ldr	r0, [pc, #240]	; (8001870 <FreqMenu_DrawPresetMenu+0x52c>)
 8001780:	f00c f9dc 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001784:	7abb      	ldrb	r3, [r7, #10]
 8001786:	b29a      	uxth	r2, r3
 8001788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	2302      	movs	r3, #2
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	210a      	movs	r1, #10
 8001796:	4837      	ldr	r0, [pc, #220]	; (8001874 <FreqMenu_DrawPresetMenu+0x530>)
 8001798:	f00c f9d0 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800179c:	7a7b      	ldrb	r3, [r7, #9]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	2302      	movs	r3, #2
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2300      	movs	r3, #0
 80017ac:	210a      	movs	r1, #10
 80017ae:	4832      	ldr	r0, [pc, #200]	; (8001878 <FreqMenu_DrawPresetMenu+0x534>)
 80017b0:	f00c f9c4 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	2302      	movs	r3, #2
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	2178      	movs	r1, #120	; 0x78
 80017c6:	482d      	ldr	r0, [pc, #180]	; (800187c <FreqMenu_DrawPresetMenu+0x538>)
 80017c8:	f00c f9b8 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	2302      	movs	r3, #2
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	2178      	movs	r1, #120	; 0x78
 80017de:	4828      	ldr	r0, [pc, #160]	; (8001880 <FreqMenu_DrawPresetMenu+0x53c>)
 80017e0:	f00c f9ac 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	2302      	movs	r3, #2
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2300      	movs	r3, #0
 80017f4:	2178      	movs	r1, #120	; 0x78
 80017f6:	4823      	ldr	r0, [pc, #140]	; (8001884 <FreqMenu_DrawPresetMenu+0x540>)
 80017f8:	f00c f9a0 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80017fc:	7b3b      	ldrb	r3, [r7, #12]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2302      	movs	r3, #2
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	2178      	movs	r1, #120	; 0x78
 800180e:	481e      	ldr	r0, [pc, #120]	; (8001888 <FreqMenu_DrawPresetMenu+0x544>)
 8001810:	f00c f994 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001814:	7afb      	ldrb	r3, [r7, #11]
 8001816:	b29a      	uxth	r2, r3
 8001818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	2302      	movs	r3, #2
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	2178      	movs	r1, #120	; 0x78
 8001826:	4819      	ldr	r0, [pc, #100]	; (800188c <FreqMenu_DrawPresetMenu+0x548>)
 8001828:	f00c f988 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800182c:	7abb      	ldrb	r3, [r7, #10]
 800182e:	b29a      	uxth	r2, r3
 8001830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	2302      	movs	r3, #2
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	2178      	movs	r1, #120	; 0x78
 800183e:	4814      	ldr	r0, [pc, #80]	; (8001890 <FreqMenu_DrawPresetMenu+0x54c>)
 8001840:	f00c f97c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001844:	7a7b      	ldrb	r3, [r7, #9]
 8001846:	b29a      	uxth	r2, r3
 8001848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	2302      	movs	r3, #2
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2300      	movs	r3, #0
 8001854:	2178      	movs	r1, #120	; 0x78
 8001856:	480f      	ldr	r0, [pc, #60]	; (8001894 <FreqMenu_DrawPresetMenu+0x550>)
 8001858:	f00c f970 	bl	800db3c <ILI9341_Draw_Text>
				break;
 800185c:	f000 bffe 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
 8001860:	08012330 	.word	0x08012330
 8001864:	08012338 	.word	0x08012338
 8001868:	08012340 	.word	0x08012340
 800186c:	08012348 	.word	0x08012348
 8001870:	08012350 	.word	0x08012350
 8001874:	08012358 	.word	0x08012358
 8001878:	08012360 	.word	0x08012360
 800187c:	08012368 	.word	0x08012368
 8001880:	08012370 	.word	0x08012370
 8001884:	08012378 	.word	0x08012378
 8001888:	08012380 	.word	0x08012380
 800188c:	08012388 	.word	0x08012388
 8001890:	08012390 	.word	0x08012390
 8001894:	08012398 	.word	0x08012398
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	b29a      	uxth	r2, r3
 800189c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	2302      	movs	r3, #2
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2300      	movs	r3, #0
 80018a8:	210a      	movs	r1, #10
 80018aa:	48a5      	ldr	r0, [pc, #660]	; (8001b40 <FreqMenu_DrawPresetMenu+0x7fc>)
 80018ac:	f00c f946 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	2302      	movs	r3, #2
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	210a      	movs	r1, #10
 80018c2:	48a0      	ldr	r0, [pc, #640]	; (8001b44 <FreqMenu_DrawPresetMenu+0x800>)
 80018c4:	f00c f93a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80018c8:	7b7b      	ldrb	r3, [r7, #13]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	2302      	movs	r3, #2
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	210a      	movs	r1, #10
 80018da:	489b      	ldr	r0, [pc, #620]	; (8001b48 <FreqMenu_DrawPresetMenu+0x804>)
 80018dc:	f00c f92e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 80018e0:	7b3b      	ldrb	r3, [r7, #12]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	2300      	movs	r3, #0
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	2302      	movs	r3, #2
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f0:	210a      	movs	r1, #10
 80018f2:	4896      	ldr	r0, [pc, #600]	; (8001b4c <FreqMenu_DrawPresetMenu+0x808>)
 80018f4:	f00c f922 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80018f8:	7afb      	ldrb	r3, [r7, #11]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	2302      	movs	r3, #2
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	210a      	movs	r1, #10
 800190a:	4891      	ldr	r0, [pc, #580]	; (8001b50 <FreqMenu_DrawPresetMenu+0x80c>)
 800190c:	f00c f916 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001910:	7abb      	ldrb	r3, [r7, #10]
 8001912:	b29a      	uxth	r2, r3
 8001914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2302      	movs	r3, #2
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	210a      	movs	r1, #10
 8001922:	488c      	ldr	r0, [pc, #560]	; (8001b54 <FreqMenu_DrawPresetMenu+0x810>)
 8001924:	f00c f90a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001928:	7a7b      	ldrb	r3, [r7, #9]
 800192a:	b29a      	uxth	r2, r3
 800192c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	2302      	movs	r3, #2
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2300      	movs	r3, #0
 8001938:	210a      	movs	r1, #10
 800193a:	4887      	ldr	r0, [pc, #540]	; (8001b58 <FreqMenu_DrawPresetMenu+0x814>)
 800193c:	f00c f8fe 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	b29a      	uxth	r2, r3
 8001944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	2302      	movs	r3, #2
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	2178      	movs	r1, #120	; 0x78
 8001952:	4882      	ldr	r0, [pc, #520]	; (8001b5c <FreqMenu_DrawPresetMenu+0x818>)
 8001954:	f00c f8f2 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	b29a      	uxth	r2, r3
 800195c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	2302      	movs	r3, #2
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2300      	movs	r3, #0
 8001968:	2178      	movs	r1, #120	; 0x78
 800196a:	487d      	ldr	r0, [pc, #500]	; (8001b60 <FreqMenu_DrawPresetMenu+0x81c>)
 800196c:	f00c f8e6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001970:	7b7b      	ldrb	r3, [r7, #13]
 8001972:	b29a      	uxth	r2, r3
 8001974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2302      	movs	r3, #2
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	2178      	movs	r1, #120	; 0x78
 8001982:	4878      	ldr	r0, [pc, #480]	; (8001b64 <FreqMenu_DrawPresetMenu+0x820>)
 8001984:	f00c f8da 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001988:	7b3b      	ldrb	r3, [r7, #12]
 800198a:	b29a      	uxth	r2, r3
 800198c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	2302      	movs	r3, #2
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	2178      	movs	r1, #120	; 0x78
 800199a:	4873      	ldr	r0, [pc, #460]	; (8001b68 <FreqMenu_DrawPresetMenu+0x824>)
 800199c:	f00c f8ce 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80019a0:	7afb      	ldrb	r3, [r7, #11]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2302      	movs	r3, #2
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2300      	movs	r3, #0
 80019b0:	2178      	movs	r1, #120	; 0x78
 80019b2:	486e      	ldr	r0, [pc, #440]	; (8001b6c <FreqMenu_DrawPresetMenu+0x828>)
 80019b4:	f00c f8c2 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80019b8:	7abb      	ldrb	r3, [r7, #10]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	2302      	movs	r3, #2
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2300      	movs	r3, #0
 80019c8:	2178      	movs	r1, #120	; 0x78
 80019ca:	4869      	ldr	r0, [pc, #420]	; (8001b70 <FreqMenu_DrawPresetMenu+0x82c>)
 80019cc:	f00c f8b6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80019d0:	7a7b      	ldrb	r3, [r7, #9]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	2302      	movs	r3, #2
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2300      	movs	r3, #0
 80019e0:	2178      	movs	r1, #120	; 0x78
 80019e2:	4864      	ldr	r0, [pc, #400]	; (8001b74 <FreqMenu_DrawPresetMenu+0x830>)
 80019e4:	f00c f8aa 	bl	800db3c <ILI9341_Draw_Text>
				break;
 80019e8:	f000 bf38 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	2302      	movs	r3, #2
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2300      	movs	r3, #0
 80019fc:	210a      	movs	r1, #10
 80019fe:	4850      	ldr	r0, [pc, #320]	; (8001b40 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001a00:	f00c f89c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001a04:	7bbb      	ldrb	r3, [r7, #14]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2302      	movs	r3, #2
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	210a      	movs	r1, #10
 8001a16:	484b      	ldr	r0, [pc, #300]	; (8001b44 <FreqMenu_DrawPresetMenu+0x800>)
 8001a18:	f00c f890 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001a1c:	7b7b      	ldrb	r3, [r7, #13]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	2302      	movs	r3, #2
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	210a      	movs	r1, #10
 8001a2e:	4846      	ldr	r0, [pc, #280]	; (8001b48 <FreqMenu_DrawPresetMenu+0x804>)
 8001a30:	f00c f884 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001a34:	7b3b      	ldrb	r3, [r7, #12]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	2302      	movs	r3, #2
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	210a      	movs	r1, #10
 8001a46:	4841      	ldr	r0, [pc, #260]	; (8001b4c <FreqMenu_DrawPresetMenu+0x808>)
 8001a48:	f00c f878 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	2300      	movs	r3, #0
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	2302      	movs	r3, #2
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5c:	210a      	movs	r1, #10
 8001a5e:	483c      	ldr	r0, [pc, #240]	; (8001b50 <FreqMenu_DrawPresetMenu+0x80c>)
 8001a60:	f00c f86c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001a64:	7abb      	ldrb	r3, [r7, #10]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2300      	movs	r3, #0
 8001a74:	210a      	movs	r1, #10
 8001a76:	4837      	ldr	r0, [pc, #220]	; (8001b54 <FreqMenu_DrawPresetMenu+0x810>)
 8001a78:	f00c f860 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001a7c:	7a7b      	ldrb	r3, [r7, #9]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	2302      	movs	r3, #2
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	210a      	movs	r1, #10
 8001a8e:	4832      	ldr	r0, [pc, #200]	; (8001b58 <FreqMenu_DrawPresetMenu+0x814>)
 8001a90:	f00c f854 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	2178      	movs	r1, #120	; 0x78
 8001aa6:	482d      	ldr	r0, [pc, #180]	; (8001b5c <FreqMenu_DrawPresetMenu+0x818>)
 8001aa8:	f00c f848 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001aac:	7bbb      	ldrb	r3, [r7, #14]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2300      	movs	r3, #0
 8001abc:	2178      	movs	r1, #120	; 0x78
 8001abe:	4828      	ldr	r0, [pc, #160]	; (8001b60 <FreqMenu_DrawPresetMenu+0x81c>)
 8001ac0:	f00c f83c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001ac4:	7b7b      	ldrb	r3, [r7, #13]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	2302      	movs	r3, #2
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2178      	movs	r1, #120	; 0x78
 8001ad6:	4823      	ldr	r0, [pc, #140]	; (8001b64 <FreqMenu_DrawPresetMenu+0x820>)
 8001ad8:	f00c f830 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001adc:	7b3b      	ldrb	r3, [r7, #12]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2300      	movs	r3, #0
 8001aec:	2178      	movs	r1, #120	; 0x78
 8001aee:	481e      	ldr	r0, [pc, #120]	; (8001b68 <FreqMenu_DrawPresetMenu+0x824>)
 8001af0:	f00c f824 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001af4:	7afb      	ldrb	r3, [r7, #11]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	2302      	movs	r3, #2
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	2178      	movs	r1, #120	; 0x78
 8001b06:	4819      	ldr	r0, [pc, #100]	; (8001b6c <FreqMenu_DrawPresetMenu+0x828>)
 8001b08:	f00c f818 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001b0c:	7abb      	ldrb	r3, [r7, #10]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	2302      	movs	r3, #2
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2178      	movs	r1, #120	; 0x78
 8001b1e:	4814      	ldr	r0, [pc, #80]	; (8001b70 <FreqMenu_DrawPresetMenu+0x82c>)
 8001b20:	f00c f80c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001b24:	7a7b      	ldrb	r3, [r7, #9]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2300      	movs	r3, #0
 8001b34:	2178      	movs	r1, #120	; 0x78
 8001b36:	480f      	ldr	r0, [pc, #60]	; (8001b74 <FreqMenu_DrawPresetMenu+0x830>)
 8001b38:	f00c f800 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8001b3c:	f000 be8e 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
 8001b40:	08012330 	.word	0x08012330
 8001b44:	08012338 	.word	0x08012338
 8001b48:	08012340 	.word	0x08012340
 8001b4c:	08012348 	.word	0x08012348
 8001b50:	08012350 	.word	0x08012350
 8001b54:	08012358 	.word	0x08012358
 8001b58:	08012360 	.word	0x08012360
 8001b5c:	08012368 	.word	0x08012368
 8001b60:	08012370 	.word	0x08012370
 8001b64:	08012378 	.word	0x08012378
 8001b68:	08012380 	.word	0x08012380
 8001b6c:	08012388 	.word	0x08012388
 8001b70:	08012390 	.word	0x08012390
 8001b74:	08012398 	.word	0x08012398
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	2302      	movs	r3, #2
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	210a      	movs	r1, #10
 8001b8a:	48a5      	ldr	r0, [pc, #660]	; (8001e20 <FreqMenu_DrawPresetMenu+0xadc>)
 8001b8c:	f00b ffd6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	210a      	movs	r1, #10
 8001ba2:	48a0      	ldr	r0, [pc, #640]	; (8001e24 <FreqMenu_DrawPresetMenu+0xae0>)
 8001ba4:	f00b ffca 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	210a      	movs	r1, #10
 8001bba:	489b      	ldr	r0, [pc, #620]	; (8001e28 <FreqMenu_DrawPresetMenu+0xae4>)
 8001bbc:	f00b ffbe 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	2302      	movs	r3, #2
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	210a      	movs	r1, #10
 8001bd2:	4896      	ldr	r0, [pc, #600]	; (8001e2c <FreqMenu_DrawPresetMenu+0xae8>)
 8001bd4:	f00b ffb2 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	2302      	movs	r3, #2
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2300      	movs	r3, #0
 8001be8:	210a      	movs	r1, #10
 8001bea:	4891      	ldr	r0, [pc, #580]	; (8001e30 <FreqMenu_DrawPresetMenu+0xaec>)
 8001bec:	f00b ffa6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001bf0:	7abb      	ldrb	r3, [r7, #10]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c00:	210a      	movs	r1, #10
 8001c02:	488c      	ldr	r0, [pc, #560]	; (8001e34 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001c04:	f00b ff9a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001c08:	7a7b      	ldrb	r3, [r7, #9]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	2302      	movs	r3, #2
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	210a      	movs	r1, #10
 8001c1a:	4887      	ldr	r0, [pc, #540]	; (8001e38 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001c1c:	f00b ff8e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2178      	movs	r1, #120	; 0x78
 8001c32:	4882      	ldr	r0, [pc, #520]	; (8001e3c <FreqMenu_DrawPresetMenu+0xaf8>)
 8001c34:	f00b ff82 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001c38:	7bbb      	ldrb	r3, [r7, #14]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	2302      	movs	r3, #2
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2300      	movs	r3, #0
 8001c48:	2178      	movs	r1, #120	; 0x78
 8001c4a:	487d      	ldr	r0, [pc, #500]	; (8001e40 <FreqMenu_DrawPresetMenu+0xafc>)
 8001c4c:	f00b ff76 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001c50:	7b7b      	ldrb	r3, [r7, #13]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2178      	movs	r1, #120	; 0x78
 8001c62:	4878      	ldr	r0, [pc, #480]	; (8001e44 <FreqMenu_DrawPresetMenu+0xb00>)
 8001c64:	f00b ff6a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c68:	7b3b      	ldrb	r3, [r7, #12]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2302      	movs	r3, #2
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	2178      	movs	r1, #120	; 0x78
 8001c7a:	4873      	ldr	r0, [pc, #460]	; (8001e48 <FreqMenu_DrawPresetMenu+0xb04>)
 8001c7c:	f00b ff5e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2178      	movs	r1, #120	; 0x78
 8001c92:	486e      	ldr	r0, [pc, #440]	; (8001e4c <FreqMenu_DrawPresetMenu+0xb08>)
 8001c94:	f00b ff52 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001c98:	7abb      	ldrb	r3, [r7, #10]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2178      	movs	r1, #120	; 0x78
 8001caa:	4869      	ldr	r0, [pc, #420]	; (8001e50 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001cac:	f00b ff46 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001cb0:	7a7b      	ldrb	r3, [r7, #9]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2178      	movs	r1, #120	; 0x78
 8001cc2:	4864      	ldr	r0, [pc, #400]	; (8001e54 <FreqMenu_DrawPresetMenu+0xb10>)
 8001cc4:	f00b ff3a 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8001cc8:	f000 bdc8 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	210a      	movs	r1, #10
 8001cde:	4850      	ldr	r0, [pc, #320]	; (8001e20 <FreqMenu_DrawPresetMenu+0xadc>)
 8001ce0:	f00b ff2c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	2302      	movs	r3, #2
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	210a      	movs	r1, #10
 8001cf6:	484b      	ldr	r0, [pc, #300]	; (8001e24 <FreqMenu_DrawPresetMenu+0xae0>)
 8001cf8:	f00b ff20 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001cfc:	7b7b      	ldrb	r3, [r7, #13]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	2302      	movs	r3, #2
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	210a      	movs	r1, #10
 8001d0e:	4846      	ldr	r0, [pc, #280]	; (8001e28 <FreqMenu_DrawPresetMenu+0xae4>)
 8001d10:	f00b ff14 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001d14:	7b3b      	ldrb	r3, [r7, #12]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	2302      	movs	r3, #2
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	210a      	movs	r1, #10
 8001d26:	4841      	ldr	r0, [pc, #260]	; (8001e2c <FreqMenu_DrawPresetMenu+0xae8>)
 8001d28:	f00b ff08 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	2302      	movs	r3, #2
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	210a      	movs	r1, #10
 8001d3e:	483c      	ldr	r0, [pc, #240]	; (8001e30 <FreqMenu_DrawPresetMenu+0xaec>)
 8001d40:	f00b fefc 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001d44:	7abb      	ldrb	r3, [r7, #10]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	2302      	movs	r3, #2
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	210a      	movs	r1, #10
 8001d56:	4837      	ldr	r0, [pc, #220]	; (8001e34 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001d58:	f00b fef0 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8001d5c:	7a7b      	ldrb	r3, [r7, #9]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	2300      	movs	r3, #0
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	2302      	movs	r3, #2
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6c:	210a      	movs	r1, #10
 8001d6e:	4832      	ldr	r0, [pc, #200]	; (8001e38 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001d70:	f00b fee4 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2302      	movs	r3, #2
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2300      	movs	r3, #0
 8001d84:	2178      	movs	r1, #120	; 0x78
 8001d86:	482d      	ldr	r0, [pc, #180]	; (8001e3c <FreqMenu_DrawPresetMenu+0xaf8>)
 8001d88:	f00b fed8 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001d8c:	7bbb      	ldrb	r3, [r7, #14]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	2302      	movs	r3, #2
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2178      	movs	r1, #120	; 0x78
 8001d9e:	4828      	ldr	r0, [pc, #160]	; (8001e40 <FreqMenu_DrawPresetMenu+0xafc>)
 8001da0:	f00b fecc 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001da4:	7b7b      	ldrb	r3, [r7, #13]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	2302      	movs	r3, #2
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2300      	movs	r3, #0
 8001db4:	2178      	movs	r1, #120	; 0x78
 8001db6:	4823      	ldr	r0, [pc, #140]	; (8001e44 <FreqMenu_DrawPresetMenu+0xb00>)
 8001db8:	f00b fec0 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001dbc:	7b3b      	ldrb	r3, [r7, #12]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2178      	movs	r1, #120	; 0x78
 8001dce:	481e      	ldr	r0, [pc, #120]	; (8001e48 <FreqMenu_DrawPresetMenu+0xb04>)
 8001dd0:	f00b feb4 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	2302      	movs	r3, #2
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2300      	movs	r3, #0
 8001de4:	2178      	movs	r1, #120	; 0x78
 8001de6:	4819      	ldr	r0, [pc, #100]	; (8001e4c <FreqMenu_DrawPresetMenu+0xb08>)
 8001de8:	f00b fea8 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001dec:	7abb      	ldrb	r3, [r7, #10]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	2302      	movs	r3, #2
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2178      	movs	r1, #120	; 0x78
 8001dfe:	4814      	ldr	r0, [pc, #80]	; (8001e50 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001e00:	f00b fe9c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001e04:	7a7b      	ldrb	r3, [r7, #9]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	2302      	movs	r3, #2
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2300      	movs	r3, #0
 8001e14:	2178      	movs	r1, #120	; 0x78
 8001e16:	480f      	ldr	r0, [pc, #60]	; (8001e54 <FreqMenu_DrawPresetMenu+0xb10>)
 8001e18:	f00b fe90 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8001e1c:	f000 bd1e 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
 8001e20:	08012330 	.word	0x08012330
 8001e24:	08012338 	.word	0x08012338
 8001e28:	08012340 	.word	0x08012340
 8001e2c:	08012348 	.word	0x08012348
 8001e30:	08012350 	.word	0x08012350
 8001e34:	08012358 	.word	0x08012358
 8001e38:	08012360 	.word	0x08012360
 8001e3c:	08012368 	.word	0x08012368
 8001e40:	08012370 	.word	0x08012370
 8001e44:	08012378 	.word	0x08012378
 8001e48:	08012380 	.word	0x08012380
 8001e4c:	08012388 	.word	0x08012388
 8001e50:	08012390 	.word	0x08012390
 8001e54:	08012398 	.word	0x08012398
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	2302      	movs	r3, #2
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	210a      	movs	r1, #10
 8001e6a:	48a5      	ldr	r0, [pc, #660]	; (8002100 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001e6c:	f00b fe66 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	210a      	movs	r1, #10
 8001e82:	48a0      	ldr	r0, [pc, #640]	; (8002104 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001e84:	f00b fe5a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001e88:	7b7b      	ldrb	r3, [r7, #13]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	2302      	movs	r3, #2
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	210a      	movs	r1, #10
 8001e9a:	489b      	ldr	r0, [pc, #620]	; (8002108 <FreqMenu_DrawPresetMenu+0xdc4>)
 8001e9c:	f00b fe4e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001ea0:	7b3b      	ldrb	r3, [r7, #12]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	2302      	movs	r3, #2
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	4896      	ldr	r0, [pc, #600]	; (800210c <FreqMenu_DrawPresetMenu+0xdc8>)
 8001eb4:	f00b fe42 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	210a      	movs	r1, #10
 8001eca:	4891      	ldr	r0, [pc, #580]	; (8002110 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001ecc:	f00b fe36 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001ed0:	7abb      	ldrb	r3, [r7, #10]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	2302      	movs	r3, #2
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	210a      	movs	r1, #10
 8001ee2:	488c      	ldr	r0, [pc, #560]	; (8002114 <FreqMenu_DrawPresetMenu+0xdd0>)
 8001ee4:	f00b fe2a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001ee8:	7a7b      	ldrb	r3, [r7, #9]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	210a      	movs	r1, #10
 8001efa:	4887      	ldr	r0, [pc, #540]	; (8002118 <FreqMenu_DrawPresetMenu+0xdd4>)
 8001efc:	f00b fe1e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	2300      	movs	r3, #0
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	2302      	movs	r3, #2
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f10:	2178      	movs	r1, #120	; 0x78
 8001f12:	4882      	ldr	r0, [pc, #520]	; (800211c <FreqMenu_DrawPresetMenu+0xdd8>)
 8001f14:	f00b fe12 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	2302      	movs	r3, #2
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	2178      	movs	r1, #120	; 0x78
 8001f2a:	487d      	ldr	r0, [pc, #500]	; (8002120 <FreqMenu_DrawPresetMenu+0xddc>)
 8001f2c:	f00b fe06 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f30:	7b7b      	ldrb	r3, [r7, #13]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2178      	movs	r1, #120	; 0x78
 8001f42:	4878      	ldr	r0, [pc, #480]	; (8002124 <FreqMenu_DrawPresetMenu+0xde0>)
 8001f44:	f00b fdfa 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001f48:	7b3b      	ldrb	r3, [r7, #12]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	2302      	movs	r3, #2
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	2178      	movs	r1, #120	; 0x78
 8001f5a:	4873      	ldr	r0, [pc, #460]	; (8002128 <FreqMenu_DrawPresetMenu+0xde4>)
 8001f5c:	f00b fdee 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2178      	movs	r1, #120	; 0x78
 8001f72:	486e      	ldr	r0, [pc, #440]	; (800212c <FreqMenu_DrawPresetMenu+0xde8>)
 8001f74:	f00b fde2 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f78:	7abb      	ldrb	r3, [r7, #10]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	2302      	movs	r3, #2
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	2178      	movs	r1, #120	; 0x78
 8001f8a:	4869      	ldr	r0, [pc, #420]	; (8002130 <FreqMenu_DrawPresetMenu+0xdec>)
 8001f8c:	f00b fdd6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001f90:	7a7b      	ldrb	r3, [r7, #9]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2178      	movs	r1, #120	; 0x78
 8001fa2:	4864      	ldr	r0, [pc, #400]	; (8002134 <FreqMenu_DrawPresetMenu+0xdf0>)
 8001fa4:	f00b fdca 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8001fa8:	f000 bc58 	b.w	800285c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	210a      	movs	r1, #10
 8001fbe:	4850      	ldr	r0, [pc, #320]	; (8002100 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001fc0:	f00b fdbc 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	2302      	movs	r3, #2
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	484b      	ldr	r0, [pc, #300]	; (8002104 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001fd8:	f00b fdb0 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001fdc:	7b7b      	ldrb	r3, [r7, #13]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2300      	movs	r3, #0
 8001fec:	210a      	movs	r1, #10
 8001fee:	4846      	ldr	r0, [pc, #280]	; (8002108 <FreqMenu_DrawPresetMenu+0xdc4>)
 8001ff0:	f00b fda4 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001ff4:	7b3b      	ldrb	r3, [r7, #12]
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	2302      	movs	r3, #2
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2300      	movs	r3, #0
 8002004:	210a      	movs	r1, #10
 8002006:	4841      	ldr	r0, [pc, #260]	; (800210c <FreqMenu_DrawPresetMenu+0xdc8>)
 8002008:	f00b fd98 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800200c:	7afb      	ldrb	r3, [r7, #11]
 800200e:	b29a      	uxth	r2, r3
 8002010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	2302      	movs	r3, #2
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2300      	movs	r3, #0
 800201c:	210a      	movs	r1, #10
 800201e:	483c      	ldr	r0, [pc, #240]	; (8002110 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002020:	f00b fd8c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002024:	7abb      	ldrb	r3, [r7, #10]
 8002026:	b29a      	uxth	r2, r3
 8002028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	2302      	movs	r3, #2
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2300      	movs	r3, #0
 8002034:	210a      	movs	r1, #10
 8002036:	4837      	ldr	r0, [pc, #220]	; (8002114 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002038:	f00b fd80 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800203c:	7a7b      	ldrb	r3, [r7, #9]
 800203e:	b29a      	uxth	r2, r3
 8002040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	2302      	movs	r3, #2
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2300      	movs	r3, #0
 800204c:	210a      	movs	r1, #10
 800204e:	4832      	ldr	r0, [pc, #200]	; (8002118 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002050:	f00b fd74 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	b29a      	uxth	r2, r3
 8002058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2302      	movs	r3, #2
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	2178      	movs	r1, #120	; 0x78
 8002066:	482d      	ldr	r0, [pc, #180]	; (800211c <FreqMenu_DrawPresetMenu+0xdd8>)
 8002068:	f00b fd68 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	b29a      	uxth	r2, r3
 8002070:	2300      	movs	r3, #0
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	2302      	movs	r3, #2
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207c:	2178      	movs	r1, #120	; 0x78
 800207e:	4828      	ldr	r0, [pc, #160]	; (8002120 <FreqMenu_DrawPresetMenu+0xddc>)
 8002080:	f00b fd5c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002084:	7b7b      	ldrb	r3, [r7, #13]
 8002086:	b29a      	uxth	r2, r3
 8002088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	2302      	movs	r3, #2
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2300      	movs	r3, #0
 8002094:	2178      	movs	r1, #120	; 0x78
 8002096:	4823      	ldr	r0, [pc, #140]	; (8002124 <FreqMenu_DrawPresetMenu+0xde0>)
 8002098:	f00b fd50 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800209c:	7b3b      	ldrb	r3, [r7, #12]
 800209e:	b29a      	uxth	r2, r3
 80020a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	2302      	movs	r3, #2
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2300      	movs	r3, #0
 80020ac:	2178      	movs	r1, #120	; 0x78
 80020ae:	481e      	ldr	r0, [pc, #120]	; (8002128 <FreqMenu_DrawPresetMenu+0xde4>)
 80020b0:	f00b fd44 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	2302      	movs	r3, #2
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2300      	movs	r3, #0
 80020c4:	2178      	movs	r1, #120	; 0x78
 80020c6:	4819      	ldr	r0, [pc, #100]	; (800212c <FreqMenu_DrawPresetMenu+0xde8>)
 80020c8:	f00b fd38 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80020cc:	7abb      	ldrb	r3, [r7, #10]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	2302      	movs	r3, #2
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2300      	movs	r3, #0
 80020dc:	2178      	movs	r1, #120	; 0x78
 80020de:	4814      	ldr	r0, [pc, #80]	; (8002130 <FreqMenu_DrawPresetMenu+0xdec>)
 80020e0:	f00b fd2c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80020e4:	7a7b      	ldrb	r3, [r7, #9]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	2302      	movs	r3, #2
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2300      	movs	r3, #0
 80020f4:	2178      	movs	r1, #120	; 0x78
 80020f6:	480f      	ldr	r0, [pc, #60]	; (8002134 <FreqMenu_DrawPresetMenu+0xdf0>)
 80020f8:	f00b fd20 	bl	800db3c <ILI9341_Draw_Text>
				break;
 80020fc:	e3ae      	b.n	800285c <FreqMenu_DrawPresetMenu+0x1518>
 80020fe:	bf00      	nop
 8002100:	08012330 	.word	0x08012330
 8002104:	08012338 	.word	0x08012338
 8002108:	08012340 	.word	0x08012340
 800210c:	08012348 	.word	0x08012348
 8002110:	08012350 	.word	0x08012350
 8002114:	08012358 	.word	0x08012358
 8002118:	08012360 	.word	0x08012360
 800211c:	08012368 	.word	0x08012368
 8002120:	08012370 	.word	0x08012370
 8002124:	08012378 	.word	0x08012378
 8002128:	08012380 	.word	0x08012380
 800212c:	08012388 	.word	0x08012388
 8002130:	08012390 	.word	0x08012390
 8002134:	08012398 	.word	0x08012398
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	b29a      	uxth	r2, r3
 800213c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	2302      	movs	r3, #2
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	210a      	movs	r1, #10
 800214a:	48a4      	ldr	r0, [pc, #656]	; (80023dc <FreqMenu_DrawPresetMenu+0x1098>)
 800214c:	f00b fcf6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	b29a      	uxth	r2, r3
 8002154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	2302      	movs	r3, #2
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2300      	movs	r3, #0
 8002160:	210a      	movs	r1, #10
 8002162:	489f      	ldr	r0, [pc, #636]	; (80023e0 <FreqMenu_DrawPresetMenu+0x109c>)
 8002164:	f00b fcea 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002168:	7b7b      	ldrb	r3, [r7, #13]
 800216a:	b29a      	uxth	r2, r3
 800216c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	2302      	movs	r3, #2
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	210a      	movs	r1, #10
 800217a:	489a      	ldr	r0, [pc, #616]	; (80023e4 <FreqMenu_DrawPresetMenu+0x10a0>)
 800217c:	f00b fcde 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002180:	7b3b      	ldrb	r3, [r7, #12]
 8002182:	b29a      	uxth	r2, r3
 8002184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	2302      	movs	r3, #2
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	210a      	movs	r1, #10
 8002192:	4895      	ldr	r0, [pc, #596]	; (80023e8 <FreqMenu_DrawPresetMenu+0x10a4>)
 8002194:	f00b fcd2 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002198:	7afb      	ldrb	r3, [r7, #11]
 800219a:	b29a      	uxth	r2, r3
 800219c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	2302      	movs	r3, #2
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2300      	movs	r3, #0
 80021a8:	210a      	movs	r1, #10
 80021aa:	4890      	ldr	r0, [pc, #576]	; (80023ec <FreqMenu_DrawPresetMenu+0x10a8>)
 80021ac:	f00b fcc6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80021b0:	7abb      	ldrb	r3, [r7, #10]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	2302      	movs	r3, #2
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2300      	movs	r3, #0
 80021c0:	210a      	movs	r1, #10
 80021c2:	488b      	ldr	r0, [pc, #556]	; (80023f0 <FreqMenu_DrawPresetMenu+0x10ac>)
 80021c4:	f00b fcba 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80021c8:	7a7b      	ldrb	r3, [r7, #9]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2302      	movs	r3, #2
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2300      	movs	r3, #0
 80021d8:	210a      	movs	r1, #10
 80021da:	4886      	ldr	r0, [pc, #536]	; (80023f4 <FreqMenu_DrawPresetMenu+0x10b0>)
 80021dc:	f00b fcae 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	2302      	movs	r3, #2
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2300      	movs	r3, #0
 80021f0:	2178      	movs	r1, #120	; 0x78
 80021f2:	4881      	ldr	r0, [pc, #516]	; (80023f8 <FreqMenu_DrawPresetMenu+0x10b4>)
 80021f4:	f00b fca2 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80021f8:	7bbb      	ldrb	r3, [r7, #14]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	2302      	movs	r3, #2
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	2178      	movs	r1, #120	; 0x78
 800220a:	487c      	ldr	r0, [pc, #496]	; (80023fc <FreqMenu_DrawPresetMenu+0x10b8>)
 800220c:	f00b fc96 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 8002210:	7b7b      	ldrb	r3, [r7, #13]
 8002212:	b29a      	uxth	r2, r3
 8002214:	2300      	movs	r3, #0
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	2302      	movs	r3, #2
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002220:	2178      	movs	r1, #120	; 0x78
 8002222:	4877      	ldr	r0, [pc, #476]	; (8002400 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002224:	f00b fc8a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002228:	7b3b      	ldrb	r3, [r7, #12]
 800222a:	b29a      	uxth	r2, r3
 800222c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2302      	movs	r3, #2
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	2178      	movs	r1, #120	; 0x78
 800223a:	4872      	ldr	r0, [pc, #456]	; (8002404 <FreqMenu_DrawPresetMenu+0x10c0>)
 800223c:	f00b fc7e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002240:	7afb      	ldrb	r3, [r7, #11]
 8002242:	b29a      	uxth	r2, r3
 8002244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	2302      	movs	r3, #2
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2300      	movs	r3, #0
 8002250:	2178      	movs	r1, #120	; 0x78
 8002252:	486d      	ldr	r0, [pc, #436]	; (8002408 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002254:	f00b fc72 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002258:	7abb      	ldrb	r3, [r7, #10]
 800225a:	b29a      	uxth	r2, r3
 800225c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	2302      	movs	r3, #2
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	2178      	movs	r1, #120	; 0x78
 800226a:	4868      	ldr	r0, [pc, #416]	; (800240c <FreqMenu_DrawPresetMenu+0x10c8>)
 800226c:	f00b fc66 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002270:	7a7b      	ldrb	r3, [r7, #9]
 8002272:	b29a      	uxth	r2, r3
 8002274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	2302      	movs	r3, #2
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2300      	movs	r3, #0
 8002280:	2178      	movs	r1, #120	; 0x78
 8002282:	4863      	ldr	r0, [pc, #396]	; (8002410 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002284:	f00b fc5a 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8002288:	e2e8      	b.n	800285c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	b29a      	uxth	r2, r3
 800228e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	2302      	movs	r3, #2
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	210a      	movs	r1, #10
 800229c:	484f      	ldr	r0, [pc, #316]	; (80023dc <FreqMenu_DrawPresetMenu+0x1098>)
 800229e:	f00b fc4d 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80022a2:	7bbb      	ldrb	r3, [r7, #14]
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	2302      	movs	r3, #2
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2300      	movs	r3, #0
 80022b2:	210a      	movs	r1, #10
 80022b4:	484a      	ldr	r0, [pc, #296]	; (80023e0 <FreqMenu_DrawPresetMenu+0x109c>)
 80022b6:	f00b fc41 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80022ba:	7b7b      	ldrb	r3, [r7, #13]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	2302      	movs	r3, #2
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2300      	movs	r3, #0
 80022ca:	210a      	movs	r1, #10
 80022cc:	4845      	ldr	r0, [pc, #276]	; (80023e4 <FreqMenu_DrawPresetMenu+0x10a0>)
 80022ce:	f00b fc35 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80022d2:	7b3b      	ldrb	r3, [r7, #12]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	2302      	movs	r3, #2
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2300      	movs	r3, #0
 80022e2:	210a      	movs	r1, #10
 80022e4:	4840      	ldr	r0, [pc, #256]	; (80023e8 <FreqMenu_DrawPresetMenu+0x10a4>)
 80022e6:	f00b fc29 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80022ea:	7afb      	ldrb	r3, [r7, #11]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	2302      	movs	r3, #2
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2300      	movs	r3, #0
 80022fa:	210a      	movs	r1, #10
 80022fc:	483b      	ldr	r0, [pc, #236]	; (80023ec <FreqMenu_DrawPresetMenu+0x10a8>)
 80022fe:	f00b fc1d 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002302:	7abb      	ldrb	r3, [r7, #10]
 8002304:	b29a      	uxth	r2, r3
 8002306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	2302      	movs	r3, #2
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2300      	movs	r3, #0
 8002312:	210a      	movs	r1, #10
 8002314:	4836      	ldr	r0, [pc, #216]	; (80023f0 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002316:	f00b fc11 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800231a:	7a7b      	ldrb	r3, [r7, #9]
 800231c:	b29a      	uxth	r2, r3
 800231e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	2302      	movs	r3, #2
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	210a      	movs	r1, #10
 800232c:	4831      	ldr	r0, [pc, #196]	; (80023f4 <FreqMenu_DrawPresetMenu+0x10b0>)
 800232e:	f00b fc05 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	b29a      	uxth	r2, r3
 8002336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	2302      	movs	r3, #2
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2300      	movs	r3, #0
 8002342:	2178      	movs	r1, #120	; 0x78
 8002344:	482c      	ldr	r0, [pc, #176]	; (80023f8 <FreqMenu_DrawPresetMenu+0x10b4>)
 8002346:	f00b fbf9 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800234a:	7bbb      	ldrb	r3, [r7, #14]
 800234c:	b29a      	uxth	r2, r3
 800234e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	2302      	movs	r3, #2
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2300      	movs	r3, #0
 800235a:	2178      	movs	r1, #120	; 0x78
 800235c:	4827      	ldr	r0, [pc, #156]	; (80023fc <FreqMenu_DrawPresetMenu+0x10b8>)
 800235e:	f00b fbed 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002362:	7b7b      	ldrb	r3, [r7, #13]
 8002364:	b29a      	uxth	r2, r3
 8002366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	2302      	movs	r3, #2
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2300      	movs	r3, #0
 8002372:	2178      	movs	r1, #120	; 0x78
 8002374:	4822      	ldr	r0, [pc, #136]	; (8002400 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002376:	f00b fbe1 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 800237a:	7b3b      	ldrb	r3, [r7, #12]
 800237c:	b29a      	uxth	r2, r3
 800237e:	2300      	movs	r3, #0
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	2302      	movs	r3, #2
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238a:	2178      	movs	r1, #120	; 0x78
 800238c:	481d      	ldr	r0, [pc, #116]	; (8002404 <FreqMenu_DrawPresetMenu+0x10c0>)
 800238e:	f00b fbd5 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	b29a      	uxth	r2, r3
 8002396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	2302      	movs	r3, #2
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2300      	movs	r3, #0
 80023a2:	2178      	movs	r1, #120	; 0x78
 80023a4:	4818      	ldr	r0, [pc, #96]	; (8002408 <FreqMenu_DrawPresetMenu+0x10c4>)
 80023a6:	f00b fbc9 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80023aa:	7abb      	ldrb	r3, [r7, #10]
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	2302      	movs	r3, #2
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2300      	movs	r3, #0
 80023ba:	2178      	movs	r1, #120	; 0x78
 80023bc:	4813      	ldr	r0, [pc, #76]	; (800240c <FreqMenu_DrawPresetMenu+0x10c8>)
 80023be:	f00b fbbd 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80023c2:	7a7b      	ldrb	r3, [r7, #9]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	2302      	movs	r3, #2
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2300      	movs	r3, #0
 80023d2:	2178      	movs	r1, #120	; 0x78
 80023d4:	480e      	ldr	r0, [pc, #56]	; (8002410 <FreqMenu_DrawPresetMenu+0x10cc>)
 80023d6:	f00b fbb1 	bl	800db3c <ILI9341_Draw_Text>
				break;
 80023da:	e23f      	b.n	800285c <FreqMenu_DrawPresetMenu+0x1518>
 80023dc:	08012330 	.word	0x08012330
 80023e0:	08012338 	.word	0x08012338
 80023e4:	08012340 	.word	0x08012340
 80023e8:	08012348 	.word	0x08012348
 80023ec:	08012350 	.word	0x08012350
 80023f0:	08012358 	.word	0x08012358
 80023f4:	08012360 	.word	0x08012360
 80023f8:	08012368 	.word	0x08012368
 80023fc:	08012370 	.word	0x08012370
 8002400:	08012378 	.word	0x08012378
 8002404:	08012380 	.word	0x08012380
 8002408:	08012388 	.word	0x08012388
 800240c:	08012390 	.word	0x08012390
 8002410:	08012398 	.word	0x08012398
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	b29a      	uxth	r2, r3
 8002418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	2302      	movs	r3, #2
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2300      	movs	r3, #0
 8002424:	210a      	movs	r1, #10
 8002426:	48a4      	ldr	r0, [pc, #656]	; (80026b8 <FreqMenu_DrawPresetMenu+0x1374>)
 8002428:	f00b fb88 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800242c:	7bbb      	ldrb	r3, [r7, #14]
 800242e:	b29a      	uxth	r2, r3
 8002430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	2302      	movs	r3, #2
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2300      	movs	r3, #0
 800243c:	210a      	movs	r1, #10
 800243e:	489f      	ldr	r0, [pc, #636]	; (80026bc <FreqMenu_DrawPresetMenu+0x1378>)
 8002440:	f00b fb7c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002444:	7b7b      	ldrb	r3, [r7, #13]
 8002446:	b29a      	uxth	r2, r3
 8002448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	2302      	movs	r3, #2
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2300      	movs	r3, #0
 8002454:	210a      	movs	r1, #10
 8002456:	489a      	ldr	r0, [pc, #616]	; (80026c0 <FreqMenu_DrawPresetMenu+0x137c>)
 8002458:	f00b fb70 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800245c:	7b3b      	ldrb	r3, [r7, #12]
 800245e:	b29a      	uxth	r2, r3
 8002460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	2302      	movs	r3, #2
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2300      	movs	r3, #0
 800246c:	210a      	movs	r1, #10
 800246e:	4895      	ldr	r0, [pc, #596]	; (80026c4 <FreqMenu_DrawPresetMenu+0x1380>)
 8002470:	f00b fb64 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	b29a      	uxth	r2, r3
 8002478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	2302      	movs	r3, #2
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2300      	movs	r3, #0
 8002484:	210a      	movs	r1, #10
 8002486:	4890      	ldr	r0, [pc, #576]	; (80026c8 <FreqMenu_DrawPresetMenu+0x1384>)
 8002488:	f00b fb58 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800248c:	7abb      	ldrb	r3, [r7, #10]
 800248e:	b29a      	uxth	r2, r3
 8002490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	2302      	movs	r3, #2
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2300      	movs	r3, #0
 800249c:	210a      	movs	r1, #10
 800249e:	488b      	ldr	r0, [pc, #556]	; (80026cc <FreqMenu_DrawPresetMenu+0x1388>)
 80024a0:	f00b fb4c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80024a4:	7a7b      	ldrb	r3, [r7, #9]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	2302      	movs	r3, #2
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	210a      	movs	r1, #10
 80024b6:	4886      	ldr	r0, [pc, #536]	; (80026d0 <FreqMenu_DrawPresetMenu+0x138c>)
 80024b8:	f00b fb40 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	2302      	movs	r3, #2
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2300      	movs	r3, #0
 80024cc:	2178      	movs	r1, #120	; 0x78
 80024ce:	4881      	ldr	r0, [pc, #516]	; (80026d4 <FreqMenu_DrawPresetMenu+0x1390>)
 80024d0:	f00b fb34 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80024d4:	7bbb      	ldrb	r3, [r7, #14]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	2302      	movs	r3, #2
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2300      	movs	r3, #0
 80024e4:	2178      	movs	r1, #120	; 0x78
 80024e6:	487c      	ldr	r0, [pc, #496]	; (80026d8 <FreqMenu_DrawPresetMenu+0x1394>)
 80024e8:	f00b fb28 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80024ec:	7b7b      	ldrb	r3, [r7, #13]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	2302      	movs	r3, #2
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	2178      	movs	r1, #120	; 0x78
 80024fe:	4877      	ldr	r0, [pc, #476]	; (80026dc <FreqMenu_DrawPresetMenu+0x1398>)
 8002500:	f00b fb1c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002504:	7b3b      	ldrb	r3, [r7, #12]
 8002506:	b29a      	uxth	r2, r3
 8002508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	2302      	movs	r3, #2
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2300      	movs	r3, #0
 8002514:	2178      	movs	r1, #120	; 0x78
 8002516:	4872      	ldr	r0, [pc, #456]	; (80026e0 <FreqMenu_DrawPresetMenu+0x139c>)
 8002518:	f00b fb10 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 800251c:	7afb      	ldrb	r3, [r7, #11]
 800251e:	b29a      	uxth	r2, r3
 8002520:	2300      	movs	r3, #0
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	2302      	movs	r3, #2
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252c:	2178      	movs	r1, #120	; 0x78
 800252e:	486d      	ldr	r0, [pc, #436]	; (80026e4 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002530:	f00b fb04 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002534:	7abb      	ldrb	r3, [r7, #10]
 8002536:	b29a      	uxth	r2, r3
 8002538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	2302      	movs	r3, #2
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	2178      	movs	r1, #120	; 0x78
 8002546:	4868      	ldr	r0, [pc, #416]	; (80026e8 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002548:	f00b faf8 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800254c:	7a7b      	ldrb	r3, [r7, #9]
 800254e:	b29a      	uxth	r2, r3
 8002550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	2302      	movs	r3, #2
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2300      	movs	r3, #0
 800255c:	2178      	movs	r1, #120	; 0x78
 800255e:	4863      	ldr	r0, [pc, #396]	; (80026ec <FreqMenu_DrawPresetMenu+0x13a8>)
 8002560:	f00b faec 	bl	800db3c <ILI9341_Draw_Text>
			break;
 8002564:	e17a      	b.n	800285c <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	b29a      	uxth	r2, r3
 800256a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	2302      	movs	r3, #2
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2300      	movs	r3, #0
 8002576:	210a      	movs	r1, #10
 8002578:	484f      	ldr	r0, [pc, #316]	; (80026b8 <FreqMenu_DrawPresetMenu+0x1374>)
 800257a:	f00b fadf 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800257e:	7bbb      	ldrb	r3, [r7, #14]
 8002580:	b29a      	uxth	r2, r3
 8002582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	2302      	movs	r3, #2
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2300      	movs	r3, #0
 800258e:	210a      	movs	r1, #10
 8002590:	484a      	ldr	r0, [pc, #296]	; (80026bc <FreqMenu_DrawPresetMenu+0x1378>)
 8002592:	f00b fad3 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002596:	7b7b      	ldrb	r3, [r7, #13]
 8002598:	b29a      	uxth	r2, r3
 800259a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	2302      	movs	r3, #2
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2300      	movs	r3, #0
 80025a6:	210a      	movs	r1, #10
 80025a8:	4845      	ldr	r0, [pc, #276]	; (80026c0 <FreqMenu_DrawPresetMenu+0x137c>)
 80025aa:	f00b fac7 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80025ae:	7b3b      	ldrb	r3, [r7, #12]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	2302      	movs	r3, #2
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2300      	movs	r3, #0
 80025be:	210a      	movs	r1, #10
 80025c0:	4840      	ldr	r0, [pc, #256]	; (80026c4 <FreqMenu_DrawPresetMenu+0x1380>)
 80025c2:	f00b fabb 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	2302      	movs	r3, #2
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2300      	movs	r3, #0
 80025d6:	210a      	movs	r1, #10
 80025d8:	483b      	ldr	r0, [pc, #236]	; (80026c8 <FreqMenu_DrawPresetMenu+0x1384>)
 80025da:	f00b faaf 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80025de:	7abb      	ldrb	r3, [r7, #10]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	2302      	movs	r3, #2
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2300      	movs	r3, #0
 80025ee:	210a      	movs	r1, #10
 80025f0:	4836      	ldr	r0, [pc, #216]	; (80026cc <FreqMenu_DrawPresetMenu+0x1388>)
 80025f2:	f00b faa3 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80025f6:	7a7b      	ldrb	r3, [r7, #9]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	2302      	movs	r3, #2
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2300      	movs	r3, #0
 8002606:	210a      	movs	r1, #10
 8002608:	4831      	ldr	r0, [pc, #196]	; (80026d0 <FreqMenu_DrawPresetMenu+0x138c>)
 800260a:	f00b fa97 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	b29a      	uxth	r2, r3
 8002612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	2302      	movs	r3, #2
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2300      	movs	r3, #0
 800261e:	2178      	movs	r1, #120	; 0x78
 8002620:	482c      	ldr	r0, [pc, #176]	; (80026d4 <FreqMenu_DrawPresetMenu+0x1390>)
 8002622:	f00b fa8b 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002626:	7bbb      	ldrb	r3, [r7, #14]
 8002628:	b29a      	uxth	r2, r3
 800262a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	2302      	movs	r3, #2
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2300      	movs	r3, #0
 8002636:	2178      	movs	r1, #120	; 0x78
 8002638:	4827      	ldr	r0, [pc, #156]	; (80026d8 <FreqMenu_DrawPresetMenu+0x1394>)
 800263a:	f00b fa7f 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	b29a      	uxth	r2, r3
 8002642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	2302      	movs	r3, #2
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2300      	movs	r3, #0
 800264e:	2178      	movs	r1, #120	; 0x78
 8002650:	4822      	ldr	r0, [pc, #136]	; (80026dc <FreqMenu_DrawPresetMenu+0x1398>)
 8002652:	f00b fa73 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002656:	7b3b      	ldrb	r3, [r7, #12]
 8002658:	b29a      	uxth	r2, r3
 800265a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	2302      	movs	r3, #2
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2300      	movs	r3, #0
 8002666:	2178      	movs	r1, #120	; 0x78
 8002668:	481d      	ldr	r0, [pc, #116]	; (80026e0 <FreqMenu_DrawPresetMenu+0x139c>)
 800266a:	f00b fa67 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800266e:	7afb      	ldrb	r3, [r7, #11]
 8002670:	b29a      	uxth	r2, r3
 8002672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	2302      	movs	r3, #2
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2300      	movs	r3, #0
 800267e:	2178      	movs	r1, #120	; 0x78
 8002680:	4818      	ldr	r0, [pc, #96]	; (80026e4 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002682:	f00b fa5b 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 8002686:	7abb      	ldrb	r3, [r7, #10]
 8002688:	b29a      	uxth	r2, r3
 800268a:	2300      	movs	r3, #0
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2302      	movs	r3, #2
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002696:	2178      	movs	r1, #120	; 0x78
 8002698:	4813      	ldr	r0, [pc, #76]	; (80026e8 <FreqMenu_DrawPresetMenu+0x13a4>)
 800269a:	f00b fa4f 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800269e:	7a7b      	ldrb	r3, [r7, #9]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2302      	movs	r3, #2
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	2178      	movs	r1, #120	; 0x78
 80026b0:	480e      	ldr	r0, [pc, #56]	; (80026ec <FreqMenu_DrawPresetMenu+0x13a8>)
 80026b2:	f00b fa43 	bl	800db3c <ILI9341_Draw_Text>
			break;
 80026b6:	e0d1      	b.n	800285c <FreqMenu_DrawPresetMenu+0x1518>
 80026b8:	08012330 	.word	0x08012330
 80026bc:	08012338 	.word	0x08012338
 80026c0:	08012340 	.word	0x08012340
 80026c4:	08012348 	.word	0x08012348
 80026c8:	08012350 	.word	0x08012350
 80026cc:	08012358 	.word	0x08012358
 80026d0:	08012360 	.word	0x08012360
 80026d4:	08012368 	.word	0x08012368
 80026d8:	08012370 	.word	0x08012370
 80026dc:	08012378 	.word	0x08012378
 80026e0:	08012380 	.word	0x08012380
 80026e4:	08012388 	.word	0x08012388
 80026e8:	08012390 	.word	0x08012390
 80026ec:	08012398 	.word	0x08012398
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	2302      	movs	r3, #2
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2300      	movs	r3, #0
 8002700:	210a      	movs	r1, #10
 8002702:	4858      	ldr	r0, [pc, #352]	; (8002864 <FreqMenu_DrawPresetMenu+0x1520>)
 8002704:	f00b fa1a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002708:	7bbb      	ldrb	r3, [r7, #14]
 800270a:	b29a      	uxth	r2, r3
 800270c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	2302      	movs	r3, #2
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2300      	movs	r3, #0
 8002718:	210a      	movs	r1, #10
 800271a:	4853      	ldr	r0, [pc, #332]	; (8002868 <FreqMenu_DrawPresetMenu+0x1524>)
 800271c:	f00b fa0e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002720:	7b7b      	ldrb	r3, [r7, #13]
 8002722:	b29a      	uxth	r2, r3
 8002724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	2302      	movs	r3, #2
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	210a      	movs	r1, #10
 8002732:	484e      	ldr	r0, [pc, #312]	; (800286c <FreqMenu_DrawPresetMenu+0x1528>)
 8002734:	f00b fa02 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002738:	7b3b      	ldrb	r3, [r7, #12]
 800273a:	b29a      	uxth	r2, r3
 800273c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	2302      	movs	r3, #2
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2300      	movs	r3, #0
 8002748:	210a      	movs	r1, #10
 800274a:	4849      	ldr	r0, [pc, #292]	; (8002870 <FreqMenu_DrawPresetMenu+0x152c>)
 800274c:	f00b f9f6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002750:	7afb      	ldrb	r3, [r7, #11]
 8002752:	b29a      	uxth	r2, r3
 8002754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	2302      	movs	r3, #2
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2300      	movs	r3, #0
 8002760:	210a      	movs	r1, #10
 8002762:	4844      	ldr	r0, [pc, #272]	; (8002874 <FreqMenu_DrawPresetMenu+0x1530>)
 8002764:	f00b f9ea 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002768:	7abb      	ldrb	r3, [r7, #10]
 800276a:	b29a      	uxth	r2, r3
 800276c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	2302      	movs	r3, #2
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2300      	movs	r3, #0
 8002778:	210a      	movs	r1, #10
 800277a:	483f      	ldr	r0, [pc, #252]	; (8002878 <FreqMenu_DrawPresetMenu+0x1534>)
 800277c:	f00b f9de 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002780:	7a7b      	ldrb	r3, [r7, #9]
 8002782:	b29a      	uxth	r2, r3
 8002784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	2302      	movs	r3, #2
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	210a      	movs	r1, #10
 8002792:	483a      	ldr	r0, [pc, #232]	; (800287c <FreqMenu_DrawPresetMenu+0x1538>)
 8002794:	f00b f9d2 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	b29a      	uxth	r2, r3
 800279c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	2302      	movs	r3, #2
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2300      	movs	r3, #0
 80027a8:	2178      	movs	r1, #120	; 0x78
 80027aa:	4835      	ldr	r0, [pc, #212]	; (8002880 <FreqMenu_DrawPresetMenu+0x153c>)
 80027ac:	f00b f9c6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80027b0:	7bbb      	ldrb	r3, [r7, #14]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	2302      	movs	r3, #2
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2300      	movs	r3, #0
 80027c0:	2178      	movs	r1, #120	; 0x78
 80027c2:	4830      	ldr	r0, [pc, #192]	; (8002884 <FreqMenu_DrawPresetMenu+0x1540>)
 80027c4:	f00b f9ba 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80027c8:	7b7b      	ldrb	r3, [r7, #13]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	2302      	movs	r3, #2
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2300      	movs	r3, #0
 80027d8:	2178      	movs	r1, #120	; 0x78
 80027da:	482b      	ldr	r0, [pc, #172]	; (8002888 <FreqMenu_DrawPresetMenu+0x1544>)
 80027dc:	f00b f9ae 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80027e0:	7b3b      	ldrb	r3, [r7, #12]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	2302      	movs	r3, #2
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2300      	movs	r3, #0
 80027f0:	2178      	movs	r1, #120	; 0x78
 80027f2:	4826      	ldr	r0, [pc, #152]	; (800288c <FreqMenu_DrawPresetMenu+0x1548>)
 80027f4:	f00b f9a2 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80027f8:	7afb      	ldrb	r3, [r7, #11]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2302      	movs	r3, #2
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2300      	movs	r3, #0
 8002808:	2178      	movs	r1, #120	; 0x78
 800280a:	4821      	ldr	r0, [pc, #132]	; (8002890 <FreqMenu_DrawPresetMenu+0x154c>)
 800280c:	f00b f996 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002810:	7abb      	ldrb	r3, [r7, #10]
 8002812:	b29a      	uxth	r2, r3
 8002814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	2302      	movs	r3, #2
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2300      	movs	r3, #0
 8002820:	2178      	movs	r1, #120	; 0x78
 8002822:	481c      	ldr	r0, [pc, #112]	; (8002894 <FreqMenu_DrawPresetMenu+0x1550>)
 8002824:	f00b f98a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 8002828:	7a7b      	ldrb	r3, [r7, #9]
 800282a:	b29a      	uxth	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2302      	movs	r3, #2
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002838:	2178      	movs	r1, #120	; 0x78
 800283a:	4817      	ldr	r0, [pc, #92]	; (8002898 <FreqMenu_DrawPresetMenu+0x1554>)
 800283c:	f00b f97e 	bl	800db3c <ILI9341_Draw_Text>
			break;
 8002840:	bf00      	nop
 8002842:	e00b      	b.n	800285c <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002844:	2300      	movs	r3, #0
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	2301      	movs	r3, #1
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002850:	22b4      	movs	r2, #180	; 0xb4
 8002852:	210a      	movs	r1, #10
 8002854:	4811      	ldr	r0, [pc, #68]	; (800289c <FreqMenu_DrawPresetMenu+0x1558>)
 8002856:	f00b f971 	bl	800db3c <ILI9341_Draw_Text>
}
 800285a:	e7ff      	b.n	800285c <FreqMenu_DrawPresetMenu+0x1518>
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	08012330 	.word	0x08012330
 8002868:	08012338 	.word	0x08012338
 800286c:	08012340 	.word	0x08012340
 8002870:	08012348 	.word	0x08012348
 8002874:	08012350 	.word	0x08012350
 8002878:	08012358 	.word	0x08012358
 800287c:	08012360 	.word	0x08012360
 8002880:	08012368 	.word	0x08012368
 8002884:	08012370 	.word	0x08012370
 8002888:	08012378 	.word	0x08012378
 800288c:	08012380 	.word	0x08012380
 8002890:	08012388 	.word	0x08012388
 8002894:	08012390 	.word	0x08012390
 8002898:	08012398 	.word	0x08012398
 800289c:	080123a4 	.word	0x080123a4

080028a0 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 10, 10, WHITE, 2, BLACK);
 80028a6:	2300      	movs	r3, #0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2302      	movs	r3, #2
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b2:	220a      	movs	r2, #10
 80028b4:	210a      	movs	r1, #10
 80028b6:	4804      	ldr	r0, [pc, #16]	; (80028c8 <FreqMenu_DrawAdjustMenu+0x28>)
 80028b8:	f00b f940 	bl	800db3c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80028bc:	f7fe fb12 	bl	8000ee4 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	080123d4 	.word	0x080123d4

080028cc <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b0a0      	sub	sp, #128	; 0x80
 80028d0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	10, 10, WHITE, 2, BLACK);
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2302      	movs	r3, #2
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028de:	220a      	movs	r2, #10
 80028e0:	210a      	movs	r1, #10
 80028e2:	48a0      	ldr	r0, [pc, #640]	; (8002b64 <FreqMenu_DrawSweepMenu+0x298>)
 80028e4:	f00b f92a 	bl	800db3c <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 80028e8:	2300      	movs	r3, #0
 80028ea:	667b      	str	r3, [r7, #100]	; 0x64
 80028ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 80028fa:	4b9b      	ldr	r3, [pc, #620]	; (8002b68 <FreqMenu_DrawSweepMenu+0x29c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d109      	bne.n	800291a <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002906:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800290a:	4a98      	ldr	r2, [pc, #608]	; (8002b6c <FreqMenu_DrawSweepMenu+0x2a0>)
 800290c:	461c      	mov	r4, r3
 800290e:	4615      	mov	r5, r2
 8002910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	7023      	strb	r3, [r4, #0]
 8002918:	e008      	b.n	800292c <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 800291a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800291e:	4a94      	ldr	r2, [pc, #592]	; (8002b70 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002920:	461c      	mov	r4, r3
 8002922:	4615      	mov	r5, r2
 8002924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 10, 40, BLACK, 2, WHITE);
 800292c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	2302      	movs	r3, #2
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2300      	movs	r3, #0
 800293c:	2228      	movs	r2, #40	; 0x28
 800293e:	210a      	movs	r1, #10
 8002940:	f00b f8fc 	bl	800db3c <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002944:	2300      	movs	r3, #0
 8002946:	64bb      	str	r3, [r7, #72]	; 0x48
 8002948:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
 8002958:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 800295a:	f002 feeb 	bl	8005734 <SM_GetOutputInHertz>
 800295e:	ee10 3a10 	vmov	r3, s0
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fe18 	bl	8000598 <__aeabi_f2d>
 8002968:	4603      	mov	r3, r0
 800296a:	460c      	mov	r4, r1
 800296c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002970:	e9cd 3400 	strd	r3, r4, [sp]
 8002974:	4a7f      	ldr	r2, [pc, #508]	; (8002b74 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002976:	2119      	movs	r1, #25
 8002978:	f00c fc2c 	bl	800f1d4 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 10, 60, BLACK, 2, WHITE);
 800297c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2302      	movs	r3, #2
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2300      	movs	r3, #0
 800298c:	223c      	movs	r2, #60	; 0x3c
 800298e:	210a      	movs	r1, #10
 8002990:	f00b f8d4 	bl	800db3c <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 10, 100, BLACK, 2, WHITE);
 8002994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2302      	movs	r3, #2
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2300      	movs	r3, #0
 80029a0:	2264      	movs	r2, #100	; 0x64
 80029a2:	210a      	movs	r1, #10
 80029a4:	4874      	ldr	r0, [pc, #464]	; (8002b78 <FreqMenu_DrawSweepMenu+0x2ac>)
 80029a6:	f00b f8c9 	bl	800db3c <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80029aa:	4b6f      	ldr	r3, [pc, #444]	; (8002b68 <FreqMenu_DrawSweepMenu+0x29c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d116      	bne.n	80029e4 <FreqMenu_DrawSweepMenu+0x118>
		{
			ILI9341_Draw_Text("UP", 170, 100, BLACK, 2, WHITE);
 80029b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	2302      	movs	r3, #2
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2300      	movs	r3, #0
 80029c2:	2264      	movs	r2, #100	; 0x64
 80029c4:	21aa      	movs	r1, #170	; 0xaa
 80029c6:	486d      	ldr	r0, [pc, #436]	; (8002b7c <FreqMenu_DrawSweepMenu+0x2b0>)
 80029c8:	f00b f8b8 	bl	800db3c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 200, 100, WHITE, 2, BLACK);
 80029cc:	2300      	movs	r3, #0
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	2302      	movs	r3, #2
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d8:	2264      	movs	r2, #100	; 0x64
 80029da:	21c8      	movs	r1, #200	; 0xc8
 80029dc:	4868      	ldr	r0, [pc, #416]	; (8002b80 <FreqMenu_DrawSweepMenu+0x2b4>)
 80029de:	f00b f8ad 	bl	800db3c <ILI9341_Draw_Text>
 80029e2:	e015      	b.n	8002a10 <FreqMenu_DrawSweepMenu+0x144>
		}
		else
		{
			ILI9341_Draw_Text("UP", 170, 100, WHITE, 2, BLACK);
 80029e4:	2300      	movs	r3, #0
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	2302      	movs	r3, #2
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f0:	2264      	movs	r2, #100	; 0x64
 80029f2:	21aa      	movs	r1, #170	; 0xaa
 80029f4:	4861      	ldr	r0, [pc, #388]	; (8002b7c <FreqMenu_DrawSweepMenu+0x2b0>)
 80029f6:	f00b f8a1 	bl	800db3c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 200, 100, BLACK, 2, WHITE);
 80029fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	2302      	movs	r3, #2
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2300      	movs	r3, #0
 8002a06:	2264      	movs	r2, #100	; 0x64
 8002a08:	21c8      	movs	r1, #200	; 0xc8
 8002a0a:	485d      	ldr	r0, [pc, #372]	; (8002b80 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002a0c:	f00b f896 	bl	800db3c <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002a10:	4b5c      	ldr	r3, [pc, #368]	; (8002b84 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <FreqMenu_DrawSweepMenu+0x164>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 10, 120, WHITE, 2, BLACK);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a24:	2278      	movs	r2, #120	; 0x78
 8002a26:	210a      	movs	r1, #10
 8002a28:	4857      	ldr	r0, [pc, #348]	; (8002b88 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002a2a:	f00b f887 	bl	800db3c <ILI9341_Draw_Text>
 8002a2e:	e00a      	b.n	8002a46 <FreqMenu_DrawSweepMenu+0x17a>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 10, 120, BLACK, 2, WHITE);
 8002a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	2302      	movs	r3, #2
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2278      	movs	r2, #120	; 0x78
 8002a3e:	210a      	movs	r1, #10
 8002a40:	4851      	ldr	r0, [pc, #324]	; (8002b88 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002a42:	f00b f87b 	bl	800db3c <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	611a      	str	r2, [r3, #16]
 8002a5a:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), " %8.3f Hz", calculated_sweep_in_hertz);
 8002a5c:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <FreqMenu_DrawSweepMenu+0x2c0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd99 	bl	8000598 <__aeabi_f2d>
 8002a66:	4603      	mov	r3, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002a6e:	e9cd 3400 	strd	r3, r4, [sp]
 8002a72:	4a47      	ldr	r2, [pc, #284]	; (8002b90 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002a74:	2119      	movs	r1, #25
 8002a76:	f00c fbad 	bl	800f1d4 <sniprintf>
	ILI9341_Draw_Text(arr_text, 170, 120, BLACK, 2, WHITE);
 8002a7a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	2302      	movs	r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2278      	movs	r2, #120	; 0x78
 8002a8c:	21aa      	movs	r1, #170	; 0xaa
 8002a8e:	f00b f855 	bl	800db3c <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002a92:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d10f      	bne.n	8002aba <FreqMenu_DrawSweepMenu+0x1ee>
 8002a9a:	4b3e      	ldr	r3, [pc, #248]	; (8002b94 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <FreqMenu_DrawSweepMenu+0x1ee>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 10, 140, WHITE, 2, BLACK);	// highlighted
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aae:	228c      	movs	r2, #140	; 0x8c
 8002ab0:	210a      	movs	r1, #10
 8002ab2:	4839      	ldr	r0, [pc, #228]	; (8002b98 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002ab4:	f00b f842 	bl	800db3c <ILI9341_Draw_Text>
 8002ab8:	e00a      	b.n	8002ad0 <FreqMenu_DrawSweepMenu+0x204>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 10, 140, BLACK, 2, WHITE);
 8002aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	228c      	movs	r2, #140	; 0x8c
 8002ac8:	210a      	movs	r1, #10
 8002aca:	4833      	ldr	r0, [pc, #204]	; (8002b98 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002acc:	f00b f836 	bl	800db3c <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	f107 031c 	add.w	r3, r7, #28
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), " %7.2f Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <FreqMenu_DrawSweepMenu+0x2d0>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aec:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4619      	mov	r1, r3
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f002 fe60 	bl	80057bc <SM_ConvertPeriodToHertz>
 8002afc:	eeb0 7a40 	vmov.f32	s14, s0
 8002b00:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002ba4 <FreqMenu_DrawSweepMenu+0x2d8>
 8002b04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b08:	ee16 0a90 	vmov	r0, s13
 8002b0c:	f7fd fd44 	bl	8000598 <__aeabi_f2d>
 8002b10:	4603      	mov	r3, r0
 8002b12:	460c      	mov	r4, r1
 8002b14:	f107 0018 	add.w	r0, r7, #24
 8002b18:	e9cd 3400 	strd	r3, r4, [sp]
 8002b1c:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <FreqMenu_DrawSweepMenu+0x2dc>)
 8002b1e:	2114      	movs	r1, #20
 8002b20:	f00c fb58 	bl	800f1d4 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 170, 140, BLACK, 2, WHITE);
 8002b24:	f107 0018 	add.w	r0, r7, #24
 8002b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2302      	movs	r3, #2
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	228c      	movs	r2, #140	; 0x8c
 8002b36:	21aa      	movs	r1, #170	; 0xaa
 8002b38:	f00b f800 	bl	800db3c <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d135      	bne.n	8002bb0 <FreqMenu_DrawSweepMenu+0x2e4>
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d131      	bne.n	8002bb0 <FreqMenu_DrawSweepMenu+0x2e4>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 10, 160, WHITE, 2, BLACK); 	// highlighted
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	2302      	movs	r3, #2
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b58:	22a0      	movs	r2, #160	; 0xa0
 8002b5a:	210a      	movs	r1, #10
 8002b5c:	4813      	ldr	r0, [pc, #76]	; (8002bac <FreqMenu_DrawSweepMenu+0x2e0>)
 8002b5e:	f00a ffed 	bl	800db3c <ILI9341_Draw_Text>
 8002b62:	e030      	b.n	8002bc6 <FreqMenu_DrawSweepMenu+0x2fa>
 8002b64:	080123e8 	.word	0x080123e8
 8002b68:	40000c00 	.word	0x40000c00
 8002b6c:	080123fc 	.word	0x080123fc
 8002b70:	08012410 	.word	0x08012410
 8002b74:	08012424 	.word	0x08012424
 8002b78:	08012438 	.word	0x08012438
 8002b7c:	08012444 	.word	0x08012444
 8002b80:	08012448 	.word	0x08012448
 8002b84:	20001f1d 	.word	0x20001f1d
 8002b88:	08012450 	.word	0x08012450
 8002b8c:	20001f38 	.word	0x20001f38
 8002b90:	08012460 	.word	0x08012460
 8002b94:	20001f1c 	.word	0x20001f1c
 8002b98:	0801246c 	.word	0x0801246c
 8002b9c:	20000008 	.word	0x20000008
 8002ba0:	40013400 	.word	0x40013400
 8002ba4:	42f00000 	.word	0x42f00000
 8002ba8:	0801247c 	.word	0x0801247c
 8002bac:	08012488 	.word	0x08012488
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 10, 160, BLACK, 2, WHITE);
 8002bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	22a0      	movs	r2, #160	; 0xa0
 8002bbe:	210a      	movs	r1, #10
 8002bc0:	484d      	ldr	r0, [pc, #308]	; (8002cf8 <FreqMenu_DrawSweepMenu+0x42c>)
 8002bc2:	f00a ffbb 	bl	800db3c <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), " %7.2f Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002bd8:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <FreqMenu_DrawSweepMenu+0x430>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <FreqMenu_DrawSweepMenu+0x434>)
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4619      	mov	r1, r3
 8002bea:	ee17 0a90 	vmov	r0, s15
 8002bee:	f002 fde5 	bl	80057bc <SM_ConvertPeriodToHertz>
 8002bf2:	eeb0 7a40 	vmov.f32	s14, s0
 8002bf6:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002d04 <FreqMenu_DrawSweepMenu+0x438>
 8002bfa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bfe:	ee16 0a90 	vmov	r0, s13
 8002c02:	f7fd fcc9 	bl	8000598 <__aeabi_f2d>
 8002c06:	4603      	mov	r3, r0
 8002c08:	460c      	mov	r4, r1
 8002c0a:	1d38      	adds	r0, r7, #4
 8002c0c:	e9cd 3400 	strd	r3, r4, [sp]
 8002c10:	4a3d      	ldr	r2, [pc, #244]	; (8002d08 <FreqMenu_DrawSweepMenu+0x43c>)
 8002c12:	2114      	movs	r1, #20
 8002c14:	f00c fade 	bl	800f1d4 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, BLACK, 2, WHITE);
 8002c18:	1d38      	adds	r0, r7, #4
 8002c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	2302      	movs	r3, #2
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	2300      	movs	r3, #0
 8002c26:	22a0      	movs	r2, #160	; 0xa0
 8002c28:	21aa      	movs	r1, #170	; 0xaa
 8002c2a:	f00a ff87 	bl	800db3c <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002c2e:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <FreqMenu_DrawSweepMenu+0x440>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10b      	bne.n	8002c52 <FreqMenu_DrawSweepMenu+0x386>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BLACK, 2, DARKCYAN);
 8002c3a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	2302      	movs	r3, #2
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2300      	movs	r3, #0
 8002c46:	22d5      	movs	r2, #213	; 0xd5
 8002c48:	2106      	movs	r1, #6
 8002c4a:	4831      	ldr	r0, [pc, #196]	; (8002d10 <FreqMenu_DrawSweepMenu+0x444>)
 8002c4c:	f00a ff76 	bl	800db3c <ILI9341_Draw_Text>
 8002c50:	e00a      	b.n	8002c68 <FreqMenu_DrawSweepMenu+0x39c>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BLACK, 2, DARKCYAN);
 8002c52:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	2302      	movs	r3, #2
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	22d5      	movs	r2, #213	; 0xd5
 8002c60:	2105      	movs	r1, #5
 8002c62:	482c      	ldr	r0, [pc, #176]	; (8002d14 <FreqMenu_DrawSweepMenu+0x448>)
 8002c64:	f00a ff6a 	bl	800db3c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BLACK, 2, DARKGREEN);
 8002c68:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2302      	movs	r3, #2
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2300      	movs	r3, #0
 8002c74:	22cc      	movs	r2, #204	; 0xcc
 8002c76:	2169      	movs	r1, #105	; 0x69
 8002c78:	4827      	ldr	r0, [pc, #156]	; (8002d18 <FreqMenu_DrawSweepMenu+0x44c>)
 8002c7a:	f00a ff5f 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BLACK, 2, DARKGREEN);
 8002c7e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	2302      	movs	r3, #2
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	22de      	movs	r2, #222	; 0xde
 8002c8c:	2162      	movs	r1, #98	; 0x62
 8002c8e:	4823      	ldr	r0, [pc, #140]	; (8002d1c <FreqMenu_DrawSweepMenu+0x450>)
 8002c90:	f00a ff54 	bl	800db3c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BLACK, 2, YELLOW);
 8002c94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	22cc      	movs	r2, #204	; 0xcc
 8002ca2:	21b7      	movs	r1, #183	; 0xb7
 8002ca4:	481c      	ldr	r0, [pc, #112]	; (8002d18 <FreqMenu_DrawSweepMenu+0x44c>)
 8002ca6:	f00a ff49 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BLACK, 2, YELLOW);
 8002caa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	22de      	movs	r2, #222	; 0xde
 8002cb8:	21ad      	movs	r1, #173	; 0xad
 8002cba:	4819      	ldr	r0, [pc, #100]	; (8002d20 <FreqMenu_DrawSweepMenu+0x454>)
 8002cbc:	f00a ff3e 	bl	800db3c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BLACK, 2, RED);
 8002cc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	22cc      	movs	r2, #204	; 0xcc
 8002cce:	f240 1107 	movw	r1, #263	; 0x107
 8002cd2:	4811      	ldr	r0, [pc, #68]	; (8002d18 <FreqMenu_DrawSweepMenu+0x44c>)
 8002cd4:	f00a ff32 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BLACK, 2, RED);
 8002cd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	2302      	movs	r3, #2
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	22de      	movs	r2, #222	; 0xde
 8002ce6:	21fc      	movs	r1, #252	; 0xfc
 8002ce8:	480e      	ldr	r0, [pc, #56]	; (8002d24 <FreqMenu_DrawSweepMenu+0x458>)
 8002cea:	f00a ff27 	bl	800db3c <ILI9341_Draw_Text>
}
 8002cee:	bf00      	nop
 8002cf0:	3778      	adds	r7, #120	; 0x78
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	08012488 	.word	0x08012488
 8002cfc:	2000000c 	.word	0x2000000c
 8002d00:	40013400 	.word	0x40013400
 8002d04:	42f00000 	.word	0x42f00000
 8002d08:	0801247c 	.word	0x0801247c
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	08012498 	.word	0x08012498
 8002d14:	080124a0 	.word	0x080124a0
 8002d18:	080124a8 	.word	0x080124a8
 8002d1c:	080124ac 	.word	0x080124ac
 8002d20:	080124b4 	.word	0x080124b4
 8002d24:	080124bc 	.word	0x080124bc

08002d28 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d007      	beq.n	8002d48 <FuncMenu_DrawMenu+0x20>
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d008      	beq.n	8002d4e <FuncMenu_DrawMenu+0x26>
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d000      	beq.n	8002d42 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawSyncMenu();
			break;

		default:
			break;
 8002d40:	e008      	b.n	8002d54 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawMainMenu();
 8002d42:	f000 f80b 	bl	8002d5c <FuncMenu_DrawMainMenu>
			break;
 8002d46:	e005      	b.n	8002d54 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSignalMenu();
 8002d48:	f000 f850 	bl	8002dec <FuncMenu_DrawSignalMenu>
			break;
 8002d4c:	e002      	b.n	8002d54 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSyncMenu();
 8002d4e:	f000 fa2d 	bl	80031ac <FuncMenu_DrawSyncMenu>
			break;
 8002d52:	bf00      	nop

	}
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, WHITE, 2, BLACK);
 8002d62:	2300      	movs	r3, #0
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	2302      	movs	r3, #2
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d6e:	220a      	movs	r2, #10
 8002d70:	210a      	movs	r1, #10
 8002d72:	481a      	ldr	r0, [pc, #104]	; (8002ddc <FuncMenu_DrawMainMenu+0x80>)
 8002d74:	f00a fee2 	bl	800db3c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002d78:	f7fe f8b4 	bl	8000ee4 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 210, BLACK, 2, DARKCYAN);
 8002d7c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2302      	movs	r3, #2
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2300      	movs	r3, #0
 8002d88:	22d2      	movs	r2, #210	; 0xd2
 8002d8a:	2105      	movs	r1, #5
 8002d8c:	4814      	ldr	r0, [pc, #80]	; (8002de0 <FuncMenu_DrawMainMenu+0x84>)
 8002d8e:	f00a fed5 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 97, 210, BLACK, 2, DARKGREEN);
 8002d92:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	2302      	movs	r3, #2
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	22d2      	movs	r2, #210	; 0xd2
 8002da0:	2161      	movs	r1, #97	; 0x61
 8002da2:	4810      	ldr	r0, [pc, #64]	; (8002de4 <FuncMenu_DrawMainMenu+0x88>)
 8002da4:	f00a feca 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8002da8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	2302      	movs	r3, #2
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	22d2      	movs	r2, #210	; 0xd2
 8002db6:	21af      	movs	r1, #175	; 0xaf
 8002db8:	480b      	ldr	r0, [pc, #44]	; (8002de8 <FuncMenu_DrawMainMenu+0x8c>)
 8002dba:	f00a febf 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 8002dbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	22d2      	movs	r2, #210	; 0xd2
 8002dcc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002dd0:	4805      	ldr	r0, [pc, #20]	; (8002de8 <FuncMenu_DrawMainMenu+0x8c>)
 8002dd2:	f00a feb3 	bl	800db3c <ILI9341_Draw_Text>
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	080124c4 	.word	0x080124c4
 8002de0:	080124d0 	.word	0x080124d0
 8002de4:	080124d8 	.word	0x080124d8
 8002de8:	080124e0 	.word	0x080124e0

08002dec <FuncMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSignalMenu()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, WHITE, 2, BLACK);
 8002df2:	2300      	movs	r3, #0
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2302      	movs	r3, #2
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dfe:	220a      	movs	r2, #10
 8002e00:	210a      	movs	r1, #10
 8002e02:	48b9      	ldr	r0, [pc, #740]	; (80030e8 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002e04:	f00a fe9a 	bl	800db3c <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f002 fc61 	bl	80056d0 <SM_GetOutputChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002e14:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 81b6 	beq.w	800318a <FuncMenu_DrawSignalMenu+0x39e>
	{
		switch(func_profileTmp->func)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	f200 81b1 	bhi.w	800318a <FuncMenu_DrawSignalMenu+0x39e>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <FuncMenu_DrawSignalMenu+0x44>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e49 	.word	0x08002e49
 8002e34:	08002ecf 	.word	0x08002ecf
 8002e38:	08002f55 	.word	0x08002f55
 8002e3c:	08002fdb 	.word	0x08002fdb
 8002e40:	08003061 	.word	0x08003061
 8002e44:	08003105 	.word	0x08003105
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e54:	2232      	movs	r2, #50	; 0x32
 8002e56:	210a      	movs	r1, #10
 8002e58:	48a4      	ldr	r0, [pc, #656]	; (80030ec <FuncMenu_DrawSignalMenu+0x300>)
 8002e5a:	f00a fe6f 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	2302      	movs	r3, #2
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2246      	movs	r2, #70	; 0x46
 8002e6c:	210a      	movs	r1, #10
 8002e6e:	48a0      	ldr	r0, [pc, #640]	; (80030f0 <FuncMenu_DrawSignalMenu+0x304>)
 8002e70:	f00a fe64 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	225a      	movs	r2, #90	; 0x5a
 8002e82:	210a      	movs	r1, #10
 8002e84:	489b      	ldr	r0, [pc, #620]	; (80030f4 <FuncMenu_DrawSignalMenu+0x308>)
 8002e86:	f00a fe59 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	2302      	movs	r3, #2
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	2300      	movs	r3, #0
 8002e96:	226e      	movs	r2, #110	; 0x6e
 8002e98:	210a      	movs	r1, #10
 8002e9a:	4897      	ldr	r0, [pc, #604]	; (80030f8 <FuncMenu_DrawSignalMenu+0x30c>)
 8002e9c:	f00a fe4e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2282      	movs	r2, #130	; 0x82
 8002eae:	210a      	movs	r1, #10
 8002eb0:	4892      	ldr	r0, [pc, #584]	; (80030fc <FuncMenu_DrawSignalMenu+0x310>)
 8002eb2:	f00a fe43 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2296      	movs	r2, #150	; 0x96
 8002ec4:	210a      	movs	r1, #10
 8002ec6:	488e      	ldr	r0, [pc, #568]	; (8003100 <FuncMenu_DrawSignalMenu+0x314>)
 8002ec8:	f00a fe38 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8002ecc:	e15d      	b.n	800318a <FuncMenu_DrawSignalMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2232      	movs	r2, #50	; 0x32
 8002edc:	210a      	movs	r1, #10
 8002ede:	4883      	ldr	r0, [pc, #524]	; (80030ec <FuncMenu_DrawSignalMenu+0x300>)
 8002ee0:	f00a fe2c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2302      	movs	r3, #2
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ef0:	2246      	movs	r2, #70	; 0x46
 8002ef2:	210a      	movs	r1, #10
 8002ef4:	487e      	ldr	r0, [pc, #504]	; (80030f0 <FuncMenu_DrawSignalMenu+0x304>)
 8002ef6:	f00a fe21 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002efa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	2302      	movs	r3, #2
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2300      	movs	r3, #0
 8002f06:	225a      	movs	r2, #90	; 0x5a
 8002f08:	210a      	movs	r1, #10
 8002f0a:	487a      	ldr	r0, [pc, #488]	; (80030f4 <FuncMenu_DrawSignalMenu+0x308>)
 8002f0c:	f00a fe16 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	2302      	movs	r3, #2
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	226e      	movs	r2, #110	; 0x6e
 8002f1e:	210a      	movs	r1, #10
 8002f20:	4875      	ldr	r0, [pc, #468]	; (80030f8 <FuncMenu_DrawSignalMenu+0x30c>)
 8002f22:	f00a fe0b 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2300      	movs	r3, #0
 8002f32:	2282      	movs	r2, #130	; 0x82
 8002f34:	210a      	movs	r1, #10
 8002f36:	4871      	ldr	r0, [pc, #452]	; (80030fc <FuncMenu_DrawSignalMenu+0x310>)
 8002f38:	f00a fe00 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	2302      	movs	r3, #2
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	2296      	movs	r2, #150	; 0x96
 8002f4a:	210a      	movs	r1, #10
 8002f4c:	486c      	ldr	r0, [pc, #432]	; (8003100 <FuncMenu_DrawSignalMenu+0x314>)
 8002f4e:	f00a fdf5 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8002f52:	e11a      	b.n	800318a <FuncMenu_DrawSignalMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2232      	movs	r2, #50	; 0x32
 8002f62:	210a      	movs	r1, #10
 8002f64:	4861      	ldr	r0, [pc, #388]	; (80030ec <FuncMenu_DrawSignalMenu+0x300>)
 8002f66:	f00a fde9 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	2302      	movs	r3, #2
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2300      	movs	r3, #0
 8002f76:	2246      	movs	r2, #70	; 0x46
 8002f78:	210a      	movs	r1, #10
 8002f7a:	485d      	ldr	r0, [pc, #372]	; (80030f0 <FuncMenu_DrawSignalMenu+0x304>)
 8002f7c:	f00a fdde 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002f80:	2300      	movs	r3, #0
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2302      	movs	r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f8c:	225a      	movs	r2, #90	; 0x5a
 8002f8e:	210a      	movs	r1, #10
 8002f90:	4858      	ldr	r0, [pc, #352]	; (80030f4 <FuncMenu_DrawSignalMenu+0x308>)
 8002f92:	f00a fdd3 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	226e      	movs	r2, #110	; 0x6e
 8002fa4:	210a      	movs	r1, #10
 8002fa6:	4854      	ldr	r0, [pc, #336]	; (80030f8 <FuncMenu_DrawSignalMenu+0x30c>)
 8002fa8:	f00a fdc8 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2282      	movs	r2, #130	; 0x82
 8002fba:	210a      	movs	r1, #10
 8002fbc:	484f      	ldr	r0, [pc, #316]	; (80030fc <FuncMenu_DrawSignalMenu+0x310>)
 8002fbe:	f00a fdbd 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	2302      	movs	r3, #2
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2296      	movs	r2, #150	; 0x96
 8002fd0:	210a      	movs	r1, #10
 8002fd2:	484b      	ldr	r0, [pc, #300]	; (8003100 <FuncMenu_DrawSignalMenu+0x314>)
 8002fd4:	f00a fdb2 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8002fd8:	e0d7      	b.n	800318a <FuncMenu_DrawSignalMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2232      	movs	r2, #50	; 0x32
 8002fe8:	210a      	movs	r1, #10
 8002fea:	4840      	ldr	r0, [pc, #256]	; (80030ec <FuncMenu_DrawSignalMenu+0x300>)
 8002fec:	f00a fda6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2246      	movs	r2, #70	; 0x46
 8002ffe:	210a      	movs	r1, #10
 8003000:	483b      	ldr	r0, [pc, #236]	; (80030f0 <FuncMenu_DrawSignalMenu+0x304>)
 8003002:	f00a fd9b 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8003006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	2302      	movs	r3, #2
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	225a      	movs	r2, #90	; 0x5a
 8003014:	210a      	movs	r1, #10
 8003016:	4837      	ldr	r0, [pc, #220]	; (80030f4 <FuncMenu_DrawSignalMenu+0x308>)
 8003018:	f00a fd90 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 800301c:	2300      	movs	r3, #0
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	2302      	movs	r3, #2
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003028:	226e      	movs	r2, #110	; 0x6e
 800302a:	210a      	movs	r1, #10
 800302c:	4832      	ldr	r0, [pc, #200]	; (80030f8 <FuncMenu_DrawSignalMenu+0x30c>)
 800302e:	f00a fd85 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8003032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	2302      	movs	r3, #2
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2300      	movs	r3, #0
 800303e:	2282      	movs	r2, #130	; 0x82
 8003040:	210a      	movs	r1, #10
 8003042:	482e      	ldr	r0, [pc, #184]	; (80030fc <FuncMenu_DrawSignalMenu+0x310>)
 8003044:	f00a fd7a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	2302      	movs	r3, #2
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2300      	movs	r3, #0
 8003054:	2296      	movs	r2, #150	; 0x96
 8003056:	210a      	movs	r1, #10
 8003058:	4829      	ldr	r0, [pc, #164]	; (8003100 <FuncMenu_DrawSignalMenu+0x314>)
 800305a:	f00a fd6f 	bl	800db3c <ILI9341_Draw_Text>
				break;
 800305e:	e094      	b.n	800318a <FuncMenu_DrawSignalMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	2302      	movs	r3, #2
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	2300      	movs	r3, #0
 800306c:	2232      	movs	r2, #50	; 0x32
 800306e:	210a      	movs	r1, #10
 8003070:	481e      	ldr	r0, [pc, #120]	; (80030ec <FuncMenu_DrawSignalMenu+0x300>)
 8003072:	f00a fd63 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8003076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	2302      	movs	r3, #2
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2300      	movs	r3, #0
 8003082:	2246      	movs	r2, #70	; 0x46
 8003084:	210a      	movs	r1, #10
 8003086:	481a      	ldr	r0, [pc, #104]	; (80030f0 <FuncMenu_DrawSignalMenu+0x304>)
 8003088:	f00a fd58 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800308c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	2302      	movs	r3, #2
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2300      	movs	r3, #0
 8003098:	225a      	movs	r2, #90	; 0x5a
 800309a:	210a      	movs	r1, #10
 800309c:	4815      	ldr	r0, [pc, #84]	; (80030f4 <FuncMenu_DrawSignalMenu+0x308>)
 800309e:	f00a fd4d 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80030a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	2302      	movs	r3, #2
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2300      	movs	r3, #0
 80030ae:	226e      	movs	r2, #110	; 0x6e
 80030b0:	210a      	movs	r1, #10
 80030b2:	4811      	ldr	r0, [pc, #68]	; (80030f8 <FuncMenu_DrawSignalMenu+0x30c>)
 80030b4:	f00a fd42 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 80030b8:	2300      	movs	r3, #0
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	2302      	movs	r3, #2
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c4:	2282      	movs	r2, #130	; 0x82
 80030c6:	210a      	movs	r1, #10
 80030c8:	480c      	ldr	r0, [pc, #48]	; (80030fc <FuncMenu_DrawSignalMenu+0x310>)
 80030ca:	f00a fd37 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80030ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	2302      	movs	r3, #2
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2300      	movs	r3, #0
 80030da:	2296      	movs	r2, #150	; 0x96
 80030dc:	210a      	movs	r1, #10
 80030de:	4808      	ldr	r0, [pc, #32]	; (8003100 <FuncMenu_DrawSignalMenu+0x314>)
 80030e0:	f00a fd2c 	bl	800db3c <ILI9341_Draw_Text>
				break;
 80030e4:	e051      	b.n	800318a <FuncMenu_DrawSignalMenu+0x39e>
 80030e6:	bf00      	nop
 80030e8:	080124e8 	.word	0x080124e8
 80030ec:	080124f8 	.word	0x080124f8
 80030f0:	08012500 	.word	0x08012500
 80030f4:	0801250c 	.word	0x0801250c
 80030f8:	08012514 	.word	0x08012514
 80030fc:	08012520 	.word	0x08012520
 8003100:	0801252c 	.word	0x0801252c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	2302      	movs	r3, #2
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	2232      	movs	r2, #50	; 0x32
 8003112:	210a      	movs	r1, #10
 8003114:	481f      	ldr	r0, [pc, #124]	; (8003194 <FuncMenu_DrawSignalMenu+0x3a8>)
 8003116:	f00a fd11 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800311a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	2302      	movs	r3, #2
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	2246      	movs	r2, #70	; 0x46
 8003128:	210a      	movs	r1, #10
 800312a:	481b      	ldr	r0, [pc, #108]	; (8003198 <FuncMenu_DrawSignalMenu+0x3ac>)
 800312c:	f00a fd06 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8003130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	2302      	movs	r3, #2
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	225a      	movs	r2, #90	; 0x5a
 800313e:	210a      	movs	r1, #10
 8003140:	4816      	ldr	r0, [pc, #88]	; (800319c <FuncMenu_DrawSignalMenu+0x3b0>)
 8003142:	f00a fcfb 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	2302      	movs	r3, #2
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2300      	movs	r3, #0
 8003152:	226e      	movs	r2, #110	; 0x6e
 8003154:	210a      	movs	r1, #10
 8003156:	4812      	ldr	r0, [pc, #72]	; (80031a0 <FuncMenu_DrawSignalMenu+0x3b4>)
 8003158:	f00a fcf0 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800315c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	2302      	movs	r3, #2
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	2300      	movs	r3, #0
 8003168:	2282      	movs	r2, #130	; 0x82
 800316a:	210a      	movs	r1, #10
 800316c:	480d      	ldr	r0, [pc, #52]	; (80031a4 <FuncMenu_DrawSignalMenu+0x3b8>)
 800316e:	f00a fce5 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8003172:	2300      	movs	r3, #0
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2302      	movs	r3, #2
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800317e:	2296      	movs	r2, #150	; 0x96
 8003180:	210a      	movs	r1, #10
 8003182:	4809      	ldr	r0, [pc, #36]	; (80031a8 <FuncMenu_DrawSignalMenu+0x3bc>)
 8003184:	f00a fcda 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8003188:	bf00      	nop

		}
	}


}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	080124f8 	.word	0x080124f8
 8003198:	08012500 	.word	0x08012500
 800319c:	0801250c 	.word	0x0801250c
 80031a0:	08012514 	.word	0x08012514
 80031a4:	08012520 	.word	0x08012520
 80031a8:	0801252c 	.word	0x0801252c

080031ac <FuncMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSyncMenu()
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, WHITE, 2, BLACK);
 80031b2:	2300      	movs	r3, #0
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2302      	movs	r3, #2
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031be:	220a      	movs	r2, #10
 80031c0:	210a      	movs	r1, #10
 80031c2:	48b9      	ldr	r0, [pc, #740]	; (80034a8 <FuncMenu_DrawSyncMenu+0x2fc>)
 80031c4:	f00a fcba 	bl	800db3c <ILI9341_Draw_Text>
	//FunctionProfile_t *func_profileTmp = FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 80031c8:	2001      	movs	r0, #1
 80031ca:	f002 fa81 	bl	80056d0 <SM_GetOutputChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80031d4:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 81b6 	beq.w	800354a <FuncMenu_DrawSyncMenu+0x39e>
	{
		switch(func_profileTmp->func)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	f200 81b1 	bhi.w	800354a <FuncMenu_DrawSyncMenu+0x39e>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <FuncMenu_DrawSyncMenu+0x44>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003209 	.word	0x08003209
 80031f4:	0800328f 	.word	0x0800328f
 80031f8:	08003315 	.word	0x08003315
 80031fc:	0800339b 	.word	0x0800339b
 8003200:	08003421 	.word	0x08003421
 8003204:	080034c5 	.word	0x080034c5
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8003208:	2300      	movs	r3, #0
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	2302      	movs	r3, #2
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003214:	2232      	movs	r2, #50	; 0x32
 8003216:	210a      	movs	r1, #10
 8003218:	48a4      	ldr	r0, [pc, #656]	; (80034ac <FuncMenu_DrawSyncMenu+0x300>)
 800321a:	f00a fc8f 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800321e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	2302      	movs	r3, #2
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2300      	movs	r3, #0
 800322a:	2246      	movs	r2, #70	; 0x46
 800322c:	210a      	movs	r1, #10
 800322e:	48a0      	ldr	r0, [pc, #640]	; (80034b0 <FuncMenu_DrawSyncMenu+0x304>)
 8003230:	f00a fc84 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8003234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	2302      	movs	r3, #2
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2300      	movs	r3, #0
 8003240:	225a      	movs	r2, #90	; 0x5a
 8003242:	210a      	movs	r1, #10
 8003244:	489b      	ldr	r0, [pc, #620]	; (80034b4 <FuncMenu_DrawSyncMenu+0x308>)
 8003246:	f00a fc79 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800324a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	2302      	movs	r3, #2
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2300      	movs	r3, #0
 8003256:	226e      	movs	r2, #110	; 0x6e
 8003258:	210a      	movs	r1, #10
 800325a:	4897      	ldr	r0, [pc, #604]	; (80034b8 <FuncMenu_DrawSyncMenu+0x30c>)
 800325c:	f00a fc6e 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8003260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	2302      	movs	r3, #2
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2300      	movs	r3, #0
 800326c:	2282      	movs	r2, #130	; 0x82
 800326e:	210a      	movs	r1, #10
 8003270:	4892      	ldr	r0, [pc, #584]	; (80034bc <FuncMenu_DrawSyncMenu+0x310>)
 8003272:	f00a fc63 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	2302      	movs	r3, #2
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2300      	movs	r3, #0
 8003282:	2296      	movs	r2, #150	; 0x96
 8003284:	210a      	movs	r1, #10
 8003286:	488e      	ldr	r0, [pc, #568]	; (80034c0 <FuncMenu_DrawSyncMenu+0x314>)
 8003288:	f00a fc58 	bl	800db3c <ILI9341_Draw_Text>
				break;
 800328c:	e15d      	b.n	800354a <FuncMenu_DrawSyncMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800328e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	2302      	movs	r3, #2
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2300      	movs	r3, #0
 800329a:	2232      	movs	r2, #50	; 0x32
 800329c:	210a      	movs	r1, #10
 800329e:	4883      	ldr	r0, [pc, #524]	; (80034ac <FuncMenu_DrawSyncMenu+0x300>)
 80032a0:	f00a fc4c 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 80032a4:	2300      	movs	r3, #0
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	2302      	movs	r3, #2
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032b0:	2246      	movs	r2, #70	; 0x46
 80032b2:	210a      	movs	r1, #10
 80032b4:	487e      	ldr	r0, [pc, #504]	; (80034b0 <FuncMenu_DrawSyncMenu+0x304>)
 80032b6:	f00a fc41 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80032ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	2302      	movs	r3, #2
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2300      	movs	r3, #0
 80032c6:	225a      	movs	r2, #90	; 0x5a
 80032c8:	210a      	movs	r1, #10
 80032ca:	487a      	ldr	r0, [pc, #488]	; (80034b4 <FuncMenu_DrawSyncMenu+0x308>)
 80032cc:	f00a fc36 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80032d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	2302      	movs	r3, #2
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2300      	movs	r3, #0
 80032dc:	226e      	movs	r2, #110	; 0x6e
 80032de:	210a      	movs	r1, #10
 80032e0:	4875      	ldr	r0, [pc, #468]	; (80034b8 <FuncMenu_DrawSyncMenu+0x30c>)
 80032e2:	f00a fc2b 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80032e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	2302      	movs	r3, #2
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2300      	movs	r3, #0
 80032f2:	2282      	movs	r2, #130	; 0x82
 80032f4:	210a      	movs	r1, #10
 80032f6:	4871      	ldr	r0, [pc, #452]	; (80034bc <FuncMenu_DrawSyncMenu+0x310>)
 80032f8:	f00a fc20 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80032fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	2302      	movs	r3, #2
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2300      	movs	r3, #0
 8003308:	2296      	movs	r2, #150	; 0x96
 800330a:	210a      	movs	r1, #10
 800330c:	486c      	ldr	r0, [pc, #432]	; (80034c0 <FuncMenu_DrawSyncMenu+0x314>)
 800330e:	f00a fc15 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8003312:	e11a      	b.n	800354a <FuncMenu_DrawSyncMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	2302      	movs	r3, #2
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	2300      	movs	r3, #0
 8003320:	2232      	movs	r2, #50	; 0x32
 8003322:	210a      	movs	r1, #10
 8003324:	4861      	ldr	r0, [pc, #388]	; (80034ac <FuncMenu_DrawSyncMenu+0x300>)
 8003326:	f00a fc09 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800332a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	2302      	movs	r3, #2
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2300      	movs	r3, #0
 8003336:	2246      	movs	r2, #70	; 0x46
 8003338:	210a      	movs	r1, #10
 800333a:	485d      	ldr	r0, [pc, #372]	; (80034b0 <FuncMenu_DrawSyncMenu+0x304>)
 800333c:	f00a fbfe 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8003340:	2300      	movs	r3, #0
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	2302      	movs	r3, #2
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800334c:	225a      	movs	r2, #90	; 0x5a
 800334e:	210a      	movs	r1, #10
 8003350:	4858      	ldr	r0, [pc, #352]	; (80034b4 <FuncMenu_DrawSyncMenu+0x308>)
 8003352:	f00a fbf3 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	2302      	movs	r3, #2
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2300      	movs	r3, #0
 8003362:	226e      	movs	r2, #110	; 0x6e
 8003364:	210a      	movs	r1, #10
 8003366:	4854      	ldr	r0, [pc, #336]	; (80034b8 <FuncMenu_DrawSyncMenu+0x30c>)
 8003368:	f00a fbe8 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800336c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2302      	movs	r3, #2
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	2282      	movs	r2, #130	; 0x82
 800337a:	210a      	movs	r1, #10
 800337c:	484f      	ldr	r0, [pc, #316]	; (80034bc <FuncMenu_DrawSyncMenu+0x310>)
 800337e:	f00a fbdd 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	2302      	movs	r3, #2
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	2296      	movs	r2, #150	; 0x96
 8003390:	210a      	movs	r1, #10
 8003392:	484b      	ldr	r0, [pc, #300]	; (80034c0 <FuncMenu_DrawSyncMenu+0x314>)
 8003394:	f00a fbd2 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8003398:	e0d7      	b.n	800354a <FuncMenu_DrawSyncMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800339a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	2302      	movs	r3, #2
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	2232      	movs	r2, #50	; 0x32
 80033a8:	210a      	movs	r1, #10
 80033aa:	4840      	ldr	r0, [pc, #256]	; (80034ac <FuncMenu_DrawSyncMenu+0x300>)
 80033ac:	f00a fbc6 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80033b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	2302      	movs	r3, #2
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	2246      	movs	r2, #70	; 0x46
 80033be:	210a      	movs	r1, #10
 80033c0:	483b      	ldr	r0, [pc, #236]	; (80034b0 <FuncMenu_DrawSyncMenu+0x304>)
 80033c2:	f00a fbbb 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80033c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	2302      	movs	r3, #2
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	225a      	movs	r2, #90	; 0x5a
 80033d4:	210a      	movs	r1, #10
 80033d6:	4837      	ldr	r0, [pc, #220]	; (80034b4 <FuncMenu_DrawSyncMenu+0x308>)
 80033d8:	f00a fbb0 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 80033dc:	2300      	movs	r3, #0
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	2302      	movs	r3, #2
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033e8:	226e      	movs	r2, #110	; 0x6e
 80033ea:	210a      	movs	r1, #10
 80033ec:	4832      	ldr	r0, [pc, #200]	; (80034b8 <FuncMenu_DrawSyncMenu+0x30c>)
 80033ee:	f00a fba5 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80033f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	2302      	movs	r3, #2
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2300      	movs	r3, #0
 80033fe:	2282      	movs	r2, #130	; 0x82
 8003400:	210a      	movs	r1, #10
 8003402:	482e      	ldr	r0, [pc, #184]	; (80034bc <FuncMenu_DrawSyncMenu+0x310>)
 8003404:	f00a fb9a 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	2302      	movs	r3, #2
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2300      	movs	r3, #0
 8003414:	2296      	movs	r2, #150	; 0x96
 8003416:	210a      	movs	r1, #10
 8003418:	4829      	ldr	r0, [pc, #164]	; (80034c0 <FuncMenu_DrawSyncMenu+0x314>)
 800341a:	f00a fb8f 	bl	800db3c <ILI9341_Draw_Text>
				break;
 800341e:	e094      	b.n	800354a <FuncMenu_DrawSyncMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	2302      	movs	r3, #2
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	2232      	movs	r2, #50	; 0x32
 800342e:	210a      	movs	r1, #10
 8003430:	481e      	ldr	r0, [pc, #120]	; (80034ac <FuncMenu_DrawSyncMenu+0x300>)
 8003432:	f00a fb83 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8003436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	2302      	movs	r3, #2
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	2246      	movs	r2, #70	; 0x46
 8003444:	210a      	movs	r1, #10
 8003446:	481a      	ldr	r0, [pc, #104]	; (80034b0 <FuncMenu_DrawSyncMenu+0x304>)
 8003448:	f00a fb78 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800344c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	2302      	movs	r3, #2
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2300      	movs	r3, #0
 8003458:	225a      	movs	r2, #90	; 0x5a
 800345a:	210a      	movs	r1, #10
 800345c:	4815      	ldr	r0, [pc, #84]	; (80034b4 <FuncMenu_DrawSyncMenu+0x308>)
 800345e:	f00a fb6d 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	2302      	movs	r3, #2
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2300      	movs	r3, #0
 800346e:	226e      	movs	r2, #110	; 0x6e
 8003470:	210a      	movs	r1, #10
 8003472:	4811      	ldr	r0, [pc, #68]	; (80034b8 <FuncMenu_DrawSyncMenu+0x30c>)
 8003474:	f00a fb62 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8003478:	2300      	movs	r3, #0
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	2302      	movs	r3, #2
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003484:	2282      	movs	r2, #130	; 0x82
 8003486:	210a      	movs	r1, #10
 8003488:	480c      	ldr	r0, [pc, #48]	; (80034bc <FuncMenu_DrawSyncMenu+0x310>)
 800348a:	f00a fb57 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800348e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	2302      	movs	r3, #2
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2300      	movs	r3, #0
 800349a:	2296      	movs	r2, #150	; 0x96
 800349c:	210a      	movs	r1, #10
 800349e:	4808      	ldr	r0, [pc, #32]	; (80034c0 <FuncMenu_DrawSyncMenu+0x314>)
 80034a0:	f00a fb4c 	bl	800db3c <ILI9341_Draw_Text>
				break;
 80034a4:	e051      	b.n	800354a <FuncMenu_DrawSyncMenu+0x39e>
 80034a6:	bf00      	nop
 80034a8:	08012534 	.word	0x08012534
 80034ac:	080124f8 	.word	0x080124f8
 80034b0:	08012500 	.word	0x08012500
 80034b4:	0801250c 	.word	0x0801250c
 80034b8:	08012514 	.word	0x08012514
 80034bc:	08012520 	.word	0x08012520
 80034c0:	0801252c 	.word	0x0801252c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80034c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	2302      	movs	r3, #2
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	2300      	movs	r3, #0
 80034d0:	2232      	movs	r2, #50	; 0x32
 80034d2:	210a      	movs	r1, #10
 80034d4:	481f      	ldr	r0, [pc, #124]	; (8003554 <FuncMenu_DrawSyncMenu+0x3a8>)
 80034d6:	f00a fb31 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80034da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	2302      	movs	r3, #2
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2300      	movs	r3, #0
 80034e6:	2246      	movs	r2, #70	; 0x46
 80034e8:	210a      	movs	r1, #10
 80034ea:	481b      	ldr	r0, [pc, #108]	; (8003558 <FuncMenu_DrawSyncMenu+0x3ac>)
 80034ec:	f00a fb26 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80034f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	2302      	movs	r3, #2
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2300      	movs	r3, #0
 80034fc:	225a      	movs	r2, #90	; 0x5a
 80034fe:	210a      	movs	r1, #10
 8003500:	4816      	ldr	r0, [pc, #88]	; (800355c <FuncMenu_DrawSyncMenu+0x3b0>)
 8003502:	f00a fb1b 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	2302      	movs	r3, #2
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2300      	movs	r3, #0
 8003512:	226e      	movs	r2, #110	; 0x6e
 8003514:	210a      	movs	r1, #10
 8003516:	4812      	ldr	r0, [pc, #72]	; (8003560 <FuncMenu_DrawSyncMenu+0x3b4>)
 8003518:	f00a fb10 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800351c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	2302      	movs	r3, #2
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2300      	movs	r3, #0
 8003528:	2282      	movs	r2, #130	; 0x82
 800352a:	210a      	movs	r1, #10
 800352c:	480d      	ldr	r0, [pc, #52]	; (8003564 <FuncMenu_DrawSyncMenu+0x3b8>)
 800352e:	f00a fb05 	bl	800db3c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8003532:	2300      	movs	r3, #0
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	2302      	movs	r3, #2
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800353e:	2296      	movs	r2, #150	; 0x96
 8003540:	210a      	movs	r1, #10
 8003542:	4809      	ldr	r0, [pc, #36]	; (8003568 <FuncMenu_DrawSyncMenu+0x3bc>)
 8003544:	f00a fafa 	bl	800db3c <ILI9341_Draw_Text>
				break;
 8003548:	bf00      	nop

		}
	}

}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	080124f8 	.word	0x080124f8
 8003558:	08012500 	.word	0x08012500
 800355c:	0801250c 	.word	0x0801250c
 8003560:	08012514 	.word	0x08012514
 8003564:	08012520 	.word	0x08012520
 8003568:	0801252c 	.word	0x0801252c

0800356c <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d007      	beq.n	800358c <GainMenu_DrawMenu+0x20>
 800357c:	2b03      	cmp	r3, #3
 800357e:	d008      	beq.n	8003592 <GainMenu_DrawMenu+0x26>
 8003580:	2b01      	cmp	r3, #1
 8003582:	d000      	beq.n	8003586 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003584:	e008      	b.n	8003598 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003586:	f000 f80b 	bl	80035a0 <GainMenu_DrawMainMenu>
			break;
 800358a:	e005      	b.n	8003598 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 800358c:	f000 f850 	bl	8003630 <GainMenu_DrawSignalMenu>
			break;
 8003590:	e002      	b.n	8003598 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003592:	f000 f863 	bl	800365c <GainMenu_DrawSyncMenu>
			break;
 8003596:	bf00      	nop

	}
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, WHITE, 2, BLACK);
 80035a6:	2300      	movs	r3, #0
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	2302      	movs	r3, #2
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035b2:	220a      	movs	r2, #10
 80035b4:	210a      	movs	r1, #10
 80035b6:	481a      	ldr	r0, [pc, #104]	; (8003620 <GainMenu_DrawMainMenu+0x80>)
 80035b8:	f00a fac0 	bl	800db3c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80035bc:	f7fd fc92 	bl	8000ee4 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 210, BLACK, 2, DARKCYAN);
 80035c0:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	2302      	movs	r3, #2
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	22d2      	movs	r2, #210	; 0xd2
 80035ce:	2105      	movs	r1, #5
 80035d0:	4814      	ldr	r0, [pc, #80]	; (8003624 <GainMenu_DrawMainMenu+0x84>)
 80035d2:	f00a fab3 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",97, 210, BLACK, 2, DARKGREEN);
 80035d6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	2302      	movs	r3, #2
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	22d2      	movs	r2, #210	; 0xd2
 80035e4:	2161      	movs	r1, #97	; 0x61
 80035e6:	4810      	ldr	r0, [pc, #64]	; (8003628 <GainMenu_DrawMainMenu+0x88>)
 80035e8:	f00a faa8 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 80035ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	2302      	movs	r3, #2
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2300      	movs	r3, #0
 80035f8:	22d2      	movs	r2, #210	; 0xd2
 80035fa:	21af      	movs	r1, #175	; 0xaf
 80035fc:	480b      	ldr	r0, [pc, #44]	; (800362c <GainMenu_DrawMainMenu+0x8c>)
 80035fe:	f00a fa9d 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 8003602:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	2302      	movs	r3, #2
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2300      	movs	r3, #0
 800360e:	22d2      	movs	r2, #210	; 0xd2
 8003610:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003614:	4805      	ldr	r0, [pc, #20]	; (800362c <GainMenu_DrawMainMenu+0x8c>)
 8003616:	f00a fa91 	bl	800db3c <ILI9341_Draw_Text>
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	08012544 	.word	0x08012544
 8003624:	08012550 	.word	0x08012550
 8003628:	08012558 	.word	0x08012558
 800362c:	08012560 	.word	0x08012560

08003630 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, WHITE, 2, BLACK);
 8003636:	2300      	movs	r3, #0
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	2302      	movs	r3, #2
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003642:	220a      	movs	r2, #10
 8003644:	210a      	movs	r1, #10
 8003646:	4804      	ldr	r0, [pc, #16]	; (8003658 <GainMenu_DrawSignalMenu+0x28>)
 8003648:	f00a fa78 	bl	800db3c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800364c:	f7fd fc4a 	bl	8000ee4 <DM_DisplayFormattedOutput>
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	08012568 	.word	0x08012568

0800365c <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, WHITE, 2, BLACK);
 8003662:	2300      	movs	r3, #0
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	2302      	movs	r3, #2
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800366e:	220a      	movs	r2, #10
 8003670:	210a      	movs	r1, #10
 8003672:	4804      	ldr	r0, [pc, #16]	; (8003684 <GainMenu_DrawSyncMenu+0x28>)
 8003674:	f00a fa62 	bl	800db3c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003678:	f7fd fc34 	bl	8000ee4 <DM_DisplayFormattedOutput>
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	08012578 	.word	0x08012578

08003688 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d007      	beq.n	80036a8 <ToplevelMenu_DrawMenu+0x20>
 8003698:	2b03      	cmp	r3, #3
 800369a:	d008      	beq.n	80036ae <ToplevelMenu_DrawMenu+0x26>
 800369c:	2b01      	cmp	r3, #1
 800369e:	d000      	beq.n	80036a2 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 80036a0:	e008      	b.n	80036b4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 80036a2:	f000 f80b 	bl	80036bc <ToplevelMenu_DrawMainMenu>
			break;
 80036a6:	e005      	b.n	80036b4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 80036a8:	f000 f848 	bl	800373c <ToplevelMenu_DrawOutputMenu>
			break;
 80036ac:	e002      	b.n	80036b4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 80036ae:	f000 f88f 	bl	80037d0 <ToplevelMenu_DrawInputMenu>
			break;
 80036b2:	bf00      	nop

	}
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 80036c2:	481a      	ldr	r0, [pc, #104]	; (800372c <ToplevelMenu_DrawMainMenu+0x70>)
 80036c4:	f00b fd7e 	bl	800f1c4 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 80036c8:	f7fd fc0c 	bl	8000ee4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BLACK, 2, DARKCYAN);
 80036cc:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	2302      	movs	r3, #2
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	22d2      	movs	r2, #210	; 0xd2
 80036da:	2106      	movs	r1, #6
 80036dc:	4814      	ldr	r0, [pc, #80]	; (8003730 <ToplevelMenu_DrawMainMenu+0x74>)
 80036de:	f00a fa2d 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 95, 210, BLACK, 2, DARKGREEN);
 80036e2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	2302      	movs	r3, #2
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2300      	movs	r3, #0
 80036ee:	22d2      	movs	r2, #210	; 0xd2
 80036f0:	215f      	movs	r1, #95	; 0x5f
 80036f2:	4810      	ldr	r0, [pc, #64]	; (8003734 <ToplevelMenu_DrawMainMenu+0x78>)
 80036f4:	f00a fa22 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 80036f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	2302      	movs	r3, #2
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2300      	movs	r3, #0
 8003704:	22d2      	movs	r2, #210	; 0xd2
 8003706:	21af      	movs	r1, #175	; 0xaf
 8003708:	480b      	ldr	r0, [pc, #44]	; (8003738 <ToplevelMenu_DrawMainMenu+0x7c>)
 800370a:	f00a fa17 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 800370e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	2302      	movs	r3, #2
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2300      	movs	r3, #0
 800371a:	22d2      	movs	r2, #210	; 0xd2
 800371c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003720:	4805      	ldr	r0, [pc, #20]	; (8003738 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003722:	f00a fa0b 	bl	800db3c <ILI9341_Draw_Text>


}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	08012588 	.word	0x08012588
 8003730:	0801259c 	.word	0x0801259c
 8003734:	080125a4 	.word	0x080125a4
 8003738:	080125ac 	.word	0x080125ac

0800373c <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, WHITE, 2, BLACK);
 8003742:	2300      	movs	r3, #0
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	2302      	movs	r3, #2
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800374e:	220a      	movs	r2, #10
 8003750:	210a      	movs	r1, #10
 8003752:	481a      	ldr	r0, [pc, #104]	; (80037bc <ToplevelMenu_DrawOutputMenu+0x80>)
 8003754:	f00a f9f2 	bl	800db3c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003758:	f7fd fbc4 	bl	8000ee4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13, 210, BLACK, 2, DARKCYAN);
 800375c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	2302      	movs	r3, #2
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	2300      	movs	r3, #0
 8003768:	22d2      	movs	r2, #210	; 0xd2
 800376a:	210d      	movs	r1, #13
 800376c:	4814      	ldr	r0, [pc, #80]	; (80037c0 <ToplevelMenu_DrawOutputMenu+0x84>)
 800376e:	f00a f9e5 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99, 210, BLACK, 2, DARKGREEN);
 8003772:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	2302      	movs	r3, #2
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2300      	movs	r3, #0
 800377e:	22d2      	movs	r2, #210	; 0xd2
 8003780:	2163      	movs	r1, #99	; 0x63
 8003782:	4810      	ldr	r0, [pc, #64]	; (80037c4 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003784:	f00a f9da 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BLACK, 2, YELLOW);
 8003788:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	2302      	movs	r3, #2
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2300      	movs	r3, #0
 8003794:	22d2      	movs	r2, #210	; 0xd2
 8003796:	21b0      	movs	r1, #176	; 0xb0
 8003798:	480b      	ldr	r0, [pc, #44]	; (80037c8 <ToplevelMenu_DrawOutputMenu+0x8c>)
 800379a:	f00a f9cf 	bl	800db3c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 259, 210, BLACK, 2, RED);
 800379e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	2302      	movs	r3, #2
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2300      	movs	r3, #0
 80037aa:	22d2      	movs	r2, #210	; 0xd2
 80037ac:	f240 1103 	movw	r1, #259	; 0x103
 80037b0:	4806      	ldr	r0, [pc, #24]	; (80037cc <ToplevelMenu_DrawOutputMenu+0x90>)
 80037b2:	f00a f9c3 	bl	800db3c <ILI9341_Draw_Text>
}
 80037b6:	bf00      	nop
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	080125b4 	.word	0x080125b4
 80037c0:	080125bc 	.word	0x080125bc
 80037c4:	080125c4 	.word	0x080125c4
 80037c8:	080125cc 	.word	0x080125cc
 80037cc:	080125d4 	.word	0x080125d4

080037d0 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, WHITE, 2, BLACK);
 80037d6:	2300      	movs	r3, #0
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	2302      	movs	r3, #2
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037e2:	220a      	movs	r2, #10
 80037e4:	210a      	movs	r1, #10
 80037e6:	4804      	ldr	r0, [pc, #16]	; (80037f8 <ToplevelMenu_DrawInputMenu+0x28>)
 80037e8:	f00a f9a8 	bl	800db3c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80037ec:	f7fd fb7a 	bl	8000ee4 <DM_DisplayFormattedOutput>
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	080125dc 	.word	0x080125dc

080037fc <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <BiasMenu_getStatus+0x14>)
 8003802:	781b      	ldrb	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20001f19 	.word	0x20001f19

08003814 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 8003818:	480b      	ldr	r0, [pc, #44]	; (8003848 <BiasMenuEntryHandler+0x34>)
 800381a:	f00b fcd3 	bl	800f1c4 <puts>
#endif

	DM_RefreshScreen();
 800381e:	f7fd fcd3 	bl	80011c8 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <BiasMenuEntryHandler+0x38>)
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <BiasMenuEntryHandler+0x3c>)
 800382a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003830:	f001 f9c4 	bl	8004bbc <BO_GetDcBiasEncoderValue>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <BiasMenuEntryHandler+0x3c>)
 800383a:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <BiasMenuEntryHandler+0x40>)
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003842:	230e      	movs	r3, #14
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	080125e4 	.word	0x080125e4
 800384c:	20001f19 	.word	0x20001f19
 8003850:	40012c00 	.word	0x40012c00
 8003854:	20001f1b 	.word	0x20001f1b

08003858 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 800385c:	4807      	ldr	r0, [pc, #28]	; (800387c <BiasMenuInputHandler+0x24>)
 800385e:	f00b fcb1 	bl	800f1c4 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003862:	2001      	movs	r0, #1
 8003864:	f001 ff4a 	bl	80056fc <SM_GetEncoderValue>
 8003868:	4603      	mov	r3, r0
 800386a:	4618      	mov	r0, r3
 800386c:	f001 f9b2 	bl	8004bd4 <BO_ModifyOutput>

	eNewEvent = evIdle;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <BiasMenuInputHandler+0x28>)
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003876:	230e      	movs	r3, #14
}
 8003878:	4618      	mov	r0, r3
 800387a:	bd80      	pop	{r7, pc}
 800387c:	08012608 	.word	0x08012608
 8003880:	20001f1b 	.word	0x20001f1b

08003884 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 8003888:	4808      	ldr	r0, [pc, #32]	; (80038ac <BiasMenuExitHandler+0x28>)
 800388a:	f00b fc9b 	bl	800f1c4 <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <BiasMenuExitHandler+0x2c>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003894:	f7fd fc98 	bl	80011c8 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003898:	4806      	ldr	r0, [pc, #24]	; (80038b4 <BiasMenuExitHandler+0x30>)
 800389a:	f00b fc93 	bl	800f1c4 <puts>
#endif

	eNewEvent = evIdle;
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <BiasMenuExitHandler+0x34>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80038a4:	2301      	movs	r3, #1
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	0801262c 	.word	0x0801262c
 80038b0:	20001f19 	.word	0x20001f19
 80038b4:	08012650 	.word	0x08012650
 80038b8:	20001f1b 	.word	0x20001f1b

080038bc <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0

	switch(eNextState)
 80038c0:	4bb8      	ldr	r3, [pc, #736]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b0e      	cmp	r3, #14
 80038c6:	f200 8216 	bhi.w	8003cf6 <EM_ProcessEvent+0x43a>
 80038ca:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <EM_ProcessEvent+0x14>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	0800390d 	.word	0x0800390d
 80038d4:	0800393f 	.word	0x0800393f
 80038d8:	080039c5 	.word	0x080039c5
 80038dc:	080039e3 	.word	0x080039e3
 80038e0:	08003a2f 	.word	0x08003a2f
 80038e4:	08003a61 	.word	0x08003a61
 80038e8:	08003a93 	.word	0x08003a93
 80038ec:	08003adf 	.word	0x08003adf
 80038f0:	08003b11 	.word	0x08003b11
 80038f4:	08003cf7 	.word	0x08003cf7
 80038f8:	08003b43 	.word	0x08003b43
 80038fc:	08003bd5 	.word	0x08003bd5
 8003900:	08003c07 	.word	0x08003c07
 8003904:	08003c37 	.word	0x08003c37
 8003908:	08003cc1 	.word	0x08003cc1
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 800390c:	48a6      	ldr	r0, [pc, #664]	; (8003ba8 <EM_ProcessEvent+0x2ec>)
 800390e:	f00b fc59 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003912:	4ba6      	ldr	r3, [pc, #664]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 800391a:	f000 ff8f 	bl	800483c <ToplevelOutputMenuEntryHandler>
 800391e:	4603      	mov	r3, r0
 8003920:	461a      	mov	r2, r3
 8003922:	4ba0      	ldr	r3, [pc, #640]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003924:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003926:	4ba1      	ldr	r3, [pc, #644]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b02      	cmp	r3, #2
 800392c:	f040 81e5 	bne.w	8003cfa <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003930:	f000 ffb0 	bl	8004894 <ToplevelInputMenuEntryHandler>
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	4b9a      	ldr	r3, [pc, #616]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 800393a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 800393c:	e1dd      	b.n	8003cfa <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 800393e:	489c      	ldr	r0, [pc, #624]	; (8003bb0 <EM_ProcessEvent+0x2f4>)
 8003940:	f00b fc40 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003944:	4b99      	ldr	r3, [pc, #612]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b06      	cmp	r3, #6
 800394a:	d105      	bne.n	8003958 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 800394c:	f000 ff8c 	bl	8004868 <ToplevelOutputMenuExitHandler>
 8003950:	4603      	mov	r3, r0
 8003952:	461a      	mov	r2, r3
 8003954:	4b93      	ldr	r3, [pc, #588]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003956:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003958:	4b94      	ldr	r3, [pc, #592]	; (8003bac <EM_ProcessEvent+0x2f0>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d108      	bne.n	8003972 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003960:	2000      	movs	r0, #0
 8003962:	f000 ff5b 	bl	800481c <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003966:	f000 fd59 	bl	800441c <FuncMainMenuEntryHandler>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003970:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003972:	4b8e      	ldr	r3, [pc, #568]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d108      	bne.n	800398c <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800397a:	2000      	movs	r0, #0
 800397c:	f000 ff4e 	bl	800481c <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003980:	f000 fb76 	bl	8004070 <FreqMainMenuEntryHandler>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	4b86      	ldr	r3, [pc, #536]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 800398a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 800398c:	4b87      	ldr	r3, [pc, #540]	; (8003bac <EM_ProcessEvent+0x2f0>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d108      	bne.n	80039a6 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003994:	2000      	movs	r0, #0
 8003996:	f000 ff41 	bl	800481c <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 800399a:	f000 fe41 	bl	8004620 <GainMainMenuEntryHandler>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b80      	ldr	r3, [pc, #512]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 80039a4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <EM_ProcessEvent+0x2f0>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	f040 81a7 	bne.w	8003cfe <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80039b0:	2000      	movs	r0, #0
 80039b2:	f000 ff33 	bl	800481c <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 80039b6:	f7ff ff2d 	bl	8003814 <BiasMenuEntryHandler>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	4b79      	ldr	r3, [pc, #484]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 80039c0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80039c2:	e19c      	b.n	8003cfe <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 80039c4:	487b      	ldr	r0, [pc, #492]	; (8003bb4 <EM_ProcessEvent+0x2f8>)
 80039c6:	f00b fbfd 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80039ca:	4b78      	ldr	r3, [pc, #480]	; (8003bac <EM_ProcessEvent+0x2f0>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b06      	cmp	r3, #6
 80039d0:	f040 8197 	bne.w	8003d02 <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 80039d4:	f000 ff74 	bl	80048c0 <ToplevelInputMenuExitHandler>
 80039d8:	4603      	mov	r3, r0
 80039da:	461a      	mov	r2, r3
 80039dc:	4b71      	ldr	r3, [pc, #452]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 80039de:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 80039e0:	e18f      	b.n	8003d02 <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 80039e2:	4875      	ldr	r0, [pc, #468]	; (8003bb8 <EM_ProcessEvent+0x2fc>)
 80039e4:	f00b fbee 	bl	800f1c4 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80039e8:	4b70      	ldr	r3, [pc, #448]	; (8003bac <EM_ProcessEvent+0x2f0>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d108      	bne.n	8003a02 <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 80039f0:	f000 fd2a 	bl	8004448 <FuncMainMenuExitHandler>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b6a      	ldr	r3, [pc, #424]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 80039fa:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80039fc:	2002      	movs	r0, #2
 80039fe:	f000 ff0d 	bl	800481c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003a02:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003a0a:	f000 fd39 	bl	8004480 <FuncSignalMenuEntryHandler>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b64      	ldr	r3, [pc, #400]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003a14:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	f040 8173 	bne.w	8003d06 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003a20:	f000 fd90 	bl	8004544 <FuncSyncMenuEntryHandler>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	4b5e      	ldr	r3, [pc, #376]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003a2a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003a2c:	e16b      	b.n	8003d06 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 8003a2e:	4863      	ldr	r0, [pc, #396]	; (8003bbc <EM_ProcessEvent+0x300>)
 8003a30:	f00b fbc8 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003a34:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d105      	bne.n	8003a48 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003a3c:	f000 fd56 	bl	80044ec <FuncSignalMenuInputHandler>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b57      	ldr	r3, [pc, #348]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003a46:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003a48:	4b58      	ldr	r3, [pc, #352]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	f040 815c 	bne.w	8003d0a <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003a52:	f000 fd61 	bl	8004518 <FuncSignalMenuExitHandler>
 8003a56:	4603      	mov	r3, r0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b52      	ldr	r3, [pc, #328]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003a5c:	701a      	strb	r2, [r3, #0]

			}

			break;
 8003a5e:	e154      	b.n	8003d0a <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 8003a60:	4857      	ldr	r0, [pc, #348]	; (8003bc0 <EM_ProcessEvent+0x304>)
 8003a62:	f00b fbaf 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003a66:	4b51      	ldr	r3, [pc, #324]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b05      	cmp	r3, #5
 8003a6c:	d105      	bne.n	8003a7a <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 8003a6e:	f000 fd9f 	bl	80045b0 <FuncSyncMenuInputHandler>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003a78:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003a7a:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	f040 8145 	bne.w	8003d0e <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003a84:	f000 fdaa 	bl	80045dc <FuncSyncMenuExitHandler>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4b45      	ldr	r3, [pc, #276]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003a8e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003a90:	e13d      	b.n	8003d0e <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003a92:	484c      	ldr	r0, [pc, #304]	; (8003bc4 <EM_ProcessEvent+0x308>)
 8003a94:	f00b fb96 	bl	800f1c4 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003a98:	4b44      	ldr	r3, [pc, #272]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b06      	cmp	r3, #6
 8003a9e:	d108      	bne.n	8003ab2 <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 8003aa0:	f000 fdd4 	bl	800464c <GainMainMenuExitHandler>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003aaa:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003aac:	2002      	movs	r0, #2
 8003aae:	f000 feb5 	bl	800481c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003aba:	f000 fde3 	bl	8004684 <GainSignalMenuEntryHandler>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003ac4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	f040 8121 	bne.w	8003d12 <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003ad0:	f000 fe38 	bl	8004744 <GainSyncMenuEntryHandler>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003ada:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003adc:	e119      	b.n	8003d12 <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 8003ade:	483a      	ldr	r0, [pc, #232]	; (8003bc8 <EM_ProcessEvent+0x30c>)
 8003ae0:	f00b fb70 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003ae4:	4b31      	ldr	r3, [pc, #196]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d105      	bne.n	8003af8 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 8003aec:	f000 fdfe 	bl	80046ec <GainSignalMenuInputHandler>
 8003af0:	4603      	mov	r3, r0
 8003af2:	461a      	mov	r2, r3
 8003af4:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003af6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003af8:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	f040 810a 	bne.w	8003d16 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 8003b02:	f000 fe09 	bl	8004718 <GainSignalMenuExitHandler>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003b0c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003b0e:	e102      	b.n	8003d16 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 8003b10:	482e      	ldr	r0, [pc, #184]	; (8003bcc <EM_ProcessEvent+0x310>)
 8003b12:	f00b fb57 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003b16:	4b25      	ldr	r3, [pc, #148]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d105      	bne.n	8003b2a <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 8003b1e:	f000 fe45 	bl	80047ac <GainSyncMenuInputHandler>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b1f      	ldr	r3, [pc, #124]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003b28:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	f040 80f3 	bne.w	8003d1a <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 8003b34:	f000 fe50 	bl	80047d8 <GainSyncMenuExitHandler>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003b3e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003b40:	e0eb      	b.n	8003d1a <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003b42:	4823      	ldr	r0, [pc, #140]	; (8003bd0 <EM_ProcessEvent+0x314>)
 8003b44:	f00b fb3e 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003b48:	4b18      	ldr	r3, [pc, #96]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	d108      	bne.n	8003b62 <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 8003b50:	f000 faa4 	bl	800409c <FreqMainMenuExitHandler>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003b5a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003b5c:	2002      	movs	r0, #2
 8003b5e:	f000 fe5d 	bl	800481c <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d105      	bne.n	8003b76 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003b6a:	f000 fab9 	bl	80040e0 <FreqPresetMenuEntryHandler>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003b74:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d105      	bne.n	8003b8a <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003b7e:	f000 fb0d 	bl	800419c <FreqAdjustMenuEntryHandler>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003b88:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <EM_ProcessEvent+0x2f0>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	f040 80c5 	bne.w	8003d1e <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003b94:	f000 f8ea 	bl	8003d6c <FreqSweepMenuEntryHandler>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b01      	ldr	r3, [pc, #4]	; (8003ba4 <EM_ProcessEvent+0x2e8>)
 8003b9e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003ba0:	e0bd      	b.n	8003d1e <EM_ProcessEvent+0x462>
 8003ba2:	bf00      	nop
 8003ba4:	20001f1a 	.word	0x20001f1a
 8003ba8:	08012668 	.word	0x08012668
 8003bac:	20001f1b 	.word	0x20001f1b
 8003bb0:	08012674 	.word	0x08012674
 8003bb4:	08012690 	.word	0x08012690
 8003bb8:	080126ac 	.word	0x080126ac
 8003bbc:	080126c4 	.word	0x080126c4
 8003bc0:	080126dc 	.word	0x080126dc
 8003bc4:	080126f4 	.word	0x080126f4
 8003bc8:	0801270c 	.word	0x0801270c
 8003bcc:	08012724 	.word	0x08012724
 8003bd0:	0801273c 	.word	0x0801273c

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003bd4:	4857      	ldr	r0, [pc, #348]	; (8003d34 <EM_ProcessEvent+0x478>)
 8003bd6:	f00b faf5 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003bda:	4b57      	ldr	r3, [pc, #348]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d105      	bne.n	8003bee <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003be2:	f000 faaf 	bl	8004144 <FreqPresetMenuInputHandler>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b54      	ldr	r3, [pc, #336]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003bec:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003bee:	4b52      	ldr	r3, [pc, #328]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	f040 8095 	bne.w	8003d22 <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003bf8:	f000 faba 	bl	8004170 <FreqPresetMenuExitHandler>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4b4e      	ldr	r3, [pc, #312]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003c02:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003c04:	e08d      	b.n	8003d22 <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003c06:	484e      	ldr	r0, [pc, #312]	; (8003d40 <EM_ProcessEvent+0x484>)
 8003c08:	f00b fadc 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003c0c:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d105      	bne.n	8003c20 <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003c14:	f000 fae4 	bl	80041e0 <FreqAdjustMenuInputHandler>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003c1e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003c20:	4b45      	ldr	r3, [pc, #276]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d17e      	bne.n	8003d26 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003c28:	f000 faec 	bl	8004204 <FreqAdjustMenuExitHandler>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003c32:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003c34:	e077      	b.n	8003d26 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8003c36:	4843      	ldr	r0, [pc, #268]	; (8003d44 <EM_ProcessEvent+0x488>)
 8003c38:	f00b fac4 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003c3c:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d106      	bne.n	8003c52 <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8003c44:	2007      	movs	r0, #7
 8003c46:	f000 f8ed 	bl	8003e24 <FreqSweepMenuInputHandler>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003c50:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003c52:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d106      	bne.n	8003c68 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8003c5a:	2008      	movs	r0, #8
 8003c5c:	f000 f8e2 	bl	8003e24 <FreqSweepMenuInputHandler>
 8003c60:	4603      	mov	r3, r0
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003c66:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003c68:	4b33      	ldr	r3, [pc, #204]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d106      	bne.n	8003c7e <EM_ProcessEvent+0x3c2>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003c70:	2009      	movs	r0, #9
 8003c72:	f000 f8d7 	bl	8003e24 <FreqSweepMenuInputHandler>
 8003c76:	4603      	mov	r3, r0
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003c7c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d106      	bne.n	8003c94 <EM_ProcessEvent+0x3d8>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8003c86:	200a      	movs	r0, #10
 8003c88:	f000 f8cc 	bl	8003e24 <FreqSweepMenuInputHandler>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003c92:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8003c94:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d106      	bne.n	8003caa <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8003c9c:	200b      	movs	r0, #11
 8003c9e:	f000 f8c1 	bl	8003e24 <FreqSweepMenuInputHandler>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003ca8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003caa:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d13b      	bne.n	8003d2a <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 8003cb2:	f000 f9b9 	bl	8004028 <FreqSweepMenuExitHandler>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003cbc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003cbe:	e034      	b.n	8003d2a <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 8003cc0:	4821      	ldr	r0, [pc, #132]	; (8003d48 <EM_ProcessEvent+0x48c>)
 8003cc2:	f00b fa7f 	bl	800f1c4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d105      	bne.n	8003cda <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 8003cce:	f7ff fdc3 	bl	8003858 <BiasMenuInputHandler>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003cd8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003cda:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <EM_ProcessEvent+0x47c>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d125      	bne.n	8003d2e <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 8003ce2:	f7ff fdcf 	bl	8003884 <BiasMenuExitHandler>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <EM_ProcessEvent+0x480>)
 8003cec:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003cee:	2002      	movs	r0, #2
 8003cf0:	f000 fd94 	bl	800481c <ToplevelMenu_setStatus>
			}

			break;
 8003cf4:	e01b      	b.n	8003d2e <EM_ProcessEvent+0x472>

		default:
			break;
 8003cf6:	bf00      	nop
 8003cf8:	e01a      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003cfa:	bf00      	nop
 8003cfc:	e018      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003cfe:	bf00      	nop
 8003d00:	e016      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d02:	bf00      	nop
 8003d04:	e014      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d06:	bf00      	nop
 8003d08:	e012      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d0a:	bf00      	nop
 8003d0c:	e010      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d0e:	bf00      	nop
 8003d10:	e00e      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d12:	bf00      	nop
 8003d14:	e00c      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d16:	bf00      	nop
 8003d18:	e00a      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d1a:	bf00      	nop
 8003d1c:	e008      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d1e:	bf00      	nop
 8003d20:	e006      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d22:	bf00      	nop
 8003d24:	e004      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d26:	bf00      	nop
 8003d28:	e002      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <EM_ProcessEvent+0x474>
			break;
 8003d2e:	bf00      	nop
	}

}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08012754 	.word	0x08012754
 8003d38:	20001f1b 	.word	0x20001f1b
 8003d3c:	20001f1a 	.word	0x20001f1a
 8003d40:	0801276c 	.word	0x0801276c
 8003d44:	08012784 	.word	0x08012784
 8003d48:	0801279c 	.word	0x0801279c

08003d4c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003d56:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <EM_SetNewEvent+0x1c>)
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	7013      	strb	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	20001f1b 	.word	0x20001f1b

08003d6c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8003d70:	4825      	ldr	r0, [pc, #148]	; (8003e08 <FreqSweepMenuEntryHandler+0x9c>)
 8003d72:	f00b fa27 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 8003d76:	f7fd fa27 	bl	80011c8 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8003d7a:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <FreqSweepMenuEntryHandler+0xa0>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <FreqSweepMenuEntryHandler+0xa4>)
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	d008      	beq.n	8003da8 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <FreqSweepMenuEntryHandler+0xa0>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da2:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <FreqSweepMenuEntryHandler+0xa4>)
 8003da4:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <FreqSweepMenuEntryHandler+0xa4>)
 8003daa:	edd3 7a00 	vldr	s15, [r3]
 8003dae:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003db2:	eef4 7a47 	vcmp.f32	s15, s14
 8003db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dba:	d101      	bne.n	8003dc0 <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 8003dbc:	f000 fa38 	bl	8004230 <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f000 fa89 	bl	80042d8 <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f000 faa6 	bl	8004318 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003dcc:	f000 fae0 	bl	8004390 <_getCalculatedSweepFrequencyInHertz>
 8003dd0:	eef0 7a40 	vmov.f32	s15, s0
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <FreqSweepMenuEntryHandler+0xa8>)
 8003dd6:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8003dda:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <FreqSweepMenuEntryHandler+0xac>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003de0:	2009      	movs	r0, #9
 8003de2:	f000 f81f 	bl	8003e24 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <FreqSweepMenuEntryHandler+0xac>)
 8003de8:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8003dec:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <FreqSweepMenuEntryHandler+0xac>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <FreqSweepMenuEntryHandler+0xb0>)
 8003df6:	2204      	movs	r2, #4
 8003df8:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <FreqSweepMenuEntryHandler+0xb4>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003e00:	230d      	movs	r3, #13
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	080127ac 	.word	0x080127ac
 8003e0c:	40013400 	.word	0x40013400
 8003e10:	2000000c 	.word	0x2000000c
 8003e14:	20001f38 	.word	0x20001f38
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	20001f1e 	.word	0x20001f1e
 8003e20:	20001f1b 	.word	0x20001f1b

08003e24 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003e2e:	4871      	ldr	r0, [pc, #452]	; (8003ff4 <FreqSweepMenuInputHandler+0x1d0>)
 8003e30:	f00b f9c8 	bl	800f1c4 <puts>
	#endif



	switch(pEvent)
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	3b07      	subs	r3, #7
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	f200 80d1 	bhi.w	8003fe0 <FreqSweepMenuInputHandler+0x1bc>
 8003e3e:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <FreqSweepMenuInputHandler+0x20>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003e59 	.word	0x08003e59
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003f73 	.word	0x08003f73
 8003e50:	08003f7b 	.word	0x08003f7b
 8003e54:	08003eaf 	.word	0x08003eaf
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8003e58:	4867      	ldr	r0, [pc, #412]	; (8003ff8 <FreqSweepMenuInputHandler+0x1d4>)
 8003e5a:	f00b f9b3 	bl	800f1c4 <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8003e5e:	4b67      	ldr	r3, [pc, #412]	; (8003ffc <FreqSweepMenuInputHandler+0x1d8>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4a66      	ldr	r2, [pc, #408]	; (8003ffc <FreqSweepMenuInputHandler+0x1d8>)
 8003e64:	f083 0301 	eor.w	r3, r3, #1
 8003e68:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8003e6a:	4b64      	ldr	r3, [pc, #400]	; (8003ffc <FreqSweepMenuInputHandler+0x1d8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a63      	ldr	r2, [pc, #396]	; (8003ffc <FreqSweepMenuInputHandler+0x1d8>)
 8003e70:	f083 0301 	eor.w	r3, r3, #1
 8003e74:	6013      	str	r3, [r2, #0]
			break;
 8003e76:	e0b4      	b.n	8003fe2 <FreqSweepMenuInputHandler+0x1be>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8003e78:	4861      	ldr	r0, [pc, #388]	; (8004000 <FreqSweepMenuInputHandler+0x1dc>)
 8003e7a:	f00b f9a3 	bl	800f1c4 <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8003e7e:	4b61      	ldr	r3, [pc, #388]	; (8004004 <FreqSweepMenuInputHandler+0x1e0>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	f083 0301 	eor.w	r3, r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	4b5e      	ldr	r3, [pc, #376]	; (8004004 <FreqSweepMenuInputHandler+0x1e0>)
 8003e8a:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8003e8c:	4b5d      	ldr	r3, [pc, #372]	; (8004004 <FreqSweepMenuInputHandler+0x1e0>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d004      	beq.n	8003e9e <FreqSweepMenuInputHandler+0x7a>
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d008      	beq.n	8003eaa <FreqSweepMenuInputHandler+0x86>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <FreqSweepMenuInputHandler+0x80>
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
			}
			// switch(active_sweep_mode)

			break;
 8003e9c:	e0a1      	b.n	8003fe2 <FreqSweepMenuInputHandler+0x1be>
					_setSweepModeDown();
 8003e9e:	f000 f9c7 	bl	8004230 <_setSweepModeDown>
					break;
 8003ea2:	e003      	b.n	8003eac <FreqSweepMenuInputHandler+0x88>
					_setSweepModeUp();
 8003ea4:	f000 f9ee 	bl	8004284 <_setSweepModeUp>
					break;
 8003ea8:	e000      	b.n	8003eac <FreqSweepMenuInputHandler+0x88>
					break;
 8003eaa:	bf00      	nop
			break;
 8003eac:	e099      	b.n	8003fe2 <FreqSweepMenuInputHandler+0x1be>

		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8003eae:	4856      	ldr	r0, [pc, #344]	; (8004008 <FreqSweepMenuInputHandler+0x1e4>)
 8003eb0:	f00b f988 	bl	800f1c4 <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 8003eb4:	4b55      	ldr	r3, [pc, #340]	; (800400c <FreqSweepMenuInputHandler+0x1e8>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <FreqSweepMenuInputHandler+0x9e>
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d00b      	beq.n	8003ed8 <FreqSweepMenuInputHandler+0xb4>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8003ec0:	e08f      	b.n	8003fe2 <FreqSweepMenuInputHandler+0x1be>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f000 fa28 	bl	8004318 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003ec8:	f000 fa62 	bl	8004390 <_getCalculatedSweepFrequencyInHertz>
 8003ecc:	eef0 7a40 	vmov.f32	s15, s0
 8003ed0:	4b4f      	ldr	r3, [pc, #316]	; (8004010 <FreqSweepMenuInputHandler+0x1ec>)
 8003ed2:	edc3 7a00 	vstr	s15, [r3]
					break;
 8003ed6:	e04b      	b.n	8003f70 <FreqSweepMenuInputHandler+0x14c>
					switch(active_sweep_mode)
 8003ed8:	4b4a      	ldr	r3, [pc, #296]	; (8004004 <FreqSweepMenuInputHandler+0x1e0>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <FreqSweepMenuInputHandler+0xc2>
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d022      	beq.n	8003f2a <FreqSweepMenuInputHandler+0x106>
							break;
 8003ee4:	e043      	b.n	8003f6e <FreqSweepMenuInputHandler+0x14a>
							ENCODER_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8003ee6:	4b4b      	ldr	r3, [pc, #300]	; (8004014 <FreqSweepMenuInputHandler+0x1f0>)
 8003ee8:	edd3 7a00 	vldr	s15, [r3]
 8003eec:	4b4a      	ldr	r3, [pc, #296]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef2:	ee17 2a90 	vmov	r2, s15
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c
							if(ENCODER_TIMER->CNT < sweep_upper_bounds_longest_output_arr)
 8003ef8:	4b47      	ldr	r3, [pc, #284]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f04:	4b43      	ldr	r3, [pc, #268]	; (8004014 <FreqSweepMenuInputHandler+0x1f0>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f12:	d400      	bmi.n	8003f16 <FreqSweepMenuInputHandler+0xf2>
							break;
 8003f14:	e02b      	b.n	8003f6e <FreqSweepMenuInputHandler+0x14a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8003f16:	4b40      	ldr	r3, [pc, #256]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f22:	4b3e      	ldr	r3, [pc, #248]	; (800401c <FreqSweepMenuInputHandler+0x1f8>)
 8003f24:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003f28:	e021      	b.n	8003f6e <FreqSweepMenuInputHandler+0x14a>
							ENCODER_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8003f2a:	4b3c      	ldr	r3, [pc, #240]	; (800401c <FreqSweepMenuInputHandler+0x1f8>)
 8003f2c:	edd3 7a00 	vldr	s15, [r3]
 8003f30:	4b39      	ldr	r3, [pc, #228]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f36:	ee17 2a90 	vmov	r2, s15
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
							if(ENCODER_TIMER->CNT > sweep_lower_bounds_shortest_output_arr)
 8003f3c:	4b36      	ldr	r3, [pc, #216]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f48:	4b34      	ldr	r3, [pc, #208]	; (800401c <FreqSweepMenuInputHandler+0x1f8>)
 8003f4a:	edd3 7a00 	vldr	s15, [r3]
 8003f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	dc00      	bgt.n	8003f5a <FreqSweepMenuInputHandler+0x136>
							break;
 8003f58:	e008      	b.n	8003f6c <FreqSweepMenuInputHandler+0x148>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <FreqSweepMenuInputHandler+0x1f0>)
 8003f68:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003f6c:	bf00      	nop
					break;
 8003f6e:	bf00      	nop
			break;
 8003f70:	e037      	b.n	8003fe2 <FreqSweepMenuInputHandler+0x1be>

		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003f72:	2000      	movs	r0, #0
 8003f74:	f000 f9b0 	bl	80042d8 <_setEncoderControlMode>
			break;
 8003f78:	e033      	b.n	8003fe2 <FreqSweepMenuInputHandler+0x1be>

		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	f000 f9ac 	bl	80042d8 <_setEncoderControlMode>
			switch(active_sweep_mode)
 8003f80:	4b20      	ldr	r3, [pc, #128]	; (8004004 <FreqSweepMenuInputHandler+0x1e0>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <FreqSweepMenuInputHandler+0x16a>
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d014      	beq.n	8003fb6 <FreqSweepMenuInputHandler+0x192>
						// if encoder position is below the lower bounds set it above it
						if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
							ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
					break;
				default:
					break;
 8003f8c:	e027      	b.n	8003fde <FreqSweepMenuInputHandler+0x1ba>
						if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8003f8e:	4b22      	ldr	r3, [pc, #136]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <FreqSweepMenuInputHandler+0x1f0>)
 8003f9c:	edd3 7a00 	vldr	s15, [r3]
 8003fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa8:	dc00      	bgt.n	8003fac <FreqSweepMenuInputHandler+0x188>
					break;
 8003faa:	e018      	b.n	8003fde <FreqSweepMenuInputHandler+0x1ba>
							 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003fac:	4b1c      	ldr	r3, [pc, #112]	; (8004020 <FreqSweepMenuInputHandler+0x1fc>)
 8003fae:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	6253      	str	r3, [r2, #36]	; 0x24
					break;
 8003fb4:	e013      	b.n	8003fde <FreqSweepMenuInputHandler+0x1ba>
						if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8003fb6:	4b18      	ldr	r3, [pc, #96]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc2:	4b16      	ldr	r3, [pc, #88]	; (800401c <FreqSweepMenuInputHandler+0x1f8>)
 8003fc4:	edd3 7a00 	vldr	s15, [r3]
 8003fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd0:	d400      	bmi.n	8003fd4 <FreqSweepMenuInputHandler+0x1b0>
					break;
 8003fd2:	e003      	b.n	8003fdc <FreqSweepMenuInputHandler+0x1b8>
							ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003fd4:	4b12      	ldr	r3, [pc, #72]	; (8004020 <FreqSweepMenuInputHandler+0x1fc>)
 8003fd6:	4a10      	ldr	r2, [pc, #64]	; (8004018 <FreqSweepMenuInputHandler+0x1f4>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	6253      	str	r3, [r2, #36]	; 0x24
					break;
 8003fdc:	bf00      	nop
			}
			// switch(active_sweep_mode)

			break;
 8003fde:	e000      	b.n	8003fe2 <FreqSweepMenuInputHandler+0x1be>

		default:
			break;
 8003fe0:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <FreqSweepMenuInputHandler+0x200>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003fe8:	230d      	movs	r3, #13
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	080127d0 	.word	0x080127d0
 8003ff8:	080127fc 	.word	0x080127fc
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	08012814 	.word	0x08012814
 8004004:	20001f1c 	.word	0x20001f1c
 8004008:	0801282c 	.word	0x0801282c
 800400c:	20001f1d 	.word	0x20001f1d
 8004010:	20001f38 	.word	0x20001f38
 8004014:	2000000c 	.word	0x2000000c
 8004018:	40012c00 	.word	0x40012c00
 800401c:	20000008 	.word	0x20000008
 8004020:	40013400 	.word	0x40013400
 8004024:	20001f1b 	.word	0x20001f1b

08004028 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 800402c:	480c      	ldr	r0, [pc, #48]	; (8004060 <FreqSweepMenuExitHandler+0x38>)
 800402e:	f00b f8c9 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 8004032:	f7fd f8c9 	bl	80011c8 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <FreqSweepMenuExitHandler+0x3c>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <FreqSweepMenuExitHandler+0x3c>)
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <FreqSweepMenuExitHandler+0x3c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a07      	ldr	r2, [pc, #28]	; (8004064 <FreqSweepMenuExitHandler+0x3c>)
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <FreqSweepMenuExitHandler+0x40>)
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <FreqSweepMenuExitHandler+0x44>)
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800405a:	230a      	movs	r3, #10
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	08012844 	.word	0x08012844
 8004064:	40000c00 	.word	0x40000c00
 8004068:	20001f1e 	.word	0x20001f1e
 800406c:	20001f1b 	.word	0x20001f1b

08004070 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8004074:	4806      	ldr	r0, [pc, #24]	; (8004090 <FreqMainMenuEntryHandler+0x20>)
 8004076:	f00b f8a5 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 800407a:	f7fd f8a5 	bl	80011c8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <FreqMainMenuEntryHandler+0x24>)
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <FreqMainMenuEntryHandler+0x28>)
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800408a:	230a      	movs	r3, #10
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	0801286c 	.word	0x0801286c
 8004094:	20001f1e 	.word	0x20001f1e
 8004098:	20001f1b 	.word	0x20001f1b

0800409c <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 80040a0:	480a      	ldr	r0, [pc, #40]	; (80040cc <FreqMainMenuExitHandler+0x30>)
 80040a2:	f00b f88f 	bl	800f1c4 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <FreqMainMenuExitHandler+0x34>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <FreqMainMenuExitHandler+0x38>)
 80040ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b2:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 80040b4:	f7fd f888 	bl	80011c8 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 80040b8:	4807      	ldr	r0, [pc, #28]	; (80040d8 <FreqMainMenuExitHandler+0x3c>)
 80040ba:	f00b f883 	bl	800f1c4 <puts>
	#endif

	eNewEvent = evIdle;
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <FreqMainMenuExitHandler+0x40>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80040c4:	2301      	movs	r3, #1
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	080128bc 	.word	0x080128bc
 80040d0:	20001f1e 	.word	0x20001f1e
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	080128e4 	.word	0x080128e4
 80040dc:	20001f1b 	.word	0x20001f1b

080040e0 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 80040e6:	4812      	ldr	r0, [pc, #72]	; (8004130 <FreqPresetMenuEntryHandler+0x50>)
 80040e8:	f00b f86c 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 80040ec:	f7fd f86c 	bl	80011c8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <FreqPresetMenuEntryHandler+0x54>)
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80040f6:	f000 ff6b 	bl	8004fd0 <FreqO_GetFPresetObject>
 80040fa:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	791a      	ldrb	r2, [r3, #4]
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <FreqPresetMenuEntryHandler+0x58>)
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 800410a:	f000 ff93 	bl	8005034 <FreqO_GetFreqPresetEncoderRange>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <FreqPresetMenuEntryHandler+0x58>)
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c
 8004116:	e002      	b.n	800411e <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004118:	4808      	ldr	r0, [pc, #32]	; (800413c <FreqPresetMenuEntryHandler+0x5c>)
 800411a:	f7fd f89f 	bl	800125c <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <FreqPresetMenuEntryHandler+0x60>)
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004124:	230b      	movs	r3, #11
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	080128fc 	.word	0x080128fc
 8004134:	20001f1e 	.word	0x20001f1e
 8004138:	40012c00 	.word	0x40012c00
 800413c:	08012928 	.word	0x08012928
 8004140:	20001f1b 	.word	0x20001f1b

08004144 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8004148:	4807      	ldr	r0, [pc, #28]	; (8004168 <FreqPresetMenuInputHandler+0x24>)
 800414a:	f00b f83b 	bl	800f1c4 <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800414e:	2001      	movs	r0, #1
 8004150:	f001 fad4 	bl	80056fc <SM_GetEncoderValue>
 8004154:	4603      	mov	r3, r0
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fe48 	bl	8004dec <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <FreqPresetMenuInputHandler+0x28>)
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004162:	230b      	movs	r3, #11
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	08012964 	.word	0x08012964
 800416c:	20001f1b 	.word	0x20001f1b

08004170 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8004174:	4806      	ldr	r0, [pc, #24]	; (8004190 <FreqPresetMenuExitHandler+0x20>)
 8004176:	f00b f825 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 800417a:	f7fd f825 	bl	80011c8 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <FreqPresetMenuExitHandler+0x24>)
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <FreqPresetMenuExitHandler+0x28>)
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800418a:	230a      	movs	r3, #10
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	08012990 	.word	0x08012990
 8004194:	20001f1e 	.word	0x20001f1e
 8004198:	20001f1b 	.word	0x20001f1b

0800419c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 80041a0:	480a      	ldr	r0, [pc, #40]	; (80041cc <FreqAdjustMenuEntryHandler+0x30>)
 80041a2:	f00b f80f 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 80041a6:	f7fd f80f 	bl	80011c8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <FreqAdjustMenuEntryHandler+0x34>)
 80041ac:	2203      	movs	r2, #3
 80041ae:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <FreqAdjustMenuEntryHandler+0x38>)
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <FreqAdjustMenuEntryHandler+0x3c>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <FreqAdjustMenuEntryHandler+0x3c>)
 80041ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <FreqAdjustMenuEntryHandler+0x40>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80041c6:	230c      	movs	r3, #12
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	080129bc 	.word	0x080129bc
 80041d0:	20001f1e 	.word	0x20001f1e
 80041d4:	40013400 	.word	0x40013400
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	20001f1b 	.word	0x20001f1b

080041e0 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 80041e4:	4805      	ldr	r0, [pc, #20]	; (80041fc <FreqAdjustMenuInputHandler+0x1c>)
 80041e6:	f00a ffed 	bl	800f1c4 <puts>
	#endif

	FreqO_AdjustFreq();
 80041ea:	f000 fdf1 	bl	8004dd0 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <FreqAdjustMenuInputHandler+0x20>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80041f4:	230c      	movs	r3, #12
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	080127d0 	.word	0x080127d0
 8004200:	20001f1b 	.word	0x20001f1b

08004204 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8004208:	4806      	ldr	r0, [pc, #24]	; (8004224 <FreqAdjustMenuExitHandler+0x20>)
 800420a:	f00a ffdb 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 800420e:	f7fc ffdb 	bl	80011c8 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <FreqAdjustMenuExitHandler+0x24>)
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <FreqAdjustMenuExitHandler+0x28>)
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800421e:	230a      	movs	r3, #10
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	080129e8 	.word	0x080129e8
 8004228:	20001f1e 	.word	0x20001f1e
 800422c:	20001f1b 	.word	0x20001f1b

08004230 <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <_setSweepModeDown+0x40>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <_setSweepModeDown+0x40>)
 800423a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800423e:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <_setSweepModeDown+0x40>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <_setSweepModeDown+0x40>)
 8004246:	f043 0310 	orr.w	r3, r3, #16
 800424a:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <_setSweepModeDown+0x44>)
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	ee07 3a90 	vmov	s15, r3
 8004254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <_setSweepModeDown+0x48>)
 800425a:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <_setSweepModeDown+0x4c>)
 8004260:	4a07      	ldr	r2, [pc, #28]	; (8004280 <_setSweepModeDown+0x50>)
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40013400 	.word	0x40013400
 8004278:	20000008 	.word	0x20000008
 800427c:	2000000c 	.word	0x2000000c
 8004280:	477fff00 	.word	0x477fff00

08004284 <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <_setSweepModeUp+0x40>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <_setSweepModeUp+0x40>)
 800428e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004292:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <_setSweepModeUp+0x40>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <_setSweepModeUp+0x40>)
 800429a:	f023 0310 	bic.w	r3, r3, #16
 800429e:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <_setSweepModeUp+0x44>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ac:	4b07      	ldr	r3, [pc, #28]	; (80042cc <_setSweepModeUp+0x48>)
 80042ae:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <_setSweepModeUp+0x4c>)
 80042b4:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <_setSweepModeUp+0x50>)
 80042b6:	601a      	str	r2, [r3, #0]

}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40000c00 	.word	0x40000c00
 80042c8:	40013400 	.word	0x40013400
 80042cc:	2000000c 	.word	0x2000000c
 80042d0:	20000008 	.word	0x20000008
 80042d4:	41500000 	.word	0x41500000

080042d8 <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <_setEncoderControlMode+0x18>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80042e8:	4a09      	ldr	r2, [pc, #36]	; (8004310 <_setEncoderControlMode+0x38>)
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->ARR = 1600;
	}



}
 80042ee:	e009      	b.n	8004304 <_setEncoderControlMode+0x2c>
		theCurrentEncoderSweepFunction = pFunction;
 80042f0:	4a07      	ldr	r2, [pc, #28]	; (8004310 <_setEncoderControlMode+0x38>)
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = 1;
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <_setEncoderControlMode+0x3c>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 1600;
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <_setEncoderControlMode+0x3c>)
 80042fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20001f1d 	.word	0x20001f1d
 8004314:	40012c00 	.word	0x40012c00

08004318 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d122      	bne.n	800436e <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8004328:	4b17      	ldr	r3, [pc, #92]	; (8004388 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	4618      	mov	r0, r3
 800432e:	f7fc f911 	bl	8000554 <__aeabi_ui2d>
 8004332:	4603      	mov	r3, r0
 8004334:	460c      	mov	r4, r1
 8004336:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004378 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 800433a:	ec44 3b10 	vmov	d0, r3, r4
 800433e:	f00c fe9b 	bl	8011078 <pow>
 8004342:	ec51 0b10 	vmov	r0, r1, d0
 8004346:	a30e      	add	r3, pc, #56	; (adr r3, 8004380 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fb ffc6 	bl	80002dc <__adddf3>
 8004350:	4603      	mov	r3, r0
 8004352:	460c      	mov	r4, r1
 8004354:	4618      	mov	r0, r3
 8004356:	4621      	mov	r1, r4
 8004358:	f7fc fc4e 	bl	8000bf8 <__aeabi_d2uiz>
 800435c:	4603      	mov	r3, r0
 800435e:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004366:	d002      	beq.n	800436e <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004368:	4a08      	ldr	r2, [pc, #32]	; (800438c <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bd90      	pop	{r4, r7, pc}
 8004376:	bf00      	nop
 8004378:	00000000 	.word	0x00000000
 800437c:	40080000 	.word	0x40080000
 8004380:	00000000 	.word	0x00000000
 8004384:	40d06800 	.word	0x40d06800
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40000c00 	.word	0x40000c00

08004390 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <_getCalculatedSweepFrequencyInHertz+0x54>)
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043a8:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80043e8 <_getCalculatedSweepFrequencyInHertz+0x58>
 80043ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b0:	e011      	b.n	80043d6 <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <_getCalculatedSweepFrequencyInHertz+0x54>)
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <_getCalculatedSweepFrequencyInHertz+0x54>)
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ce:	eddf 6a06 	vldr	s13, [pc, #24]	; 80043e8 <_getCalculatedSweepFrequencyInHertz+0x58>
 80043d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 80043d6:	eeb0 0a67 	vmov.f32	s0, s15
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	4d2037a0 	.word	0x4d2037a0

080043ec <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <FreqMenu_getStatus+0x14>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20001f1e 	.word	0x20001f1e

08004404 <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <FuncMenu_getStatus+0x14>)
 800440a:	781b      	ldrb	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20001f1f 	.word	0x20001f1f

0800441c <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 8004420:	4806      	ldr	r0, [pc, #24]	; (800443c <FuncMainMenuEntryHandler+0x20>)
 8004422:	f00a fecf 	bl	800f1c4 <puts>
#endif

	DM_RefreshScreen();
 8004426:	f7fc fecf 	bl	80011c8 <DM_RefreshScreen>


	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <FuncMainMenuEntryHandler+0x24>)
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <FuncMainMenuEntryHandler+0x28>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004436:	2303      	movs	r3, #3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	08012a14 	.word	0x08012a14
 8004440:	20001f1f 	.word	0x20001f1f
 8004444:	20001f1b 	.word	0x20001f1b

08004448 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 800444c:	4808      	ldr	r0, [pc, #32]	; (8004470 <FuncMainMenuExitHandler+0x28>)
 800444e:	f00a feb9 	bl	800f1c4 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <FuncMainMenuExitHandler+0x2c>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004458:	f7fc feb6 	bl	80011c8 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 800445c:	4806      	ldr	r0, [pc, #24]	; (8004478 <FuncMainMenuExitHandler+0x30>)
 800445e:	f00a feb1 	bl	800f1c4 <puts>
#endif

	eNewEvent = evIdle;
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <FuncMainMenuExitHandler+0x34>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004468:	2301      	movs	r3, #1
}
 800446a:	4618      	mov	r0, r3
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	08012a64 	.word	0x08012a64
 8004474:	20001f1f 	.word	0x20001f1f
 8004478:	08012a8c 	.word	0x08012a8c
 800447c:	20001f1b 	.word	0x20001f1b

08004480 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 8004486:	4814      	ldr	r0, [pc, #80]	; (80044d8 <FuncSignalMenuEntryHandler+0x58>)
 8004488:	f00a fe9c 	bl	800f1c4 <puts>
#endif

	DM_RefreshScreen();
 800448c:	f7fc fe9c 	bl	80011c8 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <FuncSignalMenuEntryHandler+0x5c>)
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004496:	2000      	movs	r0, #0
 8004498:	f001 f91a 	bl	80056d0 <SM_GetOutputChannel>
 800449c:	4603      	mov	r3, r0
 800449e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80044a2:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	785a      	ldrb	r2, [r3, #1]
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <FuncSignalMenuEntryHandler+0x60>)
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 80044b2:	f000 ff3d 	bl	8005330 <FuncO_GetFuncPresetEncoderRange>
 80044b6:	4603      	mov	r3, r0
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <FuncSignalMenuEntryHandler+0x60>)
 80044bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80044be:	e002      	b.n	80044c6 <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80044c0:	4808      	ldr	r0, [pc, #32]	; (80044e4 <FuncSignalMenuEntryHandler+0x64>)
 80044c2:	f7fc fecb 	bl	800125c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <FuncSignalMenuEntryHandler+0x68>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80044cc:	2304      	movs	r3, #4
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	08012aa4 	.word	0x08012aa4
 80044dc:	20001f1f 	.word	0x20001f1f
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	08012ad0 	.word	0x08012ad0
 80044e8:	20001f1b 	.word	0x20001f1b

080044ec <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 80044f0:	4807      	ldr	r0, [pc, #28]	; (8004510 <FuncSignalMenuInputHandler+0x24>)
 80044f2:	f00a fe67 	bl	800f1c4 <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80044f6:	2001      	movs	r0, #1
 80044f8:	f001 f900 	bl	80056fc <SM_GetEncoderValue>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fdac 	bl	800505c <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <FuncSignalMenuInputHandler+0x28>)
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 800450a:	2304      	movs	r3, #4
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	08012b04 	.word	0x08012b04
 8004514:	20001f1b 	.word	0x20001f1b

08004518 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 800451c:	4806      	ldr	r0, [pc, #24]	; (8004538 <FuncSignalMenuExitHandler+0x20>)
 800451e:	f00a fe51 	bl	800f1c4 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <FuncSignalMenuExitHandler+0x24>)
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004528:	f7fc fe4e 	bl	80011c8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <FuncSignalMenuExitHandler+0x28>)
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004532:	2303      	movs	r3, #3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	08012b30 	.word	0x08012b30
 800453c:	20001f1f 	.word	0x20001f1f
 8004540:	20001f1b 	.word	0x20001f1b

08004544 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 800454a:	4814      	ldr	r0, [pc, #80]	; (800459c <FuncSyncMenuEntryHandler+0x58>)
 800454c:	f00a fe3a 	bl	800f1c4 <puts>
#endif

	DM_RefreshScreen();
 8004550:	f7fc fe3a 	bl	80011c8 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8004554:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <FuncSyncMenuEntryHandler+0x5c>)
 8004556:	2203      	movs	r2, #3
 8004558:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 800455a:	2001      	movs	r0, #1
 800455c:	f001 f8b8 	bl	80056d0 <SM_GetOutputChannel>
 8004560:	4603      	mov	r3, r0
 8004562:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004566:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	785a      	ldrb	r2, [r3, #1]
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <FuncSyncMenuEntryHandler+0x60>)
 8004574:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004576:	f000 fedb 	bl	8005330 <FuncO_GetFuncPresetEncoderRange>
 800457a:	4603      	mov	r3, r0
 800457c:	461a      	mov	r2, r3
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <FuncSyncMenuEntryHandler+0x60>)
 8004580:	62da      	str	r2, [r3, #44]	; 0x2c
 8004582:	e002      	b.n	800458a <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004584:	4808      	ldr	r0, [pc, #32]	; (80045a8 <FuncSyncMenuEntryHandler+0x64>)
 8004586:	f7fc fe69 	bl	800125c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <FuncSyncMenuEntryHandler+0x68>)
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004590:	2305      	movs	r3, #5
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	08012b5c 	.word	0x08012b5c
 80045a0:	20001f1f 	.word	0x20001f1f
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	08012ad0 	.word	0x08012ad0
 80045ac:	20001f1b 	.word	0x20001f1b

080045b0 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 80045b4:	4807      	ldr	r0, [pc, #28]	; (80045d4 <FuncSyncMenuInputHandler+0x24>)
 80045b6:	f00a fe05 	bl	800f1c4 <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80045ba:	2001      	movs	r0, #1
 80045bc:	f001 f89e 	bl	80056fc <SM_GetEncoderValue>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fda2 	bl	800510c <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <FuncSyncMenuInputHandler+0x28>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80045ce:	2305      	movs	r3, #5
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	08012b84 	.word	0x08012b84
 80045d8:	20001f1b 	.word	0x20001f1b

080045dc <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 80045e0:	4806      	ldr	r0, [pc, #24]	; (80045fc <FuncSyncMenuExitHandler+0x20>)
 80045e2:	f00a fdef 	bl	800f1c4 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <FuncSyncMenuExitHandler+0x24>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80045ec:	f7fc fdec 	bl	80011c8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <FuncSyncMenuExitHandler+0x28>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80045f6:	2303      	movs	r3, #3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	08012bac 	.word	0x08012bac
 8004600:	20001f1f 	.word	0x20001f1f
 8004604:	20001f1b 	.word	0x20001f1b

08004608 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <GainMenu_getStatus+0x14>)
 800460e:	781b      	ldrb	r3, [r3, #0]
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20001f20 	.word	0x20001f20

08004620 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 8004624:	4806      	ldr	r0, [pc, #24]	; (8004640 <GainMainMenuEntryHandler+0x20>)
 8004626:	f00a fdcd 	bl	800f1c4 <puts>
#endif

	DM_RefreshScreen();
 800462a:	f7fc fdcd 	bl	80011c8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <GainMainMenuEntryHandler+0x24>)
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <GainMainMenuEntryHandler+0x28>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800463a:	2306      	movs	r3, #6
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	08012bd4 	.word	0x08012bd4
 8004644:	20001f20 	.word	0x20001f20
 8004648:	20001f1b 	.word	0x20001f1b

0800464c <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 8004650:	4808      	ldr	r0, [pc, #32]	; (8004674 <GainMainMenuExitHandler+0x28>)
 8004652:	f00a fdb7 	bl	800f1c4 <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <GainMainMenuExitHandler+0x2c>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800465c:	f7fc fdb4 	bl	80011c8 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004660:	4806      	ldr	r0, [pc, #24]	; (800467c <GainMainMenuExitHandler+0x30>)
 8004662:	f00a fdaf 	bl	800f1c4 <puts>
#endif

	eNewEvent = evIdle;
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <GainMainMenuExitHandler+0x34>)
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800466c:	2301      	movs	r3, #1
}
 800466e:	4618      	mov	r0, r3
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	08012c24 	.word	0x08012c24
 8004678:	20001f20 	.word	0x20001f20
 800467c:	08012c4c 	.word	0x08012c4c
 8004680:	20001f1b 	.word	0x20001f1b

08004684 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 800468a:	4813      	ldr	r0, [pc, #76]	; (80046d8 <GainSignalMenuEntryHandler+0x54>)
 800468c:	f00a fd9a 	bl	800f1c4 <puts>
#endif

	DM_RefreshScreen();
 8004690:	f7fc fd9a 	bl	80011c8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004694:	4b11      	ldr	r3, [pc, #68]	; (80046dc <GainSignalMenuEntryHandler+0x58>)
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800469a:	2000      	movs	r0, #0
 800469c:	f001 f818 	bl	80056d0 <SM_GetOutputChannel>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80046a6:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8b1a      	ldrh	r2, [r3, #24]
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <GainSignalMenuEntryHandler+0x5c>)
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <GainSignalMenuEntryHandler+0x5c>)
 80046b8:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80046be:	e002      	b.n	80046c6 <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80046c0:	4808      	ldr	r0, [pc, #32]	; (80046e4 <GainSignalMenuEntryHandler+0x60>)
 80046c2:	f7fc fdcb 	bl	800125c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <GainSignalMenuEntryHandler+0x64>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80046cc:	2307      	movs	r3, #7
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	08012c64 	.word	0x08012c64
 80046dc:	20001f20 	.word	0x20001f20
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	08012c90 	.word	0x08012c90
 80046e8:	20001f1b 	.word	0x20001f1b

080046ec <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 80046f0:	4807      	ldr	r0, [pc, #28]	; (8004710 <GainSignalMenuInputHandler+0x24>)
 80046f2:	f00a fd67 	bl	800f1c4 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80046f6:	2001      	movs	r0, #1
 80046f8:	f001 f800 	bl	80056fc <SM_GetEncoderValue>
 80046fc:	4603      	mov	r3, r0
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f9da 	bl	8005ab8 <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <GainSignalMenuInputHandler+0x28>)
 8004706:	2203      	movs	r2, #3
 8004708:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800470a:	2307      	movs	r3, #7
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	08012cc8 	.word	0x08012cc8
 8004714:	20001f1b 	.word	0x20001f1b

08004718 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 800471c:	4806      	ldr	r0, [pc, #24]	; (8004738 <GainSignalMenuExitHandler+0x20>)
 800471e:	f00a fd51 	bl	800f1c4 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <GainSignalMenuExitHandler+0x24>)
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004728:	f7fc fd4e 	bl	80011c8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <GainSignalMenuExitHandler+0x28>)
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004732:	2306      	movs	r3, #6
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	08012cf4 	.word	0x08012cf4
 800473c:	20001f20 	.word	0x20001f20
 8004740:	20001f1b 	.word	0x20001f1b

08004744 <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 800474a:	4813      	ldr	r0, [pc, #76]	; (8004798 <GainSyncMenuEntryHandler+0x54>)
 800474c:	f00a fd3a 	bl	800f1c4 <puts>
#endif

	DM_RefreshScreen();
 8004750:	f7fc fd3a 	bl	80011c8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <GainSyncMenuEntryHandler+0x58>)
 8004756:	2203      	movs	r2, #3
 8004758:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 800475a:	2001      	movs	r0, #1
 800475c:	f000 ffb8 	bl	80056d0 <SM_GetOutputChannel>
 8004760:	4603      	mov	r3, r0
 8004762:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004766:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8b1a      	ldrh	r2, [r3, #24]
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <GainSyncMenuEntryHandler+0x5c>)
 8004774:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <GainSyncMenuEntryHandler+0x5c>)
 8004778:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c
 800477e:	e002      	b.n	8004786 <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004780:	4808      	ldr	r0, [pc, #32]	; (80047a4 <GainSyncMenuEntryHandler+0x60>)
 8004782:	f7fc fd6b 	bl	800125c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <GainSyncMenuEntryHandler+0x64>)
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 800478c:	2308      	movs	r3, #8
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	08012d20 	.word	0x08012d20
 800479c:	20001f20 	.word	0x20001f20
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	08012c90 	.word	0x08012c90
 80047a8:	20001f1b 	.word	0x20001f1b

080047ac <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 80047b0:	4807      	ldr	r0, [pc, #28]	; (80047d0 <GainSyncMenuInputHandler+0x24>)
 80047b2:	f00a fd07 	bl	800f1c4 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80047b6:	2001      	movs	r0, #1
 80047b8:	f000 ffa0 	bl	80056fc <SM_GetEncoderValue>
 80047bc:	4603      	mov	r3, r0
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 fe24 	bl	800640c <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <GainSyncMenuInputHandler+0x28>)
 80047c6:	2203      	movs	r2, #3
 80047c8:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 80047ca:	2308      	movs	r3, #8
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	08012d48 	.word	0x08012d48
 80047d4:	20001f1b 	.word	0x20001f1b

080047d8 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 80047dc:	4806      	ldr	r0, [pc, #24]	; (80047f8 <GainSyncMenuExitHandler+0x20>)
 80047de:	f00a fcf1 	bl	800f1c4 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <GainSyncMenuExitHandler+0x24>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80047e8:	f7fc fcee 	bl	80011c8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <GainSyncMenuExitHandler+0x28>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80047f2:	2306      	movs	r3, #6
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	08012d70 	.word	0x08012d70
 80047fc:	20001f20 	.word	0x20001f20
 8004800:	20001f1b 	.word	0x20001f1b

08004804 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <ToplevelMenu_getStatus+0x14>)
 800480a:	781b      	ldrb	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000010 	.word	0x20000010

0800481c <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <ToplevelMenu_setStatus+0x1c>)
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	7013      	strb	r3, [r2, #0]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	20000010 	.word	0x20000010

0800483c <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004840:	4806      	ldr	r0, [pc, #24]	; (800485c <ToplevelOutputMenuEntryHandler+0x20>)
 8004842:	f00a fcbf 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 8004846:	f7fc fcbf 	bl	80011c8 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <ToplevelOutputMenuEntryHandler+0x24>)
 800484c:	2202      	movs	r2, #2
 800484e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <ToplevelOutputMenuEntryHandler+0x28>)
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004856:	2301      	movs	r3, #1
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	08012e34 	.word	0x08012e34
 8004860:	20000010 	.word	0x20000010
 8004864:	20001f1b 	.word	0x20001f1b

08004868 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 800486c:	4806      	ldr	r0, [pc, #24]	; (8004888 <ToplevelOutputMenuExitHandler+0x20>)
 800486e:	f00a fca9 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 8004872:	f7fc fca9 	bl	80011c8 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <ToplevelOutputMenuExitHandler+0x24>)
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <ToplevelOutputMenuExitHandler+0x28>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	08012e94 	.word	0x08012e94
 800488c:	20000010 	.word	0x20000010
 8004890:	20001f1b 	.word	0x20001f1b

08004894 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004898:	4806      	ldr	r0, [pc, #24]	; (80048b4 <ToplevelInputMenuEntryHandler+0x20>)
 800489a:	f00a fc93 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 800489e:	f7fc fc93 	bl	80011c8 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <ToplevelInputMenuEntryHandler+0x24>)
 80048a4:	2203      	movs	r2, #3
 80048a6:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80048a8:	4b04      	ldr	r3, [pc, #16]	; (80048bc <ToplevelInputMenuEntryHandler+0x28>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80048ae:	2302      	movs	r3, #2
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	08012ec4 	.word	0x08012ec4
 80048b8:	20000010 	.word	0x20000010
 80048bc:	20001f1b 	.word	0x20001f1b

080048c0 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 80048c4:	4806      	ldr	r0, [pc, #24]	; (80048e0 <ToplevelInputMenuExitHandler+0x20>)
 80048c6:	f00a fc7d 	bl	800f1c4 <puts>
	#endif

	DM_RefreshScreen();
 80048ca:	f7fc fc7d 	bl	80011c8 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <ToplevelInputMenuExitHandler+0x24>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <ToplevelInputMenuExitHandler+0x28>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	08012f24 	.word	0x08012f24
 80048e4:	20000010 	.word	0x20000010
 80048e8:	20001f1b 	.word	0x20001f1b

080048ec <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4013      	ands	r3, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d101      	bne.n	8004906 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40010400 	.word	0x40010400

08004918 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <IM_Init+0x1c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a04      	ldr	r2, [pc, #16]	; (8004934 <IM_Init+0x1c>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40014400 	.word	0x40014400

08004938 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b10      	cmp	r3, #16
 8004946:	d11c      	bne.n	8004982 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004956:	edd3 7a00 	vldr	s15, [r3]
 800495a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004962:	db09      	blt.n	8004978 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004964:	4b1f      	ldr	r3, [pc, #124]	; (80049e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004966:	edd3 7a00 	vldr	s15, [r3]
 800496a:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800496c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004970:	ee17 2a90 	vmov	r2, s15
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004976:	e029      	b.n	80049cc <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	3201      	adds	r2, #1
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004980:	e024      	b.n	80049cc <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004982:	4b16      	ldr	r3, [pc, #88]	; (80049dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d104      	bne.n	8004994 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 800498a:	4b14      	ldr	r3, [pc, #80]	; (80049dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800498c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004990:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004992:	e01b      	b.n	80049cc <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004994:	4b11      	ldr	r3, [pc, #68]	; (80049dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80049a2:	edd3 7a00 	vldr	s15, [r3]
 80049a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ae:	d809      	bhi.n	80049c4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80049b2:	edd3 7a00 	vldr	s15, [r3]
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80049b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049bc:	ee17 2a90 	vmov	r2, s15
 80049c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80049c2:	e003      	b.n	80049cc <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	3a01      	subs	r2, #1
 80049ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40000c00 	.word	0x40000c00
 80049dc:	40013400 	.word	0x40013400
 80049e0:	2000000c 	.word	0x2000000c
 80049e4:	20000008 	.word	0x20000008

080049e8 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <IM_BTN1_EXTI14_Handler+0x44>)
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	4a0e      	ldr	r2, [pc, #56]	; (8004a30 <IM_BTN1_EXTI14_Handler+0x48>)
 80049f8:	8812      	ldrh	r2, [r2, #0]
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a00:	dd0c      	ble.n	8004a1c <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004a02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a06:	f7ff ff71 	bl	80048ec <LL_EXTI_IsActiveFlag_0_31>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004a10:	2001      	movs	r0, #1
 8004a12:	f7ff f99b 	bl	8003d4c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004a16:	4807      	ldr	r0, [pc, #28]	; (8004a34 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004a18:	f00a fbd4 	bl	800f1c4 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <IM_BTN1_EXTI14_Handler+0x48>)
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	8013      	strh	r3, [r2, #0]


}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40014400 	.word	0x40014400
 8004a30:	20001f22 	.word	0x20001f22
 8004a34:	08012f50 	.word	0x08012f50

08004a38 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <IM_BTN2_EXTI15_Handler+0x44>)
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <IM_BTN2_EXTI15_Handler+0x48>)
 8004a48:	8812      	ldrh	r2, [r2, #0]
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a50:	dd0c      	ble.n	8004a6c <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004a52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a56:	f7ff ff49 	bl	80048ec <LL_EXTI_IsActiveFlag_0_31>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004a60:	2003      	movs	r0, #3
 8004a62:	f7ff f973 	bl	8003d4c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004a66:	4807      	ldr	r0, [pc, #28]	; (8004a84 <IM_BTN2_EXTI15_Handler+0x4c>)
 8004a68:	f00a fbac 	bl	800f1c4 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004a6c:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <IM_BTN2_EXTI15_Handler+0x48>)
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	8013      	strh	r3, [r2, #0]


}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	20001f24 	.word	0x20001f24
 8004a84:	08012f68 	.word	0x08012f68

08004a88 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <IM_BTN3_EXTI0_Handler+0x40>)
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <IM_BTN3_EXTI0_Handler+0x44>)
 8004a98:	8812      	ldrh	r2, [r2, #0]
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa0:	dd0b      	ble.n	8004aba <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	f7ff ff22 	bl	80048ec <LL_EXTI_IsActiveFlag_0_31>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004aae:	2004      	movs	r0, #4
 8004ab0:	f7ff f94c 	bl	8003d4c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004ab4:	4806      	ldr	r0, [pc, #24]	; (8004ad0 <IM_BTN3_EXTI0_Handler+0x48>)
 8004ab6:	f00a fb85 	bl	800f1c4 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004aba:	4a04      	ldr	r2, [pc, #16]	; (8004acc <IM_BTN3_EXTI0_Handler+0x44>)
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	8013      	strh	r3, [r2, #0]


}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	20001f26 	.word	0x20001f26
 8004ad0:	08012f84 	.word	0x08012f84

08004ad4 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <IM_BTN4_EXTI1_Handler+0x40>)
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	; (8004b18 <IM_BTN4_EXTI1_Handler+0x44>)
 8004ae4:	8812      	ldrh	r2, [r2, #0]
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aec:	dd0b      	ble.n	8004b06 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004aee:	2002      	movs	r0, #2
 8004af0:	f7ff fefc 	bl	80048ec <LL_EXTI_IsActiveFlag_0_31>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004afa:	2002      	movs	r0, #2
 8004afc:	f7ff f926 	bl	8003d4c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004b00:	4806      	ldr	r0, [pc, #24]	; (8004b1c <IM_BTN4_EXTI1_Handler+0x48>)
 8004b02:	f00a fb5f 	bl	800f1c4 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004b06:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <IM_BTN4_EXTI1_Handler+0x44>)
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	8013      	strh	r3, [r2, #0]


}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40014400 	.word	0x40014400
 8004b18:	20001f28 	.word	0x20001f28
 8004b1c:	08012f9c 	.word	0x08012f9c

08004b20 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004b26:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <IM_ENC_EXTI2_Handler+0x40>)
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	4a0d      	ldr	r2, [pc, #52]	; (8004b64 <IM_ENC_EXTI2_Handler+0x44>)
 8004b30:	8812      	ldrh	r2, [r2, #0]
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b38:	dd0b      	ble.n	8004b52 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004b3a:	2004      	movs	r0, #4
 8004b3c:	f7ff fed6 	bl	80048ec <LL_EXTI_IsActiveFlag_0_31>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004b46:	2006      	movs	r0, #6
 8004b48:	f7ff f900 	bl	8003d4c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004b4c:	4806      	ldr	r0, [pc, #24]	; (8004b68 <IM_ENC_EXTI2_Handler+0x48>)
 8004b4e:	f00a fb39 	bl	800f1c4 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004b52:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <IM_ENC_EXTI2_Handler+0x44>)
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	8013      	strh	r3, [r2, #0]


}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40014400 	.word	0x40014400
 8004b64:	20001f2a 	.word	0x20001f2a
 8004b68:	08012fb4 	.word	0x08012fb4

08004b6c <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <IM_ENC_DIRF_Handler+0x30>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b7c:	d10b      	bne.n	8004b96 <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8004b7e:	2005      	movs	r0, #5
 8004b80:	f7ff f8e4 	bl	8003d4c <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8004b84:	4806      	ldr	r0, [pc, #24]	; (8004ba0 <IM_ENC_DIRF_Handler+0x34>)
 8004b86:	f00a fb1d 	bl	800f1c4 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004b8a:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <IM_ENC_DIRF_Handler+0x30>)
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	4a03      	ldr	r2, [pc, #12]	; (8004b9c <IM_ENC_DIRF_Handler+0x30>)
 8004b90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b94:	6113      	str	r3, [r2, #16]

	}
}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	08012fd0 	.word	0x08012fd0

08004ba4 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <BO_GetBiasPolarity+0x14>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000011 	.word	0x20000011

08004bbc <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <BO_GetDcBiasEncoderValue+0x14>)
 8004bc2:	881b      	ldrh	r3, [r3, #0]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000012 	.word	0x20000012

08004bd4 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004bde:	2000      	movs	r0, #0
 8004be0:	f000 fd8c 	bl	80056fc <SM_GetEncoderValue>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <BO_ModifyOutput+0x84>)
 8004bea:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004bf2:	d214      	bcs.n	8004c1e <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <BO_ModifyOutput+0x88>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004bfa:	88fb      	ldrh	r3, [r7, #6]
 8004bfc:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2110      	movs	r1, #16
 8004c0c:	4814      	ldr	r0, [pc, #80]	; (8004c60 <BO_ModifyOutput+0x8c>)
 8004c0e:	f005 fbeb 	bl	800a3e8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004c12:	2201      	movs	r2, #1
 8004c14:	2108      	movs	r1, #8
 8004c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c1a:	f006 fac5 	bl	800b1a8 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004c24:	d314      	bcc.n	8004c50 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004c26:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <BO_ModifyOutput+0x88>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2110      	movs	r1, #16
 8004c3e:	4808      	ldr	r0, [pc, #32]	; (8004c60 <BO_ModifyOutput+0x8c>)
 8004c40:	f005 fbd2 	bl	800a3e8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004c44:	2200      	movs	r2, #0
 8004c46:	2108      	movs	r1, #8
 8004c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c4c:	f006 faac 	bl	800b1a8 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000012 	.word	0x20000012
 8004c5c:	20000011 	.word	0x20000011
 8004c60:	20002618 	.word	0x20002618

08004c64 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004c68:	2110      	movs	r1, #16
 8004c6a:	4803      	ldr	r0, [pc, #12]	; (8004c78 <BO_GetOutputBias+0x14>)
 8004c6c:	f005 fc02 	bl	800a474 <HAL_DAC_GetValue>
 8004c70:	4603      	mov	r3, r0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20002618 	.word	0x20002618

08004c7c <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	e06b      	b.n	8004d60 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004c88:	493a      	ldr	r1, [pc, #232]	; (8004d74 <DT_InitRegister+0xf8>)
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	3308      	adds	r3, #8
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d129      	bne.n	8004cf2 <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8004c9e:	4935      	ldr	r1, [pc, #212]	; (8004d74 <DT_InitRegister+0xf8>)
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3304      	adds	r3, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a31      	ldr	r2, [pc, #196]	; (8004d78 <DT_InitRegister+0xfc>)
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cbe:	492d      	ldr	r1, [pc, #180]	; (8004d74 <DT_InitRegister+0xf8>)
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3310      	adds	r3, #16
 8004cce:	edd3 7a00 	vldr	s15, [r3]
 8004cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cda:	ee17 0a90 	vmov	r0, s15
 8004cde:	4925      	ldr	r1, [pc, #148]	; (8004d74 <DT_InitRegister+0xf8>)
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	330c      	adds	r3, #12
 8004cee:	6018      	str	r0, [r3, #0]
 8004cf0:	e033      	b.n	8004d5a <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 8004cf2:	4920      	ldr	r1, [pc, #128]	; (8004d74 <DT_InitRegister+0xf8>)
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	3304      	adds	r3, #4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <DT_InitRegister+0xfc>)
 8004d06:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d0a:	481a      	ldr	r0, [pc, #104]	; (8004d74 <DT_InitRegister+0xf8>)
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4403      	add	r3, r0
 8004d18:	3308      	adds	r3, #8
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d28:	4912      	ldr	r1, [pc, #72]	; (8004d74 <DT_InitRegister+0xf8>)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3310      	adds	r3, #16
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d44:	ee17 0a90 	vmov	r0, s15
 8004d48:	490a      	ldr	r1, [pc, #40]	; (8004d74 <DT_InitRegister+0xf8>)
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	330c      	adds	r3, #12
 8004d58:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	607b      	str	r3, [r7, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b0d      	cmp	r3, #13
 8004d64:	dd90      	ble.n	8004c88 <DT_InitRegister+0xc>
	}
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000014 	.word	0x20000014
 8004d78:	00155cc0 	.word	0x00155cc0

08004d7c <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	e016      	b.n	8004db8 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8004d8a:	4910      	ldr	r1, [pc, #64]	; (8004dcc <DT_GetRegisterByEnum+0x50>)
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	3304      	adds	r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d107      	bne.n	8004db2 <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4a07      	ldr	r2, [pc, #28]	; (8004dcc <DT_GetRegisterByEnum+0x50>)
 8004dae:	4413      	add	r3, r2
 8004db0:	e006      	b.n	8004dc0 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3301      	adds	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b0d      	cmp	r3, #13
 8004dbc:	dde5      	ble.n	8004d8a <DT_GetRegisterByEnum+0xe>

	return 0;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000014 	.word	0x20000014

08004dd0 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f000 fc91 	bl	80056fc <SM_GetEncoderValue>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4b02      	ldr	r3, [pc, #8]	; (8004de8 <FreqO_AdjustFreq+0x18>)
 8004de0:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40013400 	.word	0x40013400

08004dec <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b38      	cmp	r3, #56	; 0x38
 8004dfa:	f200 80b4 	bhi.w	8004f66 <FreqO_ModifyOutput+0x17a>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <FreqO_ModifyOutput+0x18>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004ee9 	.word	0x08004ee9
 8004e08:	08004ee9 	.word	0x08004ee9
 8004e0c:	08004ee9 	.word	0x08004ee9
 8004e10:	08004ee9 	.word	0x08004ee9
 8004e14:	08004ef1 	.word	0x08004ef1
 8004e18:	08004ef1 	.word	0x08004ef1
 8004e1c:	08004ef1 	.word	0x08004ef1
 8004e20:	08004ef1 	.word	0x08004ef1
 8004e24:	08004ef9 	.word	0x08004ef9
 8004e28:	08004ef9 	.word	0x08004ef9
 8004e2c:	08004ef9 	.word	0x08004ef9
 8004e30:	08004ef9 	.word	0x08004ef9
 8004e34:	08004f01 	.word	0x08004f01
 8004e38:	08004f01 	.word	0x08004f01
 8004e3c:	08004f01 	.word	0x08004f01
 8004e40:	08004f01 	.word	0x08004f01
 8004e44:	08004f09 	.word	0x08004f09
 8004e48:	08004f09 	.word	0x08004f09
 8004e4c:	08004f09 	.word	0x08004f09
 8004e50:	08004f09 	.word	0x08004f09
 8004e54:	08004f11 	.word	0x08004f11
 8004e58:	08004f11 	.word	0x08004f11
 8004e5c:	08004f11 	.word	0x08004f11
 8004e60:	08004f11 	.word	0x08004f11
 8004e64:	08004f1b 	.word	0x08004f1b
 8004e68:	08004f1b 	.word	0x08004f1b
 8004e6c:	08004f1b 	.word	0x08004f1b
 8004e70:	08004f1b 	.word	0x08004f1b
 8004e74:	08004f25 	.word	0x08004f25
 8004e78:	08004f25 	.word	0x08004f25
 8004e7c:	08004f25 	.word	0x08004f25
 8004e80:	08004f67 	.word	0x08004f67
 8004e84:	08004f25 	.word	0x08004f25
 8004e88:	08004f2f 	.word	0x08004f2f
 8004e8c:	08004f2f 	.word	0x08004f2f
 8004e90:	08004f2f 	.word	0x08004f2f
 8004e94:	08004f2f 	.word	0x08004f2f
 8004e98:	08004f39 	.word	0x08004f39
 8004e9c:	08004f39 	.word	0x08004f39
 8004ea0:	08004f39 	.word	0x08004f39
 8004ea4:	08004f39 	.word	0x08004f39
 8004ea8:	08004f43 	.word	0x08004f43
 8004eac:	08004f43 	.word	0x08004f43
 8004eb0:	08004f43 	.word	0x08004f43
 8004eb4:	08004f43 	.word	0x08004f43
 8004eb8:	08004f4d 	.word	0x08004f4d
 8004ebc:	08004f4d 	.word	0x08004f4d
 8004ec0:	08004f4d 	.word	0x08004f4d
 8004ec4:	08004f4d 	.word	0x08004f4d
 8004ec8:	08004f57 	.word	0x08004f57
 8004ecc:	08004f57 	.word	0x08004f57
 8004ed0:	08004f57 	.word	0x08004f57
 8004ed4:	08004f57 	.word	0x08004f57
 8004ed8:	08004f5f 	.word	0x08004f5f
 8004edc:	08004f5f 	.word	0x08004f5f
 8004ee0:	08004f5f 	.word	0x08004f5f
 8004ee4:	08004f5f 	.word	0x08004f5f
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f000 f845 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004eee:	e03a      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8004ef0:	200a      	movs	r0, #10
 8004ef2:	f000 f841 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004ef6:	e036      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004ef8:	2032      	movs	r0, #50	; 0x32
 8004efa:	f000 f83d 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004efe:	e032      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8004f00:	2064      	movs	r0, #100	; 0x64
 8004f02:	f000 f839 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f06:	e02e      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004f08:	20fa      	movs	r0, #250	; 0xfa
 8004f0a:	f000 f835 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f0e:	e02a      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8004f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f14:	f000 f830 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f18:	e025      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004f1a:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004f1e:	f000 f82b 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f22:	e020      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8004f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f28:	f000 f826 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f2c:	e01b      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8004f2e:	f241 3088 	movw	r0, #5000	; 0x1388
 8004f32:	f000 f821 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f36:	e016      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8004f38:	f242 7010 	movw	r0, #10000	; 0x2710
 8004f3c:	f000 f81c 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f40:	e011      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8004f42:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8004f46:	f000 f817 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f4a:	e00c      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8004f4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f50:	f000 f812 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f54:	e007      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8004f56:	4806      	ldr	r0, [pc, #24]	; (8004f70 <FreqO_ModifyOutput+0x184>)
 8004f58:	f000 f80e 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f5c:	e003      	b.n	8004f66 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8004f5e:	4805      	ldr	r0, [pc, #20]	; (8004f74 <FreqO_ModifyOutput+0x188>)
 8004f60:	f000 f80a 	bl	8004f78 <FreqO_ApplyPreset>
			break;
 8004f64:	bf00      	nop
	}

}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	000124f8 	.word	0x000124f8
 8004f74:	000186a0 	.word	0x000186a0

08004f78 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fefb 	bl	8004d7c <DT_GetRegisterByEnum>
 8004f86:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d015      	beq.n	8004fba <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 8004f8e:	4a0d      	ldr	r2, [pc, #52]	; (8004fc4 <FreqO_ApplyPreset+0x4c>)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 8004f96:	4a0b      	ldr	r2, [pc, #44]	; (8004fc4 <FreqO_ApplyPreset+0x4c>)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f822 	bl	8004fe8 <FreqO_FindFPresetObject>
 8004fa4:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 8004fac:	4a06      	ldr	r2, [pc, #24]	; (8004fc8 <FreqO_ApplyPreset+0x50>)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8004fb2:	e002      	b.n	8004fba <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8004fb4:	4805      	ldr	r0, [pc, #20]	; (8004fcc <FreqO_ApplyPreset+0x54>)
 8004fb6:	f7fc f951 	bl	800125c <DM_SetErrorDebugMsg>
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40013400 	.word	0x40013400
 8004fc8:	200001a0 	.word	0x200001a0
 8004fcc:	08012fe8 	.word	0x08012fe8

08004fd0 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
	return freq_profile;
 8004fd4:	4b03      	ldr	r3, [pc, #12]	; (8004fe4 <FreqO_GetFPresetObject+0x14>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	200001a0 	.word	0x200001a0

08004fe8 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e00e      	b.n	8005014 <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8004ff6:	4a0d      	ldr	r2, [pc, #52]	; (800502c <FreqO_FindFPresetObject+0x44>)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d104      	bne.n	800500e <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <FreqO_FindFPresetObject+0x44>)
 800500a:	4413      	add	r3, r2
 800500c:	e009      	b.n	8005022 <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b0d      	cmp	r3, #13
 8005018:	dded      	ble.n	8004ff6 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 800501a:	4805      	ldr	r0, [pc, #20]	; (8005030 <FreqO_FindFPresetObject+0x48>)
 800501c:	f7fc f91e 	bl	800125c <DM_SetErrorDebugMsg>
	return 0;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000130 	.word	0x20000130
 8005030:	08013010 	.word	0x08013010

08005034 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <FreqO_GetFreqPresetEncoderRange+0x14>)
 800503a:	781b      	ldrb	r3, [r3, #0]
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	2000012c 	.word	0x2000012c

0800504c <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
	...

0800505c <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	2b17      	cmp	r3, #23
 800506a:	d84b      	bhi.n	8005104 <FuncO_ModifySignalOutput+0xa8>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <FuncO_ModifySignalOutput+0x18>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	080050d5 	.word	0x080050d5
 8005078:	080050d5 	.word	0x080050d5
 800507c:	080050d5 	.word	0x080050d5
 8005080:	080050dd 	.word	0x080050dd
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050dd 	.word	0x080050dd
 800508c:	080050dd 	.word	0x080050dd
 8005090:	080050e5 	.word	0x080050e5
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080050e5 	.word	0x080050e5
 800509c:	080050e5 	.word	0x080050e5
 80050a0:	080050ed 	.word	0x080050ed
 80050a4:	080050ed 	.word	0x080050ed
 80050a8:	080050ed 	.word	0x080050ed
 80050ac:	080050ed 	.word	0x080050ed
 80050b0:	080050f5 	.word	0x080050f5
 80050b4:	080050f5 	.word	0x080050f5
 80050b8:	080050f5 	.word	0x080050f5
 80050bc:	080050f5 	.word	0x080050f5
 80050c0:	080050fd 	.word	0x080050fd
 80050c4:	080050fd 	.word	0x080050fd
 80050c8:	080050fd 	.word	0x080050fd
 80050cc:	080050fd 	.word	0x080050fd
 80050d0:	080050fd 	.word	0x080050fd
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 80050d4:	2000      	movs	r0, #0
 80050d6:	f000 f871 	bl	80051bc <FuncO_ApplyPresetToSignal>
			break;
 80050da:	e013      	b.n	8005104 <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 80050dc:	2001      	movs	r0, #1
 80050de:	f000 f86d 	bl	80051bc <FuncO_ApplyPresetToSignal>
			break;
 80050e2:	e00f      	b.n	8005104 <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 80050e4:	2002      	movs	r0, #2
 80050e6:	f000 f869 	bl	80051bc <FuncO_ApplyPresetToSignal>
			break;
 80050ea:	e00b      	b.n	8005104 <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 80050ec:	2003      	movs	r0, #3
 80050ee:	f000 f865 	bl	80051bc <FuncO_ApplyPresetToSignal>
			break;
 80050f2:	e007      	b.n	8005104 <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 80050f4:	2004      	movs	r0, #4
 80050f6:	f000 f861 	bl	80051bc <FuncO_ApplyPresetToSignal>
			break;
 80050fa:	e003      	b.n	8005104 <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 80050fc:	2005      	movs	r0, #5
 80050fe:	f000 f85d 	bl	80051bc <FuncO_ApplyPresetToSignal>
			break;
 8005102:	bf00      	nop

	}
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	2b17      	cmp	r3, #23
 800511a:	d84b      	bhi.n	80051b4 <FuncO_ModifySyncOutput+0xa8>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <FuncO_ModifySyncOutput+0x18>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005185 	.word	0x08005185
 8005128:	08005185 	.word	0x08005185
 800512c:	08005185 	.word	0x08005185
 8005130:	0800518d 	.word	0x0800518d
 8005134:	0800518d 	.word	0x0800518d
 8005138:	0800518d 	.word	0x0800518d
 800513c:	0800518d 	.word	0x0800518d
 8005140:	08005195 	.word	0x08005195
 8005144:	08005195 	.word	0x08005195
 8005148:	08005195 	.word	0x08005195
 800514c:	08005195 	.word	0x08005195
 8005150:	0800519d 	.word	0x0800519d
 8005154:	0800519d 	.word	0x0800519d
 8005158:	0800519d 	.word	0x0800519d
 800515c:	0800519d 	.word	0x0800519d
 8005160:	080051a5 	.word	0x080051a5
 8005164:	080051a5 	.word	0x080051a5
 8005168:	080051a5 	.word	0x080051a5
 800516c:	080051a5 	.word	0x080051a5
 8005170:	080051ad 	.word	0x080051ad
 8005174:	080051ad 	.word	0x080051ad
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051ad 	.word	0x080051ad
 8005180:	080051ad 	.word	0x080051ad
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 8005184:	2000      	movs	r0, #0
 8005186:	f000 f873 	bl	8005270 <FuncO_ApplyPresetToSync>
			break;
 800518a:	e013      	b.n	80051b4 <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 800518c:	2001      	movs	r0, #1
 800518e:	f000 f86f 	bl	8005270 <FuncO_ApplyPresetToSync>
			break;
 8005192:	e00f      	b.n	80051b4 <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 8005194:	2002      	movs	r0, #2
 8005196:	f000 f86b 	bl	8005270 <FuncO_ApplyPresetToSync>
			break;
 800519a:	e00b      	b.n	80051b4 <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 800519c:	2003      	movs	r0, #3
 800519e:	f000 f867 	bl	8005270 <FuncO_ApplyPresetToSync>
			break;
 80051a2:	e007      	b.n	80051b4 <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 80051a4:	2004      	movs	r0, #4
 80051a6:	f000 f863 	bl	8005270 <FuncO_ApplyPresetToSync>
			break;
 80051aa:	e003      	b.n	80051b4 <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 80051ac:	2005      	movs	r0, #5
 80051ae:	f000 f85f 	bl	8005270 <FuncO_ApplyPresetToSync>
			break;
 80051b2:	bf00      	nop

	}
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b087      	sub	sp, #28
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80051c6:	79fc      	ldrb	r4, [r7, #7]
 80051c8:	2000      	movs	r0, #0
 80051ca:	f000 fa81 	bl	80056d0 <SM_GetOutputChannel>
 80051ce:	4601      	mov	r1, r0
 80051d0:	4a23      	ldr	r2, [pc, #140]	; (8005260 <FuncO_ApplyPresetToSignal+0xa4>)
 80051d2:	00e3      	lsls	r3, r4, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80051da:	2000      	movs	r0, #0
 80051dc:	f000 fa78 	bl	80056d0 <SM_GetOutputChannel>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fb0b 	bl	8005808 <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80051f2:	79fc      	ldrb	r4, [r7, #7]
 80051f4:	2000      	movs	r0, #0
 80051f6:	f000 fa6b 	bl	80056d0 <SM_GetOutputChannel>
 80051fa:	4601      	mov	r1, r0
 80051fc:	00e3      	lsls	r3, r4, #3
 80051fe:	4a18      	ldr	r2, [pc, #96]	; (8005260 <FuncO_ApplyPresetToSignal+0xa4>)
 8005200:	4413      	add	r3, r2
 8005202:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 8005206:	4817      	ldr	r0, [pc, #92]	; (8005264 <FuncO_ApplyPresetToSignal+0xa8>)
 8005208:	f007 f8f6 	bl	800c3f8 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800520c:	2100      	movs	r1, #0
 800520e:	4816      	ldr	r0, [pc, #88]	; (8005268 <FuncO_ApplyPresetToSignal+0xac>)
 8005210:	f005 f894 	bl	800a33c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005214:	2000      	movs	r0, #0
 8005216:	f000 fa5b 	bl	80056d0 <SM_GetOutputChannel>
 800521a:	4603      	mov	r3, r0
 800521c:	f103 0208 	add.w	r2, r3, #8
 8005220:	2300      	movs	r3, #0
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	2378      	movs	r3, #120	; 0x78
 8005226:	2100      	movs	r1, #0
 8005228:	480f      	ldr	r0, [pc, #60]	; (8005268 <FuncO_ApplyPresetToSignal+0xac>)
 800522a:	f004 ffc5 	bl	800a1b8 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800522e:	2100      	movs	r1, #0
 8005230:	480e      	ldr	r0, [pc, #56]	; (800526c <FuncO_ApplyPresetToSignal+0xb0>)
 8005232:	f005 f883 	bl	800a33c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005236:	2001      	movs	r0, #1
 8005238:	f000 fa4a 	bl	80056d0 <SM_GetOutputChannel>
 800523c:	4603      	mov	r3, r0
 800523e:	f103 0208 	add.w	r2, r3, #8
 8005242:	2300      	movs	r3, #0
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2378      	movs	r3, #120	; 0x78
 8005248:	2100      	movs	r1, #0
 800524a:	4808      	ldr	r0, [pc, #32]	; (800526c <FuncO_ApplyPresetToSignal+0xb0>)
 800524c:	f004 ffb4 	bl	800a1b8 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8005250:	4804      	ldr	r0, [pc, #16]	; (8005264 <FuncO_ApplyPresetToSignal+0xa8>)
 8005252:	f007 f8a3 	bl	800c39c <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 8005256:	bf00      	nop
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	bd90      	pop	{r4, r7, pc}
 800525e:	bf00      	nop
 8005260:	200001a8 	.word	0x200001a8
 8005264:	20002750 	.word	0x20002750
 8005268:	20002618 	.word	0x20002618
 800526c:	20002604 	.word	0x20002604

08005270 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b087      	sub	sp, #28
 8005274:	af02      	add	r7, sp, #8
 8005276:	4603      	mov	r3, r0
 8005278:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800527a:	79fc      	ldrb	r4, [r7, #7]
 800527c:	2001      	movs	r0, #1
 800527e:	f000 fa27 	bl	80056d0 <SM_GetOutputChannel>
 8005282:	4601      	mov	r1, r0
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <FuncO_ApplyPresetToSync+0xb0>)
 8005286:	00e3      	lsls	r3, r4, #3
 8005288:	4413      	add	r3, r2
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 800528e:	2001      	movs	r0, #1
 8005290:	f000 fa1e 	bl	80056d0 <SM_GetOutputChannel>
 8005294:	4603      	mov	r3, r0
 8005296:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fadf 	bl	8005864 <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80052a6:	79fc      	ldrb	r4, [r7, #7]
 80052a8:	2001      	movs	r0, #1
 80052aa:	f000 fa11 	bl	80056d0 <SM_GetOutputChannel>
 80052ae:	4601      	mov	r1, r0
 80052b0:	00e3      	lsls	r3, r4, #3
 80052b2:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <FuncO_ApplyPresetToSync+0xb0>)
 80052b4:	4413      	add	r3, r2
 80052b6:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80052ba:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <FuncO_ApplyPresetToSync+0xb4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a19      	ldr	r2, [pc, #100]	; (8005324 <FuncO_ApplyPresetToSync+0xb4>)
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80052c6:	2100      	movs	r1, #0
 80052c8:	4817      	ldr	r0, [pc, #92]	; (8005328 <FuncO_ApplyPresetToSync+0xb8>)
 80052ca:	f005 f837 	bl	800a33c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80052ce:	2001      	movs	r0, #1
 80052d0:	f000 f9fe 	bl	80056d0 <SM_GetOutputChannel>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f103 0208 	add.w	r2, r3, #8
 80052da:	2300      	movs	r3, #0
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2378      	movs	r3, #120	; 0x78
 80052e0:	2100      	movs	r1, #0
 80052e2:	4811      	ldr	r0, [pc, #68]	; (8005328 <FuncO_ApplyPresetToSync+0xb8>)
 80052e4:	f004 ff68 	bl	800a1b8 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80052e8:	2100      	movs	r1, #0
 80052ea:	4810      	ldr	r0, [pc, #64]	; (800532c <FuncO_ApplyPresetToSync+0xbc>)
 80052ec:	f005 f826 	bl	800a33c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80052f0:	2000      	movs	r0, #0
 80052f2:	f000 f9ed 	bl	80056d0 <SM_GetOutputChannel>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f103 0208 	add.w	r2, r3, #8
 80052fc:	2300      	movs	r3, #0
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2378      	movs	r3, #120	; 0x78
 8005302:	2100      	movs	r1, #0
 8005304:	4809      	ldr	r0, [pc, #36]	; (800532c <FuncO_ApplyPresetToSync+0xbc>)
 8005306:	f004 ff57 	bl	800a1b8 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <FuncO_ApplyPresetToSync+0xb4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a05      	ldr	r2, [pc, #20]	; (8005324 <FuncO_ApplyPresetToSync+0xb4>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6013      	str	r3, [r2, #0]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bd90      	pop	{r4, r7, pc}
 800531e:	bf00      	nop
 8005320:	200001a8 	.word	0x200001a8
 8005324:	40013400 	.word	0x40013400
 8005328:	20002604 	.word	0x20002604
 800532c:	20002618 	.word	0x20002618

08005330 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8005336:	781b      	ldrb	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	200001a4 	.word	0x200001a4

08005348 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005352:	79fc      	ldrb	r4, [r7, #7]
 8005354:	2000      	movs	r0, #0
 8005356:	f000 f9bb 	bl	80056d0 <SM_GetOutputChannel>
 800535a:	4601      	mov	r1, r0
 800535c:	4623      	mov	r3, r4
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4423      	add	r3, r4
 8005362:	4a4f      	ldr	r2, [pc, #316]	; (80054a0 <GO_ApplyPresetToSignal+0x158>)
 8005364:	4413      	add	r3, r2
 8005366:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	2b07      	cmp	r3, #7
 800536e:	f200 8093 	bhi.w	8005498 <GO_ApplyPresetToSignal+0x150>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <GO_ApplyPresetToSignal+0x30>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	08005399 	.word	0x08005399
 800537c:	080053b9 	.word	0x080053b9
 8005380:	080053d9 	.word	0x080053d9
 8005384:	080053f9 	.word	0x080053f9
 8005388:	08005419 	.word	0x08005419
 800538c:	08005439 	.word	0x08005439
 8005390:	08005459 	.word	0x08005459
 8005394:	08005479 	.word	0x08005479
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005398:	2200      	movs	r2, #0
 800539a:	2101      	movs	r1, #1
 800539c:	4841      	ldr	r0, [pc, #260]	; (80054a4 <GO_ApplyPresetToSignal+0x15c>)
 800539e:	f005 ff03 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2120      	movs	r1, #32
 80053a6:	4840      	ldr	r0, [pc, #256]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 80053a8:	f005 fefe 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80053ac:	2200      	movs	r2, #0
 80053ae:	2110      	movs	r1, #16
 80053b0:	483d      	ldr	r0, [pc, #244]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 80053b2:	f005 fef9 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 80053b6:	e06f      	b.n	8005498 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80053b8:	2201      	movs	r2, #1
 80053ba:	2101      	movs	r1, #1
 80053bc:	4839      	ldr	r0, [pc, #228]	; (80054a4 <GO_ApplyPresetToSignal+0x15c>)
 80053be:	f005 fef3 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80053c2:	2200      	movs	r2, #0
 80053c4:	2120      	movs	r1, #32
 80053c6:	4838      	ldr	r0, [pc, #224]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 80053c8:	f005 feee 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80053cc:	2200      	movs	r2, #0
 80053ce:	2110      	movs	r1, #16
 80053d0:	4835      	ldr	r0, [pc, #212]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 80053d2:	f005 fee9 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 80053d6:	e05f      	b.n	8005498 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80053d8:	2200      	movs	r2, #0
 80053da:	2101      	movs	r1, #1
 80053dc:	4831      	ldr	r0, [pc, #196]	; (80054a4 <GO_ApplyPresetToSignal+0x15c>)
 80053de:	f005 fee3 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80053e2:	2201      	movs	r2, #1
 80053e4:	2120      	movs	r1, #32
 80053e6:	4830      	ldr	r0, [pc, #192]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 80053e8:	f005 fede 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80053ec:	2200      	movs	r2, #0
 80053ee:	2110      	movs	r1, #16
 80053f0:	482d      	ldr	r0, [pc, #180]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 80053f2:	f005 fed9 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 80053f6:	e04f      	b.n	8005498 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80053f8:	2201      	movs	r2, #1
 80053fa:	2101      	movs	r1, #1
 80053fc:	4829      	ldr	r0, [pc, #164]	; (80054a4 <GO_ApplyPresetToSignal+0x15c>)
 80053fe:	f005 fed3 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005402:	2201      	movs	r2, #1
 8005404:	2120      	movs	r1, #32
 8005406:	4828      	ldr	r0, [pc, #160]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005408:	f005 fece 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800540c:	2200      	movs	r2, #0
 800540e:	2110      	movs	r1, #16
 8005410:	4825      	ldr	r0, [pc, #148]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005412:	f005 fec9 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 8005416:	e03f      	b.n	8005498 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005418:	2200      	movs	r2, #0
 800541a:	2101      	movs	r1, #1
 800541c:	4821      	ldr	r0, [pc, #132]	; (80054a4 <GO_ApplyPresetToSignal+0x15c>)
 800541e:	f005 fec3 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005422:	2200      	movs	r2, #0
 8005424:	2120      	movs	r1, #32
 8005426:	4820      	ldr	r0, [pc, #128]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005428:	f005 febe 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800542c:	2201      	movs	r2, #1
 800542e:	2110      	movs	r1, #16
 8005430:	481d      	ldr	r0, [pc, #116]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005432:	f005 feb9 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 8005436:	e02f      	b.n	8005498 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005438:	2201      	movs	r2, #1
 800543a:	2101      	movs	r1, #1
 800543c:	4819      	ldr	r0, [pc, #100]	; (80054a4 <GO_ApplyPresetToSignal+0x15c>)
 800543e:	f005 feb3 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005442:	2200      	movs	r2, #0
 8005444:	2120      	movs	r1, #32
 8005446:	4818      	ldr	r0, [pc, #96]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005448:	f005 feae 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800544c:	2201      	movs	r2, #1
 800544e:	2110      	movs	r1, #16
 8005450:	4815      	ldr	r0, [pc, #84]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005452:	f005 fea9 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 8005456:	e01f      	b.n	8005498 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005458:	2200      	movs	r2, #0
 800545a:	2101      	movs	r1, #1
 800545c:	4811      	ldr	r0, [pc, #68]	; (80054a4 <GO_ApplyPresetToSignal+0x15c>)
 800545e:	f005 fea3 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005462:	2201      	movs	r2, #1
 8005464:	2120      	movs	r1, #32
 8005466:	4810      	ldr	r0, [pc, #64]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005468:	f005 fe9e 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800546c:	2201      	movs	r2, #1
 800546e:	2110      	movs	r1, #16
 8005470:	480d      	ldr	r0, [pc, #52]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005472:	f005 fe99 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 8005476:	e00f      	b.n	8005498 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005478:	2201      	movs	r2, #1
 800547a:	2101      	movs	r1, #1
 800547c:	4809      	ldr	r0, [pc, #36]	; (80054a4 <GO_ApplyPresetToSignal+0x15c>)
 800547e:	f005 fe93 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005482:	2201      	movs	r2, #1
 8005484:	2120      	movs	r1, #32
 8005486:	4808      	ldr	r0, [pc, #32]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005488:	f005 fe8e 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800548c:	2201      	movs	r2, #1
 800548e:	2110      	movs	r1, #16
 8005490:	4805      	ldr	r0, [pc, #20]	; (80054a8 <GO_ApplyPresetToSignal+0x160>)
 8005492:	f005 fe89 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 8005496:	bf00      	nop
	}
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bd90      	pop	{r4, r7, pc}
 80054a0:	200001d8 	.word	0x200001d8
 80054a4:	48000400 	.word	0x48000400
 80054a8:	48000800 	.word	0x48000800

080054ac <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 80054b6:	79fc      	ldrb	r4, [r7, #7]
 80054b8:	2001      	movs	r0, #1
 80054ba:	f000 f909 	bl	80056d0 <SM_GetOutputChannel>
 80054be:	4601      	mov	r1, r0
 80054c0:	4623      	mov	r3, r4
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4423      	add	r3, r4
 80054c6:	4a4f      	ldr	r2, [pc, #316]	; (8005604 <GO_ApplyPresetToSync+0x158>)
 80054c8:	4413      	add	r3, r2
 80054ca:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	2b07      	cmp	r3, #7
 80054d2:	f200 8093 	bhi.w	80055fc <GO_ApplyPresetToSync+0x150>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <GO_ApplyPresetToSync+0x30>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054fd 	.word	0x080054fd
 80054e0:	0800551d 	.word	0x0800551d
 80054e4:	0800553d 	.word	0x0800553d
 80054e8:	0800555d 	.word	0x0800555d
 80054ec:	0800557d 	.word	0x0800557d
 80054f0:	0800559d 	.word	0x0800559d
 80054f4:	080055bd 	.word	0x080055bd
 80054f8:	080055dd 	.word	0x080055dd
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80054fc:	2200      	movs	r2, #0
 80054fe:	2101      	movs	r1, #1
 8005500:	4841      	ldr	r0, [pc, #260]	; (8005608 <GO_ApplyPresetToSync+0x15c>)
 8005502:	f005 fe51 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005506:	2200      	movs	r2, #0
 8005508:	2120      	movs	r1, #32
 800550a:	4840      	ldr	r0, [pc, #256]	; (800560c <GO_ApplyPresetToSync+0x160>)
 800550c:	f005 fe4c 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005510:	2200      	movs	r2, #0
 8005512:	2110      	movs	r1, #16
 8005514:	483d      	ldr	r0, [pc, #244]	; (800560c <GO_ApplyPresetToSync+0x160>)
 8005516:	f005 fe47 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 800551a:	e06f      	b.n	80055fc <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800551c:	2201      	movs	r2, #1
 800551e:	2101      	movs	r1, #1
 8005520:	4839      	ldr	r0, [pc, #228]	; (8005608 <GO_ApplyPresetToSync+0x15c>)
 8005522:	f005 fe41 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005526:	2200      	movs	r2, #0
 8005528:	2120      	movs	r1, #32
 800552a:	4838      	ldr	r0, [pc, #224]	; (800560c <GO_ApplyPresetToSync+0x160>)
 800552c:	f005 fe3c 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005530:	2200      	movs	r2, #0
 8005532:	2110      	movs	r1, #16
 8005534:	4835      	ldr	r0, [pc, #212]	; (800560c <GO_ApplyPresetToSync+0x160>)
 8005536:	f005 fe37 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 800553a:	e05f      	b.n	80055fc <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800553c:	2200      	movs	r2, #0
 800553e:	2101      	movs	r1, #1
 8005540:	4831      	ldr	r0, [pc, #196]	; (8005608 <GO_ApplyPresetToSync+0x15c>)
 8005542:	f005 fe31 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005546:	2201      	movs	r2, #1
 8005548:	2120      	movs	r1, #32
 800554a:	4830      	ldr	r0, [pc, #192]	; (800560c <GO_ApplyPresetToSync+0x160>)
 800554c:	f005 fe2c 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005550:	2200      	movs	r2, #0
 8005552:	2110      	movs	r1, #16
 8005554:	482d      	ldr	r0, [pc, #180]	; (800560c <GO_ApplyPresetToSync+0x160>)
 8005556:	f005 fe27 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 800555a:	e04f      	b.n	80055fc <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800555c:	2201      	movs	r2, #1
 800555e:	2101      	movs	r1, #1
 8005560:	4829      	ldr	r0, [pc, #164]	; (8005608 <GO_ApplyPresetToSync+0x15c>)
 8005562:	f005 fe21 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005566:	2201      	movs	r2, #1
 8005568:	2120      	movs	r1, #32
 800556a:	4828      	ldr	r0, [pc, #160]	; (800560c <GO_ApplyPresetToSync+0x160>)
 800556c:	f005 fe1c 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005570:	2200      	movs	r2, #0
 8005572:	2110      	movs	r1, #16
 8005574:	4825      	ldr	r0, [pc, #148]	; (800560c <GO_ApplyPresetToSync+0x160>)
 8005576:	f005 fe17 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 800557a:	e03f      	b.n	80055fc <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800557c:	2200      	movs	r2, #0
 800557e:	2101      	movs	r1, #1
 8005580:	4821      	ldr	r0, [pc, #132]	; (8005608 <GO_ApplyPresetToSync+0x15c>)
 8005582:	f005 fe11 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005586:	2200      	movs	r2, #0
 8005588:	2120      	movs	r1, #32
 800558a:	4820      	ldr	r0, [pc, #128]	; (800560c <GO_ApplyPresetToSync+0x160>)
 800558c:	f005 fe0c 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005590:	2201      	movs	r2, #1
 8005592:	2110      	movs	r1, #16
 8005594:	481d      	ldr	r0, [pc, #116]	; (800560c <GO_ApplyPresetToSync+0x160>)
 8005596:	f005 fe07 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 800559a:	e02f      	b.n	80055fc <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800559c:	2201      	movs	r2, #1
 800559e:	2101      	movs	r1, #1
 80055a0:	4819      	ldr	r0, [pc, #100]	; (8005608 <GO_ApplyPresetToSync+0x15c>)
 80055a2:	f005 fe01 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80055a6:	2200      	movs	r2, #0
 80055a8:	2120      	movs	r1, #32
 80055aa:	4818      	ldr	r0, [pc, #96]	; (800560c <GO_ApplyPresetToSync+0x160>)
 80055ac:	f005 fdfc 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80055b0:	2201      	movs	r2, #1
 80055b2:	2110      	movs	r1, #16
 80055b4:	4815      	ldr	r0, [pc, #84]	; (800560c <GO_ApplyPresetToSync+0x160>)
 80055b6:	f005 fdf7 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 80055ba:	e01f      	b.n	80055fc <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80055bc:	2200      	movs	r2, #0
 80055be:	2101      	movs	r1, #1
 80055c0:	4811      	ldr	r0, [pc, #68]	; (8005608 <GO_ApplyPresetToSync+0x15c>)
 80055c2:	f005 fdf1 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80055c6:	2201      	movs	r2, #1
 80055c8:	2120      	movs	r1, #32
 80055ca:	4810      	ldr	r0, [pc, #64]	; (800560c <GO_ApplyPresetToSync+0x160>)
 80055cc:	f005 fdec 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80055d0:	2201      	movs	r2, #1
 80055d2:	2110      	movs	r1, #16
 80055d4:	480d      	ldr	r0, [pc, #52]	; (800560c <GO_ApplyPresetToSync+0x160>)
 80055d6:	f005 fde7 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 80055da:	e00f      	b.n	80055fc <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80055dc:	2201      	movs	r2, #1
 80055de:	2101      	movs	r1, #1
 80055e0:	4809      	ldr	r0, [pc, #36]	; (8005608 <GO_ApplyPresetToSync+0x15c>)
 80055e2:	f005 fde1 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80055e6:	2201      	movs	r2, #1
 80055e8:	2120      	movs	r1, #32
 80055ea:	4808      	ldr	r0, [pc, #32]	; (800560c <GO_ApplyPresetToSync+0x160>)
 80055ec:	f005 fddc 	bl	800b1a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80055f0:	2201      	movs	r2, #1
 80055f2:	2110      	movs	r1, #16
 80055f4:	4805      	ldr	r0, [pc, #20]	; (800560c <GO_ApplyPresetToSync+0x160>)
 80055f6:	f005 fdd7 	bl	800b1a8 <HAL_GPIO_WritePin>
			break;
 80055fa:	bf00      	nop
	}
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bd90      	pop	{r4, r7, pc}
 8005604:	200001d8 	.word	0x200001d8
 8005608:	48000400 	.word	0x48000400
 800560c:	48000800 	.word	0x48000800

08005610 <SM_Init>:
sOutputChannel_t SyncChannel;



void SM_Init()
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0

	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005616:	4b28      	ldr	r3, [pc, #160]	; (80056b8 <SM_Init+0xa8>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800561c:	4b27      	ldr	r3, [pc, #156]	; (80056bc <SM_Init+0xac>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <SM_Init+0xa8>)
 8005622:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005624:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <SM_Init+0xa8>)
 8005626:	4a25      	ldr	r2, [pc, #148]	; (80056bc <SM_Init+0xac>)
 8005628:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800562c:	2300      	movs	r3, #0
 800562e:	607b      	str	r3, [r7, #4]
 8005630:	e00b      	b.n	800564a <SM_Init+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005632:	4a23      	ldr	r2, [pc, #140]	; (80056c0 <SM_Init+0xb0>)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800563a:	491f      	ldr	r1, [pc, #124]	; (80056b8 <SM_Init+0xa8>)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3302      	adds	r3, #2
 8005640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3301      	adds	r3, #1
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b77      	cmp	r3, #119	; 0x77
 800564e:	ddf0      	ble.n	8005632 <SM_Init+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005650:	4b19      	ldr	r3, [pc, #100]	; (80056b8 <SM_Init+0xa8>)
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <SM_Init+0xb4>)
 8005654:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <SM_Init+0xa8>)
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <SM_Init+0xb8>)
 800565c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005660:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <SM_Init+0xbc>)
 8005662:	2201      	movs	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <SM_Init+0xac>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4a18      	ldr	r2, [pc, #96]	; (80056cc <SM_Init+0xbc>)
 800566c:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 800566e:	4b17      	ldr	r3, [pc, #92]	; (80056cc <SM_Init+0xbc>)
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <SM_Init+0xac>)
 8005672:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005676:	2300      	movs	r3, #0
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	e00b      	b.n	8005694 <SM_Init+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 800567c:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <SM_Init+0xb0>)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005684:	4911      	ldr	r1, [pc, #68]	; (80056cc <SM_Init+0xbc>)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	3302      	adds	r3, #2
 800568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b77      	cmp	r3, #119	; 0x77
 8005698:	ddf0      	ble.n	800567c <SM_Init+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 800569a:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <SM_Init+0xbc>)
 800569c:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <SM_Init+0xb4>)
 800569e:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80056a2:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <SM_Init+0xbc>)
 80056a4:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <SM_Init+0xb8>)
 80056a6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	20002140 	.word	0x20002140
 80056bc:	200001a8 	.word	0x200001a8
 80056c0:	2000157c 	.word	0x2000157c
 80056c4:	20000bac 	.word	0x20000bac
 80056c8:	200001db 	.word	0x200001db
 80056cc:	20001f4c 	.word	0x20001f4c

080056d0 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 80056e0:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <SM_GetOutputChannel+0x24>)
 80056e2:	e000      	b.n	80056e6 <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 80056e4:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <SM_GetOutputChannel+0x28>)
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20002140 	.word	0x20002140
 80056f8:	20001f4c 	.word	0x20001f4c

080056fc <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <SM_GetEncoderValue+0x34>)
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	b29a      	uxth	r2, r3
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <SM_GetEncoderValue+0x34>)
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	b29b      	uxth	r3, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	b29b      	uxth	r3, r3
 800571c:	e002      	b.n	8005724 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 800571e:	4b04      	ldr	r3, [pc, #16]	; (8005730 <SM_GetEncoderValue+0x34>)
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	b29b      	uxth	r3, r3
	}
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40012c00 	.word	0x40012c00

08005734 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <SM_GetOutputInHertz+0x7c>)
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <SM_GetOutputInHertz+0x16>
 8005742:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	e007      	b.n	800575a <SM_GetOutputInHertz+0x26>
 800574a:	4b19      	ldr	r3, [pc, #100]	; (80057b0 <SM_GetOutputInHertz+0x7c>)
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <SM_GetOutputInHertz+0x7c>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <SM_GetOutputInHertz+0x36>
 8005762:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005766:	607b      	str	r3, [r7, #4]
 8005768:	e007      	b.n	800577a <SM_GetOutputInHertz+0x46>
 800576a:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <SM_GetOutputInHertz+0x7c>)
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 800577a:	ed97 7a02 	vldr	s14, [r7, #8]
 800577e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005782:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005786:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80057b4 <SM_GetOutputInHertz+0x80>
 800578a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578e:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8005792:	edd7 7a03 	vldr	s15, [r7, #12]
 8005796:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80057b8 <SM_GetOutputInHertz+0x84>
 800579a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800579e:	eef0 7a66 	vmov.f32	s15, s13
}
 80057a2:	eeb0 0a67 	vmov.f32	s0, s15
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40013400 	.word	0x40013400
 80057b4:	4d2037a0 	.word	0x4d2037a0
 80057b8:	42f00000 	.word	0x42f00000

080057bc <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 80057c8:	887b      	ldrh	r3, [r7, #2]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <SM_ConvertPeriodToHertz+0x16>
 80057ce:	2301      	movs	r3, #1
 80057d0:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 80057d2:	887b      	ldrh	r3, [r7, #2]
 80057d4:	ee07 3a90 	vmov	s15, r3
 80057d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005804 <SM_ConvertPeriodToHertz+0x48>
 80057ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057f2:	eef0 7a66 	vmov.f32	s15, s13
}
 80057f6:	eeb0 0a67 	vmov.f32	s0, s15
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	4d2037a0 	.word	0x4d2037a0

08005808 <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005812:	79fa      	ldrb	r2, [r7, #7]
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4a10      	ldr	r2, [pc, #64]	; (8005860 <VPP_ApplyPresetToSignal+0x58>)
 800581e:	4413      	add	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8005822:	2000      	movs	r0, #0
 8005824:	f7ff ff54 	bl	80056d0 <SM_GetOutputChannel>
 8005828:	4602      	mov	r2, r0
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	7a1b      	ldrb	r3, [r3, #8]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fd87 	bl	8005348 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	ed93 7a05 	vldr	s14, [r3, #20]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8b1b      	ldrh	r3, [r3, #24]
 800584a:	4618      	mov	r0, r3
 800584c:	eef0 0a47 	vmov.f32	s1, s14
 8005850:	eeb0 0a67 	vmov.f32	s0, s15
 8005854:	f000 f834 	bl	80058c0 <_ProcessSignalDataTable>


}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	200001f0 	.word	0x200001f0

08005864 <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800586e:	79fa      	ldrb	r2, [r7, #7]
 8005870:	4613      	mov	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4a10      	ldr	r2, [pc, #64]	; (80058bc <VPP_ApplyPresetToSync+0x58>)
 800587a:	4413      	add	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 800587e:	2001      	movs	r0, #1
 8005880:	f7ff ff26 	bl	80056d0 <SM_GetOutputChannel>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	7a1b      	ldrb	r3, [r3, #8]
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fe0b 	bl	80054ac <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	edd3 7a04 	vldr	s15, [r3, #16]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	ed93 7a05 	vldr	s14, [r3, #20]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8b1b      	ldrh	r3, [r3, #24]
 80058a6:	4618      	mov	r0, r3
 80058a8:	eef0 0a47 	vmov.f32	s1, s14
 80058ac:	eeb0 0a67 	vmov.f32	s0, s15
 80058b0:	f000 f884 	bl	80059bc <_ProcessSyncDataTable>



}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200001f0 	.word	0x200001f0

080058c0 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80058ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80058ce:	4603      	mov	r3, r0
 80058d0:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
 80058d6:	e00f      	b.n	80058f8 <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 80058d8:	2000      	movs	r0, #0
 80058da:	f7ff fef9 	bl	80056d0 <SM_GetOutputChannel>
 80058de:	4603      	mov	r3, r0
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4933      	ldr	r1, [pc, #204]	; (80059b8 <_ProcessSignalDataTable+0xf8>)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b77      	cmp	r3, #119	; 0x77
 80058fc:	ddec      	ble.n	80058d8 <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80058fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005902:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	b29b      	uxth	r3, r3
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005918:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e02e      	b.n	8005980 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8005922:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <_ProcessSignalDataTable+0xf8>)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005932:	edd7 7a03 	vldr	s15, [r7, #12]
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593e:	ee17 1a90 	vmov	r1, s15
 8005942:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <_ProcessSignalDataTable+0xf8>)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800594a:	4a1b      	ldr	r2, [pc, #108]	; (80059b8 <_ProcessSignalDataTable+0xf8>)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800595a:	edd7 7a06 	vldr	s15, [r7, #24]
 800595e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005962:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800596a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596e:	ee17 1a90 	vmov	r1, s15
 8005972:	4a11      	ldr	r2, [pc, #68]	; (80059b8 <_ProcessSignalDataTable+0xf8>)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	3301      	adds	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2b77      	cmp	r3, #119	; 0x77
 8005984:	ddcd      	ble.n	8005922 <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	e00e      	b.n	80059aa <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 800598c:	2000      	movs	r0, #0
 800598e:	f7ff fe9f 	bl	80056d0 <SM_GetOutputChannel>
 8005992:	4601      	mov	r1, r0
 8005994:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <_ProcessSignalDataTable+0xf8>)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3302      	adds	r3, #2
 80059a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3301      	adds	r3, #1
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b77      	cmp	r3, #119	; 0x77
 80059ae:	dded      	ble.n	800598c <_ProcessSignalDataTable+0xcc>
	}
}
 80059b0:	bf00      	nop
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20002334 	.word	0x20002334

080059bc <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80059c6:	edc7 0a02 	vstr	s1, [r7, #8]
 80059ca:	4603      	mov	r3, r0
 80059cc:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	e00f      	b.n	80059f4 <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 80059d4:	2001      	movs	r0, #1
 80059d6:	f7ff fe7b 	bl	80056d0 <SM_GetOutputChannel>
 80059da:	4603      	mov	r3, r0
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4933      	ldr	r1, [pc, #204]	; (8005ab4 <_ProcessSyncDataTable+0xf8>)
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2b77      	cmp	r3, #119	; 0x77
 80059f8:	ddec      	ble.n	80059d4 <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80059fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80059fe:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a14:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e02e      	b.n	8005a7c <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8005a1e:	4a25      	ldr	r2, [pc, #148]	; (8005ab4 <_ProcessSyncDataTable+0xf8>)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3a:	ee17 1a90 	vmov	r1, s15
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <_ProcessSyncDataTable+0xf8>)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8005a46:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <_ProcessSyncDataTable+0xf8>)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a56:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a5a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005a5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a6a:	ee17 1a90 	vmov	r1, s15
 8005a6e:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <_ProcessSyncDataTable+0xf8>)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b77      	cmp	r3, #119	; 0x77
 8005a80:	ddcd      	ble.n	8005a1e <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	e00e      	b.n	8005aa6 <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005a88:	2001      	movs	r0, #1
 8005a8a:	f7ff fe21 	bl	80056d0 <SM_GetOutputChannel>
 8005a8e:	4601      	mov	r1, r0
 8005a90:	4a08      	ldr	r2, [pc, #32]	; (8005ab4 <_ProcessSyncDataTable+0xf8>)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	3302      	adds	r3, #2
 8005a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b77      	cmp	r3, #119	; 0x77
 8005aaa:	dded      	ble.n	8005a88 <_ProcessSyncDataTable+0xcc>
	}
}
 8005aac:	bf00      	nop
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20002334 	.word	0x20002334

08005ab8 <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005ac8:	f200 849a 	bhi.w	8006400 <VPP_ModifySignalOutput+0x948>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <VPP_ModifySignalOutput+0x1c>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	080060f1 	.word	0x080060f1
 8005ad8:	080060f1 	.word	0x080060f1
 8005adc:	080060f1 	.word	0x080060f1
 8005ae0:	080060f9 	.word	0x080060f9
 8005ae4:	080060f9 	.word	0x080060f9
 8005ae8:	080060f9 	.word	0x080060f9
 8005aec:	080060f9 	.word	0x080060f9
 8005af0:	08006101 	.word	0x08006101
 8005af4:	08006101 	.word	0x08006101
 8005af8:	08006101 	.word	0x08006101
 8005afc:	08006101 	.word	0x08006101
 8005b00:	08006109 	.word	0x08006109
 8005b04:	08006109 	.word	0x08006109
 8005b08:	08006109 	.word	0x08006109
 8005b0c:	08006109 	.word	0x08006109
 8005b10:	08006111 	.word	0x08006111
 8005b14:	08006111 	.word	0x08006111
 8005b18:	08006111 	.word	0x08006111
 8005b1c:	08006111 	.word	0x08006111
 8005b20:	08006119 	.word	0x08006119
 8005b24:	08006119 	.word	0x08006119
 8005b28:	08006119 	.word	0x08006119
 8005b2c:	08006119 	.word	0x08006119
 8005b30:	08006121 	.word	0x08006121
 8005b34:	08006121 	.word	0x08006121
 8005b38:	08006121 	.word	0x08006121
 8005b3c:	08006121 	.word	0x08006121
 8005b40:	08006129 	.word	0x08006129
 8005b44:	08006129 	.word	0x08006129
 8005b48:	08006129 	.word	0x08006129
 8005b4c:	08006129 	.word	0x08006129
 8005b50:	08006131 	.word	0x08006131
 8005b54:	08006131 	.word	0x08006131
 8005b58:	08006131 	.word	0x08006131
 8005b5c:	08006131 	.word	0x08006131
 8005b60:	08006139 	.word	0x08006139
 8005b64:	08006139 	.word	0x08006139
 8005b68:	08006139 	.word	0x08006139
 8005b6c:	08006139 	.word	0x08006139
 8005b70:	08006141 	.word	0x08006141
 8005b74:	08006141 	.word	0x08006141
 8005b78:	08006141 	.word	0x08006141
 8005b7c:	08006141 	.word	0x08006141
 8005b80:	08006149 	.word	0x08006149
 8005b84:	08006149 	.word	0x08006149
 8005b88:	08006149 	.word	0x08006149
 8005b8c:	08006149 	.word	0x08006149
 8005b90:	08006151 	.word	0x08006151
 8005b94:	08006151 	.word	0x08006151
 8005b98:	08006151 	.word	0x08006151
 8005b9c:	08006151 	.word	0x08006151
 8005ba0:	08006159 	.word	0x08006159
 8005ba4:	08006159 	.word	0x08006159
 8005ba8:	08006159 	.word	0x08006159
 8005bac:	08006159 	.word	0x08006159
 8005bb0:	08006161 	.word	0x08006161
 8005bb4:	08006161 	.word	0x08006161
 8005bb8:	08006161 	.word	0x08006161
 8005bbc:	08006161 	.word	0x08006161
 8005bc0:	08006169 	.word	0x08006169
 8005bc4:	08006169 	.word	0x08006169
 8005bc8:	08006169 	.word	0x08006169
 8005bcc:	08006169 	.word	0x08006169
 8005bd0:	08006171 	.word	0x08006171
 8005bd4:	08006171 	.word	0x08006171
 8005bd8:	08006171 	.word	0x08006171
 8005bdc:	08006171 	.word	0x08006171
 8005be0:	08006179 	.word	0x08006179
 8005be4:	08006179 	.word	0x08006179
 8005be8:	08006179 	.word	0x08006179
 8005bec:	08006179 	.word	0x08006179
 8005bf0:	08006181 	.word	0x08006181
 8005bf4:	08006181 	.word	0x08006181
 8005bf8:	08006181 	.word	0x08006181
 8005bfc:	08006181 	.word	0x08006181
 8005c00:	08006189 	.word	0x08006189
 8005c04:	08006189 	.word	0x08006189
 8005c08:	08006189 	.word	0x08006189
 8005c0c:	08006189 	.word	0x08006189
 8005c10:	08006191 	.word	0x08006191
 8005c14:	08006191 	.word	0x08006191
 8005c18:	08006191 	.word	0x08006191
 8005c1c:	08006191 	.word	0x08006191
 8005c20:	08006199 	.word	0x08006199
 8005c24:	08006199 	.word	0x08006199
 8005c28:	08006199 	.word	0x08006199
 8005c2c:	08006199 	.word	0x08006199
 8005c30:	080061a1 	.word	0x080061a1
 8005c34:	080061a1 	.word	0x080061a1
 8005c38:	080061a1 	.word	0x080061a1
 8005c3c:	080061a1 	.word	0x080061a1
 8005c40:	080061a9 	.word	0x080061a9
 8005c44:	080061a9 	.word	0x080061a9
 8005c48:	080061a9 	.word	0x080061a9
 8005c4c:	080061a9 	.word	0x080061a9
 8005c50:	080061b1 	.word	0x080061b1
 8005c54:	080061b1 	.word	0x080061b1
 8005c58:	080061b1 	.word	0x080061b1
 8005c5c:	080061b1 	.word	0x080061b1
 8005c60:	080061b9 	.word	0x080061b9
 8005c64:	080061b9 	.word	0x080061b9
 8005c68:	080061b9 	.word	0x080061b9
 8005c6c:	080061b9 	.word	0x080061b9
 8005c70:	080061c1 	.word	0x080061c1
 8005c74:	080061c1 	.word	0x080061c1
 8005c78:	080061c1 	.word	0x080061c1
 8005c7c:	080061c1 	.word	0x080061c1
 8005c80:	080061c9 	.word	0x080061c9
 8005c84:	080061c9 	.word	0x080061c9
 8005c88:	080061c9 	.word	0x080061c9
 8005c8c:	080061c9 	.word	0x080061c9
 8005c90:	080061d1 	.word	0x080061d1
 8005c94:	080061d1 	.word	0x080061d1
 8005c98:	080061d1 	.word	0x080061d1
 8005c9c:	080061d1 	.word	0x080061d1
 8005ca0:	080061d9 	.word	0x080061d9
 8005ca4:	080061d9 	.word	0x080061d9
 8005ca8:	080061d9 	.word	0x080061d9
 8005cac:	080061d9 	.word	0x080061d9
 8005cb0:	080061e1 	.word	0x080061e1
 8005cb4:	080061e1 	.word	0x080061e1
 8005cb8:	080061e1 	.word	0x080061e1
 8005cbc:	080061e1 	.word	0x080061e1
 8005cc0:	080061e9 	.word	0x080061e9
 8005cc4:	080061e9 	.word	0x080061e9
 8005cc8:	080061e9 	.word	0x080061e9
 8005ccc:	080061e9 	.word	0x080061e9
 8005cd0:	080061f1 	.word	0x080061f1
 8005cd4:	080061f1 	.word	0x080061f1
 8005cd8:	080061f1 	.word	0x080061f1
 8005cdc:	080061f1 	.word	0x080061f1
 8005ce0:	080061f9 	.word	0x080061f9
 8005ce4:	080061f9 	.word	0x080061f9
 8005ce8:	080061f9 	.word	0x080061f9
 8005cec:	080061f9 	.word	0x080061f9
 8005cf0:	08006201 	.word	0x08006201
 8005cf4:	08006201 	.word	0x08006201
 8005cf8:	08006201 	.word	0x08006201
 8005cfc:	08006201 	.word	0x08006201
 8005d00:	08006209 	.word	0x08006209
 8005d04:	08006209 	.word	0x08006209
 8005d08:	08006209 	.word	0x08006209
 8005d0c:	08006209 	.word	0x08006209
 8005d10:	08006211 	.word	0x08006211
 8005d14:	08006211 	.word	0x08006211
 8005d18:	08006211 	.word	0x08006211
 8005d1c:	08006211 	.word	0x08006211
 8005d20:	08006219 	.word	0x08006219
 8005d24:	08006219 	.word	0x08006219
 8005d28:	08006219 	.word	0x08006219
 8005d2c:	08006219 	.word	0x08006219
 8005d30:	08006221 	.word	0x08006221
 8005d34:	08006221 	.word	0x08006221
 8005d38:	08006221 	.word	0x08006221
 8005d3c:	08006221 	.word	0x08006221
 8005d40:	08006229 	.word	0x08006229
 8005d44:	08006229 	.word	0x08006229
 8005d48:	08006229 	.word	0x08006229
 8005d4c:	08006229 	.word	0x08006229
 8005d50:	08006231 	.word	0x08006231
 8005d54:	08006231 	.word	0x08006231
 8005d58:	08006231 	.word	0x08006231
 8005d5c:	08006231 	.word	0x08006231
 8005d60:	08006239 	.word	0x08006239
 8005d64:	08006239 	.word	0x08006239
 8005d68:	08006239 	.word	0x08006239
 8005d6c:	08006239 	.word	0x08006239
 8005d70:	08006241 	.word	0x08006241
 8005d74:	08006241 	.word	0x08006241
 8005d78:	08006241 	.word	0x08006241
 8005d7c:	08006241 	.word	0x08006241
 8005d80:	08006249 	.word	0x08006249
 8005d84:	08006249 	.word	0x08006249
 8005d88:	08006249 	.word	0x08006249
 8005d8c:	08006249 	.word	0x08006249
 8005d90:	08006251 	.word	0x08006251
 8005d94:	08006251 	.word	0x08006251
 8005d98:	08006251 	.word	0x08006251
 8005d9c:	08006251 	.word	0x08006251
 8005da0:	08006259 	.word	0x08006259
 8005da4:	08006259 	.word	0x08006259
 8005da8:	08006259 	.word	0x08006259
 8005dac:	08006259 	.word	0x08006259
 8005db0:	08006261 	.word	0x08006261
 8005db4:	08006261 	.word	0x08006261
 8005db8:	08006261 	.word	0x08006261
 8005dbc:	08006261 	.word	0x08006261
 8005dc0:	08006269 	.word	0x08006269
 8005dc4:	08006269 	.word	0x08006269
 8005dc8:	08006269 	.word	0x08006269
 8005dcc:	08006269 	.word	0x08006269
 8005dd0:	08006271 	.word	0x08006271
 8005dd4:	08006271 	.word	0x08006271
 8005dd8:	08006271 	.word	0x08006271
 8005ddc:	08006271 	.word	0x08006271
 8005de0:	08006279 	.word	0x08006279
 8005de4:	08006279 	.word	0x08006279
 8005de8:	08006279 	.word	0x08006279
 8005dec:	08006279 	.word	0x08006279
 8005df0:	08006281 	.word	0x08006281
 8005df4:	08006281 	.word	0x08006281
 8005df8:	08006281 	.word	0x08006281
 8005dfc:	08006281 	.word	0x08006281
 8005e00:	08006289 	.word	0x08006289
 8005e04:	08006289 	.word	0x08006289
 8005e08:	08006289 	.word	0x08006289
 8005e0c:	08006289 	.word	0x08006289
 8005e10:	08006291 	.word	0x08006291
 8005e14:	08006291 	.word	0x08006291
 8005e18:	08006291 	.word	0x08006291
 8005e1c:	08006291 	.word	0x08006291
 8005e20:	08006299 	.word	0x08006299
 8005e24:	08006299 	.word	0x08006299
 8005e28:	08006299 	.word	0x08006299
 8005e2c:	08006299 	.word	0x08006299
 8005e30:	080062a1 	.word	0x080062a1
 8005e34:	080062a1 	.word	0x080062a1
 8005e38:	080062a1 	.word	0x080062a1
 8005e3c:	080062a1 	.word	0x080062a1
 8005e40:	080062a9 	.word	0x080062a9
 8005e44:	080062a9 	.word	0x080062a9
 8005e48:	080062a9 	.word	0x080062a9
 8005e4c:	080062a9 	.word	0x080062a9
 8005e50:	080062b1 	.word	0x080062b1
 8005e54:	080062b1 	.word	0x080062b1
 8005e58:	080062b1 	.word	0x080062b1
 8005e5c:	080062b1 	.word	0x080062b1
 8005e60:	080062b9 	.word	0x080062b9
 8005e64:	080062b9 	.word	0x080062b9
 8005e68:	080062b9 	.word	0x080062b9
 8005e6c:	080062b9 	.word	0x080062b9
 8005e70:	080062c1 	.word	0x080062c1
 8005e74:	080062c1 	.word	0x080062c1
 8005e78:	080062c1 	.word	0x080062c1
 8005e7c:	080062c1 	.word	0x080062c1
 8005e80:	080062c9 	.word	0x080062c9
 8005e84:	080062c9 	.word	0x080062c9
 8005e88:	080062c9 	.word	0x080062c9
 8005e8c:	080062c9 	.word	0x080062c9
 8005e90:	080062d1 	.word	0x080062d1
 8005e94:	080062d1 	.word	0x080062d1
 8005e98:	080062d1 	.word	0x080062d1
 8005e9c:	080062d1 	.word	0x080062d1
 8005ea0:	080062d9 	.word	0x080062d9
 8005ea4:	080062d9 	.word	0x080062d9
 8005ea8:	080062d9 	.word	0x080062d9
 8005eac:	080062d9 	.word	0x080062d9
 8005eb0:	080062e1 	.word	0x080062e1
 8005eb4:	080062e1 	.word	0x080062e1
 8005eb8:	080062e1 	.word	0x080062e1
 8005ebc:	080062e1 	.word	0x080062e1
 8005ec0:	080062e9 	.word	0x080062e9
 8005ec4:	080062e9 	.word	0x080062e9
 8005ec8:	080062e9 	.word	0x080062e9
 8005ecc:	080062e9 	.word	0x080062e9
 8005ed0:	080062f1 	.word	0x080062f1
 8005ed4:	080062f1 	.word	0x080062f1
 8005ed8:	080062f1 	.word	0x080062f1
 8005edc:	080062f1 	.word	0x080062f1
 8005ee0:	080062f9 	.word	0x080062f9
 8005ee4:	080062f9 	.word	0x080062f9
 8005ee8:	080062f9 	.word	0x080062f9
 8005eec:	080062f9 	.word	0x080062f9
 8005ef0:	08006301 	.word	0x08006301
 8005ef4:	08006301 	.word	0x08006301
 8005ef8:	08006301 	.word	0x08006301
 8005efc:	08006301 	.word	0x08006301
 8005f00:	08006309 	.word	0x08006309
 8005f04:	08006309 	.word	0x08006309
 8005f08:	08006309 	.word	0x08006309
 8005f0c:	08006309 	.word	0x08006309
 8005f10:	08006311 	.word	0x08006311
 8005f14:	08006311 	.word	0x08006311
 8005f18:	08006311 	.word	0x08006311
 8005f1c:	08006311 	.word	0x08006311
 8005f20:	08006319 	.word	0x08006319
 8005f24:	08006319 	.word	0x08006319
 8005f28:	08006319 	.word	0x08006319
 8005f2c:	08006319 	.word	0x08006319
 8005f30:	08006321 	.word	0x08006321
 8005f34:	08006321 	.word	0x08006321
 8005f38:	08006321 	.word	0x08006321
 8005f3c:	08006321 	.word	0x08006321
 8005f40:	08006329 	.word	0x08006329
 8005f44:	08006329 	.word	0x08006329
 8005f48:	08006329 	.word	0x08006329
 8005f4c:	08006329 	.word	0x08006329
 8005f50:	08006331 	.word	0x08006331
 8005f54:	08006331 	.word	0x08006331
 8005f58:	08006331 	.word	0x08006331
 8005f5c:	08006331 	.word	0x08006331
 8005f60:	08006339 	.word	0x08006339
 8005f64:	08006339 	.word	0x08006339
 8005f68:	08006339 	.word	0x08006339
 8005f6c:	08006339 	.word	0x08006339
 8005f70:	08006341 	.word	0x08006341
 8005f74:	08006341 	.word	0x08006341
 8005f78:	08006341 	.word	0x08006341
 8005f7c:	08006341 	.word	0x08006341
 8005f80:	08006349 	.word	0x08006349
 8005f84:	08006349 	.word	0x08006349
 8005f88:	08006349 	.word	0x08006349
 8005f8c:	08006349 	.word	0x08006349
 8005f90:	08006351 	.word	0x08006351
 8005f94:	08006351 	.word	0x08006351
 8005f98:	08006351 	.word	0x08006351
 8005f9c:	08006351 	.word	0x08006351
 8005fa0:	08006359 	.word	0x08006359
 8005fa4:	08006359 	.word	0x08006359
 8005fa8:	08006359 	.word	0x08006359
 8005fac:	08006359 	.word	0x08006359
 8005fb0:	08006361 	.word	0x08006361
 8005fb4:	08006361 	.word	0x08006361
 8005fb8:	08006361 	.word	0x08006361
 8005fbc:	08006361 	.word	0x08006361
 8005fc0:	08006369 	.word	0x08006369
 8005fc4:	08006369 	.word	0x08006369
 8005fc8:	08006369 	.word	0x08006369
 8005fcc:	08006369 	.word	0x08006369
 8005fd0:	08006371 	.word	0x08006371
 8005fd4:	08006371 	.word	0x08006371
 8005fd8:	08006371 	.word	0x08006371
 8005fdc:	08006371 	.word	0x08006371
 8005fe0:	08006379 	.word	0x08006379
 8005fe4:	08006379 	.word	0x08006379
 8005fe8:	08006379 	.word	0x08006379
 8005fec:	08006379 	.word	0x08006379
 8005ff0:	08006381 	.word	0x08006381
 8005ff4:	08006381 	.word	0x08006381
 8005ff8:	08006381 	.word	0x08006381
 8005ffc:	08006381 	.word	0x08006381
 8006000:	08006389 	.word	0x08006389
 8006004:	08006389 	.word	0x08006389
 8006008:	08006389 	.word	0x08006389
 800600c:	08006389 	.word	0x08006389
 8006010:	08006391 	.word	0x08006391
 8006014:	08006391 	.word	0x08006391
 8006018:	08006391 	.word	0x08006391
 800601c:	08006391 	.word	0x08006391
 8006020:	08006399 	.word	0x08006399
 8006024:	08006399 	.word	0x08006399
 8006028:	08006399 	.word	0x08006399
 800602c:	08006399 	.word	0x08006399
 8006030:	080063a1 	.word	0x080063a1
 8006034:	080063a1 	.word	0x080063a1
 8006038:	080063a1 	.word	0x080063a1
 800603c:	080063a1 	.word	0x080063a1
 8006040:	080063a9 	.word	0x080063a9
 8006044:	080063a9 	.word	0x080063a9
 8006048:	080063a9 	.word	0x080063a9
 800604c:	080063a9 	.word	0x080063a9
 8006050:	080063b1 	.word	0x080063b1
 8006054:	080063b1 	.word	0x080063b1
 8006058:	080063b1 	.word	0x080063b1
 800605c:	080063b1 	.word	0x080063b1
 8006060:	080063b9 	.word	0x080063b9
 8006064:	080063b9 	.word	0x080063b9
 8006068:	080063b9 	.word	0x080063b9
 800606c:	080063b9 	.word	0x080063b9
 8006070:	080063c1 	.word	0x080063c1
 8006074:	080063c1 	.word	0x080063c1
 8006078:	080063c1 	.word	0x080063c1
 800607c:	080063c1 	.word	0x080063c1
 8006080:	080063c9 	.word	0x080063c9
 8006084:	080063c9 	.word	0x080063c9
 8006088:	080063c9 	.word	0x080063c9
 800608c:	080063c9 	.word	0x080063c9
 8006090:	080063d1 	.word	0x080063d1
 8006094:	080063d1 	.word	0x080063d1
 8006098:	080063d1 	.word	0x080063d1
 800609c:	080063d1 	.word	0x080063d1
 80060a0:	080063d9 	.word	0x080063d9
 80060a4:	080063d9 	.word	0x080063d9
 80060a8:	080063d9 	.word	0x080063d9
 80060ac:	080063d9 	.word	0x080063d9
 80060b0:	080063e1 	.word	0x080063e1
 80060b4:	080063e1 	.word	0x080063e1
 80060b8:	080063e1 	.word	0x080063e1
 80060bc:	080063e1 	.word	0x080063e1
 80060c0:	080063e9 	.word	0x080063e9
 80060c4:	080063e9 	.word	0x080063e9
 80060c8:	080063e9 	.word	0x080063e9
 80060cc:	080063e9 	.word	0x080063e9
 80060d0:	080063f1 	.word	0x080063f1
 80060d4:	080063f1 	.word	0x080063f1
 80060d8:	080063f1 	.word	0x080063f1
 80060dc:	080063f1 	.word	0x080063f1
 80060e0:	080063f9 	.word	0x080063f9
 80060e4:	080063f9 	.word	0x080063f9
 80060e8:	080063f9 	.word	0x080063f9
 80060ec:	080063f9 	.word	0x080063f9
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 80060f0:	2000      	movs	r0, #0
 80060f2:	f7ff fb89 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80060f6:	e184      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 80060f8:	2001      	movs	r0, #1
 80060fa:	f7ff fb85 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80060fe:	e180      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8006100:	2002      	movs	r0, #2
 8006102:	f7ff fb81 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006106:	e17c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8006108:	2003      	movs	r0, #3
 800610a:	f7ff fb7d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800610e:	e178      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8006110:	2004      	movs	r0, #4
 8006112:	f7ff fb79 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006116:	e174      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8006118:	2005      	movs	r0, #5
 800611a:	f7ff fb75 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800611e:	e170      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8006120:	2006      	movs	r0, #6
 8006122:	f7ff fb71 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006126:	e16c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 8006128:	2007      	movs	r0, #7
 800612a:	f7ff fb6d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800612e:	e168      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8006130:	2008      	movs	r0, #8
 8006132:	f7ff fb69 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006136:	e164      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 8006138:	2009      	movs	r0, #9
 800613a:	f7ff fb65 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800613e:	e160      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8006140:	200a      	movs	r0, #10
 8006142:	f7ff fb61 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006146:	e15c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 8006148:	200b      	movs	r0, #11
 800614a:	f7ff fb5d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800614e:	e158      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8006150:	200c      	movs	r0, #12
 8006152:	f7ff fb59 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006156:	e154      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 8006158:	200d      	movs	r0, #13
 800615a:	f7ff fb55 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800615e:	e150      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8006160:	200e      	movs	r0, #14
 8006162:	f7ff fb51 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006166:	e14c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 8006168:	200f      	movs	r0, #15
 800616a:	f7ff fb4d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800616e:	e148      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 8006170:	2010      	movs	r0, #16
 8006172:	f7ff fb49 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006176:	e144      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 8006178:	2011      	movs	r0, #17
 800617a:	f7ff fb45 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800617e:	e140      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 8006180:	2012      	movs	r0, #18
 8006182:	f7ff fb41 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006186:	e13c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 8006188:	2013      	movs	r0, #19
 800618a:	f7ff fb3d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800618e:	e138      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 8006190:	2014      	movs	r0, #20
 8006192:	f7ff fb39 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006196:	e134      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 8006198:	2015      	movs	r0, #21
 800619a:	f7ff fb35 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800619e:	e130      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 80061a0:	2016      	movs	r0, #22
 80061a2:	f7ff fb31 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061a6:	e12c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 80061a8:	2017      	movs	r0, #23
 80061aa:	f7ff fb2d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061ae:	e128      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 80061b0:	2018      	movs	r0, #24
 80061b2:	f7ff fb29 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061b6:	e124      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 80061b8:	2019      	movs	r0, #25
 80061ba:	f7ff fb25 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061be:	e120      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 80061c0:	201a      	movs	r0, #26
 80061c2:	f7ff fb21 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061c6:	e11c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 80061c8:	201b      	movs	r0, #27
 80061ca:	f7ff fb1d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061ce:	e118      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 80061d0:	201c      	movs	r0, #28
 80061d2:	f7ff fb19 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061d6:	e114      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 80061d8:	201d      	movs	r0, #29
 80061da:	f7ff fb15 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061de:	e110      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 80061e0:	201e      	movs	r0, #30
 80061e2:	f7ff fb11 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061e6:	e10c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 80061e8:	201f      	movs	r0, #31
 80061ea:	f7ff fb0d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061ee:	e108      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 80061f0:	2020      	movs	r0, #32
 80061f2:	f7ff fb09 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061f6:	e104      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 80061f8:	2021      	movs	r0, #33	; 0x21
 80061fa:	f7ff fb05 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80061fe:	e100      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 8006200:	2022      	movs	r0, #34	; 0x22
 8006202:	f7ff fb01 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006206:	e0fc      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 8006208:	2023      	movs	r0, #35	; 0x23
 800620a:	f7ff fafd 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800620e:	e0f8      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 8006210:	2024      	movs	r0, #36	; 0x24
 8006212:	f7ff faf9 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006216:	e0f4      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 8006218:	2025      	movs	r0, #37	; 0x25
 800621a:	f7ff faf5 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800621e:	e0f0      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 8006220:	2026      	movs	r0, #38	; 0x26
 8006222:	f7ff faf1 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006226:	e0ec      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 8006228:	2027      	movs	r0, #39	; 0x27
 800622a:	f7ff faed 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800622e:	e0e8      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 8006230:	2028      	movs	r0, #40	; 0x28
 8006232:	f7ff fae9 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006236:	e0e4      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 8006238:	2029      	movs	r0, #41	; 0x29
 800623a:	f7ff fae5 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800623e:	e0e0      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 8006240:	202a      	movs	r0, #42	; 0x2a
 8006242:	f7ff fae1 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006246:	e0dc      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 8006248:	202b      	movs	r0, #43	; 0x2b
 800624a:	f7ff fadd 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800624e:	e0d8      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 8006250:	202c      	movs	r0, #44	; 0x2c
 8006252:	f7ff fad9 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006256:	e0d4      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 8006258:	202d      	movs	r0, #45	; 0x2d
 800625a:	f7ff fad5 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800625e:	e0d0      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 8006260:	202e      	movs	r0, #46	; 0x2e
 8006262:	f7ff fad1 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006266:	e0cc      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 8006268:	202f      	movs	r0, #47	; 0x2f
 800626a:	f7ff facd 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800626e:	e0c8      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 8006270:	2030      	movs	r0, #48	; 0x30
 8006272:	f7ff fac9 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006276:	e0c4      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 8006278:	2031      	movs	r0, #49	; 0x31
 800627a:	f7ff fac5 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800627e:	e0c0      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 8006280:	2032      	movs	r0, #50	; 0x32
 8006282:	f7ff fac1 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006286:	e0bc      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 8006288:	2033      	movs	r0, #51	; 0x33
 800628a:	f7ff fabd 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800628e:	e0b8      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 8006290:	2034      	movs	r0, #52	; 0x34
 8006292:	f7ff fab9 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006296:	e0b4      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 8006298:	2035      	movs	r0, #53	; 0x35
 800629a:	f7ff fab5 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800629e:	e0b0      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 80062a0:	2036      	movs	r0, #54	; 0x36
 80062a2:	f7ff fab1 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062a6:	e0ac      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 80062a8:	2037      	movs	r0, #55	; 0x37
 80062aa:	f7ff faad 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062ae:	e0a8      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 80062b0:	2038      	movs	r0, #56	; 0x38
 80062b2:	f7ff faa9 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062b6:	e0a4      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 80062b8:	2039      	movs	r0, #57	; 0x39
 80062ba:	f7ff faa5 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062be:	e0a0      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 80062c0:	203a      	movs	r0, #58	; 0x3a
 80062c2:	f7ff faa1 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062c6:	e09c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 80062c8:	203b      	movs	r0, #59	; 0x3b
 80062ca:	f7ff fa9d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062ce:	e098      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 80062d0:	203c      	movs	r0, #60	; 0x3c
 80062d2:	f7ff fa99 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062d6:	e094      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 80062d8:	203d      	movs	r0, #61	; 0x3d
 80062da:	f7ff fa95 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062de:	e090      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 80062e0:	203e      	movs	r0, #62	; 0x3e
 80062e2:	f7ff fa91 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062e6:	e08c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 80062e8:	203f      	movs	r0, #63	; 0x3f
 80062ea:	f7ff fa8d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062ee:	e088      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 80062f0:	2040      	movs	r0, #64	; 0x40
 80062f2:	f7ff fa89 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062f6:	e084      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 80062f8:	2041      	movs	r0, #65	; 0x41
 80062fa:	f7ff fa85 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80062fe:	e080      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 8006300:	2042      	movs	r0, #66	; 0x42
 8006302:	f7ff fa81 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006306:	e07c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 8006308:	2043      	movs	r0, #67	; 0x43
 800630a:	f7ff fa7d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800630e:	e078      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 8006310:	2044      	movs	r0, #68	; 0x44
 8006312:	f7ff fa79 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006316:	e074      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 8006318:	2045      	movs	r0, #69	; 0x45
 800631a:	f7ff fa75 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800631e:	e070      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 8006320:	2046      	movs	r0, #70	; 0x46
 8006322:	f7ff fa71 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006326:	e06c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 8006328:	2047      	movs	r0, #71	; 0x47
 800632a:	f7ff fa6d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800632e:	e068      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 8006330:	2048      	movs	r0, #72	; 0x48
 8006332:	f7ff fa69 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006336:	e064      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 8006338:	2049      	movs	r0, #73	; 0x49
 800633a:	f7ff fa65 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800633e:	e060      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 8006340:	204a      	movs	r0, #74	; 0x4a
 8006342:	f7ff fa61 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006346:	e05c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 8006348:	204b      	movs	r0, #75	; 0x4b
 800634a:	f7ff fa5d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800634e:	e058      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 8006350:	204c      	movs	r0, #76	; 0x4c
 8006352:	f7ff fa59 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006356:	e054      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 8006358:	204d      	movs	r0, #77	; 0x4d
 800635a:	f7ff fa55 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800635e:	e050      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 8006360:	204e      	movs	r0, #78	; 0x4e
 8006362:	f7ff fa51 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006366:	e04c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 8006368:	204f      	movs	r0, #79	; 0x4f
 800636a:	f7ff fa4d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800636e:	e048      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 8006370:	2050      	movs	r0, #80	; 0x50
 8006372:	f7ff fa49 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006376:	e044      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 8006378:	2051      	movs	r0, #81	; 0x51
 800637a:	f7ff fa45 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800637e:	e040      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 8006380:	2052      	movs	r0, #82	; 0x52
 8006382:	f7ff fa41 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006386:	e03c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 8006388:	2053      	movs	r0, #83	; 0x53
 800638a:	f7ff fa3d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800638e:	e038      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 8006390:	2054      	movs	r0, #84	; 0x54
 8006392:	f7ff fa39 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 8006396:	e034      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 8006398:	2055      	movs	r0, #85	; 0x55
 800639a:	f7ff fa35 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 800639e:	e030      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 80063a0:	2056      	movs	r0, #86	; 0x56
 80063a2:	f7ff fa31 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063a6:	e02c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 80063a8:	2057      	movs	r0, #87	; 0x57
 80063aa:	f7ff fa2d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063ae:	e028      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 80063b0:	2058      	movs	r0, #88	; 0x58
 80063b2:	f7ff fa29 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063b6:	e024      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 80063b8:	2059      	movs	r0, #89	; 0x59
 80063ba:	f7ff fa25 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063be:	e020      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 80063c0:	205a      	movs	r0, #90	; 0x5a
 80063c2:	f7ff fa21 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063c6:	e01c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 80063c8:	205b      	movs	r0, #91	; 0x5b
 80063ca:	f7ff fa1d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063ce:	e018      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 80063d0:	205c      	movs	r0, #92	; 0x5c
 80063d2:	f7ff fa19 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063d6:	e014      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 80063d8:	205d      	movs	r0, #93	; 0x5d
 80063da:	f7ff fa15 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063de:	e010      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 80063e0:	205e      	movs	r0, #94	; 0x5e
 80063e2:	f7ff fa11 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063e6:	e00c      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 80063e8:	205f      	movs	r0, #95	; 0x5f
 80063ea:	f7ff fa0d 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063ee:	e008      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 80063f0:	2060      	movs	r0, #96	; 0x60
 80063f2:	f7ff fa09 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063f6:	e004      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 80063f8:	2061      	movs	r0, #97	; 0x61
 80063fa:	f7ff fa05 	bl	8005808 <VPP_ApplyPresetToSignal>
			break;
 80063fe:	e000      	b.n	8006402 <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 8006400:	bf00      	nop
	}
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop

0800640c <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 800641c:	f200 849a 	bhi.w	8006d54 <VPP_ModifySyncOutput+0x948>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <VPP_ModifySyncOutput+0x1c>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	08006a45 	.word	0x08006a45
 800642c:	08006a45 	.word	0x08006a45
 8006430:	08006a45 	.word	0x08006a45
 8006434:	08006a4d 	.word	0x08006a4d
 8006438:	08006a4d 	.word	0x08006a4d
 800643c:	08006a4d 	.word	0x08006a4d
 8006440:	08006a4d 	.word	0x08006a4d
 8006444:	08006a55 	.word	0x08006a55
 8006448:	08006a55 	.word	0x08006a55
 800644c:	08006a55 	.word	0x08006a55
 8006450:	08006a55 	.word	0x08006a55
 8006454:	08006a5d 	.word	0x08006a5d
 8006458:	08006a5d 	.word	0x08006a5d
 800645c:	08006a5d 	.word	0x08006a5d
 8006460:	08006a5d 	.word	0x08006a5d
 8006464:	08006a65 	.word	0x08006a65
 8006468:	08006a65 	.word	0x08006a65
 800646c:	08006a65 	.word	0x08006a65
 8006470:	08006a65 	.word	0x08006a65
 8006474:	08006a6d 	.word	0x08006a6d
 8006478:	08006a6d 	.word	0x08006a6d
 800647c:	08006a6d 	.word	0x08006a6d
 8006480:	08006a6d 	.word	0x08006a6d
 8006484:	08006a75 	.word	0x08006a75
 8006488:	08006a75 	.word	0x08006a75
 800648c:	08006a75 	.word	0x08006a75
 8006490:	08006a75 	.word	0x08006a75
 8006494:	08006a7d 	.word	0x08006a7d
 8006498:	08006a7d 	.word	0x08006a7d
 800649c:	08006a7d 	.word	0x08006a7d
 80064a0:	08006a7d 	.word	0x08006a7d
 80064a4:	08006a85 	.word	0x08006a85
 80064a8:	08006a85 	.word	0x08006a85
 80064ac:	08006a85 	.word	0x08006a85
 80064b0:	08006a85 	.word	0x08006a85
 80064b4:	08006a8d 	.word	0x08006a8d
 80064b8:	08006a8d 	.word	0x08006a8d
 80064bc:	08006a8d 	.word	0x08006a8d
 80064c0:	08006a8d 	.word	0x08006a8d
 80064c4:	08006a95 	.word	0x08006a95
 80064c8:	08006a95 	.word	0x08006a95
 80064cc:	08006a95 	.word	0x08006a95
 80064d0:	08006a95 	.word	0x08006a95
 80064d4:	08006a9d 	.word	0x08006a9d
 80064d8:	08006a9d 	.word	0x08006a9d
 80064dc:	08006a9d 	.word	0x08006a9d
 80064e0:	08006a9d 	.word	0x08006a9d
 80064e4:	08006aa5 	.word	0x08006aa5
 80064e8:	08006aa5 	.word	0x08006aa5
 80064ec:	08006aa5 	.word	0x08006aa5
 80064f0:	08006aa5 	.word	0x08006aa5
 80064f4:	08006aad 	.word	0x08006aad
 80064f8:	08006aad 	.word	0x08006aad
 80064fc:	08006aad 	.word	0x08006aad
 8006500:	08006aad 	.word	0x08006aad
 8006504:	08006ab5 	.word	0x08006ab5
 8006508:	08006ab5 	.word	0x08006ab5
 800650c:	08006ab5 	.word	0x08006ab5
 8006510:	08006ab5 	.word	0x08006ab5
 8006514:	08006abd 	.word	0x08006abd
 8006518:	08006abd 	.word	0x08006abd
 800651c:	08006abd 	.word	0x08006abd
 8006520:	08006abd 	.word	0x08006abd
 8006524:	08006ac5 	.word	0x08006ac5
 8006528:	08006ac5 	.word	0x08006ac5
 800652c:	08006ac5 	.word	0x08006ac5
 8006530:	08006ac5 	.word	0x08006ac5
 8006534:	08006acd 	.word	0x08006acd
 8006538:	08006acd 	.word	0x08006acd
 800653c:	08006acd 	.word	0x08006acd
 8006540:	08006acd 	.word	0x08006acd
 8006544:	08006ad5 	.word	0x08006ad5
 8006548:	08006ad5 	.word	0x08006ad5
 800654c:	08006ad5 	.word	0x08006ad5
 8006550:	08006ad5 	.word	0x08006ad5
 8006554:	08006add 	.word	0x08006add
 8006558:	08006add 	.word	0x08006add
 800655c:	08006add 	.word	0x08006add
 8006560:	08006add 	.word	0x08006add
 8006564:	08006ae5 	.word	0x08006ae5
 8006568:	08006ae5 	.word	0x08006ae5
 800656c:	08006ae5 	.word	0x08006ae5
 8006570:	08006ae5 	.word	0x08006ae5
 8006574:	08006aed 	.word	0x08006aed
 8006578:	08006aed 	.word	0x08006aed
 800657c:	08006aed 	.word	0x08006aed
 8006580:	08006aed 	.word	0x08006aed
 8006584:	08006af5 	.word	0x08006af5
 8006588:	08006af5 	.word	0x08006af5
 800658c:	08006af5 	.word	0x08006af5
 8006590:	08006af5 	.word	0x08006af5
 8006594:	08006afd 	.word	0x08006afd
 8006598:	08006afd 	.word	0x08006afd
 800659c:	08006afd 	.word	0x08006afd
 80065a0:	08006afd 	.word	0x08006afd
 80065a4:	08006b05 	.word	0x08006b05
 80065a8:	08006b05 	.word	0x08006b05
 80065ac:	08006b05 	.word	0x08006b05
 80065b0:	08006b05 	.word	0x08006b05
 80065b4:	08006b0d 	.word	0x08006b0d
 80065b8:	08006b0d 	.word	0x08006b0d
 80065bc:	08006b0d 	.word	0x08006b0d
 80065c0:	08006b0d 	.word	0x08006b0d
 80065c4:	08006b15 	.word	0x08006b15
 80065c8:	08006b15 	.word	0x08006b15
 80065cc:	08006b15 	.word	0x08006b15
 80065d0:	08006b15 	.word	0x08006b15
 80065d4:	08006b1d 	.word	0x08006b1d
 80065d8:	08006b1d 	.word	0x08006b1d
 80065dc:	08006b1d 	.word	0x08006b1d
 80065e0:	08006b1d 	.word	0x08006b1d
 80065e4:	08006b25 	.word	0x08006b25
 80065e8:	08006b25 	.word	0x08006b25
 80065ec:	08006b25 	.word	0x08006b25
 80065f0:	08006b25 	.word	0x08006b25
 80065f4:	08006b2d 	.word	0x08006b2d
 80065f8:	08006b2d 	.word	0x08006b2d
 80065fc:	08006b2d 	.word	0x08006b2d
 8006600:	08006b2d 	.word	0x08006b2d
 8006604:	08006b35 	.word	0x08006b35
 8006608:	08006b35 	.word	0x08006b35
 800660c:	08006b35 	.word	0x08006b35
 8006610:	08006b35 	.word	0x08006b35
 8006614:	08006b3d 	.word	0x08006b3d
 8006618:	08006b3d 	.word	0x08006b3d
 800661c:	08006b3d 	.word	0x08006b3d
 8006620:	08006b3d 	.word	0x08006b3d
 8006624:	08006b45 	.word	0x08006b45
 8006628:	08006b45 	.word	0x08006b45
 800662c:	08006b45 	.word	0x08006b45
 8006630:	08006b45 	.word	0x08006b45
 8006634:	08006b4d 	.word	0x08006b4d
 8006638:	08006b4d 	.word	0x08006b4d
 800663c:	08006b4d 	.word	0x08006b4d
 8006640:	08006b4d 	.word	0x08006b4d
 8006644:	08006b55 	.word	0x08006b55
 8006648:	08006b55 	.word	0x08006b55
 800664c:	08006b55 	.word	0x08006b55
 8006650:	08006b55 	.word	0x08006b55
 8006654:	08006b5d 	.word	0x08006b5d
 8006658:	08006b5d 	.word	0x08006b5d
 800665c:	08006b5d 	.word	0x08006b5d
 8006660:	08006b5d 	.word	0x08006b5d
 8006664:	08006b65 	.word	0x08006b65
 8006668:	08006b65 	.word	0x08006b65
 800666c:	08006b65 	.word	0x08006b65
 8006670:	08006b65 	.word	0x08006b65
 8006674:	08006b6d 	.word	0x08006b6d
 8006678:	08006b6d 	.word	0x08006b6d
 800667c:	08006b6d 	.word	0x08006b6d
 8006680:	08006b6d 	.word	0x08006b6d
 8006684:	08006b75 	.word	0x08006b75
 8006688:	08006b75 	.word	0x08006b75
 800668c:	08006b75 	.word	0x08006b75
 8006690:	08006b75 	.word	0x08006b75
 8006694:	08006b7d 	.word	0x08006b7d
 8006698:	08006b7d 	.word	0x08006b7d
 800669c:	08006b7d 	.word	0x08006b7d
 80066a0:	08006b7d 	.word	0x08006b7d
 80066a4:	08006b85 	.word	0x08006b85
 80066a8:	08006b85 	.word	0x08006b85
 80066ac:	08006b85 	.word	0x08006b85
 80066b0:	08006b85 	.word	0x08006b85
 80066b4:	08006b8d 	.word	0x08006b8d
 80066b8:	08006b8d 	.word	0x08006b8d
 80066bc:	08006b8d 	.word	0x08006b8d
 80066c0:	08006b8d 	.word	0x08006b8d
 80066c4:	08006b95 	.word	0x08006b95
 80066c8:	08006b95 	.word	0x08006b95
 80066cc:	08006b95 	.word	0x08006b95
 80066d0:	08006b95 	.word	0x08006b95
 80066d4:	08006b9d 	.word	0x08006b9d
 80066d8:	08006b9d 	.word	0x08006b9d
 80066dc:	08006b9d 	.word	0x08006b9d
 80066e0:	08006b9d 	.word	0x08006b9d
 80066e4:	08006ba5 	.word	0x08006ba5
 80066e8:	08006ba5 	.word	0x08006ba5
 80066ec:	08006ba5 	.word	0x08006ba5
 80066f0:	08006ba5 	.word	0x08006ba5
 80066f4:	08006bad 	.word	0x08006bad
 80066f8:	08006bad 	.word	0x08006bad
 80066fc:	08006bad 	.word	0x08006bad
 8006700:	08006bad 	.word	0x08006bad
 8006704:	08006bb5 	.word	0x08006bb5
 8006708:	08006bb5 	.word	0x08006bb5
 800670c:	08006bb5 	.word	0x08006bb5
 8006710:	08006bb5 	.word	0x08006bb5
 8006714:	08006bbd 	.word	0x08006bbd
 8006718:	08006bbd 	.word	0x08006bbd
 800671c:	08006bbd 	.word	0x08006bbd
 8006720:	08006bbd 	.word	0x08006bbd
 8006724:	08006bc5 	.word	0x08006bc5
 8006728:	08006bc5 	.word	0x08006bc5
 800672c:	08006bc5 	.word	0x08006bc5
 8006730:	08006bc5 	.word	0x08006bc5
 8006734:	08006bcd 	.word	0x08006bcd
 8006738:	08006bcd 	.word	0x08006bcd
 800673c:	08006bcd 	.word	0x08006bcd
 8006740:	08006bcd 	.word	0x08006bcd
 8006744:	08006bd5 	.word	0x08006bd5
 8006748:	08006bd5 	.word	0x08006bd5
 800674c:	08006bd5 	.word	0x08006bd5
 8006750:	08006bd5 	.word	0x08006bd5
 8006754:	08006bdd 	.word	0x08006bdd
 8006758:	08006bdd 	.word	0x08006bdd
 800675c:	08006bdd 	.word	0x08006bdd
 8006760:	08006bdd 	.word	0x08006bdd
 8006764:	08006be5 	.word	0x08006be5
 8006768:	08006be5 	.word	0x08006be5
 800676c:	08006be5 	.word	0x08006be5
 8006770:	08006be5 	.word	0x08006be5
 8006774:	08006bed 	.word	0x08006bed
 8006778:	08006bed 	.word	0x08006bed
 800677c:	08006bed 	.word	0x08006bed
 8006780:	08006bed 	.word	0x08006bed
 8006784:	08006bf5 	.word	0x08006bf5
 8006788:	08006bf5 	.word	0x08006bf5
 800678c:	08006bf5 	.word	0x08006bf5
 8006790:	08006bf5 	.word	0x08006bf5
 8006794:	08006bfd 	.word	0x08006bfd
 8006798:	08006bfd 	.word	0x08006bfd
 800679c:	08006bfd 	.word	0x08006bfd
 80067a0:	08006bfd 	.word	0x08006bfd
 80067a4:	08006c05 	.word	0x08006c05
 80067a8:	08006c05 	.word	0x08006c05
 80067ac:	08006c05 	.word	0x08006c05
 80067b0:	08006c05 	.word	0x08006c05
 80067b4:	08006c0d 	.word	0x08006c0d
 80067b8:	08006c0d 	.word	0x08006c0d
 80067bc:	08006c0d 	.word	0x08006c0d
 80067c0:	08006c0d 	.word	0x08006c0d
 80067c4:	08006c15 	.word	0x08006c15
 80067c8:	08006c15 	.word	0x08006c15
 80067cc:	08006c15 	.word	0x08006c15
 80067d0:	08006c15 	.word	0x08006c15
 80067d4:	08006c1d 	.word	0x08006c1d
 80067d8:	08006c1d 	.word	0x08006c1d
 80067dc:	08006c1d 	.word	0x08006c1d
 80067e0:	08006c1d 	.word	0x08006c1d
 80067e4:	08006c25 	.word	0x08006c25
 80067e8:	08006c25 	.word	0x08006c25
 80067ec:	08006c25 	.word	0x08006c25
 80067f0:	08006c25 	.word	0x08006c25
 80067f4:	08006c2d 	.word	0x08006c2d
 80067f8:	08006c2d 	.word	0x08006c2d
 80067fc:	08006c2d 	.word	0x08006c2d
 8006800:	08006c2d 	.word	0x08006c2d
 8006804:	08006c35 	.word	0x08006c35
 8006808:	08006c35 	.word	0x08006c35
 800680c:	08006c35 	.word	0x08006c35
 8006810:	08006c35 	.word	0x08006c35
 8006814:	08006c3d 	.word	0x08006c3d
 8006818:	08006c3d 	.word	0x08006c3d
 800681c:	08006c3d 	.word	0x08006c3d
 8006820:	08006c3d 	.word	0x08006c3d
 8006824:	08006c45 	.word	0x08006c45
 8006828:	08006c45 	.word	0x08006c45
 800682c:	08006c45 	.word	0x08006c45
 8006830:	08006c45 	.word	0x08006c45
 8006834:	08006c4d 	.word	0x08006c4d
 8006838:	08006c4d 	.word	0x08006c4d
 800683c:	08006c4d 	.word	0x08006c4d
 8006840:	08006c4d 	.word	0x08006c4d
 8006844:	08006c55 	.word	0x08006c55
 8006848:	08006c55 	.word	0x08006c55
 800684c:	08006c55 	.word	0x08006c55
 8006850:	08006c55 	.word	0x08006c55
 8006854:	08006c5d 	.word	0x08006c5d
 8006858:	08006c5d 	.word	0x08006c5d
 800685c:	08006c5d 	.word	0x08006c5d
 8006860:	08006c5d 	.word	0x08006c5d
 8006864:	08006c65 	.word	0x08006c65
 8006868:	08006c65 	.word	0x08006c65
 800686c:	08006c65 	.word	0x08006c65
 8006870:	08006c65 	.word	0x08006c65
 8006874:	08006c6d 	.word	0x08006c6d
 8006878:	08006c6d 	.word	0x08006c6d
 800687c:	08006c6d 	.word	0x08006c6d
 8006880:	08006c6d 	.word	0x08006c6d
 8006884:	08006c75 	.word	0x08006c75
 8006888:	08006c75 	.word	0x08006c75
 800688c:	08006c75 	.word	0x08006c75
 8006890:	08006c75 	.word	0x08006c75
 8006894:	08006c7d 	.word	0x08006c7d
 8006898:	08006c7d 	.word	0x08006c7d
 800689c:	08006c7d 	.word	0x08006c7d
 80068a0:	08006c7d 	.word	0x08006c7d
 80068a4:	08006c85 	.word	0x08006c85
 80068a8:	08006c85 	.word	0x08006c85
 80068ac:	08006c85 	.word	0x08006c85
 80068b0:	08006c85 	.word	0x08006c85
 80068b4:	08006c8d 	.word	0x08006c8d
 80068b8:	08006c8d 	.word	0x08006c8d
 80068bc:	08006c8d 	.word	0x08006c8d
 80068c0:	08006c8d 	.word	0x08006c8d
 80068c4:	08006c95 	.word	0x08006c95
 80068c8:	08006c95 	.word	0x08006c95
 80068cc:	08006c95 	.word	0x08006c95
 80068d0:	08006c95 	.word	0x08006c95
 80068d4:	08006c9d 	.word	0x08006c9d
 80068d8:	08006c9d 	.word	0x08006c9d
 80068dc:	08006c9d 	.word	0x08006c9d
 80068e0:	08006c9d 	.word	0x08006c9d
 80068e4:	08006ca5 	.word	0x08006ca5
 80068e8:	08006ca5 	.word	0x08006ca5
 80068ec:	08006ca5 	.word	0x08006ca5
 80068f0:	08006ca5 	.word	0x08006ca5
 80068f4:	08006cad 	.word	0x08006cad
 80068f8:	08006cad 	.word	0x08006cad
 80068fc:	08006cad 	.word	0x08006cad
 8006900:	08006cad 	.word	0x08006cad
 8006904:	08006cb5 	.word	0x08006cb5
 8006908:	08006cb5 	.word	0x08006cb5
 800690c:	08006cb5 	.word	0x08006cb5
 8006910:	08006cb5 	.word	0x08006cb5
 8006914:	08006cbd 	.word	0x08006cbd
 8006918:	08006cbd 	.word	0x08006cbd
 800691c:	08006cbd 	.word	0x08006cbd
 8006920:	08006cbd 	.word	0x08006cbd
 8006924:	08006cc5 	.word	0x08006cc5
 8006928:	08006cc5 	.word	0x08006cc5
 800692c:	08006cc5 	.word	0x08006cc5
 8006930:	08006cc5 	.word	0x08006cc5
 8006934:	08006ccd 	.word	0x08006ccd
 8006938:	08006ccd 	.word	0x08006ccd
 800693c:	08006ccd 	.word	0x08006ccd
 8006940:	08006ccd 	.word	0x08006ccd
 8006944:	08006cd5 	.word	0x08006cd5
 8006948:	08006cd5 	.word	0x08006cd5
 800694c:	08006cd5 	.word	0x08006cd5
 8006950:	08006cd5 	.word	0x08006cd5
 8006954:	08006cdd 	.word	0x08006cdd
 8006958:	08006cdd 	.word	0x08006cdd
 800695c:	08006cdd 	.word	0x08006cdd
 8006960:	08006cdd 	.word	0x08006cdd
 8006964:	08006ce5 	.word	0x08006ce5
 8006968:	08006ce5 	.word	0x08006ce5
 800696c:	08006ce5 	.word	0x08006ce5
 8006970:	08006ce5 	.word	0x08006ce5
 8006974:	08006ced 	.word	0x08006ced
 8006978:	08006ced 	.word	0x08006ced
 800697c:	08006ced 	.word	0x08006ced
 8006980:	08006ced 	.word	0x08006ced
 8006984:	08006cf5 	.word	0x08006cf5
 8006988:	08006cf5 	.word	0x08006cf5
 800698c:	08006cf5 	.word	0x08006cf5
 8006990:	08006cf5 	.word	0x08006cf5
 8006994:	08006cfd 	.word	0x08006cfd
 8006998:	08006cfd 	.word	0x08006cfd
 800699c:	08006cfd 	.word	0x08006cfd
 80069a0:	08006cfd 	.word	0x08006cfd
 80069a4:	08006d05 	.word	0x08006d05
 80069a8:	08006d05 	.word	0x08006d05
 80069ac:	08006d05 	.word	0x08006d05
 80069b0:	08006d05 	.word	0x08006d05
 80069b4:	08006d0d 	.word	0x08006d0d
 80069b8:	08006d0d 	.word	0x08006d0d
 80069bc:	08006d0d 	.word	0x08006d0d
 80069c0:	08006d0d 	.word	0x08006d0d
 80069c4:	08006d15 	.word	0x08006d15
 80069c8:	08006d15 	.word	0x08006d15
 80069cc:	08006d15 	.word	0x08006d15
 80069d0:	08006d15 	.word	0x08006d15
 80069d4:	08006d1d 	.word	0x08006d1d
 80069d8:	08006d1d 	.word	0x08006d1d
 80069dc:	08006d1d 	.word	0x08006d1d
 80069e0:	08006d1d 	.word	0x08006d1d
 80069e4:	08006d25 	.word	0x08006d25
 80069e8:	08006d25 	.word	0x08006d25
 80069ec:	08006d25 	.word	0x08006d25
 80069f0:	08006d25 	.word	0x08006d25
 80069f4:	08006d2d 	.word	0x08006d2d
 80069f8:	08006d2d 	.word	0x08006d2d
 80069fc:	08006d2d 	.word	0x08006d2d
 8006a00:	08006d2d 	.word	0x08006d2d
 8006a04:	08006d35 	.word	0x08006d35
 8006a08:	08006d35 	.word	0x08006d35
 8006a0c:	08006d35 	.word	0x08006d35
 8006a10:	08006d35 	.word	0x08006d35
 8006a14:	08006d3d 	.word	0x08006d3d
 8006a18:	08006d3d 	.word	0x08006d3d
 8006a1c:	08006d3d 	.word	0x08006d3d
 8006a20:	08006d3d 	.word	0x08006d3d
 8006a24:	08006d45 	.word	0x08006d45
 8006a28:	08006d45 	.word	0x08006d45
 8006a2c:	08006d45 	.word	0x08006d45
 8006a30:	08006d45 	.word	0x08006d45
 8006a34:	08006d4d 	.word	0x08006d4d
 8006a38:	08006d4d 	.word	0x08006d4d
 8006a3c:	08006d4d 	.word	0x08006d4d
 8006a40:	08006d4d 	.word	0x08006d4d
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 8006a44:	2000      	movs	r0, #0
 8006a46:	f7fe ff0d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a4a:	e184      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	f7fe ff09 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a52:	e180      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 8006a54:	2002      	movs	r0, #2
 8006a56:	f7fe ff05 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a5a:	e17c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 8006a5c:	2003      	movs	r0, #3
 8006a5e:	f7fe ff01 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a62:	e178      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 8006a64:	2004      	movs	r0, #4
 8006a66:	f7fe fefd 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a6a:	e174      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 8006a6c:	2005      	movs	r0, #5
 8006a6e:	f7fe fef9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a72:	e170      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 8006a74:	2006      	movs	r0, #6
 8006a76:	f7fe fef5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a7a:	e16c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 8006a7c:	2007      	movs	r0, #7
 8006a7e:	f7fe fef1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a82:	e168      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 8006a84:	2008      	movs	r0, #8
 8006a86:	f7fe feed 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a8a:	e164      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8006a8c:	2009      	movs	r0, #9
 8006a8e:	f7fe fee9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a92:	e160      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 8006a94:	200a      	movs	r0, #10
 8006a96:	f7fe fee5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006a9a:	e15c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8006a9c:	200b      	movs	r0, #11
 8006a9e:	f7fe fee1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006aa2:	e158      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 8006aa4:	200c      	movs	r0, #12
 8006aa6:	f7fe fedd 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006aaa:	e154      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8006aac:	200d      	movs	r0, #13
 8006aae:	f7fe fed9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006ab2:	e150      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 8006ab4:	200e      	movs	r0, #14
 8006ab6:	f7fe fed5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006aba:	e14c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8006abc:	200f      	movs	r0, #15
 8006abe:	f7fe fed1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006ac2:	e148      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 8006ac4:	2010      	movs	r0, #16
 8006ac6:	f7fe fecd 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006aca:	e144      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 8006acc:	2011      	movs	r0, #17
 8006ace:	f7fe fec9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006ad2:	e140      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 8006ad4:	2012      	movs	r0, #18
 8006ad6:	f7fe fec5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006ada:	e13c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 8006adc:	2013      	movs	r0, #19
 8006ade:	f7fe fec1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006ae2:	e138      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 8006ae4:	2014      	movs	r0, #20
 8006ae6:	f7fe febd 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006aea:	e134      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 8006aec:	2015      	movs	r0, #21
 8006aee:	f7fe feb9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006af2:	e130      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 8006af4:	2016      	movs	r0, #22
 8006af6:	f7fe feb5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006afa:	e12c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 8006afc:	2017      	movs	r0, #23
 8006afe:	f7fe feb1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b02:	e128      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 8006b04:	2018      	movs	r0, #24
 8006b06:	f7fe fead 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b0a:	e124      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 8006b0c:	2019      	movs	r0, #25
 8006b0e:	f7fe fea9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b12:	e120      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 8006b14:	201a      	movs	r0, #26
 8006b16:	f7fe fea5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b1a:	e11c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 8006b1c:	201b      	movs	r0, #27
 8006b1e:	f7fe fea1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b22:	e118      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 8006b24:	201c      	movs	r0, #28
 8006b26:	f7fe fe9d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b2a:	e114      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 8006b2c:	201d      	movs	r0, #29
 8006b2e:	f7fe fe99 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b32:	e110      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 8006b34:	201e      	movs	r0, #30
 8006b36:	f7fe fe95 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b3a:	e10c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 8006b3c:	201f      	movs	r0, #31
 8006b3e:	f7fe fe91 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b42:	e108      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 8006b44:	2020      	movs	r0, #32
 8006b46:	f7fe fe8d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b4a:	e104      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 8006b4c:	2021      	movs	r0, #33	; 0x21
 8006b4e:	f7fe fe89 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b52:	e100      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 8006b54:	2022      	movs	r0, #34	; 0x22
 8006b56:	f7fe fe85 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b5a:	e0fc      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 8006b5c:	2023      	movs	r0, #35	; 0x23
 8006b5e:	f7fe fe81 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b62:	e0f8      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8006b64:	2024      	movs	r0, #36	; 0x24
 8006b66:	f7fe fe7d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b6a:	e0f4      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8006b6c:	2025      	movs	r0, #37	; 0x25
 8006b6e:	f7fe fe79 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b72:	e0f0      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8006b74:	2026      	movs	r0, #38	; 0x26
 8006b76:	f7fe fe75 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b7a:	e0ec      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8006b7c:	2027      	movs	r0, #39	; 0x27
 8006b7e:	f7fe fe71 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b82:	e0e8      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8006b84:	2028      	movs	r0, #40	; 0x28
 8006b86:	f7fe fe6d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b8a:	e0e4      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8006b8c:	2029      	movs	r0, #41	; 0x29
 8006b8e:	f7fe fe69 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b92:	e0e0      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8006b94:	202a      	movs	r0, #42	; 0x2a
 8006b96:	f7fe fe65 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006b9a:	e0dc      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8006b9c:	202b      	movs	r0, #43	; 0x2b
 8006b9e:	f7fe fe61 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006ba2:	e0d8      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8006ba4:	202c      	movs	r0, #44	; 0x2c
 8006ba6:	f7fe fe5d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006baa:	e0d4      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8006bac:	202d      	movs	r0, #45	; 0x2d
 8006bae:	f7fe fe59 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006bb2:	e0d0      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8006bb4:	202e      	movs	r0, #46	; 0x2e
 8006bb6:	f7fe fe55 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006bba:	e0cc      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8006bbc:	202f      	movs	r0, #47	; 0x2f
 8006bbe:	f7fe fe51 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006bc2:	e0c8      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8006bc4:	2030      	movs	r0, #48	; 0x30
 8006bc6:	f7fe fe4d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006bca:	e0c4      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 8006bcc:	2031      	movs	r0, #49	; 0x31
 8006bce:	f7fe fe49 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006bd2:	e0c0      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 8006bd4:	2032      	movs	r0, #50	; 0x32
 8006bd6:	f7fe fe45 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006bda:	e0bc      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 8006bdc:	2033      	movs	r0, #51	; 0x33
 8006bde:	f7fe fe41 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006be2:	e0b8      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 8006be4:	2034      	movs	r0, #52	; 0x34
 8006be6:	f7fe fe3d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006bea:	e0b4      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 8006bec:	2035      	movs	r0, #53	; 0x35
 8006bee:	f7fe fe39 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006bf2:	e0b0      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 8006bf4:	2036      	movs	r0, #54	; 0x36
 8006bf6:	f7fe fe35 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006bfa:	e0ac      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 8006bfc:	2037      	movs	r0, #55	; 0x37
 8006bfe:	f7fe fe31 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c02:	e0a8      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 8006c04:	2038      	movs	r0, #56	; 0x38
 8006c06:	f7fe fe2d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c0a:	e0a4      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 8006c0c:	2039      	movs	r0, #57	; 0x39
 8006c0e:	f7fe fe29 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c12:	e0a0      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 8006c14:	203a      	movs	r0, #58	; 0x3a
 8006c16:	f7fe fe25 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c1a:	e09c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 8006c1c:	203b      	movs	r0, #59	; 0x3b
 8006c1e:	f7fe fe21 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c22:	e098      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 8006c24:	203c      	movs	r0, #60	; 0x3c
 8006c26:	f7fe fe1d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c2a:	e094      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 8006c2c:	203d      	movs	r0, #61	; 0x3d
 8006c2e:	f7fe fe19 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c32:	e090      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 8006c34:	203e      	movs	r0, #62	; 0x3e
 8006c36:	f7fe fe15 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c3a:	e08c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8006c3c:	203f      	movs	r0, #63	; 0x3f
 8006c3e:	f7fe fe11 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c42:	e088      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8006c44:	2040      	movs	r0, #64	; 0x40
 8006c46:	f7fe fe0d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c4a:	e084      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8006c4c:	2041      	movs	r0, #65	; 0x41
 8006c4e:	f7fe fe09 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c52:	e080      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8006c54:	2042      	movs	r0, #66	; 0x42
 8006c56:	f7fe fe05 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c5a:	e07c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8006c5c:	2043      	movs	r0, #67	; 0x43
 8006c5e:	f7fe fe01 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c62:	e078      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8006c64:	2044      	movs	r0, #68	; 0x44
 8006c66:	f7fe fdfd 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c6a:	e074      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 8006c6c:	2045      	movs	r0, #69	; 0x45
 8006c6e:	f7fe fdf9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c72:	e070      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 8006c74:	2046      	movs	r0, #70	; 0x46
 8006c76:	f7fe fdf5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c7a:	e06c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 8006c7c:	2047      	movs	r0, #71	; 0x47
 8006c7e:	f7fe fdf1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c82:	e068      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 8006c84:	2048      	movs	r0, #72	; 0x48
 8006c86:	f7fe fded 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c8a:	e064      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 8006c8c:	2049      	movs	r0, #73	; 0x49
 8006c8e:	f7fe fde9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c92:	e060      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 8006c94:	204a      	movs	r0, #74	; 0x4a
 8006c96:	f7fe fde5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006c9a:	e05c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 8006c9c:	204b      	movs	r0, #75	; 0x4b
 8006c9e:	f7fe fde1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006ca2:	e058      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 8006ca4:	204c      	movs	r0, #76	; 0x4c
 8006ca6:	f7fe fddd 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006caa:	e054      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 8006cac:	204d      	movs	r0, #77	; 0x4d
 8006cae:	f7fe fdd9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006cb2:	e050      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 8006cb4:	204e      	movs	r0, #78	; 0x4e
 8006cb6:	f7fe fdd5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006cba:	e04c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 8006cbc:	204f      	movs	r0, #79	; 0x4f
 8006cbe:	f7fe fdd1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006cc2:	e048      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 8006cc4:	2050      	movs	r0, #80	; 0x50
 8006cc6:	f7fe fdcd 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006cca:	e044      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 8006ccc:	2051      	movs	r0, #81	; 0x51
 8006cce:	f7fe fdc9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006cd2:	e040      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 8006cd4:	2052      	movs	r0, #82	; 0x52
 8006cd6:	f7fe fdc5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006cda:	e03c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 8006cdc:	2053      	movs	r0, #83	; 0x53
 8006cde:	f7fe fdc1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006ce2:	e038      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 8006ce4:	2054      	movs	r0, #84	; 0x54
 8006ce6:	f7fe fdbd 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006cea:	e034      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 8006cec:	2055      	movs	r0, #85	; 0x55
 8006cee:	f7fe fdb9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006cf2:	e030      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 8006cf4:	2056      	movs	r0, #86	; 0x56
 8006cf6:	f7fe fdb5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006cfa:	e02c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 8006cfc:	2057      	movs	r0, #87	; 0x57
 8006cfe:	f7fe fdb1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d02:	e028      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 8006d04:	2058      	movs	r0, #88	; 0x58
 8006d06:	f7fe fdad 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d0a:	e024      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 8006d0c:	2059      	movs	r0, #89	; 0x59
 8006d0e:	f7fe fda9 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d12:	e020      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 8006d14:	205a      	movs	r0, #90	; 0x5a
 8006d16:	f7fe fda5 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d1a:	e01c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 8006d1c:	205b      	movs	r0, #91	; 0x5b
 8006d1e:	f7fe fda1 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d22:	e018      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 8006d24:	205c      	movs	r0, #92	; 0x5c
 8006d26:	f7fe fd9d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d2a:	e014      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 8006d2c:	205d      	movs	r0, #93	; 0x5d
 8006d2e:	f7fe fd99 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d32:	e010      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 8006d34:	205e      	movs	r0, #94	; 0x5e
 8006d36:	f7fe fd95 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d3a:	e00c      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8006d3c:	205f      	movs	r0, #95	; 0x5f
 8006d3e:	f7fe fd91 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d42:	e008      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8006d44:	2060      	movs	r0, #96	; 0x60
 8006d46:	f7fe fd8d 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d4a:	e004      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8006d4c:	2061      	movs	r0, #97	; 0x61
 8006d4e:	f7fe fd89 	bl	8005864 <VPP_ApplyPresetToSync>
			break;
 8006d52:	e000      	b.n	8006d56 <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8006d54:	bf00      	nop
	}
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop

08006d60 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08c      	sub	sp, #48	; 0x30
 8006d64:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	605a      	str	r2, [r3, #4]
 8006d70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006d72:	1d3b      	adds	r3, r7, #4
 8006d74:	2220      	movs	r2, #32
 8006d76:	2100      	movs	r1, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f007 fd63 	bl	800e844 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006d7e:	4b32      	ldr	r3, [pc, #200]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006d80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006d86:	4b30      	ldr	r3, [pc, #192]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006d88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006d8e:	4b2e      	ldr	r3, [pc, #184]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006d94:	4b2c      	ldr	r3, [pc, #176]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006d9a:	4b2b      	ldr	r3, [pc, #172]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006da0:	4b29      	ldr	r3, [pc, #164]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006da6:	4b28      	ldr	r3, [pc, #160]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006da8:	2204      	movs	r2, #4
 8006daa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006dac:	4b26      	ldr	r3, [pc, #152]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006db2:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006db8:	4b23      	ldr	r3, [pc, #140]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006dbe:	4b22      	ldr	r3, [pc, #136]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006dc6:	4b20      	ldr	r3, [pc, #128]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006dcc:	4b1e      	ldr	r3, [pc, #120]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006dd2:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006dda:	4b1b      	ldr	r3, [pc, #108]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006ddc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006de0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006de2:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006dea:	4817      	ldr	r0, [pc, #92]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006dec:	f001 fee2 	bl	8008bb4 <HAL_ADC_Init>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006df6:	f000 feaf 	bl	8007b58 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e02:	4619      	mov	r1, r3
 8006e04:	4810      	ldr	r0, [pc, #64]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006e06:	f002 fc6b 	bl	80096e0 <HAL_ADCEx_MultiModeConfigChannel>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006e10:	f000 fea2 	bl	8007b58 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006e14:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <MX_ADC1_Init+0xec>)
 8006e16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006e18:	2306      	movs	r3, #6
 8006e1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006e20:	237f      	movs	r3, #127	; 0x7f
 8006e22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006e24:	2304      	movs	r3, #4
 8006e26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e2c:	1d3b      	adds	r3, r7, #4
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4805      	ldr	r0, [pc, #20]	; (8006e48 <MX_ADC1_Init+0xe8>)
 8006e32:	f002 f87f 	bl	8008f34 <HAL_ADC_ConfigChannel>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006e3c:	f000 fe8c 	bl	8007b58 <Error_Handler>
  }

}
 8006e40:	bf00      	nop
 8006e42:	3730      	adds	r7, #48	; 0x30
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	20002514 	.word	0x20002514
 8006e4c:	0c900008 	.word	0x0c900008

08006e50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	; 0x28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	605a      	str	r2, [r3, #4]
 8006e62:	609a      	str	r2, [r3, #8]
 8006e64:	60da      	str	r2, [r3, #12]
 8006e66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e70:	d14f      	bne.n	8006f12 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006e72:	4b2a      	ldr	r3, [pc, #168]	; (8006f1c <HAL_ADC_MspInit+0xcc>)
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	4a29      	ldr	r2, [pc, #164]	; (8006f1c <HAL_ADC_MspInit+0xcc>)
 8006e78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e7e:	4b27      	ldr	r3, [pc, #156]	; (8006f1c <HAL_ADC_MspInit+0xcc>)
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e8a:	4b24      	ldr	r3, [pc, #144]	; (8006f1c <HAL_ADC_MspInit+0xcc>)
 8006e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8e:	4a23      	ldr	r2, [pc, #140]	; (8006f1c <HAL_ADC_MspInit+0xcc>)
 8006e90:	f043 0301 	orr.w	r3, r3, #1
 8006e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <HAL_ADC_MspInit+0xcc>)
 8006e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ea2:	2304      	movs	r3, #4
 8006ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eae:	f107 0314 	add.w	r3, r7, #20
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006eb8:	f003 fff4 	bl	800aea4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006ebc:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006ebe:	4a19      	ldr	r2, [pc, #100]	; (8006f24 <HAL_ADC_MspInit+0xd4>)
 8006ec0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006ec2:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006ec4:	2205      	movs	r2, #5
 8006ec6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ec8:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ece:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006ed4:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006ed6:	2280      	movs	r2, #128	; 0x80
 8006ed8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006eda:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ee2:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006eea:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006eec:	2220      	movs	r2, #32
 8006eee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006ef6:	480a      	ldr	r0, [pc, #40]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006ef8:	f003 fd08 	bl	800a90c <HAL_DMA_Init>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006f02:	f000 fe29 	bl	8007b58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a05      	ldr	r2, [pc, #20]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006f0a:	655a      	str	r2, [r3, #84]	; 0x54
 8006f0c:	4a04      	ldr	r2, [pc, #16]	; (8006f20 <HAL_ADC_MspInit+0xd0>)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006f12:	bf00      	nop
 8006f14:	3728      	adds	r7, #40	; 0x28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40021000 	.word	0x40021000
 8006f20:	20002580 	.word	0x20002580
 8006f24:	40020008 	.word	0x40020008

08006f28 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <MX_COMP1_Init+0x44>)
 8006f2e:	4a10      	ldr	r2, [pc, #64]	; (8006f70 <MX_COMP1_Init+0x48>)
 8006f30:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006f32:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <MX_COMP1_Init+0x44>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006f38:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <MX_COMP1_Init+0x44>)
 8006f3a:	4a0e      	ldr	r2, [pc, #56]	; (8006f74 <MX_COMP1_Init+0x4c>)
 8006f3c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <MX_COMP1_Init+0x44>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006f44:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <MX_COMP1_Init+0x44>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006f4a:	4b08      	ldr	r3, [pc, #32]	; (8006f6c <MX_COMP1_Init+0x44>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006f50:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <MX_COMP1_Init+0x44>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006f56:	4805      	ldr	r0, [pc, #20]	; (8006f6c <MX_COMP1_Init+0x44>)
 8006f58:	f002 fe16 	bl	8009b88 <HAL_COMP_Init>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006f62:	f000 fdf9 	bl	8007b58 <Error_Handler>
  }

}
 8006f66:	bf00      	nop
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	200025e0 	.word	0x200025e0
 8006f70:	40010200 	.word	0x40010200
 8006f74:	00800030 	.word	0x00800030

08006f78 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f80:	f107 030c 	add.w	r3, r7, #12
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	605a      	str	r2, [r3, #4]
 8006f8a:	609a      	str	r2, [r3, #8]
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <HAL_COMP_MspInit+0x5c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d118      	bne.n	8006fcc <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <HAL_COMP_MspInit+0x60>)
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9e:	4a0e      	ldr	r2, [pc, #56]	; (8006fd8 <HAL_COMP_MspInit+0x60>)
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fa6:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <HAL_COMP_MspInit+0x60>)
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fbe:	f107 030c 	add.w	r3, r7, #12
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fc8:	f003 ff6c 	bl	800aea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006fcc:	bf00      	nop
 8006fce:	3720      	adds	r7, #32
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40010200 	.word	0x40010200
 8006fd8:	40021000 	.word	0x40021000

08006fdc <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08c      	sub	sp, #48	; 0x30
 8006fe0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	2230      	movs	r2, #48	; 0x30
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f007 fc2b 	bl	800e844 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006fee:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <MX_DAC1_Init+0x8c>)
 8006ff0:	4a1e      	ldr	r2, [pc, #120]	; (800706c <MX_DAC1_Init+0x90>)
 8006ff2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006ff4:	481c      	ldr	r0, [pc, #112]	; (8007068 <MX_DAC1_Init+0x8c>)
 8006ff6:	f003 f86a 	bl	800a0ce <HAL_DAC_Init>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007000:	f000 fdaa 	bl	8007b58 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007004:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007008:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800700a:	2300      	movs	r3, #0
 800700c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800700e:	2300      	movs	r3, #0
 8007010:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007012:	2300      	movs	r3, #0
 8007014:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8007016:	2306      	movs	r3, #6
 8007018:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007022:	2301      	movs	r3, #1
 8007024:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800702a:	463b      	mov	r3, r7
 800702c:	2200      	movs	r2, #0
 800702e:	4619      	mov	r1, r3
 8007030:	480d      	ldr	r0, [pc, #52]	; (8007068 <MX_DAC1_Init+0x8c>)
 8007032:	f003 fa35 	bl	800a4a0 <HAL_DAC_ConfigChannel>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 800703c:	f000 fd8c 	bl	8007b58 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007044:	2301      	movs	r3, #1
 8007046:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007048:	463b      	mov	r3, r7
 800704a:	2210      	movs	r2, #16
 800704c:	4619      	mov	r1, r3
 800704e:	4806      	ldr	r0, [pc, #24]	; (8007068 <MX_DAC1_Init+0x8c>)
 8007050:	f003 fa26 	bl	800a4a0 <HAL_DAC_ConfigChannel>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800705a:	f000 fd7d 	bl	8007b58 <Error_Handler>
  }

}
 800705e:	bf00      	nop
 8007060:	3730      	adds	r7, #48	; 0x30
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20002618 	.word	0x20002618
 800706c:	50000800 	.word	0x50000800

08007070 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08c      	sub	sp, #48	; 0x30
 8007074:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8007076:	463b      	mov	r3, r7
 8007078:	2230      	movs	r2, #48	; 0x30
 800707a:	2100      	movs	r1, #0
 800707c:	4618      	mov	r0, r3
 800707e:	f007 fbe1 	bl	800e844 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8007082:	4b16      	ldr	r3, [pc, #88]	; (80070dc <MX_DAC2_Init+0x6c>)
 8007084:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <MX_DAC2_Init+0x70>)
 8007086:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8007088:	4814      	ldr	r0, [pc, #80]	; (80070dc <MX_DAC2_Init+0x6c>)
 800708a:	f003 f820 	bl	800a0ce <HAL_DAC_Init>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8007094:	f000 fd60 	bl	8007b58 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007098:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800709c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800709e:	2300      	movs	r3, #0
 80070a0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80070aa:	2306      	movs	r3, #6
 80070ac:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80070be:	463b      	mov	r3, r7
 80070c0:	2200      	movs	r2, #0
 80070c2:	4619      	mov	r1, r3
 80070c4:	4805      	ldr	r0, [pc, #20]	; (80070dc <MX_DAC2_Init+0x6c>)
 80070c6:	f003 f9eb 	bl	800a4a0 <HAL_DAC_ConfigChannel>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80070d0:	f000 fd42 	bl	8007b58 <Error_Handler>
  }

}
 80070d4:	bf00      	nop
 80070d6:	3730      	adds	r7, #48	; 0x30
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20002604 	.word	0x20002604
 80070e0:	50000c00 	.word	0x50000c00

080070e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08c      	sub	sp, #48	; 0x30
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070ec:	f107 031c 	add.w	r3, r7, #28
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	609a      	str	r2, [r3, #8]
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a56      	ldr	r2, [pc, #344]	; (800725c <HAL_DAC_MspInit+0x178>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d150      	bne.n	80071a8 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007106:	4b56      	ldr	r3, [pc, #344]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 8007108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710a:	4a55      	ldr	r2, [pc, #340]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 800710c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007112:	4b53      	ldr	r3, [pc, #332]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 8007114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800711a:	61bb      	str	r3, [r7, #24]
 800711c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800711e:	4b50      	ldr	r3, [pc, #320]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 8007120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007122:	4a4f      	ldr	r2, [pc, #316]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 8007124:	f043 0301 	orr.w	r3, r3, #1
 8007128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800712a:	4b4d      	ldr	r3, [pc, #308]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 800712c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007136:	2330      	movs	r3, #48	; 0x30
 8007138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800713a:	2303      	movs	r3, #3
 800713c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800713e:	2300      	movs	r3, #0
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007142:	f107 031c 	add.w	r3, r7, #28
 8007146:	4619      	mov	r1, r3
 8007148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800714c:	f003 feaa 	bl	800aea4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007150:	4b44      	ldr	r3, [pc, #272]	; (8007264 <HAL_DAC_MspInit+0x180>)
 8007152:	4a45      	ldr	r2, [pc, #276]	; (8007268 <HAL_DAC_MspInit+0x184>)
 8007154:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8007156:	4b43      	ldr	r3, [pc, #268]	; (8007264 <HAL_DAC_MspInit+0x180>)
 8007158:	2206      	movs	r2, #6
 800715a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800715c:	4b41      	ldr	r3, [pc, #260]	; (8007264 <HAL_DAC_MspInit+0x180>)
 800715e:	2210      	movs	r2, #16
 8007160:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007162:	4b40      	ldr	r3, [pc, #256]	; (8007264 <HAL_DAC_MspInit+0x180>)
 8007164:	2200      	movs	r2, #0
 8007166:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007168:	4b3e      	ldr	r3, [pc, #248]	; (8007264 <HAL_DAC_MspInit+0x180>)
 800716a:	2280      	movs	r2, #128	; 0x80
 800716c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800716e:	4b3d      	ldr	r3, [pc, #244]	; (8007264 <HAL_DAC_MspInit+0x180>)
 8007170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007174:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007176:	4b3b      	ldr	r3, [pc, #236]	; (8007264 <HAL_DAC_MspInit+0x180>)
 8007178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800717c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800717e:	4b39      	ldr	r3, [pc, #228]	; (8007264 <HAL_DAC_MspInit+0x180>)
 8007180:	2220      	movs	r2, #32
 8007182:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007184:	4b37      	ldr	r3, [pc, #220]	; (8007264 <HAL_DAC_MspInit+0x180>)
 8007186:	2200      	movs	r2, #0
 8007188:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800718a:	4836      	ldr	r0, [pc, #216]	; (8007264 <HAL_DAC_MspInit+0x180>)
 800718c:	f003 fbbe 	bl	800a90c <HAL_DMA_Init>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007196:	f000 fcdf 	bl	8007b58 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a31      	ldr	r2, [pc, #196]	; (8007264 <HAL_DAC_MspInit+0x180>)
 800719e:	609a      	str	r2, [r3, #8]
 80071a0:	4a30      	ldr	r2, [pc, #192]	; (8007264 <HAL_DAC_MspInit+0x180>)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80071a6:	e054      	b.n	8007252 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a2f      	ldr	r2, [pc, #188]	; (800726c <HAL_DAC_MspInit+0x188>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d14f      	bne.n	8007252 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80071b2:	4b2b      	ldr	r3, [pc, #172]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 80071b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b6:	4a2a      	ldr	r2, [pc, #168]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 80071b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071be:	4b28      	ldr	r3, [pc, #160]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 80071c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071ca:	4b25      	ldr	r3, [pc, #148]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 80071cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ce:	4a24      	ldr	r2, [pc, #144]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071d6:	4b22      	ldr	r3, [pc, #136]	; (8007260 <HAL_DAC_MspInit+0x17c>)
 80071d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80071e2:	2340      	movs	r3, #64	; 0x40
 80071e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071e6:	2303      	movs	r3, #3
 80071e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ee:	f107 031c 	add.w	r3, r7, #28
 80071f2:	4619      	mov	r1, r3
 80071f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071f8:	f003 fe54 	bl	800aea4 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80071fc:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <HAL_DAC_MspInit+0x190>)
 8007200:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8007202:	4b1b      	ldr	r3, [pc, #108]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 8007204:	2229      	movs	r2, #41	; 0x29
 8007206:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007208:	4b19      	ldr	r3, [pc, #100]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 800720a:	2210      	movs	r2, #16
 800720c:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800720e:	4b18      	ldr	r3, [pc, #96]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 8007210:	2200      	movs	r2, #0
 8007212:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007214:	4b16      	ldr	r3, [pc, #88]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 8007216:	2280      	movs	r2, #128	; 0x80
 8007218:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800721a:	4b15      	ldr	r3, [pc, #84]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 800721c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007220:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007222:	4b13      	ldr	r3, [pc, #76]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 8007224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007228:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800722a:	4b11      	ldr	r3, [pc, #68]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 800722c:	2220      	movs	r2, #32
 800722e:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 8007232:	2200      	movs	r2, #0
 8007234:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8007236:	480e      	ldr	r0, [pc, #56]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 8007238:	f003 fb68 	bl	800a90c <HAL_DMA_Init>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8007242:	f000 fc89 	bl	8007b58 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a09      	ldr	r2, [pc, #36]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 800724a:	609a      	str	r2, [r3, #8]
 800724c:	4a08      	ldr	r2, [pc, #32]	; (8007270 <HAL_DAC_MspInit+0x18c>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007252:	bf00      	nop
 8007254:	3730      	adds	r7, #48	; 0x30
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	50000800 	.word	0x50000800
 8007260:	40021000 	.word	0x40021000
 8007264:	2000262c 	.word	0x2000262c
 8007268:	4002001c 	.word	0x4002001c
 800726c:	50000c00 	.word	0x50000c00
 8007270:	2000268c 	.word	0x2000268c
 8007274:	40020030 	.word	0x40020030

08007278 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800727e:	4b1a      	ldr	r3, [pc, #104]	; (80072e8 <MX_DMA_Init+0x70>)
 8007280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007282:	4a19      	ldr	r2, [pc, #100]	; (80072e8 <MX_DMA_Init+0x70>)
 8007284:	f043 0304 	orr.w	r3, r3, #4
 8007288:	6493      	str	r3, [r2, #72]	; 0x48
 800728a:	4b17      	ldr	r3, [pc, #92]	; (80072e8 <MX_DMA_Init+0x70>)
 800728c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	607b      	str	r3, [r7, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <MX_DMA_Init+0x70>)
 8007298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729a:	4a13      	ldr	r2, [pc, #76]	; (80072e8 <MX_DMA_Init+0x70>)
 800729c:	f043 0301 	orr.w	r3, r3, #1
 80072a0:	6493      	str	r3, [r2, #72]	; 0x48
 80072a2:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <MX_DMA_Init+0x70>)
 80072a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80072ae:	2200      	movs	r2, #0
 80072b0:	2101      	movs	r1, #1
 80072b2:	200b      	movs	r0, #11
 80072b4:	f002 fed7 	bl	800a066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80072b8:	200b      	movs	r0, #11
 80072ba:	f002 feee 	bl	800a09a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80072be:	2200      	movs	r2, #0
 80072c0:	2100      	movs	r1, #0
 80072c2:	200c      	movs	r0, #12
 80072c4:	f002 fecf 	bl	800a066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80072c8:	200c      	movs	r0, #12
 80072ca:	f002 fee6 	bl	800a09a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80072ce:	2200      	movs	r2, #0
 80072d0:	2100      	movs	r1, #0
 80072d2:	200d      	movs	r0, #13
 80072d4:	f002 fec7 	bl	800a066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80072d8:	200d      	movs	r0, #13
 80072da:	f002 fede 	bl	800a09a <HAL_NVIC_EnableIRQ>

}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	40021000 	.word	0x40021000

080072ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <__NVIC_GetPriorityGrouping+0x18>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	0a1b      	lsrs	r3, r3, #8
 80072f6:	f003 0307 	and.w	r3, r3, #7
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	e000ed00 	.word	0xe000ed00

08007308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007316:	2b00      	cmp	r3, #0
 8007318:	db0b      	blt.n	8007332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	f003 021f 	and.w	r2, r3, #31
 8007320:	4907      	ldr	r1, [pc, #28]	; (8007340 <__NVIC_EnableIRQ+0x38>)
 8007322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	2001      	movs	r0, #1
 800732a:	fa00 f202 	lsl.w	r2, r0, r2
 800732e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	e000e100 	.word	0xe000e100

08007344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007354:	2b00      	cmp	r3, #0
 8007356:	db0a      	blt.n	800736e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	b2da      	uxtb	r2, r3
 800735c:	490c      	ldr	r1, [pc, #48]	; (8007390 <__NVIC_SetPriority+0x4c>)
 800735e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007362:	0112      	lsls	r2, r2, #4
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	440b      	add	r3, r1
 8007368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800736c:	e00a      	b.n	8007384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	4908      	ldr	r1, [pc, #32]	; (8007394 <__NVIC_SetPriority+0x50>)
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	3b04      	subs	r3, #4
 800737c:	0112      	lsls	r2, r2, #4
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	440b      	add	r3, r1
 8007382:	761a      	strb	r2, [r3, #24]
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	e000e100 	.word	0xe000e100
 8007394:	e000ed00 	.word	0xe000ed00

08007398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007398:	b480      	push	{r7}
 800739a:	b089      	sub	sp, #36	; 0x24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f1c3 0307 	rsb	r3, r3, #7
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	bf28      	it	cs
 80073b6:	2304      	movcs	r3, #4
 80073b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	3304      	adds	r3, #4
 80073be:	2b06      	cmp	r3, #6
 80073c0:	d902      	bls.n	80073c8 <NVIC_EncodePriority+0x30>
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	3b03      	subs	r3, #3
 80073c6:	e000      	b.n	80073ca <NVIC_EncodePriority+0x32>
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	43da      	mvns	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	401a      	ands	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ea:	43d9      	mvns	r1, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f0:	4313      	orrs	r3, r2
         );
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3724      	adds	r7, #36	; 0x24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
	...

08007400 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800740a:	4a14      	ldr	r2, [pc, #80]	; (800745c <LL_SYSCFG_SetEXTISource+0x5c>)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	3302      	adds	r3, #2
 8007414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	43db      	mvns	r3, r3
 800741e:	ea02 0103 	and.w	r1, r2, r3
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	fa93 f3a3 	rbit	r3, r3
 800742e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	fab3 f383 	clz	r3, r3
 8007436:	b2db      	uxtb	r3, r3
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	409a      	lsls	r2, r3
 8007440:	4806      	ldr	r0, [pc, #24]	; (800745c <LL_SYSCFG_SetEXTISource+0x5c>)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	430a      	orrs	r2, r1
 800744a:	3302      	adds	r3, #2
 800744c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007450:	bf00      	nop
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	40010000 	.word	0x40010000

08007460 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007460:	b480      	push	{r7}
 8007462:	b089      	sub	sp, #36	; 0x24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	fa93 f3a3 	rbit	r3, r3
 800747a:	613b      	str	r3, [r7, #16]
  return result;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	fab3 f383 	clz	r3, r3
 8007482:	b2db      	uxtb	r3, r3
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	2103      	movs	r1, #3
 8007488:	fa01 f303 	lsl.w	r3, r1, r3
 800748c:	43db      	mvns	r3, r3
 800748e:	401a      	ands	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	fa93 f3a3 	rbit	r3, r3
 800749a:	61bb      	str	r3, [r7, #24]
  return result;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	fab3 f383 	clz	r3, r3
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ac:	431a      	orrs	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	601a      	str	r2, [r3, #0]
}
 80074b2:	bf00      	nop
 80074b4:	3724      	adds	r7, #36	; 0x24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80074be:	b480      	push	{r7}
 80074c0:	b089      	sub	sp, #36	; 0x24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	fa93 f3a3 	rbit	r3, r3
 80074d8:	613b      	str	r3, [r7, #16]
  return result;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	fab3 f383 	clz	r3, r3
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	2103      	movs	r1, #3
 80074e6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ea:	43db      	mvns	r3, r3
 80074ec:	401a      	ands	r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	fa93 f3a3 	rbit	r3, r3
 80074f8:	61bb      	str	r3, [r7, #24]
  return result;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	fab3 f383 	clz	r3, r3
 8007500:	b2db      	uxtb	r3, r3
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	fa01 f303 	lsl.w	r3, r1, r3
 800750a:	431a      	orrs	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	60da      	str	r2, [r3, #12]
}
 8007510:	bf00      	nop
 8007512:	3724      	adds	r7, #36	; 0x24
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007540:	4b08      	ldr	r3, [pc, #32]	; (8007564 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007544:	4907      	ldr	r1, [pc, #28]	; (8007564 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4313      	orrs	r3, r2
 800754a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800754e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4013      	ands	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007556:	68fb      	ldr	r3, [r7, #12]
}
 8007558:	bf00      	nop
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	40021000 	.word	0x40021000

08007568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800756e:	f107 031c 	add.w	r3, r7, #28
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	605a      	str	r2, [r3, #4]
 8007578:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800757a:	1d3b      	adds	r3, r7, #4
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	605a      	str	r2, [r3, #4]
 8007582:	609a      	str	r2, [r3, #8]
 8007584:	60da      	str	r2, [r3, #12]
 8007586:	611a      	str	r2, [r3, #16]
 8007588:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800758a:	2004      	movs	r0, #4
 800758c:	f7ff ffd4 	bl	8007538 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007590:	2020      	movs	r0, #32
 8007592:	f7ff ffd1 	bl	8007538 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007596:	2001      	movs	r0, #1
 8007598:	f7ff ffce 	bl	8007538 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800759c:	2002      	movs	r0, #2
 800759e:	f7ff ffcb 	bl	8007538 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80075a2:	2108      	movs	r1, #8
 80075a4:	48d3      	ldr	r0, [pc, #844]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80075a6:	f7ff ffb9 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80075aa:	2108      	movs	r1, #8
 80075ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075b0:	f7ff ffb4 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80075b4:	2110      	movs	r1, #16
 80075b6:	48cf      	ldr	r0, [pc, #828]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80075b8:	f7ff ffb0 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 80075bc:	2120      	movs	r1, #32
 80075be:	48cd      	ldr	r0, [pc, #820]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80075c0:	f7ff ffac 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80075c4:	2101      	movs	r1, #1
 80075c6:	48cc      	ldr	r0, [pc, #816]	; (80078f8 <MX_GPIO_Init+0x390>)
 80075c8:	f7ff ffa8 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80075cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075d0:	48c8      	ldr	r0, [pc, #800]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80075d2:	f7ff ffa3 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80075d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075da:	48c6      	ldr	r0, [pc, #792]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80075dc:	f7ff ff9e 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80075e0:	2140      	movs	r1, #64	; 0x40
 80075e2:	48c5      	ldr	r0, [pc, #788]	; (80078f8 <MX_GPIO_Init+0x390>)
 80075e4:	f7ff ff9a 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80075e8:	2180      	movs	r1, #128	; 0x80
 80075ea:	48c3      	ldr	r0, [pc, #780]	; (80078f8 <MX_GPIO_Init+0x390>)
 80075ec:	f7ff ff96 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80075f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075f4:	48c0      	ldr	r0, [pc, #768]	; (80078f8 <MX_GPIO_Init+0x390>)
 80075f6:	f7ff ff91 	bl	800751c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80075fa:	49c0      	ldr	r1, [pc, #768]	; (80078fc <MX_GPIO_Init+0x394>)
 80075fc:	2002      	movs	r0, #2
 80075fe:	f7ff feff 	bl	8007400 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007602:	49bf      	ldr	r1, [pc, #764]	; (8007900 <MX_GPIO_Init+0x398>)
 8007604:	2002      	movs	r0, #2
 8007606:	f7ff fefb 	bl	8007400 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800760a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800760e:	2005      	movs	r0, #5
 8007610:	f7ff fef6 	bl	8007400 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007614:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007618:	2005      	movs	r0, #5
 800761a:	f7ff fef1 	bl	8007400 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 800761e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007622:	2002      	movs	r0, #2
 8007624:	f7ff feec 	bl	8007400 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007628:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800762c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800762e:	2301      	movs	r3, #1
 8007630:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007634:	2300      	movs	r3, #0
 8007636:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800763a:	2302      	movs	r3, #2
 800763c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007640:	f107 031c 	add.w	r3, r7, #28
 8007644:	4618      	mov	r0, r3
 8007646:	f005 fead 	bl	800d3a4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800764a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800764e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007650:	2301      	movs	r3, #1
 8007652:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800765c:	2302      	movs	r3, #2
 800765e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007662:	f107 031c 	add.w	r3, r7, #28
 8007666:	4618      	mov	r0, r3
 8007668:	f005 fe9c 	bl	800d3a4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800766c:	2301      	movs	r3, #1
 800766e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007676:	2300      	movs	r3, #0
 8007678:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800767c:	2302      	movs	r3, #2
 800767e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007682:	f107 031c 	add.w	r3, r7, #28
 8007686:	4618      	mov	r0, r3
 8007688:	f005 fe8c 	bl	800d3a4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800768c:	2302      	movs	r3, #2
 800768e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007696:	2300      	movs	r3, #0
 8007698:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800769c:	2302      	movs	r3, #2
 800769e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80076a2:	f107 031c 	add.w	r3, r7, #28
 80076a6:	4618      	mov	r0, r3
 80076a8:	f005 fe7c 	bl	800d3a4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80076ac:	2304      	movs	r3, #4
 80076ae:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80076b6:	2300      	movs	r3, #0
 80076b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80076bc:	2302      	movs	r3, #2
 80076be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80076c2:	f107 031c 	add.w	r3, r7, #28
 80076c6:	4618      	mov	r0, r3
 80076c8:	f005 fe6c 	bl	800d3a4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80076cc:	2201      	movs	r2, #1
 80076ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076d2:	4888      	ldr	r0, [pc, #544]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80076d4:	f7ff fef3 	bl	80074be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80076d8:	2201      	movs	r2, #1
 80076da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076de:	4885      	ldr	r0, [pc, #532]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80076e0:	f7ff feed 	bl	80074be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80076e4:	2201      	movs	r2, #1
 80076e6:	2101      	movs	r1, #1
 80076e8:	4886      	ldr	r0, [pc, #536]	; (8007904 <MX_GPIO_Init+0x39c>)
 80076ea:	f7ff fee8 	bl	80074be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80076ee:	2201      	movs	r2, #1
 80076f0:	2102      	movs	r1, #2
 80076f2:	4884      	ldr	r0, [pc, #528]	; (8007904 <MX_GPIO_Init+0x39c>)
 80076f4:	f7ff fee3 	bl	80074be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 80076f8:	2201      	movs	r2, #1
 80076fa:	2104      	movs	r1, #4
 80076fc:	487d      	ldr	r0, [pc, #500]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80076fe:	f7ff fede 	bl	80074be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007702:	2200      	movs	r2, #0
 8007704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007708:	487a      	ldr	r0, [pc, #488]	; (80078f4 <MX_GPIO_Init+0x38c>)
 800770a:	f7ff fea9 	bl	8007460 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800770e:	2200      	movs	r2, #0
 8007710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007714:	4877      	ldr	r0, [pc, #476]	; (80078f4 <MX_GPIO_Init+0x38c>)
 8007716:	f7ff fea3 	bl	8007460 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800771a:	2200      	movs	r2, #0
 800771c:	2101      	movs	r1, #1
 800771e:	4879      	ldr	r0, [pc, #484]	; (8007904 <MX_GPIO_Init+0x39c>)
 8007720:	f7ff fe9e 	bl	8007460 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007724:	2200      	movs	r2, #0
 8007726:	2102      	movs	r1, #2
 8007728:	4876      	ldr	r0, [pc, #472]	; (8007904 <MX_GPIO_Init+0x39c>)
 800772a:	f7ff fe99 	bl	8007460 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 800772e:	2200      	movs	r2, #0
 8007730:	2104      	movs	r1, #4
 8007732:	4870      	ldr	r0, [pc, #448]	; (80078f4 <MX_GPIO_Init+0x38c>)
 8007734:	f7ff fe94 	bl	8007460 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007738:	2308      	movs	r3, #8
 800773a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800773c:	2301      	movs	r3, #1
 800773e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007744:	2300      	movs	r3, #0
 8007746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007748:	2302      	movs	r3, #2
 800774a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800774c:	1d3b      	adds	r3, r7, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4868      	ldr	r0, [pc, #416]	; (80078f4 <MX_GPIO_Init+0x38c>)
 8007752:	f006 f81a 	bl	800d78a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8007756:	2308      	movs	r3, #8
 8007758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800775a:	2301      	movs	r3, #1
 800775c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007762:	2300      	movs	r3, #0
 8007764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800776a:	1d3b      	adds	r3, r7, #4
 800776c:	4619      	mov	r1, r3
 800776e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007772:	f006 f80a 	bl	800d78a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8007776:	2310      	movs	r3, #16
 8007778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800777a:	2301      	movs	r3, #1
 800777c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	4619      	mov	r1, r3
 800778e:	4859      	ldr	r0, [pc, #356]	; (80078f4 <MX_GPIO_Init+0x38c>)
 8007790:	f005 fffb 	bl	800d78a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8007794:	2320      	movs	r3, #32
 8007796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007798:	2301      	movs	r3, #1
 800779a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80077a8:	1d3b      	adds	r3, r7, #4
 80077aa:	4619      	mov	r1, r3
 80077ac:	4851      	ldr	r0, [pc, #324]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80077ae:	f005 ffec 	bl	800d78a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80077b2:	2301      	movs	r3, #1
 80077b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077b6:	2301      	movs	r3, #1
 80077b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80077c6:	1d3b      	adds	r3, r7, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	484b      	ldr	r0, [pc, #300]	; (80078f8 <MX_GPIO_Init+0x390>)
 80077cc:	f005 ffdd 	bl	800d78a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80077d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077d6:	2301      	movs	r3, #1
 80077d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80077e6:	1d3b      	adds	r3, r7, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4842      	ldr	r0, [pc, #264]	; (80078f4 <MX_GPIO_Init+0x38c>)
 80077ec:	f005 ffcd 	bl	800d78a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80077f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077f6:	2301      	movs	r3, #1
 80077f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007806:	1d3b      	adds	r3, r7, #4
 8007808:	4619      	mov	r1, r3
 800780a:	483a      	ldr	r0, [pc, #232]	; (80078f4 <MX_GPIO_Init+0x38c>)
 800780c:	f005 ffbd 	bl	800d78a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007810:	2340      	movs	r3, #64	; 0x40
 8007812:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007814:	2301      	movs	r3, #1
 8007816:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007818:	2303      	movs	r3, #3
 800781a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800781c:	2300      	movs	r3, #0
 800781e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007824:	1d3b      	adds	r3, r7, #4
 8007826:	4619      	mov	r1, r3
 8007828:	4833      	ldr	r0, [pc, #204]	; (80078f8 <MX_GPIO_Init+0x390>)
 800782a:	f005 ffae 	bl	800d78a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800782e:	2380      	movs	r3, #128	; 0x80
 8007830:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007832:	2301      	movs	r3, #1
 8007834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007836:	2303      	movs	r3, #3
 8007838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800783a:	2300      	movs	r3, #0
 800783c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007842:	1d3b      	adds	r3, r7, #4
 8007844:	4619      	mov	r1, r3
 8007846:	482c      	ldr	r0, [pc, #176]	; (80078f8 <MX_GPIO_Init+0x390>)
 8007848:	f005 ff9f 	bl	800d78a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 800784c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007852:	2301      	movs	r3, #1
 8007854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007856:	2303      	movs	r3, #3
 8007858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800785e:	2300      	movs	r3, #0
 8007860:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007862:	1d3b      	adds	r3, r7, #4
 8007864:	4619      	mov	r1, r3
 8007866:	4824      	ldr	r0, [pc, #144]	; (80078f8 <MX_GPIO_Init+0x390>)
 8007868:	f005 ff8f 	bl	800d78a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800786c:	f7ff fd3e 	bl	80072ec <__NVIC_GetPriorityGrouping>
 8007870:	4603      	mov	r3, r0
 8007872:	2200      	movs	r2, #0
 8007874:	2100      	movs	r1, #0
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff fd8e 	bl	8007398 <NVIC_EncodePriority>
 800787c:	4603      	mov	r3, r0
 800787e:	4619      	mov	r1, r3
 8007880:	2006      	movs	r0, #6
 8007882:	f7ff fd5f 	bl	8007344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007886:	2006      	movs	r0, #6
 8007888:	f7ff fd3e 	bl	8007308 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800788c:	f7ff fd2e 	bl	80072ec <__NVIC_GetPriorityGrouping>
 8007890:	4603      	mov	r3, r0
 8007892:	2200      	movs	r2, #0
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fd7e 	bl	8007398 <NVIC_EncodePriority>
 800789c:	4603      	mov	r3, r0
 800789e:	4619      	mov	r1, r3
 80078a0:	2007      	movs	r0, #7
 80078a2:	f7ff fd4f 	bl	8007344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80078a6:	2007      	movs	r0, #7
 80078a8:	f7ff fd2e 	bl	8007308 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80078ac:	f7ff fd1e 	bl	80072ec <__NVIC_GetPriorityGrouping>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2200      	movs	r2, #0
 80078b4:	2100      	movs	r1, #0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff fd6e 	bl	8007398 <NVIC_EncodePriority>
 80078bc:	4603      	mov	r3, r0
 80078be:	4619      	mov	r1, r3
 80078c0:	2008      	movs	r0, #8
 80078c2:	f7ff fd3f 	bl	8007344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80078c6:	2008      	movs	r0, #8
 80078c8:	f7ff fd1e 	bl	8007308 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80078cc:	f7ff fd0e 	bl	80072ec <__NVIC_GetPriorityGrouping>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff fd5e 	bl	8007398 <NVIC_EncodePriority>
 80078dc:	4603      	mov	r3, r0
 80078de:	4619      	mov	r1, r3
 80078e0:	2028      	movs	r0, #40	; 0x28
 80078e2:	f7ff fd2f 	bl	8007344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80078e6:	2028      	movs	r0, #40	; 0x28
 80078e8:	f7ff fd0e 	bl	8007308 <__NVIC_EnableIRQ>

}
 80078ec:	bf00      	nop
 80078ee:	3728      	adds	r7, #40	; 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	e009      	b.n	8007908 <MX_GPIO_Init+0x3a0>
 80078f4:	48000800 	.word	0x48000800
 80078f8:	48000400 	.word	0x48000400
 80078fc:	0f000003 	.word	0x0f000003
 8007900:	f0000003 	.word	0xf0000003
 8007904:	48001400 	.word	0x48001400
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop

0800790c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007914:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007918:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d013      	beq.n	800794c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007924:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007928:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800792c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007934:	e000      	b.n	8007938 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007936:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007938:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0f9      	beq.n	8007936 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007942:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800794c:	687b      	ldr	r3, [r7, #4]
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b086      	sub	sp, #24
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
  int i=0;
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	e009      	b.n	8007984 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	60ba      	str	r2, [r7, #8]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff ffc7 	bl	800790c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	3301      	adds	r3, #1
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	dbf1      	blt.n	8007970 <_write+0x16>
  return len;
 800798c:	687b      	ldr	r3, [r7, #4]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800799c:	f000 feb5 	bl	800870a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80079a0:	f000 f86c 	bl	8007a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80079a4:	f7ff fde0 	bl	8007568 <MX_GPIO_Init>
  MX_DMA_Init();
 80079a8:	f7ff fc66 	bl	8007278 <MX_DMA_Init>
  MX_DAC1_Init();
 80079ac:	f7ff fb16 	bl	8006fdc <MX_DAC1_Init>
  MX_DAC2_Init();
 80079b0:	f7ff fb5e 	bl	8007070 <MX_DAC2_Init>
  MX_ADC1_Init();
 80079b4:	f7ff f9d4 	bl	8006d60 <MX_ADC1_Init>
  MX_COMP1_Init();
 80079b8:	f7ff fab6 	bl	8006f28 <MX_COMP1_Init>
  MX_TIM2_Init();
 80079bc:	f000 fbaa 	bl	8008114 <MX_TIM2_Init>
  MX_SPI3_Init();
 80079c0:	f000 f908 	bl	8007bd4 <MX_SPI3_Init>
  MX_RNG_Init();
 80079c4:	f000 f8f8 	bl	8007bb8 <MX_RNG_Init>
  MX_TIM1_Init();
 80079c8:	f000 fb34 	bl	8008034 <MX_TIM1_Init>
  MX_TIM8_Init();
 80079cc:	f000 fc8a 	bl	80082e4 <MX_TIM8_Init>
  MX_TIM16_Init();
 80079d0:	f000 fd42 	bl	8008458 <MX_TIM16_Init>
  MX_TIM15_Init();
 80079d4:	f000 fcee 	bl	80083b4 <MX_TIM15_Init>
  MX_TIM5_Init();
 80079d8:	f000 fc36 	bl	8008248 <MX_TIM5_Init>
  MX_TIM3_Init();
 80079dc:	f000 fbe6 	bl	80081ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 80079e0:	f7fd f94c 	bl	8004c7c <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 80079e4:	f7fd fe14 	bl	8005610 <SM_Init>
  FuncO_Init();
 80079e8:	f7fd fb30 	bl	800504c <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 80079ec:	2000      	movs	r0, #0
 80079ee:	f7fd fbe5 	bl	80051bc <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 80079f2:	2000      	movs	r0, #0
 80079f4:	f7fd fc3c 	bl	8005270 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_MAX_OUTPUT_ARR;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80079f8:	2110      	movs	r1, #16
 80079fa:	481b      	ldr	r0, [pc, #108]	; (8007a68 <main+0xd0>)
 80079fc:	f002 fb89 	bl	800a112 <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <main+0xd4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <main+0xd4>)
 8007a06:	f043 0301 	orr.w	r3, r3, #1
 8007a0a:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8007a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a10:	f7fd fab2 	bl	8004f78 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8007a14:	2201      	movs	r2, #1
 8007a16:	2108      	movs	r1, #8
 8007a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a1c:	f003 fbc4 	bl	800b1a8 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 8007a20:	2059      	movs	r0, #89	; 0x59
 8007a22:	f7fd fef1 	bl	8005808 <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007a26:	2200      	movs	r2, #0
 8007a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a2c:	4810      	ldr	r0, [pc, #64]	; (8007a70 <main+0xd8>)
 8007a2e:	f003 fbbb 	bl	800b1a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007a32:	2200      	movs	r2, #0
 8007a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a38:	480d      	ldr	r0, [pc, #52]	; (8007a70 <main+0xd8>)
 8007a3a:	f003 fbb5 	bl	800b1a8 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007a3e:	480d      	ldr	r0, [pc, #52]	; (8007a74 <main+0xdc>)
 8007a40:	f004 fcac 	bl	800c39c <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007a44:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <main+0xe0>)
 8007a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a4a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <main+0xe0>)
 8007a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a52:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8007a54:	f7f9 f916 	bl	8000c84 <DM_Init>
  DM_PostInit();
 8007a58:	f7f9 f922 	bl	8000ca0 <DM_PostInit>

  IM_Init();
 8007a5c:	f7fc ff5c 	bl	8004918 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007a60:	f7fb ff2c 	bl	80038bc <EM_ProcessEvent>
 8007a64:	e7fc      	b.n	8007a60 <main+0xc8>
 8007a66:	bf00      	nop
 8007a68:	20002618 	.word	0x20002618
 8007a6c:	40013400 	.word	0x40013400
 8007a70:	48000800 	.word	0x48000800
 8007a74:	20002880 	.word	0x20002880
 8007a78:	40001000 	.word	0x40001000

08007a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b0a8      	sub	sp, #160	; 0xa0
 8007a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007a86:	2238      	movs	r2, #56	; 0x38
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f006 feda 	bl	800e844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	605a      	str	r2, [r3, #4]
 8007a9a:	609a      	str	r2, [r3, #8]
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	2254      	movs	r2, #84	; 0x54
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f006 fecc 	bl	800e844 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007aac:	2000      	movs	r0, #0
 8007aae:	f003 fb93 	bl	800b1d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007ab2:	2322      	movs	r3, #34	; 0x22
 8007ab4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007abc:	2340      	movs	r3, #64	; 0x40
 8007abe:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007acc:	2302      	movs	r3, #2
 8007ace:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007ad8:	232a      	movs	r3, #42	; 0x2a
 8007ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8007ade:	231e      	movs	r3, #30
 8007ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007aea:	2302      	movs	r3, #2
 8007aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007af0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007af4:	4618      	mov	r0, r3
 8007af6:	f003 fc13 	bl	800b320 <HAL_RCC_OscConfig>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007b00:	f000 f82a 	bl	8007b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b04:	230f      	movs	r3, #15
 8007b06:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007b10:	2300      	movs	r3, #0
 8007b12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b14:	2300      	movs	r3, #0
 8007b16:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007b18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007b1c:	2108      	movs	r1, #8
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f003 ff16 	bl	800b950 <HAL_RCC_ClockConfig>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007b2a:	f000 f815 	bl	8007b58 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007b2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007b32:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007b34:	2300      	movs	r3, #0
 8007b36:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007b38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b3e:	463b      	mov	r3, r7
 8007b40:	4618      	mov	r0, r3
 8007b42:	f004 f8f5 	bl	800bd30 <HAL_RCCEx_PeriphCLKConfig>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007b4c:	f000 f804 	bl	8007b58 <Error_Handler>
  }
}
 8007b50:	bf00      	nop
 8007b52:	37a0      	adds	r7, #160	; 0xa0
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007b5c:	bf00      	nop
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f043 0204 	orr.w	r2, r3, #4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
	...

08007b88 <LL_AHB2_GRP1_EnableClock>:
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007b90:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b94:	4907      	ldr	r1, [pc, #28]	; (8007bb4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	40021000 	.word	0x40021000

08007bb8 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007bbc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007bc0:	f7ff ffe2 	bl	8007b88 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007bc4:	4802      	ldr	r0, [pc, #8]	; (8007bd0 <MX_RNG_Init+0x18>)
 8007bc6:	f7ff ffce 	bl	8007b66 <LL_RNG_Enable>

}
 8007bca:	bf00      	nop
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	50060800 	.word	0x50060800

08007bd4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007bd8:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007bda:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <MX_SPI3_Init+0x78>)
 8007bdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007bde:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007be4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007be6:	4b18      	ldr	r3, [pc, #96]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007bec:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007bee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007bf2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bf4:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007bfa:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007c00:	4b11      	ldr	r3, [pc, #68]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c06:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007c08:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007c0a:	2210      	movs	r2, #16
 8007c0c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007c0e:	4b0e      	ldr	r3, [pc, #56]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007c14:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c1a:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007c20:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007c22:	2207      	movs	r2, #7
 8007c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007c26:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007c2e:	2208      	movs	r2, #8
 8007c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007c32:	4805      	ldr	r0, [pc, #20]	; (8007c48 <MX_SPI3_Init+0x74>)
 8007c34:	f004 fac8 	bl	800c1c8 <HAL_SPI_Init>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007c3e:	f7ff ff8b 	bl	8007b58 <Error_Handler>
  }

}
 8007c42:	bf00      	nop
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200026ec 	.word	0x200026ec
 8007c4c:	40003c00 	.word	0x40003c00

08007c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08a      	sub	sp, #40	; 0x28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c58:	f107 0314 	add.w	r3, r7, #20
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	605a      	str	r2, [r3, #4]
 8007c62:	609a      	str	r2, [r3, #8]
 8007c64:	60da      	str	r2, [r3, #12]
 8007c66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <HAL_SPI_MspInit+0x7c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d128      	bne.n	8007cc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007c72:	4b17      	ldr	r3, [pc, #92]	; (8007cd0 <HAL_SPI_MspInit+0x80>)
 8007c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c76:	4a16      	ldr	r2, [pc, #88]	; (8007cd0 <HAL_SPI_MspInit+0x80>)
 8007c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c7e:	4b14      	ldr	r3, [pc, #80]	; (8007cd0 <HAL_SPI_MspInit+0x80>)
 8007c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c86:	613b      	str	r3, [r7, #16]
 8007c88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c8a:	4b11      	ldr	r3, [pc, #68]	; (8007cd0 <HAL_SPI_MspInit+0x80>)
 8007c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8e:	4a10      	ldr	r2, [pc, #64]	; (8007cd0 <HAL_SPI_MspInit+0x80>)
 8007c90:	f043 0304 	orr.w	r3, r3, #4
 8007c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c96:	4b0e      	ldr	r3, [pc, #56]	; (8007cd0 <HAL_SPI_MspInit+0x80>)
 8007c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007ca2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007cb4:	2306      	movs	r3, #6
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cb8:	f107 0314 	add.w	r3, r7, #20
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4805      	ldr	r0, [pc, #20]	; (8007cd4 <HAL_SPI_MspInit+0x84>)
 8007cc0:	f003 f8f0 	bl	800aea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3728      	adds	r7, #40	; 0x28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	40003c00 	.word	0x40003c00
 8007cd0:	40021000 	.word	0x40021000
 8007cd4:	48000800 	.word	0x48000800

08007cd8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	4a04      	ldr	r2, [pc, #16]	; (8007cf4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ce6:	6093      	str	r3, [r2, #8]
}
 8007ce8:	bf00      	nop
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40007000 	.word	0x40007000

08007cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <HAL_MspInit+0x44>)
 8007d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d02:	4a0e      	ldr	r2, [pc, #56]	; (8007d3c <HAL_MspInit+0x44>)
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	6613      	str	r3, [r2, #96]	; 0x60
 8007d0a:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <HAL_MspInit+0x44>)
 8007d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	607b      	str	r3, [r7, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d16:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <HAL_MspInit+0x44>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	4a08      	ldr	r2, [pc, #32]	; (8007d3c <HAL_MspInit+0x44>)
 8007d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d20:	6593      	str	r3, [r2, #88]	; 0x58
 8007d22:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <HAL_MspInit+0x44>)
 8007d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007d2e:	f7ff ffd3 	bl	8007cd8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40021000 	.word	0x40021000

08007d40 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007d48:	4b07      	ldr	r3, [pc, #28]	; (8007d68 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007d4a:	695a      	ldr	r2, [r3, #20]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d101      	bne.n	8007d5a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e000      	b.n	8007d5c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	40010400 	.word	0x40010400

08007d6c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007d74:	4a04      	ldr	r2, [pc, #16]	; (8007d88 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6153      	str	r3, [r2, #20]
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40010400 	.word	0x40010400

08007d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007d90:	bf00      	nop
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d9e:	e7fe      	b.n	8007d9e <HardFault_Handler+0x4>

08007da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007da4:	e7fe      	b.n	8007da4 <MemManage_Handler+0x4>

08007da6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007da6:	b480      	push	{r7}
 8007da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007daa:	e7fe      	b.n	8007daa <BusFault_Handler+0x4>

08007dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007db0:	e7fe      	b.n	8007db0 <UsageFault_Handler+0x4>

08007db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007db2:	b480      	push	{r7}
 8007db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007db6:	bf00      	nop
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007dc4:	bf00      	nop
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007dd2:	bf00      	nop
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007de0:	f000 fce6 	bl	80087b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007de4:	bf00      	nop
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007dec:	f7fc fe4c 	bl	8004a88 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007df0:	2001      	movs	r0, #1
 8007df2:	f7ff ffa5 	bl	8007d40 <LL_EXTI_IsActiveFlag_0_31>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007dfc:	2001      	movs	r0, #1
 8007dfe:	f7ff ffb5 	bl	8007d6c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007e02:	bf00      	nop
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007e0a:	f7fc fe63 	bl	8004ad4 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007e0e:	2002      	movs	r0, #2
 8007e10:	f7ff ff96 	bl	8007d40 <LL_EXTI_IsActiveFlag_0_31>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007e1a:	2002      	movs	r0, #2
 8007e1c:	f7ff ffa6 	bl	8007d6c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007e28:	f7fc fe7a 	bl	8004b20 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007e2c:	2004      	movs	r0, #4
 8007e2e:	f7ff ff87 	bl	8007d40 <LL_EXTI_IsActiveFlag_0_31>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007e38:	2004      	movs	r0, #4
 8007e3a:	f7ff ff97 	bl	8007d6c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007e3e:	bf00      	nop
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007e48:	4802      	ldr	r0, [pc, #8]	; (8007e54 <DMA1_Channel1_IRQHandler+0x10>)
 8007e4a:	f002 fedb 	bl	800ac04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007e4e:	bf00      	nop
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20002580 	.word	0x20002580

08007e58 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007e5c:	4802      	ldr	r0, [pc, #8]	; (8007e68 <DMA1_Channel2_IRQHandler+0x10>)
 8007e5e:	f002 fed1 	bl	800ac04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007e62:	bf00      	nop
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	2000262c 	.word	0x2000262c

08007e6c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007e70:	4802      	ldr	r0, [pc, #8]	; (8007e7c <DMA1_Channel3_IRQHandler+0x10>)
 8007e72:	f002 fec7 	bl	800ac04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007e76:	bf00      	nop
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	2000268c 	.word	0x2000268c

08007e80 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007e84:	f7f8 ff2a 	bl	8000cdc <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007e88:	f7fc fe70 	bl	8004b6c <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007e8c:	4803      	ldr	r0, [pc, #12]	; (8007e9c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007e8e:	f004 fbe6 	bl	800c65e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007e92:	4803      	ldr	r0, [pc, #12]	; (8007ea0 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007e94:	f004 fbe3 	bl	800c65e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007e98:	bf00      	nop
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20002880 	.word	0x20002880
 8007ea0:	2000279c 	.word	0x2000279c

08007ea4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007ea8:	4802      	ldr	r0, [pc, #8]	; (8007eb4 <TIM3_IRQHandler+0x10>)
 8007eaa:	f004 fbd8 	bl	800c65e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007eae:	bf00      	nop
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20002834 	.word	0x20002834

08007eb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007ebc:	f7fc fd94 	bl	80049e8 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007ec0:	f7fc fdba 	bl	8004a38 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007ec4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ec8:	f7ff ff3a 	bl	8007d40 <LL_EXTI_IsActiveFlag_0_31>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007ed2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ed6:	f7ff ff49 	bl	8007d6c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007eda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007ede:	f7ff ff2f 	bl	8007d40 <LL_EXTI_IsActiveFlag_0_31>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007ee8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007eec:	f7ff ff3e 	bl	8007d6c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007ef0:	bf00      	nop
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007ef8:	f7fc fd1e 	bl	8004938 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007efc:	4802      	ldr	r0, [pc, #8]	; (8007f08 <TIM5_IRQHandler+0x14>)
 8007efe:	f004 fbae 	bl	800c65e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007f02:	bf00      	nop
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	200027e8 	.word	0x200027e8

08007f0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	e00a      	b.n	8007f34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007f1e:	f3af 8000 	nop.w
 8007f22:	4601      	mov	r1, r0
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	60ba      	str	r2, [r7, #8]
 8007f2a:	b2ca      	uxtb	r2, r1
 8007f2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	3301      	adds	r3, #1
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	dbf0      	blt.n	8007f1e <_read+0x12>
	}

return len;
 8007f3c:	687b      	ldr	r3, [r7, #4]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
	return -1;
 8007f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f6e:	605a      	str	r2, [r3, #4]
	return 0;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <_isatty>:

int _isatty(int file)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
	return 1;
 8007f86:	2301      	movs	r3, #1
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
	return 0;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
	...

08007fb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007fb8:	4b11      	ldr	r3, [pc, #68]	; (8008000 <_sbrk+0x50>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <_sbrk+0x16>
		heap_end = &end;
 8007fc0:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <_sbrk+0x50>)
 8007fc2:	4a10      	ldr	r2, [pc, #64]	; (8008004 <_sbrk+0x54>)
 8007fc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007fc6:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <_sbrk+0x50>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007fcc:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <_sbrk+0x50>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	466a      	mov	r2, sp
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d907      	bls.n	8007fea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007fda:	f006 fc09 	bl	800e7f0 <__errno>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	230c      	movs	r3, #12
 8007fe2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fe8:	e006      	b.n	8007ff8 <_sbrk+0x48>
	}

	heap_end += incr;
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <_sbrk+0x50>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	4a03      	ldr	r2, [pc, #12]	; (8008000 <_sbrk+0x50>)
 8007ff4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	20001f2c 	.word	0x20001f2c
 8008004:	20002970 	.word	0x20002970

08008008 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800800c:	4b08      	ldr	r3, [pc, #32]	; (8008030 <SystemInit+0x28>)
 800800e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008012:	4a07      	ldr	r2, [pc, #28]	; (8008030 <SystemInit+0x28>)
 8008014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800801c:	4b04      	ldr	r3, [pc, #16]	; (8008030 <SystemInit+0x28>)
 800801e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008022:	609a      	str	r2, [r3, #8]
#endif
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	e000ed00 	.word	0xe000ed00

08008034 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b09a      	sub	sp, #104	; 0x68
 8008038:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800803a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800803e:	2224      	movs	r2, #36	; 0x24
 8008040:	2100      	movs	r1, #0
 8008042:	4618      	mov	r0, r3
 8008044:	f006 fbfe 	bl	800e844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008048:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008054:	1d3b      	adds	r3, r7, #4
 8008056:	2234      	movs	r2, #52	; 0x34
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f006 fbf2 	bl	800e844 <memset>

  htim1.Instance = TIM1;
 8008060:	4b2a      	ldr	r3, [pc, #168]	; (800810c <MX_TIM1_Init+0xd8>)
 8008062:	4a2b      	ldr	r2, [pc, #172]	; (8008110 <MX_TIM1_Init+0xdc>)
 8008064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <MX_TIM1_Init+0xd8>)
 8008068:	2200      	movs	r2, #0
 800806a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800806c:	4b27      	ldr	r3, [pc, #156]	; (800810c <MX_TIM1_Init+0xd8>)
 800806e:	2240      	movs	r2, #64	; 0x40
 8008070:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8008072:	4b26      	ldr	r3, [pc, #152]	; (800810c <MX_TIM1_Init+0xd8>)
 8008074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800807a:	4b24      	ldr	r3, [pc, #144]	; (800810c <MX_TIM1_Init+0xd8>)
 800807c:	2200      	movs	r2, #0
 800807e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008080:	4b22      	ldr	r3, [pc, #136]	; (800810c <MX_TIM1_Init+0xd8>)
 8008082:	2200      	movs	r2, #0
 8008084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008086:	4b21      	ldr	r3, [pc, #132]	; (800810c <MX_TIM1_Init+0xd8>)
 8008088:	2280      	movs	r2, #128	; 0x80
 800808a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800808c:	2303      	movs	r3, #3
 800808e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008090:	2300      	movs	r3, #0
 8008092:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008094:	2301      	movs	r3, #1
 8008096:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008098:	2300      	movs	r3, #0
 800809a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80080a0:	2300      	movs	r3, #0
 80080a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80080a4:	2301      	movs	r3, #1
 80080a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80080a8:	2300      	movs	r3, #0
 80080aa:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80080b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080b4:	4619      	mov	r1, r3
 80080b6:	4815      	ldr	r0, [pc, #84]	; (800810c <MX_TIM1_Init+0xd8>)
 80080b8:	f004 fa2b 	bl	800c512 <HAL_TIM_Encoder_Init>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80080c2:	f7ff fd49 	bl	8007b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80080c6:	2320      	movs	r3, #32
 80080c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80080ca:	2300      	movs	r3, #0
 80080cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80080d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80080d6:	4619      	mov	r1, r3
 80080d8:	480c      	ldr	r0, [pc, #48]	; (800810c <MX_TIM1_Init+0xd8>)
 80080da:	f004 fea5 	bl	800ce28 <HAL_TIMEx_MasterConfigSynchronization>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80080e4:	f7ff fd38 	bl	8007b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80080e8:	2300      	movs	r3, #0
 80080ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80080ec:	2300      	movs	r3, #0
 80080ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80080f0:	1d3b      	adds	r3, r7, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	4805      	ldr	r0, [pc, #20]	; (800810c <MX_TIM1_Init+0xd8>)
 80080f6:	f004 ff2d 	bl	800cf54 <HAL_TIMEx_ConfigBreakDeadTime>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8008100:	f7ff fd2a 	bl	8007b58 <Error_Handler>
  }

}
 8008104:	bf00      	nop
 8008106:	3768      	adds	r7, #104	; 0x68
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20002880 	.word	0x20002880
 8008110:	40012c00 	.word	0x40012c00

08008114 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800811a:	f107 0310 	add.w	r3, r7, #16
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	605a      	str	r2, [r3, #4]
 8008124:	609a      	str	r2, [r3, #8]
 8008126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008128:	1d3b      	adds	r3, r7, #4
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	605a      	str	r2, [r3, #4]
 8008130:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8008132:	4b1d      	ldr	r3, [pc, #116]	; (80081a8 <MX_TIM2_Init+0x94>)
 8008134:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008138:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <MX_TIM2_Init+0x94>)
 800813c:	2200      	movs	r2, #0
 800813e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008140:	4b19      	ldr	r3, [pc, #100]	; (80081a8 <MX_TIM2_Init+0x94>)
 8008142:	2200      	movs	r2, #0
 8008144:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8008146:	4b18      	ldr	r3, [pc, #96]	; (80081a8 <MX_TIM2_Init+0x94>)
 8008148:	2201      	movs	r2, #1
 800814a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800814c:	4b16      	ldr	r3, [pc, #88]	; (80081a8 <MX_TIM2_Init+0x94>)
 800814e:	2200      	movs	r2, #0
 8008150:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008152:	4b15      	ldr	r3, [pc, #84]	; (80081a8 <MX_TIM2_Init+0x94>)
 8008154:	2280      	movs	r2, #128	; 0x80
 8008156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008158:	4813      	ldr	r0, [pc, #76]	; (80081a8 <MX_TIM2_Init+0x94>)
 800815a:	f004 f8c7 	bl	800c2ec <HAL_TIM_Base_Init>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008164:	f7ff fcf8 	bl	8007b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800816c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800816e:	f107 0310 	add.w	r3, r7, #16
 8008172:	4619      	mov	r1, r3
 8008174:	480c      	ldr	r0, [pc, #48]	; (80081a8 <MX_TIM2_Init+0x94>)
 8008176:	f004 fbf1 	bl	800c95c <HAL_TIM_ConfigClockSource>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008180:	f7ff fcea 	bl	8007b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008184:	2320      	movs	r3, #32
 8008186:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800818c:	1d3b      	adds	r3, r7, #4
 800818e:	4619      	mov	r1, r3
 8008190:	4805      	ldr	r0, [pc, #20]	; (80081a8 <MX_TIM2_Init+0x94>)
 8008192:	f004 fe49 	bl	800ce28 <HAL_TIMEx_MasterConfigSynchronization>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800819c:	f7ff fcdc 	bl	8007b58 <Error_Handler>
  }

}
 80081a0:	bf00      	nop
 80081a2:	3720      	adds	r7, #32
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	200028cc 	.word	0x200028cc

080081ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081b2:	f107 0310 	add.w	r3, r7, #16
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	605a      	str	r2, [r3, #4]
 80081bc:	609a      	str	r2, [r3, #8]
 80081be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081c0:	1d3b      	adds	r3, r7, #4
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	605a      	str	r2, [r3, #4]
 80081c8:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80081ca:	4b1d      	ldr	r3, [pc, #116]	; (8008240 <MX_TIM3_Init+0x94>)
 80081cc:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <MX_TIM3_Init+0x98>)
 80081ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80081d0:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <MX_TIM3_Init+0x94>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80081d6:	4b1a      	ldr	r3, [pc, #104]	; (8008240 <MX_TIM3_Init+0x94>)
 80081d8:	2210      	movs	r2, #16
 80081da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80081dc:	4b18      	ldr	r3, [pc, #96]	; (8008240 <MX_TIM3_Init+0x94>)
 80081de:	2201      	movs	r2, #1
 80081e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80081e2:	4b17      	ldr	r3, [pc, #92]	; (8008240 <MX_TIM3_Init+0x94>)
 80081e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081ea:	4b15      	ldr	r3, [pc, #84]	; (8008240 <MX_TIM3_Init+0x94>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80081f0:	4813      	ldr	r0, [pc, #76]	; (8008240 <MX_TIM3_Init+0x94>)
 80081f2:	f004 f87b 	bl	800c2ec <HAL_TIM_Base_Init>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80081fc:	f7ff fcac 	bl	8007b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008204:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008206:	f107 0310 	add.w	r3, r7, #16
 800820a:	4619      	mov	r1, r3
 800820c:	480c      	ldr	r0, [pc, #48]	; (8008240 <MX_TIM3_Init+0x94>)
 800820e:	f004 fba5 	bl	800c95c <HAL_TIM_ConfigClockSource>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8008218:	f7ff fc9e 	bl	8007b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800821c:	2300      	movs	r3, #0
 800821e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	4619      	mov	r1, r3
 8008228:	4805      	ldr	r0, [pc, #20]	; (8008240 <MX_TIM3_Init+0x94>)
 800822a:	f004 fdfd 	bl	800ce28 <HAL_TIMEx_MasterConfigSynchronization>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008234:	f7ff fc90 	bl	8007b58 <Error_Handler>
  }

}
 8008238:	bf00      	nop
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20002834 	.word	0x20002834
 8008244:	40000400 	.word	0x40000400

08008248 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800824e:	f107 0310 	add.w	r3, r7, #16
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	605a      	str	r2, [r3, #4]
 8008258:	609a      	str	r2, [r3, #8]
 800825a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800825c:	1d3b      	adds	r3, r7, #4
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8008266:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <MX_TIM5_Init+0x94>)
 8008268:	4a1d      	ldr	r2, [pc, #116]	; (80082e0 <MX_TIM5_Init+0x98>)
 800826a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <MX_TIM5_Init+0x94>)
 800826e:	2200      	movs	r2, #0
 8008270:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008272:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <MX_TIM5_Init+0x94>)
 8008274:	2200      	movs	r2, #0
 8008276:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008278:	4b18      	ldr	r3, [pc, #96]	; (80082dc <MX_TIM5_Init+0x94>)
 800827a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800827e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008280:	4b16      	ldr	r3, [pc, #88]	; (80082dc <MX_TIM5_Init+0x94>)
 8008282:	2200      	movs	r2, #0
 8008284:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008286:	4b15      	ldr	r3, [pc, #84]	; (80082dc <MX_TIM5_Init+0x94>)
 8008288:	2280      	movs	r2, #128	; 0x80
 800828a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800828c:	4813      	ldr	r0, [pc, #76]	; (80082dc <MX_TIM5_Init+0x94>)
 800828e:	f004 f82d 	bl	800c2ec <HAL_TIM_Base_Init>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008298:	f7ff fc5e 	bl	8007b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800829c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80082a2:	f107 0310 	add.w	r3, r7, #16
 80082a6:	4619      	mov	r1, r3
 80082a8:	480c      	ldr	r0, [pc, #48]	; (80082dc <MX_TIM5_Init+0x94>)
 80082aa:	f004 fb57 	bl	800c95c <HAL_TIM_ConfigClockSource>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80082b4:	f7ff fc50 	bl	8007b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082b8:	2300      	movs	r3, #0
 80082ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	4619      	mov	r1, r3
 80082c4:	4805      	ldr	r0, [pc, #20]	; (80082dc <MX_TIM5_Init+0x94>)
 80082c6:	f004 fdaf 	bl	800ce28 <HAL_TIMEx_MasterConfigSynchronization>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80082d0:	f7ff fc42 	bl	8007b58 <Error_Handler>
  }

}
 80082d4:	bf00      	nop
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200027e8 	.word	0x200027e8
 80082e0:	40000c00 	.word	0x40000c00

080082e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b094      	sub	sp, #80	; 0x50
 80082e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	609a      	str	r2, [r3, #8]
 80082f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	605a      	str	r2, [r3, #4]
 8008302:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008304:	463b      	mov	r3, r7
 8008306:	2234      	movs	r2, #52	; 0x34
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f006 fa9a 	bl	800e844 <memset>

  htim8.Instance = TIM8;
 8008310:	4b26      	ldr	r3, [pc, #152]	; (80083ac <MX_TIM8_Init+0xc8>)
 8008312:	4a27      	ldr	r2, [pc, #156]	; (80083b0 <MX_TIM8_Init+0xcc>)
 8008314:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008316:	4b25      	ldr	r3, [pc, #148]	; (80083ac <MX_TIM8_Init+0xc8>)
 8008318:	2200      	movs	r2, #0
 800831a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800831c:	4b23      	ldr	r3, [pc, #140]	; (80083ac <MX_TIM8_Init+0xc8>)
 800831e:	2200      	movs	r2, #0
 8008320:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008322:	4b22      	ldr	r3, [pc, #136]	; (80083ac <MX_TIM8_Init+0xc8>)
 8008324:	2201      	movs	r2, #1
 8008326:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008328:	4b20      	ldr	r3, [pc, #128]	; (80083ac <MX_TIM8_Init+0xc8>)
 800832a:	2200      	movs	r2, #0
 800832c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800832e:	4b1f      	ldr	r3, [pc, #124]	; (80083ac <MX_TIM8_Init+0xc8>)
 8008330:	2200      	movs	r2, #0
 8008332:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008334:	4b1d      	ldr	r3, [pc, #116]	; (80083ac <MX_TIM8_Init+0xc8>)
 8008336:	2280      	movs	r2, #128	; 0x80
 8008338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800833a:	481c      	ldr	r0, [pc, #112]	; (80083ac <MX_TIM8_Init+0xc8>)
 800833c:	f003 ffd6 	bl	800c2ec <HAL_TIM_Base_Init>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8008346:	f7ff fc07 	bl	8007b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800834a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800834e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008350:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008354:	4619      	mov	r1, r3
 8008356:	4815      	ldr	r0, [pc, #84]	; (80083ac <MX_TIM8_Init+0xc8>)
 8008358:	f004 fb00 	bl	800c95c <HAL_TIM_ConfigClockSource>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008362:	f7ff fbf9 	bl	8007b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008366:	2320      	movs	r3, #32
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800836a:	2300      	movs	r3, #0
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800836e:	2300      	movs	r3, #0
 8008370:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008372:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008376:	4619      	mov	r1, r3
 8008378:	480c      	ldr	r0, [pc, #48]	; (80083ac <MX_TIM8_Init+0xc8>)
 800837a:	f004 fd55 	bl	800ce28 <HAL_TIMEx_MasterConfigSynchronization>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008384:	f7ff fbe8 	bl	8007b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008388:	2300      	movs	r3, #0
 800838a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800838c:	2300      	movs	r3, #0
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008390:	463b      	mov	r3, r7
 8008392:	4619      	mov	r1, r3
 8008394:	4805      	ldr	r0, [pc, #20]	; (80083ac <MX_TIM8_Init+0xc8>)
 8008396:	f004 fddd 	bl	800cf54 <HAL_TIMEx_ConfigBreakDeadTime>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80083a0:	f7ff fbda 	bl	8007b58 <Error_Handler>
  }

}
 80083a4:	bf00      	nop
 80083a6:	3750      	adds	r7, #80	; 0x50
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20002750 	.word	0x20002750
 80083b0:	40013400 	.word	0x40013400

080083b4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083ba:	f107 0310 	add.w	r3, r7, #16
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	605a      	str	r2, [r3, #4]
 80083c4:	609a      	str	r2, [r3, #8]
 80083c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083c8:	1d3b      	adds	r3, r7, #4
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	605a      	str	r2, [r3, #4]
 80083d0:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80083d2:	4b1f      	ldr	r3, [pc, #124]	; (8008450 <MX_TIM15_Init+0x9c>)
 80083d4:	4a1f      	ldr	r2, [pc, #124]	; (8008454 <MX_TIM15_Init+0xa0>)
 80083d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80083d8:	4b1d      	ldr	r3, [pc, #116]	; (8008450 <MX_TIM15_Init+0x9c>)
 80083da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083de:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083e0:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <MX_TIM15_Init+0x9c>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <MX_TIM15_Init+0x9c>)
 80083e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083ec:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083ee:	4b18      	ldr	r3, [pc, #96]	; (8008450 <MX_TIM15_Init+0x9c>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80083f4:	4b16      	ldr	r3, [pc, #88]	; (8008450 <MX_TIM15_Init+0x9c>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083fa:	4b15      	ldr	r3, [pc, #84]	; (8008450 <MX_TIM15_Init+0x9c>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008400:	4813      	ldr	r0, [pc, #76]	; (8008450 <MX_TIM15_Init+0x9c>)
 8008402:	f003 ff73 	bl	800c2ec <HAL_TIM_Base_Init>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 800840c:	f7ff fba4 	bl	8007b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008416:	f107 0310 	add.w	r3, r7, #16
 800841a:	4619      	mov	r1, r3
 800841c:	480c      	ldr	r0, [pc, #48]	; (8008450 <MX_TIM15_Init+0x9c>)
 800841e:	f004 fa9d 	bl	800c95c <HAL_TIM_ConfigClockSource>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008428:	f7ff fb96 	bl	8007b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800842c:	2300      	movs	r3, #0
 800842e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	4619      	mov	r1, r3
 8008438:	4805      	ldr	r0, [pc, #20]	; (8008450 <MX_TIM15_Init+0x9c>)
 800843a:	f004 fcf5 	bl	800ce28 <HAL_TIMEx_MasterConfigSynchronization>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008444:	f7ff fb88 	bl	8007b58 <Error_Handler>
  }

}
 8008448:	bf00      	nop
 800844a:	3720      	adds	r7, #32
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	2000279c 	.word	0x2000279c
 8008454:	40014000 	.word	0x40014000

08008458 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800845c:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <MX_TIM16_Init+0x48>)
 800845e:	4a11      	ldr	r2, [pc, #68]	; (80084a4 <MX_TIM16_Init+0x4c>)
 8008460:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008462:	4b0f      	ldr	r3, [pc, #60]	; (80084a0 <MX_TIM16_Init+0x48>)
 8008464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008468:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <MX_TIM16_Init+0x48>)
 800846c:	2200      	movs	r2, #0
 800846e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <MX_TIM16_Init+0x48>)
 8008472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008476:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008478:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <MX_TIM16_Init+0x48>)
 800847a:	2200      	movs	r2, #0
 800847c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800847e:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <MX_TIM16_Init+0x48>)
 8008480:	2200      	movs	r2, #0
 8008482:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <MX_TIM16_Init+0x48>)
 8008486:	2200      	movs	r2, #0
 8008488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800848a:	4805      	ldr	r0, [pc, #20]	; (80084a0 <MX_TIM16_Init+0x48>)
 800848c:	f003 ff2e 	bl	800c2ec <HAL_TIM_Base_Init>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008496:	f7ff fb5f 	bl	8007b58 <Error_Handler>
  }

}
 800849a:	bf00      	nop
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20002918 	.word	0x20002918
 80084a4:	40014400 	.word	0x40014400

080084a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	; 0x28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	609a      	str	r2, [r3, #8]
 80084bc:	60da      	str	r2, [r3, #12]
 80084be:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <HAL_TIM_Encoder_MspInit+0x8c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d12f      	bne.n	800852a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80084ca:	4b1b      	ldr	r3, [pc, #108]	; (8008538 <HAL_TIM_Encoder_MspInit+0x90>)
 80084cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ce:	4a1a      	ldr	r2, [pc, #104]	; (8008538 <HAL_TIM_Encoder_MspInit+0x90>)
 80084d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80084d4:	6613      	str	r3, [r2, #96]	; 0x60
 80084d6:	4b18      	ldr	r3, [pc, #96]	; (8008538 <HAL_TIM_Encoder_MspInit+0x90>)
 80084d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084de:	613b      	str	r3, [r7, #16]
 80084e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084e2:	4b15      	ldr	r3, [pc, #84]	; (8008538 <HAL_TIM_Encoder_MspInit+0x90>)
 80084e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e6:	4a14      	ldr	r2, [pc, #80]	; (8008538 <HAL_TIM_Encoder_MspInit+0x90>)
 80084e8:	f043 0304 	orr.w	r3, r3, #4
 80084ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084ee:	4b12      	ldr	r3, [pc, #72]	; (8008538 <HAL_TIM_Encoder_MspInit+0x90>)
 80084f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80084fa:	2303      	movs	r3, #3
 80084fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084fe:	2302      	movs	r3, #2
 8008500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008506:	2300      	movs	r3, #0
 8008508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800850a:	2302      	movs	r3, #2
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800850e:	f107 0314 	add.w	r3, r7, #20
 8008512:	4619      	mov	r1, r3
 8008514:	4809      	ldr	r0, [pc, #36]	; (800853c <HAL_TIM_Encoder_MspInit+0x94>)
 8008516:	f002 fcc5 	bl	800aea4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800851a:	2200      	movs	r2, #0
 800851c:	2100      	movs	r1, #0
 800851e:	2018      	movs	r0, #24
 8008520:	f001 fda1 	bl	800a066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008524:	2018      	movs	r0, #24
 8008526:	f001 fdb8 	bl	800a09a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800852a:	bf00      	nop
 800852c:	3728      	adds	r7, #40	; 0x28
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	40012c00 	.word	0x40012c00
 8008538:	40021000 	.word	0x40021000
 800853c:	48000800 	.word	0x48000800

08008540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08e      	sub	sp, #56	; 0x38
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	605a      	str	r2, [r3, #4]
 8008552:	609a      	str	r2, [r3, #8]
 8008554:	60da      	str	r2, [r3, #12]
 8008556:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008560:	d10c      	bne.n	800857c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008562:	4b4f      	ldr	r3, [pc, #316]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 8008564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008566:	4a4e      	ldr	r2, [pc, #312]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 8008568:	f043 0301 	orr.w	r3, r3, #1
 800856c:	6593      	str	r3, [r2, #88]	; 0x58
 800856e:	4b4c      	ldr	r3, [pc, #304]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 8008570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	623b      	str	r3, [r7, #32]
 8008578:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800857a:	e08d      	b.n	8008698 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a48      	ldr	r2, [pc, #288]	; (80086a4 <HAL_TIM_Base_MspInit+0x164>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d114      	bne.n	80085b0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008586:	4b46      	ldr	r3, [pc, #280]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 8008588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858a:	4a45      	ldr	r2, [pc, #276]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 800858c:	f043 0302 	orr.w	r3, r3, #2
 8008590:	6593      	str	r3, [r2, #88]	; 0x58
 8008592:	4b43      	ldr	r3, [pc, #268]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 8008594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	61fb      	str	r3, [r7, #28]
 800859c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800859e:	2200      	movs	r2, #0
 80085a0:	2100      	movs	r1, #0
 80085a2:	201d      	movs	r0, #29
 80085a4:	f001 fd5f 	bl	800a066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80085a8:	201d      	movs	r0, #29
 80085aa:	f001 fd76 	bl	800a09a <HAL_NVIC_EnableIRQ>
}
 80085ae:	e073      	b.n	8008698 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a3c      	ldr	r2, [pc, #240]	; (80086a8 <HAL_TIM_Base_MspInit+0x168>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d131      	bne.n	800861e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80085ba:	4b39      	ldr	r3, [pc, #228]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 80085bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085be:	4a38      	ldr	r2, [pc, #224]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 80085c0:	f043 0308 	orr.w	r3, r3, #8
 80085c4:	6593      	str	r3, [r2, #88]	; 0x58
 80085c6:	4b36      	ldr	r3, [pc, #216]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 80085c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085d2:	4b33      	ldr	r3, [pc, #204]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 80085d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d6:	4a32      	ldr	r2, [pc, #200]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 80085d8:	f043 0301 	orr.w	r3, r3, #1
 80085dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085de:	4b30      	ldr	r3, [pc, #192]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 80085e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80085ea:	2301      	movs	r3, #1
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ee:	2302      	movs	r3, #2
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085f6:	2300      	movs	r3, #0
 80085f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80085fa:	2302      	movs	r3, #2
 80085fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008602:	4619      	mov	r1, r3
 8008604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008608:	f002 fc4c 	bl	800aea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 800860c:	2200      	movs	r2, #0
 800860e:	2102      	movs	r1, #2
 8008610:	2032      	movs	r0, #50	; 0x32
 8008612:	f001 fd28 	bl	800a066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008616:	2032      	movs	r0, #50	; 0x32
 8008618:	f001 fd3f 	bl	800a09a <HAL_NVIC_EnableIRQ>
}
 800861c:	e03c      	b.n	8008698 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a22      	ldr	r2, [pc, #136]	; (80086ac <HAL_TIM_Base_MspInit+0x16c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d10c      	bne.n	8008642 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008628:	4b1d      	ldr	r3, [pc, #116]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 800862a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800862c:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 800862e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008632:	6613      	str	r3, [r2, #96]	; 0x60
 8008634:	4b1a      	ldr	r3, [pc, #104]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 8008636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	693b      	ldr	r3, [r7, #16]
}
 8008640:	e02a      	b.n	8008698 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1a      	ldr	r2, [pc, #104]	; (80086b0 <HAL_TIM_Base_MspInit+0x170>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d114      	bne.n	8008676 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800864c:	4b14      	ldr	r3, [pc, #80]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 800864e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008650:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 8008652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008656:	6613      	str	r3, [r2, #96]	; 0x60
 8008658:	4b11      	ldr	r3, [pc, #68]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 800865a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008660:	60fb      	str	r3, [r7, #12]
 8008662:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008664:	2200      	movs	r2, #0
 8008666:	2100      	movs	r1, #0
 8008668:	2018      	movs	r0, #24
 800866a:	f001 fcfc 	bl	800a066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800866e:	2018      	movs	r0, #24
 8008670:	f001 fd13 	bl	800a09a <HAL_NVIC_EnableIRQ>
}
 8008674:	e010      	b.n	8008698 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a0e      	ldr	r2, [pc, #56]	; (80086b4 <HAL_TIM_Base_MspInit+0x174>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d10b      	bne.n	8008698 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008680:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 8008682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008684:	4a06      	ldr	r2, [pc, #24]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 8008686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800868a:	6613      	str	r3, [r2, #96]	; 0x60
 800868c:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <HAL_TIM_Base_MspInit+0x160>)
 800868e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008694:	60bb      	str	r3, [r7, #8]
 8008696:	68bb      	ldr	r3, [r7, #8]
}
 8008698:	bf00      	nop
 800869a:	3738      	adds	r7, #56	; 0x38
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	40021000 	.word	0x40021000
 80086a4:	40000400 	.word	0x40000400
 80086a8:	40000c00 	.word	0x40000c00
 80086ac:	40013400 	.word	0x40013400
 80086b0:	40014000 	.word	0x40014000
 80086b4:	40014400 	.word	0x40014400

080086b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80086b8:	480d      	ldr	r0, [pc, #52]	; (80086f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80086ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086bc:	480d      	ldr	r0, [pc, #52]	; (80086f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80086be:	490e      	ldr	r1, [pc, #56]	; (80086f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80086c0:	4a0e      	ldr	r2, [pc, #56]	; (80086fc <LoopForever+0xe>)
  movs r3, #0
 80086c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80086c4:	e002      	b.n	80086cc <LoopCopyDataInit>

080086c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086ca:	3304      	adds	r3, #4

080086cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086d0:	d3f9      	bcc.n	80086c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086d2:	4a0b      	ldr	r2, [pc, #44]	; (8008700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80086d4:	4c0b      	ldr	r4, [pc, #44]	; (8008704 <LoopForever+0x16>)
  movs r3, #0
 80086d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80086d8:	e001      	b.n	80086de <LoopFillZerobss>

080086da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80086da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086dc:	3204      	adds	r2, #4

080086de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80086de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80086e0:	d3fb      	bcc.n	80086da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80086e2:	f7ff fc91 	bl	8008008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086e6:	f006 f889 	bl	800e7fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80086ea:	f7ff f955 	bl	8007998 <main>

080086ee <LoopForever>:

LoopForever:
    b LoopForever
 80086ee:	e7fe      	b.n	80086ee <LoopForever>
  ldr   r0, =_estack
 80086f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80086f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086f8:	20001ed0 	.word	0x20001ed0
  ldr r2, =_sidata
 80086fc:	08013a68 	.word	0x08013a68
  ldr r2, =_sbss
 8008700:	20001ed0 	.word	0x20001ed0
  ldr r4, =_ebss
 8008704:	2000296c 	.word	0x2000296c

08008708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008708:	e7fe      	b.n	8008708 <ADC1_2_IRQHandler>

0800870a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008714:	2003      	movs	r0, #3
 8008716:	f001 fc9b 	bl	800a050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800871a:	2000      	movs	r0, #0
 800871c:	f000 f80e 	bl	800873c <HAL_InitTick>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	71fb      	strb	r3, [r7, #7]
 800872a:	e001      	b.n	8008730 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800872c:	f7ff fae4 	bl	8007cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008730:	79fb      	ldrb	r3, [r7, #7]

}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008748:	4b16      	ldr	r3, [pc, #88]	; (80087a4 <HAL_InitTick+0x68>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d022      	beq.n	8008796 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008750:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <HAL_InitTick+0x6c>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <HAL_InitTick+0x68>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800875c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008760:	fbb2 f3f3 	udiv	r3, r2, r3
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fca6 	bl	800a0b6 <HAL_SYSTICK_Config>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10f      	bne.n	8008790 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b0f      	cmp	r3, #15
 8008774:	d809      	bhi.n	800878a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008776:	2200      	movs	r2, #0
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800877e:	f001 fc72 	bl	800a066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008782:	4a0a      	ldr	r2, [pc, #40]	; (80087ac <HAL_InitTick+0x70>)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	e007      	b.n	800879a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	73fb      	strb	r3, [r7, #15]
 800878e:	e004      	b.n	800879a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
 8008794:	e001      	b.n	800879a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000cb0 	.word	0x20000cb0
 80087a8:	20000ca8 	.word	0x20000ca8
 80087ac:	20000cac 	.word	0x20000cac

080087b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087b4:	4b05      	ldr	r3, [pc, #20]	; (80087cc <HAL_IncTick+0x1c>)
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <HAL_IncTick+0x20>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4413      	add	r3, r2
 80087be:	4a03      	ldr	r2, [pc, #12]	; (80087cc <HAL_IncTick+0x1c>)
 80087c0:	6013      	str	r3, [r2, #0]
}
 80087c2:	bf00      	nop
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	20002964 	.word	0x20002964
 80087d0:	20000cb0 	.word	0x20000cb0

080087d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  return uwTick;
 80087d8:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <HAL_GetTick+0x14>)
 80087da:	681b      	ldr	r3, [r3, #0]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	20002964 	.word	0x20002964

080087ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80087f4:	f7ff ffee 	bl	80087d4 <HAL_GetTick>
 80087f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008804:	d004      	beq.n	8008810 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008806:	4b09      	ldr	r3, [pc, #36]	; (800882c <HAL_Delay+0x40>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4413      	add	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008810:	bf00      	nop
 8008812:	f7ff ffdf 	bl	80087d4 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	429a      	cmp	r2, r3
 8008820:	d8f7      	bhi.n	8008812 <HAL_Delay+0x26>
  {
  }
}
 8008822:	bf00      	nop
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000cb0 	.word	0x20000cb0

08008830 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	609a      	str	r2, [r3, #8]
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	609a      	str	r2, [r3, #8]
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008898:	b490      	push	{r4, r7}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3360      	adds	r3, #96	; 0x60
 80088aa:	461a      	mov	r2, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80088b4:	6822      	ldr	r2, [r4, #0]
 80088b6:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <LL_ADC_SetOffset+0x40>)
 80088b8:	4013      	ands	r3, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	4313      	orrs	r3, r2
 80088c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088ca:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bc90      	pop	{r4, r7}
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	03fff000 	.word	0x03fff000

080088dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80088dc:	b490      	push	{r4, r7}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3360      	adds	r3, #96	; 0x60
 80088ea:	461a      	mov	r2, r3
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bc90      	pop	{r4, r7}
 8008902:	4770      	bx	lr

08008904 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008904:	b490      	push	{r4, r7}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3360      	adds	r3, #96	; 0x60
 8008914:	461a      	mov	r2, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4313      	orrs	r3, r2
 8008928:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bc90      	pop	{r4, r7}
 8008932:	4770      	bx	lr

08008934 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008934:	b490      	push	{r4, r7}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3360      	adds	r3, #96	; 0x60
 8008944:	461a      	mov	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4313      	orrs	r3, r2
 8008958:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800895a:	bf00      	nop
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bc90      	pop	{r4, r7}
 8008962:	4770      	bx	lr

08008964 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008964:	b490      	push	{r4, r7}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3360      	adds	r3, #96	; 0x60
 8008974:	461a      	mov	r2, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4313      	orrs	r3, r2
 8008988:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bc90      	pop	{r4, r7}
 8008992:	4770      	bx	lr

08008994 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	615a      	str	r2, [r3, #20]
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80089ba:	b490      	push	{r4, r7}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3330      	adds	r3, #48	; 0x30
 80089ca:	461a      	mov	r2, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	0a1b      	lsrs	r3, r3, #8
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	f003 030c 	and.w	r3, r3, #12
 80089d6:	4413      	add	r3, r2
 80089d8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80089da:	6822      	ldr	r2, [r4, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	211f      	movs	r1, #31
 80089e4:	fa01 f303 	lsl.w	r3, r1, r3
 80089e8:	43db      	mvns	r3, r3
 80089ea:	401a      	ands	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	0e9b      	lsrs	r3, r3, #26
 80089f0:	f003 011f 	and.w	r1, r3, #31
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	f003 031f 	and.w	r3, r3, #31
 80089fa:	fa01 f303 	lsl.w	r3, r1, r3
 80089fe:	4313      	orrs	r3, r2
 8008a00:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc90      	pop	{r4, r7}
 8008a0a:	4770      	bx	lr

08008a0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008a0c:	b490      	push	{r4, r7}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3314      	adds	r3, #20
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	0e5b      	lsrs	r3, r3, #25
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	4413      	add	r3, r2
 8008a2a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008a2c:	6822      	ldr	r2, [r4, #0]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	0d1b      	lsrs	r3, r3, #20
 8008a32:	f003 031f 	and.w	r3, r3, #31
 8008a36:	2107      	movs	r1, #7
 8008a38:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	401a      	ands	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	0d1b      	lsrs	r3, r3, #20
 8008a44:	f003 031f 	and.w	r3, r3, #31
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008a52:	bf00      	nop
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc90      	pop	{r4, r7}
 8008a5a:	4770      	bx	lr

08008a5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a74:	43db      	mvns	r3, r3
 8008a76:	401a      	ands	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f003 0318 	and.w	r3, r3, #24
 8008a7e:	4908      	ldr	r1, [pc, #32]	; (8008aa0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008a80:	40d9      	lsrs	r1, r3
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	400b      	ands	r3, r1
 8008a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008a92:	bf00      	nop
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	0007ffff 	.word	0x0007ffff

08008aa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	6093      	str	r3, [r2, #8]
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008adc:	d101      	bne.n	8008ae2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b2c:	d101      	bne.n	8008b32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e000      	b.n	8008b34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d101      	bne.n	8008b58 <LL_ADC_IsEnabled+0x18>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e000      	b.n	8008b5a <LL_ADC_IsEnabled+0x1a>
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f003 0304 	and.w	r3, r3, #4
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d101      	bne.n	8008b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e000      	b.n	8008b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d101      	bne.n	8008ba4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
	...

08008bb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008bb4:	b590      	push	{r4, r7, lr}
 8008bb6:	b089      	sub	sp, #36	; 0x24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e1ad      	b.n	8008f2a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d109      	bne.n	8008bf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7fe f937 	bl	8006e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff ff67 	bl	8008ac8 <LL_ADC_IsDeepPowerDownEnabled>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d004      	beq.n	8008c0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff ff4d 	bl	8008aa4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff ff82 	bl	8008b18 <LL_ADC_IsInternalRegulatorEnabled>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d113      	bne.n	8008c42 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff ff66 	bl	8008af0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008c24:	4b9e      	ldr	r3, [pc, #632]	; (8008ea0 <HAL_ADC_Init+0x2ec>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	099b      	lsrs	r3, r3, #6
 8008c2a:	4a9e      	ldr	r2, [pc, #632]	; (8008ea4 <HAL_ADC_Init+0x2f0>)
 8008c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c30:	099b      	lsrs	r3, r3, #6
 8008c32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008c34:	e002      	b.n	8008c3c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f9      	bne.n	8008c36 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff ff66 	bl	8008b18 <LL_ADC_IsInternalRegulatorEnabled>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10d      	bne.n	8008c6e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c56:	f043 0210 	orr.w	r2, r3, #16
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c62:	f043 0201 	orr.w	r2, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7ff ff77 	bl	8008b66 <LL_ADC_REG_IsConversionOngoing>
 8008c78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c7e:	f003 0310 	and.w	r3, r3, #16
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f040 8148 	bne.w	8008f18 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f040 8144 	bne.w	8008f18 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008c98:	f043 0202 	orr.w	r2, r3, #2
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff ff4b 	bl	8008b40 <LL_ADC_IsEnabled>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d141      	bne.n	8008d34 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cb8:	d004      	beq.n	8008cc4 <HAL_ADC_Init+0x110>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a7a      	ldr	r2, [pc, #488]	; (8008ea8 <HAL_ADC_Init+0x2f4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d10f      	bne.n	8008ce4 <HAL_ADC_Init+0x130>
 8008cc4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008cc8:	f7ff ff3a 	bl	8008b40 <LL_ADC_IsEnabled>
 8008ccc:	4604      	mov	r4, r0
 8008cce:	4876      	ldr	r0, [pc, #472]	; (8008ea8 <HAL_ADC_Init+0x2f4>)
 8008cd0:	f7ff ff36 	bl	8008b40 <LL_ADC_IsEnabled>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	4323      	orrs	r3, r4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bf0c      	ite	eq
 8008cdc:	2301      	moveq	r3, #1
 8008cde:	2300      	movne	r3, #0
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	e012      	b.n	8008d0a <HAL_ADC_Init+0x156>
 8008ce4:	4871      	ldr	r0, [pc, #452]	; (8008eac <HAL_ADC_Init+0x2f8>)
 8008ce6:	f7ff ff2b 	bl	8008b40 <LL_ADC_IsEnabled>
 8008cea:	4604      	mov	r4, r0
 8008cec:	4870      	ldr	r0, [pc, #448]	; (8008eb0 <HAL_ADC_Init+0x2fc>)
 8008cee:	f7ff ff27 	bl	8008b40 <LL_ADC_IsEnabled>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	431c      	orrs	r4, r3
 8008cf6:	486f      	ldr	r0, [pc, #444]	; (8008eb4 <HAL_ADC_Init+0x300>)
 8008cf8:	f7ff ff22 	bl	8008b40 <LL_ADC_IsEnabled>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	4323      	orrs	r3, r4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	bf0c      	ite	eq
 8008d04:	2301      	moveq	r3, #1
 8008d06:	2300      	movne	r3, #0
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d012      	beq.n	8008d34 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d16:	d004      	beq.n	8008d22 <HAL_ADC_Init+0x16e>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a62      	ldr	r2, [pc, #392]	; (8008ea8 <HAL_ADC_Init+0x2f4>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d101      	bne.n	8008d26 <HAL_ADC_Init+0x172>
 8008d22:	4a65      	ldr	r2, [pc, #404]	; (8008eb8 <HAL_ADC_Init+0x304>)
 8008d24:	e000      	b.n	8008d28 <HAL_ADC_Init+0x174>
 8008d26:	4a65      	ldr	r2, [pc, #404]	; (8008ebc <HAL_ADC_Init+0x308>)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7ff fd7e 	bl	8008830 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7f5b      	ldrb	r3, [r3, #29]
 8008d38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d3e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008d44:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008d4a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d52:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d54:	4313      	orrs	r3, r2
 8008d56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d106      	bne.n	8008d70 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d66:	3b01      	subs	r3, #1
 8008d68:	045b      	lsls	r3, r3, #17
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68da      	ldr	r2, [r3, #12]
 8008d92:	4b4b      	ldr	r3, [pc, #300]	; (8008ec0 <HAL_ADC_Init+0x30c>)
 8008d94:	4013      	ands	r3, r2
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	6812      	ldr	r2, [r2, #0]
 8008d9a:	69b9      	ldr	r1, [r7, #24]
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff fed3 	bl	8008b66 <LL_ADC_REG_IsConversionOngoing>
 8008dc0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff fee0 	bl	8008b8c <LL_ADC_INJ_IsConversionOngoing>
 8008dcc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d17f      	bne.n	8008ed4 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d17c      	bne.n	8008ed4 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008dde:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008de6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008de8:	4313      	orrs	r3, r2
 8008dea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008df6:	f023 0302 	bic.w	r3, r3, #2
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6812      	ldr	r2, [r2, #0]
 8008dfe:	69b9      	ldr	r1, [r7, #24]
 8008e00:	430b      	orrs	r3, r1
 8008e02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d017      	beq.n	8008e3c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	691a      	ldr	r2, [r3, #16]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008e24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6911      	ldr	r1, [r2, #16]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	430b      	orrs	r3, r1
 8008e36:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008e3a:	e013      	b.n	8008e64 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	691a      	ldr	r2, [r3, #16]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6812      	ldr	r2, [r2, #0]
 8008e58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e60:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d12a      	bne.n	8008ec4 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e78:	f023 0304 	bic.w	r3, r3, #4
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e84:	4311      	orrs	r1, r2
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008e8a:	4311      	orrs	r1, r2
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008e90:	430a      	orrs	r2, r1
 8008e92:	431a      	orrs	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 0201 	orr.w	r2, r2, #1
 8008e9c:	611a      	str	r2, [r3, #16]
 8008e9e:	e019      	b.n	8008ed4 <HAL_ADC_Init+0x320>
 8008ea0:	20000ca8 	.word	0x20000ca8
 8008ea4:	053e2d63 	.word	0x053e2d63
 8008ea8:	50000100 	.word	0x50000100
 8008eac:	50000400 	.word	0x50000400
 8008eb0:	50000500 	.word	0x50000500
 8008eb4:	50000600 	.word	0x50000600
 8008eb8:	50000300 	.word	0x50000300
 8008ebc:	50000700 	.word	0x50000700
 8008ec0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	691a      	ldr	r2, [r3, #16]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0201 	bic.w	r2, r2, #1
 8008ed2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d10c      	bne.n	8008ef6 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	f023 010f 	bic.w	r1, r3, #15
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	1e5a      	subs	r2, r3, #1
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ef4:	e007      	b.n	8008f06 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 020f 	bic.w	r2, r2, #15
 8008f04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f0a:	f023 0303 	bic.w	r3, r3, #3
 8008f0e:	f043 0201 	orr.w	r2, r3, #1
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f16:	e007      	b.n	8008f28 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f1c:	f043 0210 	orr.w	r2, r3, #16
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008f28:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3724      	adds	r7, #36	; 0x24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd90      	pop	{r4, r7, pc}
 8008f32:	bf00      	nop

08008f34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b0a6      	sub	sp, #152	; 0x98
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_ADC_ConfigChannel+0x22>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e38e      	b.n	8009674 <HAL_ADC_ConfigChannel+0x740>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff fdff 	bl	8008b66 <LL_ADC_REG_IsConversionOngoing>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f040 836f 	bne.w	800964e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	6859      	ldr	r1, [r3, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f7ff fd1c 	bl	80089ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff fded 	bl	8008b66 <LL_ADC_REG_IsConversionOngoing>
 8008f8c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7ff fdf9 	bl	8008b8c <LL_ADC_INJ_IsConversionOngoing>
 8008f9a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008f9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f040 817b 	bne.w	800929e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f040 8176 	bne.w	800929e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fba:	d10f      	bne.n	8008fdc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	f7ff fd20 	bl	8008a0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff fcdd 	bl	8008994 <LL_ADC_SetSamplingTimeCommonConfig>
 8008fda:	e00e      	b.n	8008ffa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f7ff fd0f 	bl	8008a0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff fccd 	bl	8008994 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	695a      	ldr	r2, [r3, #20]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	08db      	lsrs	r3, r3, #3
 8009006:	f003 0303 	and.w	r3, r3, #3
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	2b04      	cmp	r3, #4
 800901a:	d022      	beq.n	8009062 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	6919      	ldr	r1, [r3, #16]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800902c:	f7ff fc34 	bl	8008898 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	6919      	ldr	r1, [r3, #16]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	461a      	mov	r2, r3
 800903e:	f7ff fc79 	bl	8008934 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6818      	ldr	r0, [r3, #0]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	6919      	ldr	r1, [r3, #16]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	7f1b      	ldrb	r3, [r3, #28]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d102      	bne.n	8009058 <HAL_ADC_ConfigChannel+0x124>
 8009052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009056:	e000      	b.n	800905a <HAL_ADC_ConfigChannel+0x126>
 8009058:	2300      	movs	r3, #0
 800905a:	461a      	mov	r2, r3
 800905c:	f7ff fc82 	bl	8008964 <LL_ADC_SetOffsetSaturation>
 8009060:	e11d      	b.n	800929e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2100      	movs	r1, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff fc37 	bl	80088dc <LL_ADC_GetOffsetChannel>
 800906e:	4603      	mov	r3, r0
 8009070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <HAL_ADC_ConfigChannel+0x15a>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff fc2c 	bl	80088dc <LL_ADC_GetOffsetChannel>
 8009084:	4603      	mov	r3, r0
 8009086:	0e9b      	lsrs	r3, r3, #26
 8009088:	f003 021f 	and.w	r2, r3, #31
 800908c:	e012      	b.n	80090b4 <HAL_ADC_ConfigChannel+0x180>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2100      	movs	r1, #0
 8009094:	4618      	mov	r0, r3
 8009096:	f7ff fc21 	bl	80088dc <LL_ADC_GetOffsetChannel>
 800909a:	4603      	mov	r3, r0
 800909c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090a4:	fa93 f3a3 	rbit	r3, r3
 80090a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80090aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090ac:	fab3 f383 	clz	r3, r3
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	461a      	mov	r2, r3
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d105      	bne.n	80090cc <HAL_ADC_ConfigChannel+0x198>
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	0e9b      	lsrs	r3, r3, #26
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	e00a      	b.n	80090e2 <HAL_ADC_ConfigChannel+0x1ae>
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d4:	fa93 f3a3 	rbit	r3, r3
 80090d8:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80090da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090dc:	fab3 f383 	clz	r3, r3
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d106      	bne.n	80090f4 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	2100      	movs	r1, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7ff fc08 	bl	8008904 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2101      	movs	r1, #1
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7ff fbee 	bl	80088dc <LL_ADC_GetOffsetChannel>
 8009100:	4603      	mov	r3, r0
 8009102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10a      	bne.n	8009120 <HAL_ADC_ConfigChannel+0x1ec>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2101      	movs	r1, #1
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff fbe3 	bl	80088dc <LL_ADC_GetOffsetChannel>
 8009116:	4603      	mov	r3, r0
 8009118:	0e9b      	lsrs	r3, r3, #26
 800911a:	f003 021f 	and.w	r2, r3, #31
 800911e:	e010      	b.n	8009142 <HAL_ADC_ConfigChannel+0x20e>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2101      	movs	r1, #1
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff fbd8 	bl	80088dc <LL_ADC_GetOffsetChannel>
 800912c:	4603      	mov	r3, r0
 800912e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009132:	fa93 f3a3 	rbit	r3, r3
 8009136:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913a:	fab3 f383 	clz	r3, r3
 800913e:	b2db      	uxtb	r3, r3
 8009140:	461a      	mov	r2, r3
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800914a:	2b00      	cmp	r3, #0
 800914c:	d105      	bne.n	800915a <HAL_ADC_ConfigChannel+0x226>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	0e9b      	lsrs	r3, r3, #26
 8009154:	f003 031f 	and.w	r3, r3, #31
 8009158:	e00a      	b.n	8009170 <HAL_ADC_ConfigChannel+0x23c>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009162:	fa93 f3a3 	rbit	r3, r3
 8009166:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800916a:	fab3 f383 	clz	r3, r3
 800916e:	b2db      	uxtb	r3, r3
 8009170:	429a      	cmp	r2, r3
 8009172:	d106      	bne.n	8009182 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2200      	movs	r2, #0
 800917a:	2101      	movs	r1, #1
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fbc1 	bl	8008904 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2102      	movs	r1, #2
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fba7 	bl	80088dc <LL_ADC_GetOffsetChannel>
 800918e:	4603      	mov	r3, r0
 8009190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <HAL_ADC_ConfigChannel+0x27a>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2102      	movs	r1, #2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff fb9c 	bl	80088dc <LL_ADC_GetOffsetChannel>
 80091a4:	4603      	mov	r3, r0
 80091a6:	0e9b      	lsrs	r3, r3, #26
 80091a8:	f003 021f 	and.w	r2, r3, #31
 80091ac:	e010      	b.n	80091d0 <HAL_ADC_ConfigChannel+0x29c>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2102      	movs	r1, #2
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7ff fb91 	bl	80088dc <LL_ADC_GetOffsetChannel>
 80091ba:	4603      	mov	r3, r0
 80091bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091c0:	fa93 f3a3 	rbit	r3, r3
 80091c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80091c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091c8:	fab3 f383 	clz	r3, r3
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	461a      	mov	r2, r3
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d105      	bne.n	80091e8 <HAL_ADC_ConfigChannel+0x2b4>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	0e9b      	lsrs	r3, r3, #26
 80091e2:	f003 031f 	and.w	r3, r3, #31
 80091e6:	e00a      	b.n	80091fe <HAL_ADC_ConfigChannel+0x2ca>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091f0:	fa93 f3a3 	rbit	r3, r3
 80091f4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80091f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f8:	fab3 f383 	clz	r3, r3
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	429a      	cmp	r2, r3
 8009200:	d106      	bne.n	8009210 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2200      	movs	r2, #0
 8009208:	2102      	movs	r1, #2
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff fb7a 	bl	8008904 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2103      	movs	r1, #3
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff fb60 	bl	80088dc <LL_ADC_GetOffsetChannel>
 800921c:	4603      	mov	r3, r0
 800921e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <HAL_ADC_ConfigChannel+0x308>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2103      	movs	r1, #3
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff fb55 	bl	80088dc <LL_ADC_GetOffsetChannel>
 8009232:	4603      	mov	r3, r0
 8009234:	0e9b      	lsrs	r3, r3, #26
 8009236:	f003 021f 	and.w	r2, r3, #31
 800923a:	e010      	b.n	800925e <HAL_ADC_ConfigChannel+0x32a>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2103      	movs	r1, #3
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff fb4a 	bl	80088dc <LL_ADC_GetOffsetChannel>
 8009248:	4603      	mov	r3, r0
 800924a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800924c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800924e:	fa93 f3a3 	rbit	r3, r3
 8009252:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009256:	fab3 f383 	clz	r3, r3
 800925a:	b2db      	uxtb	r3, r3
 800925c:	461a      	mov	r2, r3
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009266:	2b00      	cmp	r3, #0
 8009268:	d105      	bne.n	8009276 <HAL_ADC_ConfigChannel+0x342>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	0e9b      	lsrs	r3, r3, #26
 8009270:	f003 031f 	and.w	r3, r3, #31
 8009274:	e00a      	b.n	800928c <HAL_ADC_ConfigChannel+0x358>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800927c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800927e:	fa93 f3a3 	rbit	r3, r3
 8009282:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009286:	fab3 f383 	clz	r3, r3
 800928a:	b2db      	uxtb	r3, r3
 800928c:	429a      	cmp	r2, r3
 800928e:	d106      	bne.n	800929e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2200      	movs	r2, #0
 8009296:	2103      	movs	r1, #3
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fb33 	bl	8008904 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff fc4c 	bl	8008b40 <LL_ADC_IsEnabled>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f040 810c 	bne.w	80094c8 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	6819      	ldr	r1, [r3, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	461a      	mov	r2, r3
 80092be:	f7ff fbcd 	bl	8008a5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	4aaf      	ldr	r2, [pc, #700]	; (8009584 <HAL_ADC_ConfigChannel+0x650>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	f040 80fd 	bne.w	80094c8 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10b      	bne.n	80092f6 <HAL_ADC_ConfigChannel+0x3c2>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	0e9b      	lsrs	r3, r3, #26
 80092e4:	3301      	adds	r3, #1
 80092e6:	f003 031f 	and.w	r3, r3, #31
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	bf94      	ite	ls
 80092ee:	2301      	movls	r3, #1
 80092f0:	2300      	movhi	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	e012      	b.n	800931c <HAL_ADC_ConfigChannel+0x3e8>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092fe:	fa93 f3a3 	rbit	r3, r3
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009306:	fab3 f383 	clz	r3, r3
 800930a:	b2db      	uxtb	r3, r3
 800930c:	3301      	adds	r3, #1
 800930e:	f003 031f 	and.w	r3, r3, #31
 8009312:	2b09      	cmp	r3, #9
 8009314:	bf94      	ite	ls
 8009316:	2301      	movls	r3, #1
 8009318:	2300      	movhi	r3, #0
 800931a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800931c:	2b00      	cmp	r3, #0
 800931e:	d064      	beq.n	80093ea <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009328:	2b00      	cmp	r3, #0
 800932a:	d107      	bne.n	800933c <HAL_ADC_ConfigChannel+0x408>
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	0e9b      	lsrs	r3, r3, #26
 8009332:	3301      	adds	r3, #1
 8009334:	069b      	lsls	r3, r3, #26
 8009336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800933a:	e00e      	b.n	800935a <HAL_ADC_ConfigChannel+0x426>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	fa93 f3a3 	rbit	r3, r3
 8009348:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800934a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934c:	fab3 f383 	clz	r3, r3
 8009350:	b2db      	uxtb	r3, r3
 8009352:	3301      	adds	r3, #1
 8009354:	069b      	lsls	r3, r3, #26
 8009356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009362:	2b00      	cmp	r3, #0
 8009364:	d109      	bne.n	800937a <HAL_ADC_ConfigChannel+0x446>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	0e9b      	lsrs	r3, r3, #26
 800936c:	3301      	adds	r3, #1
 800936e:	f003 031f 	and.w	r3, r3, #31
 8009372:	2101      	movs	r1, #1
 8009374:	fa01 f303 	lsl.w	r3, r1, r3
 8009378:	e010      	b.n	800939c <HAL_ADC_ConfigChannel+0x468>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	fa93 f3a3 	rbit	r3, r3
 8009386:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938a:	fab3 f383 	clz	r3, r3
 800938e:	b2db      	uxtb	r3, r3
 8009390:	3301      	adds	r3, #1
 8009392:	f003 031f 	and.w	r3, r3, #31
 8009396:	2101      	movs	r1, #1
 8009398:	fa01 f303 	lsl.w	r3, r1, r3
 800939c:	ea42 0103 	orr.w	r1, r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x48e>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	0e9b      	lsrs	r3, r3, #26
 80093b2:	3301      	adds	r3, #1
 80093b4:	f003 021f 	and.w	r2, r3, #31
 80093b8:	4613      	mov	r3, r2
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	4413      	add	r3, r2
 80093be:	051b      	lsls	r3, r3, #20
 80093c0:	e011      	b.n	80093e6 <HAL_ADC_ConfigChannel+0x4b2>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	fa93 f3a3 	rbit	r3, r3
 80093ce:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	fab3 f383 	clz	r3, r3
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	3301      	adds	r3, #1
 80093da:	f003 021f 	and.w	r2, r3, #31
 80093de:	4613      	mov	r3, r2
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	4413      	add	r3, r2
 80093e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80093e6:	430b      	orrs	r3, r1
 80093e8:	e069      	b.n	80094be <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d107      	bne.n	8009406 <HAL_ADC_ConfigChannel+0x4d2>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	0e9b      	lsrs	r3, r3, #26
 80093fc:	3301      	adds	r3, #1
 80093fe:	069b      	lsls	r3, r3, #26
 8009400:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009404:	e00e      	b.n	8009424 <HAL_ADC_ConfigChannel+0x4f0>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	fa93 f3a3 	rbit	r3, r3
 8009412:	61fb      	str	r3, [r7, #28]
  return result;
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	fab3 f383 	clz	r3, r3
 800941a:	b2db      	uxtb	r3, r3
 800941c:	3301      	adds	r3, #1
 800941e:	069b      	lsls	r3, r3, #26
 8009420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800942c:	2b00      	cmp	r3, #0
 800942e:	d109      	bne.n	8009444 <HAL_ADC_ConfigChannel+0x510>
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	0e9b      	lsrs	r3, r3, #26
 8009436:	3301      	adds	r3, #1
 8009438:	f003 031f 	and.w	r3, r3, #31
 800943c:	2101      	movs	r1, #1
 800943e:	fa01 f303 	lsl.w	r3, r1, r3
 8009442:	e010      	b.n	8009466 <HAL_ADC_ConfigChannel+0x532>
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	fa93 f3a3 	rbit	r3, r3
 8009450:	617b      	str	r3, [r7, #20]
  return result;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	fab3 f383 	clz	r3, r3
 8009458:	b2db      	uxtb	r3, r3
 800945a:	3301      	adds	r3, #1
 800945c:	f003 031f 	and.w	r3, r3, #31
 8009460:	2101      	movs	r1, #1
 8009462:	fa01 f303 	lsl.w	r3, r1, r3
 8009466:	ea42 0103 	orr.w	r1, r2, r3
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10d      	bne.n	8009492 <HAL_ADC_ConfigChannel+0x55e>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	0e9b      	lsrs	r3, r3, #26
 800947c:	3301      	adds	r3, #1
 800947e:	f003 021f 	and.w	r2, r3, #31
 8009482:	4613      	mov	r3, r2
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	4413      	add	r3, r2
 8009488:	3b1e      	subs	r3, #30
 800948a:	051b      	lsls	r3, r3, #20
 800948c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009490:	e014      	b.n	80094bc <HAL_ADC_ConfigChannel+0x588>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	fa93 f3a3 	rbit	r3, r3
 800949e:	60fb      	str	r3, [r7, #12]
  return result;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	fab3 f383 	clz	r3, r3
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	3301      	adds	r3, #1
 80094aa:	f003 021f 	and.w	r2, r3, #31
 80094ae:	4613      	mov	r3, r2
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	4413      	add	r3, r2
 80094b4:	3b1e      	subs	r3, #30
 80094b6:	051b      	lsls	r3, r3, #20
 80094b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80094bc:	430b      	orrs	r3, r1
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	6892      	ldr	r2, [r2, #8]
 80094c2:	4619      	mov	r1, r3
 80094c4:	f7ff faa2 	bl	8008a0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	4b2e      	ldr	r3, [pc, #184]	; (8009588 <HAL_ADC_ConfigChannel+0x654>)
 80094ce:	4013      	ands	r3, r2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 80c9 	beq.w	8009668 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094de:	d004      	beq.n	80094ea <HAL_ADC_ConfigChannel+0x5b6>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a29      	ldr	r2, [pc, #164]	; (800958c <HAL_ADC_ConfigChannel+0x658>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d101      	bne.n	80094ee <HAL_ADC_ConfigChannel+0x5ba>
 80094ea:	4b29      	ldr	r3, [pc, #164]	; (8009590 <HAL_ADC_ConfigChannel+0x65c>)
 80094ec:	e000      	b.n	80094f0 <HAL_ADC_ConfigChannel+0x5bc>
 80094ee:	4b29      	ldr	r3, [pc, #164]	; (8009594 <HAL_ADC_ConfigChannel+0x660>)
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7ff f9c3 	bl	800887c <LL_ADC_GetCommonPathInternalCh>
 80094f6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a26      	ldr	r2, [pc, #152]	; (8009598 <HAL_ADC_ConfigChannel+0x664>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d004      	beq.n	800950e <HAL_ADC_ConfigChannel+0x5da>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a24      	ldr	r2, [pc, #144]	; (800959c <HAL_ADC_ConfigChannel+0x668>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d14e      	bne.n	80095ac <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800950e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d148      	bne.n	80095ac <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009522:	d005      	beq.n	8009530 <HAL_ADC_ConfigChannel+0x5fc>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a1d      	ldr	r2, [pc, #116]	; (80095a0 <HAL_ADC_ConfigChannel+0x66c>)
 800952a:	4293      	cmp	r3, r2
 800952c:	f040 8099 	bne.w	8009662 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009538:	d004      	beq.n	8009544 <HAL_ADC_ConfigChannel+0x610>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a13      	ldr	r2, [pc, #76]	; (800958c <HAL_ADC_ConfigChannel+0x658>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d101      	bne.n	8009548 <HAL_ADC_ConfigChannel+0x614>
 8009544:	4a12      	ldr	r2, [pc, #72]	; (8009590 <HAL_ADC_ConfigChannel+0x65c>)
 8009546:	e000      	b.n	800954a <HAL_ADC_ConfigChannel+0x616>
 8009548:	4a12      	ldr	r2, [pc, #72]	; (8009594 <HAL_ADC_ConfigChannel+0x660>)
 800954a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800954e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7ff f97e 	bl	8008856 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800955a:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <HAL_ADC_ConfigChannel+0x670>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	099b      	lsrs	r3, r3, #6
 8009560:	4a11      	ldr	r2, [pc, #68]	; (80095a8 <HAL_ADC_ConfigChannel+0x674>)
 8009562:	fba2 2303 	umull	r2, r3, r2, r3
 8009566:	099a      	lsrs	r2, r3, #6
 8009568:	4613      	mov	r3, r2
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009572:	e002      	b.n	800957a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	3b01      	subs	r3, #1
 8009578:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1f9      	bne.n	8009574 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009580:	e06f      	b.n	8009662 <HAL_ADC_ConfigChannel+0x72e>
 8009582:	bf00      	nop
 8009584:	407f0000 	.word	0x407f0000
 8009588:	80080000 	.word	0x80080000
 800958c:	50000100 	.word	0x50000100
 8009590:	50000300 	.word	0x50000300
 8009594:	50000700 	.word	0x50000700
 8009598:	c3210000 	.word	0xc3210000
 800959c:	90c00010 	.word	0x90c00010
 80095a0:	50000600 	.word	0x50000600
 80095a4:	20000ca8 	.word	0x20000ca8
 80095a8:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a32      	ldr	r2, [pc, #200]	; (800967c <HAL_ADC_ConfigChannel+0x748>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d125      	bne.n	8009602 <HAL_ADC_ConfigChannel+0x6ce>
 80095b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d11f      	bne.n	8009602 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a2e      	ldr	r2, [pc, #184]	; (8009680 <HAL_ADC_ConfigChannel+0x74c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d104      	bne.n	80095d6 <HAL_ADC_ConfigChannel+0x6a2>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a2c      	ldr	r2, [pc, #176]	; (8009684 <HAL_ADC_ConfigChannel+0x750>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d047      	beq.n	8009666 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095de:	d004      	beq.n	80095ea <HAL_ADC_ConfigChannel+0x6b6>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a26      	ldr	r2, [pc, #152]	; (8009680 <HAL_ADC_ConfigChannel+0x74c>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d101      	bne.n	80095ee <HAL_ADC_ConfigChannel+0x6ba>
 80095ea:	4a27      	ldr	r2, [pc, #156]	; (8009688 <HAL_ADC_ConfigChannel+0x754>)
 80095ec:	e000      	b.n	80095f0 <HAL_ADC_ConfigChannel+0x6bc>
 80095ee:	4a27      	ldr	r2, [pc, #156]	; (800968c <HAL_ADC_ConfigChannel+0x758>)
 80095f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095f8:	4619      	mov	r1, r3
 80095fa:	4610      	mov	r0, r2
 80095fc:	f7ff f92b 	bl	8008856 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009600:	e031      	b.n	8009666 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a22      	ldr	r2, [pc, #136]	; (8009690 <HAL_ADC_ConfigChannel+0x75c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d12d      	bne.n	8009668 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800960c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d127      	bne.n	8009668 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a18      	ldr	r2, [pc, #96]	; (8009680 <HAL_ADC_ConfigChannel+0x74c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d022      	beq.n	8009668 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800962a:	d004      	beq.n	8009636 <HAL_ADC_ConfigChannel+0x702>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a13      	ldr	r2, [pc, #76]	; (8009680 <HAL_ADC_ConfigChannel+0x74c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d101      	bne.n	800963a <HAL_ADC_ConfigChannel+0x706>
 8009636:	4a14      	ldr	r2, [pc, #80]	; (8009688 <HAL_ADC_ConfigChannel+0x754>)
 8009638:	e000      	b.n	800963c <HAL_ADC_ConfigChannel+0x708>
 800963a:	4a14      	ldr	r2, [pc, #80]	; (800968c <HAL_ADC_ConfigChannel+0x758>)
 800963c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f7ff f905 	bl	8008856 <LL_ADC_SetCommonPathInternalCh>
 800964c:	e00c      	b.n	8009668 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009652:	f043 0220 	orr.w	r2, r3, #32
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009660:	e002      	b.n	8009668 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009662:	bf00      	nop
 8009664:	e000      	b.n	8009668 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009666:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009670:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009674:	4618      	mov	r0, r3
 8009676:	3798      	adds	r7, #152	; 0x98
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	c7520000 	.word	0xc7520000
 8009680:	50000100 	.word	0x50000100
 8009684:	50000500 	.word	0x50000500
 8009688:	50000300 	.word	0x50000300
 800968c:	50000700 	.word	0x50000700
 8009690:	cb840000 	.word	0xcb840000

08009694 <LL_ADC_IsEnabled>:
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d101      	bne.n	80096ac <LL_ADC_IsEnabled+0x18>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e000      	b.n	80096ae <LL_ADC_IsEnabled+0x1a>
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <LL_ADC_REG_IsConversionOngoing>:
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f003 0304 	and.w	r3, r3, #4
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d101      	bne.n	80096d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e000      	b.n	80096d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80096e0:	b590      	push	{r4, r7, lr}
 80096e2:	b0a1      	sub	sp, #132	; 0x84
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d101      	bne.n	80096fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80096fa:	2302      	movs	r3, #2
 80096fc:	e0e3      	b.n	80098c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800970e:	d102      	bne.n	8009716 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8009710:	4b6f      	ldr	r3, [pc, #444]	; (80098d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009712:	60bb      	str	r3, [r7, #8]
 8009714:	e009      	b.n	800972a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a6e      	ldr	r2, [pc, #440]	; (80098d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d102      	bne.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009720:	4b6d      	ldr	r3, [pc, #436]	; (80098d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009722:	60bb      	str	r3, [r7, #8]
 8009724:	e001      	b.n	800972a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009726:	2300      	movs	r3, #0
 8009728:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10b      	bne.n	8009748 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009734:	f043 0220 	orr.w	r2, r3, #32
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e0be      	b.n	80098c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff ffb5 	bl	80096ba <LL_ADC_REG_IsConversionOngoing>
 8009750:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff ffaf 	bl	80096ba <LL_ADC_REG_IsConversionOngoing>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	f040 80a0 	bne.w	80098a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009766:	2b00      	cmp	r3, #0
 8009768:	f040 809c 	bne.w	80098a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009774:	d004      	beq.n	8009780 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a55      	ldr	r2, [pc, #340]	; (80098d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d101      	bne.n	8009784 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009780:	4b56      	ldr	r3, [pc, #344]	; (80098dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009782:	e000      	b.n	8009786 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009784:	4b56      	ldr	r3, [pc, #344]	; (80098e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009786:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d04b      	beq.n	8009828 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	6859      	ldr	r1, [r3, #4]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80097a2:	035b      	lsls	r3, r3, #13
 80097a4:	430b      	orrs	r3, r1
 80097a6:	431a      	orrs	r2, r3
 80097a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097b4:	d004      	beq.n	80097c0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a45      	ldr	r2, [pc, #276]	; (80098d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d10f      	bne.n	80097e0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80097c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80097c4:	f7ff ff66 	bl	8009694 <LL_ADC_IsEnabled>
 80097c8:	4604      	mov	r4, r0
 80097ca:	4841      	ldr	r0, [pc, #260]	; (80098d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80097cc:	f7ff ff62 	bl	8009694 <LL_ADC_IsEnabled>
 80097d0:	4603      	mov	r3, r0
 80097d2:	4323      	orrs	r3, r4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bf0c      	ite	eq
 80097d8:	2301      	moveq	r3, #1
 80097da:	2300      	movne	r3, #0
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	e012      	b.n	8009806 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80097e0:	483c      	ldr	r0, [pc, #240]	; (80098d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80097e2:	f7ff ff57 	bl	8009694 <LL_ADC_IsEnabled>
 80097e6:	4604      	mov	r4, r0
 80097e8:	483b      	ldr	r0, [pc, #236]	; (80098d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80097ea:	f7ff ff53 	bl	8009694 <LL_ADC_IsEnabled>
 80097ee:	4603      	mov	r3, r0
 80097f0:	431c      	orrs	r4, r3
 80097f2:	483c      	ldr	r0, [pc, #240]	; (80098e4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80097f4:	f7ff ff4e 	bl	8009694 <LL_ADC_IsEnabled>
 80097f8:	4603      	mov	r3, r0
 80097fa:	4323      	orrs	r3, r4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bf0c      	ite	eq
 8009800:	2301      	moveq	r3, #1
 8009802:	2300      	movne	r3, #0
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d056      	beq.n	80098b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800980a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009812:	f023 030f 	bic.w	r3, r3, #15
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	6811      	ldr	r1, [r2, #0]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	6892      	ldr	r2, [r2, #8]
 800981e:	430a      	orrs	r2, r1
 8009820:	431a      	orrs	r2, r3
 8009822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009824:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009826:	e047      	b.n	80098b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009832:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800983c:	d004      	beq.n	8009848 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a23      	ldr	r2, [pc, #140]	; (80098d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d10f      	bne.n	8009868 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009848:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800984c:	f7ff ff22 	bl	8009694 <LL_ADC_IsEnabled>
 8009850:	4604      	mov	r4, r0
 8009852:	481f      	ldr	r0, [pc, #124]	; (80098d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009854:	f7ff ff1e 	bl	8009694 <LL_ADC_IsEnabled>
 8009858:	4603      	mov	r3, r0
 800985a:	4323      	orrs	r3, r4
 800985c:	2b00      	cmp	r3, #0
 800985e:	bf0c      	ite	eq
 8009860:	2301      	moveq	r3, #1
 8009862:	2300      	movne	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	e012      	b.n	800988e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009868:	481a      	ldr	r0, [pc, #104]	; (80098d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800986a:	f7ff ff13 	bl	8009694 <LL_ADC_IsEnabled>
 800986e:	4604      	mov	r4, r0
 8009870:	4819      	ldr	r0, [pc, #100]	; (80098d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009872:	f7ff ff0f 	bl	8009694 <LL_ADC_IsEnabled>
 8009876:	4603      	mov	r3, r0
 8009878:	431c      	orrs	r4, r3
 800987a:	481a      	ldr	r0, [pc, #104]	; (80098e4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800987c:	f7ff ff0a 	bl	8009694 <LL_ADC_IsEnabled>
 8009880:	4603      	mov	r3, r0
 8009882:	4323      	orrs	r3, r4
 8009884:	2b00      	cmp	r3, #0
 8009886:	bf0c      	ite	eq
 8009888:	2301      	moveq	r3, #1
 800988a:	2300      	movne	r3, #0
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d012      	beq.n	80098b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800989a:	f023 030f 	bic.w	r3, r3, #15
 800989e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80098a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80098a2:	e009      	b.n	80098b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a8:	f043 0220 	orr.w	r2, r3, #32
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80098b6:	e000      	b.n	80098ba <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80098b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80098c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3784      	adds	r7, #132	; 0x84
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd90      	pop	{r4, r7, pc}
 80098ce:	bf00      	nop
 80098d0:	50000100 	.word	0x50000100
 80098d4:	50000400 	.word	0x50000400
 80098d8:	50000500 	.word	0x50000500
 80098dc:	50000300 	.word	0x50000300
 80098e0:	50000700 	.word	0x50000700
 80098e4:	50000600 	.word	0x50000600

080098e8 <LL_EXTI_EnableIT_0_31>:
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <LL_EXTI_EnableIT_0_31+0x20>)
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	4904      	ldr	r1, [pc, #16]	; (8009908 <LL_EXTI_EnableIT_0_31+0x20>)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	600b      	str	r3, [r1, #0]
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	40010400 	.word	0x40010400

0800990c <LL_EXTI_EnableIT_32_63>:
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009914:	4b05      	ldr	r3, [pc, #20]	; (800992c <LL_EXTI_EnableIT_32_63+0x20>)
 8009916:	6a1a      	ldr	r2, [r3, #32]
 8009918:	4904      	ldr	r1, [pc, #16]	; (800992c <LL_EXTI_EnableIT_32_63+0x20>)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4313      	orrs	r3, r2
 800991e:	620b      	str	r3, [r1, #32]
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	40010400 	.word	0x40010400

08009930 <LL_EXTI_DisableIT_0_31>:
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009938:	4b06      	ldr	r3, [pc, #24]	; (8009954 <LL_EXTI_DisableIT_0_31+0x24>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	43db      	mvns	r3, r3
 8009940:	4904      	ldr	r1, [pc, #16]	; (8009954 <LL_EXTI_DisableIT_0_31+0x24>)
 8009942:	4013      	ands	r3, r2
 8009944:	600b      	str	r3, [r1, #0]
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	40010400 	.word	0x40010400

08009958 <LL_EXTI_DisableIT_32_63>:
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009960:	4b06      	ldr	r3, [pc, #24]	; (800997c <LL_EXTI_DisableIT_32_63+0x24>)
 8009962:	6a1a      	ldr	r2, [r3, #32]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	43db      	mvns	r3, r3
 8009968:	4904      	ldr	r1, [pc, #16]	; (800997c <LL_EXTI_DisableIT_32_63+0x24>)
 800996a:	4013      	ands	r3, r2
 800996c:	620b      	str	r3, [r1, #32]
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	40010400 	.word	0x40010400

08009980 <LL_EXTI_EnableEvent_0_31>:
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009988:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	4904      	ldr	r1, [pc, #16]	; (80099a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4313      	orrs	r3, r2
 8009992:	604b      	str	r3, [r1, #4]
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	40010400 	.word	0x40010400

080099a4 <LL_EXTI_EnableEvent_32_63>:
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80099ac:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80099ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099b0:	4904      	ldr	r1, [pc, #16]	; (80099c4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	40010400 	.word	0x40010400

080099c8 <LL_EXTI_DisableEvent_0_31>:
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80099d0:	4b06      	ldr	r3, [pc, #24]	; (80099ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	43db      	mvns	r3, r3
 80099d8:	4904      	ldr	r1, [pc, #16]	; (80099ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80099da:	4013      	ands	r3, r2
 80099dc:	604b      	str	r3, [r1, #4]
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40010400 	.word	0x40010400

080099f0 <LL_EXTI_DisableEvent_32_63>:
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80099f8:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <LL_EXTI_DisableEvent_32_63+0x24>)
 80099fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	43db      	mvns	r3, r3
 8009a00:	4904      	ldr	r1, [pc, #16]	; (8009a14 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009a02:	4013      	ands	r3, r2
 8009a04:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009a06:	bf00      	nop
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	40010400 	.word	0x40010400

08009a18 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009a20:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	4904      	ldr	r1, [pc, #16]	; (8009a38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	608b      	str	r3, [r1, #8]
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	40010400 	.word	0x40010400

08009a3c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a48:	4904      	ldr	r1, [pc, #16]	; (8009a5c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	40010400 	.word	0x40010400

08009a60 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009a68:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	43db      	mvns	r3, r3
 8009a70:	4904      	ldr	r1, [pc, #16]	; (8009a84 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009a72:	4013      	ands	r3, r2
 8009a74:	608b      	str	r3, [r1, #8]
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	40010400 	.word	0x40010400

08009a88 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009a90:	4b06      	ldr	r3, [pc, #24]	; (8009aac <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	43db      	mvns	r3, r3
 8009a98:	4904      	ldr	r1, [pc, #16]	; (8009aac <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009a9e:	bf00      	nop
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	40010400 	.word	0x40010400

08009ab0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009ab8:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009aba:	68da      	ldr	r2, [r3, #12]
 8009abc:	4904      	ldr	r1, [pc, #16]	; (8009ad0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60cb      	str	r3, [r1, #12]
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	40010400 	.word	0x40010400

08009ad4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009adc:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae0:	4904      	ldr	r1, [pc, #16]	; (8009af4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	40010400 	.word	0x40010400

08009af8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009b00:	4b06      	ldr	r3, [pc, #24]	; (8009b1c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009b02:	68da      	ldr	r2, [r3, #12]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	43db      	mvns	r3, r3
 8009b08:	4904      	ldr	r1, [pc, #16]	; (8009b1c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	60cb      	str	r3, [r1, #12]
}
 8009b0e:	bf00      	nop
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	40010400 	.word	0x40010400

08009b20 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009b28:	4b06      	ldr	r3, [pc, #24]	; (8009b44 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	43db      	mvns	r3, r3
 8009b30:	4904      	ldr	r1, [pc, #16]	; (8009b44 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009b32:	4013      	ands	r3, r2
 8009b34:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009b36:	bf00      	nop
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	40010400 	.word	0x40010400

08009b48 <LL_EXTI_ClearFlag_0_31>:
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009b50:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6153      	str	r3, [r2, #20]
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	40010400 	.word	0x40010400

08009b68 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009b70:	4a04      	ldr	r2, [pc, #16]	; (8009b84 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009b76:	bf00      	nop
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40010400 	.word	0x40010400

08009b88 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009b90:	2300      	movs	r3, #0
 8009b92:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d102      	bne.n	8009ba4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	77fb      	strb	r3, [r7, #31]
 8009ba2:	e180      	b.n	8009ea6 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bb2:	d102      	bne.n	8009bba <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	77fb      	strb	r3, [r7, #31]
 8009bb8:	e175      	b.n	8009ea6 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	7f5b      	ldrb	r3, [r3, #29]
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d108      	bne.n	8009bd6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7fd f9d1 	bl	8006f78 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009be0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b98      	ldr	r3, [pc, #608]	; (8009e68 <HAL_COMP_Init+0x2e0>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	6979      	ldr	r1, [r7, #20]
 8009c10:	430b      	orrs	r3, r1
 8009c12:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d015      	beq.n	8009c4e <HAL_COMP_Init+0xc6>
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d112      	bne.n	8009c4e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009c28:	4b90      	ldr	r3, [pc, #576]	; (8009e6c <HAL_COMP_Init+0x2e4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	099b      	lsrs	r3, r3, #6
 8009c2e:	4a90      	ldr	r2, [pc, #576]	; (8009e70 <HAL_COMP_Init+0x2e8>)
 8009c30:	fba2 2303 	umull	r2, r3, r2, r3
 8009c34:	099a      	lsrs	r2, r3, #6
 8009c36:	4613      	mov	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009c40:	e002      	b.n	8009c48 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f9      	bne.n	8009c42 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a88      	ldr	r2, [pc, #544]	; (8009e74 <HAL_COMP_Init+0x2ec>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d028      	beq.n	8009caa <HAL_COMP_Init+0x122>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a86      	ldr	r2, [pc, #536]	; (8009e78 <HAL_COMP_Init+0x2f0>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d020      	beq.n	8009ca4 <HAL_COMP_Init+0x11c>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a85      	ldr	r2, [pc, #532]	; (8009e7c <HAL_COMP_Init+0x2f4>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d018      	beq.n	8009c9e <HAL_COMP_Init+0x116>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a83      	ldr	r2, [pc, #524]	; (8009e80 <HAL_COMP_Init+0x2f8>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d010      	beq.n	8009c98 <HAL_COMP_Init+0x110>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a82      	ldr	r2, [pc, #520]	; (8009e84 <HAL_COMP_Init+0x2fc>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d008      	beq.n	8009c92 <HAL_COMP_Init+0x10a>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a80      	ldr	r2, [pc, #512]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d101      	bne.n	8009c8e <HAL_COMP_Init+0x106>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e00f      	b.n	8009cae <HAL_COMP_Init+0x126>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e00d      	b.n	8009cae <HAL_COMP_Init+0x126>
 8009c92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c96:	e00a      	b.n	8009cae <HAL_COMP_Init+0x126>
 8009c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c9c:	e007      	b.n	8009cae <HAL_COMP_Init+0x126>
 8009c9e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009ca2:	e004      	b.n	8009cae <HAL_COMP_Init+0x126>
 8009ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ca8:	e001      	b.n	8009cae <HAL_COMP_Init+0x126>
 8009caa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009cae:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	f003 0303 	and.w	r3, r3, #3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80b6 	beq.w	8009e2a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	f003 0310 	and.w	r3, r3, #16
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d011      	beq.n	8009cee <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a6e      	ldr	r2, [pc, #440]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d004      	beq.n	8009cde <HAL_COMP_Init+0x156>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a6c      	ldr	r2, [pc, #432]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d103      	bne.n	8009ce6 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8009cde:	6938      	ldr	r0, [r7, #16]
 8009ce0:	f7ff feac 	bl	8009a3c <LL_EXTI_EnableRisingTrig_32_63>
 8009ce4:	e014      	b.n	8009d10 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009ce6:	6938      	ldr	r0, [r7, #16]
 8009ce8:	f7ff fe96 	bl	8009a18 <LL_EXTI_EnableRisingTrig_0_31>
 8009cec:	e010      	b.n	8009d10 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a65      	ldr	r2, [pc, #404]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d004      	beq.n	8009d02 <HAL_COMP_Init+0x17a>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a63      	ldr	r2, [pc, #396]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d103      	bne.n	8009d0a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009d02:	6938      	ldr	r0, [r7, #16]
 8009d04:	f7ff fec0 	bl	8009a88 <LL_EXTI_DisableRisingTrig_32_63>
 8009d08:	e002      	b.n	8009d10 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009d0a:	6938      	ldr	r0, [r7, #16]
 8009d0c:	f7ff fea8 	bl	8009a60 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	f003 0320 	and.w	r3, r3, #32
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d011      	beq.n	8009d40 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a59      	ldr	r2, [pc, #356]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d004      	beq.n	8009d30 <HAL_COMP_Init+0x1a8>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a58      	ldr	r2, [pc, #352]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d103      	bne.n	8009d38 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009d30:	6938      	ldr	r0, [r7, #16]
 8009d32:	f7ff fecf 	bl	8009ad4 <LL_EXTI_EnableFallingTrig_32_63>
 8009d36:	e014      	b.n	8009d62 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009d38:	6938      	ldr	r0, [r7, #16]
 8009d3a:	f7ff feb9 	bl	8009ab0 <LL_EXTI_EnableFallingTrig_0_31>
 8009d3e:	e010      	b.n	8009d62 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a50      	ldr	r2, [pc, #320]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d004      	beq.n	8009d54 <HAL_COMP_Init+0x1cc>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a4f      	ldr	r2, [pc, #316]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d103      	bne.n	8009d5c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009d54:	6938      	ldr	r0, [r7, #16]
 8009d56:	f7ff fee3 	bl	8009b20 <LL_EXTI_DisableFallingTrig_32_63>
 8009d5a:	e002      	b.n	8009d62 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009d5c:	6938      	ldr	r0, [r7, #16]
 8009d5e:	f7ff fecb 	bl	8009af8 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a48      	ldr	r2, [pc, #288]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d004      	beq.n	8009d76 <HAL_COMP_Init+0x1ee>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a46      	ldr	r2, [pc, #280]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d103      	bne.n	8009d7e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009d76:	6938      	ldr	r0, [r7, #16]
 8009d78:	f7ff fef6 	bl	8009b68 <LL_EXTI_ClearFlag_32_63>
 8009d7c:	e002      	b.n	8009d84 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009d7e:	6938      	ldr	r0, [r7, #16]
 8009d80:	f7ff fee2 	bl	8009b48 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	f003 0302 	and.w	r3, r3, #2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d011      	beq.n	8009db4 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a3c      	ldr	r2, [pc, #240]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d004      	beq.n	8009da4 <HAL_COMP_Init+0x21c>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a3b      	ldr	r2, [pc, #236]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d103      	bne.n	8009dac <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009da4:	6938      	ldr	r0, [r7, #16]
 8009da6:	f7ff fdfd 	bl	80099a4 <LL_EXTI_EnableEvent_32_63>
 8009daa:	e014      	b.n	8009dd6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009dac:	6938      	ldr	r0, [r7, #16]
 8009dae:	f7ff fde7 	bl	8009980 <LL_EXTI_EnableEvent_0_31>
 8009db2:	e010      	b.n	8009dd6 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a33      	ldr	r2, [pc, #204]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d004      	beq.n	8009dc8 <HAL_COMP_Init+0x240>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a32      	ldr	r2, [pc, #200]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d103      	bne.n	8009dd0 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009dc8:	6938      	ldr	r0, [r7, #16]
 8009dca:	f7ff fe11 	bl	80099f0 <LL_EXTI_DisableEvent_32_63>
 8009dce:	e002      	b.n	8009dd6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009dd0:	6938      	ldr	r0, [r7, #16]
 8009dd2:	f7ff fdf9 	bl	80099c8 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d011      	beq.n	8009e06 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a28      	ldr	r2, [pc, #160]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d004      	beq.n	8009df6 <HAL_COMP_Init+0x26e>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a26      	ldr	r2, [pc, #152]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d103      	bne.n	8009dfe <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009df6:	6938      	ldr	r0, [r7, #16]
 8009df8:	f7ff fd88 	bl	800990c <LL_EXTI_EnableIT_32_63>
 8009dfc:	e04b      	b.n	8009e96 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009dfe:	6938      	ldr	r0, [r7, #16]
 8009e00:	f7ff fd72 	bl	80098e8 <LL_EXTI_EnableIT_0_31>
 8009e04:	e047      	b.n	8009e96 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a1f      	ldr	r2, [pc, #124]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d004      	beq.n	8009e1a <HAL_COMP_Init+0x292>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a1d      	ldr	r2, [pc, #116]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d103      	bne.n	8009e22 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009e1a:	6938      	ldr	r0, [r7, #16]
 8009e1c:	f7ff fd9c 	bl	8009958 <LL_EXTI_DisableIT_32_63>
 8009e20:	e039      	b.n	8009e96 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009e22:	6938      	ldr	r0, [r7, #16]
 8009e24:	f7ff fd84 	bl	8009930 <LL_EXTI_DisableIT_0_31>
 8009e28:	e035      	b.n	8009e96 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a16      	ldr	r2, [pc, #88]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d004      	beq.n	8009e3e <HAL_COMP_Init+0x2b6>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a14      	ldr	r2, [pc, #80]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d103      	bne.n	8009e46 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009e3e:	6938      	ldr	r0, [r7, #16]
 8009e40:	f7ff fdd6 	bl	80099f0 <LL_EXTI_DisableEvent_32_63>
 8009e44:	e002      	b.n	8009e4c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009e46:	6938      	ldr	r0, [r7, #16]
 8009e48:	f7ff fdbe 	bl	80099c8 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a0d      	ldr	r2, [pc, #52]	; (8009e88 <HAL_COMP_Init+0x300>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d004      	beq.n	8009e60 <HAL_COMP_Init+0x2d8>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a0c      	ldr	r2, [pc, #48]	; (8009e8c <HAL_COMP_Init+0x304>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d117      	bne.n	8009e90 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009e60:	6938      	ldr	r0, [r7, #16]
 8009e62:	f7ff fd79 	bl	8009958 <LL_EXTI_DisableIT_32_63>
 8009e66:	e016      	b.n	8009e96 <HAL_COMP_Init+0x30e>
 8009e68:	ff007e0f 	.word	0xff007e0f
 8009e6c:	20000ca8 	.word	0x20000ca8
 8009e70:	053e2d63 	.word	0x053e2d63
 8009e74:	40010200 	.word	0x40010200
 8009e78:	40010204 	.word	0x40010204
 8009e7c:	40010208 	.word	0x40010208
 8009e80:	4001020c 	.word	0x4001020c
 8009e84:	40010210 	.word	0x40010210
 8009e88:	40010214 	.word	0x40010214
 8009e8c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009e90:	6938      	ldr	r0, [r7, #16]
 8009e92:	f7ff fd4d 	bl	8009930 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	7f5b      	ldrb	r3, [r3, #29]
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3720      	adds	r7, #32
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <__NVIC_SetPriorityGrouping>:
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f003 0307 	and.w	r3, r3, #7
 8009ebe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009ec0:	4b0c      	ldr	r3, [pc, #48]	; (8009ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009ecc:	4013      	ands	r3, r2
 8009ece:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ee2:	4a04      	ldr	r2, [pc, #16]	; (8009ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	60d3      	str	r3, [r2, #12]
}
 8009ee8:	bf00      	nop
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	e000ed00 	.word	0xe000ed00

08009ef8 <__NVIC_GetPriorityGrouping>:
{
 8009ef8:	b480      	push	{r7}
 8009efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009efc:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <__NVIC_GetPriorityGrouping+0x18>)
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	0a1b      	lsrs	r3, r3, #8
 8009f02:	f003 0307 	and.w	r3, r3, #7
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	e000ed00 	.word	0xe000ed00

08009f14 <__NVIC_EnableIRQ>:
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	db0b      	blt.n	8009f3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	f003 021f 	and.w	r2, r3, #31
 8009f2c:	4907      	ldr	r1, [pc, #28]	; (8009f4c <__NVIC_EnableIRQ+0x38>)
 8009f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f32:	095b      	lsrs	r3, r3, #5
 8009f34:	2001      	movs	r0, #1
 8009f36:	fa00 f202 	lsl.w	r2, r0, r2
 8009f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009f3e:	bf00      	nop
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	e000e100 	.word	0xe000e100

08009f50 <__NVIC_SetPriority>:
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	6039      	str	r1, [r7, #0]
 8009f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	db0a      	blt.n	8009f7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	490c      	ldr	r1, [pc, #48]	; (8009f9c <__NVIC_SetPriority+0x4c>)
 8009f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f6e:	0112      	lsls	r2, r2, #4
 8009f70:	b2d2      	uxtb	r2, r2
 8009f72:	440b      	add	r3, r1
 8009f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009f78:	e00a      	b.n	8009f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	4908      	ldr	r1, [pc, #32]	; (8009fa0 <__NVIC_SetPriority+0x50>)
 8009f80:	79fb      	ldrb	r3, [r7, #7]
 8009f82:	f003 030f 	and.w	r3, r3, #15
 8009f86:	3b04      	subs	r3, #4
 8009f88:	0112      	lsls	r2, r2, #4
 8009f8a:	b2d2      	uxtb	r2, r2
 8009f8c:	440b      	add	r3, r1
 8009f8e:	761a      	strb	r2, [r3, #24]
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	e000e100 	.word	0xe000e100
 8009fa0:	e000ed00 	.word	0xe000ed00

08009fa4 <NVIC_EncodePriority>:
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b089      	sub	sp, #36	; 0x24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f003 0307 	and.w	r3, r3, #7
 8009fb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	f1c3 0307 	rsb	r3, r3, #7
 8009fbe:	2b04      	cmp	r3, #4
 8009fc0:	bf28      	it	cs
 8009fc2:	2304      	movcs	r3, #4
 8009fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	3304      	adds	r3, #4
 8009fca:	2b06      	cmp	r3, #6
 8009fcc:	d902      	bls.n	8009fd4 <NVIC_EncodePriority+0x30>
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	3b03      	subs	r3, #3
 8009fd2:	e000      	b.n	8009fd6 <NVIC_EncodePriority+0x32>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe2:	43da      	mvns	r2, r3
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	401a      	ands	r2, r3
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff6:	43d9      	mvns	r1, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ffc:	4313      	orrs	r3, r2
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3724      	adds	r7, #36	; 0x24
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
	...

0800a00c <SysTick_Config>:
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3b01      	subs	r3, #1
 800a018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a01c:	d301      	bcc.n	800a022 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800a01e:	2301      	movs	r3, #1
 800a020:	e00f      	b.n	800a042 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a022:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <SysTick_Config+0x40>)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3b01      	subs	r3, #1
 800a028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a02a:	210f      	movs	r1, #15
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a030:	f7ff ff8e 	bl	8009f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <SysTick_Config+0x40>)
 800a036:	2200      	movs	r2, #0
 800a038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a03a:	4b04      	ldr	r3, [pc, #16]	; (800a04c <SysTick_Config+0x40>)
 800a03c:	2207      	movs	r2, #7
 800a03e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	e000e010 	.word	0xe000e010

0800a050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff ff29 	bl	8009eb0 <__NVIC_SetPriorityGrouping>
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b086      	sub	sp, #24
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	4603      	mov	r3, r0
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
 800a072:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a074:	f7ff ff40 	bl	8009ef8 <__NVIC_GetPriorityGrouping>
 800a078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	68b9      	ldr	r1, [r7, #8]
 800a07e:	6978      	ldr	r0, [r7, #20]
 800a080:	f7ff ff90 	bl	8009fa4 <NVIC_EncodePriority>
 800a084:	4602      	mov	r2, r0
 800a086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a08a:	4611      	mov	r1, r2
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff ff5f 	bl	8009f50 <__NVIC_SetPriority>
}
 800a092:	bf00      	nop
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a0a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff ff33 	bl	8009f14 <__NVIC_EnableIRQ>
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7ff ffa4 	bl	800a00c <SysTick_Config>
 800a0c4:	4603      	mov	r3, r0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b082      	sub	sp, #8
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e014      	b.n	800a10a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	791b      	ldrb	r3, [r3, #4]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d105      	bne.n	800a0f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7fc fff7 	bl	80070e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	795b      	ldrb	r3, [r3, #5]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d101      	bne.n	800a128 <HAL_DAC_Start+0x16>
 800a124:	2302      	movs	r3, #2
 800a126:	e043      	b.n	800a1b0 <HAL_DAC_Start+0x9e>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2202      	movs	r2, #2
 800a132:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6819      	ldr	r1, [r3, #0]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2201      	movs	r2, #1
 800a142:	409a      	lsls	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	430a      	orrs	r2, r1
 800a14a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800a14c:	2001      	movs	r0, #1
 800a14e:	f7fe fb4d 	bl	80087ec <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10f      	bne.n	800a178 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a162:	2b02      	cmp	r3, #2
 800a164:	d11d      	bne.n	800a1a2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f042 0201 	orr.w	r2, r2, #1
 800a174:	605a      	str	r2, [r3, #4]
 800a176:	e014      	b.n	800a1a2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	f003 0310 	and.w	r3, r3, #16
 800a188:	2102      	movs	r1, #2
 800a18a:	fa01 f303 	lsl.w	r3, r1, r3
 800a18e:	429a      	cmp	r2, r3
 800a190:	d107      	bne.n	800a1a2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f042 0202 	orr.w	r2, r2, #2
 800a1a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	795b      	ldrb	r3, [r3, #5]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <HAL_DAC_Start_DMA+0x1e>
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	e0a1      	b.n	800a31a <HAL_DAC_Start_DMA+0x162>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d12a      	bne.n	800a23e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	4a4d      	ldr	r2, [pc, #308]	; (800a324 <HAL_DAC_Start_DMA+0x16c>)
 800a1ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	4a4c      	ldr	r2, [pc, #304]	; (800a328 <HAL_DAC_Start_DMA+0x170>)
 800a1f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	4a4b      	ldr	r2, [pc, #300]	; (800a32c <HAL_DAC_Start_DMA+0x174>)
 800a1fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a20e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800a210:	6a3b      	ldr	r3, [r7, #32]
 800a212:	2b04      	cmp	r3, #4
 800a214:	d009      	beq.n	800a22a <HAL_DAC_Start_DMA+0x72>
 800a216:	2b08      	cmp	r3, #8
 800a218:	d00c      	beq.n	800a234 <HAL_DAC_Start_DMA+0x7c>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d000      	beq.n	800a220 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800a21e:	e039      	b.n	800a294 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3308      	adds	r3, #8
 800a226:	613b      	str	r3, [r7, #16]
        break;
 800a228:	e034      	b.n	800a294 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	330c      	adds	r3, #12
 800a230:	613b      	str	r3, [r7, #16]
        break;
 800a232:	e02f      	b.n	800a294 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3310      	adds	r3, #16
 800a23a:	613b      	str	r3, [r7, #16]
        break;
 800a23c:	e02a      	b.n	800a294 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	4a3b      	ldr	r2, [pc, #236]	; (800a330 <HAL_DAC_Start_DMA+0x178>)
 800a244:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	4a3a      	ldr	r2, [pc, #232]	; (800a334 <HAL_DAC_Start_DMA+0x17c>)
 800a24c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	4a39      	ldr	r2, [pc, #228]	; (800a338 <HAL_DAC_Start_DMA+0x180>)
 800a254:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a264:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	2b04      	cmp	r3, #4
 800a26a:	d009      	beq.n	800a280 <HAL_DAC_Start_DMA+0xc8>
 800a26c:	2b08      	cmp	r3, #8
 800a26e:	d00c      	beq.n	800a28a <HAL_DAC_Start_DMA+0xd2>
 800a270:	2b00      	cmp	r3, #0
 800a272:	d000      	beq.n	800a276 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800a274:	e00e      	b.n	800a294 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3314      	adds	r3, #20
 800a27c:	613b      	str	r3, [r7, #16]
        break;
 800a27e:	e009      	b.n	800a294 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	3318      	adds	r3, #24
 800a286:	613b      	str	r3, [r7, #16]
        break;
 800a288:	e004      	b.n	800a294 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	331c      	adds	r3, #28
 800a290:	613b      	str	r3, [r7, #16]
        break;
 800a292:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d111      	bne.n	800a2be <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6898      	ldr	r0, [r3, #8]
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	f000 fbd2 	bl	800aa5c <HAL_DMA_Start_IT>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75fb      	strb	r3, [r7, #23]
 800a2bc:	e010      	b.n	800a2e0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a2cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	68d8      	ldr	r0, [r3, #12]
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	f000 fbc0 	bl	800aa5c <HAL_DMA_Start_IT>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10f      	bne.n	800a30c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6819      	ldr	r1, [r3, #0]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	f003 0310 	and.w	r3, r3, #16
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	409a      	lsls	r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a304:	2001      	movs	r0, #1
 800a306:	f7fe fa71 	bl	80087ec <HAL_Delay>
 800a30a:	e005      	b.n	800a318 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	f043 0204 	orr.w	r2, r3, #4
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a318:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	0800a7f9 	.word	0x0800a7f9
 800a328:	0800a81b 	.word	0x0800a81b
 800a32c:	0800a837 	.word	0x0800a837
 800a330:	0800a8a1 	.word	0x0800a8a1
 800a334:	0800a8c3 	.word	0x0800a8c3
 800a338:	0800a8df 	.word	0x0800a8df

0800a33c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6819      	ldr	r1, [r3, #0]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	f003 0310 	and.w	r3, r3, #16
 800a352:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a356:	fa02 f303 	lsl.w	r3, r2, r3
 800a35a:	43da      	mvns	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	400a      	ands	r2, r1
 800a362:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6819      	ldr	r1, [r3, #0]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	f003 0310 	and.w	r3, r3, #16
 800a370:	2201      	movs	r2, #1
 800a372:	fa02 f303 	lsl.w	r3, r2, r3
 800a376:	43da      	mvns	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	400a      	ands	r2, r1
 800a37e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a380:	2001      	movs	r0, #1
 800a382:	f7fe fa33 	bl	80087ec <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10f      	bne.n	800a3ac <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fbde 	bl	800ab52 <HAL_DMA_Abort>
 800a396:	4603      	mov	r3, r0
 800a398:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	e00e      	b.n	800a3ca <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 fbce 	bl	800ab52 <HAL_DMA_Abort>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a3c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2204      	movs	r2, #4
 800a3d4:	711a      	strb	r2, [r3, #4]
 800a3d6:	e002      	b.n	800a3de <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d105      	bne.n	800a418 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4413      	add	r3, r2
 800a412:	3308      	adds	r3, #8
 800a414:	617b      	str	r3, [r7, #20]
 800a416:	e004      	b.n	800a422 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4413      	add	r3, r2
 800a41e:	3314      	adds	r3, #20
 800a420:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	461a      	mov	r2, r3
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d103      	bne.n	800a48c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	e002      	b.n	800a492 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a492:	4618      	mov	r0, r3
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
	...

0800a4a0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08a      	sub	sp, #40	; 0x28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	795b      	ldrb	r3, [r3, #5]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <HAL_DAC_ConfigChannel+0x1c>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e194      	b.n	800a7e6 <HAL_DAC_ConfigChannel+0x346>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	d174      	bne.n	800a5ba <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d137      	bne.n	800a546 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a4d6:	f7fe f97d 	bl	80087d4 <HAL_GetTick>
 800a4da:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a4dc:	e011      	b.n	800a502 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a4de:	f7fe f979 	bl	80087d4 <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d90a      	bls.n	800a502 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	f043 0208 	orr.w	r2, r3, #8
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a4fe:	2303      	movs	r3, #3
 800a500:	e171      	b.n	800a7e6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e6      	bne.n	800a4de <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a510:	2001      	movs	r0, #1
 800a512:	f7fe f96b 	bl	80087ec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a51e:	641a      	str	r2, [r3, #64]	; 0x40
 800a520:	e01e      	b.n	800a560 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a522:	f7fe f957 	bl	80087d4 <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d90a      	bls.n	800a546 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	f043 0208 	orr.w	r2, r3, #8
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2203      	movs	r2, #3
 800a540:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e14f      	b.n	800a7e6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dbe8      	blt.n	800a522 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a550:	2001      	movs	r0, #1
 800a552:	f7fe f94b 	bl	80087ec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a55e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f003 0310 	and.w	r3, r3, #16
 800a56c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a570:	fa01 f303 	lsl.w	r3, r1, r3
 800a574:	43db      	mvns	r3, r3
 800a576:	ea02 0103 	and.w	r1, r2, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f003 0310 	and.w	r3, r3, #16
 800a584:	409a      	lsls	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f003 0310 	and.w	r3, r3, #16
 800a59a:	21ff      	movs	r1, #255	; 0xff
 800a59c:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a0:	43db      	mvns	r3, r3
 800a5a2:	ea02 0103 	and.w	r1, r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f003 0310 	and.w	r3, r3, #16
 800a5b0:	409a      	lsls	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d11d      	bne.n	800a5fe <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f003 0310 	and.w	r3, r3, #16
 800a5d0:	221f      	movs	r2, #31
 800a5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d6:	43db      	mvns	r3, r3
 800a5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5da:	4013      	ands	r3, r2
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f003 0310 	and.w	r3, r3, #16
 800a5ea:	69ba      	ldr	r2, [r7, #24]
 800a5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a604:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f003 0310 	and.w	r3, r3, #16
 800a60c:	2207      	movs	r2, #7
 800a60e:	fa02 f303 	lsl.w	r3, r2, r3
 800a612:	43db      	mvns	r3, r3
 800a614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a616:	4013      	ands	r3, r2
 800a618:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a626:	2300      	movs	r3, #0
 800a628:	623b      	str	r3, [r7, #32]
 800a62a:	e011      	b.n	800a650 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d002      	beq.n	800a63e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a638:	2301      	movs	r3, #1
 800a63a:	623b      	str	r3, [r7, #32]
 800a63c:	e008      	b.n	800a650 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d102      	bne.n	800a64c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a646:	2301      	movs	r3, #1
 800a648:	623b      	str	r3, [r7, #32]
 800a64a:	e001      	b.n	800a650 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	689a      	ldr	r2, [r3, #8]
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	4313      	orrs	r3, r2
 800a65a:	6a3a      	ldr	r2, [r7, #32]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f003 0310 	and.w	r3, r3, #16
 800a666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a66a:	fa02 f303 	lsl.w	r3, r2, r3
 800a66e:	43db      	mvns	r3, r3
 800a670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a672:	4013      	ands	r3, r2
 800a674:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	791b      	ldrb	r3, [r3, #4]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d102      	bne.n	800a684 <HAL_DAC_ConfigChannel+0x1e4>
 800a67e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a682:	e000      	b.n	800a686 <HAL_DAC_ConfigChannel+0x1e6>
 800a684:	2300      	movs	r3, #0
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	4313      	orrs	r3, r2
 800a68a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f003 0310 	and.w	r3, r3, #16
 800a692:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a696:	fa02 f303 	lsl.w	r3, r2, r3
 800a69a:	43db      	mvns	r3, r3
 800a69c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a69e:	4013      	ands	r3, r2
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	795b      	ldrb	r3, [r3, #5]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d102      	bne.n	800a6b0 <HAL_DAC_ConfigChannel+0x210>
 800a6aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6ae:	e000      	b.n	800a6b2 <HAL_DAC_ConfigChannel+0x212>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d114      	bne.n	800a6f2 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a6c8:	f001 fae0 	bl	800bc8c <HAL_RCC_GetHCLKFreq>
 800a6cc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	4a47      	ldr	r2, [pc, #284]	; (800a7f0 <HAL_DAC_ConfigChannel+0x350>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d904      	bls.n	800a6e0 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a6de:	e00d      	b.n	800a6fc <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	4a44      	ldr	r2, [pc, #272]	; (800a7f4 <HAL_DAC_ConfigChannel+0x354>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d909      	bls.n	800a6fc <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a6f0:	e004      	b.n	800a6fc <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f003 0310 	and.w	r3, r3, #16
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	fa02 f303 	lsl.w	r3, r2, r3
 800a708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a70a:	4313      	orrs	r3, r2
 800a70c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6819      	ldr	r1, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f003 0310 	and.w	r3, r3, #16
 800a722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a726:	fa02 f303 	lsl.w	r3, r2, r3
 800a72a:	43da      	mvns	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	400a      	ands	r2, r1
 800a732:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f003 0310 	and.w	r3, r3, #16
 800a742:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a746:	fa02 f303 	lsl.w	r3, r2, r3
 800a74a:	43db      	mvns	r3, r3
 800a74c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a74e:	4013      	ands	r3, r2
 800a750:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f003 0310 	and.w	r3, r3, #16
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	fa02 f303 	lsl.w	r3, r2, r3
 800a764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a766:	4313      	orrs	r3, r2
 800a768:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a770:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6819      	ldr	r1, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f003 0310 	and.w	r3, r3, #16
 800a77e:	22c0      	movs	r2, #192	; 0xc0
 800a780:	fa02 f303 	lsl.w	r3, r2, r3
 800a784:	43da      	mvns	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	400a      	ands	r2, r1
 800a78c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	089b      	lsrs	r3, r3, #2
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	089b      	lsrs	r3, r3, #2
 800a7a0:	021b      	lsls	r3, r3, #8
 800a7a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a7a6:	69ba      	ldr	r2, [r7, #24]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f003 0310 	and.w	r3, r3, #16
 800a7b8:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	ea02 0103 	and.w	r1, r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f003 0310 	and.w	r3, r3, #16
 800a7cc:	69ba      	ldr	r2, [r7, #24]
 800a7ce:	409a      	lsls	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3728      	adds	r7, #40	; 0x28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	09896800 	.word	0x09896800
 800a7f4:	04c4b400 	.word	0x04c4b400

0800a7f8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a804:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff fe16 	bl	800a438 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2201      	movs	r2, #1
 800a810:	711a      	strb	r2, [r3, #4]
}
 800a812:	bf00      	nop
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a826:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f7ff fe0f 	bl	800a44c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a82e:	bf00      	nop
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a842:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	f043 0204 	orr.w	r2, r3, #4
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f7ff fe05 	bl	800a460 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2201      	movs	r2, #1
 800a85a:	711a      	strb	r2, [r3, #4]
}
 800a85c:	bf00      	nop
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7ff ffd8 	bl	800a864 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	711a      	strb	r2, [r3, #4]
}
 800a8ba:	bf00      	nop
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f7ff ffd1 	bl	800a878 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a8d6:	bf00      	nop
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	f043 0204 	orr.w	r2, r3, #4
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7ff ffc7 	bl	800a88c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	711a      	strb	r2, [r3, #4]
}
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e08d      	b.n	800aa3a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	4b47      	ldr	r3, [pc, #284]	; (800aa44 <HAL_DMA_Init+0x138>)
 800a926:	429a      	cmp	r2, r3
 800a928:	d80f      	bhi.n	800a94a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	4b45      	ldr	r3, [pc, #276]	; (800aa48 <HAL_DMA_Init+0x13c>)
 800a932:	4413      	add	r3, r2
 800a934:	4a45      	ldr	r2, [pc, #276]	; (800aa4c <HAL_DMA_Init+0x140>)
 800a936:	fba2 2303 	umull	r2, r3, r2, r3
 800a93a:	091b      	lsrs	r3, r3, #4
 800a93c:	009a      	lsls	r2, r3, #2
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a42      	ldr	r2, [pc, #264]	; (800aa50 <HAL_DMA_Init+0x144>)
 800a946:	641a      	str	r2, [r3, #64]	; 0x40
 800a948:	e00e      	b.n	800a968 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	4b40      	ldr	r3, [pc, #256]	; (800aa54 <HAL_DMA_Init+0x148>)
 800a952:	4413      	add	r3, r2
 800a954:	4a3d      	ldr	r2, [pc, #244]	; (800aa4c <HAL_DMA_Init+0x140>)
 800a956:	fba2 2303 	umull	r2, r3, r2, r3
 800a95a:	091b      	lsrs	r3, r3, #4
 800a95c:	009a      	lsls	r2, r3, #2
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a3c      	ldr	r2, [pc, #240]	; (800aa58 <HAL_DMA_Init+0x14c>)
 800a966:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a982:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a98c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fa10 	bl	800ade0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9c8:	d102      	bne.n	800a9d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d8:	b2d2      	uxtb	r2, r2
 800a9da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a9e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d010      	beq.n	800aa10 <HAL_DMA_Init+0x104>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d80c      	bhi.n	800aa10 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fa30 	bl	800ae5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa0c:	605a      	str	r2, [r3, #4]
 800aa0e:	e008      	b.n	800aa22 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	40020407 	.word	0x40020407
 800aa48:	bffdfff8 	.word	0xbffdfff8
 800aa4c:	cccccccd 	.word	0xcccccccd
 800aa50:	40020000 	.word	0x40020000
 800aa54:	bffdfbf8 	.word	0xbffdfbf8
 800aa58:	40020400 	.word	0x40020400

0800aa5c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
 800aa68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d101      	bne.n	800aa7c <HAL_DMA_Start_IT+0x20>
 800aa78:	2302      	movs	r3, #2
 800aa7a:	e066      	b.n	800ab4a <HAL_DMA_Start_IT+0xee>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d155      	bne.n	800ab3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2202      	movs	r2, #2
 800aa94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f022 0201 	bic.w	r2, r2, #1
 800aaac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	68b9      	ldr	r1, [r7, #8]
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 f954 	bl	800ad62 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d008      	beq.n	800aad4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f042 020e 	orr.w	r2, r2, #14
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	e00f      	b.n	800aaf4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0204 	bic.w	r2, r2, #4
 800aae2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 020a 	orr.w	r2, r2, #10
 800aaf2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d007      	beq.n	800ab12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d007      	beq.n	800ab2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f042 0201 	orr.w	r2, r2, #1
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	e005      	b.n	800ab48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800ab44:	2302      	movs	r3, #2
 800ab46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b085      	sub	sp, #20
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d005      	beq.n	800ab76 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2204      	movs	r2, #4
 800ab6e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	73fb      	strb	r3, [r7, #15]
 800ab74:	e037      	b.n	800abe6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f022 020e 	bic.w	r2, r2, #14
 800ab84:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab94:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f022 0201 	bic.w	r2, r2, #1
 800aba4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abaa:	f003 021f 	and.w	r2, r3, #31
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb2:	2101      	movs	r1, #1
 800abb4:	fa01 f202 	lsl.w	r2, r1, r2
 800abb8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800abc2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00c      	beq.n	800abe6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800abda:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800abe4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac20:	f003 031f 	and.w	r3, r3, #31
 800ac24:	2204      	movs	r2, #4
 800ac26:	409a      	lsls	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d026      	beq.n	800ac7e <HAL_DMA_IRQHandler+0x7a>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	f003 0304 	and.w	r3, r3, #4
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d021      	beq.n	800ac7e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0320 	and.w	r3, r3, #32
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d107      	bne.n	800ac58 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f022 0204 	bic.w	r2, r2, #4
 800ac56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5c:	f003 021f 	and.w	r2, r3, #31
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac64:	2104      	movs	r1, #4
 800ac66:	fa01 f202 	lsl.w	r2, r1, r2
 800ac6a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d071      	beq.n	800ad58 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ac7c:	e06c      	b.n	800ad58 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac82:	f003 031f 	and.w	r3, r3, #31
 800ac86:	2202      	movs	r2, #2
 800ac88:	409a      	lsls	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d02e      	beq.n	800acf0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f003 0302 	and.w	r3, r3, #2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d029      	beq.n	800acf0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0320 	and.w	r3, r3, #32
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10b      	bne.n	800acc2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f022 020a 	bic.w	r2, r2, #10
 800acb8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc6:	f003 021f 	and.w	r2, r3, #31
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acce:	2102      	movs	r1, #2
 800acd0:	fa01 f202 	lsl.w	r2, r1, r2
 800acd4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d038      	beq.n	800ad58 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800acee:	e033      	b.n	800ad58 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf4:	f003 031f 	and.w	r3, r3, #31
 800acf8:	2208      	movs	r2, #8
 800acfa:	409a      	lsls	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4013      	ands	r3, r2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d02a      	beq.n	800ad5a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f003 0308 	and.w	r3, r3, #8
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d025      	beq.n	800ad5a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f022 020e 	bic.w	r2, r2, #14
 800ad1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad22:	f003 021f 	and.w	r2, r3, #31
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	fa01 f202 	lsl.w	r2, r1, r2
 800ad30:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d004      	beq.n	800ad5a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ad58:	bf00      	nop
 800ad5a:	bf00      	nop
}
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b085      	sub	sp, #20
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	607a      	str	r2, [r7, #4]
 800ad6e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ad78:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d004      	beq.n	800ad8c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ad8a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad90:	f003 021f 	and.w	r2, r3, #31
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	2101      	movs	r1, #1
 800ad9a:	fa01 f202 	lsl.w	r2, r1, r2
 800ad9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	2b10      	cmp	r3, #16
 800adae:	d108      	bne.n	800adc2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800adc0:	e007      	b.n	800add2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	60da      	str	r2, [r3, #12]
}
 800add2:	bf00      	nop
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b087      	sub	sp, #28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	461a      	mov	r2, r3
 800adee:	4b16      	ldr	r3, [pc, #88]	; (800ae48 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d802      	bhi.n	800adfa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800adf4:	4b15      	ldr	r3, [pc, #84]	; (800ae4c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800adf6:	617b      	str	r3, [r7, #20]
 800adf8:	e001      	b.n	800adfe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800adfa:	4b15      	ldr	r3, [pc, #84]	; (800ae50 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800adfc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	3b08      	subs	r3, #8
 800ae0a:	4a12      	ldr	r2, [pc, #72]	; (800ae54 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ae0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae10:	091b      	lsrs	r3, r3, #4
 800ae12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae18:	089b      	lsrs	r3, r3, #2
 800ae1a:	009a      	lsls	r2, r3, #2
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	4413      	add	r3, r2
 800ae20:	461a      	mov	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a0b      	ldr	r2, [pc, #44]	; (800ae58 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ae2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f003 031f 	and.w	r3, r3, #31
 800ae32:	2201      	movs	r2, #1
 800ae34:	409a      	lsls	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ae3a:	bf00      	nop
 800ae3c:	371c      	adds	r7, #28
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40020407 	.word	0x40020407
 800ae4c:	40020800 	.word	0x40020800
 800ae50:	40020820 	.word	0x40020820
 800ae54:	cccccccd 	.word	0xcccccccd
 800ae58:	40020880 	.word	0x40020880

0800ae5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	4b0b      	ldr	r3, [pc, #44]	; (800ae9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ae70:	4413      	add	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	461a      	mov	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a08      	ldr	r2, [pc, #32]	; (800aea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ae7e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	f003 031f 	and.w	r3, r3, #31
 800ae88:	2201      	movs	r2, #1
 800ae8a:	409a      	lsls	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ae90:	bf00      	nop
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	1000823f 	.word	0x1000823f
 800aea0:	40020940 	.word	0x40020940

0800aea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800aeb2:	e15a      	b.n	800b16a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	2101      	movs	r1, #1
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	fa01 f303 	lsl.w	r3, r1, r3
 800aec0:	4013      	ands	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 814c 	beq.w	800b164 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d00b      	beq.n	800aeec <HAL_GPIO_Init+0x48>
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d007      	beq.n	800aeec <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aee0:	2b11      	cmp	r3, #17
 800aee2:	d003      	beq.n	800aeec <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2b12      	cmp	r3, #18
 800aeea:	d130      	bne.n	800af4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	005b      	lsls	r3, r3, #1
 800aef6:	2203      	movs	r2, #3
 800aef8:	fa02 f303 	lsl.w	r3, r2, r3
 800aefc:	43db      	mvns	r3, r3
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	4013      	ands	r3, r2
 800af02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	68da      	ldr	r2, [r3, #12]
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	fa02 f303 	lsl.w	r3, r2, r3
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af22:	2201      	movs	r2, #1
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	fa02 f303 	lsl.w	r3, r2, r3
 800af2a:	43db      	mvns	r3, r3
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	4013      	ands	r3, r2
 800af30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	091b      	lsrs	r3, r3, #4
 800af38:	f003 0201 	and.w	r2, r3, #1
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	fa02 f303 	lsl.w	r3, r2, r3
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	4313      	orrs	r3, r2
 800af46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	2203      	movs	r2, #3
 800af5a:	fa02 f303 	lsl.w	r3, r2, r3
 800af5e:	43db      	mvns	r3, r3
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	4013      	ands	r3, r2
 800af64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	689a      	ldr	r2, [r3, #8]
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	fa02 f303 	lsl.w	r3, r2, r3
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	4313      	orrs	r3, r2
 800af76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	2b02      	cmp	r3, #2
 800af84:	d003      	beq.n	800af8e <HAL_GPIO_Init+0xea>
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	2b12      	cmp	r3, #18
 800af8c:	d123      	bne.n	800afd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	08da      	lsrs	r2, r3, #3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3208      	adds	r2, #8
 800af96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	f003 0307 	and.w	r3, r3, #7
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	220f      	movs	r2, #15
 800afa6:	fa02 f303 	lsl.w	r3, r2, r3
 800afaa:	43db      	mvns	r3, r3
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	4013      	ands	r3, r2
 800afb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	691a      	ldr	r2, [r3, #16]
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f003 0307 	and.w	r3, r3, #7
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	fa02 f303 	lsl.w	r3, r2, r3
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	08da      	lsrs	r2, r3, #3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3208      	adds	r2, #8
 800afd0:	6939      	ldr	r1, [r7, #16]
 800afd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	2203      	movs	r2, #3
 800afe2:	fa02 f303 	lsl.w	r3, r2, r3
 800afe6:	43db      	mvns	r3, r3
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	4013      	ands	r3, r2
 800afec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f003 0203 	and.w	r2, r3, #3
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	fa02 f303 	lsl.w	r3, r2, r3
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	4313      	orrs	r3, r2
 800b002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 80a6 	beq.w	800b164 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b018:	4b5b      	ldr	r3, [pc, #364]	; (800b188 <HAL_GPIO_Init+0x2e4>)
 800b01a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b01c:	4a5a      	ldr	r2, [pc, #360]	; (800b188 <HAL_GPIO_Init+0x2e4>)
 800b01e:	f043 0301 	orr.w	r3, r3, #1
 800b022:	6613      	str	r3, [r2, #96]	; 0x60
 800b024:	4b58      	ldr	r3, [pc, #352]	; (800b188 <HAL_GPIO_Init+0x2e4>)
 800b026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	60bb      	str	r3, [r7, #8]
 800b02e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b030:	4a56      	ldr	r2, [pc, #344]	; (800b18c <HAL_GPIO_Init+0x2e8>)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	089b      	lsrs	r3, r3, #2
 800b036:	3302      	adds	r3, #2
 800b038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b03c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f003 0303 	and.w	r3, r3, #3
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	220f      	movs	r2, #15
 800b048:	fa02 f303 	lsl.w	r3, r2, r3
 800b04c:	43db      	mvns	r3, r3
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	4013      	ands	r3, r2
 800b052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b05a:	d01f      	beq.n	800b09c <HAL_GPIO_Init+0x1f8>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a4c      	ldr	r2, [pc, #304]	; (800b190 <HAL_GPIO_Init+0x2ec>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d019      	beq.n	800b098 <HAL_GPIO_Init+0x1f4>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a4b      	ldr	r2, [pc, #300]	; (800b194 <HAL_GPIO_Init+0x2f0>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d013      	beq.n	800b094 <HAL_GPIO_Init+0x1f0>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a4a      	ldr	r2, [pc, #296]	; (800b198 <HAL_GPIO_Init+0x2f4>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d00d      	beq.n	800b090 <HAL_GPIO_Init+0x1ec>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a49      	ldr	r2, [pc, #292]	; (800b19c <HAL_GPIO_Init+0x2f8>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d007      	beq.n	800b08c <HAL_GPIO_Init+0x1e8>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a48      	ldr	r2, [pc, #288]	; (800b1a0 <HAL_GPIO_Init+0x2fc>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d101      	bne.n	800b088 <HAL_GPIO_Init+0x1e4>
 800b084:	2305      	movs	r3, #5
 800b086:	e00a      	b.n	800b09e <HAL_GPIO_Init+0x1fa>
 800b088:	2306      	movs	r3, #6
 800b08a:	e008      	b.n	800b09e <HAL_GPIO_Init+0x1fa>
 800b08c:	2304      	movs	r3, #4
 800b08e:	e006      	b.n	800b09e <HAL_GPIO_Init+0x1fa>
 800b090:	2303      	movs	r3, #3
 800b092:	e004      	b.n	800b09e <HAL_GPIO_Init+0x1fa>
 800b094:	2302      	movs	r3, #2
 800b096:	e002      	b.n	800b09e <HAL_GPIO_Init+0x1fa>
 800b098:	2301      	movs	r3, #1
 800b09a:	e000      	b.n	800b09e <HAL_GPIO_Init+0x1fa>
 800b09c:	2300      	movs	r3, #0
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	f002 0203 	and.w	r2, r2, #3
 800b0a4:	0092      	lsls	r2, r2, #2
 800b0a6:	4093      	lsls	r3, r2
 800b0a8:	693a      	ldr	r2, [r7, #16]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b0ae:	4937      	ldr	r1, [pc, #220]	; (800b18c <HAL_GPIO_Init+0x2e8>)
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	089b      	lsrs	r3, r3, #2
 800b0b4:	3302      	adds	r3, #2
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b0bc:	4b39      	ldr	r3, [pc, #228]	; (800b1a4 <HAL_GPIO_Init+0x300>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	43db      	mvns	r3, r3
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b0e0:	4a30      	ldr	r2, [pc, #192]	; (800b1a4 <HAL_GPIO_Init+0x300>)
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800b0e6:	4b2f      	ldr	r3, [pc, #188]	; (800b1a4 <HAL_GPIO_Init+0x300>)
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	43db      	mvns	r3, r3
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b10a:	4a26      	ldr	r2, [pc, #152]	; (800b1a4 <HAL_GPIO_Init+0x300>)
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b110:	4b24      	ldr	r3, [pc, #144]	; (800b1a4 <HAL_GPIO_Init+0x300>)
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	43db      	mvns	r3, r3
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	4013      	ands	r3, r2
 800b11e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b134:	4a1b      	ldr	r2, [pc, #108]	; (800b1a4 <HAL_GPIO_Init+0x300>)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b13a:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <HAL_GPIO_Init+0x300>)
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	43db      	mvns	r3, r3
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	4013      	ands	r3, r2
 800b148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b15e:	4a11      	ldr	r2, [pc, #68]	; (800b1a4 <HAL_GPIO_Init+0x300>)
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	3301      	adds	r3, #1
 800b168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	f47f ae9d 	bne.w	800aeb4 <HAL_GPIO_Init+0x10>
  }
}
 800b17a:	bf00      	nop
 800b17c:	371c      	adds	r7, #28
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	40021000 	.word	0x40021000
 800b18c:	40010000 	.word	0x40010000
 800b190:	48000400 	.word	0x48000400
 800b194:	48000800 	.word	0x48000800
 800b198:	48000c00 	.word	0x48000c00
 800b19c:	48001000 	.word	0x48001000
 800b1a0:	48001400 	.word	0x48001400
 800b1a4:	40010400 	.word	0x40010400

0800b1a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	807b      	strh	r3, [r7, #2]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b1b8:	787b      	ldrb	r3, [r7, #1]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b1be:	887a      	ldrh	r2, [r7, #2]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b1c4:	e002      	b.n	800b1cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b1c6:	887a      	ldrh	r2, [r7, #2]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d141      	bne.n	800b26a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b1e6:	4b4b      	ldr	r3, [pc, #300]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b1ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1f2:	d131      	bne.n	800b258 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b1f4:	4b47      	ldr	r3, [pc, #284]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1fa:	4a46      	ldr	r2, [pc, #280]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b200:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b204:	4b43      	ldr	r3, [pc, #268]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b20c:	4a41      	ldr	r2, [pc, #260]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b20e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b212:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b214:	4b40      	ldr	r3, [pc, #256]	; (800b318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2232      	movs	r2, #50	; 0x32
 800b21a:	fb02 f303 	mul.w	r3, r2, r3
 800b21e:	4a3f      	ldr	r2, [pc, #252]	; (800b31c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b220:	fba2 2303 	umull	r2, r3, r2, r3
 800b224:	0c9b      	lsrs	r3, r3, #18
 800b226:	3301      	adds	r3, #1
 800b228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b22a:	e002      	b.n	800b232 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	3b01      	subs	r3, #1
 800b230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b232:	4b38      	ldr	r3, [pc, #224]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b23a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b23e:	d102      	bne.n	800b246 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1f2      	bne.n	800b22c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b246:	4b33      	ldr	r3, [pc, #204]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b248:	695b      	ldr	r3, [r3, #20]
 800b24a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b24e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b252:	d158      	bne.n	800b306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e057      	b.n	800b308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b258:	4b2e      	ldr	r3, [pc, #184]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b25e:	4a2d      	ldr	r2, [pc, #180]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b264:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b268:	e04d      	b.n	800b306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b270:	d141      	bne.n	800b2f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b272:	4b28      	ldr	r3, [pc, #160]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b27a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b27e:	d131      	bne.n	800b2e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b280:	4b24      	ldr	r3, [pc, #144]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b286:	4a23      	ldr	r2, [pc, #140]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b28c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b290:	4b20      	ldr	r3, [pc, #128]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b298:	4a1e      	ldr	r2, [pc, #120]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b29a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b29e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b2a0:	4b1d      	ldr	r3, [pc, #116]	; (800b318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2232      	movs	r2, #50	; 0x32
 800b2a6:	fb02 f303 	mul.w	r3, r2, r3
 800b2aa:	4a1c      	ldr	r2, [pc, #112]	; (800b31c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b0:	0c9b      	lsrs	r3, r3, #18
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2b6:	e002      	b.n	800b2be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2be:	4b15      	ldr	r3, [pc, #84]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2ca:	d102      	bne.n	800b2d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1f2      	bne.n	800b2b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b2d2:	4b10      	ldr	r3, [pc, #64]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2de:	d112      	bne.n	800b306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e011      	b.n	800b308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b2e4:	4b0b      	ldr	r3, [pc, #44]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2ea:	4a0a      	ldr	r2, [pc, #40]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b2f4:	e007      	b.n	800b306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b2f6:	4b07      	ldr	r3, [pc, #28]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b2fe:	4a05      	ldr	r2, [pc, #20]	; (800b314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b304:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr
 800b314:	40007000 	.word	0x40007000
 800b318:	20000ca8 	.word	0x20000ca8
 800b31c:	431bde83 	.word	0x431bde83

0800b320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b088      	sub	sp, #32
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e308      	b.n	800b944 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d075      	beq.n	800b42a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b33e:	4ba3      	ldr	r3, [pc, #652]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f003 030c 	and.w	r3, r3, #12
 800b346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b348:	4ba0      	ldr	r3, [pc, #640]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f003 0303 	and.w	r3, r3, #3
 800b350:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	2b0c      	cmp	r3, #12
 800b356:	d102      	bne.n	800b35e <HAL_RCC_OscConfig+0x3e>
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d002      	beq.n	800b364 <HAL_RCC_OscConfig+0x44>
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	2b08      	cmp	r3, #8
 800b362:	d10b      	bne.n	800b37c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b364:	4b99      	ldr	r3, [pc, #612]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d05b      	beq.n	800b428 <HAL_RCC_OscConfig+0x108>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d157      	bne.n	800b428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e2e3      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b384:	d106      	bne.n	800b394 <HAL_RCC_OscConfig+0x74>
 800b386:	4b91      	ldr	r3, [pc, #580]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a90      	ldr	r2, [pc, #576]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b38c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b390:	6013      	str	r3, [r2, #0]
 800b392:	e01d      	b.n	800b3d0 <HAL_RCC_OscConfig+0xb0>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b39c:	d10c      	bne.n	800b3b8 <HAL_RCC_OscConfig+0x98>
 800b39e:	4b8b      	ldr	r3, [pc, #556]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a8a      	ldr	r2, [pc, #552]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b3a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b3a8:	6013      	str	r3, [r2, #0]
 800b3aa:	4b88      	ldr	r3, [pc, #544]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a87      	ldr	r2, [pc, #540]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b3b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3b4:	6013      	str	r3, [r2, #0]
 800b3b6:	e00b      	b.n	800b3d0 <HAL_RCC_OscConfig+0xb0>
 800b3b8:	4b84      	ldr	r3, [pc, #528]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a83      	ldr	r2, [pc, #524]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b3be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	4b81      	ldr	r3, [pc, #516]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a80      	ldr	r2, [pc, #512]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b3ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d013      	beq.n	800b400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3d8:	f7fd f9fc 	bl	80087d4 <HAL_GetTick>
 800b3dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b3de:	e008      	b.n	800b3f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3e0:	f7fd f9f8 	bl	80087d4 <HAL_GetTick>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	2b64      	cmp	r3, #100	; 0x64
 800b3ec:	d901      	bls.n	800b3f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	e2a8      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b3f2:	4b76      	ldr	r3, [pc, #472]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0f0      	beq.n	800b3e0 <HAL_RCC_OscConfig+0xc0>
 800b3fe:	e014      	b.n	800b42a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b400:	f7fd f9e8 	bl	80087d4 <HAL_GetTick>
 800b404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b406:	e008      	b.n	800b41a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b408:	f7fd f9e4 	bl	80087d4 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	2b64      	cmp	r3, #100	; 0x64
 800b414:	d901      	bls.n	800b41a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b416:	2303      	movs	r3, #3
 800b418:	e294      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b41a:	4b6c      	ldr	r3, [pc, #432]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1f0      	bne.n	800b408 <HAL_RCC_OscConfig+0xe8>
 800b426:	e000      	b.n	800b42a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0302 	and.w	r3, r3, #2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d075      	beq.n	800b522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b436:	4b65      	ldr	r3, [pc, #404]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f003 030c 	and.w	r3, r3, #12
 800b43e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b440:	4b62      	ldr	r3, [pc, #392]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	f003 0303 	and.w	r3, r3, #3
 800b448:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	2b0c      	cmp	r3, #12
 800b44e:	d102      	bne.n	800b456 <HAL_RCC_OscConfig+0x136>
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2b02      	cmp	r3, #2
 800b454:	d002      	beq.n	800b45c <HAL_RCC_OscConfig+0x13c>
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	2b04      	cmp	r3, #4
 800b45a:	d11f      	bne.n	800b49c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b45c:	4b5b      	ldr	r3, [pc, #364]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b464:	2b00      	cmp	r3, #0
 800b466:	d005      	beq.n	800b474 <HAL_RCC_OscConfig+0x154>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d101      	bne.n	800b474 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e267      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b474:	4b55      	ldr	r3, [pc, #340]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	061b      	lsls	r3, r3, #24
 800b482:	4952      	ldr	r1, [pc, #328]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b484:	4313      	orrs	r3, r2
 800b486:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b488:	4b51      	ldr	r3, [pc, #324]	; (800b5d0 <HAL_RCC_OscConfig+0x2b0>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fd f955 	bl	800873c <HAL_InitTick>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d043      	beq.n	800b520 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e253      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d023      	beq.n	800b4ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4a4:	4b49      	ldr	r3, [pc, #292]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a48      	ldr	r2, [pc, #288]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b4aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4b0:	f7fd f990 	bl	80087d4 <HAL_GetTick>
 800b4b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b4b6:	e008      	b.n	800b4ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4b8:	f7fd f98c 	bl	80087d4 <HAL_GetTick>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d901      	bls.n	800b4ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e23c      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b4ca:	4b40      	ldr	r3, [pc, #256]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0f0      	beq.n	800b4b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4d6:	4b3d      	ldr	r3, [pc, #244]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	061b      	lsls	r3, r3, #24
 800b4e4:	4939      	ldr	r1, [pc, #228]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	604b      	str	r3, [r1, #4]
 800b4ea:	e01a      	b.n	800b522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4ec:	4b37      	ldr	r3, [pc, #220]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a36      	ldr	r2, [pc, #216]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b4f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f8:	f7fd f96c 	bl	80087d4 <HAL_GetTick>
 800b4fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b4fe:	e008      	b.n	800b512 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b500:	f7fd f968 	bl	80087d4 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d901      	bls.n	800b512 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e218      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b512:	4b2e      	ldr	r3, [pc, #184]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1f0      	bne.n	800b500 <HAL_RCC_OscConfig+0x1e0>
 800b51e:	e000      	b.n	800b522 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b520:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0308 	and.w	r3, r3, #8
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d03c      	beq.n	800b5a8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d01c      	beq.n	800b570 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b536:	4b25      	ldr	r3, [pc, #148]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b53c:	4a23      	ldr	r2, [pc, #140]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b53e:	f043 0301 	orr.w	r3, r3, #1
 800b542:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b546:	f7fd f945 	bl	80087d4 <HAL_GetTick>
 800b54a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b54c:	e008      	b.n	800b560 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b54e:	f7fd f941 	bl	80087d4 <HAL_GetTick>
 800b552:	4602      	mov	r2, r0
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d901      	bls.n	800b560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b55c:	2303      	movs	r3, #3
 800b55e:	e1f1      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b560:	4b1a      	ldr	r3, [pc, #104]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0ef      	beq.n	800b54e <HAL_RCC_OscConfig+0x22e>
 800b56e:	e01b      	b.n	800b5a8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b570:	4b16      	ldr	r3, [pc, #88]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b576:	4a15      	ldr	r2, [pc, #84]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b578:	f023 0301 	bic.w	r3, r3, #1
 800b57c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b580:	f7fd f928 	bl	80087d4 <HAL_GetTick>
 800b584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b586:	e008      	b.n	800b59a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b588:	f7fd f924 	bl	80087d4 <HAL_GetTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	2b02      	cmp	r3, #2
 800b594:	d901      	bls.n	800b59a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e1d4      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b59a:	4b0c      	ldr	r3, [pc, #48]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b59c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5a0:	f003 0302 	and.w	r3, r3, #2
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1ef      	bne.n	800b588 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0304 	and.w	r3, r3, #4
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 80ab 	beq.w	800b70c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b5ba:	4b04      	ldr	r3, [pc, #16]	; (800b5cc <HAL_RCC_OscConfig+0x2ac>)
 800b5bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <HAL_RCC_OscConfig+0x2b4>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e005      	b.n	800b5d6 <HAL_RCC_OscConfig+0x2b6>
 800b5ca:	bf00      	nop
 800b5cc:	40021000 	.word	0x40021000
 800b5d0:	20000cac 	.word	0x20000cac
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00d      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5da:	4baf      	ldr	r3, [pc, #700]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5de:	4aae      	ldr	r2, [pc, #696]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b5e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5e4:	6593      	str	r3, [r2, #88]	; 0x58
 800b5e6:	4bac      	ldr	r3, [pc, #688]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5f6:	4ba9      	ldr	r3, [pc, #676]	; (800b89c <HAL_RCC_OscConfig+0x57c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d118      	bne.n	800b634 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b602:	4ba6      	ldr	r3, [pc, #664]	; (800b89c <HAL_RCC_OscConfig+0x57c>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4aa5      	ldr	r2, [pc, #660]	; (800b89c <HAL_RCC_OscConfig+0x57c>)
 800b608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b60c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b60e:	f7fd f8e1 	bl	80087d4 <HAL_GetTick>
 800b612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b614:	e008      	b.n	800b628 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b616:	f7fd f8dd 	bl	80087d4 <HAL_GetTick>
 800b61a:	4602      	mov	r2, r0
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	2b02      	cmp	r3, #2
 800b622:	d901      	bls.n	800b628 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b624:	2303      	movs	r3, #3
 800b626:	e18d      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b628:	4b9c      	ldr	r3, [pc, #624]	; (800b89c <HAL_RCC_OscConfig+0x57c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0f0      	beq.n	800b616 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d108      	bne.n	800b64e <HAL_RCC_OscConfig+0x32e>
 800b63c:	4b96      	ldr	r3, [pc, #600]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b642:	4a95      	ldr	r2, [pc, #596]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b644:	f043 0301 	orr.w	r3, r3, #1
 800b648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b64c:	e024      	b.n	800b698 <HAL_RCC_OscConfig+0x378>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	2b05      	cmp	r3, #5
 800b654:	d110      	bne.n	800b678 <HAL_RCC_OscConfig+0x358>
 800b656:	4b90      	ldr	r3, [pc, #576]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b65c:	4a8e      	ldr	r2, [pc, #568]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b65e:	f043 0304 	orr.w	r3, r3, #4
 800b662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b666:	4b8c      	ldr	r3, [pc, #560]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b66c:	4a8a      	ldr	r2, [pc, #552]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b66e:	f043 0301 	orr.w	r3, r3, #1
 800b672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b676:	e00f      	b.n	800b698 <HAL_RCC_OscConfig+0x378>
 800b678:	4b87      	ldr	r3, [pc, #540]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b67e:	4a86      	ldr	r2, [pc, #536]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b680:	f023 0301 	bic.w	r3, r3, #1
 800b684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b688:	4b83      	ldr	r3, [pc, #524]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b68e:	4a82      	ldr	r2, [pc, #520]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b690:	f023 0304 	bic.w	r3, r3, #4
 800b694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d016      	beq.n	800b6ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6a0:	f7fd f898 	bl	80087d4 <HAL_GetTick>
 800b6a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6a6:	e00a      	b.n	800b6be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6a8:	f7fd f894 	bl	80087d4 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d901      	bls.n	800b6be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e142      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6be:	4b76      	ldr	r3, [pc, #472]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c4:	f003 0302 	and.w	r3, r3, #2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0ed      	beq.n	800b6a8 <HAL_RCC_OscConfig+0x388>
 800b6cc:	e015      	b.n	800b6fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6ce:	f7fd f881 	bl	80087d4 <HAL_GetTick>
 800b6d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b6d4:	e00a      	b.n	800b6ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6d6:	f7fd f87d 	bl	80087d4 <HAL_GetTick>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d901      	bls.n	800b6ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e12b      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b6ec:	4b6a      	ldr	r3, [pc, #424]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f2:	f003 0302 	and.w	r3, r3, #2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1ed      	bne.n	800b6d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b6fa:	7ffb      	ldrb	r3, [r7, #31]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d105      	bne.n	800b70c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b700:	4b65      	ldr	r3, [pc, #404]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b704:	4a64      	ldr	r2, [pc, #400]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b70a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0320 	and.w	r3, r3, #32
 800b714:	2b00      	cmp	r3, #0
 800b716:	d03c      	beq.n	800b792 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d01c      	beq.n	800b75a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b720:	4b5d      	ldr	r3, [pc, #372]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b726:	4a5c      	ldr	r2, [pc, #368]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b728:	f043 0301 	orr.w	r3, r3, #1
 800b72c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b730:	f7fd f850 	bl	80087d4 <HAL_GetTick>
 800b734:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b736:	e008      	b.n	800b74a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b738:	f7fd f84c 	bl	80087d4 <HAL_GetTick>
 800b73c:	4602      	mov	r2, r0
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	2b02      	cmp	r3, #2
 800b744:	d901      	bls.n	800b74a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b746:	2303      	movs	r3, #3
 800b748:	e0fc      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b74a:	4b53      	ldr	r3, [pc, #332]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b74c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b750:	f003 0302 	and.w	r3, r3, #2
 800b754:	2b00      	cmp	r3, #0
 800b756:	d0ef      	beq.n	800b738 <HAL_RCC_OscConfig+0x418>
 800b758:	e01b      	b.n	800b792 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b75a:	4b4f      	ldr	r3, [pc, #316]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b75c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b760:	4a4d      	ldr	r2, [pc, #308]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b762:	f023 0301 	bic.w	r3, r3, #1
 800b766:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b76a:	f7fd f833 	bl	80087d4 <HAL_GetTick>
 800b76e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b770:	e008      	b.n	800b784 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b772:	f7fd f82f 	bl	80087d4 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d901      	bls.n	800b784 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e0df      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b784:	4b44      	ldr	r3, [pc, #272]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b78a:	f003 0302 	and.w	r3, r3, #2
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1ef      	bne.n	800b772 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	2b00      	cmp	r3, #0
 800b798:	f000 80d3 	beq.w	800b942 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b79c:	4b3e      	ldr	r3, [pc, #248]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	f003 030c 	and.w	r3, r3, #12
 800b7a4:	2b0c      	cmp	r3, #12
 800b7a6:	f000 808d 	beq.w	800b8c4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d15a      	bne.n	800b868 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7b2:	4b39      	ldr	r3, [pc, #228]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a38      	ldr	r2, [pc, #224]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b7b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7be:	f7fd f809 	bl	80087d4 <HAL_GetTick>
 800b7c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7c4:	e008      	b.n	800b7d8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7c6:	f7fd f805 	bl	80087d4 <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d901      	bls.n	800b7d8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e0b5      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7d8:	4b2f      	ldr	r3, [pc, #188]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1f0      	bne.n	800b7c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b7e4:	4b2c      	ldr	r3, [pc, #176]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	4b2d      	ldr	r3, [pc, #180]	; (800b8a0 <HAL_RCC_OscConfig+0x580>)
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	6a11      	ldr	r1, [r2, #32]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b7f4:	3a01      	subs	r2, #1
 800b7f6:	0112      	lsls	r2, r2, #4
 800b7f8:	4311      	orrs	r1, r2
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b7fe:	0212      	lsls	r2, r2, #8
 800b800:	4311      	orrs	r1, r2
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b806:	0852      	lsrs	r2, r2, #1
 800b808:	3a01      	subs	r2, #1
 800b80a:	0552      	lsls	r2, r2, #21
 800b80c:	4311      	orrs	r1, r2
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b812:	0852      	lsrs	r2, r2, #1
 800b814:	3a01      	subs	r2, #1
 800b816:	0652      	lsls	r2, r2, #25
 800b818:	4311      	orrs	r1, r2
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b81e:	06d2      	lsls	r2, r2, #27
 800b820:	430a      	orrs	r2, r1
 800b822:	491d      	ldr	r1, [pc, #116]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b824:	4313      	orrs	r3, r2
 800b826:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b828:	4b1b      	ldr	r3, [pc, #108]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a1a      	ldr	r2, [pc, #104]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b82e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b832:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b834:	4b18      	ldr	r3, [pc, #96]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	4a17      	ldr	r2, [pc, #92]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b83a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b83e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b840:	f7fc ffc8 	bl	80087d4 <HAL_GetTick>
 800b844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b846:	e008      	b.n	800b85a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b848:	f7fc ffc4 	bl	80087d4 <HAL_GetTick>
 800b84c:	4602      	mov	r2, r0
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	2b02      	cmp	r3, #2
 800b854:	d901      	bls.n	800b85a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b856:	2303      	movs	r3, #3
 800b858:	e074      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b85a:	4b0f      	ldr	r3, [pc, #60]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0f0      	beq.n	800b848 <HAL_RCC_OscConfig+0x528>
 800b866:	e06c      	b.n	800b942 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b868:	4b0b      	ldr	r3, [pc, #44]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a0a      	ldr	r2, [pc, #40]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b86e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b872:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b874:	4b08      	ldr	r3, [pc, #32]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	4a07      	ldr	r2, [pc, #28]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b87a:	f023 0303 	bic.w	r3, r3, #3
 800b87e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b880:	4b05      	ldr	r3, [pc, #20]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	4a04      	ldr	r2, [pc, #16]	; (800b898 <HAL_RCC_OscConfig+0x578>)
 800b886:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b88a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b88e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b890:	f7fc ffa0 	bl	80087d4 <HAL_GetTick>
 800b894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b896:	e00e      	b.n	800b8b6 <HAL_RCC_OscConfig+0x596>
 800b898:	40021000 	.word	0x40021000
 800b89c:	40007000 	.word	0x40007000
 800b8a0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8a4:	f7fc ff96 	bl	80087d4 <HAL_GetTick>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d901      	bls.n	800b8b6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e046      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8b6:	4b25      	ldr	r3, [pc, #148]	; (800b94c <HAL_RCC_OscConfig+0x62c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1f0      	bne.n	800b8a4 <HAL_RCC_OscConfig+0x584>
 800b8c2:	e03e      	b.n	800b942 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	69db      	ldr	r3, [r3, #28]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d101      	bne.n	800b8d0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e039      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b8d0:	4b1e      	ldr	r3, [pc, #120]	; (800b94c <HAL_RCC_OscConfig+0x62c>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f003 0203 	and.w	r2, r3, #3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a1b      	ldr	r3, [r3, #32]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d12c      	bne.n	800b93e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d123      	bne.n	800b93e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b900:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b902:	429a      	cmp	r2, r3
 800b904:	d11b      	bne.n	800b93e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b912:	429a      	cmp	r2, r3
 800b914:	d113      	bne.n	800b93e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b920:	085b      	lsrs	r3, r3, #1
 800b922:	3b01      	subs	r3, #1
 800b924:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b926:	429a      	cmp	r2, r3
 800b928:	d109      	bne.n	800b93e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b934:	085b      	lsrs	r3, r3, #1
 800b936:	3b01      	subs	r3, #1
 800b938:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d001      	beq.n	800b942 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e000      	b.n	800b944 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3720      	adds	r7, #32
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	40021000 	.word	0x40021000

0800b950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e11e      	b.n	800bba6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b968:	4b91      	ldr	r3, [pc, #580]	; (800bbb0 <HAL_RCC_ClockConfig+0x260>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 030f 	and.w	r3, r3, #15
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	429a      	cmp	r2, r3
 800b974:	d910      	bls.n	800b998 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b976:	4b8e      	ldr	r3, [pc, #568]	; (800bbb0 <HAL_RCC_ClockConfig+0x260>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f023 020f 	bic.w	r2, r3, #15
 800b97e:	498c      	ldr	r1, [pc, #560]	; (800bbb0 <HAL_RCC_ClockConfig+0x260>)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	4313      	orrs	r3, r2
 800b984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b986:	4b8a      	ldr	r3, [pc, #552]	; (800bbb0 <HAL_RCC_ClockConfig+0x260>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f003 030f 	and.w	r3, r3, #15
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d001      	beq.n	800b998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e106      	b.n	800bba6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0301 	and.w	r3, r3, #1
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d073      	beq.n	800ba8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d129      	bne.n	800ba00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b9ac:	4b81      	ldr	r3, [pc, #516]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e0f4      	b.n	800bba6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b9bc:	f000 f972 	bl	800bca4 <RCC_GetSysClockFreqFromPLLSource>
 800b9c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	4a7c      	ldr	r2, [pc, #496]	; (800bbb8 <HAL_RCC_ClockConfig+0x268>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d93f      	bls.n	800ba4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b9ca:	4b7a      	ldr	r3, [pc, #488]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d009      	beq.n	800b9ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d033      	beq.n	800ba4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d12f      	bne.n	800ba4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b9ea:	4b72      	ldr	r3, [pc, #456]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9f2:	4a70      	ldr	r2, [pc, #448]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800b9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b9fa:	2380      	movs	r3, #128	; 0x80
 800b9fc:	617b      	str	r3, [r7, #20]
 800b9fe:	e024      	b.n	800ba4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d107      	bne.n	800ba18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba08:	4b6a      	ldr	r3, [pc, #424]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d109      	bne.n	800ba28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e0c6      	b.n	800bba6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ba18:	4b66      	ldr	r3, [pc, #408]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e0be      	b.n	800bba6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ba28:	f000 f8ce 	bl	800bbc8 <HAL_RCC_GetSysClockFreq>
 800ba2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	4a61      	ldr	r2, [pc, #388]	; (800bbb8 <HAL_RCC_ClockConfig+0x268>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d909      	bls.n	800ba4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ba36:	4b5f      	ldr	r3, [pc, #380]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba3e:	4a5d      	ldr	r2, [pc, #372]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800ba40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ba46:	2380      	movs	r3, #128	; 0x80
 800ba48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ba4a:	4b5a      	ldr	r3, [pc, #360]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	f023 0203 	bic.w	r2, r3, #3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	4957      	ldr	r1, [pc, #348]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba5c:	f7fc feba 	bl	80087d4 <HAL_GetTick>
 800ba60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba62:	e00a      	b.n	800ba7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba64:	f7fc feb6 	bl	80087d4 <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d901      	bls.n	800ba7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e095      	b.n	800bba6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba7a:	4b4e      	ldr	r3, [pc, #312]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f003 020c 	and.w	r2, r3, #12
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d1eb      	bne.n	800ba64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 0302 	and.w	r3, r3, #2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d023      	beq.n	800bae0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f003 0304 	and.w	r3, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d005      	beq.n	800bab0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800baa4:	4b43      	ldr	r3, [pc, #268]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	4a42      	ldr	r2, [pc, #264]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800baaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800baae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 0308 	and.w	r3, r3, #8
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d007      	beq.n	800bacc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800babc:	4b3d      	ldr	r3, [pc, #244]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bac4:	4a3b      	ldr	r2, [pc, #236]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800bac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800baca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bacc:	4b39      	ldr	r3, [pc, #228]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	4936      	ldr	r1, [pc, #216]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800bada:	4313      	orrs	r3, r2
 800badc:	608b      	str	r3, [r1, #8]
 800bade:	e008      	b.n	800baf2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b80      	cmp	r3, #128	; 0x80
 800bae4:	d105      	bne.n	800baf2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bae6:	4b33      	ldr	r3, [pc, #204]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	4a32      	ldr	r2, [pc, #200]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800baec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800baf0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800baf2:	4b2f      	ldr	r3, [pc, #188]	; (800bbb0 <HAL_RCC_ClockConfig+0x260>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 030f 	and.w	r3, r3, #15
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d21d      	bcs.n	800bb3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb00:	4b2b      	ldr	r3, [pc, #172]	; (800bbb0 <HAL_RCC_ClockConfig+0x260>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f023 020f 	bic.w	r2, r3, #15
 800bb08:	4929      	ldr	r1, [pc, #164]	; (800bbb0 <HAL_RCC_ClockConfig+0x260>)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bb10:	f7fc fe60 	bl	80087d4 <HAL_GetTick>
 800bb14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb16:	e00a      	b.n	800bb2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb18:	f7fc fe5c 	bl	80087d4 <HAL_GetTick>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d901      	bls.n	800bb2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e03b      	b.n	800bba6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb2e:	4b20      	ldr	r3, [pc, #128]	; (800bbb0 <HAL_RCC_ClockConfig+0x260>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 030f 	and.w	r3, r3, #15
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d1ed      	bne.n	800bb18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 0304 	and.w	r3, r3, #4
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d008      	beq.n	800bb5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb48:	4b1a      	ldr	r3, [pc, #104]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	4917      	ldr	r1, [pc, #92]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800bb56:	4313      	orrs	r3, r2
 800bb58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f003 0308 	and.w	r3, r3, #8
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d009      	beq.n	800bb7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bb66:	4b13      	ldr	r3, [pc, #76]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	490f      	ldr	r1, [pc, #60]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800bb76:	4313      	orrs	r3, r2
 800bb78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bb7a:	f000 f825 	bl	800bbc8 <HAL_RCC_GetSysClockFreq>
 800bb7e:	4601      	mov	r1, r0
 800bb80:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <HAL_RCC_ClockConfig+0x264>)
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	091b      	lsrs	r3, r3, #4
 800bb86:	f003 030f 	and.w	r3, r3, #15
 800bb8a:	4a0c      	ldr	r2, [pc, #48]	; (800bbbc <HAL_RCC_ClockConfig+0x26c>)
 800bb8c:	5cd3      	ldrb	r3, [r2, r3]
 800bb8e:	f003 031f 	and.w	r3, r3, #31
 800bb92:	fa21 f303 	lsr.w	r3, r1, r3
 800bb96:	4a0a      	ldr	r2, [pc, #40]	; (800bbc0 <HAL_RCC_ClockConfig+0x270>)
 800bb98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bb9a:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <HAL_RCC_ClockConfig+0x274>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fc fdcc 	bl	800873c <HAL_InitTick>
 800bba4:	4603      	mov	r3, r0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3718      	adds	r7, #24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	40022000 	.word	0x40022000
 800bbb4:	40021000 	.word	0x40021000
 800bbb8:	04c4b400 	.word	0x04c4b400
 800bbbc:	08013508 	.word	0x08013508
 800bbc0:	20000ca8 	.word	0x20000ca8
 800bbc4:	20000cac 	.word	0x20000cac

0800bbc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bbce:	4b2c      	ldr	r3, [pc, #176]	; (800bc80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	f003 030c 	and.w	r3, r3, #12
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d102      	bne.n	800bbe0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bbda:	4b2a      	ldr	r3, [pc, #168]	; (800bc84 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bbdc:	613b      	str	r3, [r7, #16]
 800bbde:	e047      	b.n	800bc70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bbe0:	4b27      	ldr	r3, [pc, #156]	; (800bc80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f003 030c 	and.w	r3, r3, #12
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	d102      	bne.n	800bbf2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bbec:	4b26      	ldr	r3, [pc, #152]	; (800bc88 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bbee:	613b      	str	r3, [r7, #16]
 800bbf0:	e03e      	b.n	800bc70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bbf2:	4b23      	ldr	r3, [pc, #140]	; (800bc80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	f003 030c 	and.w	r3, r3, #12
 800bbfa:	2b0c      	cmp	r3, #12
 800bbfc:	d136      	bne.n	800bc6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bbfe:	4b20      	ldr	r3, [pc, #128]	; (800bc80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	f003 0303 	and.w	r3, r3, #3
 800bc06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bc08:	4b1d      	ldr	r3, [pc, #116]	; (800bc80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	091b      	lsrs	r3, r3, #4
 800bc0e:	f003 030f 	and.w	r3, r3, #15
 800bc12:	3301      	adds	r3, #1
 800bc14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d10c      	bne.n	800bc36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bc1c:	4a1a      	ldr	r2, [pc, #104]	; (800bc88 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc24:	4a16      	ldr	r2, [pc, #88]	; (800bc80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc26:	68d2      	ldr	r2, [r2, #12]
 800bc28:	0a12      	lsrs	r2, r2, #8
 800bc2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bc2e:	fb02 f303 	mul.w	r3, r2, r3
 800bc32:	617b      	str	r3, [r7, #20]
      break;
 800bc34:	e00c      	b.n	800bc50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bc36:	4a13      	ldr	r2, [pc, #76]	; (800bc84 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc3e:	4a10      	ldr	r2, [pc, #64]	; (800bc80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc40:	68d2      	ldr	r2, [r2, #12]
 800bc42:	0a12      	lsrs	r2, r2, #8
 800bc44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bc48:	fb02 f303 	mul.w	r3, r2, r3
 800bc4c:	617b      	str	r3, [r7, #20]
      break;
 800bc4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bc50:	4b0b      	ldr	r3, [pc, #44]	; (800bc80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	0e5b      	lsrs	r3, r3, #25
 800bc56:	f003 0303 	and.w	r3, r3, #3
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	005b      	lsls	r3, r3, #1
 800bc5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc68:	613b      	str	r3, [r7, #16]
 800bc6a:	e001      	b.n	800bc70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bc70:	693b      	ldr	r3, [r7, #16]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	371c      	adds	r7, #28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	40021000 	.word	0x40021000
 800bc84:	00f42400 	.word	0x00f42400
 800bc88:	007a1200 	.word	0x007a1200

0800bc8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc90:	4b03      	ldr	r3, [pc, #12]	; (800bca0 <HAL_RCC_GetHCLKFreq+0x14>)
 800bc92:	681b      	ldr	r3, [r3, #0]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	20000ca8 	.word	0x20000ca8

0800bca4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bcaa:	4b1e      	ldr	r3, [pc, #120]	; (800bd24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	f003 0303 	and.w	r3, r3, #3
 800bcb2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bcb4:	4b1b      	ldr	r3, [pc, #108]	; (800bd24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	091b      	lsrs	r3, r3, #4
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	d10c      	bne.n	800bce2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bcc8:	4a17      	ldr	r2, [pc, #92]	; (800bd28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd0:	4a14      	ldr	r2, [pc, #80]	; (800bd24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcd2:	68d2      	ldr	r2, [r2, #12]
 800bcd4:	0a12      	lsrs	r2, r2, #8
 800bcd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bcda:	fb02 f303 	mul.w	r3, r2, r3
 800bcde:	617b      	str	r3, [r7, #20]
    break;
 800bce0:	e00c      	b.n	800bcfc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bce2:	4a12      	ldr	r2, [pc, #72]	; (800bd2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcea:	4a0e      	ldr	r2, [pc, #56]	; (800bd24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcec:	68d2      	ldr	r2, [r2, #12]
 800bcee:	0a12      	lsrs	r2, r2, #8
 800bcf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bcf4:	fb02 f303 	mul.w	r3, r2, r3
 800bcf8:	617b      	str	r3, [r7, #20]
    break;
 800bcfa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bcfc:	4b09      	ldr	r3, [pc, #36]	; (800bd24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	0e5b      	lsrs	r3, r3, #25
 800bd02:	f003 0303 	and.w	r3, r3, #3
 800bd06:	3301      	adds	r3, #1
 800bd08:	005b      	lsls	r3, r3, #1
 800bd0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bd16:	687b      	ldr	r3, [r7, #4]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	371c      	adds	r7, #28
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	40021000 	.word	0x40021000
 800bd28:	007a1200 	.word	0x007a1200
 800bd2c:	00f42400 	.word	0x00f42400

0800bd30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bd38:	2300      	movs	r3, #0
 800bd3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 8098 	beq.w	800be7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd52:	4b43      	ldr	r3, [pc, #268]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10d      	bne.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd5e:	4b40      	ldr	r3, [pc, #256]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd62:	4a3f      	ldr	r2, [pc, #252]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd68:	6593      	str	r3, [r2, #88]	; 0x58
 800bd6a:	4b3d      	ldr	r3, [pc, #244]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd72:	60bb      	str	r3, [r7, #8]
 800bd74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd76:	2301      	movs	r3, #1
 800bd78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd7a:	4b3a      	ldr	r3, [pc, #232]	; (800be64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a39      	ldr	r2, [pc, #228]	; (800be64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bd80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd86:	f7fc fd25 	bl	80087d4 <HAL_GetTick>
 800bd8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd8c:	e009      	b.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd8e:	f7fc fd21 	bl	80087d4 <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d902      	bls.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	74fb      	strb	r3, [r7, #19]
        break;
 800bda0:	e005      	b.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bda2:	4b30      	ldr	r3, [pc, #192]	; (800be64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0ef      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bdae:	7cfb      	ldrb	r3, [r7, #19]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d159      	bne.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bdb4:	4b2a      	ldr	r3, [pc, #168]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d01e      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d019      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bdd0:	4b23      	ldr	r3, [pc, #140]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bddc:	4b20      	ldr	r3, [pc, #128]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bde2:	4a1f      	ldr	r2, [pc, #124]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bde4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bde8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bdec:	4b1c      	ldr	r3, [pc, #112]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf2:	4a1b      	ldr	r2, [pc, #108]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bdfc:	4a18      	ldr	r2, [pc, #96]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d016      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be0e:	f7fc fce1 	bl	80087d4 <HAL_GetTick>
 800be12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be14:	e00b      	b.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be16:	f7fc fcdd 	bl	80087d4 <HAL_GetTick>
 800be1a:	4602      	mov	r2, r0
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	f241 3288 	movw	r2, #5000	; 0x1388
 800be24:	4293      	cmp	r3, r2
 800be26:	d902      	bls.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800be28:	2303      	movs	r3, #3
 800be2a:	74fb      	strb	r3, [r7, #19]
            break;
 800be2c:	e006      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be2e:	4b0c      	ldr	r3, [pc, #48]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be34:	f003 0302 	and.w	r3, r3, #2
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d0ec      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800be3c:	7cfb      	ldrb	r3, [r7, #19]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10b      	bne.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be42:	4b07      	ldr	r3, [pc, #28]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be50:	4903      	ldr	r1, [pc, #12]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be52:	4313      	orrs	r3, r2
 800be54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800be58:	e008      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be5a:	7cfb      	ldrb	r3, [r7, #19]
 800be5c:	74bb      	strb	r3, [r7, #18]
 800be5e:	e005      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800be60:	40021000 	.word	0x40021000
 800be64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be68:	7cfb      	ldrb	r3, [r7, #19]
 800be6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800be6c:	7c7b      	ldrb	r3, [r7, #17]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d105      	bne.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be72:	4baf      	ldr	r3, [pc, #700]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be76:	4aae      	ldr	r2, [pc, #696]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00a      	beq.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800be8a:	4ba9      	ldr	r3, [pc, #676]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be90:	f023 0203 	bic.w	r2, r3, #3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	49a5      	ldr	r1, [pc, #660]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be9a:	4313      	orrs	r3, r2
 800be9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 0302 	and.w	r3, r3, #2
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00a      	beq.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800beac:	4ba0      	ldr	r3, [pc, #640]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beb2:	f023 020c 	bic.w	r2, r3, #12
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	499d      	ldr	r1, [pc, #628]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bebc:	4313      	orrs	r3, r2
 800bebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 0304 	and.w	r3, r3, #4
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00a      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bece:	4b98      	ldr	r3, [pc, #608]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bed4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	4994      	ldr	r1, [pc, #592]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 0308 	and.w	r3, r3, #8
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00a      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bef0:	4b8f      	ldr	r3, [pc, #572]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	691b      	ldr	r3, [r3, #16]
 800befe:	498c      	ldr	r1, [pc, #560]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 0310 	and.w	r3, r3, #16
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bf12:	4b87      	ldr	r3, [pc, #540]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	4983      	ldr	r1, [pc, #524]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf22:	4313      	orrs	r3, r2
 800bf24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f003 0320 	and.w	r3, r3, #32
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00a      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf34:	4b7e      	ldr	r3, [pc, #504]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	497b      	ldr	r1, [pc, #492]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf44:	4313      	orrs	r3, r2
 800bf46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf56:	4b76      	ldr	r3, [pc, #472]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	69db      	ldr	r3, [r3, #28]
 800bf64:	4972      	ldr	r1, [pc, #456]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf66:	4313      	orrs	r3, r2
 800bf68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00a      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bf78:	4b6d      	ldr	r3, [pc, #436]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	496a      	ldr	r1, [pc, #424]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bf9a:	4b65      	ldr	r3, [pc, #404]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa8:	4961      	ldr	r1, [pc, #388]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00a      	beq.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bfbc:	4b5c      	ldr	r3, [pc, #368]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bfc2:	f023 0203 	bic.w	r2, r3, #3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfca:	4959      	ldr	r1, [pc, #356]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00a      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bfde:	4b54      	ldr	r3, [pc, #336]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfec:	4950      	ldr	r1, [pc, #320]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfee:	4313      	orrs	r3, r2
 800bff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d015      	beq.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c000:	4b4b      	ldr	r3, [pc, #300]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	4948      	ldr	r1, [pc, #288]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c010:	4313      	orrs	r3, r2
 800c012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c01e:	d105      	bne.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c020:	4b43      	ldr	r3, [pc, #268]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	4a42      	ldr	r2, [pc, #264]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c02a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c034:	2b00      	cmp	r3, #0
 800c036:	d015      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c038:	4b3d      	ldr	r3, [pc, #244]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c03e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c046:	493a      	ldr	r1, [pc, #232]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c048:	4313      	orrs	r3, r2
 800c04a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c056:	d105      	bne.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c058:	4b35      	ldr	r3, [pc, #212]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	4a34      	ldr	r2, [pc, #208]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c05e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c062:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d015      	beq.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c070:	4b2f      	ldr	r3, [pc, #188]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c076:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07e:	492c      	ldr	r1, [pc, #176]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c080:	4313      	orrs	r3, r2
 800c082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c08e:	d105      	bne.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c090:	4b27      	ldr	r3, [pc, #156]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	4a26      	ldr	r2, [pc, #152]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c09a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d015      	beq.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c0a8:	4b21      	ldr	r3, [pc, #132]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b6:	491e      	ldr	r1, [pc, #120]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0c6:	d105      	bne.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0c8:	4b19      	ldr	r3, [pc, #100]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	4a18      	ldr	r2, [pc, #96]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d015      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0e0:	4b13      	ldr	r3, [pc, #76]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ee:	4910      	ldr	r1, [pc, #64]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0fe:	d105      	bne.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c100:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	4a0a      	ldr	r2, [pc, #40]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c10a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d018      	beq.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c118:	4b05      	ldr	r3, [pc, #20]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c11e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c126:	4902      	ldr	r1, [pc, #8]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c128:	4313      	orrs	r3, r2
 800c12a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c12e:	e001      	b.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800c130:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c13c:	d105      	bne.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c13e:	4b21      	ldr	r3, [pc, #132]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	4a20      	ldr	r2, [pc, #128]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c148:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c152:	2b00      	cmp	r3, #0
 800c154:	d015      	beq.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c156:	4b1b      	ldr	r3, [pc, #108]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c15c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c164:	4917      	ldr	r1, [pc, #92]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c166:	4313      	orrs	r3, r2
 800c168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c174:	d105      	bne.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c176:	4b13      	ldr	r3, [pc, #76]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	4a12      	ldr	r2, [pc, #72]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c17c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c180:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d015      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c18e:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c19c:	4909      	ldr	r1, [pc, #36]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1ac:	d105      	bne.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1ae:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	4a04      	ldr	r2, [pc, #16]	; (800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c1b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1b8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c1ba:	7cbb      	ldrb	r3, [r7, #18]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	40021000 	.word	0x40021000

0800c1c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d101      	bne.n	800c1da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e084      	b.n	800c2e4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d106      	bne.n	800c1fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7fb fd2b 	bl	8007c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c210:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c21a:	d902      	bls.n	800c222 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c21c:	2300      	movs	r3, #0
 800c21e:	60fb      	str	r3, [r7, #12]
 800c220:	e002      	b.n	800c228 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c226:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c230:	d007      	beq.n	800c242 <HAL_SPI_Init+0x7a>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c23a:	d002      	beq.n	800c242 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10b      	bne.n	800c262 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c252:	d903      	bls.n	800c25c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	631a      	str	r2, [r3, #48]	; 0x30
 800c25a:	e002      	b.n	800c262 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685a      	ldr	r2, [r3, #4]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	431a      	orrs	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	431a      	orrs	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c280:	431a      	orrs	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	431a      	orrs	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a1b      	ldr	r3, [r3, #32]
 800c28c:	ea42 0103 	orr.w	r1, r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	430a      	orrs	r2, r1
 800c29a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	0c1b      	lsrs	r3, r3, #16
 800c2a2:	f003 0204 	and.w	r2, r3, #4
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	ea42 0103 	orr.w	r1, r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	69da      	ldr	r2, [r3, #28]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2201      	movs	r2, #1
 800c2de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d101      	bne.n	800c2fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e049      	b.n	800c392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7fc f914 	bl	8008540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2202      	movs	r2, #2
 800c31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	3304      	adds	r3, #4
 800c328:	4619      	mov	r1, r3
 800c32a:	4610      	mov	r0, r2
 800c32c:	f000 fc38 	bl	800cba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
	...

0800c39c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d001      	beq.n	800c3b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e019      	b.n	800c3e8 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689a      	ldr	r2, [r3, #8]
 800c3c2:	4b0c      	ldr	r3, [pc, #48]	; (800c3f4 <HAL_TIM_Base_Start+0x58>)
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2b06      	cmp	r3, #6
 800c3cc:	d00b      	beq.n	800c3e6 <HAL_TIM_Base_Start+0x4a>
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3d4:	d007      	beq.n	800c3e6 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f042 0201 	orr.w	r2, r2, #1
 800c3e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	00010007 	.word	0x00010007

0800c3f8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6a1a      	ldr	r2, [r3, #32]
 800c406:	f241 1311 	movw	r3, #4369	; 0x1111
 800c40a:	4013      	ands	r3, r2
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10f      	bne.n	800c430 <HAL_TIM_Base_Stop+0x38>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6a1a      	ldr	r2, [r3, #32]
 800c416:	f244 4344 	movw	r3, #17476	; 0x4444
 800c41a:	4013      	ands	r3, r2
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d107      	bne.n	800c430 <HAL_TIM_Base_Stop+0x38>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f022 0201 	bic.w	r2, r2, #1
 800c42e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
	...

0800c448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c456:	b2db      	uxtb	r3, r3
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d001      	beq.n	800c460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	e021      	b.n	800c4a4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2202      	movs	r2, #2
 800c464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68da      	ldr	r2, [r3, #12]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f042 0201 	orr.w	r2, r2, #1
 800c476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	689a      	ldr	r2, [r3, #8]
 800c47e:	4b0c      	ldr	r3, [pc, #48]	; (800c4b0 <HAL_TIM_Base_Start_IT+0x68>)
 800c480:	4013      	ands	r3, r2
 800c482:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2b06      	cmp	r3, #6
 800c488:	d00b      	beq.n	800c4a2 <HAL_TIM_Base_Start_IT+0x5a>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c490:	d007      	beq.n	800c4a2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f042 0201 	orr.w	r2, r2, #1
 800c4a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	00010007 	.word	0x00010007

0800c4b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68da      	ldr	r2, [r3, #12]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 0201 	bic.w	r2, r2, #1
 800c4ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6a1a      	ldr	r2, [r3, #32]
 800c4d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10f      	bne.n	800c4fc <HAL_TIM_Base_Stop_IT+0x48>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6a1a      	ldr	r2, [r3, #32]
 800c4e2:	f244 4344 	movw	r3, #17476	; 0x4444
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d107      	bne.n	800c4fc <HAL_TIM_Base_Stop_IT+0x48>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f022 0201 	bic.w	r2, r2, #1
 800c4fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	370c      	adds	r7, #12
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b086      	sub	sp, #24
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	e097      	b.n	800c656 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d106      	bne.n	800c540 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7fb ffb4 	bl	80084a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2202      	movs	r2, #2
 800c544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	6812      	ldr	r2, [r2, #0]
 800c552:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c556:	f023 0307 	bic.w	r3, r3, #7
 800c55a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3304      	adds	r3, #4
 800c564:	4619      	mov	r1, r3
 800c566:	4610      	mov	r0, r2
 800c568:	f000 fb1a 	bl	800cba0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c594:	f023 0303 	bic.w	r3, r3, #3
 800c598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	689a      	ldr	r2, [r3, #8]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	021b      	lsls	r3, r3, #8
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c5b2:	f023 030c 	bic.w	r3, r3, #12
 800c5b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c5be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	68da      	ldr	r2, [r3, #12]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	69db      	ldr	r3, [r3, #28]
 800c5cc:	021b      	lsls	r3, r3, #8
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	011a      	lsls	r2, r3, #4
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	6a1b      	ldr	r3, [r3, #32]
 800c5e0:	031b      	lsls	r3, r3, #12
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c5f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c5f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	695b      	ldr	r3, [r3, #20]
 800c602:	011b      	lsls	r3, r3, #4
 800c604:	4313      	orrs	r3, r2
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	4313      	orrs	r3, r2
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3718      	adds	r7, #24
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b082      	sub	sp, #8
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	f003 0302 	and.w	r3, r3, #2
 800c670:	2b02      	cmp	r3, #2
 800c672:	d122      	bne.n	800c6ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	f003 0302 	and.w	r3, r3, #2
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d11b      	bne.n	800c6ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f06f 0202 	mvn.w	r2, #2
 800c68a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	f003 0303 	and.w	r3, r3, #3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 fa5f 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c6a6:	e005      	b.n	800c6b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fa51 	bl	800cb50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fa62 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	f003 0304 	and.w	r3, r3, #4
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d122      	bne.n	800c70e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f003 0304 	and.w	r3, r3, #4
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d11b      	bne.n	800c70e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f06f 0204 	mvn.w	r2, #4
 800c6de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fa35 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c6fa:	e005      	b.n	800c708 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fa27 	bl	800cb50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fa38 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	f003 0308 	and.w	r3, r3, #8
 800c718:	2b08      	cmp	r3, #8
 800c71a:	d122      	bne.n	800c762 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	f003 0308 	and.w	r3, r3, #8
 800c726:	2b08      	cmp	r3, #8
 800c728:	d11b      	bne.n	800c762 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f06f 0208 	mvn.w	r2, #8
 800c732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2204      	movs	r2, #4
 800c738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	f003 0303 	and.w	r3, r3, #3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d003      	beq.n	800c750 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fa0b 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c74e:	e005      	b.n	800c75c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f9fd 	bl	800cb50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fa0e 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	f003 0310 	and.w	r3, r3, #16
 800c76c:	2b10      	cmp	r3, #16
 800c76e:	d122      	bne.n	800c7b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	f003 0310 	and.w	r3, r3, #16
 800c77a:	2b10      	cmp	r3, #16
 800c77c:	d11b      	bne.n	800c7b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f06f 0210 	mvn.w	r2, #16
 800c786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2208      	movs	r2, #8
 800c78c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	69db      	ldr	r3, [r3, #28]
 800c794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f9e1 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c7a2:	e005      	b.n	800c7b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f9d3 	bl	800cb50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f9e4 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d10e      	bne.n	800c7e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	f003 0301 	and.w	r3, r3, #1
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d107      	bne.n	800c7e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f06f 0201 	mvn.w	r2, #1
 800c7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f9ad 	bl	800cb3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ec:	2b80      	cmp	r3, #128	; 0x80
 800c7ee:	d10e      	bne.n	800c80e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7fa:	2b80      	cmp	r3, #128	; 0x80
 800c7fc:	d107      	bne.n	800c80e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fc5f 	bl	800d0cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c81c:	d10e      	bne.n	800c83c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c828:	2b80      	cmp	r3, #128	; 0x80
 800c82a:	d107      	bne.n	800c83c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fc52 	bl	800d0e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c846:	2b40      	cmp	r3, #64	; 0x40
 800c848:	d10e      	bne.n	800c868 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c854:	2b40      	cmp	r3, #64	; 0x40
 800c856:	d107      	bne.n	800c868 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f992 	bl	800cb8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	f003 0320 	and.w	r3, r3, #32
 800c872:	2b20      	cmp	r3, #32
 800c874:	d10e      	bne.n	800c894 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	f003 0320 	and.w	r3, r3, #32
 800c880:	2b20      	cmp	r3, #32
 800c882:	d107      	bne.n	800c894 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f06f 0220 	mvn.w	r2, #32
 800c88c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fc12 	bl	800d0b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c89e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8a2:	d10f      	bne.n	800c8c4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8b2:	d107      	bne.n	800c8c4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c8bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fc18 	bl	800d0f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8d2:	d10f      	bne.n	800c8f4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8e2:	d107      	bne.n	800c8f4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c8ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fc0a 	bl	800d108 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c902:	d10f      	bne.n	800c924 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c90e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c912:	d107      	bne.n	800c924 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c91c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fbfc 	bl	800d11c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c92e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c932:	d10f      	bne.n	800c954 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c93e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c942:	d107      	bne.n	800c954 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c94c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fbee 	bl	800d130 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d101      	bne.n	800c974 <HAL_TIM_ConfigClockSource+0x18>
 800c970:	2302      	movs	r3, #2
 800c972:	e0d2      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x1be>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c992:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c99e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9b0:	f000 80a9 	beq.w	800cb06 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9b8:	d81a      	bhi.n	800c9f0 <HAL_TIM_ConfigClockSource+0x94>
 800c9ba:	2b30      	cmp	r3, #48	; 0x30
 800c9bc:	f000 809a 	beq.w	800caf4 <HAL_TIM_ConfigClockSource+0x198>
 800c9c0:	2b30      	cmp	r3, #48	; 0x30
 800c9c2:	d809      	bhi.n	800c9d8 <HAL_TIM_ConfigClockSource+0x7c>
 800c9c4:	2b10      	cmp	r3, #16
 800c9c6:	f000 8095 	beq.w	800caf4 <HAL_TIM_ConfigClockSource+0x198>
 800c9ca:	2b20      	cmp	r3, #32
 800c9cc:	f000 8092 	beq.w	800caf4 <HAL_TIM_ConfigClockSource+0x198>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 808f 	beq.w	800caf4 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c9d6:	e097      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c9d8:	2b50      	cmp	r3, #80	; 0x50
 800c9da:	d05b      	beq.n	800ca94 <HAL_TIM_ConfigClockSource+0x138>
 800c9dc:	2b50      	cmp	r3, #80	; 0x50
 800c9de:	d802      	bhi.n	800c9e6 <HAL_TIM_ConfigClockSource+0x8a>
 800c9e0:	2b40      	cmp	r3, #64	; 0x40
 800c9e2:	d077      	beq.n	800cad4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c9e4:	e090      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c9e6:	2b60      	cmp	r3, #96	; 0x60
 800c9e8:	d064      	beq.n	800cab4 <HAL_TIM_ConfigClockSource+0x158>
 800c9ea:	2b70      	cmp	r3, #112	; 0x70
 800c9ec:	d028      	beq.n	800ca40 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c9ee:	e08b      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c9f0:	4a4c      	ldr	r2, [pc, #304]	; (800cb24 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d07e      	beq.n	800caf4 <HAL_TIM_ConfigClockSource+0x198>
 800c9f6:	4a4b      	ldr	r2, [pc, #300]	; (800cb24 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d810      	bhi.n	800ca1e <HAL_TIM_ConfigClockSource+0xc2>
 800c9fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca00:	d078      	beq.n	800caf4 <HAL_TIM_ConfigClockSource+0x198>
 800ca02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca06:	d803      	bhi.n	800ca10 <HAL_TIM_ConfigClockSource+0xb4>
 800ca08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca0c:	d02f      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ca0e:	e07b      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ca14:	d06e      	beq.n	800caf4 <HAL_TIM_ConfigClockSource+0x198>
 800ca16:	4a44      	ldr	r2, [pc, #272]	; (800cb28 <HAL_TIM_ConfigClockSource+0x1cc>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d06b      	beq.n	800caf4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ca1c:	e074      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca1e:	4a43      	ldr	r2, [pc, #268]	; (800cb2c <HAL_TIM_ConfigClockSource+0x1d0>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d067      	beq.n	800caf4 <HAL_TIM_ConfigClockSource+0x198>
 800ca24:	4a41      	ldr	r2, [pc, #260]	; (800cb2c <HAL_TIM_ConfigClockSource+0x1d0>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d803      	bhi.n	800ca32 <HAL_TIM_ConfigClockSource+0xd6>
 800ca2a:	4a41      	ldr	r2, [pc, #260]	; (800cb30 <HAL_TIM_ConfigClockSource+0x1d4>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d061      	beq.n	800caf4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ca30:	e06a      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca32:	4a40      	ldr	r2, [pc, #256]	; (800cb34 <HAL_TIM_ConfigClockSource+0x1d8>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d05d      	beq.n	800caf4 <HAL_TIM_ConfigClockSource+0x198>
 800ca38:	4a3f      	ldr	r2, [pc, #252]	; (800cb38 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d05a      	beq.n	800caf4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ca3e:	e063      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6818      	ldr	r0, [r3, #0]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	6899      	ldr	r1, [r3, #8]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	f000 f9ca 	bl	800cde8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	609a      	str	r2, [r3, #8]
      break;
 800ca6c:	e04c      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6818      	ldr	r0, [r3, #0]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	6899      	ldr	r1, [r3, #8]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	f000 f9b3 	bl	800cde8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	689a      	ldr	r2, [r3, #8]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca90:	609a      	str	r2, [r3, #8]
      break;
 800ca92:	e039      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6818      	ldr	r0, [r3, #0]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	6859      	ldr	r1, [r3, #4]
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	461a      	mov	r2, r3
 800caa2:	f000 f925 	bl	800ccf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2150      	movs	r1, #80	; 0x50
 800caac:	4618      	mov	r0, r3
 800caae:	f000 f97e 	bl	800cdae <TIM_ITRx_SetConfig>
      break;
 800cab2:	e029      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6818      	ldr	r0, [r3, #0]
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	6859      	ldr	r1, [r3, #4]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	461a      	mov	r2, r3
 800cac2:	f000 f944 	bl	800cd4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2160      	movs	r1, #96	; 0x60
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 f96e 	bl	800cdae <TIM_ITRx_SetConfig>
      break;
 800cad2:	e019      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6818      	ldr	r0, [r3, #0]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	6859      	ldr	r1, [r3, #4]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	461a      	mov	r2, r3
 800cae2:	f000 f905 	bl	800ccf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2140      	movs	r1, #64	; 0x40
 800caec:	4618      	mov	r0, r3
 800caee:	f000 f95e 	bl	800cdae <TIM_ITRx_SetConfig>
      break;
 800caf2:	e009      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4619      	mov	r1, r3
 800cafe:	4610      	mov	r0, r2
 800cb00:	f000 f955 	bl	800cdae <TIM_ITRx_SetConfig>
      break;
 800cb04:	e000      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800cb06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	00100030 	.word	0x00100030
 800cb28:	00100020 	.word	0x00100020
 800cb2c:	00100050 	.word	0x00100050
 800cb30:	00100040 	.word	0x00100040
 800cb34:	00100060 	.word	0x00100060
 800cb38:	00100070 	.word	0x00100070

0800cb3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb44:	bf00      	nop
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4a46      	ldr	r2, [pc, #280]	; (800cccc <TIM_Base_SetConfig+0x12c>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d017      	beq.n	800cbe8 <TIM_Base_SetConfig+0x48>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbbe:	d013      	beq.n	800cbe8 <TIM_Base_SetConfig+0x48>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a43      	ldr	r2, [pc, #268]	; (800ccd0 <TIM_Base_SetConfig+0x130>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d00f      	beq.n	800cbe8 <TIM_Base_SetConfig+0x48>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a42      	ldr	r2, [pc, #264]	; (800ccd4 <TIM_Base_SetConfig+0x134>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d00b      	beq.n	800cbe8 <TIM_Base_SetConfig+0x48>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4a41      	ldr	r2, [pc, #260]	; (800ccd8 <TIM_Base_SetConfig+0x138>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d007      	beq.n	800cbe8 <TIM_Base_SetConfig+0x48>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a40      	ldr	r2, [pc, #256]	; (800ccdc <TIM_Base_SetConfig+0x13c>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d003      	beq.n	800cbe8 <TIM_Base_SetConfig+0x48>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4a3f      	ldr	r2, [pc, #252]	; (800cce0 <TIM_Base_SetConfig+0x140>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d108      	bne.n	800cbfa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a33      	ldr	r2, [pc, #204]	; (800cccc <TIM_Base_SetConfig+0x12c>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d023      	beq.n	800cc4a <TIM_Base_SetConfig+0xaa>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc08:	d01f      	beq.n	800cc4a <TIM_Base_SetConfig+0xaa>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a30      	ldr	r2, [pc, #192]	; (800ccd0 <TIM_Base_SetConfig+0x130>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d01b      	beq.n	800cc4a <TIM_Base_SetConfig+0xaa>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a2f      	ldr	r2, [pc, #188]	; (800ccd4 <TIM_Base_SetConfig+0x134>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d017      	beq.n	800cc4a <TIM_Base_SetConfig+0xaa>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a2e      	ldr	r2, [pc, #184]	; (800ccd8 <TIM_Base_SetConfig+0x138>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d013      	beq.n	800cc4a <TIM_Base_SetConfig+0xaa>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a2d      	ldr	r2, [pc, #180]	; (800ccdc <TIM_Base_SetConfig+0x13c>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d00f      	beq.n	800cc4a <TIM_Base_SetConfig+0xaa>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a2d      	ldr	r2, [pc, #180]	; (800cce4 <TIM_Base_SetConfig+0x144>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d00b      	beq.n	800cc4a <TIM_Base_SetConfig+0xaa>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4a2c      	ldr	r2, [pc, #176]	; (800cce8 <TIM_Base_SetConfig+0x148>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d007      	beq.n	800cc4a <TIM_Base_SetConfig+0xaa>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a2b      	ldr	r2, [pc, #172]	; (800ccec <TIM_Base_SetConfig+0x14c>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d003      	beq.n	800cc4a <TIM_Base_SetConfig+0xaa>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4a26      	ldr	r2, [pc, #152]	; (800cce0 <TIM_Base_SetConfig+0x140>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d108      	bne.n	800cc5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	689a      	ldr	r2, [r3, #8]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a12      	ldr	r2, [pc, #72]	; (800cccc <TIM_Base_SetConfig+0x12c>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d013      	beq.n	800ccb0 <TIM_Base_SetConfig+0x110>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a14      	ldr	r2, [pc, #80]	; (800ccdc <TIM_Base_SetConfig+0x13c>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00f      	beq.n	800ccb0 <TIM_Base_SetConfig+0x110>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a14      	ldr	r2, [pc, #80]	; (800cce4 <TIM_Base_SetConfig+0x144>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d00b      	beq.n	800ccb0 <TIM_Base_SetConfig+0x110>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a13      	ldr	r2, [pc, #76]	; (800cce8 <TIM_Base_SetConfig+0x148>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d007      	beq.n	800ccb0 <TIM_Base_SetConfig+0x110>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a12      	ldr	r2, [pc, #72]	; (800ccec <TIM_Base_SetConfig+0x14c>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d003      	beq.n	800ccb0 <TIM_Base_SetConfig+0x110>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a0d      	ldr	r2, [pc, #52]	; (800cce0 <TIM_Base_SetConfig+0x140>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d103      	bne.n	800ccb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	691a      	ldr	r2, [r3, #16]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	615a      	str	r2, [r3, #20]
}
 800ccbe:	bf00      	nop
 800ccc0:	3714      	adds	r7, #20
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	40012c00 	.word	0x40012c00
 800ccd0:	40000400 	.word	0x40000400
 800ccd4:	40000800 	.word	0x40000800
 800ccd8:	40000c00 	.word	0x40000c00
 800ccdc:	40013400 	.word	0x40013400
 800cce0:	40015000 	.word	0x40015000
 800cce4:	40014000 	.word	0x40014000
 800cce8:	40014400 	.word	0x40014400
 800ccec:	40014800 	.word	0x40014800

0800ccf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b087      	sub	sp, #28
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6a1b      	ldr	r3, [r3, #32]
 800cd00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6a1b      	ldr	r3, [r3, #32]
 800cd06:	f023 0201 	bic.w	r2, r3, #1
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	693a      	ldr	r2, [r7, #16]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f023 030a 	bic.w	r3, r3, #10
 800cd2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	621a      	str	r2, [r3, #32]
}
 800cd42:	bf00      	nop
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b087      	sub	sp, #28
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	60f8      	str	r0, [r7, #12]
 800cd56:	60b9      	str	r1, [r7, #8]
 800cd58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6a1b      	ldr	r3, [r3, #32]
 800cd5e:	f023 0210 	bic.w	r2, r3, #16
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	699b      	ldr	r3, [r3, #24]
 800cd6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6a1b      	ldr	r3, [r3, #32]
 800cd70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	031b      	lsls	r3, r3, #12
 800cd7e:	697a      	ldr	r2, [r7, #20]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	697a      	ldr	r2, [r7, #20]
 800cd9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	621a      	str	r2, [r3, #32]
}
 800cda2:	bf00      	nop
 800cda4:	371c      	adds	r7, #28
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cdc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	f043 0307 	orr.w	r3, r3, #7
 800cdd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	609a      	str	r2, [r3, #8]
}
 800cddc:	bf00      	nop
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b087      	sub	sp, #28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
 800cdf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	021a      	lsls	r2, r3, #8
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	431a      	orrs	r2, r3
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	697a      	ldr	r2, [r7, #20]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	697a      	ldr	r2, [r7, #20]
 800ce1a:	609a      	str	r2, [r3, #8]
}
 800ce1c:	bf00      	nop
 800ce1e:	371c      	adds	r7, #28
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d101      	bne.n	800ce40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	e074      	b.n	800cf2a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a34      	ldr	r2, [pc, #208]	; (800cf38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d009      	beq.n	800ce7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a33      	ldr	r2, [pc, #204]	; (800cf3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d004      	beq.n	800ce7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a31      	ldr	r2, [pc, #196]	; (800cf40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d108      	bne.n	800ce90 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ce84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ce96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a21      	ldr	r2, [pc, #132]	; (800cf38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d022      	beq.n	800cefe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cec0:	d01d      	beq.n	800cefe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a1f      	ldr	r2, [pc, #124]	; (800cf44 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d018      	beq.n	800cefe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a1d      	ldr	r2, [pc, #116]	; (800cf48 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d013      	beq.n	800cefe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a1c      	ldr	r2, [pc, #112]	; (800cf4c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d00e      	beq.n	800cefe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a15      	ldr	r2, [pc, #84]	; (800cf3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d009      	beq.n	800cefe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a18      	ldr	r2, [pc, #96]	; (800cf50 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d004      	beq.n	800cefe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a11      	ldr	r2, [pc, #68]	; (800cf40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d10c      	bne.n	800cf18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68ba      	ldr	r2, [r7, #8]
 800cf16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	40012c00 	.word	0x40012c00
 800cf3c:	40013400 	.word	0x40013400
 800cf40:	40015000 	.word	0x40015000
 800cf44:	40000400 	.word	0x40000400
 800cf48:	40000800 	.word	0x40000800
 800cf4c:	40000c00 	.word	0x40000c00
 800cf50:	40014000 	.word	0x40014000

0800cf54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d101      	bne.n	800cf70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	e096      	b.n	800d09e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	695b      	ldr	r3, [r3, #20]
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	699b      	ldr	r3, [r3, #24]
 800cfe4:	041b      	lsls	r3, r3, #16
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a2f      	ldr	r2, [pc, #188]	; (800d0ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d009      	beq.n	800d008 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a2d      	ldr	r2, [pc, #180]	; (800d0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d004      	beq.n	800d008 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a2c      	ldr	r2, [pc, #176]	; (800d0b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d106      	bne.n	800d016 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	69db      	ldr	r3, [r3, #28]
 800d012:	4313      	orrs	r3, r2
 800d014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a24      	ldr	r2, [pc, #144]	; (800d0ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d009      	beq.n	800d034 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a22      	ldr	r2, [pc, #136]	; (800d0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d004      	beq.n	800d034 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a21      	ldr	r2, [pc, #132]	; (800d0b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d12b      	bne.n	800d08c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03e:	051b      	lsls	r3, r3, #20
 800d040:	4313      	orrs	r3, r2
 800d042:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	4313      	orrs	r3, r2
 800d050:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05c:	4313      	orrs	r3, r2
 800d05e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a11      	ldr	r2, [pc, #68]	; (800d0ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d009      	beq.n	800d07e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a10      	ldr	r2, [pc, #64]	; (800d0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d004      	beq.n	800d07e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a0e      	ldr	r2, [pc, #56]	; (800d0b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d106      	bne.n	800d08c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d088:	4313      	orrs	r3, r2
 800d08a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3714      	adds	r7, #20
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	40012c00 	.word	0x40012c00
 800d0b0:	40013400 	.word	0x40013400
 800d0b4:	40015000 	.word	0x40015000

0800d0b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0c0:	bf00      	nop
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0d4:	bf00      	nop
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d0e8:	bf00      	nop
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <LL_EXTI_EnableIT_0_31>:
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800d14c:	4b05      	ldr	r3, [pc, #20]	; (800d164 <LL_EXTI_EnableIT_0_31+0x20>)
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	4904      	ldr	r1, [pc, #16]	; (800d164 <LL_EXTI_EnableIT_0_31+0x20>)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4313      	orrs	r3, r2
 800d156:	600b      	str	r3, [r1, #0]
}
 800d158:	bf00      	nop
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr
 800d164:	40010400 	.word	0x40010400

0800d168 <LL_EXTI_EnableIT_32_63>:
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d170:	4b05      	ldr	r3, [pc, #20]	; (800d188 <LL_EXTI_EnableIT_32_63+0x20>)
 800d172:	6a1a      	ldr	r2, [r3, #32]
 800d174:	4904      	ldr	r1, [pc, #16]	; (800d188 <LL_EXTI_EnableIT_32_63+0x20>)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4313      	orrs	r3, r2
 800d17a:	620b      	str	r3, [r1, #32]
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	40010400 	.word	0x40010400

0800d18c <LL_EXTI_DisableIT_0_31>:
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d194:	4b06      	ldr	r3, [pc, #24]	; (800d1b0 <LL_EXTI_DisableIT_0_31+0x24>)
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	43db      	mvns	r3, r3
 800d19c:	4904      	ldr	r1, [pc, #16]	; (800d1b0 <LL_EXTI_DisableIT_0_31+0x24>)
 800d19e:	4013      	ands	r3, r2
 800d1a0:	600b      	str	r3, [r1, #0]
}
 800d1a2:	bf00      	nop
 800d1a4:	370c      	adds	r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	40010400 	.word	0x40010400

0800d1b4 <LL_EXTI_DisableIT_32_63>:
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d1bc:	4b06      	ldr	r3, [pc, #24]	; (800d1d8 <LL_EXTI_DisableIT_32_63+0x24>)
 800d1be:	6a1a      	ldr	r2, [r3, #32]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	43db      	mvns	r3, r3
 800d1c4:	4904      	ldr	r1, [pc, #16]	; (800d1d8 <LL_EXTI_DisableIT_32_63+0x24>)
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	620b      	str	r3, [r1, #32]
}
 800d1ca:	bf00      	nop
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop
 800d1d8:	40010400 	.word	0x40010400

0800d1dc <LL_EXTI_EnableEvent_0_31>:
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d1e4:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <LL_EXTI_EnableEvent_0_31+0x20>)
 800d1e6:	685a      	ldr	r2, [r3, #4]
 800d1e8:	4904      	ldr	r1, [pc, #16]	; (800d1fc <LL_EXTI_EnableEvent_0_31+0x20>)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	604b      	str	r3, [r1, #4]
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	40010400 	.word	0x40010400

0800d200 <LL_EXTI_EnableEvent_32_63>:
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d208:	4b05      	ldr	r3, [pc, #20]	; (800d220 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d20a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d20c:	4904      	ldr	r1, [pc, #16]	; (800d220 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4313      	orrs	r3, r2
 800d212:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	40010400 	.word	0x40010400

0800d224 <LL_EXTI_DisableEvent_0_31>:
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d22c:	4b06      	ldr	r3, [pc, #24]	; (800d248 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	43db      	mvns	r3, r3
 800d234:	4904      	ldr	r1, [pc, #16]	; (800d248 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d236:	4013      	ands	r3, r2
 800d238:	604b      	str	r3, [r1, #4]
}
 800d23a:	bf00      	nop
 800d23c:	370c      	adds	r7, #12
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	40010400 	.word	0x40010400

0800d24c <LL_EXTI_DisableEvent_32_63>:
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d254:	4b06      	ldr	r3, [pc, #24]	; (800d270 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	43db      	mvns	r3, r3
 800d25c:	4904      	ldr	r1, [pc, #16]	; (800d270 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d25e:	4013      	ands	r3, r2
 800d260:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d262:	bf00      	nop
 800d264:	370c      	adds	r7, #12
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	40010400 	.word	0x40010400

0800d274 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d27c:	4b05      	ldr	r3, [pc, #20]	; (800d294 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d27e:	689a      	ldr	r2, [r3, #8]
 800d280:	4904      	ldr	r1, [pc, #16]	; (800d294 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4313      	orrs	r3, r2
 800d286:	608b      	str	r3, [r1, #8]
}
 800d288:	bf00      	nop
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	40010400 	.word	0x40010400

0800d298 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d2a0:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d2a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2a4:	4904      	ldr	r1, [pc, #16]	; (800d2b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr
 800d2b8:	40010400 	.word	0x40010400

0800d2bc <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d2c4:	4b06      	ldr	r3, [pc, #24]	; (800d2e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d2c6:	689a      	ldr	r2, [r3, #8]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	43db      	mvns	r3, r3
 800d2cc:	4904      	ldr	r1, [pc, #16]	; (800d2e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	608b      	str	r3, [r1, #8]
}
 800d2d2:	bf00      	nop
 800d2d4:	370c      	adds	r7, #12
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	40010400 	.word	0x40010400

0800d2e4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d2ec:	4b06      	ldr	r3, [pc, #24]	; (800d308 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d2ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	43db      	mvns	r3, r3
 800d2f4:	4904      	ldr	r1, [pc, #16]	; (800d308 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d2f6:	4013      	ands	r3, r2
 800d2f8:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d2fa:	bf00      	nop
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	40010400 	.word	0x40010400

0800d30c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d314:	4b05      	ldr	r3, [pc, #20]	; (800d32c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d316:	68da      	ldr	r2, [r3, #12]
 800d318:	4904      	ldr	r1, [pc, #16]	; (800d32c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4313      	orrs	r3, r2
 800d31e:	60cb      	str	r3, [r1, #12]
}
 800d320:	bf00      	nop
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	40010400 	.word	0x40010400

0800d330 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d338:	4b05      	ldr	r3, [pc, #20]	; (800d350 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d33c:	4904      	ldr	r1, [pc, #16]	; (800d350 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4313      	orrs	r3, r2
 800d342:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	40010400 	.word	0x40010400

0800d354 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d35c:	4b06      	ldr	r3, [pc, #24]	; (800d378 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d35e:	68da      	ldr	r2, [r3, #12]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	43db      	mvns	r3, r3
 800d364:	4904      	ldr	r1, [pc, #16]	; (800d378 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d366:	4013      	ands	r3, r2
 800d368:	60cb      	str	r3, [r1, #12]
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	40010400 	.word	0x40010400

0800d37c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d384:	4b06      	ldr	r3, [pc, #24]	; (800d3a0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	43db      	mvns	r3, r3
 800d38c:	4904      	ldr	r1, [pc, #16]	; (800d3a0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d38e:	4013      	ands	r3, r2
 800d390:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d392:	bf00      	nop
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	40010400 	.word	0x40010400

0800d3a4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	7a1b      	ldrb	r3, [r3, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f000 80c8 	beq.w	800d54a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d05d      	beq.n	800d47e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	7a5b      	ldrb	r3, [r3, #9]
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d00e      	beq.n	800d3e8 <LL_EXTI_Init+0x44>
 800d3ca:	2b02      	cmp	r3, #2
 800d3cc:	d017      	beq.n	800d3fe <LL_EXTI_Init+0x5a>
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d120      	bne.n	800d414 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7ff ff24 	bl	800d224 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7ff feaf 	bl	800d144 <LL_EXTI_EnableIT_0_31>
          break;
 800d3e6:	e018      	b.n	800d41a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff fecd 	bl	800d18c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7ff fef0 	bl	800d1dc <LL_EXTI_EnableEvent_0_31>
          break;
 800d3fc:	e00d      	b.n	800d41a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4618      	mov	r0, r3
 800d404:	f7ff fe9e 	bl	800d144 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff fee5 	bl	800d1dc <LL_EXTI_EnableEvent_0_31>
          break;
 800d412:	e002      	b.n	800d41a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d414:	2301      	movs	r3, #1
 800d416:	60fb      	str	r3, [r7, #12]
          break;
 800d418:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	7a9b      	ldrb	r3, [r3, #10]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d02d      	beq.n	800d47e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	7a9b      	ldrb	r3, [r3, #10]
 800d426:	2b02      	cmp	r3, #2
 800d428:	d00e      	beq.n	800d448 <LL_EXTI_Init+0xa4>
 800d42a:	2b03      	cmp	r3, #3
 800d42c:	d017      	beq.n	800d45e <LL_EXTI_Init+0xba>
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d120      	bne.n	800d474 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4618      	mov	r0, r3
 800d438:	f7ff ff8c 	bl	800d354 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff ff17 	bl	800d274 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d446:	e01b      	b.n	800d480 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7ff ff35 	bl	800d2bc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4618      	mov	r0, r3
 800d458:	f7ff ff58 	bl	800d30c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d45c:	e010      	b.n	800d480 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4618      	mov	r0, r3
 800d464:	f7ff ff06 	bl	800d274 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7ff ff4d 	bl	800d30c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d472:	e005      	b.n	800d480 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f043 0302 	orr.w	r3, r3, #2
 800d47a:	60fb      	str	r3, [r7, #12]
            break;
 800d47c:	e000      	b.n	800d480 <LL_EXTI_Init+0xdc>
        }
      }
 800d47e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d075      	beq.n	800d574 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7a5b      	ldrb	r3, [r3, #9]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d00e      	beq.n	800d4ae <LL_EXTI_Init+0x10a>
 800d490:	2b02      	cmp	r3, #2
 800d492:	d017      	beq.n	800d4c4 <LL_EXTI_Init+0x120>
 800d494:	2b00      	cmp	r3, #0
 800d496:	d120      	bne.n	800d4da <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff fed5 	bl	800d24c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff fe5e 	bl	800d168 <LL_EXTI_EnableIT_32_63>
          break;
 800d4ac:	e01a      	b.n	800d4e4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff fe7e 	bl	800d1b4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7ff fe9f 	bl	800d200 <LL_EXTI_EnableEvent_32_63>
          break;
 800d4c2:	e00f      	b.n	800d4e4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff fe4d 	bl	800d168 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7ff fe94 	bl	800d200 <LL_EXTI_EnableEvent_32_63>
          break;
 800d4d8:	e004      	b.n	800d4e4 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f043 0304 	orr.w	r3, r3, #4
 800d4e0:	60fb      	str	r3, [r7, #12]
          break;
 800d4e2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	7a9b      	ldrb	r3, [r3, #10]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d043      	beq.n	800d574 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	7a9b      	ldrb	r3, [r3, #10]
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	d00e      	beq.n	800d512 <LL_EXTI_Init+0x16e>
 800d4f4:	2b03      	cmp	r3, #3
 800d4f6:	d017      	beq.n	800d528 <LL_EXTI_Init+0x184>
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d120      	bne.n	800d53e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff ff3b 	bl	800d37c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7ff fec4 	bl	800d298 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d510:	e031      	b.n	800d576 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	4618      	mov	r0, r3
 800d518:	f7ff fee4 	bl	800d2e4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	4618      	mov	r0, r3
 800d522:	f7ff ff05 	bl	800d330 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d526:	e026      	b.n	800d576 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff feb3 	bl	800d298 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff fefa 	bl	800d330 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d53c:	e01b      	b.n	800d576 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f043 0305 	orr.w	r3, r3, #5
 800d544:	60fb      	str	r3, [r7, #12]
            break;
 800d546:	bf00      	nop
 800d548:	e015      	b.n	800d576 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff fe1c 	bl	800d18c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff fe63 	bl	800d224 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff fe26 	bl	800d1b4 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff fe6d 	bl	800d24c <LL_EXTI_DisableEvent_32_63>
 800d572:	e000      	b.n	800d576 <LL_EXTI_Init+0x1d2>
      }
 800d574:	bf00      	nop
  }

  return status;
 800d576:	68fb      	ldr	r3, [r7, #12]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <LL_GPIO_SetPinMode>:
{
 800d580:	b480      	push	{r7}
 800d582:	b089      	sub	sp, #36	; 0x24
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	fa93 f3a3 	rbit	r3, r3
 800d59a:	613b      	str	r3, [r7, #16]
  return result;
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	fab3 f383 	clz	r3, r3
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	2103      	movs	r1, #3
 800d5a8:	fa01 f303 	lsl.w	r3, r1, r3
 800d5ac:	43db      	mvns	r3, r3
 800d5ae:	401a      	ands	r2, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	fa93 f3a3 	rbit	r3, r3
 800d5ba:	61bb      	str	r3, [r7, #24]
  return result;
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	fab3 f383 	clz	r3, r3
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d5cc:	431a      	orrs	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	601a      	str	r2, [r3, #0]
}
 800d5d2:	bf00      	nop
 800d5d4:	3724      	adds	r7, #36	; 0x24
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <LL_GPIO_SetPinOutputType>:
{
 800d5de:	b480      	push	{r7}
 800d5e0:	b085      	sub	sp, #20
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	60f8      	str	r0, [r7, #12]
 800d5e6:	60b9      	str	r1, [r7, #8]
 800d5e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	43db      	mvns	r3, r3
 800d5f2:	401a      	ands	r2, r3
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	6879      	ldr	r1, [r7, #4]
 800d5f8:	fb01 f303 	mul.w	r3, r1, r3
 800d5fc:	431a      	orrs	r2, r3
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	605a      	str	r2, [r3, #4]
}
 800d602:	bf00      	nop
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <LL_GPIO_SetPinSpeed>:
{
 800d60e:	b480      	push	{r7}
 800d610:	b089      	sub	sp, #36	; 0x24
 800d612:	af00      	add	r7, sp, #0
 800d614:	60f8      	str	r0, [r7, #12]
 800d616:	60b9      	str	r1, [r7, #8]
 800d618:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	689a      	ldr	r2, [r3, #8]
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	fa93 f3a3 	rbit	r3, r3
 800d628:	613b      	str	r3, [r7, #16]
  return result;
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	fab3 f383 	clz	r3, r3
 800d630:	b2db      	uxtb	r3, r3
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	2103      	movs	r1, #3
 800d636:	fa01 f303 	lsl.w	r3, r1, r3
 800d63a:	43db      	mvns	r3, r3
 800d63c:	401a      	ands	r2, r3
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	fa93 f3a3 	rbit	r3, r3
 800d648:	61bb      	str	r3, [r7, #24]
  return result;
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	fab3 f383 	clz	r3, r3
 800d650:	b2db      	uxtb	r3, r3
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	6879      	ldr	r1, [r7, #4]
 800d656:	fa01 f303 	lsl.w	r3, r1, r3
 800d65a:	431a      	orrs	r2, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	609a      	str	r2, [r3, #8]
}
 800d660:	bf00      	nop
 800d662:	3724      	adds	r7, #36	; 0x24
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <LL_GPIO_SetPinPull>:
{
 800d66c:	b480      	push	{r7}
 800d66e:	b089      	sub	sp, #36	; 0x24
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	68da      	ldr	r2, [r3, #12]
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	fa93 f3a3 	rbit	r3, r3
 800d686:	613b      	str	r3, [r7, #16]
  return result;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	fab3 f383 	clz	r3, r3
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	2103      	movs	r1, #3
 800d694:	fa01 f303 	lsl.w	r3, r1, r3
 800d698:	43db      	mvns	r3, r3
 800d69a:	401a      	ands	r2, r3
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	fa93 f3a3 	rbit	r3, r3
 800d6a6:	61bb      	str	r3, [r7, #24]
  return result;
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	fab3 f383 	clz	r3, r3
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	6879      	ldr	r1, [r7, #4]
 800d6b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d6b8:	431a      	orrs	r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	60da      	str	r2, [r3, #12]
}
 800d6be:	bf00      	nop
 800d6c0:	3724      	adds	r7, #36	; 0x24
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <LL_GPIO_SetAFPin_0_7>:
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	b089      	sub	sp, #36	; 0x24
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	60f8      	str	r0, [r7, #12]
 800d6d2:	60b9      	str	r1, [r7, #8]
 800d6d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6a1a      	ldr	r2, [r3, #32]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	fa93 f3a3 	rbit	r3, r3
 800d6e4:	613b      	str	r3, [r7, #16]
  return result;
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	fab3 f383 	clz	r3, r3
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	210f      	movs	r1, #15
 800d6f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d6f6:	43db      	mvns	r3, r3
 800d6f8:	401a      	ands	r2, r3
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	fa93 f3a3 	rbit	r3, r3
 800d704:	61bb      	str	r3, [r7, #24]
  return result;
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	fab3 f383 	clz	r3, r3
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	6879      	ldr	r1, [r7, #4]
 800d712:	fa01 f303 	lsl.w	r3, r1, r3
 800d716:	431a      	orrs	r2, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	621a      	str	r2, [r3, #32]
}
 800d71c:	bf00      	nop
 800d71e:	3724      	adds	r7, #36	; 0x24
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <LL_GPIO_SetAFPin_8_15>:
{
 800d728:	b480      	push	{r7}
 800d72a:	b089      	sub	sp, #36	; 0x24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	0a1b      	lsrs	r3, r3, #8
 800d73c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	fa93 f3a3 	rbit	r3, r3
 800d744:	613b      	str	r3, [r7, #16]
  return result;
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	fab3 f383 	clz	r3, r3
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	210f      	movs	r1, #15
 800d752:	fa01 f303 	lsl.w	r3, r1, r3
 800d756:	43db      	mvns	r3, r3
 800d758:	401a      	ands	r2, r3
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	0a1b      	lsrs	r3, r3, #8
 800d75e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	fa93 f3a3 	rbit	r3, r3
 800d766:	61bb      	str	r3, [r7, #24]
  return result;
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	fab3 f383 	clz	r3, r3
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	6879      	ldr	r1, [r7, #4]
 800d774:	fa01 f303 	lsl.w	r3, r1, r3
 800d778:	431a      	orrs	r2, r3
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d77e:	bf00      	nop
 800d780:	3724      	adds	r7, #36	; 0x24
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b086      	sub	sp, #24
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	fa93 f3a3 	rbit	r3, r3
 800d7a0:	60bb      	str	r3, [r7, #8]
  return result;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	fab3 f383 	clz	r3, r3
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d7ac:	e040      	b.n	800d830 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	2101      	movs	r1, #1
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d032      	beq.n	800d82a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	6939      	ldr	r1, [r7, #16]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff fed7 	bl	800d580 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d003      	beq.n	800d7e2 <LL_GPIO_Init+0x58>
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d106      	bne.n	800d7f0 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	6939      	ldr	r1, [r7, #16]
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f7ff ff0f 	bl	800d60e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	6939      	ldr	r1, [r7, #16]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f7ff ff37 	bl	800d66c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	2b02      	cmp	r3, #2
 800d804:	d111      	bne.n	800d82a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	2bff      	cmp	r3, #255	; 0xff
 800d80a:	d807      	bhi.n	800d81c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	695b      	ldr	r3, [r3, #20]
 800d810:	461a      	mov	r2, r3
 800d812:	6939      	ldr	r1, [r7, #16]
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7ff ff58 	bl	800d6ca <LL_GPIO_SetAFPin_0_7>
 800d81a:	e006      	b.n	800d82a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	461a      	mov	r2, r3
 800d822:	6939      	ldr	r1, [r7, #16]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7ff ff7f 	bl	800d728 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	3301      	adds	r3, #1
 800d82e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	fa22 f303 	lsr.w	r3, r2, r3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1b7      	bne.n	800d7ae <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	2b01      	cmp	r3, #1
 800d844:	d003      	beq.n	800d84e <LL_GPIO_Init+0xc4>
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	2b02      	cmp	r3, #2
 800d84c:	d107      	bne.n	800d85e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	6819      	ldr	r1, [r3, #0]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	461a      	mov	r2, r3
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff fec0 	bl	800d5de <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800d85e:	2300      	movs	r3, #0
}
 800d860:	4618      	mov	r0, r3
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800d868:	b590      	push	{r4, r7, lr}
 800d86a:	b087      	sub	sp, #28
 800d86c:	af02      	add	r7, sp, #8
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	4611      	mov	r1, r2
 800d874:	461a      	mov	r2, r3
 800d876:	4623      	mov	r3, r4
 800d878:	80fb      	strh	r3, [r7, #6]
 800d87a:	4603      	mov	r3, r0
 800d87c:	80bb      	strh	r3, [r7, #4]
 800d87e:	460b      	mov	r3, r1
 800d880:	807b      	strh	r3, [r7, #2]
 800d882:	4613      	mov	r3, r2
 800d884:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800d886:	2300      	movs	r3, #0
 800d888:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800d88a:	7bfa      	ldrb	r2, [r7, #15]
 800d88c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d890:	429a      	cmp	r2, r3
 800d892:	d93a      	bls.n	800d90a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800d894:	88ba      	ldrh	r2, [r7, #4]
 800d896:	7bfb      	ldrb	r3, [r7, #15]
 800d898:	441a      	add	r2, r3
 800d89a:	88b9      	ldrh	r1, [r7, #4]
 800d89c:	883b      	ldrh	r3, [r7, #0]
 800d89e:	4419      	add	r1, r3
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
 800d8a2:	1acb      	subs	r3, r1, r3
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	f000 8090 	beq.w	800d9ca <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800d8aa:	88fa      	ldrh	r2, [r7, #6]
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	441a      	add	r2, r3
 800d8b0:	88f9      	ldrh	r1, [r7, #6]
 800d8b2:	887b      	ldrh	r3, [r7, #2]
 800d8b4:	4419      	add	r1, r3
 800d8b6:	7bfb      	ldrb	r3, [r7, #15]
 800d8b8:	1acb      	subs	r3, r1, r3
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	f000 8085 	beq.w	800d9ca <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	88fb      	ldrh	r3, [r7, #6]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	b298      	uxth	r0, r3
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	88bb      	ldrh	r3, [r7, #4]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	b299      	uxth	r1, r3
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	887a      	ldrh	r2, [r7, #2]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	b29c      	uxth	r4, r3
 800d8e6:	7bfb      	ldrb	r3, [r7, #15]
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	005b      	lsls	r3, r3, #1
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	883a      	ldrh	r2, [r7, #0]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	2304      	movs	r3, #4
 800d8fa:	9301      	str	r3, [sp, #4]
 800d8fc:	8c3b      	ldrh	r3, [r7, #32]
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	4613      	mov	r3, r2
 800d902:	4622      	mov	r2, r4
 800d904:	f000 fcd6 	bl	800e2b4 <ILI9341_Draw_Rectangle>
				goto finish;
 800d908:	e060      	b.n	800d9cc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d90a:	7bfb      	ldrb	r3, [r7, #15]
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	88fb      	ldrh	r3, [r7, #6]
 800d910:	4413      	add	r3, r2
 800d912:	b298      	uxth	r0, r3
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	b29a      	uxth	r2, r3
 800d918:	88bb      	ldrh	r3, [r7, #4]
 800d91a:	4413      	add	r3, r2
 800d91c:	b299      	uxth	r1, r3
 800d91e:	7bfb      	ldrb	r3, [r7, #15]
 800d920:	b29b      	uxth	r3, r3
 800d922:	005b      	lsls	r3, r3, #1
 800d924:	b29b      	uxth	r3, r3
 800d926:	887a      	ldrh	r2, [r7, #2]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d930:	b29b      	uxth	r3, r3
 800d932:	f000 fa81 	bl	800de38 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	b29a      	uxth	r2, r3
 800d93a:	88fb      	ldrh	r3, [r7, #6]
 800d93c:	4413      	add	r3, r2
 800d93e:	b298      	uxth	r0, r3
										(y + h) - b,
 800d940:	88ba      	ldrh	r2, [r7, #4]
 800d942:	883b      	ldrh	r3, [r7, #0]
 800d944:	4413      	add	r3, r2
 800d946:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d948:	7bfb      	ldrb	r3, [r7, #15]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	b299      	uxth	r1, r3
 800d950:	7bfb      	ldrb	r3, [r7, #15]
 800d952:	b29b      	uxth	r3, r3
 800d954:	887a      	ldrh	r2, [r7, #2]
 800d956:	1ad3      	subs	r3, r2, r3
 800d958:	b29a      	uxth	r2, r3
 800d95a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d95e:	b29b      	uxth	r3, r3
 800d960:	f000 fa6a 	bl	800de38 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800d964:	7bfb      	ldrb	r3, [r7, #15]
 800d966:	b29a      	uxth	r2, r3
 800d968:	88fb      	ldrh	r3, [r7, #6]
 800d96a:	4413      	add	r3, r2
 800d96c:	b298      	uxth	r0, r3
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	b29a      	uxth	r2, r3
 800d972:	88bb      	ldrh	r3, [r7, #4]
 800d974:	4413      	add	r3, r2
 800d976:	b299      	uxth	r1, r3
 800d978:	7bfb      	ldrb	r3, [r7, #15]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	005b      	lsls	r3, r3, #1
 800d97e:	b29b      	uxth	r3, r3
 800d980:	883a      	ldrh	r2, [r7, #0]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	b29a      	uxth	r2, r3
 800d986:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	f000 fa9c 	bl	800dec8 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800d990:	88fa      	ldrh	r2, [r7, #6]
 800d992:	887b      	ldrh	r3, [r7, #2]
 800d994:	4413      	add	r3, r2
 800d996:	b29a      	uxth	r2, r3
 800d998:	7bfb      	ldrb	r3, [r7, #15]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	b298      	uxth	r0, r3
 800d9a0:	7bfb      	ldrb	r3, [r7, #15]
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	88bb      	ldrh	r3, [r7, #4]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	b299      	uxth	r1, r3
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	883a      	ldrh	r2, [r7, #0]
 800d9b4:	1ad3      	subs	r3, r2, r3
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	f000 fa83 	bl	800dec8 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800d9c8:	e75f      	b.n	800d88a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800d9ca:	bf00      	nop
	// done
	return;
 800d9cc:	bf00      	nop
}
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd90      	pop	{r4, r7, pc}

0800d9d4 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d9d4:	b590      	push	{r4, r7, lr}
 800d9d6:	b089      	sub	sp, #36	; 0x24
 800d9d8:	af02      	add	r7, sp, #8
 800d9da:	4604      	mov	r4, r0
 800d9dc:	4608      	mov	r0, r1
 800d9de:	4611      	mov	r1, r2
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4623      	mov	r3, r4
 800d9e4:	71fb      	strb	r3, [r7, #7]
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	80bb      	strh	r3, [r7, #4]
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	807b      	strh	r3, [r7, #2]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800d9f2:	79fb      	ldrb	r3, [r7, #7]
 800d9f4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800d9f6:	7dfb      	ldrb	r3, [r7, #23]
 800d9f8:	2b1f      	cmp	r3, #31
 800d9fa:	d802      	bhi.n	800da02 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	71fb      	strb	r3, [r7, #7]
 800da00:	e002      	b.n	800da08 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800da02:	7dfb      	ldrb	r3, [r7, #23]
 800da04:	3b20      	subs	r3, #32
 800da06:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800da08:	2300      	movs	r3, #0
 800da0a:	753b      	strb	r3, [r7, #20]
 800da0c:	e012      	b.n	800da34 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800da0e:	7dfa      	ldrb	r2, [r7, #23]
 800da10:	7d38      	ldrb	r0, [r7, #20]
 800da12:	7d39      	ldrb	r1, [r7, #20]
 800da14:	4c48      	ldr	r4, [pc, #288]	; (800db38 <ILI9341_Draw_Char+0x164>)
 800da16:	4613      	mov	r3, r2
 800da18:	005b      	lsls	r3, r3, #1
 800da1a:	4413      	add	r3, r2
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	4423      	add	r3, r4
 800da20:	4403      	add	r3, r0
 800da22:	781a      	ldrb	r2, [r3, #0]
 800da24:	f107 0318 	add.w	r3, r7, #24
 800da28:	440b      	add	r3, r1
 800da2a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800da2e:	7d3b      	ldrb	r3, [r7, #20]
 800da30:	3301      	adds	r3, #1
 800da32:	753b      	strb	r3, [r7, #20]
 800da34:	7d3b      	ldrb	r3, [r7, #20]
 800da36:	2b05      	cmp	r3, #5
 800da38:	d9e9      	bls.n	800da0e <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800da3a:	2300      	movs	r3, #0
 800da3c:	757b      	strb	r3, [r7, #21]
 800da3e:	e074      	b.n	800db2a <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800da40:	2300      	movs	r3, #0
 800da42:	75bb      	strb	r3, [r7, #22]
 800da44:	e06b      	b.n	800db1e <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800da46:	7d7b      	ldrb	r3, [r7, #21]
 800da48:	f107 0218 	add.w	r2, r7, #24
 800da4c:	4413      	add	r3, r2
 800da4e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800da52:	461a      	mov	r2, r3
 800da54:	7dbb      	ldrb	r3, [r7, #22]
 800da56:	fa42 f303 	asr.w	r3, r2, r3
 800da5a:	f003 0301 	and.w	r3, r3, #1
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d02d      	beq.n	800dabe <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800da62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da64:	2b01      	cmp	r3, #1
 800da66:	d10e      	bne.n	800da86 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800da68:	7d7b      	ldrb	r3, [r7, #21]
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	88bb      	ldrh	r3, [r7, #4]
 800da6e:	4413      	add	r3, r2
 800da70:	b298      	uxth	r0, r3
 800da72:	7dbb      	ldrb	r3, [r7, #22]
 800da74:	b29a      	uxth	r2, r3
 800da76:	887b      	ldrh	r3, [r7, #2]
 800da78:	4413      	add	r3, r2
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	883a      	ldrh	r2, [r7, #0]
 800da7e:	4619      	mov	r1, r3
 800da80:	f000 fae0 	bl	800e044 <ILI9341_Draw_Pixel>
 800da84:	e048      	b.n	800db18 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800da86:	7d7b      	ldrb	r3, [r7, #21]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800da8c:	fb12 f303 	smulbb	r3, r2, r3
 800da90:	b29a      	uxth	r2, r3
 800da92:	88bb      	ldrh	r3, [r7, #4]
 800da94:	4413      	add	r3, r2
 800da96:	b298      	uxth	r0, r3
 800da98:	7dbb      	ldrb	r3, [r7, #22]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800da9e:	fb12 f303 	smulbb	r3, r2, r3
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	887b      	ldrh	r3, [r7, #2]
 800daa6:	4413      	add	r3, r2
 800daa8:	b299      	uxth	r1, r3
 800daaa:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800daac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800daae:	2301      	movs	r3, #1
 800dab0:	9301      	str	r3, [sp, #4]
 800dab2:	883b      	ldrh	r3, [r7, #0]
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	4623      	mov	r3, r4
 800dab8:	f000 fbfc 	bl	800e2b4 <ILI9341_Draw_Rectangle>
 800dabc:	e02c      	b.n	800db18 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800dabe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d10e      	bne.n	800dae2 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800dac4:	7d7b      	ldrb	r3, [r7, #21]
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	88bb      	ldrh	r3, [r7, #4]
 800daca:	4413      	add	r3, r2
 800dacc:	b298      	uxth	r0, r3
 800dace:	7dbb      	ldrb	r3, [r7, #22]
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	887b      	ldrh	r3, [r7, #2]
 800dad4:	4413      	add	r3, r2
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800dada:	4619      	mov	r1, r3
 800dadc:	f000 fab2 	bl	800e044 <ILI9341_Draw_Pixel>
 800dae0:	e01a      	b.n	800db18 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800dae2:	7d7b      	ldrb	r3, [r7, #21]
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dae8:	fb12 f303 	smulbb	r3, r2, r3
 800daec:	b29a      	uxth	r2, r3
 800daee:	88bb      	ldrh	r3, [r7, #4]
 800daf0:	4413      	add	r3, r2
 800daf2:	b298      	uxth	r0, r3
 800daf4:	7dbb      	ldrb	r3, [r7, #22]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dafa:	fb12 f303 	smulbb	r3, r2, r3
 800dafe:	b29a      	uxth	r2, r3
 800db00:	887b      	ldrh	r3, [r7, #2]
 800db02:	4413      	add	r3, r2
 800db04:	b299      	uxth	r1, r3
 800db06:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800db08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db0a:	2301      	movs	r3, #1
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	4623      	mov	r3, r4
 800db14:	f000 fbce 	bl	800e2b4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800db18:	7dbb      	ldrb	r3, [r7, #22]
 800db1a:	3301      	adds	r3, #1
 800db1c:	75bb      	strb	r3, [r7, #22]
 800db1e:	7dbb      	ldrb	r3, [r7, #22]
 800db20:	2b07      	cmp	r3, #7
 800db22:	d990      	bls.n	800da46 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800db24:	7d7b      	ldrb	r3, [r7, #21]
 800db26:	3301      	adds	r3, #1
 800db28:	757b      	strb	r3, [r7, #21]
 800db2a:	7d7b      	ldrb	r3, [r7, #21]
 800db2c:	2b05      	cmp	r3, #5
 800db2e:	d987      	bls.n	800da40 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800db30:	bf00      	nop
 800db32:	371c      	adds	r7, #28
 800db34:	46bd      	mov	sp, r7
 800db36:	bd90      	pop	{r4, r7, pc}
 800db38:	08013518 	.word	0x08013518

0800db3c <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800db3c:	b590      	push	{r4, r7, lr}
 800db3e:	b087      	sub	sp, #28
 800db40:	af02      	add	r7, sp, #8
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	4608      	mov	r0, r1
 800db46:	4611      	mov	r1, r2
 800db48:	461a      	mov	r2, r3
 800db4a:	4603      	mov	r3, r0
 800db4c:	817b      	strh	r3, [r7, #10]
 800db4e:	460b      	mov	r3, r1
 800db50:	813b      	strh	r3, [r7, #8]
 800db52:	4613      	mov	r3, r2
 800db54:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800db56:	e016      	b.n	800db86 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	60fa      	str	r2, [r7, #12]
 800db5e:	7818      	ldrb	r0, [r3, #0]
 800db60:	88fc      	ldrh	r4, [r7, #6]
 800db62:	893a      	ldrh	r2, [r7, #8]
 800db64:	8979      	ldrh	r1, [r7, #10]
 800db66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	8c3b      	ldrh	r3, [r7, #32]
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	4623      	mov	r3, r4
 800db70:	f7ff ff30 	bl	800d9d4 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800db74:	8c3b      	ldrh	r3, [r7, #32]
 800db76:	461a      	mov	r2, r3
 800db78:	0052      	lsls	r2, r2, #1
 800db7a:	4413      	add	r3, r2
 800db7c:	005b      	lsls	r3, r3, #1
 800db7e:	b29a      	uxth	r2, r3
 800db80:	897b      	ldrh	r3, [r7, #10]
 800db82:	4413      	add	r3, r2
 800db84:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1e4      	bne.n	800db58 <ILI9341_Draw_Text+0x1c>
    }


}
 800db8e:	bf00      	nop
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	bd90      	pop	{r4, r7, pc}
	...

0800db98 <ILI9341_FillScreenGradient>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_FillScreenGradient()
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800dba2:	2300      	movs	r3, #0
 800dba4:	80fb      	strh	r3, [r7, #6]
 800dba6:	e010      	b.n	800dbca <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800dba8:	88fb      	ldrh	r3, [r7, #6]
 800dbaa:	4a0c      	ldr	r2, [pc, #48]	; (800dbdc <ILI9341_FillScreenGradient+0x44>)
 800dbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	88b9      	ldrh	r1, [r7, #4]
 800dbb4:	88f8      	ldrh	r0, [r7, #6]
 800dbb6:	2204      	movs	r2, #4
 800dbb8:	9201      	str	r2, [sp, #4]
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	23f0      	movs	r3, #240	; 0xf0
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f000 fb78 	bl	800e2b4 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800dbc4:	88fb      	ldrh	r3, [r7, #6]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	80fb      	strh	r3, [r7, #6]
 800dbca:	88fb      	ldrh	r3, [r7, #6]
 800dbcc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800dbd0:	d9ea      	bls.n	800dba8 <ILI9341_FillScreenGradient+0x10>

	}
}
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	20000cbc 	.word	0x20000cbc

0800dbe0 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800dbe4:	f000 fc3a 	bl	800e45c <_LCD_Enable>
	ILI9341_SPI_Init();
 800dbe8:	f000 f908 	bl	800ddfc <ILI9341_SPI_Init>
	_LCD_Reset();
 800dbec:	f000 fc46 	bl	800e47c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800dbf0:	2001      	movs	r0, #1
 800dbf2:	f000 fd11 	bl	800e618 <_LCD_SendCommand>
	HAL_Delay(2000);
 800dbf6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800dbfa:	f7fa fdf7 	bl	80087ec <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800dbfe:	20cb      	movs	r0, #203	; 0xcb
 800dc00:	f000 fd0a 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800dc04:	2039      	movs	r0, #57	; 0x39
 800dc06:	f000 fd39 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x2C);
 800dc0a:	202c      	movs	r0, #44	; 0x2c
 800dc0c:	f000 fd36 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x00);
 800dc10:	2000      	movs	r0, #0
 800dc12:	f000 fd33 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x34);
 800dc16:	2034      	movs	r0, #52	; 0x34
 800dc18:	f000 fd30 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x02);
 800dc1c:	2002      	movs	r0, #2
 800dc1e:	f000 fd2d 	bl	800e67c <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800dc22:	20cf      	movs	r0, #207	; 0xcf
 800dc24:	f000 fcf8 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dc28:	2000      	movs	r0, #0
 800dc2a:	f000 fd27 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800dc2e:	20c1      	movs	r0, #193	; 0xc1
 800dc30:	f000 fd24 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x30);
 800dc34:	2030      	movs	r0, #48	; 0x30
 800dc36:	f000 fd21 	bl	800e67c <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800dc3a:	20e8      	movs	r0, #232	; 0xe8
 800dc3c:	f000 fcec 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800dc40:	2085      	movs	r0, #133	; 0x85
 800dc42:	f000 fd1b 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x00);
 800dc46:	2000      	movs	r0, #0
 800dc48:	f000 fd18 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x78);
 800dc4c:	2078      	movs	r0, #120	; 0x78
 800dc4e:	f000 fd15 	bl	800e67c <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800dc52:	20ea      	movs	r0, #234	; 0xea
 800dc54:	f000 fce0 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dc58:	2000      	movs	r0, #0
 800dc5a:	f000 fd0f 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x00);
 800dc5e:	2000      	movs	r0, #0
 800dc60:	f000 fd0c 	bl	800e67c <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800dc64:	20ed      	movs	r0, #237	; 0xed
 800dc66:	f000 fcd7 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800dc6a:	2064      	movs	r0, #100	; 0x64
 800dc6c:	f000 fd06 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x03);
 800dc70:	2003      	movs	r0, #3
 800dc72:	f000 fd03 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x12);
 800dc76:	2012      	movs	r0, #18
 800dc78:	f000 fd00 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x81);
 800dc7c:	2081      	movs	r0, #129	; 0x81
 800dc7e:	f000 fcfd 	bl	800e67c <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800dc82:	20f7      	movs	r0, #247	; 0xf7
 800dc84:	f000 fcc8 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800dc88:	2020      	movs	r0, #32
 800dc8a:	f000 fcf7 	bl	800e67c <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800dc8e:	20c0      	movs	r0, #192	; 0xc0
 800dc90:	f000 fcc2 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800dc94:	2023      	movs	r0, #35	; 0x23
 800dc96:	f000 fcf1 	bl	800e67c <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800dc9a:	20c1      	movs	r0, #193	; 0xc1
 800dc9c:	f000 fcbc 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800dca0:	2010      	movs	r0, #16
 800dca2:	f000 fceb 	bl	800e67c <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800dca6:	20c5      	movs	r0, #197	; 0xc5
 800dca8:	f000 fcb6 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800dcac:	203e      	movs	r0, #62	; 0x3e
 800dcae:	f000 fce5 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x28);
 800dcb2:	2028      	movs	r0, #40	; 0x28
 800dcb4:	f000 fce2 	bl	800e67c <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800dcb8:	20c7      	movs	r0, #199	; 0xc7
 800dcba:	f000 fcad 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800dcbe:	2086      	movs	r0, #134	; 0x86
 800dcc0:	f000 fcdc 	bl	800e67c <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800dcc4:	2036      	movs	r0, #54	; 0x36
 800dcc6:	f000 fca7 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800dcca:	2048      	movs	r0, #72	; 0x48
 800dccc:	f000 fcd6 	bl	800e67c <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800dcd0:	203a      	movs	r0, #58	; 0x3a
 800dcd2:	f000 fca1 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800dcd6:	2055      	movs	r0, #85	; 0x55
 800dcd8:	f000 fcd0 	bl	800e67c <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800dcdc:	20b1      	movs	r0, #177	; 0xb1
 800dcde:	f000 fc9b 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dce2:	2000      	movs	r0, #0
 800dce4:	f000 fcca 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x18);
 800dce8:	2018      	movs	r0, #24
 800dcea:	f000 fcc7 	bl	800e67c <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800dcee:	20b6      	movs	r0, #182	; 0xb6
 800dcf0:	f000 fc92 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800dcf4:	2008      	movs	r0, #8
 800dcf6:	f000 fcc1 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x82);
 800dcfa:	2082      	movs	r0, #130	; 0x82
 800dcfc:	f000 fcbe 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x27);
 800dd00:	2027      	movs	r0, #39	; 0x27
 800dd02:	f000 fcbb 	bl	800e67c <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800dd06:	20f2      	movs	r0, #242	; 0xf2
 800dd08:	f000 fc86 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	f000 fcb5 	bl	800e67c <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800dd12:	2026      	movs	r0, #38	; 0x26
 800dd14:	f000 fc80 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800dd18:	2001      	movs	r0, #1
 800dd1a:	f000 fcaf 	bl	800e67c <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800dd1e:	20e0      	movs	r0, #224	; 0xe0
 800dd20:	f000 fc7a 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800dd24:	200f      	movs	r0, #15
 800dd26:	f000 fca9 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x31);
 800dd2a:	2031      	movs	r0, #49	; 0x31
 800dd2c:	f000 fca6 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x2B);
 800dd30:	202b      	movs	r0, #43	; 0x2b
 800dd32:	f000 fca3 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800dd36:	200c      	movs	r0, #12
 800dd38:	f000 fca0 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dd3c:	200e      	movs	r0, #14
 800dd3e:	f000 fc9d 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x08);
 800dd42:	2008      	movs	r0, #8
 800dd44:	f000 fc9a 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x4E);
 800dd48:	204e      	movs	r0, #78	; 0x4e
 800dd4a:	f000 fc97 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0xF1);
 800dd4e:	20f1      	movs	r0, #241	; 0xf1
 800dd50:	f000 fc94 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x37);
 800dd54:	2037      	movs	r0, #55	; 0x37
 800dd56:	f000 fc91 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x07);
 800dd5a:	2007      	movs	r0, #7
 800dd5c:	f000 fc8e 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x10);
 800dd60:	2010      	movs	r0, #16
 800dd62:	f000 fc8b 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x03);
 800dd66:	2003      	movs	r0, #3
 800dd68:	f000 fc88 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dd6c:	200e      	movs	r0, #14
 800dd6e:	f000 fc85 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x09);
 800dd72:	2009      	movs	r0, #9
 800dd74:	f000 fc82 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x00);
 800dd78:	2000      	movs	r0, #0
 800dd7a:	f000 fc7f 	bl	800e67c <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800dd7e:	20e1      	movs	r0, #225	; 0xe1
 800dd80:	f000 fc4a 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dd84:	2000      	movs	r0, #0
 800dd86:	f000 fc79 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dd8a:	200e      	movs	r0, #14
 800dd8c:	f000 fc76 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x14);
 800dd90:	2014      	movs	r0, #20
 800dd92:	f000 fc73 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x03);
 800dd96:	2003      	movs	r0, #3
 800dd98:	f000 fc70 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x11);
 800dd9c:	2011      	movs	r0, #17
 800dd9e:	f000 fc6d 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x07);
 800dda2:	2007      	movs	r0, #7
 800dda4:	f000 fc6a 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x31);
 800dda8:	2031      	movs	r0, #49	; 0x31
 800ddaa:	f000 fc67 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800ddae:	20c1      	movs	r0, #193	; 0xc1
 800ddb0:	f000 fc64 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x48);
 800ddb4:	2048      	movs	r0, #72	; 0x48
 800ddb6:	f000 fc61 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x08);
 800ddba:	2008      	movs	r0, #8
 800ddbc:	f000 fc5e 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800ddc0:	200f      	movs	r0, #15
 800ddc2:	f000 fc5b 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800ddc6:	200c      	movs	r0, #12
 800ddc8:	f000 fc58 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x31);
 800ddcc:	2031      	movs	r0, #49	; 0x31
 800ddce:	f000 fc55 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x36);
 800ddd2:	2036      	movs	r0, #54	; 0x36
 800ddd4:	f000 fc52 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800ddd8:	200f      	movs	r0, #15
 800ddda:	f000 fc4f 	bl	800e67c <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800ddde:	2011      	movs	r0, #17
 800dde0:	f000 fc1a 	bl	800e618 <_LCD_SendCommand>
	HAL_Delay(240);
 800dde4:	20f0      	movs	r0, #240	; 0xf0
 800dde6:	f7fa fd01 	bl	80087ec <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800ddea:	2029      	movs	r0, #41	; 0x29
 800ddec:	f000 fc14 	bl	800e618 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	f000 fae5 	bl	800e3c0 <ILI9341_Set_Rotation>
}
 800ddf6:	bf00      	nop
 800ddf8:	bd80      	pop	{r7, pc}
	...

0800ddfc <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de00:	4b0b      	ldr	r3, [pc, #44]	; (800de30 <ILI9341_SPI_Init+0x34>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de08:	2b40      	cmp	r3, #64	; 0x40
 800de0a:	d005      	beq.n	800de18 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800de0c:	4b08      	ldr	r3, [pc, #32]	; (800de30 <ILI9341_SPI_Init+0x34>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a07      	ldr	r2, [pc, #28]	; (800de30 <ILI9341_SPI_Init+0x34>)
 800de12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de16:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de18:	4b06      	ldr	r3, [pc, #24]	; (800de34 <ILI9341_SPI_Init+0x38>)
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	4a05      	ldr	r2, [pc, #20]	; (800de34 <ILI9341_SPI_Init+0x38>)
 800de1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de22:	6153      	str	r3, [r2, #20]
}
 800de24:	bf00      	nop
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	40003c00 	.word	0x40003c00
 800de34:	48000400 	.word	0x48000400

0800de38 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800de38:	b590      	push	{r4, r7, lr}
 800de3a:	b085      	sub	sp, #20
 800de3c:	af02      	add	r7, sp, #8
 800de3e:	4604      	mov	r4, r0
 800de40:	4608      	mov	r0, r1
 800de42:	4611      	mov	r1, r2
 800de44:	461a      	mov	r2, r3
 800de46:	4623      	mov	r3, r4
 800de48:	80fb      	strh	r3, [r7, #6]
 800de4a:	4603      	mov	r3, r0
 800de4c:	80bb      	strh	r3, [r7, #4]
 800de4e:	460b      	mov	r3, r1
 800de50:	807b      	strh	r3, [r7, #2]
 800de52:	4613      	mov	r3, r2
 800de54:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800de56:	4b1a      	ldr	r3, [pc, #104]	; (800dec0 <ILI9341_Draw_Horizontal_Line+0x88>)
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	88fa      	ldrh	r2, [r7, #6]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d229      	bcs.n	800deb6 <ILI9341_Draw_Horizontal_Line+0x7e>
 800de62:	4b18      	ldr	r3, [pc, #96]	; (800dec4 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	b29b      	uxth	r3, r3
 800de68:	88ba      	ldrh	r2, [r7, #4]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d223      	bcs.n	800deb6 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800de6e:	88fa      	ldrh	r2, [r7, #6]
 800de70:	887b      	ldrh	r3, [r7, #2]
 800de72:	4413      	add	r3, r2
 800de74:	3b01      	subs	r3, #1
 800de76:	4a12      	ldr	r2, [pc, #72]	; (800dec0 <ILI9341_Draw_Horizontal_Line+0x88>)
 800de78:	8812      	ldrh	r2, [r2, #0]
 800de7a:	b292      	uxth	r2, r2
 800de7c:	4293      	cmp	r3, r2
 800de7e:	db05      	blt.n	800de8c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800de80:	4b0f      	ldr	r3, [pc, #60]	; (800dec0 <ILI9341_Draw_Horizontal_Line+0x88>)
 800de82:	881b      	ldrh	r3, [r3, #0]
 800de84:	b29a      	uxth	r2, r3
 800de86:	88fb      	ldrh	r3, [r7, #6]
 800de88:	1ad3      	subs	r3, r2, r3
 800de8a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800de8c:	88fa      	ldrh	r2, [r7, #6]
 800de8e:	887b      	ldrh	r3, [r7, #2]
 800de90:	4413      	add	r3, r2
 800de92:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800de94:	3b01      	subs	r3, #1
 800de96:	b29a      	uxth	r2, r3
 800de98:	88bb      	ldrh	r3, [r7, #4]
 800de9a:	88b9      	ldrh	r1, [r7, #4]
 800de9c:	88f8      	ldrh	r0, [r7, #6]
 800de9e:	f000 f85b 	bl	800df58 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800dea2:	887c      	ldrh	r4, [r7, #2]
 800dea4:	883a      	ldrh	r2, [r7, #0]
 800dea6:	88b9      	ldrh	r1, [r7, #4]
 800dea8:	88f8      	ldrh	r0, [r7, #6]
 800deaa:	2303      	movs	r3, #3
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	4623      	mov	r3, r4
 800deb0:	f000 fb02 	bl	800e4b8 <_LCD_Write_Frame>
 800deb4:	e000      	b.n	800deb8 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800deb6:	bf00      	nop
}
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	bd90      	pop	{r4, r7, pc}
 800debe:	bf00      	nop
 800dec0:	20000cb6 	.word	0x20000cb6
 800dec4:	20000cb4 	.word	0x20000cb4

0800dec8 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800dec8:	b590      	push	{r4, r7, lr}
 800deca:	b085      	sub	sp, #20
 800decc:	af02      	add	r7, sp, #8
 800dece:	4604      	mov	r4, r0
 800ded0:	4608      	mov	r0, r1
 800ded2:	4611      	mov	r1, r2
 800ded4:	461a      	mov	r2, r3
 800ded6:	4623      	mov	r3, r4
 800ded8:	80fb      	strh	r3, [r7, #6]
 800deda:	4603      	mov	r3, r0
 800dedc:	80bb      	strh	r3, [r7, #4]
 800dede:	460b      	mov	r3, r1
 800dee0:	807b      	strh	r3, [r7, #2]
 800dee2:	4613      	mov	r3, r2
 800dee4:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800dee6:	4b1a      	ldr	r3, [pc, #104]	; (800df50 <ILI9341_Draw_Vertical_Line+0x88>)
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	b29b      	uxth	r3, r3
 800deec:	88fa      	ldrh	r2, [r7, #6]
 800deee:	429a      	cmp	r2, r3
 800def0:	d229      	bcs.n	800df46 <ILI9341_Draw_Vertical_Line+0x7e>
 800def2:	4b18      	ldr	r3, [pc, #96]	; (800df54 <ILI9341_Draw_Vertical_Line+0x8c>)
 800def4:	881b      	ldrh	r3, [r3, #0]
 800def6:	b29b      	uxth	r3, r3
 800def8:	88ba      	ldrh	r2, [r7, #4]
 800defa:	429a      	cmp	r2, r3
 800defc:	d223      	bcs.n	800df46 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800defe:	88ba      	ldrh	r2, [r7, #4]
 800df00:	887b      	ldrh	r3, [r7, #2]
 800df02:	4413      	add	r3, r2
 800df04:	3b01      	subs	r3, #1
 800df06:	4a13      	ldr	r2, [pc, #76]	; (800df54 <ILI9341_Draw_Vertical_Line+0x8c>)
 800df08:	8812      	ldrh	r2, [r2, #0]
 800df0a:	b292      	uxth	r2, r2
 800df0c:	4293      	cmp	r3, r2
 800df0e:	db05      	blt.n	800df1c <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800df10:	4b10      	ldr	r3, [pc, #64]	; (800df54 <ILI9341_Draw_Vertical_Line+0x8c>)
 800df12:	881b      	ldrh	r3, [r3, #0]
 800df14:	b29a      	uxth	r2, r3
 800df16:	88bb      	ldrh	r3, [r7, #4]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800df1c:	88ba      	ldrh	r2, [r7, #4]
 800df1e:	887b      	ldrh	r3, [r7, #2]
 800df20:	4413      	add	r3, r2
 800df22:	b29b      	uxth	r3, r3
 800df24:	3b01      	subs	r3, #1
 800df26:	b29b      	uxth	r3, r3
 800df28:	88fa      	ldrh	r2, [r7, #6]
 800df2a:	88b9      	ldrh	r1, [r7, #4]
 800df2c:	88f8      	ldrh	r0, [r7, #6]
 800df2e:	f000 f813 	bl	800df58 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800df32:	887c      	ldrh	r4, [r7, #2]
 800df34:	883a      	ldrh	r2, [r7, #0]
 800df36:	88b9      	ldrh	r1, [r7, #4]
 800df38:	88f8      	ldrh	r0, [r7, #6]
 800df3a:	2303      	movs	r3, #3
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	4623      	mov	r3, r4
 800df40:	f000 faba 	bl	800e4b8 <_LCD_Write_Frame>
 800df44:	e000      	b.n	800df48 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800df46:	bf00      	nop
}
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd90      	pop	{r4, r7, pc}
 800df4e:	bf00      	nop
 800df50:	20000cb6 	.word	0x20000cb6
 800df54:	20000cb4 	.word	0x20000cb4

0800df58 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800df58:	b590      	push	{r4, r7, lr}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	4611      	mov	r1, r2
 800df64:	461a      	mov	r2, r3
 800df66:	4623      	mov	r3, r4
 800df68:	80fb      	strh	r3, [r7, #6]
 800df6a:	4603      	mov	r3, r0
 800df6c:	80bb      	strh	r3, [r7, #4]
 800df6e:	460b      	mov	r3, r1
 800df70:	807b      	strh	r3, [r7, #2]
 800df72:	4613      	mov	r3, r2
 800df74:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800df76:	202a      	movs	r0, #42	; 0x2a
 800df78:	f000 fb4e 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800df7c:	88fb      	ldrh	r3, [r7, #6]
 800df7e:	0a1b      	lsrs	r3, r3, #8
 800df80:	b29b      	uxth	r3, r3
 800df82:	b2db      	uxtb	r3, r3
 800df84:	4618      	mov	r0, r3
 800df86:	f000 fb79 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(sc);
 800df8a:	88fb      	ldrh	r3, [r7, #6]
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 fb74 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800df94:	887b      	ldrh	r3, [r7, #2]
 800df96:	0a1b      	lsrs	r3, r3, #8
 800df98:	b29b      	uxth	r3, r3
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	4618      	mov	r0, r3
 800df9e:	f000 fb6d 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(ec);
 800dfa2:	887b      	ldrh	r3, [r7, #2]
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 fb68 	bl	800e67c <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800dfac:	202b      	movs	r0, #43	; 0x2b
 800dfae:	f000 fb33 	bl	800e618 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800dfb2:	88bb      	ldrh	r3, [r7, #4]
 800dfb4:	0a1b      	lsrs	r3, r3, #8
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 fb5e 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(sp);
 800dfc0:	88bb      	ldrh	r3, [r7, #4]
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 fb59 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800dfca:	883b      	ldrh	r3, [r7, #0]
 800dfcc:	0a1b      	lsrs	r3, r3, #8
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 fb52 	bl	800e67c <_LCD_SendData>
	_LCD_SendData(ep);
 800dfd8:	883b      	ldrh	r3, [r7, #0]
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 fb4d 	bl	800e67c <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800dfe2:	202c      	movs	r0, #44	; 0x2c
 800dfe4:	f000 fb18 	bl	800e618 <_LCD_SendCommand>
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd90      	pop	{r4, r7, pc}

0800dff0 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af02      	add	r7, sp, #8
 800dff6:	4603      	mov	r3, r0
 800dff8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800dffa:	4b10      	ldr	r3, [pc, #64]	; (800e03c <ILI9341_Fill_Screen+0x4c>)
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	b29a      	uxth	r2, r3
 800e000:	4b0f      	ldr	r3, [pc, #60]	; (800e040 <ILI9341_Fill_Screen+0x50>)
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	b29b      	uxth	r3, r3
 800e006:	2100      	movs	r1, #0
 800e008:	2000      	movs	r0, #0
 800e00a:	f7ff ffa5 	bl	800df58 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800e00e:	4b0b      	ldr	r3, [pc, #44]	; (800e03c <ILI9341_Fill_Screen+0x4c>)
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	b29b      	uxth	r3, r3
 800e014:	461a      	mov	r2, r3
 800e016:	4b0a      	ldr	r3, [pc, #40]	; (800e040 <ILI9341_Fill_Screen+0x50>)
 800e018:	881b      	ldrh	r3, [r3, #0]
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	fb03 f302 	mul.w	r3, r3, r2
 800e020:	4619      	mov	r1, r3
 800e022:	88fa      	ldrh	r2, [r7, #6]
 800e024:	2304      	movs	r3, #4
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	460b      	mov	r3, r1
 800e02a:	2100      	movs	r1, #0
 800e02c:	2000      	movs	r0, #0
 800e02e:	f000 fa43 	bl	800e4b8 <_LCD_Write_Frame>
}
 800e032:	bf00      	nop
 800e034:	3708      	adds	r7, #8
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	20000cb6 	.word	0x20000cb6
 800e040:	20000cb4 	.word	0x20000cb4

0800e044 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08c      	sub	sp, #48	; 0x30
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	80fb      	strh	r3, [r7, #6]
 800e04e:	460b      	mov	r3, r1
 800e050:	80bb      	strh	r3, [r7, #4]
 800e052:	4613      	mov	r3, r2
 800e054:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e056:	4b94      	ldr	r3, [pc, #592]	; (800e2a8 <ILI9341_Draw_Pixel+0x264>)
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	88fa      	ldrh	r2, [r7, #6]
 800e05e:	429a      	cmp	r2, r3
 800e060:	f080 811e 	bcs.w	800e2a0 <ILI9341_Draw_Pixel+0x25c>
 800e064:	4b91      	ldr	r3, [pc, #580]	; (800e2ac <ILI9341_Draw_Pixel+0x268>)
 800e066:	881b      	ldrh	r3, [r3, #0]
 800e068:	b29b      	uxth	r3, r3
 800e06a:	88ba      	ldrh	r2, [r7, #4]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	f080 8117 	bcs.w	800e2a0 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e072:	4b8f      	ldr	r3, [pc, #572]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e074:	695b      	ldr	r3, [r3, #20]
 800e076:	4a8e      	ldr	r2, [pc, #568]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e07c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e07e:	4b8c      	ldr	r3, [pc, #560]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e080:	695b      	ldr	r3, [r3, #20]
 800e082:	4a8b      	ldr	r2, [pc, #556]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e088:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800e08a:	2200      	movs	r2, #0
 800e08c:	2100      	movs	r1, #0
 800e08e:	202a      	movs	r0, #42	; 0x2a
 800e090:	f000 fb26 	bl	800e6e0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e094:	2300      	movs	r3, #0
 800e096:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e098:	e008      	b.n	800e0ac <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e09a:	4b85      	ldr	r3, [pc, #532]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e09c:	695b      	ldr	r3, [r3, #20]
 800e09e:	4a84      	ldr	r2, [pc, #528]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e0a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0a4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	ddf3      	ble.n	800e09a <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e0b2:	4b7f      	ldr	r3, [pc, #508]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e0b4:	695b      	ldr	r3, [r3, #20]
 800e0b6:	4a7e      	ldr	r2, [pc, #504]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0bc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e0be:	4b7c      	ldr	r3, [pc, #496]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e0c0:	695b      	ldr	r3, [r3, #20]
 800e0c2:	4a7b      	ldr	r2, [pc, #492]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0c8:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e0ca:	4b79      	ldr	r3, [pc, #484]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e0cc:	695b      	ldr	r3, [r3, #20]
 800e0ce:	4a78      	ldr	r2, [pc, #480]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e0d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0d4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800e0d6:	88fb      	ldrh	r3, [r7, #6]
 800e0d8:	0a1b      	lsrs	r3, r3, #8
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	753b      	strb	r3, [r7, #20]
 800e0e0:	88fb      	ldrh	r3, [r7, #6]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800e0e6:	88fb      	ldrh	r3, [r7, #6]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800e0f0:	88fb      	ldrh	r3, [r7, #6]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800e0f8:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800e0fa:	f107 0014 	add.w	r0, r7, #20
 800e0fe:	230a      	movs	r3, #10
 800e100:	2200      	movs	r2, #0
 800e102:	2104      	movs	r1, #4
 800e104:	f000 fb1e 	bl	800e744 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e108:	2300      	movs	r3, #0
 800e10a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e10c:	e008      	b.n	800e120 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e10e:	4b68      	ldr	r3, [pc, #416]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e110:	695b      	ldr	r3, [r3, #20]
 800e112:	4a67      	ldr	r2, [pc, #412]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e118:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11c:	3301      	adds	r3, #1
 800e11e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e122:	2b02      	cmp	r3, #2
 800e124:	ddf3      	ble.n	800e10e <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e126:	4b62      	ldr	r3, [pc, #392]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e128:	695b      	ldr	r3, [r3, #20]
 800e12a:	4a61      	ldr	r2, [pc, #388]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e130:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e132:	4b5f      	ldr	r3, [pc, #380]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e134:	695b      	ldr	r3, [r3, #20]
 800e136:	4a5e      	ldr	r2, [pc, #376]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e13c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e13e:	4b5c      	ldr	r3, [pc, #368]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e140:	695b      	ldr	r3, [r3, #20]
 800e142:	4a5b      	ldr	r2, [pc, #364]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e148:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800e14a:	2200      	movs	r2, #0
 800e14c:	2100      	movs	r1, #0
 800e14e:	202b      	movs	r0, #43	; 0x2b
 800e150:	f000 fac6 	bl	800e6e0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e154:	2300      	movs	r3, #0
 800e156:	627b      	str	r3, [r7, #36]	; 0x24
 800e158:	e008      	b.n	800e16c <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e15a:	4b55      	ldr	r3, [pc, #340]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e15c:	695b      	ldr	r3, [r3, #20]
 800e15e:	4a54      	ldr	r2, [pc, #336]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e164:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e168:	3301      	adds	r3, #1
 800e16a:	627b      	str	r3, [r7, #36]	; 0x24
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	2b02      	cmp	r3, #2
 800e170:	ddf3      	ble.n	800e15a <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e172:	4b4f      	ldr	r3, [pc, #316]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e174:	695b      	ldr	r3, [r3, #20]
 800e176:	4a4e      	ldr	r2, [pc, #312]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e17c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e17e:	4b4c      	ldr	r3, [pc, #304]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e180:	695b      	ldr	r3, [r3, #20]
 800e182:	4a4b      	ldr	r2, [pc, #300]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e188:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e18a:	4b49      	ldr	r3, [pc, #292]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e18c:	695b      	ldr	r3, [r3, #20]
 800e18e:	4a48      	ldr	r2, [pc, #288]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e194:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800e196:	88bb      	ldrh	r3, [r7, #4]
 800e198:	0a1b      	lsrs	r3, r3, #8
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	743b      	strb	r3, [r7, #16]
 800e1a0:	88bb      	ldrh	r3, [r7, #4]
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800e1a6:	88bb      	ldrh	r3, [r7, #4]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800e1b0:	88bb      	ldrh	r3, [r7, #4]
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800e1b8:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e1ba:	f107 0010 	add.w	r0, r7, #16
 800e1be:	230a      	movs	r3, #10
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	2104      	movs	r1, #4
 800e1c4:	f000 fabe 	bl	800e744 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	623b      	str	r3, [r7, #32]
 800e1cc:	e008      	b.n	800e1e0 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1ce:	4b38      	ldr	r3, [pc, #224]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	4a37      	ldr	r2, [pc, #220]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e1d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1d8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e1da:	6a3b      	ldr	r3, [r7, #32]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	623b      	str	r3, [r7, #32]
 800e1e0:	6a3b      	ldr	r3, [r7, #32]
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	ddf3      	ble.n	800e1ce <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e1e6:	4b32      	ldr	r3, [pc, #200]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e1e8:	695b      	ldr	r3, [r3, #20]
 800e1ea:	4a31      	ldr	r2, [pc, #196]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e1f2:	4b2f      	ldr	r3, [pc, #188]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e1f4:	695b      	ldr	r3, [r3, #20]
 800e1f6:	4a2e      	ldr	r2, [pc, #184]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e1f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1fc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1fe:	4b2c      	ldr	r3, [pc, #176]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e200:	695b      	ldr	r3, [r3, #20]
 800e202:	4a2b      	ldr	r2, [pc, #172]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e208:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800e20a:	2200      	movs	r2, #0
 800e20c:	2100      	movs	r1, #0
 800e20e:	202c      	movs	r0, #44	; 0x2c
 800e210:	f000 fa66 	bl	800e6e0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e214:	2300      	movs	r3, #0
 800e216:	61fb      	str	r3, [r7, #28]
 800e218:	e008      	b.n	800e22c <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e21a:	4b25      	ldr	r3, [pc, #148]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e21c:	695b      	ldr	r3, [r3, #20]
 800e21e:	4a24      	ldr	r2, [pc, #144]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e224:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	3301      	adds	r3, #1
 800e22a:	61fb      	str	r3, [r7, #28]
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	2b02      	cmp	r3, #2
 800e230:	ddf3      	ble.n	800e21a <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e232:	4b1f      	ldr	r3, [pc, #124]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e234:	695b      	ldr	r3, [r3, #20]
 800e236:	4a1e      	ldr	r2, [pc, #120]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e23c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e23e:	4b1c      	ldr	r3, [pc, #112]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e240:	695b      	ldr	r3, [r3, #20]
 800e242:	4a1b      	ldr	r2, [pc, #108]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e248:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e24a:	4b19      	ldr	r3, [pc, #100]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	4a18      	ldr	r2, [pc, #96]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e254:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e256:	887b      	ldrh	r3, [r7, #2]
 800e258:	0a1b      	lsrs	r3, r3, #8
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	733b      	strb	r3, [r7, #12]
 800e260:	887b      	ldrh	r3, [r7, #2]
 800e262:	b2db      	uxtb	r3, r3
 800e264:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800e266:	f107 000c 	add.w	r0, r7, #12
 800e26a:	230a      	movs	r3, #10
 800e26c:	2200      	movs	r2, #0
 800e26e:	2104      	movs	r1, #4
 800e270:	f000 fa68 	bl	800e744 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e274:	2300      	movs	r3, #0
 800e276:	61bb      	str	r3, [r7, #24]
 800e278:	e008      	b.n	800e28c <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e27a:	4b0d      	ldr	r3, [pc, #52]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e27c:	695b      	ldr	r3, [r3, #20]
 800e27e:	4a0c      	ldr	r2, [pc, #48]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e284:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	3301      	adds	r3, #1
 800e28a:	61bb      	str	r3, [r7, #24]
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	2b02      	cmp	r3, #2
 800e290:	ddf3      	ble.n	800e27a <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e292:	4b07      	ldr	r3, [pc, #28]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e294:	695b      	ldr	r3, [r3, #20]
 800e296:	4a06      	ldr	r2, [pc, #24]	; (800e2b0 <ILI9341_Draw_Pixel+0x26c>)
 800e298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e29c:	6153      	str	r3, [r2, #20]
 800e29e:	e000      	b.n	800e2a2 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e2a0:	bf00      	nop


}
 800e2a2:	3730      	adds	r7, #48	; 0x30
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	20000cb6 	.word	0x20000cb6
 800e2ac:	20000cb4 	.word	0x20000cb4
 800e2b0:	48000400 	.word	0x48000400

0800e2b4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800e2b4:	b590      	push	{r4, r7, lr}
 800e2b6:	b087      	sub	sp, #28
 800e2b8:	af02      	add	r7, sp, #8
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	4608      	mov	r0, r1
 800e2be:	4611      	mov	r1, r2
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	4623      	mov	r3, r4
 800e2c4:	80fb      	strh	r3, [r7, #6]
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	80bb      	strh	r3, [r7, #4]
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	807b      	strh	r3, [r7, #2]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e2d2:	4b39      	ldr	r3, [pc, #228]	; (800e3b8 <ILI9341_Draw_Rectangle+0x104>)
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	88fa      	ldrh	r2, [r7, #6]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d268      	bcs.n	800e3b0 <ILI9341_Draw_Rectangle+0xfc>
 800e2de:	4b37      	ldr	r3, [pc, #220]	; (800e3bc <ILI9341_Draw_Rectangle+0x108>)
 800e2e0:	881b      	ldrh	r3, [r3, #0]
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	88ba      	ldrh	r2, [r7, #4]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d262      	bcs.n	800e3b0 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800e2ea:	88fa      	ldrh	r2, [r7, #6]
 800e2ec:	887b      	ldrh	r3, [r7, #2]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	4a31      	ldr	r2, [pc, #196]	; (800e3b8 <ILI9341_Draw_Rectangle+0x104>)
 800e2f4:	8812      	ldrh	r2, [r2, #0]
 800e2f6:	b292      	uxth	r2, r2
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	db05      	blt.n	800e308 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e2fc:	4b2e      	ldr	r3, [pc, #184]	; (800e3b8 <ILI9341_Draw_Rectangle+0x104>)
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	b29a      	uxth	r2, r3
 800e302:	88fb      	ldrh	r3, [r7, #6]
 800e304:	1ad3      	subs	r3, r2, r3
 800e306:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e308:	88ba      	ldrh	r2, [r7, #4]
 800e30a:	883b      	ldrh	r3, [r7, #0]
 800e30c:	4413      	add	r3, r2
 800e30e:	3b01      	subs	r3, #1
 800e310:	4a2a      	ldr	r2, [pc, #168]	; (800e3bc <ILI9341_Draw_Rectangle+0x108>)
 800e312:	8812      	ldrh	r2, [r2, #0]
 800e314:	b292      	uxth	r2, r2
 800e316:	4293      	cmp	r3, r2
 800e318:	db05      	blt.n	800e326 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e31a:	4b28      	ldr	r3, [pc, #160]	; (800e3bc <ILI9341_Draw_Rectangle+0x108>)
 800e31c:	881b      	ldrh	r3, [r3, #0]
 800e31e:	b29a      	uxth	r2, r3
 800e320:	88bb      	ldrh	r3, [r7, #4]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e326:	88fa      	ldrh	r2, [r7, #6]
 800e328:	887b      	ldrh	r3, [r7, #2]
 800e32a:	4413      	add	r3, r2
 800e32c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e32e:	3b01      	subs	r3, #1
 800e330:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e332:	88ba      	ldrh	r2, [r7, #4]
 800e334:	883b      	ldrh	r3, [r7, #0]
 800e336:	4413      	add	r3, r2
 800e338:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e33a:	3b01      	subs	r3, #1
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	88b9      	ldrh	r1, [r7, #4]
 800e340:	88f8      	ldrh	r0, [r7, #6]
 800e342:	4622      	mov	r2, r4
 800e344:	f7ff fe08 	bl	800df58 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e348:	883a      	ldrh	r2, [r7, #0]
 800e34a:	887b      	ldrh	r3, [r7, #2]
 800e34c:	fb12 f303 	smulbb	r3, r2, r3
 800e350:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e352:	2300      	movs	r3, #0
 800e354:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e356:	89fb      	ldrh	r3, [r7, #14]
 800e358:	f003 0301 	and.w	r3, r3, #1
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d009      	beq.n	800e374 <ILI9341_Draw_Rectangle+0xc0>
 800e360:	89fb      	ldrh	r3, [r7, #14]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d906      	bls.n	800e374 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e366:	2301      	movs	r3, #1
 800e368:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e36a:	89fb      	ldrh	r3, [r7, #14]
 800e36c:	085b      	lsrs	r3, r3, #1
 800e36e:	b29b      	uxth	r3, r3
 800e370:	005b      	lsls	r3, r3, #1
 800e372:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800e374:	89fc      	ldrh	r4, [r7, #14]
 800e376:	8c3a      	ldrh	r2, [r7, #32]
 800e378:	88b9      	ldrh	r1, [r7, #4]
 800e37a:	88f8      	ldrh	r0, [r7, #6]
 800e37c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	4623      	mov	r3, r4
 800e384:	f000 f898 	bl	800e4b8 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800e388:	7b7b      	ldrb	r3, [r7, #13]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d011      	beq.n	800e3b2 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e38e:	88fa      	ldrh	r2, [r7, #6]
 800e390:	887b      	ldrh	r3, [r7, #2]
 800e392:	4413      	add	r3, r2
 800e394:	b29b      	uxth	r3, r3
 800e396:	3b01      	subs	r3, #1
 800e398:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e39a:	88ba      	ldrh	r2, [r7, #4]
 800e39c:	883b      	ldrh	r3, [r7, #0]
 800e39e:	4413      	add	r3, r2
 800e3a0:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	8c3a      	ldrh	r2, [r7, #32]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	f7ff fe4b 	bl	800e044 <ILI9341_Draw_Pixel>
 800e3ae:	e000      	b.n	800e3b2 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e3b0:	bf00      	nop
							colour);
	}
}
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd90      	pop	{r4, r7, pc}
 800e3b8:	20000cb6 	.word	0x20000cb6
 800e3bc:	20000cb4 	.word	0x20000cb4

0800e3c0 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800e3ca:	79fb      	ldrb	r3, [r7, #7]
 800e3cc:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800e3ce:	2036      	movs	r0, #54	; 0x36
 800e3d0:	f000 f922 	bl	800e618 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800e3d4:	7bfb      	ldrb	r3, [r7, #15]
 800e3d6:	2b03      	cmp	r3, #3
 800e3d8:	d836      	bhi.n	800e448 <ILI9341_Set_Rotation+0x88>
 800e3da:	a201      	add	r2, pc, #4	; (adr r2, 800e3e0 <ILI9341_Set_Rotation+0x20>)
 800e3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e0:	0800e3f1 	.word	0x0800e3f1
 800e3e4:	0800e407 	.word	0x0800e407
 800e3e8:	0800e41d 	.word	0x0800e41d
 800e3ec:	0800e433 	.word	0x0800e433
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800e3f0:	2048      	movs	r0, #72	; 0x48
 800e3f2:	f000 f943 	bl	800e67c <_LCD_SendData>
			LCD_WIDTH = 240;
 800e3f6:	4b17      	ldr	r3, [pc, #92]	; (800e454 <ILI9341_Set_Rotation+0x94>)
 800e3f8:	22f0      	movs	r2, #240	; 0xf0
 800e3fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e3fc:	4b16      	ldr	r3, [pc, #88]	; (800e458 <ILI9341_Set_Rotation+0x98>)
 800e3fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e402:	801a      	strh	r2, [r3, #0]
			break;
 800e404:	e021      	b.n	800e44a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800e406:	2028      	movs	r0, #40	; 0x28
 800e408:	f000 f938 	bl	800e67c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e40c:	4b11      	ldr	r3, [pc, #68]	; (800e454 <ILI9341_Set_Rotation+0x94>)
 800e40e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e412:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e414:	4b10      	ldr	r3, [pc, #64]	; (800e458 <ILI9341_Set_Rotation+0x98>)
 800e416:	22f0      	movs	r2, #240	; 0xf0
 800e418:	801a      	strh	r2, [r3, #0]
			break;
 800e41a:	e016      	b.n	800e44a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800e41c:	2088      	movs	r0, #136	; 0x88
 800e41e:	f000 f92d 	bl	800e67c <_LCD_SendData>
			LCD_WIDTH  = 240;
 800e422:	4b0c      	ldr	r3, [pc, #48]	; (800e454 <ILI9341_Set_Rotation+0x94>)
 800e424:	22f0      	movs	r2, #240	; 0xf0
 800e426:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e428:	4b0b      	ldr	r3, [pc, #44]	; (800e458 <ILI9341_Set_Rotation+0x98>)
 800e42a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e42e:	801a      	strh	r2, [r3, #0]
			break;
 800e430:	e00b      	b.n	800e44a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800e432:	20e8      	movs	r0, #232	; 0xe8
 800e434:	f000 f922 	bl	800e67c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e438:	4b06      	ldr	r3, [pc, #24]	; (800e454 <ILI9341_Set_Rotation+0x94>)
 800e43a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e43e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e440:	4b05      	ldr	r3, [pc, #20]	; (800e458 <ILI9341_Set_Rotation+0x98>)
 800e442:	22f0      	movs	r2, #240	; 0xf0
 800e444:	801a      	strh	r2, [r3, #0]
			break;
 800e446:	e000      	b.n	800e44a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800e448:	bf00      	nop
	}
}
 800e44a:	bf00      	nop
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	20000cb6 	.word	0x20000cb6
 800e458:	20000cb4 	.word	0x20000cb4

0800e45c <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800e45c:	b480      	push	{r7}
 800e45e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e460:	4b05      	ldr	r3, [pc, #20]	; (800e478 <_LCD_Enable+0x1c>)
 800e462:	695b      	ldr	r3, [r3, #20]
 800e464:	4a04      	ldr	r2, [pc, #16]	; (800e478 <_LCD_Enable+0x1c>)
 800e466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e46a:	6153      	str	r3, [r2, #20]
}
 800e46c:	bf00      	nop
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	48000400 	.word	0x48000400

0800e47c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800e480:	4b0c      	ldr	r3, [pc, #48]	; (800e4b4 <_LCD_Reset+0x38>)
 800e482:	695b      	ldr	r3, [r3, #20]
 800e484:	4a0b      	ldr	r2, [pc, #44]	; (800e4b4 <_LCD_Reset+0x38>)
 800e486:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e48a:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e48c:	20c8      	movs	r0, #200	; 0xc8
 800e48e:	f7fa f9ad 	bl	80087ec <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e492:	4b08      	ldr	r3, [pc, #32]	; (800e4b4 <_LCD_Reset+0x38>)
 800e494:	695b      	ldr	r3, [r3, #20]
 800e496:	4a07      	ldr	r2, [pc, #28]	; (800e4b4 <_LCD_Reset+0x38>)
 800e498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e49c:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e49e:	20c8      	movs	r0, #200	; 0xc8
 800e4a0:	f7fa f9a4 	bl	80087ec <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e4a4:	4b03      	ldr	r3, [pc, #12]	; (800e4b4 <_LCD_Reset+0x38>)
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	4a02      	ldr	r2, [pc, #8]	; (800e4b4 <_LCD_Reset+0x38>)
 800e4aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e4ae:	6153      	str	r3, [r2, #20]
}
 800e4b0:	bf00      	nop
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	48000400 	.word	0x48000400

0800e4b8 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800e4b8:	b5b0      	push	{r4, r5, r7, lr}
 800e4ba:	b08e      	sub	sp, #56	; 0x38
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	607b      	str	r3, [r7, #4]
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	81fb      	strh	r3, [r7, #14]
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	81bb      	strh	r3, [r7, #12]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	817b      	strh	r3, [r7, #10]
 800e4cc:	466b      	mov	r3, sp
 800e4ce:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	4a4d      	ldr	r2, [pc, #308]	; (800e610 <_LCD_Write_Frame+0x158>)
 800e4da:	8812      	ldrh	r2, [r2, #0]
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d202      	bcs.n	800e4e6 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4e4:	e002      	b.n	800e4ec <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800e4e6:	4b4a      	ldr	r3, [pc, #296]	; (800e610 <_LCD_Write_Frame+0x158>)
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800e4ec:	897b      	ldrh	r3, [r7, #10]
 800e4ee:	0a1b      	lsrs	r3, r3, #8
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800e4f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	61bb      	str	r3, [r7, #24]
 800e4fc:	4601      	mov	r1, r0
 800e4fe:	f04f 0200 	mov.w	r2, #0
 800e502:	f04f 0300 	mov.w	r3, #0
 800e506:	f04f 0400 	mov.w	r4, #0
 800e50a:	00d4      	lsls	r4, r2, #3
 800e50c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e510:	00cb      	lsls	r3, r1, #3
 800e512:	4601      	mov	r1, r0
 800e514:	f04f 0200 	mov.w	r2, #0
 800e518:	f04f 0300 	mov.w	r3, #0
 800e51c:	f04f 0400 	mov.w	r4, #0
 800e520:	00d4      	lsls	r4, r2, #3
 800e522:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e526:	00cb      	lsls	r3, r1, #3
 800e528:	1dc3      	adds	r3, r0, #7
 800e52a:	08db      	lsrs	r3, r3, #3
 800e52c:	00db      	lsls	r3, r3, #3
 800e52e:	ebad 0d03 	sub.w	sp, sp, r3
 800e532:	466b      	mov	r3, sp
 800e534:	3300      	adds	r3, #0
 800e536:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e538:	2300      	movs	r3, #0
 800e53a:	633b      	str	r3, [r7, #48]	; 0x30
 800e53c:	e00d      	b.n	800e55a <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800e53e:	697a      	ldr	r2, [r7, #20]
 800e540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e542:	4413      	add	r3, r2
 800e544:	7ffa      	ldrb	r2, [r7, #31]
 800e546:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800e548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54a:	3301      	adds	r3, #1
 800e54c:	897a      	ldrh	r2, [r7, #10]
 800e54e:	b2d1      	uxtb	r1, r2
 800e550:	697a      	ldr	r2, [r7, #20]
 800e552:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e556:	3302      	adds	r3, #2
 800e558:	633b      	str	r3, [r7, #48]	; 0x30
 800e55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	429a      	cmp	r2, r3
 800e560:	d3ed      	bcc.n	800e53e <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800e568:	2301      	movs	r3, #1
 800e56a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800e56c:	2300      	movs	r3, #0
 800e56e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00d      	beq.n	800e592 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800e576:	693a      	ldr	r2, [r7, #16]
 800e578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e57e:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e584:	fbb3 f2f2 	udiv	r2, r3, r2
 800e588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e58a:	fb01 f202 	mul.w	r2, r1, r2
 800e58e:	1a9b      	subs	r3, r3, r2
 800e590:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e592:	4b20      	ldr	r3, [pc, #128]	; (800e614 <_LCD_Write_Frame+0x15c>)
 800e594:	695b      	ldr	r3, [r3, #20]
 800e596:	4a1f      	ldr	r2, [pc, #124]	; (800e614 <_LCD_Write_Frame+0x15c>)
 800e598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e59c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e59e:	4b1d      	ldr	r3, [pc, #116]	; (800e614 <_LCD_Write_Frame+0x15c>)
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	4a1c      	ldr	r2, [pc, #112]	; (800e614 <_LCD_Write_Frame+0x15c>)
 800e5a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5a8:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800e5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00f      	beq.n	800e5d0 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e5b4:	e008      	b.n	800e5c8 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800e5b6:	6978      	ldr	r0, [r7, #20]
 800e5b8:	230a      	movs	r3, #10
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5be:	f000 f8c1 	bl	800e744 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d3f2      	bcc.n	800e5b6 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800e5d0:	6978      	ldr	r0, [r7, #20]
 800e5d2:	230a      	movs	r3, #10
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5d8:	f000 f8b4 	bl	800e744 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e5dc:	2300      	movs	r3, #0
 800e5de:	623b      	str	r3, [r7, #32]
 800e5e0:	e008      	b.n	800e5f4 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e5e2:	4b0c      	ldr	r3, [pc, #48]	; (800e614 <_LCD_Write_Frame+0x15c>)
 800e5e4:	695b      	ldr	r3, [r3, #20]
 800e5e6:	4a0b      	ldr	r2, [pc, #44]	; (800e614 <_LCD_Write_Frame+0x15c>)
 800e5e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5ec:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e5ee:	6a3b      	ldr	r3, [r7, #32]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	623b      	str	r3, [r7, #32]
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	ddf3      	ble.n	800e5e2 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e5fa:	4b06      	ldr	r3, [pc, #24]	; (800e614 <_LCD_Write_Frame+0x15c>)
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	4a05      	ldr	r2, [pc, #20]	; (800e614 <_LCD_Write_Frame+0x15c>)
 800e600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e604:	6153      	str	r3, [r2, #20]
 800e606:	46ad      	mov	sp, r5

}
 800e608:	bf00      	nop
 800e60a:	3738      	adds	r7, #56	; 0x38
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bdb0      	pop	{r4, r5, r7, pc}
 800e610:	20000cb8 	.word	0x20000cb8
 800e614:	48000400 	.word	0x48000400

0800e618 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	4603      	mov	r3, r0
 800e620:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e622:	4b15      	ldr	r3, [pc, #84]	; (800e678 <_LCD_SendCommand+0x60>)
 800e624:	695b      	ldr	r3, [r3, #20]
 800e626:	4a14      	ldr	r2, [pc, #80]	; (800e678 <_LCD_SendCommand+0x60>)
 800e628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e62c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e62e:	4b12      	ldr	r3, [pc, #72]	; (800e678 <_LCD_SendCommand+0x60>)
 800e630:	695b      	ldr	r3, [r3, #20]
 800e632:	4a11      	ldr	r2, [pc, #68]	; (800e678 <_LCD_SendCommand+0x60>)
 800e634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e638:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	2200      	movs	r2, #0
 800e63e:	2100      	movs	r1, #0
 800e640:	4618      	mov	r0, r3
 800e642:	f000 f84d 	bl	800e6e0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e646:	2300      	movs	r3, #0
 800e648:	60fb      	str	r3, [r7, #12]
 800e64a:	e008      	b.n	800e65e <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e64c:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <_LCD_SendCommand+0x60>)
 800e64e:	695b      	ldr	r3, [r3, #20]
 800e650:	4a09      	ldr	r2, [pc, #36]	; (800e678 <_LCD_SendCommand+0x60>)
 800e652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e656:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	3301      	adds	r3, #1
 800e65c:	60fb      	str	r3, [r7, #12]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b02      	cmp	r3, #2
 800e662:	ddf3      	ble.n	800e64c <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e664:	4b04      	ldr	r3, [pc, #16]	; (800e678 <_LCD_SendCommand+0x60>)
 800e666:	695b      	ldr	r3, [r3, #20]
 800e668:	4a03      	ldr	r2, [pc, #12]	; (800e678 <_LCD_SendCommand+0x60>)
 800e66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e66e:	6153      	str	r3, [r2, #20]
}
 800e670:	bf00      	nop
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	48000400 	.word	0x48000400

0800e67c <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	4603      	mov	r3, r0
 800e684:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e686:	4b15      	ldr	r3, [pc, #84]	; (800e6dc <_LCD_SendData+0x60>)
 800e688:	695b      	ldr	r3, [r3, #20]
 800e68a:	4a14      	ldr	r2, [pc, #80]	; (800e6dc <_LCD_SendData+0x60>)
 800e68c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e690:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e692:	4b12      	ldr	r3, [pc, #72]	; (800e6dc <_LCD_SendData+0x60>)
 800e694:	695b      	ldr	r3, [r3, #20]
 800e696:	4a11      	ldr	r2, [pc, #68]	; (800e6dc <_LCD_SendData+0x60>)
 800e698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e69c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800e69e:	79fb      	ldrb	r3, [r7, #7]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f000 f81b 	bl	800e6e0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	60fb      	str	r3, [r7, #12]
 800e6ae:	e008      	b.n	800e6c2 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	; (800e6dc <_LCD_SendData+0x60>)
 800e6b2:	695b      	ldr	r3, [r3, #20]
 800e6b4:	4a09      	ldr	r2, [pc, #36]	; (800e6dc <_LCD_SendData+0x60>)
 800e6b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6ba:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	60fb      	str	r3, [r7, #12]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	ddf3      	ble.n	800e6b0 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e6c8:	4b04      	ldr	r3, [pc, #16]	; (800e6dc <_LCD_SendData+0x60>)
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	4a03      	ldr	r2, [pc, #12]	; (800e6dc <_LCD_SendData+0x60>)
 800e6ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6d2:	6153      	str	r3, [r2, #20]
}
 800e6d4:	bf00      	nop
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	48000400 	.word	0x48000400

0800e6e0 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	71fb      	strb	r3, [r7, #7]
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	71bb      	strb	r3, [r7, #6]
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	60fb      	str	r3, [r7, #12]
 800e6f6:	e003      	b.n	800e700 <_SPI_SendByte+0x20>
   		asm("nop");
 800e6f8:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	60fb      	str	r3, [r7, #12]
 800e700:	79bb      	ldrb	r3, [r7, #6]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	429a      	cmp	r2, r3
 800e706:	dbf7      	blt.n	800e6f8 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e708:	4b0c      	ldr	r3, [pc, #48]	; (800e73c <_SPI_SendByte+0x5c>)
 800e70a:	689b      	ldr	r3, [r3, #8]
 800e70c:	f003 0302 	and.w	r3, r3, #2
 800e710:	2b02      	cmp	r3, #2
 800e712:	d102      	bne.n	800e71a <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800e714:	4a0a      	ldr	r2, [pc, #40]	; (800e740 <_SPI_SendByte+0x60>)
 800e716:	79fb      	ldrb	r3, [r7, #7]
 800e718:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e71a:	2300      	movs	r3, #0
 800e71c:	60bb      	str	r3, [r7, #8]
 800e71e:	e003      	b.n	800e728 <_SPI_SendByte+0x48>
   		asm("nop");
 800e720:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	3301      	adds	r3, #1
 800e726:	60bb      	str	r3, [r7, #8]
 800e728:	797b      	ldrb	r3, [r7, #5]
 800e72a:	68ba      	ldr	r2, [r7, #8]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	dbf7      	blt.n	800e720 <_SPI_SendByte+0x40>

#endif

}
 800e730:	bf00      	nop
 800e732:	3714      	adds	r7, #20
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr
 800e73c:	40003c00 	.word	0x40003c00
 800e740:	40003c0c 	.word	0x40003c0c

0800e744 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e744:	b480      	push	{r7}
 800e746:	b089      	sub	sp, #36	; 0x24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	4611      	mov	r1, r2
 800e750:	461a      	mov	r2, r3
 800e752:	460b      	mov	r3, r1
 800e754:	71fb      	strb	r3, [r7, #7]
 800e756:	4613      	mov	r3, r2
 800e758:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e75a:	2300      	movs	r3, #0
 800e75c:	61fb      	str	r3, [r7, #28]
 800e75e:	e003      	b.n	800e768 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800e760:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	3301      	adds	r3, #1
 800e766:	61fb      	str	r3, [r7, #28]
 800e768:	79fb      	ldrb	r3, [r7, #7]
 800e76a:	69fa      	ldr	r2, [r7, #28]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	dbf7      	blt.n	800e760 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800e774:	e01d      	b.n	800e7b2 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e776:	4b1c      	ldr	r3, [pc, #112]	; (800e7e8 <_SPI_SendByteMultiByte+0xa4>)
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	f003 0302 	and.w	r3, r3, #2
 800e77e:	2b02      	cmp	r3, #2
 800e780:	d117      	bne.n	800e7b2 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	2b01      	cmp	r3, #1
 800e786:	d90a      	bls.n	800e79e <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	881a      	ldrh	r2, [r3, #0]
 800e78c:	4b16      	ldr	r3, [pc, #88]	; (800e7e8 <_SPI_SendByteMultiByte+0xa4>)
 800e78e:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	3302      	adds	r3, #2
 800e794:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	3b02      	subs	r3, #2
 800e79a:	60bb      	str	r3, [r7, #8]
 800e79c:	e009      	b.n	800e7b2 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800e79e:	4a13      	ldr	r2, [pc, #76]	; (800e7ec <_SPI_SendByteMultiByte+0xa8>)
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1de      	bne.n	800e776 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800e7b8:	4b0b      	ldr	r3, [pc, #44]	; (800e7e8 <_SPI_SendByteMultiByte+0xa4>)
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	4a0a      	ldr	r2, [pc, #40]	; (800e7e8 <_SPI_SendByteMultiByte+0xa4>)
 800e7be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7c2:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	617b      	str	r3, [r7, #20]
 800e7c8:	e003      	b.n	800e7d2 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800e7ca:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	617b      	str	r3, [r7, #20]
 800e7d2:	79bb      	ldrb	r3, [r7, #6]
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	dbf7      	blt.n	800e7ca <_SPI_SendByteMultiByte+0x86>

#endif

}
 800e7da:	bf00      	nop
 800e7dc:	3724      	adds	r7, #36	; 0x24
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop
 800e7e8:	40003c00 	.word	0x40003c00
 800e7ec:	40003c0c 	.word	0x40003c0c

0800e7f0 <__errno>:
 800e7f0:	4b01      	ldr	r3, [pc, #4]	; (800e7f8 <__errno+0x8>)
 800e7f2:	6818      	ldr	r0, [r3, #0]
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	20001cfc 	.word	0x20001cfc

0800e7fc <__libc_init_array>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	4e0d      	ldr	r6, [pc, #52]	; (800e834 <__libc_init_array+0x38>)
 800e800:	4c0d      	ldr	r4, [pc, #52]	; (800e838 <__libc_init_array+0x3c>)
 800e802:	1ba4      	subs	r4, r4, r6
 800e804:	10a4      	asrs	r4, r4, #2
 800e806:	2500      	movs	r5, #0
 800e808:	42a5      	cmp	r5, r4
 800e80a:	d109      	bne.n	800e820 <__libc_init_array+0x24>
 800e80c:	4e0b      	ldr	r6, [pc, #44]	; (800e83c <__libc_init_array+0x40>)
 800e80e:	4c0c      	ldr	r4, [pc, #48]	; (800e840 <__libc_init_array+0x44>)
 800e810:	f003 fc88 	bl	8012124 <_init>
 800e814:	1ba4      	subs	r4, r4, r6
 800e816:	10a4      	asrs	r4, r4, #2
 800e818:	2500      	movs	r5, #0
 800e81a:	42a5      	cmp	r5, r4
 800e81c:	d105      	bne.n	800e82a <__libc_init_array+0x2e>
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e824:	4798      	blx	r3
 800e826:	3501      	adds	r5, #1
 800e828:	e7ee      	b.n	800e808 <__libc_init_array+0xc>
 800e82a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e82e:	4798      	blx	r3
 800e830:	3501      	adds	r5, #1
 800e832:	e7f2      	b.n	800e81a <__libc_init_array+0x1e>
 800e834:	08013a60 	.word	0x08013a60
 800e838:	08013a60 	.word	0x08013a60
 800e83c:	08013a60 	.word	0x08013a60
 800e840:	08013a64 	.word	0x08013a64

0800e844 <memset>:
 800e844:	4402      	add	r2, r0
 800e846:	4603      	mov	r3, r0
 800e848:	4293      	cmp	r3, r2
 800e84a:	d100      	bne.n	800e84e <memset+0xa>
 800e84c:	4770      	bx	lr
 800e84e:	f803 1b01 	strb.w	r1, [r3], #1
 800e852:	e7f9      	b.n	800e848 <memset+0x4>

0800e854 <__cvt>:
 800e854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e858:	ec55 4b10 	vmov	r4, r5, d0
 800e85c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e85e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e862:	2d00      	cmp	r5, #0
 800e864:	460e      	mov	r6, r1
 800e866:	4691      	mov	r9, r2
 800e868:	4619      	mov	r1, r3
 800e86a:	bfb8      	it	lt
 800e86c:	4622      	movlt	r2, r4
 800e86e:	462b      	mov	r3, r5
 800e870:	f027 0720 	bic.w	r7, r7, #32
 800e874:	bfbb      	ittet	lt
 800e876:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e87a:	461d      	movlt	r5, r3
 800e87c:	2300      	movge	r3, #0
 800e87e:	232d      	movlt	r3, #45	; 0x2d
 800e880:	bfb8      	it	lt
 800e882:	4614      	movlt	r4, r2
 800e884:	2f46      	cmp	r7, #70	; 0x46
 800e886:	700b      	strb	r3, [r1, #0]
 800e888:	d004      	beq.n	800e894 <__cvt+0x40>
 800e88a:	2f45      	cmp	r7, #69	; 0x45
 800e88c:	d100      	bne.n	800e890 <__cvt+0x3c>
 800e88e:	3601      	adds	r6, #1
 800e890:	2102      	movs	r1, #2
 800e892:	e000      	b.n	800e896 <__cvt+0x42>
 800e894:	2103      	movs	r1, #3
 800e896:	ab03      	add	r3, sp, #12
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	ab02      	add	r3, sp, #8
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	4632      	mov	r2, r6
 800e8a0:	4653      	mov	r3, sl
 800e8a2:	ec45 4b10 	vmov	d0, r4, r5
 800e8a6:	f000 fe27 	bl	800f4f8 <_dtoa_r>
 800e8aa:	2f47      	cmp	r7, #71	; 0x47
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	d102      	bne.n	800e8b6 <__cvt+0x62>
 800e8b0:	f019 0f01 	tst.w	r9, #1
 800e8b4:	d026      	beq.n	800e904 <__cvt+0xb0>
 800e8b6:	2f46      	cmp	r7, #70	; 0x46
 800e8b8:	eb08 0906 	add.w	r9, r8, r6
 800e8bc:	d111      	bne.n	800e8e2 <__cvt+0x8e>
 800e8be:	f898 3000 	ldrb.w	r3, [r8]
 800e8c2:	2b30      	cmp	r3, #48	; 0x30
 800e8c4:	d10a      	bne.n	800e8dc <__cvt+0x88>
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	f7f2 f923 	bl	8000b18 <__aeabi_dcmpeq>
 800e8d2:	b918      	cbnz	r0, 800e8dc <__cvt+0x88>
 800e8d4:	f1c6 0601 	rsb	r6, r6, #1
 800e8d8:	f8ca 6000 	str.w	r6, [sl]
 800e8dc:	f8da 3000 	ldr.w	r3, [sl]
 800e8e0:	4499      	add	r9, r3
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	f7f2 f915 	bl	8000b18 <__aeabi_dcmpeq>
 800e8ee:	b938      	cbnz	r0, 800e900 <__cvt+0xac>
 800e8f0:	2230      	movs	r2, #48	; 0x30
 800e8f2:	9b03      	ldr	r3, [sp, #12]
 800e8f4:	454b      	cmp	r3, r9
 800e8f6:	d205      	bcs.n	800e904 <__cvt+0xb0>
 800e8f8:	1c59      	adds	r1, r3, #1
 800e8fa:	9103      	str	r1, [sp, #12]
 800e8fc:	701a      	strb	r2, [r3, #0]
 800e8fe:	e7f8      	b.n	800e8f2 <__cvt+0x9e>
 800e900:	f8cd 900c 	str.w	r9, [sp, #12]
 800e904:	9b03      	ldr	r3, [sp, #12]
 800e906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e908:	eba3 0308 	sub.w	r3, r3, r8
 800e90c:	4640      	mov	r0, r8
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	b004      	add	sp, #16
 800e912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e916 <__exponent>:
 800e916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e918:	2900      	cmp	r1, #0
 800e91a:	4604      	mov	r4, r0
 800e91c:	bfba      	itte	lt
 800e91e:	4249      	neglt	r1, r1
 800e920:	232d      	movlt	r3, #45	; 0x2d
 800e922:	232b      	movge	r3, #43	; 0x2b
 800e924:	2909      	cmp	r1, #9
 800e926:	f804 2b02 	strb.w	r2, [r4], #2
 800e92a:	7043      	strb	r3, [r0, #1]
 800e92c:	dd20      	ble.n	800e970 <__exponent+0x5a>
 800e92e:	f10d 0307 	add.w	r3, sp, #7
 800e932:	461f      	mov	r7, r3
 800e934:	260a      	movs	r6, #10
 800e936:	fb91 f5f6 	sdiv	r5, r1, r6
 800e93a:	fb06 1115 	mls	r1, r6, r5, r1
 800e93e:	3130      	adds	r1, #48	; 0x30
 800e940:	2d09      	cmp	r5, #9
 800e942:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e946:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800e94a:	4629      	mov	r1, r5
 800e94c:	dc09      	bgt.n	800e962 <__exponent+0x4c>
 800e94e:	3130      	adds	r1, #48	; 0x30
 800e950:	3b02      	subs	r3, #2
 800e952:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e956:	42bb      	cmp	r3, r7
 800e958:	4622      	mov	r2, r4
 800e95a:	d304      	bcc.n	800e966 <__exponent+0x50>
 800e95c:	1a10      	subs	r0, r2, r0
 800e95e:	b003      	add	sp, #12
 800e960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e962:	4613      	mov	r3, r2
 800e964:	e7e7      	b.n	800e936 <__exponent+0x20>
 800e966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e96a:	f804 2b01 	strb.w	r2, [r4], #1
 800e96e:	e7f2      	b.n	800e956 <__exponent+0x40>
 800e970:	2330      	movs	r3, #48	; 0x30
 800e972:	4419      	add	r1, r3
 800e974:	7083      	strb	r3, [r0, #2]
 800e976:	1d02      	adds	r2, r0, #4
 800e978:	70c1      	strb	r1, [r0, #3]
 800e97a:	e7ef      	b.n	800e95c <__exponent+0x46>

0800e97c <_printf_float>:
 800e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	b08d      	sub	sp, #52	; 0x34
 800e982:	460c      	mov	r4, r1
 800e984:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e988:	4616      	mov	r6, r2
 800e98a:	461f      	mov	r7, r3
 800e98c:	4605      	mov	r5, r0
 800e98e:	f001 fce5 	bl	801035c <_localeconv_r>
 800e992:	6803      	ldr	r3, [r0, #0]
 800e994:	9304      	str	r3, [sp, #16]
 800e996:	4618      	mov	r0, r3
 800e998:	f7f1 fc42 	bl	8000220 <strlen>
 800e99c:	2300      	movs	r3, #0
 800e99e:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a0:	f8d8 3000 	ldr.w	r3, [r8]
 800e9a4:	9005      	str	r0, [sp, #20]
 800e9a6:	3307      	adds	r3, #7
 800e9a8:	f023 0307 	bic.w	r3, r3, #7
 800e9ac:	f103 0208 	add.w	r2, r3, #8
 800e9b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e9b4:	f8d4 b000 	ldr.w	fp, [r4]
 800e9b8:	f8c8 2000 	str.w	r2, [r8]
 800e9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e9c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e9c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e9cc:	9307      	str	r3, [sp, #28]
 800e9ce:	f8cd 8018 	str.w	r8, [sp, #24]
 800e9d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9d6:	4ba7      	ldr	r3, [pc, #668]	; (800ec74 <_printf_float+0x2f8>)
 800e9d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9dc:	f7f2 f8ce 	bl	8000b7c <__aeabi_dcmpun>
 800e9e0:	bb70      	cbnz	r0, 800ea40 <_printf_float+0xc4>
 800e9e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9e6:	4ba3      	ldr	r3, [pc, #652]	; (800ec74 <_printf_float+0x2f8>)
 800e9e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9ec:	f7f2 f8a8 	bl	8000b40 <__aeabi_dcmple>
 800e9f0:	bb30      	cbnz	r0, 800ea40 <_printf_float+0xc4>
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	4640      	mov	r0, r8
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	f7f2 f897 	bl	8000b2c <__aeabi_dcmplt>
 800e9fe:	b110      	cbz	r0, 800ea06 <_printf_float+0x8a>
 800ea00:	232d      	movs	r3, #45	; 0x2d
 800ea02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea06:	4a9c      	ldr	r2, [pc, #624]	; (800ec78 <_printf_float+0x2fc>)
 800ea08:	4b9c      	ldr	r3, [pc, #624]	; (800ec7c <_printf_float+0x300>)
 800ea0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ea0e:	bf8c      	ite	hi
 800ea10:	4690      	movhi	r8, r2
 800ea12:	4698      	movls	r8, r3
 800ea14:	2303      	movs	r3, #3
 800ea16:	f02b 0204 	bic.w	r2, fp, #4
 800ea1a:	6123      	str	r3, [r4, #16]
 800ea1c:	6022      	str	r2, [r4, #0]
 800ea1e:	f04f 0900 	mov.w	r9, #0
 800ea22:	9700      	str	r7, [sp, #0]
 800ea24:	4633      	mov	r3, r6
 800ea26:	aa0b      	add	r2, sp, #44	; 0x2c
 800ea28:	4621      	mov	r1, r4
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	f000 f9e6 	bl	800edfc <_printf_common>
 800ea30:	3001      	adds	r0, #1
 800ea32:	f040 808d 	bne.w	800eb50 <_printf_float+0x1d4>
 800ea36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea3a:	b00d      	add	sp, #52	; 0x34
 800ea3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea40:	4642      	mov	r2, r8
 800ea42:	464b      	mov	r3, r9
 800ea44:	4640      	mov	r0, r8
 800ea46:	4649      	mov	r1, r9
 800ea48:	f7f2 f898 	bl	8000b7c <__aeabi_dcmpun>
 800ea4c:	b110      	cbz	r0, 800ea54 <_printf_float+0xd8>
 800ea4e:	4a8c      	ldr	r2, [pc, #560]	; (800ec80 <_printf_float+0x304>)
 800ea50:	4b8c      	ldr	r3, [pc, #560]	; (800ec84 <_printf_float+0x308>)
 800ea52:	e7da      	b.n	800ea0a <_printf_float+0x8e>
 800ea54:	6861      	ldr	r1, [r4, #4]
 800ea56:	1c4b      	adds	r3, r1, #1
 800ea58:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ea5c:	a80a      	add	r0, sp, #40	; 0x28
 800ea5e:	d13e      	bne.n	800eade <_printf_float+0x162>
 800ea60:	2306      	movs	r3, #6
 800ea62:	6063      	str	r3, [r4, #4]
 800ea64:	2300      	movs	r3, #0
 800ea66:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ea6a:	ab09      	add	r3, sp, #36	; 0x24
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	ec49 8b10 	vmov	d0, r8, r9
 800ea72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea76:	6022      	str	r2, [r4, #0]
 800ea78:	f8cd a004 	str.w	sl, [sp, #4]
 800ea7c:	6861      	ldr	r1, [r4, #4]
 800ea7e:	4628      	mov	r0, r5
 800ea80:	f7ff fee8 	bl	800e854 <__cvt>
 800ea84:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ea88:	2b47      	cmp	r3, #71	; 0x47
 800ea8a:	4680      	mov	r8, r0
 800ea8c:	d109      	bne.n	800eaa2 <_printf_float+0x126>
 800ea8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea90:	1cd8      	adds	r0, r3, #3
 800ea92:	db02      	blt.n	800ea9a <_printf_float+0x11e>
 800ea94:	6862      	ldr	r2, [r4, #4]
 800ea96:	4293      	cmp	r3, r2
 800ea98:	dd47      	ble.n	800eb2a <_printf_float+0x1ae>
 800ea9a:	f1aa 0a02 	sub.w	sl, sl, #2
 800ea9e:	fa5f fa8a 	uxtb.w	sl, sl
 800eaa2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800eaa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eaa8:	d824      	bhi.n	800eaf4 <_printf_float+0x178>
 800eaaa:	3901      	subs	r1, #1
 800eaac:	4652      	mov	r2, sl
 800eaae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eab2:	9109      	str	r1, [sp, #36]	; 0x24
 800eab4:	f7ff ff2f 	bl	800e916 <__exponent>
 800eab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaba:	1813      	adds	r3, r2, r0
 800eabc:	2a01      	cmp	r2, #1
 800eabe:	4681      	mov	r9, r0
 800eac0:	6123      	str	r3, [r4, #16]
 800eac2:	dc02      	bgt.n	800eaca <_printf_float+0x14e>
 800eac4:	6822      	ldr	r2, [r4, #0]
 800eac6:	07d1      	lsls	r1, r2, #31
 800eac8:	d501      	bpl.n	800eace <_printf_float+0x152>
 800eaca:	3301      	adds	r3, #1
 800eacc:	6123      	str	r3, [r4, #16]
 800eace:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d0a5      	beq.n	800ea22 <_printf_float+0xa6>
 800ead6:	232d      	movs	r3, #45	; 0x2d
 800ead8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eadc:	e7a1      	b.n	800ea22 <_printf_float+0xa6>
 800eade:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800eae2:	f000 8177 	beq.w	800edd4 <_printf_float+0x458>
 800eae6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800eaea:	d1bb      	bne.n	800ea64 <_printf_float+0xe8>
 800eaec:	2900      	cmp	r1, #0
 800eaee:	d1b9      	bne.n	800ea64 <_printf_float+0xe8>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e7b6      	b.n	800ea62 <_printf_float+0xe6>
 800eaf4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800eaf8:	d119      	bne.n	800eb2e <_printf_float+0x1b2>
 800eafa:	2900      	cmp	r1, #0
 800eafc:	6863      	ldr	r3, [r4, #4]
 800eafe:	dd0c      	ble.n	800eb1a <_printf_float+0x19e>
 800eb00:	6121      	str	r1, [r4, #16]
 800eb02:	b913      	cbnz	r3, 800eb0a <_printf_float+0x18e>
 800eb04:	6822      	ldr	r2, [r4, #0]
 800eb06:	07d2      	lsls	r2, r2, #31
 800eb08:	d502      	bpl.n	800eb10 <_printf_float+0x194>
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	440b      	add	r3, r1
 800eb0e:	6123      	str	r3, [r4, #16]
 800eb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb12:	65a3      	str	r3, [r4, #88]	; 0x58
 800eb14:	f04f 0900 	mov.w	r9, #0
 800eb18:	e7d9      	b.n	800eace <_printf_float+0x152>
 800eb1a:	b913      	cbnz	r3, 800eb22 <_printf_float+0x1a6>
 800eb1c:	6822      	ldr	r2, [r4, #0]
 800eb1e:	07d0      	lsls	r0, r2, #31
 800eb20:	d501      	bpl.n	800eb26 <_printf_float+0x1aa>
 800eb22:	3302      	adds	r3, #2
 800eb24:	e7f3      	b.n	800eb0e <_printf_float+0x192>
 800eb26:	2301      	movs	r3, #1
 800eb28:	e7f1      	b.n	800eb0e <_printf_float+0x192>
 800eb2a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800eb2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eb32:	4293      	cmp	r3, r2
 800eb34:	db05      	blt.n	800eb42 <_printf_float+0x1c6>
 800eb36:	6822      	ldr	r2, [r4, #0]
 800eb38:	6123      	str	r3, [r4, #16]
 800eb3a:	07d1      	lsls	r1, r2, #31
 800eb3c:	d5e8      	bpl.n	800eb10 <_printf_float+0x194>
 800eb3e:	3301      	adds	r3, #1
 800eb40:	e7e5      	b.n	800eb0e <_printf_float+0x192>
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	bfd4      	ite	le
 800eb46:	f1c3 0302 	rsble	r3, r3, #2
 800eb4a:	2301      	movgt	r3, #1
 800eb4c:	4413      	add	r3, r2
 800eb4e:	e7de      	b.n	800eb0e <_printf_float+0x192>
 800eb50:	6823      	ldr	r3, [r4, #0]
 800eb52:	055a      	lsls	r2, r3, #21
 800eb54:	d407      	bmi.n	800eb66 <_printf_float+0x1ea>
 800eb56:	6923      	ldr	r3, [r4, #16]
 800eb58:	4642      	mov	r2, r8
 800eb5a:	4631      	mov	r1, r6
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	47b8      	blx	r7
 800eb60:	3001      	adds	r0, #1
 800eb62:	d12b      	bne.n	800ebbc <_printf_float+0x240>
 800eb64:	e767      	b.n	800ea36 <_printf_float+0xba>
 800eb66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800eb6a:	f240 80dc 	bls.w	800ed26 <_printf_float+0x3aa>
 800eb6e:	2200      	movs	r2, #0
 800eb70:	2300      	movs	r3, #0
 800eb72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb76:	f7f1 ffcf 	bl	8000b18 <__aeabi_dcmpeq>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	d033      	beq.n	800ebe6 <_printf_float+0x26a>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	4a41      	ldr	r2, [pc, #260]	; (800ec88 <_printf_float+0x30c>)
 800eb82:	4631      	mov	r1, r6
 800eb84:	4628      	mov	r0, r5
 800eb86:	47b8      	blx	r7
 800eb88:	3001      	adds	r0, #1
 800eb8a:	f43f af54 	beq.w	800ea36 <_printf_float+0xba>
 800eb8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb92:	429a      	cmp	r2, r3
 800eb94:	db02      	blt.n	800eb9c <_printf_float+0x220>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	07d8      	lsls	r0, r3, #31
 800eb9a:	d50f      	bpl.n	800ebbc <_printf_float+0x240>
 800eb9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eba0:	4631      	mov	r1, r6
 800eba2:	4628      	mov	r0, r5
 800eba4:	47b8      	blx	r7
 800eba6:	3001      	adds	r0, #1
 800eba8:	f43f af45 	beq.w	800ea36 <_printf_float+0xba>
 800ebac:	f04f 0800 	mov.w	r8, #0
 800ebb0:	f104 091a 	add.w	r9, r4, #26
 800ebb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	4543      	cmp	r3, r8
 800ebba:	dc09      	bgt.n	800ebd0 <_printf_float+0x254>
 800ebbc:	6823      	ldr	r3, [r4, #0]
 800ebbe:	079b      	lsls	r3, r3, #30
 800ebc0:	f100 8103 	bmi.w	800edca <_printf_float+0x44e>
 800ebc4:	68e0      	ldr	r0, [r4, #12]
 800ebc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebc8:	4298      	cmp	r0, r3
 800ebca:	bfb8      	it	lt
 800ebcc:	4618      	movlt	r0, r3
 800ebce:	e734      	b.n	800ea3a <_printf_float+0xbe>
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	464a      	mov	r2, r9
 800ebd4:	4631      	mov	r1, r6
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	47b8      	blx	r7
 800ebda:	3001      	adds	r0, #1
 800ebdc:	f43f af2b 	beq.w	800ea36 <_printf_float+0xba>
 800ebe0:	f108 0801 	add.w	r8, r8, #1
 800ebe4:	e7e6      	b.n	800ebb4 <_printf_float+0x238>
 800ebe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	dc2b      	bgt.n	800ec44 <_printf_float+0x2c8>
 800ebec:	2301      	movs	r3, #1
 800ebee:	4a26      	ldr	r2, [pc, #152]	; (800ec88 <_printf_float+0x30c>)
 800ebf0:	4631      	mov	r1, r6
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	47b8      	blx	r7
 800ebf6:	3001      	adds	r0, #1
 800ebf8:	f43f af1d 	beq.w	800ea36 <_printf_float+0xba>
 800ebfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebfe:	b923      	cbnz	r3, 800ec0a <_printf_float+0x28e>
 800ec00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec02:	b913      	cbnz	r3, 800ec0a <_printf_float+0x28e>
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	07d9      	lsls	r1, r3, #31
 800ec08:	d5d8      	bpl.n	800ebbc <_printf_float+0x240>
 800ec0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b8      	blx	r7
 800ec14:	3001      	adds	r0, #1
 800ec16:	f43f af0e 	beq.w	800ea36 <_printf_float+0xba>
 800ec1a:	f04f 0900 	mov.w	r9, #0
 800ec1e:	f104 0a1a 	add.w	sl, r4, #26
 800ec22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec24:	425b      	negs	r3, r3
 800ec26:	454b      	cmp	r3, r9
 800ec28:	dc01      	bgt.n	800ec2e <_printf_float+0x2b2>
 800ec2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec2c:	e794      	b.n	800eb58 <_printf_float+0x1dc>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	4652      	mov	r2, sl
 800ec32:	4631      	mov	r1, r6
 800ec34:	4628      	mov	r0, r5
 800ec36:	47b8      	blx	r7
 800ec38:	3001      	adds	r0, #1
 800ec3a:	f43f aefc 	beq.w	800ea36 <_printf_float+0xba>
 800ec3e:	f109 0901 	add.w	r9, r9, #1
 800ec42:	e7ee      	b.n	800ec22 <_printf_float+0x2a6>
 800ec44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	bfa8      	it	ge
 800ec4c:	461a      	movge	r2, r3
 800ec4e:	2a00      	cmp	r2, #0
 800ec50:	4691      	mov	r9, r2
 800ec52:	dd07      	ble.n	800ec64 <_printf_float+0x2e8>
 800ec54:	4613      	mov	r3, r2
 800ec56:	4631      	mov	r1, r6
 800ec58:	4642      	mov	r2, r8
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	47b8      	blx	r7
 800ec5e:	3001      	adds	r0, #1
 800ec60:	f43f aee9 	beq.w	800ea36 <_printf_float+0xba>
 800ec64:	f104 031a 	add.w	r3, r4, #26
 800ec68:	f04f 0b00 	mov.w	fp, #0
 800ec6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec70:	9306      	str	r3, [sp, #24]
 800ec72:	e015      	b.n	800eca0 <_printf_float+0x324>
 800ec74:	7fefffff 	.word	0x7fefffff
 800ec78:	08013760 	.word	0x08013760
 800ec7c:	0801375c 	.word	0x0801375c
 800ec80:	08013768 	.word	0x08013768
 800ec84:	08013764 	.word	0x08013764
 800ec88:	0801376c 	.word	0x0801376c
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	9a06      	ldr	r2, [sp, #24]
 800ec90:	4631      	mov	r1, r6
 800ec92:	4628      	mov	r0, r5
 800ec94:	47b8      	blx	r7
 800ec96:	3001      	adds	r0, #1
 800ec98:	f43f aecd 	beq.w	800ea36 <_printf_float+0xba>
 800ec9c:	f10b 0b01 	add.w	fp, fp, #1
 800eca0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800eca4:	ebaa 0309 	sub.w	r3, sl, r9
 800eca8:	455b      	cmp	r3, fp
 800ecaa:	dcef      	bgt.n	800ec8c <_printf_float+0x310>
 800ecac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	44d0      	add	r8, sl
 800ecb4:	db15      	blt.n	800ece2 <_printf_float+0x366>
 800ecb6:	6823      	ldr	r3, [r4, #0]
 800ecb8:	07da      	lsls	r2, r3, #31
 800ecba:	d412      	bmi.n	800ece2 <_printf_float+0x366>
 800ecbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecc0:	eba3 020a 	sub.w	r2, r3, sl
 800ecc4:	eba3 0a01 	sub.w	sl, r3, r1
 800ecc8:	4592      	cmp	sl, r2
 800ecca:	bfa8      	it	ge
 800eccc:	4692      	movge	sl, r2
 800ecce:	f1ba 0f00 	cmp.w	sl, #0
 800ecd2:	dc0e      	bgt.n	800ecf2 <_printf_float+0x376>
 800ecd4:	f04f 0800 	mov.w	r8, #0
 800ecd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecdc:	f104 091a 	add.w	r9, r4, #26
 800ece0:	e019      	b.n	800ed16 <_printf_float+0x39a>
 800ece2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ece6:	4631      	mov	r1, r6
 800ece8:	4628      	mov	r0, r5
 800ecea:	47b8      	blx	r7
 800ecec:	3001      	adds	r0, #1
 800ecee:	d1e5      	bne.n	800ecbc <_printf_float+0x340>
 800ecf0:	e6a1      	b.n	800ea36 <_printf_float+0xba>
 800ecf2:	4653      	mov	r3, sl
 800ecf4:	4642      	mov	r2, r8
 800ecf6:	4631      	mov	r1, r6
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	47b8      	blx	r7
 800ecfc:	3001      	adds	r0, #1
 800ecfe:	d1e9      	bne.n	800ecd4 <_printf_float+0x358>
 800ed00:	e699      	b.n	800ea36 <_printf_float+0xba>
 800ed02:	2301      	movs	r3, #1
 800ed04:	464a      	mov	r2, r9
 800ed06:	4631      	mov	r1, r6
 800ed08:	4628      	mov	r0, r5
 800ed0a:	47b8      	blx	r7
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	f43f ae92 	beq.w	800ea36 <_printf_float+0xba>
 800ed12:	f108 0801 	add.w	r8, r8, #1
 800ed16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed1a:	1a9b      	subs	r3, r3, r2
 800ed1c:	eba3 030a 	sub.w	r3, r3, sl
 800ed20:	4543      	cmp	r3, r8
 800ed22:	dcee      	bgt.n	800ed02 <_printf_float+0x386>
 800ed24:	e74a      	b.n	800ebbc <_printf_float+0x240>
 800ed26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed28:	2a01      	cmp	r2, #1
 800ed2a:	dc01      	bgt.n	800ed30 <_printf_float+0x3b4>
 800ed2c:	07db      	lsls	r3, r3, #31
 800ed2e:	d53a      	bpl.n	800eda6 <_printf_float+0x42a>
 800ed30:	2301      	movs	r3, #1
 800ed32:	4642      	mov	r2, r8
 800ed34:	4631      	mov	r1, r6
 800ed36:	4628      	mov	r0, r5
 800ed38:	47b8      	blx	r7
 800ed3a:	3001      	adds	r0, #1
 800ed3c:	f43f ae7b 	beq.w	800ea36 <_printf_float+0xba>
 800ed40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed44:	4631      	mov	r1, r6
 800ed46:	4628      	mov	r0, r5
 800ed48:	47b8      	blx	r7
 800ed4a:	3001      	adds	r0, #1
 800ed4c:	f108 0801 	add.w	r8, r8, #1
 800ed50:	f43f ae71 	beq.w	800ea36 <_printf_float+0xba>
 800ed54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed56:	2200      	movs	r2, #0
 800ed58:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800ed5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed60:	2300      	movs	r3, #0
 800ed62:	f7f1 fed9 	bl	8000b18 <__aeabi_dcmpeq>
 800ed66:	b9c8      	cbnz	r0, 800ed9c <_printf_float+0x420>
 800ed68:	4653      	mov	r3, sl
 800ed6a:	4642      	mov	r2, r8
 800ed6c:	4631      	mov	r1, r6
 800ed6e:	4628      	mov	r0, r5
 800ed70:	47b8      	blx	r7
 800ed72:	3001      	adds	r0, #1
 800ed74:	d10e      	bne.n	800ed94 <_printf_float+0x418>
 800ed76:	e65e      	b.n	800ea36 <_printf_float+0xba>
 800ed78:	2301      	movs	r3, #1
 800ed7a:	4652      	mov	r2, sl
 800ed7c:	4631      	mov	r1, r6
 800ed7e:	4628      	mov	r0, r5
 800ed80:	47b8      	blx	r7
 800ed82:	3001      	adds	r0, #1
 800ed84:	f43f ae57 	beq.w	800ea36 <_printf_float+0xba>
 800ed88:	f108 0801 	add.w	r8, r8, #1
 800ed8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	4543      	cmp	r3, r8
 800ed92:	dcf1      	bgt.n	800ed78 <_printf_float+0x3fc>
 800ed94:	464b      	mov	r3, r9
 800ed96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed9a:	e6de      	b.n	800eb5a <_printf_float+0x1de>
 800ed9c:	f04f 0800 	mov.w	r8, #0
 800eda0:	f104 0a1a 	add.w	sl, r4, #26
 800eda4:	e7f2      	b.n	800ed8c <_printf_float+0x410>
 800eda6:	2301      	movs	r3, #1
 800eda8:	e7df      	b.n	800ed6a <_printf_float+0x3ee>
 800edaa:	2301      	movs	r3, #1
 800edac:	464a      	mov	r2, r9
 800edae:	4631      	mov	r1, r6
 800edb0:	4628      	mov	r0, r5
 800edb2:	47b8      	blx	r7
 800edb4:	3001      	adds	r0, #1
 800edb6:	f43f ae3e 	beq.w	800ea36 <_printf_float+0xba>
 800edba:	f108 0801 	add.w	r8, r8, #1
 800edbe:	68e3      	ldr	r3, [r4, #12]
 800edc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edc2:	1a9b      	subs	r3, r3, r2
 800edc4:	4543      	cmp	r3, r8
 800edc6:	dcf0      	bgt.n	800edaa <_printf_float+0x42e>
 800edc8:	e6fc      	b.n	800ebc4 <_printf_float+0x248>
 800edca:	f04f 0800 	mov.w	r8, #0
 800edce:	f104 0919 	add.w	r9, r4, #25
 800edd2:	e7f4      	b.n	800edbe <_printf_float+0x442>
 800edd4:	2900      	cmp	r1, #0
 800edd6:	f43f ae8b 	beq.w	800eaf0 <_printf_float+0x174>
 800edda:	2300      	movs	r3, #0
 800eddc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ede0:	ab09      	add	r3, sp, #36	; 0x24
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	ec49 8b10 	vmov	d0, r8, r9
 800ede8:	6022      	str	r2, [r4, #0]
 800edea:	f8cd a004 	str.w	sl, [sp, #4]
 800edee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800edf2:	4628      	mov	r0, r5
 800edf4:	f7ff fd2e 	bl	800e854 <__cvt>
 800edf8:	4680      	mov	r8, r0
 800edfa:	e648      	b.n	800ea8e <_printf_float+0x112>

0800edfc <_printf_common>:
 800edfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee00:	4691      	mov	r9, r2
 800ee02:	461f      	mov	r7, r3
 800ee04:	688a      	ldr	r2, [r1, #8]
 800ee06:	690b      	ldr	r3, [r1, #16]
 800ee08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	bfb8      	it	lt
 800ee10:	4613      	movlt	r3, r2
 800ee12:	f8c9 3000 	str.w	r3, [r9]
 800ee16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee1a:	4606      	mov	r6, r0
 800ee1c:	460c      	mov	r4, r1
 800ee1e:	b112      	cbz	r2, 800ee26 <_printf_common+0x2a>
 800ee20:	3301      	adds	r3, #1
 800ee22:	f8c9 3000 	str.w	r3, [r9]
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	0699      	lsls	r1, r3, #26
 800ee2a:	bf42      	ittt	mi
 800ee2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ee30:	3302      	addmi	r3, #2
 800ee32:	f8c9 3000 	strmi.w	r3, [r9]
 800ee36:	6825      	ldr	r5, [r4, #0]
 800ee38:	f015 0506 	ands.w	r5, r5, #6
 800ee3c:	d107      	bne.n	800ee4e <_printf_common+0x52>
 800ee3e:	f104 0a19 	add.w	sl, r4, #25
 800ee42:	68e3      	ldr	r3, [r4, #12]
 800ee44:	f8d9 2000 	ldr.w	r2, [r9]
 800ee48:	1a9b      	subs	r3, r3, r2
 800ee4a:	42ab      	cmp	r3, r5
 800ee4c:	dc28      	bgt.n	800eea0 <_printf_common+0xa4>
 800ee4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ee52:	6822      	ldr	r2, [r4, #0]
 800ee54:	3300      	adds	r3, #0
 800ee56:	bf18      	it	ne
 800ee58:	2301      	movne	r3, #1
 800ee5a:	0692      	lsls	r2, r2, #26
 800ee5c:	d42d      	bmi.n	800eeba <_printf_common+0xbe>
 800ee5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee62:	4639      	mov	r1, r7
 800ee64:	4630      	mov	r0, r6
 800ee66:	47c0      	blx	r8
 800ee68:	3001      	adds	r0, #1
 800ee6a:	d020      	beq.n	800eeae <_printf_common+0xb2>
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	68e5      	ldr	r5, [r4, #12]
 800ee70:	f8d9 2000 	ldr.w	r2, [r9]
 800ee74:	f003 0306 	and.w	r3, r3, #6
 800ee78:	2b04      	cmp	r3, #4
 800ee7a:	bf08      	it	eq
 800ee7c:	1aad      	subeq	r5, r5, r2
 800ee7e:	68a3      	ldr	r3, [r4, #8]
 800ee80:	6922      	ldr	r2, [r4, #16]
 800ee82:	bf0c      	ite	eq
 800ee84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee88:	2500      	movne	r5, #0
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	bfc4      	itt	gt
 800ee8e:	1a9b      	subgt	r3, r3, r2
 800ee90:	18ed      	addgt	r5, r5, r3
 800ee92:	f04f 0900 	mov.w	r9, #0
 800ee96:	341a      	adds	r4, #26
 800ee98:	454d      	cmp	r5, r9
 800ee9a:	d11a      	bne.n	800eed2 <_printf_common+0xd6>
 800ee9c:	2000      	movs	r0, #0
 800ee9e:	e008      	b.n	800eeb2 <_printf_common+0xb6>
 800eea0:	2301      	movs	r3, #1
 800eea2:	4652      	mov	r2, sl
 800eea4:	4639      	mov	r1, r7
 800eea6:	4630      	mov	r0, r6
 800eea8:	47c0      	blx	r8
 800eeaa:	3001      	adds	r0, #1
 800eeac:	d103      	bne.n	800eeb6 <_printf_common+0xba>
 800eeae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb6:	3501      	adds	r5, #1
 800eeb8:	e7c3      	b.n	800ee42 <_printf_common+0x46>
 800eeba:	18e1      	adds	r1, r4, r3
 800eebc:	1c5a      	adds	r2, r3, #1
 800eebe:	2030      	movs	r0, #48	; 0x30
 800eec0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eec4:	4422      	add	r2, r4
 800eec6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eeca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eece:	3302      	adds	r3, #2
 800eed0:	e7c5      	b.n	800ee5e <_printf_common+0x62>
 800eed2:	2301      	movs	r3, #1
 800eed4:	4622      	mov	r2, r4
 800eed6:	4639      	mov	r1, r7
 800eed8:	4630      	mov	r0, r6
 800eeda:	47c0      	blx	r8
 800eedc:	3001      	adds	r0, #1
 800eede:	d0e6      	beq.n	800eeae <_printf_common+0xb2>
 800eee0:	f109 0901 	add.w	r9, r9, #1
 800eee4:	e7d8      	b.n	800ee98 <_printf_common+0x9c>
	...

0800eee8 <_printf_i>:
 800eee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800eef0:	460c      	mov	r4, r1
 800eef2:	7e09      	ldrb	r1, [r1, #24]
 800eef4:	b085      	sub	sp, #20
 800eef6:	296e      	cmp	r1, #110	; 0x6e
 800eef8:	4617      	mov	r7, r2
 800eefa:	4606      	mov	r6, r0
 800eefc:	4698      	mov	r8, r3
 800eefe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef00:	f000 80b3 	beq.w	800f06a <_printf_i+0x182>
 800ef04:	d822      	bhi.n	800ef4c <_printf_i+0x64>
 800ef06:	2963      	cmp	r1, #99	; 0x63
 800ef08:	d036      	beq.n	800ef78 <_printf_i+0x90>
 800ef0a:	d80a      	bhi.n	800ef22 <_printf_i+0x3a>
 800ef0c:	2900      	cmp	r1, #0
 800ef0e:	f000 80b9 	beq.w	800f084 <_printf_i+0x19c>
 800ef12:	2958      	cmp	r1, #88	; 0x58
 800ef14:	f000 8083 	beq.w	800f01e <_printf_i+0x136>
 800ef18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ef20:	e032      	b.n	800ef88 <_printf_i+0xa0>
 800ef22:	2964      	cmp	r1, #100	; 0x64
 800ef24:	d001      	beq.n	800ef2a <_printf_i+0x42>
 800ef26:	2969      	cmp	r1, #105	; 0x69
 800ef28:	d1f6      	bne.n	800ef18 <_printf_i+0x30>
 800ef2a:	6820      	ldr	r0, [r4, #0]
 800ef2c:	6813      	ldr	r3, [r2, #0]
 800ef2e:	0605      	lsls	r5, r0, #24
 800ef30:	f103 0104 	add.w	r1, r3, #4
 800ef34:	d52a      	bpl.n	800ef8c <_printf_i+0xa4>
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	6011      	str	r1, [r2, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	da03      	bge.n	800ef46 <_printf_i+0x5e>
 800ef3e:	222d      	movs	r2, #45	; 0x2d
 800ef40:	425b      	negs	r3, r3
 800ef42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ef46:	486f      	ldr	r0, [pc, #444]	; (800f104 <_printf_i+0x21c>)
 800ef48:	220a      	movs	r2, #10
 800ef4a:	e039      	b.n	800efc0 <_printf_i+0xd8>
 800ef4c:	2973      	cmp	r1, #115	; 0x73
 800ef4e:	f000 809d 	beq.w	800f08c <_printf_i+0x1a4>
 800ef52:	d808      	bhi.n	800ef66 <_printf_i+0x7e>
 800ef54:	296f      	cmp	r1, #111	; 0x6f
 800ef56:	d020      	beq.n	800ef9a <_printf_i+0xb2>
 800ef58:	2970      	cmp	r1, #112	; 0x70
 800ef5a:	d1dd      	bne.n	800ef18 <_printf_i+0x30>
 800ef5c:	6823      	ldr	r3, [r4, #0]
 800ef5e:	f043 0320 	orr.w	r3, r3, #32
 800ef62:	6023      	str	r3, [r4, #0]
 800ef64:	e003      	b.n	800ef6e <_printf_i+0x86>
 800ef66:	2975      	cmp	r1, #117	; 0x75
 800ef68:	d017      	beq.n	800ef9a <_printf_i+0xb2>
 800ef6a:	2978      	cmp	r1, #120	; 0x78
 800ef6c:	d1d4      	bne.n	800ef18 <_printf_i+0x30>
 800ef6e:	2378      	movs	r3, #120	; 0x78
 800ef70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef74:	4864      	ldr	r0, [pc, #400]	; (800f108 <_printf_i+0x220>)
 800ef76:	e055      	b.n	800f024 <_printf_i+0x13c>
 800ef78:	6813      	ldr	r3, [r2, #0]
 800ef7a:	1d19      	adds	r1, r3, #4
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6011      	str	r1, [r2, #0]
 800ef80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e08c      	b.n	800f0a6 <_printf_i+0x1be>
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	6011      	str	r1, [r2, #0]
 800ef90:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef94:	bf18      	it	ne
 800ef96:	b21b      	sxthne	r3, r3
 800ef98:	e7cf      	b.n	800ef3a <_printf_i+0x52>
 800ef9a:	6813      	ldr	r3, [r2, #0]
 800ef9c:	6825      	ldr	r5, [r4, #0]
 800ef9e:	1d18      	adds	r0, r3, #4
 800efa0:	6010      	str	r0, [r2, #0]
 800efa2:	0628      	lsls	r0, r5, #24
 800efa4:	d501      	bpl.n	800efaa <_printf_i+0xc2>
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	e002      	b.n	800efb0 <_printf_i+0xc8>
 800efaa:	0668      	lsls	r0, r5, #25
 800efac:	d5fb      	bpl.n	800efa6 <_printf_i+0xbe>
 800efae:	881b      	ldrh	r3, [r3, #0]
 800efb0:	4854      	ldr	r0, [pc, #336]	; (800f104 <_printf_i+0x21c>)
 800efb2:	296f      	cmp	r1, #111	; 0x6f
 800efb4:	bf14      	ite	ne
 800efb6:	220a      	movne	r2, #10
 800efb8:	2208      	moveq	r2, #8
 800efba:	2100      	movs	r1, #0
 800efbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efc0:	6865      	ldr	r5, [r4, #4]
 800efc2:	60a5      	str	r5, [r4, #8]
 800efc4:	2d00      	cmp	r5, #0
 800efc6:	f2c0 8095 	blt.w	800f0f4 <_printf_i+0x20c>
 800efca:	6821      	ldr	r1, [r4, #0]
 800efcc:	f021 0104 	bic.w	r1, r1, #4
 800efd0:	6021      	str	r1, [r4, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d13d      	bne.n	800f052 <_printf_i+0x16a>
 800efd6:	2d00      	cmp	r5, #0
 800efd8:	f040 808e 	bne.w	800f0f8 <_printf_i+0x210>
 800efdc:	4665      	mov	r5, ip
 800efde:	2a08      	cmp	r2, #8
 800efe0:	d10b      	bne.n	800effa <_printf_i+0x112>
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	07db      	lsls	r3, r3, #31
 800efe6:	d508      	bpl.n	800effa <_printf_i+0x112>
 800efe8:	6923      	ldr	r3, [r4, #16]
 800efea:	6862      	ldr	r2, [r4, #4]
 800efec:	429a      	cmp	r2, r3
 800efee:	bfde      	ittt	le
 800eff0:	2330      	movle	r3, #48	; 0x30
 800eff2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eff6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800effa:	ebac 0305 	sub.w	r3, ip, r5
 800effe:	6123      	str	r3, [r4, #16]
 800f000:	f8cd 8000 	str.w	r8, [sp]
 800f004:	463b      	mov	r3, r7
 800f006:	aa03      	add	r2, sp, #12
 800f008:	4621      	mov	r1, r4
 800f00a:	4630      	mov	r0, r6
 800f00c:	f7ff fef6 	bl	800edfc <_printf_common>
 800f010:	3001      	adds	r0, #1
 800f012:	d14d      	bne.n	800f0b0 <_printf_i+0x1c8>
 800f014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f018:	b005      	add	sp, #20
 800f01a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f01e:	4839      	ldr	r0, [pc, #228]	; (800f104 <_printf_i+0x21c>)
 800f020:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f024:	6813      	ldr	r3, [r2, #0]
 800f026:	6821      	ldr	r1, [r4, #0]
 800f028:	1d1d      	adds	r5, r3, #4
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6015      	str	r5, [r2, #0]
 800f02e:	060a      	lsls	r2, r1, #24
 800f030:	d50b      	bpl.n	800f04a <_printf_i+0x162>
 800f032:	07ca      	lsls	r2, r1, #31
 800f034:	bf44      	itt	mi
 800f036:	f041 0120 	orrmi.w	r1, r1, #32
 800f03a:	6021      	strmi	r1, [r4, #0]
 800f03c:	b91b      	cbnz	r3, 800f046 <_printf_i+0x15e>
 800f03e:	6822      	ldr	r2, [r4, #0]
 800f040:	f022 0220 	bic.w	r2, r2, #32
 800f044:	6022      	str	r2, [r4, #0]
 800f046:	2210      	movs	r2, #16
 800f048:	e7b7      	b.n	800efba <_printf_i+0xd2>
 800f04a:	064d      	lsls	r5, r1, #25
 800f04c:	bf48      	it	mi
 800f04e:	b29b      	uxthmi	r3, r3
 800f050:	e7ef      	b.n	800f032 <_printf_i+0x14a>
 800f052:	4665      	mov	r5, ip
 800f054:	fbb3 f1f2 	udiv	r1, r3, r2
 800f058:	fb02 3311 	mls	r3, r2, r1, r3
 800f05c:	5cc3      	ldrb	r3, [r0, r3]
 800f05e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f062:	460b      	mov	r3, r1
 800f064:	2900      	cmp	r1, #0
 800f066:	d1f5      	bne.n	800f054 <_printf_i+0x16c>
 800f068:	e7b9      	b.n	800efde <_printf_i+0xf6>
 800f06a:	6813      	ldr	r3, [r2, #0]
 800f06c:	6825      	ldr	r5, [r4, #0]
 800f06e:	6961      	ldr	r1, [r4, #20]
 800f070:	1d18      	adds	r0, r3, #4
 800f072:	6010      	str	r0, [r2, #0]
 800f074:	0628      	lsls	r0, r5, #24
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	d501      	bpl.n	800f07e <_printf_i+0x196>
 800f07a:	6019      	str	r1, [r3, #0]
 800f07c:	e002      	b.n	800f084 <_printf_i+0x19c>
 800f07e:	066a      	lsls	r2, r5, #25
 800f080:	d5fb      	bpl.n	800f07a <_printf_i+0x192>
 800f082:	8019      	strh	r1, [r3, #0]
 800f084:	2300      	movs	r3, #0
 800f086:	6123      	str	r3, [r4, #16]
 800f088:	4665      	mov	r5, ip
 800f08a:	e7b9      	b.n	800f000 <_printf_i+0x118>
 800f08c:	6813      	ldr	r3, [r2, #0]
 800f08e:	1d19      	adds	r1, r3, #4
 800f090:	6011      	str	r1, [r2, #0]
 800f092:	681d      	ldr	r5, [r3, #0]
 800f094:	6862      	ldr	r2, [r4, #4]
 800f096:	2100      	movs	r1, #0
 800f098:	4628      	mov	r0, r5
 800f09a:	f7f1 f8c9 	bl	8000230 <memchr>
 800f09e:	b108      	cbz	r0, 800f0a4 <_printf_i+0x1bc>
 800f0a0:	1b40      	subs	r0, r0, r5
 800f0a2:	6060      	str	r0, [r4, #4]
 800f0a4:	6863      	ldr	r3, [r4, #4]
 800f0a6:	6123      	str	r3, [r4, #16]
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0ae:	e7a7      	b.n	800f000 <_printf_i+0x118>
 800f0b0:	6923      	ldr	r3, [r4, #16]
 800f0b2:	462a      	mov	r2, r5
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	4630      	mov	r0, r6
 800f0b8:	47c0      	blx	r8
 800f0ba:	3001      	adds	r0, #1
 800f0bc:	d0aa      	beq.n	800f014 <_printf_i+0x12c>
 800f0be:	6823      	ldr	r3, [r4, #0]
 800f0c0:	079b      	lsls	r3, r3, #30
 800f0c2:	d413      	bmi.n	800f0ec <_printf_i+0x204>
 800f0c4:	68e0      	ldr	r0, [r4, #12]
 800f0c6:	9b03      	ldr	r3, [sp, #12]
 800f0c8:	4298      	cmp	r0, r3
 800f0ca:	bfb8      	it	lt
 800f0cc:	4618      	movlt	r0, r3
 800f0ce:	e7a3      	b.n	800f018 <_printf_i+0x130>
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	464a      	mov	r2, r9
 800f0d4:	4639      	mov	r1, r7
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	47c0      	blx	r8
 800f0da:	3001      	adds	r0, #1
 800f0dc:	d09a      	beq.n	800f014 <_printf_i+0x12c>
 800f0de:	3501      	adds	r5, #1
 800f0e0:	68e3      	ldr	r3, [r4, #12]
 800f0e2:	9a03      	ldr	r2, [sp, #12]
 800f0e4:	1a9b      	subs	r3, r3, r2
 800f0e6:	42ab      	cmp	r3, r5
 800f0e8:	dcf2      	bgt.n	800f0d0 <_printf_i+0x1e8>
 800f0ea:	e7eb      	b.n	800f0c4 <_printf_i+0x1dc>
 800f0ec:	2500      	movs	r5, #0
 800f0ee:	f104 0919 	add.w	r9, r4, #25
 800f0f2:	e7f5      	b.n	800f0e0 <_printf_i+0x1f8>
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1ac      	bne.n	800f052 <_printf_i+0x16a>
 800f0f8:	7803      	ldrb	r3, [r0, #0]
 800f0fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f102:	e76c      	b.n	800efde <_printf_i+0xf6>
 800f104:	0801376e 	.word	0x0801376e
 800f108:	0801377f 	.word	0x0801377f

0800f10c <_puts_r>:
 800f10c:	b570      	push	{r4, r5, r6, lr}
 800f10e:	460e      	mov	r6, r1
 800f110:	4605      	mov	r5, r0
 800f112:	b118      	cbz	r0, 800f11c <_puts_r+0x10>
 800f114:	6983      	ldr	r3, [r0, #24]
 800f116:	b90b      	cbnz	r3, 800f11c <_puts_r+0x10>
 800f118:	f001 f896 	bl	8010248 <__sinit>
 800f11c:	69ab      	ldr	r3, [r5, #24]
 800f11e:	68ac      	ldr	r4, [r5, #8]
 800f120:	b913      	cbnz	r3, 800f128 <_puts_r+0x1c>
 800f122:	4628      	mov	r0, r5
 800f124:	f001 f890 	bl	8010248 <__sinit>
 800f128:	4b23      	ldr	r3, [pc, #140]	; (800f1b8 <_puts_r+0xac>)
 800f12a:	429c      	cmp	r4, r3
 800f12c:	d117      	bne.n	800f15e <_puts_r+0x52>
 800f12e:	686c      	ldr	r4, [r5, #4]
 800f130:	89a3      	ldrh	r3, [r4, #12]
 800f132:	071b      	lsls	r3, r3, #28
 800f134:	d51d      	bpl.n	800f172 <_puts_r+0x66>
 800f136:	6923      	ldr	r3, [r4, #16]
 800f138:	b1db      	cbz	r3, 800f172 <_puts_r+0x66>
 800f13a:	3e01      	subs	r6, #1
 800f13c:	68a3      	ldr	r3, [r4, #8]
 800f13e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f142:	3b01      	subs	r3, #1
 800f144:	60a3      	str	r3, [r4, #8]
 800f146:	b9e9      	cbnz	r1, 800f184 <_puts_r+0x78>
 800f148:	2b00      	cmp	r3, #0
 800f14a:	da2e      	bge.n	800f1aa <_puts_r+0x9e>
 800f14c:	4622      	mov	r2, r4
 800f14e:	210a      	movs	r1, #10
 800f150:	4628      	mov	r0, r5
 800f152:	f000 f883 	bl	800f25c <__swbuf_r>
 800f156:	3001      	adds	r0, #1
 800f158:	d011      	beq.n	800f17e <_puts_r+0x72>
 800f15a:	200a      	movs	r0, #10
 800f15c:	e011      	b.n	800f182 <_puts_r+0x76>
 800f15e:	4b17      	ldr	r3, [pc, #92]	; (800f1bc <_puts_r+0xb0>)
 800f160:	429c      	cmp	r4, r3
 800f162:	d101      	bne.n	800f168 <_puts_r+0x5c>
 800f164:	68ac      	ldr	r4, [r5, #8]
 800f166:	e7e3      	b.n	800f130 <_puts_r+0x24>
 800f168:	4b15      	ldr	r3, [pc, #84]	; (800f1c0 <_puts_r+0xb4>)
 800f16a:	429c      	cmp	r4, r3
 800f16c:	bf08      	it	eq
 800f16e:	68ec      	ldreq	r4, [r5, #12]
 800f170:	e7de      	b.n	800f130 <_puts_r+0x24>
 800f172:	4621      	mov	r1, r4
 800f174:	4628      	mov	r0, r5
 800f176:	f000 f8c3 	bl	800f300 <__swsetup_r>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	d0dd      	beq.n	800f13a <_puts_r+0x2e>
 800f17e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f182:	bd70      	pop	{r4, r5, r6, pc}
 800f184:	2b00      	cmp	r3, #0
 800f186:	da04      	bge.n	800f192 <_puts_r+0x86>
 800f188:	69a2      	ldr	r2, [r4, #24]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	dc06      	bgt.n	800f19c <_puts_r+0x90>
 800f18e:	290a      	cmp	r1, #10
 800f190:	d004      	beq.n	800f19c <_puts_r+0x90>
 800f192:	6823      	ldr	r3, [r4, #0]
 800f194:	1c5a      	adds	r2, r3, #1
 800f196:	6022      	str	r2, [r4, #0]
 800f198:	7019      	strb	r1, [r3, #0]
 800f19a:	e7cf      	b.n	800f13c <_puts_r+0x30>
 800f19c:	4622      	mov	r2, r4
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f000 f85c 	bl	800f25c <__swbuf_r>
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	d1c9      	bne.n	800f13c <_puts_r+0x30>
 800f1a8:	e7e9      	b.n	800f17e <_puts_r+0x72>
 800f1aa:	6823      	ldr	r3, [r4, #0]
 800f1ac:	200a      	movs	r0, #10
 800f1ae:	1c5a      	adds	r2, r3, #1
 800f1b0:	6022      	str	r2, [r4, #0]
 800f1b2:	7018      	strb	r0, [r3, #0]
 800f1b4:	e7e5      	b.n	800f182 <_puts_r+0x76>
 800f1b6:	bf00      	nop
 800f1b8:	080137c0 	.word	0x080137c0
 800f1bc:	080137e0 	.word	0x080137e0
 800f1c0:	080137a0 	.word	0x080137a0

0800f1c4 <puts>:
 800f1c4:	4b02      	ldr	r3, [pc, #8]	; (800f1d0 <puts+0xc>)
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	6818      	ldr	r0, [r3, #0]
 800f1ca:	f7ff bf9f 	b.w	800f10c <_puts_r>
 800f1ce:	bf00      	nop
 800f1d0:	20001cfc 	.word	0x20001cfc

0800f1d4 <sniprintf>:
 800f1d4:	b40c      	push	{r2, r3}
 800f1d6:	b530      	push	{r4, r5, lr}
 800f1d8:	4b17      	ldr	r3, [pc, #92]	; (800f238 <sniprintf+0x64>)
 800f1da:	1e0c      	subs	r4, r1, #0
 800f1dc:	b09d      	sub	sp, #116	; 0x74
 800f1de:	681d      	ldr	r5, [r3, #0]
 800f1e0:	da08      	bge.n	800f1f4 <sniprintf+0x20>
 800f1e2:	238b      	movs	r3, #139	; 0x8b
 800f1e4:	602b      	str	r3, [r5, #0]
 800f1e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1ea:	b01d      	add	sp, #116	; 0x74
 800f1ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1f0:	b002      	add	sp, #8
 800f1f2:	4770      	bx	lr
 800f1f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f1f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f1fc:	bf14      	ite	ne
 800f1fe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f202:	4623      	moveq	r3, r4
 800f204:	9304      	str	r3, [sp, #16]
 800f206:	9307      	str	r3, [sp, #28]
 800f208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f20c:	9002      	str	r0, [sp, #8]
 800f20e:	9006      	str	r0, [sp, #24]
 800f210:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f214:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f216:	ab21      	add	r3, sp, #132	; 0x84
 800f218:	a902      	add	r1, sp, #8
 800f21a:	4628      	mov	r0, r5
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	f001 fd0d 	bl	8010c3c <_svfiprintf_r>
 800f222:	1c43      	adds	r3, r0, #1
 800f224:	bfbc      	itt	lt
 800f226:	238b      	movlt	r3, #139	; 0x8b
 800f228:	602b      	strlt	r3, [r5, #0]
 800f22a:	2c00      	cmp	r4, #0
 800f22c:	d0dd      	beq.n	800f1ea <sniprintf+0x16>
 800f22e:	9b02      	ldr	r3, [sp, #8]
 800f230:	2200      	movs	r2, #0
 800f232:	701a      	strb	r2, [r3, #0]
 800f234:	e7d9      	b.n	800f1ea <sniprintf+0x16>
 800f236:	bf00      	nop
 800f238:	20001cfc 	.word	0x20001cfc

0800f23c <strcat>:
 800f23c:	b510      	push	{r4, lr}
 800f23e:	4603      	mov	r3, r0
 800f240:	781a      	ldrb	r2, [r3, #0]
 800f242:	1c5c      	adds	r4, r3, #1
 800f244:	b93a      	cbnz	r2, 800f256 <strcat+0x1a>
 800f246:	3b01      	subs	r3, #1
 800f248:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f24c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f250:	2a00      	cmp	r2, #0
 800f252:	d1f9      	bne.n	800f248 <strcat+0xc>
 800f254:	bd10      	pop	{r4, pc}
 800f256:	4623      	mov	r3, r4
 800f258:	e7f2      	b.n	800f240 <strcat+0x4>
	...

0800f25c <__swbuf_r>:
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	460e      	mov	r6, r1
 800f260:	4614      	mov	r4, r2
 800f262:	4605      	mov	r5, r0
 800f264:	b118      	cbz	r0, 800f26e <__swbuf_r+0x12>
 800f266:	6983      	ldr	r3, [r0, #24]
 800f268:	b90b      	cbnz	r3, 800f26e <__swbuf_r+0x12>
 800f26a:	f000 ffed 	bl	8010248 <__sinit>
 800f26e:	4b21      	ldr	r3, [pc, #132]	; (800f2f4 <__swbuf_r+0x98>)
 800f270:	429c      	cmp	r4, r3
 800f272:	d12a      	bne.n	800f2ca <__swbuf_r+0x6e>
 800f274:	686c      	ldr	r4, [r5, #4]
 800f276:	69a3      	ldr	r3, [r4, #24]
 800f278:	60a3      	str	r3, [r4, #8]
 800f27a:	89a3      	ldrh	r3, [r4, #12]
 800f27c:	071a      	lsls	r2, r3, #28
 800f27e:	d52e      	bpl.n	800f2de <__swbuf_r+0x82>
 800f280:	6923      	ldr	r3, [r4, #16]
 800f282:	b363      	cbz	r3, 800f2de <__swbuf_r+0x82>
 800f284:	6923      	ldr	r3, [r4, #16]
 800f286:	6820      	ldr	r0, [r4, #0]
 800f288:	1ac0      	subs	r0, r0, r3
 800f28a:	6963      	ldr	r3, [r4, #20]
 800f28c:	b2f6      	uxtb	r6, r6
 800f28e:	4283      	cmp	r3, r0
 800f290:	4637      	mov	r7, r6
 800f292:	dc04      	bgt.n	800f29e <__swbuf_r+0x42>
 800f294:	4621      	mov	r1, r4
 800f296:	4628      	mov	r0, r5
 800f298:	f000 ff6c 	bl	8010174 <_fflush_r>
 800f29c:	bb28      	cbnz	r0, 800f2ea <__swbuf_r+0x8e>
 800f29e:	68a3      	ldr	r3, [r4, #8]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	60a3      	str	r3, [r4, #8]
 800f2a4:	6823      	ldr	r3, [r4, #0]
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	6022      	str	r2, [r4, #0]
 800f2aa:	701e      	strb	r6, [r3, #0]
 800f2ac:	6963      	ldr	r3, [r4, #20]
 800f2ae:	3001      	adds	r0, #1
 800f2b0:	4283      	cmp	r3, r0
 800f2b2:	d004      	beq.n	800f2be <__swbuf_r+0x62>
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	07db      	lsls	r3, r3, #31
 800f2b8:	d519      	bpl.n	800f2ee <__swbuf_r+0x92>
 800f2ba:	2e0a      	cmp	r6, #10
 800f2bc:	d117      	bne.n	800f2ee <__swbuf_r+0x92>
 800f2be:	4621      	mov	r1, r4
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	f000 ff57 	bl	8010174 <_fflush_r>
 800f2c6:	b190      	cbz	r0, 800f2ee <__swbuf_r+0x92>
 800f2c8:	e00f      	b.n	800f2ea <__swbuf_r+0x8e>
 800f2ca:	4b0b      	ldr	r3, [pc, #44]	; (800f2f8 <__swbuf_r+0x9c>)
 800f2cc:	429c      	cmp	r4, r3
 800f2ce:	d101      	bne.n	800f2d4 <__swbuf_r+0x78>
 800f2d0:	68ac      	ldr	r4, [r5, #8]
 800f2d2:	e7d0      	b.n	800f276 <__swbuf_r+0x1a>
 800f2d4:	4b09      	ldr	r3, [pc, #36]	; (800f2fc <__swbuf_r+0xa0>)
 800f2d6:	429c      	cmp	r4, r3
 800f2d8:	bf08      	it	eq
 800f2da:	68ec      	ldreq	r4, [r5, #12]
 800f2dc:	e7cb      	b.n	800f276 <__swbuf_r+0x1a>
 800f2de:	4621      	mov	r1, r4
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	f000 f80d 	bl	800f300 <__swsetup_r>
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d0cc      	beq.n	800f284 <__swbuf_r+0x28>
 800f2ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	080137c0 	.word	0x080137c0
 800f2f8:	080137e0 	.word	0x080137e0
 800f2fc:	080137a0 	.word	0x080137a0

0800f300 <__swsetup_r>:
 800f300:	4b32      	ldr	r3, [pc, #200]	; (800f3cc <__swsetup_r+0xcc>)
 800f302:	b570      	push	{r4, r5, r6, lr}
 800f304:	681d      	ldr	r5, [r3, #0]
 800f306:	4606      	mov	r6, r0
 800f308:	460c      	mov	r4, r1
 800f30a:	b125      	cbz	r5, 800f316 <__swsetup_r+0x16>
 800f30c:	69ab      	ldr	r3, [r5, #24]
 800f30e:	b913      	cbnz	r3, 800f316 <__swsetup_r+0x16>
 800f310:	4628      	mov	r0, r5
 800f312:	f000 ff99 	bl	8010248 <__sinit>
 800f316:	4b2e      	ldr	r3, [pc, #184]	; (800f3d0 <__swsetup_r+0xd0>)
 800f318:	429c      	cmp	r4, r3
 800f31a:	d10f      	bne.n	800f33c <__swsetup_r+0x3c>
 800f31c:	686c      	ldr	r4, [r5, #4]
 800f31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f322:	b29a      	uxth	r2, r3
 800f324:	0715      	lsls	r5, r2, #28
 800f326:	d42c      	bmi.n	800f382 <__swsetup_r+0x82>
 800f328:	06d0      	lsls	r0, r2, #27
 800f32a:	d411      	bmi.n	800f350 <__swsetup_r+0x50>
 800f32c:	2209      	movs	r2, #9
 800f32e:	6032      	str	r2, [r6, #0]
 800f330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f334:	81a3      	strh	r3, [r4, #12]
 800f336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f33a:	e03e      	b.n	800f3ba <__swsetup_r+0xba>
 800f33c:	4b25      	ldr	r3, [pc, #148]	; (800f3d4 <__swsetup_r+0xd4>)
 800f33e:	429c      	cmp	r4, r3
 800f340:	d101      	bne.n	800f346 <__swsetup_r+0x46>
 800f342:	68ac      	ldr	r4, [r5, #8]
 800f344:	e7eb      	b.n	800f31e <__swsetup_r+0x1e>
 800f346:	4b24      	ldr	r3, [pc, #144]	; (800f3d8 <__swsetup_r+0xd8>)
 800f348:	429c      	cmp	r4, r3
 800f34a:	bf08      	it	eq
 800f34c:	68ec      	ldreq	r4, [r5, #12]
 800f34e:	e7e6      	b.n	800f31e <__swsetup_r+0x1e>
 800f350:	0751      	lsls	r1, r2, #29
 800f352:	d512      	bpl.n	800f37a <__swsetup_r+0x7a>
 800f354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f356:	b141      	cbz	r1, 800f36a <__swsetup_r+0x6a>
 800f358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f35c:	4299      	cmp	r1, r3
 800f35e:	d002      	beq.n	800f366 <__swsetup_r+0x66>
 800f360:	4630      	mov	r0, r6
 800f362:	f001 fb69 	bl	8010a38 <_free_r>
 800f366:	2300      	movs	r3, #0
 800f368:	6363      	str	r3, [r4, #52]	; 0x34
 800f36a:	89a3      	ldrh	r3, [r4, #12]
 800f36c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f370:	81a3      	strh	r3, [r4, #12]
 800f372:	2300      	movs	r3, #0
 800f374:	6063      	str	r3, [r4, #4]
 800f376:	6923      	ldr	r3, [r4, #16]
 800f378:	6023      	str	r3, [r4, #0]
 800f37a:	89a3      	ldrh	r3, [r4, #12]
 800f37c:	f043 0308 	orr.w	r3, r3, #8
 800f380:	81a3      	strh	r3, [r4, #12]
 800f382:	6923      	ldr	r3, [r4, #16]
 800f384:	b94b      	cbnz	r3, 800f39a <__swsetup_r+0x9a>
 800f386:	89a3      	ldrh	r3, [r4, #12]
 800f388:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f38c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f390:	d003      	beq.n	800f39a <__swsetup_r+0x9a>
 800f392:	4621      	mov	r1, r4
 800f394:	4630      	mov	r0, r6
 800f396:	f001 f813 	bl	80103c0 <__smakebuf_r>
 800f39a:	89a2      	ldrh	r2, [r4, #12]
 800f39c:	f012 0301 	ands.w	r3, r2, #1
 800f3a0:	d00c      	beq.n	800f3bc <__swsetup_r+0xbc>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	60a3      	str	r3, [r4, #8]
 800f3a6:	6963      	ldr	r3, [r4, #20]
 800f3a8:	425b      	negs	r3, r3
 800f3aa:	61a3      	str	r3, [r4, #24]
 800f3ac:	6923      	ldr	r3, [r4, #16]
 800f3ae:	b953      	cbnz	r3, 800f3c6 <__swsetup_r+0xc6>
 800f3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f3b8:	d1ba      	bne.n	800f330 <__swsetup_r+0x30>
 800f3ba:	bd70      	pop	{r4, r5, r6, pc}
 800f3bc:	0792      	lsls	r2, r2, #30
 800f3be:	bf58      	it	pl
 800f3c0:	6963      	ldrpl	r3, [r4, #20]
 800f3c2:	60a3      	str	r3, [r4, #8]
 800f3c4:	e7f2      	b.n	800f3ac <__swsetup_r+0xac>
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	e7f7      	b.n	800f3ba <__swsetup_r+0xba>
 800f3ca:	bf00      	nop
 800f3cc:	20001cfc 	.word	0x20001cfc
 800f3d0:	080137c0 	.word	0x080137c0
 800f3d4:	080137e0 	.word	0x080137e0
 800f3d8:	080137a0 	.word	0x080137a0

0800f3dc <quorem>:
 800f3dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e0:	6903      	ldr	r3, [r0, #16]
 800f3e2:	690c      	ldr	r4, [r1, #16]
 800f3e4:	42a3      	cmp	r3, r4
 800f3e6:	4680      	mov	r8, r0
 800f3e8:	f2c0 8082 	blt.w	800f4f0 <quorem+0x114>
 800f3ec:	3c01      	subs	r4, #1
 800f3ee:	f101 0714 	add.w	r7, r1, #20
 800f3f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f3f6:	f100 0614 	add.w	r6, r0, #20
 800f3fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f3fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f402:	eb06 030c 	add.w	r3, r6, ip
 800f406:	3501      	adds	r5, #1
 800f408:	eb07 090c 	add.w	r9, r7, ip
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	fbb0 f5f5 	udiv	r5, r0, r5
 800f412:	b395      	cbz	r5, 800f47a <quorem+0x9e>
 800f414:	f04f 0a00 	mov.w	sl, #0
 800f418:	4638      	mov	r0, r7
 800f41a:	46b6      	mov	lr, r6
 800f41c:	46d3      	mov	fp, sl
 800f41e:	f850 2b04 	ldr.w	r2, [r0], #4
 800f422:	b293      	uxth	r3, r2
 800f424:	fb05 a303 	mla	r3, r5, r3, sl
 800f428:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	ebab 0303 	sub.w	r3, fp, r3
 800f432:	0c12      	lsrs	r2, r2, #16
 800f434:	f8de b000 	ldr.w	fp, [lr]
 800f438:	fb05 a202 	mla	r2, r5, r2, sl
 800f43c:	fa13 f38b 	uxtah	r3, r3, fp
 800f440:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f444:	fa1f fb82 	uxth.w	fp, r2
 800f448:	f8de 2000 	ldr.w	r2, [lr]
 800f44c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f454:	b29b      	uxth	r3, r3
 800f456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f45a:	4581      	cmp	r9, r0
 800f45c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f460:	f84e 3b04 	str.w	r3, [lr], #4
 800f464:	d2db      	bcs.n	800f41e <quorem+0x42>
 800f466:	f856 300c 	ldr.w	r3, [r6, ip]
 800f46a:	b933      	cbnz	r3, 800f47a <quorem+0x9e>
 800f46c:	9b01      	ldr	r3, [sp, #4]
 800f46e:	3b04      	subs	r3, #4
 800f470:	429e      	cmp	r6, r3
 800f472:	461a      	mov	r2, r3
 800f474:	d330      	bcc.n	800f4d8 <quorem+0xfc>
 800f476:	f8c8 4010 	str.w	r4, [r8, #16]
 800f47a:	4640      	mov	r0, r8
 800f47c:	f001 fa08 	bl	8010890 <__mcmp>
 800f480:	2800      	cmp	r0, #0
 800f482:	db25      	blt.n	800f4d0 <quorem+0xf4>
 800f484:	3501      	adds	r5, #1
 800f486:	4630      	mov	r0, r6
 800f488:	f04f 0c00 	mov.w	ip, #0
 800f48c:	f857 2b04 	ldr.w	r2, [r7], #4
 800f490:	f8d0 e000 	ldr.w	lr, [r0]
 800f494:	b293      	uxth	r3, r2
 800f496:	ebac 0303 	sub.w	r3, ip, r3
 800f49a:	0c12      	lsrs	r2, r2, #16
 800f49c:	fa13 f38e 	uxtah	r3, r3, lr
 800f4a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f4a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4ae:	45b9      	cmp	r9, r7
 800f4b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f4b4:	f840 3b04 	str.w	r3, [r0], #4
 800f4b8:	d2e8      	bcs.n	800f48c <quorem+0xb0>
 800f4ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f4be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f4c2:	b92a      	cbnz	r2, 800f4d0 <quorem+0xf4>
 800f4c4:	3b04      	subs	r3, #4
 800f4c6:	429e      	cmp	r6, r3
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	d30b      	bcc.n	800f4e4 <quorem+0x108>
 800f4cc:	f8c8 4010 	str.w	r4, [r8, #16]
 800f4d0:	4628      	mov	r0, r5
 800f4d2:	b003      	add	sp, #12
 800f4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d8:	6812      	ldr	r2, [r2, #0]
 800f4da:	3b04      	subs	r3, #4
 800f4dc:	2a00      	cmp	r2, #0
 800f4de:	d1ca      	bne.n	800f476 <quorem+0x9a>
 800f4e0:	3c01      	subs	r4, #1
 800f4e2:	e7c5      	b.n	800f470 <quorem+0x94>
 800f4e4:	6812      	ldr	r2, [r2, #0]
 800f4e6:	3b04      	subs	r3, #4
 800f4e8:	2a00      	cmp	r2, #0
 800f4ea:	d1ef      	bne.n	800f4cc <quorem+0xf0>
 800f4ec:	3c01      	subs	r4, #1
 800f4ee:	e7ea      	b.n	800f4c6 <quorem+0xea>
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	e7ee      	b.n	800f4d2 <quorem+0xf6>
 800f4f4:	0000      	movs	r0, r0
	...

0800f4f8 <_dtoa_r>:
 800f4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4fc:	ec57 6b10 	vmov	r6, r7, d0
 800f500:	b097      	sub	sp, #92	; 0x5c
 800f502:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f504:	9106      	str	r1, [sp, #24]
 800f506:	4604      	mov	r4, r0
 800f508:	920b      	str	r2, [sp, #44]	; 0x2c
 800f50a:	9312      	str	r3, [sp, #72]	; 0x48
 800f50c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f510:	e9cd 6700 	strd	r6, r7, [sp]
 800f514:	b93d      	cbnz	r5, 800f526 <_dtoa_r+0x2e>
 800f516:	2010      	movs	r0, #16
 800f518:	f000 ff92 	bl	8010440 <malloc>
 800f51c:	6260      	str	r0, [r4, #36]	; 0x24
 800f51e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f522:	6005      	str	r5, [r0, #0]
 800f524:	60c5      	str	r5, [r0, #12]
 800f526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f528:	6819      	ldr	r1, [r3, #0]
 800f52a:	b151      	cbz	r1, 800f542 <_dtoa_r+0x4a>
 800f52c:	685a      	ldr	r2, [r3, #4]
 800f52e:	604a      	str	r2, [r1, #4]
 800f530:	2301      	movs	r3, #1
 800f532:	4093      	lsls	r3, r2
 800f534:	608b      	str	r3, [r1, #8]
 800f536:	4620      	mov	r0, r4
 800f538:	f000 ffc9 	bl	80104ce <_Bfree>
 800f53c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f53e:	2200      	movs	r2, #0
 800f540:	601a      	str	r2, [r3, #0]
 800f542:	1e3b      	subs	r3, r7, #0
 800f544:	bfbb      	ittet	lt
 800f546:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f54a:	9301      	strlt	r3, [sp, #4]
 800f54c:	2300      	movge	r3, #0
 800f54e:	2201      	movlt	r2, #1
 800f550:	bfac      	ite	ge
 800f552:	f8c8 3000 	strge.w	r3, [r8]
 800f556:	f8c8 2000 	strlt.w	r2, [r8]
 800f55a:	4baf      	ldr	r3, [pc, #700]	; (800f818 <_dtoa_r+0x320>)
 800f55c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f560:	ea33 0308 	bics.w	r3, r3, r8
 800f564:	d114      	bne.n	800f590 <_dtoa_r+0x98>
 800f566:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f568:	f242 730f 	movw	r3, #9999	; 0x270f
 800f56c:	6013      	str	r3, [r2, #0]
 800f56e:	9b00      	ldr	r3, [sp, #0]
 800f570:	b923      	cbnz	r3, 800f57c <_dtoa_r+0x84>
 800f572:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f576:	2800      	cmp	r0, #0
 800f578:	f000 8542 	beq.w	8010000 <_dtoa_r+0xb08>
 800f57c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f57e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f82c <_dtoa_r+0x334>
 800f582:	2b00      	cmp	r3, #0
 800f584:	f000 8544 	beq.w	8010010 <_dtoa_r+0xb18>
 800f588:	f10b 0303 	add.w	r3, fp, #3
 800f58c:	f000 bd3e 	b.w	801000c <_dtoa_r+0xb14>
 800f590:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f594:	2200      	movs	r2, #0
 800f596:	2300      	movs	r3, #0
 800f598:	4630      	mov	r0, r6
 800f59a:	4639      	mov	r1, r7
 800f59c:	f7f1 fabc 	bl	8000b18 <__aeabi_dcmpeq>
 800f5a0:	4681      	mov	r9, r0
 800f5a2:	b168      	cbz	r0, 800f5c0 <_dtoa_r+0xc8>
 800f5a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	6013      	str	r3, [r2, #0]
 800f5aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f000 8524 	beq.w	800fffa <_dtoa_r+0xb02>
 800f5b2:	4b9a      	ldr	r3, [pc, #616]	; (800f81c <_dtoa_r+0x324>)
 800f5b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5b6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800f5ba:	6013      	str	r3, [r2, #0]
 800f5bc:	f000 bd28 	b.w	8010010 <_dtoa_r+0xb18>
 800f5c0:	aa14      	add	r2, sp, #80	; 0x50
 800f5c2:	a915      	add	r1, sp, #84	; 0x54
 800f5c4:	ec47 6b10 	vmov	d0, r6, r7
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f001 f9d8 	bl	801097e <__d2b>
 800f5ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f5d2:	9004      	str	r0, [sp, #16]
 800f5d4:	2d00      	cmp	r5, #0
 800f5d6:	d07c      	beq.n	800f6d2 <_dtoa_r+0x1da>
 800f5d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f5dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f5e0:	46b2      	mov	sl, r6
 800f5e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f5e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f5ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	4b8b      	ldr	r3, [pc, #556]	; (800f820 <_dtoa_r+0x328>)
 800f5f2:	4650      	mov	r0, sl
 800f5f4:	4659      	mov	r1, fp
 800f5f6:	f7f0 fe6f 	bl	80002d8 <__aeabi_dsub>
 800f5fa:	a381      	add	r3, pc, #516	; (adr r3, 800f800 <_dtoa_r+0x308>)
 800f5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f600:	f7f1 f822 	bl	8000648 <__aeabi_dmul>
 800f604:	a380      	add	r3, pc, #512	; (adr r3, 800f808 <_dtoa_r+0x310>)
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	f7f0 fe67 	bl	80002dc <__adddf3>
 800f60e:	4606      	mov	r6, r0
 800f610:	4628      	mov	r0, r5
 800f612:	460f      	mov	r7, r1
 800f614:	f7f0 ffae 	bl	8000574 <__aeabi_i2d>
 800f618:	a37d      	add	r3, pc, #500	; (adr r3, 800f810 <_dtoa_r+0x318>)
 800f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61e:	f7f1 f813 	bl	8000648 <__aeabi_dmul>
 800f622:	4602      	mov	r2, r0
 800f624:	460b      	mov	r3, r1
 800f626:	4630      	mov	r0, r6
 800f628:	4639      	mov	r1, r7
 800f62a:	f7f0 fe57 	bl	80002dc <__adddf3>
 800f62e:	4606      	mov	r6, r0
 800f630:	460f      	mov	r7, r1
 800f632:	f7f1 fab9 	bl	8000ba8 <__aeabi_d2iz>
 800f636:	2200      	movs	r2, #0
 800f638:	4682      	mov	sl, r0
 800f63a:	2300      	movs	r3, #0
 800f63c:	4630      	mov	r0, r6
 800f63e:	4639      	mov	r1, r7
 800f640:	f7f1 fa74 	bl	8000b2c <__aeabi_dcmplt>
 800f644:	b148      	cbz	r0, 800f65a <_dtoa_r+0x162>
 800f646:	4650      	mov	r0, sl
 800f648:	f7f0 ff94 	bl	8000574 <__aeabi_i2d>
 800f64c:	4632      	mov	r2, r6
 800f64e:	463b      	mov	r3, r7
 800f650:	f7f1 fa62 	bl	8000b18 <__aeabi_dcmpeq>
 800f654:	b908      	cbnz	r0, 800f65a <_dtoa_r+0x162>
 800f656:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f65a:	f1ba 0f16 	cmp.w	sl, #22
 800f65e:	d859      	bhi.n	800f714 <_dtoa_r+0x21c>
 800f660:	4970      	ldr	r1, [pc, #448]	; (800f824 <_dtoa_r+0x32c>)
 800f662:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f66a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f66e:	f7f1 fa7b 	bl	8000b68 <__aeabi_dcmpgt>
 800f672:	2800      	cmp	r0, #0
 800f674:	d050      	beq.n	800f718 <_dtoa_r+0x220>
 800f676:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f67a:	2300      	movs	r3, #0
 800f67c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f67e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f680:	1b5d      	subs	r5, r3, r5
 800f682:	f1b5 0801 	subs.w	r8, r5, #1
 800f686:	bf49      	itett	mi
 800f688:	f1c5 0301 	rsbmi	r3, r5, #1
 800f68c:	2300      	movpl	r3, #0
 800f68e:	9305      	strmi	r3, [sp, #20]
 800f690:	f04f 0800 	movmi.w	r8, #0
 800f694:	bf58      	it	pl
 800f696:	9305      	strpl	r3, [sp, #20]
 800f698:	f1ba 0f00 	cmp.w	sl, #0
 800f69c:	db3e      	blt.n	800f71c <_dtoa_r+0x224>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	44d0      	add	r8, sl
 800f6a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f6a6:	9307      	str	r3, [sp, #28]
 800f6a8:	9b06      	ldr	r3, [sp, #24]
 800f6aa:	2b09      	cmp	r3, #9
 800f6ac:	f200 8090 	bhi.w	800f7d0 <_dtoa_r+0x2d8>
 800f6b0:	2b05      	cmp	r3, #5
 800f6b2:	bfc4      	itt	gt
 800f6b4:	3b04      	subgt	r3, #4
 800f6b6:	9306      	strgt	r3, [sp, #24]
 800f6b8:	9b06      	ldr	r3, [sp, #24]
 800f6ba:	f1a3 0302 	sub.w	r3, r3, #2
 800f6be:	bfcc      	ite	gt
 800f6c0:	2500      	movgt	r5, #0
 800f6c2:	2501      	movle	r5, #1
 800f6c4:	2b03      	cmp	r3, #3
 800f6c6:	f200 808f 	bhi.w	800f7e8 <_dtoa_r+0x2f0>
 800f6ca:	e8df f003 	tbb	[pc, r3]
 800f6ce:	7f7d      	.short	0x7f7d
 800f6d0:	7131      	.short	0x7131
 800f6d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f6d6:	441d      	add	r5, r3
 800f6d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f6dc:	2820      	cmp	r0, #32
 800f6de:	dd13      	ble.n	800f708 <_dtoa_r+0x210>
 800f6e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f6e4:	9b00      	ldr	r3, [sp, #0]
 800f6e6:	fa08 f800 	lsl.w	r8, r8, r0
 800f6ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f6ee:	fa23 f000 	lsr.w	r0, r3, r0
 800f6f2:	ea48 0000 	orr.w	r0, r8, r0
 800f6f6:	f7f0 ff2d 	bl	8000554 <__aeabi_ui2d>
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	4682      	mov	sl, r0
 800f6fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f702:	3d01      	subs	r5, #1
 800f704:	9313      	str	r3, [sp, #76]	; 0x4c
 800f706:	e772      	b.n	800f5ee <_dtoa_r+0xf6>
 800f708:	9b00      	ldr	r3, [sp, #0]
 800f70a:	f1c0 0020 	rsb	r0, r0, #32
 800f70e:	fa03 f000 	lsl.w	r0, r3, r0
 800f712:	e7f0      	b.n	800f6f6 <_dtoa_r+0x1fe>
 800f714:	2301      	movs	r3, #1
 800f716:	e7b1      	b.n	800f67c <_dtoa_r+0x184>
 800f718:	900f      	str	r0, [sp, #60]	; 0x3c
 800f71a:	e7b0      	b.n	800f67e <_dtoa_r+0x186>
 800f71c:	9b05      	ldr	r3, [sp, #20]
 800f71e:	eba3 030a 	sub.w	r3, r3, sl
 800f722:	9305      	str	r3, [sp, #20]
 800f724:	f1ca 0300 	rsb	r3, sl, #0
 800f728:	9307      	str	r3, [sp, #28]
 800f72a:	2300      	movs	r3, #0
 800f72c:	930e      	str	r3, [sp, #56]	; 0x38
 800f72e:	e7bb      	b.n	800f6a8 <_dtoa_r+0x1b0>
 800f730:	2301      	movs	r3, #1
 800f732:	930a      	str	r3, [sp, #40]	; 0x28
 800f734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f736:	2b00      	cmp	r3, #0
 800f738:	dd59      	ble.n	800f7ee <_dtoa_r+0x2f6>
 800f73a:	9302      	str	r3, [sp, #8]
 800f73c:	4699      	mov	r9, r3
 800f73e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f740:	2200      	movs	r2, #0
 800f742:	6072      	str	r2, [r6, #4]
 800f744:	2204      	movs	r2, #4
 800f746:	f102 0014 	add.w	r0, r2, #20
 800f74a:	4298      	cmp	r0, r3
 800f74c:	6871      	ldr	r1, [r6, #4]
 800f74e:	d953      	bls.n	800f7f8 <_dtoa_r+0x300>
 800f750:	4620      	mov	r0, r4
 800f752:	f000 fe88 	bl	8010466 <_Balloc>
 800f756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f758:	6030      	str	r0, [r6, #0]
 800f75a:	f1b9 0f0e 	cmp.w	r9, #14
 800f75e:	f8d3 b000 	ldr.w	fp, [r3]
 800f762:	f200 80e6 	bhi.w	800f932 <_dtoa_r+0x43a>
 800f766:	2d00      	cmp	r5, #0
 800f768:	f000 80e3 	beq.w	800f932 <_dtoa_r+0x43a>
 800f76c:	ed9d 7b00 	vldr	d7, [sp]
 800f770:	f1ba 0f00 	cmp.w	sl, #0
 800f774:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f778:	dd74      	ble.n	800f864 <_dtoa_r+0x36c>
 800f77a:	4a2a      	ldr	r2, [pc, #168]	; (800f824 <_dtoa_r+0x32c>)
 800f77c:	f00a 030f 	and.w	r3, sl, #15
 800f780:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f784:	ed93 7b00 	vldr	d7, [r3]
 800f788:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f78c:	06f0      	lsls	r0, r6, #27
 800f78e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f792:	d565      	bpl.n	800f860 <_dtoa_r+0x368>
 800f794:	4b24      	ldr	r3, [pc, #144]	; (800f828 <_dtoa_r+0x330>)
 800f796:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f79a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f79e:	f7f1 f87d 	bl	800089c <__aeabi_ddiv>
 800f7a2:	e9cd 0100 	strd	r0, r1, [sp]
 800f7a6:	f006 060f 	and.w	r6, r6, #15
 800f7aa:	2503      	movs	r5, #3
 800f7ac:	4f1e      	ldr	r7, [pc, #120]	; (800f828 <_dtoa_r+0x330>)
 800f7ae:	e04c      	b.n	800f84a <_dtoa_r+0x352>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	930a      	str	r3, [sp, #40]	; 0x28
 800f7b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7b6:	4453      	add	r3, sl
 800f7b8:	f103 0901 	add.w	r9, r3, #1
 800f7bc:	9302      	str	r3, [sp, #8]
 800f7be:	464b      	mov	r3, r9
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	bfb8      	it	lt
 800f7c4:	2301      	movlt	r3, #1
 800f7c6:	e7ba      	b.n	800f73e <_dtoa_r+0x246>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	e7b2      	b.n	800f732 <_dtoa_r+0x23a>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e7f0      	b.n	800f7b2 <_dtoa_r+0x2ba>
 800f7d0:	2501      	movs	r5, #1
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	9306      	str	r3, [sp, #24]
 800f7d6:	950a      	str	r5, [sp, #40]	; 0x28
 800f7d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7dc:	9302      	str	r3, [sp, #8]
 800f7de:	4699      	mov	r9, r3
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	2312      	movs	r3, #18
 800f7e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800f7e6:	e7aa      	b.n	800f73e <_dtoa_r+0x246>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	930a      	str	r3, [sp, #40]	; 0x28
 800f7ec:	e7f4      	b.n	800f7d8 <_dtoa_r+0x2e0>
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	9302      	str	r3, [sp, #8]
 800f7f2:	4699      	mov	r9, r3
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	e7f5      	b.n	800f7e4 <_dtoa_r+0x2ec>
 800f7f8:	3101      	adds	r1, #1
 800f7fa:	6071      	str	r1, [r6, #4]
 800f7fc:	0052      	lsls	r2, r2, #1
 800f7fe:	e7a2      	b.n	800f746 <_dtoa_r+0x24e>
 800f800:	636f4361 	.word	0x636f4361
 800f804:	3fd287a7 	.word	0x3fd287a7
 800f808:	8b60c8b3 	.word	0x8b60c8b3
 800f80c:	3fc68a28 	.word	0x3fc68a28
 800f810:	509f79fb 	.word	0x509f79fb
 800f814:	3fd34413 	.word	0x3fd34413
 800f818:	7ff00000 	.word	0x7ff00000
 800f81c:	0801376d 	.word	0x0801376d
 800f820:	3ff80000 	.word	0x3ff80000
 800f824:	08013828 	.word	0x08013828
 800f828:	08013800 	.word	0x08013800
 800f82c:	08013799 	.word	0x08013799
 800f830:	07f1      	lsls	r1, r6, #31
 800f832:	d508      	bpl.n	800f846 <_dtoa_r+0x34e>
 800f834:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f83c:	f7f0 ff04 	bl	8000648 <__aeabi_dmul>
 800f840:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f844:	3501      	adds	r5, #1
 800f846:	1076      	asrs	r6, r6, #1
 800f848:	3708      	adds	r7, #8
 800f84a:	2e00      	cmp	r6, #0
 800f84c:	d1f0      	bne.n	800f830 <_dtoa_r+0x338>
 800f84e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f852:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f856:	f7f1 f821 	bl	800089c <__aeabi_ddiv>
 800f85a:	e9cd 0100 	strd	r0, r1, [sp]
 800f85e:	e01a      	b.n	800f896 <_dtoa_r+0x39e>
 800f860:	2502      	movs	r5, #2
 800f862:	e7a3      	b.n	800f7ac <_dtoa_r+0x2b4>
 800f864:	f000 80a0 	beq.w	800f9a8 <_dtoa_r+0x4b0>
 800f868:	f1ca 0600 	rsb	r6, sl, #0
 800f86c:	4b9f      	ldr	r3, [pc, #636]	; (800faec <_dtoa_r+0x5f4>)
 800f86e:	4fa0      	ldr	r7, [pc, #640]	; (800faf0 <_dtoa_r+0x5f8>)
 800f870:	f006 020f 	and.w	r2, r6, #15
 800f874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f880:	f7f0 fee2 	bl	8000648 <__aeabi_dmul>
 800f884:	e9cd 0100 	strd	r0, r1, [sp]
 800f888:	1136      	asrs	r6, r6, #4
 800f88a:	2300      	movs	r3, #0
 800f88c:	2502      	movs	r5, #2
 800f88e:	2e00      	cmp	r6, #0
 800f890:	d17f      	bne.n	800f992 <_dtoa_r+0x49a>
 800f892:	2b00      	cmp	r3, #0
 800f894:	d1e1      	bne.n	800f85a <_dtoa_r+0x362>
 800f896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f000 8087 	beq.w	800f9ac <_dtoa_r+0x4b4>
 800f89e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	4b93      	ldr	r3, [pc, #588]	; (800faf4 <_dtoa_r+0x5fc>)
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	4639      	mov	r1, r7
 800f8aa:	f7f1 f93f 	bl	8000b2c <__aeabi_dcmplt>
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	d07c      	beq.n	800f9ac <_dtoa_r+0x4b4>
 800f8b2:	f1b9 0f00 	cmp.w	r9, #0
 800f8b6:	d079      	beq.n	800f9ac <_dtoa_r+0x4b4>
 800f8b8:	9b02      	ldr	r3, [sp, #8]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	dd35      	ble.n	800f92a <_dtoa_r+0x432>
 800f8be:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f8c2:	9308      	str	r3, [sp, #32]
 800f8c4:	4639      	mov	r1, r7
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	4b8b      	ldr	r3, [pc, #556]	; (800faf8 <_dtoa_r+0x600>)
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f7f0 febc 	bl	8000648 <__aeabi_dmul>
 800f8d0:	e9cd 0100 	strd	r0, r1, [sp]
 800f8d4:	9f02      	ldr	r7, [sp, #8]
 800f8d6:	3501      	adds	r5, #1
 800f8d8:	4628      	mov	r0, r5
 800f8da:	f7f0 fe4b 	bl	8000574 <__aeabi_i2d>
 800f8de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8e2:	f7f0 feb1 	bl	8000648 <__aeabi_dmul>
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	4b84      	ldr	r3, [pc, #528]	; (800fafc <_dtoa_r+0x604>)
 800f8ea:	f7f0 fcf7 	bl	80002dc <__adddf3>
 800f8ee:	4605      	mov	r5, r0
 800f8f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f8f4:	2f00      	cmp	r7, #0
 800f8f6:	d15d      	bne.n	800f9b4 <_dtoa_r+0x4bc>
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	4b81      	ldr	r3, [pc, #516]	; (800fb00 <_dtoa_r+0x608>)
 800f8fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f900:	f7f0 fcea 	bl	80002d8 <__aeabi_dsub>
 800f904:	462a      	mov	r2, r5
 800f906:	4633      	mov	r3, r6
 800f908:	e9cd 0100 	strd	r0, r1, [sp]
 800f90c:	f7f1 f92c 	bl	8000b68 <__aeabi_dcmpgt>
 800f910:	2800      	cmp	r0, #0
 800f912:	f040 8288 	bne.w	800fe26 <_dtoa_r+0x92e>
 800f916:	462a      	mov	r2, r5
 800f918:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f91c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f920:	f7f1 f904 	bl	8000b2c <__aeabi_dcmplt>
 800f924:	2800      	cmp	r0, #0
 800f926:	f040 827c 	bne.w	800fe22 <_dtoa_r+0x92a>
 800f92a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f92e:	e9cd 2300 	strd	r2, r3, [sp]
 800f932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f934:	2b00      	cmp	r3, #0
 800f936:	f2c0 8150 	blt.w	800fbda <_dtoa_r+0x6e2>
 800f93a:	f1ba 0f0e 	cmp.w	sl, #14
 800f93e:	f300 814c 	bgt.w	800fbda <_dtoa_r+0x6e2>
 800f942:	4b6a      	ldr	r3, [pc, #424]	; (800faec <_dtoa_r+0x5f4>)
 800f944:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f948:	ed93 7b00 	vldr	d7, [r3]
 800f94c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f94e:	2b00      	cmp	r3, #0
 800f950:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f954:	f280 80d8 	bge.w	800fb08 <_dtoa_r+0x610>
 800f958:	f1b9 0f00 	cmp.w	r9, #0
 800f95c:	f300 80d4 	bgt.w	800fb08 <_dtoa_r+0x610>
 800f960:	f040 825e 	bne.w	800fe20 <_dtoa_r+0x928>
 800f964:	2200      	movs	r2, #0
 800f966:	4b66      	ldr	r3, [pc, #408]	; (800fb00 <_dtoa_r+0x608>)
 800f968:	ec51 0b17 	vmov	r0, r1, d7
 800f96c:	f7f0 fe6c 	bl	8000648 <__aeabi_dmul>
 800f970:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f974:	f7f1 f8ee 	bl	8000b54 <__aeabi_dcmpge>
 800f978:	464f      	mov	r7, r9
 800f97a:	464e      	mov	r6, r9
 800f97c:	2800      	cmp	r0, #0
 800f97e:	f040 8234 	bne.w	800fdea <_dtoa_r+0x8f2>
 800f982:	2331      	movs	r3, #49	; 0x31
 800f984:	f10b 0501 	add.w	r5, fp, #1
 800f988:	f88b 3000 	strb.w	r3, [fp]
 800f98c:	f10a 0a01 	add.w	sl, sl, #1
 800f990:	e22f      	b.n	800fdf2 <_dtoa_r+0x8fa>
 800f992:	07f2      	lsls	r2, r6, #31
 800f994:	d505      	bpl.n	800f9a2 <_dtoa_r+0x4aa>
 800f996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f99a:	f7f0 fe55 	bl	8000648 <__aeabi_dmul>
 800f99e:	3501      	adds	r5, #1
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	1076      	asrs	r6, r6, #1
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	e772      	b.n	800f88e <_dtoa_r+0x396>
 800f9a8:	2502      	movs	r5, #2
 800f9aa:	e774      	b.n	800f896 <_dtoa_r+0x39e>
 800f9ac:	f8cd a020 	str.w	sl, [sp, #32]
 800f9b0:	464f      	mov	r7, r9
 800f9b2:	e791      	b.n	800f8d8 <_dtoa_r+0x3e0>
 800f9b4:	4b4d      	ldr	r3, [pc, #308]	; (800faec <_dtoa_r+0x5f4>)
 800f9b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f9ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d047      	beq.n	800fa54 <_dtoa_r+0x55c>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	494e      	ldr	r1, [pc, #312]	; (800fb04 <_dtoa_r+0x60c>)
 800f9cc:	f7f0 ff66 	bl	800089c <__aeabi_ddiv>
 800f9d0:	462a      	mov	r2, r5
 800f9d2:	4633      	mov	r3, r6
 800f9d4:	f7f0 fc80 	bl	80002d8 <__aeabi_dsub>
 800f9d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f9dc:	465d      	mov	r5, fp
 800f9de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9e2:	f7f1 f8e1 	bl	8000ba8 <__aeabi_d2iz>
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	f7f0 fdc4 	bl	8000574 <__aeabi_i2d>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9f4:	f7f0 fc70 	bl	80002d8 <__aeabi_dsub>
 800f9f8:	3630      	adds	r6, #48	; 0x30
 800f9fa:	f805 6b01 	strb.w	r6, [r5], #1
 800f9fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fa02:	e9cd 0100 	strd	r0, r1, [sp]
 800fa06:	f7f1 f891 	bl	8000b2c <__aeabi_dcmplt>
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d163      	bne.n	800fad6 <_dtoa_r+0x5de>
 800fa0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa12:	2000      	movs	r0, #0
 800fa14:	4937      	ldr	r1, [pc, #220]	; (800faf4 <_dtoa_r+0x5fc>)
 800fa16:	f7f0 fc5f 	bl	80002d8 <__aeabi_dsub>
 800fa1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fa1e:	f7f1 f885 	bl	8000b2c <__aeabi_dcmplt>
 800fa22:	2800      	cmp	r0, #0
 800fa24:	f040 80b7 	bne.w	800fb96 <_dtoa_r+0x69e>
 800fa28:	eba5 030b 	sub.w	r3, r5, fp
 800fa2c:	429f      	cmp	r7, r3
 800fa2e:	f77f af7c 	ble.w	800f92a <_dtoa_r+0x432>
 800fa32:	2200      	movs	r2, #0
 800fa34:	4b30      	ldr	r3, [pc, #192]	; (800faf8 <_dtoa_r+0x600>)
 800fa36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa3a:	f7f0 fe05 	bl	8000648 <__aeabi_dmul>
 800fa3e:	2200      	movs	r2, #0
 800fa40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fa44:	4b2c      	ldr	r3, [pc, #176]	; (800faf8 <_dtoa_r+0x600>)
 800fa46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa4a:	f7f0 fdfd 	bl	8000648 <__aeabi_dmul>
 800fa4e:	e9cd 0100 	strd	r0, r1, [sp]
 800fa52:	e7c4      	b.n	800f9de <_dtoa_r+0x4e6>
 800fa54:	462a      	mov	r2, r5
 800fa56:	4633      	mov	r3, r6
 800fa58:	f7f0 fdf6 	bl	8000648 <__aeabi_dmul>
 800fa5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fa60:	eb0b 0507 	add.w	r5, fp, r7
 800fa64:	465e      	mov	r6, fp
 800fa66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa6a:	f7f1 f89d 	bl	8000ba8 <__aeabi_d2iz>
 800fa6e:	4607      	mov	r7, r0
 800fa70:	f7f0 fd80 	bl	8000574 <__aeabi_i2d>
 800fa74:	3730      	adds	r7, #48	; 0x30
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa7e:	f7f0 fc2b 	bl	80002d8 <__aeabi_dsub>
 800fa82:	f806 7b01 	strb.w	r7, [r6], #1
 800fa86:	42ae      	cmp	r6, r5
 800fa88:	e9cd 0100 	strd	r0, r1, [sp]
 800fa8c:	f04f 0200 	mov.w	r2, #0
 800fa90:	d126      	bne.n	800fae0 <_dtoa_r+0x5e8>
 800fa92:	4b1c      	ldr	r3, [pc, #112]	; (800fb04 <_dtoa_r+0x60c>)
 800fa94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa98:	f7f0 fc20 	bl	80002dc <__adddf3>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	460b      	mov	r3, r1
 800faa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800faa4:	f7f1 f860 	bl	8000b68 <__aeabi_dcmpgt>
 800faa8:	2800      	cmp	r0, #0
 800faaa:	d174      	bne.n	800fb96 <_dtoa_r+0x69e>
 800faac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fab0:	2000      	movs	r0, #0
 800fab2:	4914      	ldr	r1, [pc, #80]	; (800fb04 <_dtoa_r+0x60c>)
 800fab4:	f7f0 fc10 	bl	80002d8 <__aeabi_dsub>
 800fab8:	4602      	mov	r2, r0
 800faba:	460b      	mov	r3, r1
 800fabc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fac0:	f7f1 f834 	bl	8000b2c <__aeabi_dcmplt>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	f43f af30 	beq.w	800f92a <_dtoa_r+0x432>
 800faca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800face:	2b30      	cmp	r3, #48	; 0x30
 800fad0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fad4:	d002      	beq.n	800fadc <_dtoa_r+0x5e4>
 800fad6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fada:	e04a      	b.n	800fb72 <_dtoa_r+0x67a>
 800fadc:	4615      	mov	r5, r2
 800fade:	e7f4      	b.n	800faca <_dtoa_r+0x5d2>
 800fae0:	4b05      	ldr	r3, [pc, #20]	; (800faf8 <_dtoa_r+0x600>)
 800fae2:	f7f0 fdb1 	bl	8000648 <__aeabi_dmul>
 800fae6:	e9cd 0100 	strd	r0, r1, [sp]
 800faea:	e7bc      	b.n	800fa66 <_dtoa_r+0x56e>
 800faec:	08013828 	.word	0x08013828
 800faf0:	08013800 	.word	0x08013800
 800faf4:	3ff00000 	.word	0x3ff00000
 800faf8:	40240000 	.word	0x40240000
 800fafc:	401c0000 	.word	0x401c0000
 800fb00:	40140000 	.word	0x40140000
 800fb04:	3fe00000 	.word	0x3fe00000
 800fb08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fb0c:	465d      	mov	r5, fp
 800fb0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb12:	4630      	mov	r0, r6
 800fb14:	4639      	mov	r1, r7
 800fb16:	f7f0 fec1 	bl	800089c <__aeabi_ddiv>
 800fb1a:	f7f1 f845 	bl	8000ba8 <__aeabi_d2iz>
 800fb1e:	4680      	mov	r8, r0
 800fb20:	f7f0 fd28 	bl	8000574 <__aeabi_i2d>
 800fb24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb28:	f7f0 fd8e 	bl	8000648 <__aeabi_dmul>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	4630      	mov	r0, r6
 800fb32:	4639      	mov	r1, r7
 800fb34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fb38:	f7f0 fbce 	bl	80002d8 <__aeabi_dsub>
 800fb3c:	f805 6b01 	strb.w	r6, [r5], #1
 800fb40:	eba5 060b 	sub.w	r6, r5, fp
 800fb44:	45b1      	cmp	r9, r6
 800fb46:	4602      	mov	r2, r0
 800fb48:	460b      	mov	r3, r1
 800fb4a:	d139      	bne.n	800fbc0 <_dtoa_r+0x6c8>
 800fb4c:	f7f0 fbc6 	bl	80002dc <__adddf3>
 800fb50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb54:	4606      	mov	r6, r0
 800fb56:	460f      	mov	r7, r1
 800fb58:	f7f1 f806 	bl	8000b68 <__aeabi_dcmpgt>
 800fb5c:	b9c8      	cbnz	r0, 800fb92 <_dtoa_r+0x69a>
 800fb5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb62:	4630      	mov	r0, r6
 800fb64:	4639      	mov	r1, r7
 800fb66:	f7f0 ffd7 	bl	8000b18 <__aeabi_dcmpeq>
 800fb6a:	b110      	cbz	r0, 800fb72 <_dtoa_r+0x67a>
 800fb6c:	f018 0f01 	tst.w	r8, #1
 800fb70:	d10f      	bne.n	800fb92 <_dtoa_r+0x69a>
 800fb72:	9904      	ldr	r1, [sp, #16]
 800fb74:	4620      	mov	r0, r4
 800fb76:	f000 fcaa 	bl	80104ce <_Bfree>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb7e:	702b      	strb	r3, [r5, #0]
 800fb80:	f10a 0301 	add.w	r3, sl, #1
 800fb84:	6013      	str	r3, [r2, #0]
 800fb86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f000 8241 	beq.w	8010010 <_dtoa_r+0xb18>
 800fb8e:	601d      	str	r5, [r3, #0]
 800fb90:	e23e      	b.n	8010010 <_dtoa_r+0xb18>
 800fb92:	f8cd a020 	str.w	sl, [sp, #32]
 800fb96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb9a:	2a39      	cmp	r2, #57	; 0x39
 800fb9c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800fba0:	d108      	bne.n	800fbb4 <_dtoa_r+0x6bc>
 800fba2:	459b      	cmp	fp, r3
 800fba4:	d10a      	bne.n	800fbbc <_dtoa_r+0x6c4>
 800fba6:	9b08      	ldr	r3, [sp, #32]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	9308      	str	r3, [sp, #32]
 800fbac:	2330      	movs	r3, #48	; 0x30
 800fbae:	f88b 3000 	strb.w	r3, [fp]
 800fbb2:	465b      	mov	r3, fp
 800fbb4:	781a      	ldrb	r2, [r3, #0]
 800fbb6:	3201      	adds	r2, #1
 800fbb8:	701a      	strb	r2, [r3, #0]
 800fbba:	e78c      	b.n	800fad6 <_dtoa_r+0x5de>
 800fbbc:	461d      	mov	r5, r3
 800fbbe:	e7ea      	b.n	800fb96 <_dtoa_r+0x69e>
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	4b9b      	ldr	r3, [pc, #620]	; (800fe30 <_dtoa_r+0x938>)
 800fbc4:	f7f0 fd40 	bl	8000648 <__aeabi_dmul>
 800fbc8:	2200      	movs	r2, #0
 800fbca:	2300      	movs	r3, #0
 800fbcc:	4606      	mov	r6, r0
 800fbce:	460f      	mov	r7, r1
 800fbd0:	f7f0 ffa2 	bl	8000b18 <__aeabi_dcmpeq>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d09a      	beq.n	800fb0e <_dtoa_r+0x616>
 800fbd8:	e7cb      	b.n	800fb72 <_dtoa_r+0x67a>
 800fbda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbdc:	2a00      	cmp	r2, #0
 800fbde:	f000 808b 	beq.w	800fcf8 <_dtoa_r+0x800>
 800fbe2:	9a06      	ldr	r2, [sp, #24]
 800fbe4:	2a01      	cmp	r2, #1
 800fbe6:	dc6e      	bgt.n	800fcc6 <_dtoa_r+0x7ce>
 800fbe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fbea:	2a00      	cmp	r2, #0
 800fbec:	d067      	beq.n	800fcbe <_dtoa_r+0x7c6>
 800fbee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fbf2:	9f07      	ldr	r7, [sp, #28]
 800fbf4:	9d05      	ldr	r5, [sp, #20]
 800fbf6:	9a05      	ldr	r2, [sp, #20]
 800fbf8:	2101      	movs	r1, #1
 800fbfa:	441a      	add	r2, r3
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	9205      	str	r2, [sp, #20]
 800fc00:	4498      	add	r8, r3
 800fc02:	f000 fd04 	bl	801060e <__i2b>
 800fc06:	4606      	mov	r6, r0
 800fc08:	2d00      	cmp	r5, #0
 800fc0a:	dd0c      	ble.n	800fc26 <_dtoa_r+0x72e>
 800fc0c:	f1b8 0f00 	cmp.w	r8, #0
 800fc10:	dd09      	ble.n	800fc26 <_dtoa_r+0x72e>
 800fc12:	4545      	cmp	r5, r8
 800fc14:	9a05      	ldr	r2, [sp, #20]
 800fc16:	462b      	mov	r3, r5
 800fc18:	bfa8      	it	ge
 800fc1a:	4643      	movge	r3, r8
 800fc1c:	1ad2      	subs	r2, r2, r3
 800fc1e:	9205      	str	r2, [sp, #20]
 800fc20:	1aed      	subs	r5, r5, r3
 800fc22:	eba8 0803 	sub.w	r8, r8, r3
 800fc26:	9b07      	ldr	r3, [sp, #28]
 800fc28:	b1eb      	cbz	r3, 800fc66 <_dtoa_r+0x76e>
 800fc2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d067      	beq.n	800fd00 <_dtoa_r+0x808>
 800fc30:	b18f      	cbz	r7, 800fc56 <_dtoa_r+0x75e>
 800fc32:	4631      	mov	r1, r6
 800fc34:	463a      	mov	r2, r7
 800fc36:	4620      	mov	r0, r4
 800fc38:	f000 fd88 	bl	801074c <__pow5mult>
 800fc3c:	9a04      	ldr	r2, [sp, #16]
 800fc3e:	4601      	mov	r1, r0
 800fc40:	4606      	mov	r6, r0
 800fc42:	4620      	mov	r0, r4
 800fc44:	f000 fcec 	bl	8010620 <__multiply>
 800fc48:	9904      	ldr	r1, [sp, #16]
 800fc4a:	9008      	str	r0, [sp, #32]
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f000 fc3e 	bl	80104ce <_Bfree>
 800fc52:	9b08      	ldr	r3, [sp, #32]
 800fc54:	9304      	str	r3, [sp, #16]
 800fc56:	9b07      	ldr	r3, [sp, #28]
 800fc58:	1bda      	subs	r2, r3, r7
 800fc5a:	d004      	beq.n	800fc66 <_dtoa_r+0x76e>
 800fc5c:	9904      	ldr	r1, [sp, #16]
 800fc5e:	4620      	mov	r0, r4
 800fc60:	f000 fd74 	bl	801074c <__pow5mult>
 800fc64:	9004      	str	r0, [sp, #16]
 800fc66:	2101      	movs	r1, #1
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f000 fcd0 	bl	801060e <__i2b>
 800fc6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc70:	4607      	mov	r7, r0
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	f000 81d0 	beq.w	8010018 <_dtoa_r+0xb20>
 800fc78:	461a      	mov	r2, r3
 800fc7a:	4601      	mov	r1, r0
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f000 fd65 	bl	801074c <__pow5mult>
 800fc82:	9b06      	ldr	r3, [sp, #24]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	4607      	mov	r7, r0
 800fc88:	dc40      	bgt.n	800fd0c <_dtoa_r+0x814>
 800fc8a:	9b00      	ldr	r3, [sp, #0]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d139      	bne.n	800fd04 <_dtoa_r+0x80c>
 800fc90:	9b01      	ldr	r3, [sp, #4]
 800fc92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d136      	bne.n	800fd08 <_dtoa_r+0x810>
 800fc9a:	9b01      	ldr	r3, [sp, #4]
 800fc9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fca0:	0d1b      	lsrs	r3, r3, #20
 800fca2:	051b      	lsls	r3, r3, #20
 800fca4:	b12b      	cbz	r3, 800fcb2 <_dtoa_r+0x7ba>
 800fca6:	9b05      	ldr	r3, [sp, #20]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	9305      	str	r3, [sp, #20]
 800fcac:	f108 0801 	add.w	r8, r8, #1
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	9307      	str	r3, [sp, #28]
 800fcb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d12a      	bne.n	800fd10 <_dtoa_r+0x818>
 800fcba:	2001      	movs	r0, #1
 800fcbc:	e030      	b.n	800fd20 <_dtoa_r+0x828>
 800fcbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fcc0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fcc4:	e795      	b.n	800fbf2 <_dtoa_r+0x6fa>
 800fcc6:	9b07      	ldr	r3, [sp, #28]
 800fcc8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800fccc:	42bb      	cmp	r3, r7
 800fcce:	bfbf      	itttt	lt
 800fcd0:	9b07      	ldrlt	r3, [sp, #28]
 800fcd2:	9707      	strlt	r7, [sp, #28]
 800fcd4:	1afa      	sublt	r2, r7, r3
 800fcd6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fcd8:	bfbb      	ittet	lt
 800fcda:	189b      	addlt	r3, r3, r2
 800fcdc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fcde:	1bdf      	subge	r7, r3, r7
 800fce0:	2700      	movlt	r7, #0
 800fce2:	f1b9 0f00 	cmp.w	r9, #0
 800fce6:	bfb5      	itete	lt
 800fce8:	9b05      	ldrlt	r3, [sp, #20]
 800fcea:	9d05      	ldrge	r5, [sp, #20]
 800fcec:	eba3 0509 	sublt.w	r5, r3, r9
 800fcf0:	464b      	movge	r3, r9
 800fcf2:	bfb8      	it	lt
 800fcf4:	2300      	movlt	r3, #0
 800fcf6:	e77e      	b.n	800fbf6 <_dtoa_r+0x6fe>
 800fcf8:	9f07      	ldr	r7, [sp, #28]
 800fcfa:	9d05      	ldr	r5, [sp, #20]
 800fcfc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fcfe:	e783      	b.n	800fc08 <_dtoa_r+0x710>
 800fd00:	9a07      	ldr	r2, [sp, #28]
 800fd02:	e7ab      	b.n	800fc5c <_dtoa_r+0x764>
 800fd04:	2300      	movs	r3, #0
 800fd06:	e7d4      	b.n	800fcb2 <_dtoa_r+0x7ba>
 800fd08:	9b00      	ldr	r3, [sp, #0]
 800fd0a:	e7d2      	b.n	800fcb2 <_dtoa_r+0x7ba>
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	9307      	str	r3, [sp, #28]
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fd16:	6918      	ldr	r0, [r3, #16]
 800fd18:	f000 fc2b 	bl	8010572 <__hi0bits>
 800fd1c:	f1c0 0020 	rsb	r0, r0, #32
 800fd20:	4440      	add	r0, r8
 800fd22:	f010 001f 	ands.w	r0, r0, #31
 800fd26:	d047      	beq.n	800fdb8 <_dtoa_r+0x8c0>
 800fd28:	f1c0 0320 	rsb	r3, r0, #32
 800fd2c:	2b04      	cmp	r3, #4
 800fd2e:	dd3b      	ble.n	800fda8 <_dtoa_r+0x8b0>
 800fd30:	9b05      	ldr	r3, [sp, #20]
 800fd32:	f1c0 001c 	rsb	r0, r0, #28
 800fd36:	4403      	add	r3, r0
 800fd38:	9305      	str	r3, [sp, #20]
 800fd3a:	4405      	add	r5, r0
 800fd3c:	4480      	add	r8, r0
 800fd3e:	9b05      	ldr	r3, [sp, #20]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	dd05      	ble.n	800fd50 <_dtoa_r+0x858>
 800fd44:	461a      	mov	r2, r3
 800fd46:	9904      	ldr	r1, [sp, #16]
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f000 fd4d 	bl	80107e8 <__lshift>
 800fd4e:	9004      	str	r0, [sp, #16]
 800fd50:	f1b8 0f00 	cmp.w	r8, #0
 800fd54:	dd05      	ble.n	800fd62 <_dtoa_r+0x86a>
 800fd56:	4639      	mov	r1, r7
 800fd58:	4642      	mov	r2, r8
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	f000 fd44 	bl	80107e8 <__lshift>
 800fd60:	4607      	mov	r7, r0
 800fd62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd64:	b353      	cbz	r3, 800fdbc <_dtoa_r+0x8c4>
 800fd66:	4639      	mov	r1, r7
 800fd68:	9804      	ldr	r0, [sp, #16]
 800fd6a:	f000 fd91 	bl	8010890 <__mcmp>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	da24      	bge.n	800fdbc <_dtoa_r+0x8c4>
 800fd72:	2300      	movs	r3, #0
 800fd74:	220a      	movs	r2, #10
 800fd76:	9904      	ldr	r1, [sp, #16]
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f000 fbbf 	bl	80104fc <__multadd>
 800fd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd80:	9004      	str	r0, [sp, #16]
 800fd82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f000 814d 	beq.w	8010026 <_dtoa_r+0xb2e>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	4631      	mov	r1, r6
 800fd90:	220a      	movs	r2, #10
 800fd92:	4620      	mov	r0, r4
 800fd94:	f000 fbb2 	bl	80104fc <__multadd>
 800fd98:	9b02      	ldr	r3, [sp, #8]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	4606      	mov	r6, r0
 800fd9e:	dc4f      	bgt.n	800fe40 <_dtoa_r+0x948>
 800fda0:	9b06      	ldr	r3, [sp, #24]
 800fda2:	2b02      	cmp	r3, #2
 800fda4:	dd4c      	ble.n	800fe40 <_dtoa_r+0x948>
 800fda6:	e011      	b.n	800fdcc <_dtoa_r+0x8d4>
 800fda8:	d0c9      	beq.n	800fd3e <_dtoa_r+0x846>
 800fdaa:	9a05      	ldr	r2, [sp, #20]
 800fdac:	331c      	adds	r3, #28
 800fdae:	441a      	add	r2, r3
 800fdb0:	9205      	str	r2, [sp, #20]
 800fdb2:	441d      	add	r5, r3
 800fdb4:	4498      	add	r8, r3
 800fdb6:	e7c2      	b.n	800fd3e <_dtoa_r+0x846>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	e7f6      	b.n	800fdaa <_dtoa_r+0x8b2>
 800fdbc:	f1b9 0f00 	cmp.w	r9, #0
 800fdc0:	dc38      	bgt.n	800fe34 <_dtoa_r+0x93c>
 800fdc2:	9b06      	ldr	r3, [sp, #24]
 800fdc4:	2b02      	cmp	r3, #2
 800fdc6:	dd35      	ble.n	800fe34 <_dtoa_r+0x93c>
 800fdc8:	f8cd 9008 	str.w	r9, [sp, #8]
 800fdcc:	9b02      	ldr	r3, [sp, #8]
 800fdce:	b963      	cbnz	r3, 800fdea <_dtoa_r+0x8f2>
 800fdd0:	4639      	mov	r1, r7
 800fdd2:	2205      	movs	r2, #5
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f000 fb91 	bl	80104fc <__multadd>
 800fdda:	4601      	mov	r1, r0
 800fddc:	4607      	mov	r7, r0
 800fdde:	9804      	ldr	r0, [sp, #16]
 800fde0:	f000 fd56 	bl	8010890 <__mcmp>
 800fde4:	2800      	cmp	r0, #0
 800fde6:	f73f adcc 	bgt.w	800f982 <_dtoa_r+0x48a>
 800fdea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdec:	465d      	mov	r5, fp
 800fdee:	ea6f 0a03 	mvn.w	sl, r3
 800fdf2:	f04f 0900 	mov.w	r9, #0
 800fdf6:	4639      	mov	r1, r7
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f000 fb68 	bl	80104ce <_Bfree>
 800fdfe:	2e00      	cmp	r6, #0
 800fe00:	f43f aeb7 	beq.w	800fb72 <_dtoa_r+0x67a>
 800fe04:	f1b9 0f00 	cmp.w	r9, #0
 800fe08:	d005      	beq.n	800fe16 <_dtoa_r+0x91e>
 800fe0a:	45b1      	cmp	r9, r6
 800fe0c:	d003      	beq.n	800fe16 <_dtoa_r+0x91e>
 800fe0e:	4649      	mov	r1, r9
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 fb5c 	bl	80104ce <_Bfree>
 800fe16:	4631      	mov	r1, r6
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f000 fb58 	bl	80104ce <_Bfree>
 800fe1e:	e6a8      	b.n	800fb72 <_dtoa_r+0x67a>
 800fe20:	2700      	movs	r7, #0
 800fe22:	463e      	mov	r6, r7
 800fe24:	e7e1      	b.n	800fdea <_dtoa_r+0x8f2>
 800fe26:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fe2a:	463e      	mov	r6, r7
 800fe2c:	e5a9      	b.n	800f982 <_dtoa_r+0x48a>
 800fe2e:	bf00      	nop
 800fe30:	40240000 	.word	0x40240000
 800fe34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe36:	f8cd 9008 	str.w	r9, [sp, #8]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	f000 80fa 	beq.w	8010034 <_dtoa_r+0xb3c>
 800fe40:	2d00      	cmp	r5, #0
 800fe42:	dd05      	ble.n	800fe50 <_dtoa_r+0x958>
 800fe44:	4631      	mov	r1, r6
 800fe46:	462a      	mov	r2, r5
 800fe48:	4620      	mov	r0, r4
 800fe4a:	f000 fccd 	bl	80107e8 <__lshift>
 800fe4e:	4606      	mov	r6, r0
 800fe50:	9b07      	ldr	r3, [sp, #28]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d04c      	beq.n	800fef0 <_dtoa_r+0x9f8>
 800fe56:	6871      	ldr	r1, [r6, #4]
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f000 fb04 	bl	8010466 <_Balloc>
 800fe5e:	6932      	ldr	r2, [r6, #16]
 800fe60:	3202      	adds	r2, #2
 800fe62:	4605      	mov	r5, r0
 800fe64:	0092      	lsls	r2, r2, #2
 800fe66:	f106 010c 	add.w	r1, r6, #12
 800fe6a:	300c      	adds	r0, #12
 800fe6c:	f000 faf0 	bl	8010450 <memcpy>
 800fe70:	2201      	movs	r2, #1
 800fe72:	4629      	mov	r1, r5
 800fe74:	4620      	mov	r0, r4
 800fe76:	f000 fcb7 	bl	80107e8 <__lshift>
 800fe7a:	9b00      	ldr	r3, [sp, #0]
 800fe7c:	f8cd b014 	str.w	fp, [sp, #20]
 800fe80:	f003 0301 	and.w	r3, r3, #1
 800fe84:	46b1      	mov	r9, r6
 800fe86:	9307      	str	r3, [sp, #28]
 800fe88:	4606      	mov	r6, r0
 800fe8a:	4639      	mov	r1, r7
 800fe8c:	9804      	ldr	r0, [sp, #16]
 800fe8e:	f7ff faa5 	bl	800f3dc <quorem>
 800fe92:	4649      	mov	r1, r9
 800fe94:	4605      	mov	r5, r0
 800fe96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fe9a:	9804      	ldr	r0, [sp, #16]
 800fe9c:	f000 fcf8 	bl	8010890 <__mcmp>
 800fea0:	4632      	mov	r2, r6
 800fea2:	9000      	str	r0, [sp, #0]
 800fea4:	4639      	mov	r1, r7
 800fea6:	4620      	mov	r0, r4
 800fea8:	f000 fd0c 	bl	80108c4 <__mdiff>
 800feac:	68c3      	ldr	r3, [r0, #12]
 800feae:	4602      	mov	r2, r0
 800feb0:	bb03      	cbnz	r3, 800fef4 <_dtoa_r+0x9fc>
 800feb2:	4601      	mov	r1, r0
 800feb4:	9008      	str	r0, [sp, #32]
 800feb6:	9804      	ldr	r0, [sp, #16]
 800feb8:	f000 fcea 	bl	8010890 <__mcmp>
 800febc:	9a08      	ldr	r2, [sp, #32]
 800febe:	4603      	mov	r3, r0
 800fec0:	4611      	mov	r1, r2
 800fec2:	4620      	mov	r0, r4
 800fec4:	9308      	str	r3, [sp, #32]
 800fec6:	f000 fb02 	bl	80104ce <_Bfree>
 800feca:	9b08      	ldr	r3, [sp, #32]
 800fecc:	b9a3      	cbnz	r3, 800fef8 <_dtoa_r+0xa00>
 800fece:	9a06      	ldr	r2, [sp, #24]
 800fed0:	b992      	cbnz	r2, 800fef8 <_dtoa_r+0xa00>
 800fed2:	9a07      	ldr	r2, [sp, #28]
 800fed4:	b982      	cbnz	r2, 800fef8 <_dtoa_r+0xa00>
 800fed6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800feda:	d029      	beq.n	800ff30 <_dtoa_r+0xa38>
 800fedc:	9b00      	ldr	r3, [sp, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	dd01      	ble.n	800fee6 <_dtoa_r+0x9ee>
 800fee2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fee6:	9b05      	ldr	r3, [sp, #20]
 800fee8:	1c5d      	adds	r5, r3, #1
 800feea:	f883 8000 	strb.w	r8, [r3]
 800feee:	e782      	b.n	800fdf6 <_dtoa_r+0x8fe>
 800fef0:	4630      	mov	r0, r6
 800fef2:	e7c2      	b.n	800fe7a <_dtoa_r+0x982>
 800fef4:	2301      	movs	r3, #1
 800fef6:	e7e3      	b.n	800fec0 <_dtoa_r+0x9c8>
 800fef8:	9a00      	ldr	r2, [sp, #0]
 800fefa:	2a00      	cmp	r2, #0
 800fefc:	db04      	blt.n	800ff08 <_dtoa_r+0xa10>
 800fefe:	d125      	bne.n	800ff4c <_dtoa_r+0xa54>
 800ff00:	9a06      	ldr	r2, [sp, #24]
 800ff02:	bb1a      	cbnz	r2, 800ff4c <_dtoa_r+0xa54>
 800ff04:	9a07      	ldr	r2, [sp, #28]
 800ff06:	bb0a      	cbnz	r2, 800ff4c <_dtoa_r+0xa54>
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	ddec      	ble.n	800fee6 <_dtoa_r+0x9ee>
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	9904      	ldr	r1, [sp, #16]
 800ff10:	4620      	mov	r0, r4
 800ff12:	f000 fc69 	bl	80107e8 <__lshift>
 800ff16:	4639      	mov	r1, r7
 800ff18:	9004      	str	r0, [sp, #16]
 800ff1a:	f000 fcb9 	bl	8010890 <__mcmp>
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	dc03      	bgt.n	800ff2a <_dtoa_r+0xa32>
 800ff22:	d1e0      	bne.n	800fee6 <_dtoa_r+0x9ee>
 800ff24:	f018 0f01 	tst.w	r8, #1
 800ff28:	d0dd      	beq.n	800fee6 <_dtoa_r+0x9ee>
 800ff2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff2e:	d1d8      	bne.n	800fee2 <_dtoa_r+0x9ea>
 800ff30:	9b05      	ldr	r3, [sp, #20]
 800ff32:	9a05      	ldr	r2, [sp, #20]
 800ff34:	1c5d      	adds	r5, r3, #1
 800ff36:	2339      	movs	r3, #57	; 0x39
 800ff38:	7013      	strb	r3, [r2, #0]
 800ff3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff3e:	2b39      	cmp	r3, #57	; 0x39
 800ff40:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ff44:	d04f      	beq.n	800ffe6 <_dtoa_r+0xaee>
 800ff46:	3301      	adds	r3, #1
 800ff48:	7013      	strb	r3, [r2, #0]
 800ff4a:	e754      	b.n	800fdf6 <_dtoa_r+0x8fe>
 800ff4c:	9a05      	ldr	r2, [sp, #20]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	f102 0501 	add.w	r5, r2, #1
 800ff54:	dd06      	ble.n	800ff64 <_dtoa_r+0xa6c>
 800ff56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff5a:	d0e9      	beq.n	800ff30 <_dtoa_r+0xa38>
 800ff5c:	f108 0801 	add.w	r8, r8, #1
 800ff60:	9b05      	ldr	r3, [sp, #20]
 800ff62:	e7c2      	b.n	800feea <_dtoa_r+0x9f2>
 800ff64:	9a02      	ldr	r2, [sp, #8]
 800ff66:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ff6a:	eba5 030b 	sub.w	r3, r5, fp
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d021      	beq.n	800ffb6 <_dtoa_r+0xabe>
 800ff72:	2300      	movs	r3, #0
 800ff74:	220a      	movs	r2, #10
 800ff76:	9904      	ldr	r1, [sp, #16]
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f000 fabf 	bl	80104fc <__multadd>
 800ff7e:	45b1      	cmp	r9, r6
 800ff80:	9004      	str	r0, [sp, #16]
 800ff82:	f04f 0300 	mov.w	r3, #0
 800ff86:	f04f 020a 	mov.w	r2, #10
 800ff8a:	4649      	mov	r1, r9
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	d105      	bne.n	800ff9c <_dtoa_r+0xaa4>
 800ff90:	f000 fab4 	bl	80104fc <__multadd>
 800ff94:	4681      	mov	r9, r0
 800ff96:	4606      	mov	r6, r0
 800ff98:	9505      	str	r5, [sp, #20]
 800ff9a:	e776      	b.n	800fe8a <_dtoa_r+0x992>
 800ff9c:	f000 faae 	bl	80104fc <__multadd>
 800ffa0:	4631      	mov	r1, r6
 800ffa2:	4681      	mov	r9, r0
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	220a      	movs	r2, #10
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f000 faa7 	bl	80104fc <__multadd>
 800ffae:	4606      	mov	r6, r0
 800ffb0:	e7f2      	b.n	800ff98 <_dtoa_r+0xaa0>
 800ffb2:	f04f 0900 	mov.w	r9, #0
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	9904      	ldr	r1, [sp, #16]
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f000 fc14 	bl	80107e8 <__lshift>
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	9004      	str	r0, [sp, #16]
 800ffc4:	f000 fc64 	bl	8010890 <__mcmp>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	dcb6      	bgt.n	800ff3a <_dtoa_r+0xa42>
 800ffcc:	d102      	bne.n	800ffd4 <_dtoa_r+0xadc>
 800ffce:	f018 0f01 	tst.w	r8, #1
 800ffd2:	d1b2      	bne.n	800ff3a <_dtoa_r+0xa42>
 800ffd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ffd8:	2b30      	cmp	r3, #48	; 0x30
 800ffda:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ffde:	f47f af0a 	bne.w	800fdf6 <_dtoa_r+0x8fe>
 800ffe2:	4615      	mov	r5, r2
 800ffe4:	e7f6      	b.n	800ffd4 <_dtoa_r+0xadc>
 800ffe6:	4593      	cmp	fp, r2
 800ffe8:	d105      	bne.n	800fff6 <_dtoa_r+0xafe>
 800ffea:	2331      	movs	r3, #49	; 0x31
 800ffec:	f10a 0a01 	add.w	sl, sl, #1
 800fff0:	f88b 3000 	strb.w	r3, [fp]
 800fff4:	e6ff      	b.n	800fdf6 <_dtoa_r+0x8fe>
 800fff6:	4615      	mov	r5, r2
 800fff8:	e79f      	b.n	800ff3a <_dtoa_r+0xa42>
 800fffa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010060 <_dtoa_r+0xb68>
 800fffe:	e007      	b.n	8010010 <_dtoa_r+0xb18>
 8010000:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010002:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010064 <_dtoa_r+0xb6c>
 8010006:	b11b      	cbz	r3, 8010010 <_dtoa_r+0xb18>
 8010008:	f10b 0308 	add.w	r3, fp, #8
 801000c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801000e:	6013      	str	r3, [r2, #0]
 8010010:	4658      	mov	r0, fp
 8010012:	b017      	add	sp, #92	; 0x5c
 8010014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010018:	9b06      	ldr	r3, [sp, #24]
 801001a:	2b01      	cmp	r3, #1
 801001c:	f77f ae35 	ble.w	800fc8a <_dtoa_r+0x792>
 8010020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010022:	9307      	str	r3, [sp, #28]
 8010024:	e649      	b.n	800fcba <_dtoa_r+0x7c2>
 8010026:	9b02      	ldr	r3, [sp, #8]
 8010028:	2b00      	cmp	r3, #0
 801002a:	dc03      	bgt.n	8010034 <_dtoa_r+0xb3c>
 801002c:	9b06      	ldr	r3, [sp, #24]
 801002e:	2b02      	cmp	r3, #2
 8010030:	f73f aecc 	bgt.w	800fdcc <_dtoa_r+0x8d4>
 8010034:	465d      	mov	r5, fp
 8010036:	4639      	mov	r1, r7
 8010038:	9804      	ldr	r0, [sp, #16]
 801003a:	f7ff f9cf 	bl	800f3dc <quorem>
 801003e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010042:	f805 8b01 	strb.w	r8, [r5], #1
 8010046:	9a02      	ldr	r2, [sp, #8]
 8010048:	eba5 030b 	sub.w	r3, r5, fp
 801004c:	429a      	cmp	r2, r3
 801004e:	ddb0      	ble.n	800ffb2 <_dtoa_r+0xaba>
 8010050:	2300      	movs	r3, #0
 8010052:	220a      	movs	r2, #10
 8010054:	9904      	ldr	r1, [sp, #16]
 8010056:	4620      	mov	r0, r4
 8010058:	f000 fa50 	bl	80104fc <__multadd>
 801005c:	9004      	str	r0, [sp, #16]
 801005e:	e7ea      	b.n	8010036 <_dtoa_r+0xb3e>
 8010060:	0801376c 	.word	0x0801376c
 8010064:	08013790 	.word	0x08013790

08010068 <__sflush_r>:
 8010068:	898a      	ldrh	r2, [r1, #12]
 801006a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006e:	4605      	mov	r5, r0
 8010070:	0710      	lsls	r0, r2, #28
 8010072:	460c      	mov	r4, r1
 8010074:	d458      	bmi.n	8010128 <__sflush_r+0xc0>
 8010076:	684b      	ldr	r3, [r1, #4]
 8010078:	2b00      	cmp	r3, #0
 801007a:	dc05      	bgt.n	8010088 <__sflush_r+0x20>
 801007c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801007e:	2b00      	cmp	r3, #0
 8010080:	dc02      	bgt.n	8010088 <__sflush_r+0x20>
 8010082:	2000      	movs	r0, #0
 8010084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801008a:	2e00      	cmp	r6, #0
 801008c:	d0f9      	beq.n	8010082 <__sflush_r+0x1a>
 801008e:	2300      	movs	r3, #0
 8010090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010094:	682f      	ldr	r7, [r5, #0]
 8010096:	6a21      	ldr	r1, [r4, #32]
 8010098:	602b      	str	r3, [r5, #0]
 801009a:	d032      	beq.n	8010102 <__sflush_r+0x9a>
 801009c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801009e:	89a3      	ldrh	r3, [r4, #12]
 80100a0:	075a      	lsls	r2, r3, #29
 80100a2:	d505      	bpl.n	80100b0 <__sflush_r+0x48>
 80100a4:	6863      	ldr	r3, [r4, #4]
 80100a6:	1ac0      	subs	r0, r0, r3
 80100a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80100aa:	b10b      	cbz	r3, 80100b0 <__sflush_r+0x48>
 80100ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80100ae:	1ac0      	subs	r0, r0, r3
 80100b0:	2300      	movs	r3, #0
 80100b2:	4602      	mov	r2, r0
 80100b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100b6:	6a21      	ldr	r1, [r4, #32]
 80100b8:	4628      	mov	r0, r5
 80100ba:	47b0      	blx	r6
 80100bc:	1c43      	adds	r3, r0, #1
 80100be:	89a3      	ldrh	r3, [r4, #12]
 80100c0:	d106      	bne.n	80100d0 <__sflush_r+0x68>
 80100c2:	6829      	ldr	r1, [r5, #0]
 80100c4:	291d      	cmp	r1, #29
 80100c6:	d848      	bhi.n	801015a <__sflush_r+0xf2>
 80100c8:	4a29      	ldr	r2, [pc, #164]	; (8010170 <__sflush_r+0x108>)
 80100ca:	40ca      	lsrs	r2, r1
 80100cc:	07d6      	lsls	r6, r2, #31
 80100ce:	d544      	bpl.n	801015a <__sflush_r+0xf2>
 80100d0:	2200      	movs	r2, #0
 80100d2:	6062      	str	r2, [r4, #4]
 80100d4:	04d9      	lsls	r1, r3, #19
 80100d6:	6922      	ldr	r2, [r4, #16]
 80100d8:	6022      	str	r2, [r4, #0]
 80100da:	d504      	bpl.n	80100e6 <__sflush_r+0x7e>
 80100dc:	1c42      	adds	r2, r0, #1
 80100de:	d101      	bne.n	80100e4 <__sflush_r+0x7c>
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	b903      	cbnz	r3, 80100e6 <__sflush_r+0x7e>
 80100e4:	6560      	str	r0, [r4, #84]	; 0x54
 80100e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100e8:	602f      	str	r7, [r5, #0]
 80100ea:	2900      	cmp	r1, #0
 80100ec:	d0c9      	beq.n	8010082 <__sflush_r+0x1a>
 80100ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100f2:	4299      	cmp	r1, r3
 80100f4:	d002      	beq.n	80100fc <__sflush_r+0x94>
 80100f6:	4628      	mov	r0, r5
 80100f8:	f000 fc9e 	bl	8010a38 <_free_r>
 80100fc:	2000      	movs	r0, #0
 80100fe:	6360      	str	r0, [r4, #52]	; 0x34
 8010100:	e7c0      	b.n	8010084 <__sflush_r+0x1c>
 8010102:	2301      	movs	r3, #1
 8010104:	4628      	mov	r0, r5
 8010106:	47b0      	blx	r6
 8010108:	1c41      	adds	r1, r0, #1
 801010a:	d1c8      	bne.n	801009e <__sflush_r+0x36>
 801010c:	682b      	ldr	r3, [r5, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d0c5      	beq.n	801009e <__sflush_r+0x36>
 8010112:	2b1d      	cmp	r3, #29
 8010114:	d001      	beq.n	801011a <__sflush_r+0xb2>
 8010116:	2b16      	cmp	r3, #22
 8010118:	d101      	bne.n	801011e <__sflush_r+0xb6>
 801011a:	602f      	str	r7, [r5, #0]
 801011c:	e7b1      	b.n	8010082 <__sflush_r+0x1a>
 801011e:	89a3      	ldrh	r3, [r4, #12]
 8010120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010124:	81a3      	strh	r3, [r4, #12]
 8010126:	e7ad      	b.n	8010084 <__sflush_r+0x1c>
 8010128:	690f      	ldr	r7, [r1, #16]
 801012a:	2f00      	cmp	r7, #0
 801012c:	d0a9      	beq.n	8010082 <__sflush_r+0x1a>
 801012e:	0793      	lsls	r3, r2, #30
 8010130:	680e      	ldr	r6, [r1, #0]
 8010132:	bf08      	it	eq
 8010134:	694b      	ldreq	r3, [r1, #20]
 8010136:	600f      	str	r7, [r1, #0]
 8010138:	bf18      	it	ne
 801013a:	2300      	movne	r3, #0
 801013c:	eba6 0807 	sub.w	r8, r6, r7
 8010140:	608b      	str	r3, [r1, #8]
 8010142:	f1b8 0f00 	cmp.w	r8, #0
 8010146:	dd9c      	ble.n	8010082 <__sflush_r+0x1a>
 8010148:	4643      	mov	r3, r8
 801014a:	463a      	mov	r2, r7
 801014c:	6a21      	ldr	r1, [r4, #32]
 801014e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010150:	4628      	mov	r0, r5
 8010152:	47b0      	blx	r6
 8010154:	2800      	cmp	r0, #0
 8010156:	dc06      	bgt.n	8010166 <__sflush_r+0xfe>
 8010158:	89a3      	ldrh	r3, [r4, #12]
 801015a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801015e:	81a3      	strh	r3, [r4, #12]
 8010160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010164:	e78e      	b.n	8010084 <__sflush_r+0x1c>
 8010166:	4407      	add	r7, r0
 8010168:	eba8 0800 	sub.w	r8, r8, r0
 801016c:	e7e9      	b.n	8010142 <__sflush_r+0xda>
 801016e:	bf00      	nop
 8010170:	20400001 	.word	0x20400001

08010174 <_fflush_r>:
 8010174:	b538      	push	{r3, r4, r5, lr}
 8010176:	690b      	ldr	r3, [r1, #16]
 8010178:	4605      	mov	r5, r0
 801017a:	460c      	mov	r4, r1
 801017c:	b1db      	cbz	r3, 80101b6 <_fflush_r+0x42>
 801017e:	b118      	cbz	r0, 8010188 <_fflush_r+0x14>
 8010180:	6983      	ldr	r3, [r0, #24]
 8010182:	b90b      	cbnz	r3, 8010188 <_fflush_r+0x14>
 8010184:	f000 f860 	bl	8010248 <__sinit>
 8010188:	4b0c      	ldr	r3, [pc, #48]	; (80101bc <_fflush_r+0x48>)
 801018a:	429c      	cmp	r4, r3
 801018c:	d109      	bne.n	80101a2 <_fflush_r+0x2e>
 801018e:	686c      	ldr	r4, [r5, #4]
 8010190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010194:	b17b      	cbz	r3, 80101b6 <_fflush_r+0x42>
 8010196:	4621      	mov	r1, r4
 8010198:	4628      	mov	r0, r5
 801019a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801019e:	f7ff bf63 	b.w	8010068 <__sflush_r>
 80101a2:	4b07      	ldr	r3, [pc, #28]	; (80101c0 <_fflush_r+0x4c>)
 80101a4:	429c      	cmp	r4, r3
 80101a6:	d101      	bne.n	80101ac <_fflush_r+0x38>
 80101a8:	68ac      	ldr	r4, [r5, #8]
 80101aa:	e7f1      	b.n	8010190 <_fflush_r+0x1c>
 80101ac:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <_fflush_r+0x50>)
 80101ae:	429c      	cmp	r4, r3
 80101b0:	bf08      	it	eq
 80101b2:	68ec      	ldreq	r4, [r5, #12]
 80101b4:	e7ec      	b.n	8010190 <_fflush_r+0x1c>
 80101b6:	2000      	movs	r0, #0
 80101b8:	bd38      	pop	{r3, r4, r5, pc}
 80101ba:	bf00      	nop
 80101bc:	080137c0 	.word	0x080137c0
 80101c0:	080137e0 	.word	0x080137e0
 80101c4:	080137a0 	.word	0x080137a0

080101c8 <std>:
 80101c8:	2300      	movs	r3, #0
 80101ca:	b510      	push	{r4, lr}
 80101cc:	4604      	mov	r4, r0
 80101ce:	e9c0 3300 	strd	r3, r3, [r0]
 80101d2:	6083      	str	r3, [r0, #8]
 80101d4:	8181      	strh	r1, [r0, #12]
 80101d6:	6643      	str	r3, [r0, #100]	; 0x64
 80101d8:	81c2      	strh	r2, [r0, #14]
 80101da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101de:	6183      	str	r3, [r0, #24]
 80101e0:	4619      	mov	r1, r3
 80101e2:	2208      	movs	r2, #8
 80101e4:	305c      	adds	r0, #92	; 0x5c
 80101e6:	f7fe fb2d 	bl	800e844 <memset>
 80101ea:	4b05      	ldr	r3, [pc, #20]	; (8010200 <std+0x38>)
 80101ec:	6263      	str	r3, [r4, #36]	; 0x24
 80101ee:	4b05      	ldr	r3, [pc, #20]	; (8010204 <std+0x3c>)
 80101f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80101f2:	4b05      	ldr	r3, [pc, #20]	; (8010208 <std+0x40>)
 80101f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101f6:	4b05      	ldr	r3, [pc, #20]	; (801020c <std+0x44>)
 80101f8:	6224      	str	r4, [r4, #32]
 80101fa:	6323      	str	r3, [r4, #48]	; 0x30
 80101fc:	bd10      	pop	{r4, pc}
 80101fe:	bf00      	nop
 8010200:	08010e4d 	.word	0x08010e4d
 8010204:	08010e6f 	.word	0x08010e6f
 8010208:	08010ea7 	.word	0x08010ea7
 801020c:	08010ecb 	.word	0x08010ecb

08010210 <_cleanup_r>:
 8010210:	4901      	ldr	r1, [pc, #4]	; (8010218 <_cleanup_r+0x8>)
 8010212:	f000 b885 	b.w	8010320 <_fwalk_reent>
 8010216:	bf00      	nop
 8010218:	08010175 	.word	0x08010175

0801021c <__sfmoreglue>:
 801021c:	b570      	push	{r4, r5, r6, lr}
 801021e:	1e4a      	subs	r2, r1, #1
 8010220:	2568      	movs	r5, #104	; 0x68
 8010222:	4355      	muls	r5, r2
 8010224:	460e      	mov	r6, r1
 8010226:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801022a:	f000 fc53 	bl	8010ad4 <_malloc_r>
 801022e:	4604      	mov	r4, r0
 8010230:	b140      	cbz	r0, 8010244 <__sfmoreglue+0x28>
 8010232:	2100      	movs	r1, #0
 8010234:	e9c0 1600 	strd	r1, r6, [r0]
 8010238:	300c      	adds	r0, #12
 801023a:	60a0      	str	r0, [r4, #8]
 801023c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010240:	f7fe fb00 	bl	800e844 <memset>
 8010244:	4620      	mov	r0, r4
 8010246:	bd70      	pop	{r4, r5, r6, pc}

08010248 <__sinit>:
 8010248:	6983      	ldr	r3, [r0, #24]
 801024a:	b510      	push	{r4, lr}
 801024c:	4604      	mov	r4, r0
 801024e:	bb33      	cbnz	r3, 801029e <__sinit+0x56>
 8010250:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010254:	6503      	str	r3, [r0, #80]	; 0x50
 8010256:	4b12      	ldr	r3, [pc, #72]	; (80102a0 <__sinit+0x58>)
 8010258:	4a12      	ldr	r2, [pc, #72]	; (80102a4 <__sinit+0x5c>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	6282      	str	r2, [r0, #40]	; 0x28
 801025e:	4298      	cmp	r0, r3
 8010260:	bf04      	itt	eq
 8010262:	2301      	moveq	r3, #1
 8010264:	6183      	streq	r3, [r0, #24]
 8010266:	f000 f81f 	bl	80102a8 <__sfp>
 801026a:	6060      	str	r0, [r4, #4]
 801026c:	4620      	mov	r0, r4
 801026e:	f000 f81b 	bl	80102a8 <__sfp>
 8010272:	60a0      	str	r0, [r4, #8]
 8010274:	4620      	mov	r0, r4
 8010276:	f000 f817 	bl	80102a8 <__sfp>
 801027a:	2200      	movs	r2, #0
 801027c:	60e0      	str	r0, [r4, #12]
 801027e:	2104      	movs	r1, #4
 8010280:	6860      	ldr	r0, [r4, #4]
 8010282:	f7ff ffa1 	bl	80101c8 <std>
 8010286:	2201      	movs	r2, #1
 8010288:	2109      	movs	r1, #9
 801028a:	68a0      	ldr	r0, [r4, #8]
 801028c:	f7ff ff9c 	bl	80101c8 <std>
 8010290:	2202      	movs	r2, #2
 8010292:	2112      	movs	r1, #18
 8010294:	68e0      	ldr	r0, [r4, #12]
 8010296:	f7ff ff97 	bl	80101c8 <std>
 801029a:	2301      	movs	r3, #1
 801029c:	61a3      	str	r3, [r4, #24]
 801029e:	bd10      	pop	{r4, pc}
 80102a0:	08013758 	.word	0x08013758
 80102a4:	08010211 	.word	0x08010211

080102a8 <__sfp>:
 80102a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102aa:	4b1b      	ldr	r3, [pc, #108]	; (8010318 <__sfp+0x70>)
 80102ac:	681e      	ldr	r6, [r3, #0]
 80102ae:	69b3      	ldr	r3, [r6, #24]
 80102b0:	4607      	mov	r7, r0
 80102b2:	b913      	cbnz	r3, 80102ba <__sfp+0x12>
 80102b4:	4630      	mov	r0, r6
 80102b6:	f7ff ffc7 	bl	8010248 <__sinit>
 80102ba:	3648      	adds	r6, #72	; 0x48
 80102bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102c0:	3b01      	subs	r3, #1
 80102c2:	d503      	bpl.n	80102cc <__sfp+0x24>
 80102c4:	6833      	ldr	r3, [r6, #0]
 80102c6:	b133      	cbz	r3, 80102d6 <__sfp+0x2e>
 80102c8:	6836      	ldr	r6, [r6, #0]
 80102ca:	e7f7      	b.n	80102bc <__sfp+0x14>
 80102cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102d0:	b16d      	cbz	r5, 80102ee <__sfp+0x46>
 80102d2:	3468      	adds	r4, #104	; 0x68
 80102d4:	e7f4      	b.n	80102c0 <__sfp+0x18>
 80102d6:	2104      	movs	r1, #4
 80102d8:	4638      	mov	r0, r7
 80102da:	f7ff ff9f 	bl	801021c <__sfmoreglue>
 80102de:	6030      	str	r0, [r6, #0]
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d1f1      	bne.n	80102c8 <__sfp+0x20>
 80102e4:	230c      	movs	r3, #12
 80102e6:	603b      	str	r3, [r7, #0]
 80102e8:	4604      	mov	r4, r0
 80102ea:	4620      	mov	r0, r4
 80102ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ee:	4b0b      	ldr	r3, [pc, #44]	; (801031c <__sfp+0x74>)
 80102f0:	6665      	str	r5, [r4, #100]	; 0x64
 80102f2:	e9c4 5500 	strd	r5, r5, [r4]
 80102f6:	60a5      	str	r5, [r4, #8]
 80102f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80102fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010300:	2208      	movs	r2, #8
 8010302:	4629      	mov	r1, r5
 8010304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010308:	f7fe fa9c 	bl	800e844 <memset>
 801030c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010314:	e7e9      	b.n	80102ea <__sfp+0x42>
 8010316:	bf00      	nop
 8010318:	08013758 	.word	0x08013758
 801031c:	ffff0001 	.word	0xffff0001

08010320 <_fwalk_reent>:
 8010320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010324:	4680      	mov	r8, r0
 8010326:	4689      	mov	r9, r1
 8010328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801032c:	2600      	movs	r6, #0
 801032e:	b914      	cbnz	r4, 8010336 <_fwalk_reent+0x16>
 8010330:	4630      	mov	r0, r6
 8010332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010336:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801033a:	3f01      	subs	r7, #1
 801033c:	d501      	bpl.n	8010342 <_fwalk_reent+0x22>
 801033e:	6824      	ldr	r4, [r4, #0]
 8010340:	e7f5      	b.n	801032e <_fwalk_reent+0xe>
 8010342:	89ab      	ldrh	r3, [r5, #12]
 8010344:	2b01      	cmp	r3, #1
 8010346:	d907      	bls.n	8010358 <_fwalk_reent+0x38>
 8010348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801034c:	3301      	adds	r3, #1
 801034e:	d003      	beq.n	8010358 <_fwalk_reent+0x38>
 8010350:	4629      	mov	r1, r5
 8010352:	4640      	mov	r0, r8
 8010354:	47c8      	blx	r9
 8010356:	4306      	orrs	r6, r0
 8010358:	3568      	adds	r5, #104	; 0x68
 801035a:	e7ee      	b.n	801033a <_fwalk_reent+0x1a>

0801035c <_localeconv_r>:
 801035c:	4b04      	ldr	r3, [pc, #16]	; (8010370 <_localeconv_r+0x14>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	6a18      	ldr	r0, [r3, #32]
 8010362:	4b04      	ldr	r3, [pc, #16]	; (8010374 <_localeconv_r+0x18>)
 8010364:	2800      	cmp	r0, #0
 8010366:	bf08      	it	eq
 8010368:	4618      	moveq	r0, r3
 801036a:	30f0      	adds	r0, #240	; 0xf0
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop
 8010370:	20001cfc 	.word	0x20001cfc
 8010374:	20001d60 	.word	0x20001d60

08010378 <__swhatbuf_r>:
 8010378:	b570      	push	{r4, r5, r6, lr}
 801037a:	460e      	mov	r6, r1
 801037c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010380:	2900      	cmp	r1, #0
 8010382:	b096      	sub	sp, #88	; 0x58
 8010384:	4614      	mov	r4, r2
 8010386:	461d      	mov	r5, r3
 8010388:	da07      	bge.n	801039a <__swhatbuf_r+0x22>
 801038a:	2300      	movs	r3, #0
 801038c:	602b      	str	r3, [r5, #0]
 801038e:	89b3      	ldrh	r3, [r6, #12]
 8010390:	061a      	lsls	r2, r3, #24
 8010392:	d410      	bmi.n	80103b6 <__swhatbuf_r+0x3e>
 8010394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010398:	e00e      	b.n	80103b8 <__swhatbuf_r+0x40>
 801039a:	466a      	mov	r2, sp
 801039c:	f000 fdbc 	bl	8010f18 <_fstat_r>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	dbf2      	blt.n	801038a <__swhatbuf_r+0x12>
 80103a4:	9a01      	ldr	r2, [sp, #4]
 80103a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103ae:	425a      	negs	r2, r3
 80103b0:	415a      	adcs	r2, r3
 80103b2:	602a      	str	r2, [r5, #0]
 80103b4:	e7ee      	b.n	8010394 <__swhatbuf_r+0x1c>
 80103b6:	2340      	movs	r3, #64	; 0x40
 80103b8:	2000      	movs	r0, #0
 80103ba:	6023      	str	r3, [r4, #0]
 80103bc:	b016      	add	sp, #88	; 0x58
 80103be:	bd70      	pop	{r4, r5, r6, pc}

080103c0 <__smakebuf_r>:
 80103c0:	898b      	ldrh	r3, [r1, #12]
 80103c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103c4:	079d      	lsls	r5, r3, #30
 80103c6:	4606      	mov	r6, r0
 80103c8:	460c      	mov	r4, r1
 80103ca:	d507      	bpl.n	80103dc <__smakebuf_r+0x1c>
 80103cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103d0:	6023      	str	r3, [r4, #0]
 80103d2:	6123      	str	r3, [r4, #16]
 80103d4:	2301      	movs	r3, #1
 80103d6:	6163      	str	r3, [r4, #20]
 80103d8:	b002      	add	sp, #8
 80103da:	bd70      	pop	{r4, r5, r6, pc}
 80103dc:	ab01      	add	r3, sp, #4
 80103de:	466a      	mov	r2, sp
 80103e0:	f7ff ffca 	bl	8010378 <__swhatbuf_r>
 80103e4:	9900      	ldr	r1, [sp, #0]
 80103e6:	4605      	mov	r5, r0
 80103e8:	4630      	mov	r0, r6
 80103ea:	f000 fb73 	bl	8010ad4 <_malloc_r>
 80103ee:	b948      	cbnz	r0, 8010404 <__smakebuf_r+0x44>
 80103f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103f4:	059a      	lsls	r2, r3, #22
 80103f6:	d4ef      	bmi.n	80103d8 <__smakebuf_r+0x18>
 80103f8:	f023 0303 	bic.w	r3, r3, #3
 80103fc:	f043 0302 	orr.w	r3, r3, #2
 8010400:	81a3      	strh	r3, [r4, #12]
 8010402:	e7e3      	b.n	80103cc <__smakebuf_r+0xc>
 8010404:	4b0d      	ldr	r3, [pc, #52]	; (801043c <__smakebuf_r+0x7c>)
 8010406:	62b3      	str	r3, [r6, #40]	; 0x28
 8010408:	89a3      	ldrh	r3, [r4, #12]
 801040a:	6020      	str	r0, [r4, #0]
 801040c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010410:	81a3      	strh	r3, [r4, #12]
 8010412:	9b00      	ldr	r3, [sp, #0]
 8010414:	6163      	str	r3, [r4, #20]
 8010416:	9b01      	ldr	r3, [sp, #4]
 8010418:	6120      	str	r0, [r4, #16]
 801041a:	b15b      	cbz	r3, 8010434 <__smakebuf_r+0x74>
 801041c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010420:	4630      	mov	r0, r6
 8010422:	f000 fd8b 	bl	8010f3c <_isatty_r>
 8010426:	b128      	cbz	r0, 8010434 <__smakebuf_r+0x74>
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	f023 0303 	bic.w	r3, r3, #3
 801042e:	f043 0301 	orr.w	r3, r3, #1
 8010432:	81a3      	strh	r3, [r4, #12]
 8010434:	89a3      	ldrh	r3, [r4, #12]
 8010436:	431d      	orrs	r5, r3
 8010438:	81a5      	strh	r5, [r4, #12]
 801043a:	e7cd      	b.n	80103d8 <__smakebuf_r+0x18>
 801043c:	08010211 	.word	0x08010211

08010440 <malloc>:
 8010440:	4b02      	ldr	r3, [pc, #8]	; (801044c <malloc+0xc>)
 8010442:	4601      	mov	r1, r0
 8010444:	6818      	ldr	r0, [r3, #0]
 8010446:	f000 bb45 	b.w	8010ad4 <_malloc_r>
 801044a:	bf00      	nop
 801044c:	20001cfc 	.word	0x20001cfc

08010450 <memcpy>:
 8010450:	b510      	push	{r4, lr}
 8010452:	1e43      	subs	r3, r0, #1
 8010454:	440a      	add	r2, r1
 8010456:	4291      	cmp	r1, r2
 8010458:	d100      	bne.n	801045c <memcpy+0xc>
 801045a:	bd10      	pop	{r4, pc}
 801045c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010464:	e7f7      	b.n	8010456 <memcpy+0x6>

08010466 <_Balloc>:
 8010466:	b570      	push	{r4, r5, r6, lr}
 8010468:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801046a:	4604      	mov	r4, r0
 801046c:	460e      	mov	r6, r1
 801046e:	b93d      	cbnz	r5, 8010480 <_Balloc+0x1a>
 8010470:	2010      	movs	r0, #16
 8010472:	f7ff ffe5 	bl	8010440 <malloc>
 8010476:	6260      	str	r0, [r4, #36]	; 0x24
 8010478:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801047c:	6005      	str	r5, [r0, #0]
 801047e:	60c5      	str	r5, [r0, #12]
 8010480:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010482:	68eb      	ldr	r3, [r5, #12]
 8010484:	b183      	cbz	r3, 80104a8 <_Balloc+0x42>
 8010486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801048e:	b9b8      	cbnz	r0, 80104c0 <_Balloc+0x5a>
 8010490:	2101      	movs	r1, #1
 8010492:	fa01 f506 	lsl.w	r5, r1, r6
 8010496:	1d6a      	adds	r2, r5, #5
 8010498:	0092      	lsls	r2, r2, #2
 801049a:	4620      	mov	r0, r4
 801049c:	f000 fabe 	bl	8010a1c <_calloc_r>
 80104a0:	b160      	cbz	r0, 80104bc <_Balloc+0x56>
 80104a2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80104a6:	e00e      	b.n	80104c6 <_Balloc+0x60>
 80104a8:	2221      	movs	r2, #33	; 0x21
 80104aa:	2104      	movs	r1, #4
 80104ac:	4620      	mov	r0, r4
 80104ae:	f000 fab5 	bl	8010a1c <_calloc_r>
 80104b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104b4:	60e8      	str	r0, [r5, #12]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1e4      	bne.n	8010486 <_Balloc+0x20>
 80104bc:	2000      	movs	r0, #0
 80104be:	bd70      	pop	{r4, r5, r6, pc}
 80104c0:	6802      	ldr	r2, [r0, #0]
 80104c2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80104c6:	2300      	movs	r3, #0
 80104c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80104cc:	e7f7      	b.n	80104be <_Balloc+0x58>

080104ce <_Bfree>:
 80104ce:	b570      	push	{r4, r5, r6, lr}
 80104d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80104d2:	4606      	mov	r6, r0
 80104d4:	460d      	mov	r5, r1
 80104d6:	b93c      	cbnz	r4, 80104e8 <_Bfree+0x1a>
 80104d8:	2010      	movs	r0, #16
 80104da:	f7ff ffb1 	bl	8010440 <malloc>
 80104de:	6270      	str	r0, [r6, #36]	; 0x24
 80104e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104e4:	6004      	str	r4, [r0, #0]
 80104e6:	60c4      	str	r4, [r0, #12]
 80104e8:	b13d      	cbz	r5, 80104fa <_Bfree+0x2c>
 80104ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80104ec:	686a      	ldr	r2, [r5, #4]
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104f4:	6029      	str	r1, [r5, #0]
 80104f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80104fa:	bd70      	pop	{r4, r5, r6, pc}

080104fc <__multadd>:
 80104fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010500:	690d      	ldr	r5, [r1, #16]
 8010502:	461f      	mov	r7, r3
 8010504:	4606      	mov	r6, r0
 8010506:	460c      	mov	r4, r1
 8010508:	f101 0c14 	add.w	ip, r1, #20
 801050c:	2300      	movs	r3, #0
 801050e:	f8dc 0000 	ldr.w	r0, [ip]
 8010512:	b281      	uxth	r1, r0
 8010514:	fb02 7101 	mla	r1, r2, r1, r7
 8010518:	0c0f      	lsrs	r7, r1, #16
 801051a:	0c00      	lsrs	r0, r0, #16
 801051c:	fb02 7000 	mla	r0, r2, r0, r7
 8010520:	b289      	uxth	r1, r1
 8010522:	3301      	adds	r3, #1
 8010524:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010528:	429d      	cmp	r5, r3
 801052a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801052e:	f84c 1b04 	str.w	r1, [ip], #4
 8010532:	dcec      	bgt.n	801050e <__multadd+0x12>
 8010534:	b1d7      	cbz	r7, 801056c <__multadd+0x70>
 8010536:	68a3      	ldr	r3, [r4, #8]
 8010538:	42ab      	cmp	r3, r5
 801053a:	dc12      	bgt.n	8010562 <__multadd+0x66>
 801053c:	6861      	ldr	r1, [r4, #4]
 801053e:	4630      	mov	r0, r6
 8010540:	3101      	adds	r1, #1
 8010542:	f7ff ff90 	bl	8010466 <_Balloc>
 8010546:	6922      	ldr	r2, [r4, #16]
 8010548:	3202      	adds	r2, #2
 801054a:	f104 010c 	add.w	r1, r4, #12
 801054e:	4680      	mov	r8, r0
 8010550:	0092      	lsls	r2, r2, #2
 8010552:	300c      	adds	r0, #12
 8010554:	f7ff ff7c 	bl	8010450 <memcpy>
 8010558:	4621      	mov	r1, r4
 801055a:	4630      	mov	r0, r6
 801055c:	f7ff ffb7 	bl	80104ce <_Bfree>
 8010560:	4644      	mov	r4, r8
 8010562:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010566:	3501      	adds	r5, #1
 8010568:	615f      	str	r7, [r3, #20]
 801056a:	6125      	str	r5, [r4, #16]
 801056c:	4620      	mov	r0, r4
 801056e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010572 <__hi0bits>:
 8010572:	0c02      	lsrs	r2, r0, #16
 8010574:	0412      	lsls	r2, r2, #16
 8010576:	4603      	mov	r3, r0
 8010578:	b9b2      	cbnz	r2, 80105a8 <__hi0bits+0x36>
 801057a:	0403      	lsls	r3, r0, #16
 801057c:	2010      	movs	r0, #16
 801057e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010582:	bf04      	itt	eq
 8010584:	021b      	lsleq	r3, r3, #8
 8010586:	3008      	addeq	r0, #8
 8010588:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801058c:	bf04      	itt	eq
 801058e:	011b      	lsleq	r3, r3, #4
 8010590:	3004      	addeq	r0, #4
 8010592:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010596:	bf04      	itt	eq
 8010598:	009b      	lsleq	r3, r3, #2
 801059a:	3002      	addeq	r0, #2
 801059c:	2b00      	cmp	r3, #0
 801059e:	db06      	blt.n	80105ae <__hi0bits+0x3c>
 80105a0:	005b      	lsls	r3, r3, #1
 80105a2:	d503      	bpl.n	80105ac <__hi0bits+0x3a>
 80105a4:	3001      	adds	r0, #1
 80105a6:	4770      	bx	lr
 80105a8:	2000      	movs	r0, #0
 80105aa:	e7e8      	b.n	801057e <__hi0bits+0xc>
 80105ac:	2020      	movs	r0, #32
 80105ae:	4770      	bx	lr

080105b0 <__lo0bits>:
 80105b0:	6803      	ldr	r3, [r0, #0]
 80105b2:	f013 0207 	ands.w	r2, r3, #7
 80105b6:	4601      	mov	r1, r0
 80105b8:	d00b      	beq.n	80105d2 <__lo0bits+0x22>
 80105ba:	07da      	lsls	r2, r3, #31
 80105bc:	d423      	bmi.n	8010606 <__lo0bits+0x56>
 80105be:	0798      	lsls	r0, r3, #30
 80105c0:	bf49      	itett	mi
 80105c2:	085b      	lsrmi	r3, r3, #1
 80105c4:	089b      	lsrpl	r3, r3, #2
 80105c6:	2001      	movmi	r0, #1
 80105c8:	600b      	strmi	r3, [r1, #0]
 80105ca:	bf5c      	itt	pl
 80105cc:	600b      	strpl	r3, [r1, #0]
 80105ce:	2002      	movpl	r0, #2
 80105d0:	4770      	bx	lr
 80105d2:	b298      	uxth	r0, r3
 80105d4:	b9a8      	cbnz	r0, 8010602 <__lo0bits+0x52>
 80105d6:	0c1b      	lsrs	r3, r3, #16
 80105d8:	2010      	movs	r0, #16
 80105da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80105de:	bf04      	itt	eq
 80105e0:	0a1b      	lsreq	r3, r3, #8
 80105e2:	3008      	addeq	r0, #8
 80105e4:	071a      	lsls	r2, r3, #28
 80105e6:	bf04      	itt	eq
 80105e8:	091b      	lsreq	r3, r3, #4
 80105ea:	3004      	addeq	r0, #4
 80105ec:	079a      	lsls	r2, r3, #30
 80105ee:	bf04      	itt	eq
 80105f0:	089b      	lsreq	r3, r3, #2
 80105f2:	3002      	addeq	r0, #2
 80105f4:	07da      	lsls	r2, r3, #31
 80105f6:	d402      	bmi.n	80105fe <__lo0bits+0x4e>
 80105f8:	085b      	lsrs	r3, r3, #1
 80105fa:	d006      	beq.n	801060a <__lo0bits+0x5a>
 80105fc:	3001      	adds	r0, #1
 80105fe:	600b      	str	r3, [r1, #0]
 8010600:	4770      	bx	lr
 8010602:	4610      	mov	r0, r2
 8010604:	e7e9      	b.n	80105da <__lo0bits+0x2a>
 8010606:	2000      	movs	r0, #0
 8010608:	4770      	bx	lr
 801060a:	2020      	movs	r0, #32
 801060c:	4770      	bx	lr

0801060e <__i2b>:
 801060e:	b510      	push	{r4, lr}
 8010610:	460c      	mov	r4, r1
 8010612:	2101      	movs	r1, #1
 8010614:	f7ff ff27 	bl	8010466 <_Balloc>
 8010618:	2201      	movs	r2, #1
 801061a:	6144      	str	r4, [r0, #20]
 801061c:	6102      	str	r2, [r0, #16]
 801061e:	bd10      	pop	{r4, pc}

08010620 <__multiply>:
 8010620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010624:	4614      	mov	r4, r2
 8010626:	690a      	ldr	r2, [r1, #16]
 8010628:	6923      	ldr	r3, [r4, #16]
 801062a:	429a      	cmp	r2, r3
 801062c:	bfb8      	it	lt
 801062e:	460b      	movlt	r3, r1
 8010630:	4688      	mov	r8, r1
 8010632:	bfbc      	itt	lt
 8010634:	46a0      	movlt	r8, r4
 8010636:	461c      	movlt	r4, r3
 8010638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801063c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010640:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010644:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010648:	eb07 0609 	add.w	r6, r7, r9
 801064c:	42b3      	cmp	r3, r6
 801064e:	bfb8      	it	lt
 8010650:	3101      	addlt	r1, #1
 8010652:	f7ff ff08 	bl	8010466 <_Balloc>
 8010656:	f100 0514 	add.w	r5, r0, #20
 801065a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801065e:	462b      	mov	r3, r5
 8010660:	2200      	movs	r2, #0
 8010662:	4573      	cmp	r3, lr
 8010664:	d316      	bcc.n	8010694 <__multiply+0x74>
 8010666:	f104 0214 	add.w	r2, r4, #20
 801066a:	f108 0114 	add.w	r1, r8, #20
 801066e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010672:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	9b00      	ldr	r3, [sp, #0]
 801067a:	9201      	str	r2, [sp, #4]
 801067c:	4293      	cmp	r3, r2
 801067e:	d80c      	bhi.n	801069a <__multiply+0x7a>
 8010680:	2e00      	cmp	r6, #0
 8010682:	dd03      	ble.n	801068c <__multiply+0x6c>
 8010684:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010688:	2b00      	cmp	r3, #0
 801068a:	d05d      	beq.n	8010748 <__multiply+0x128>
 801068c:	6106      	str	r6, [r0, #16]
 801068e:	b003      	add	sp, #12
 8010690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010694:	f843 2b04 	str.w	r2, [r3], #4
 8010698:	e7e3      	b.n	8010662 <__multiply+0x42>
 801069a:	f8b2 b000 	ldrh.w	fp, [r2]
 801069e:	f1bb 0f00 	cmp.w	fp, #0
 80106a2:	d023      	beq.n	80106ec <__multiply+0xcc>
 80106a4:	4689      	mov	r9, r1
 80106a6:	46ac      	mov	ip, r5
 80106a8:	f04f 0800 	mov.w	r8, #0
 80106ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80106b0:	f8dc a000 	ldr.w	sl, [ip]
 80106b4:	b2a3      	uxth	r3, r4
 80106b6:	fa1f fa8a 	uxth.w	sl, sl
 80106ba:	fb0b a303 	mla	r3, fp, r3, sl
 80106be:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80106c2:	f8dc 4000 	ldr.w	r4, [ip]
 80106c6:	4443      	add	r3, r8
 80106c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80106cc:	fb0b 840a 	mla	r4, fp, sl, r8
 80106d0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80106d4:	46e2      	mov	sl, ip
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80106dc:	454f      	cmp	r7, r9
 80106de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80106e2:	f84a 3b04 	str.w	r3, [sl], #4
 80106e6:	d82b      	bhi.n	8010740 <__multiply+0x120>
 80106e8:	f8cc 8004 	str.w	r8, [ip, #4]
 80106ec:	9b01      	ldr	r3, [sp, #4]
 80106ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80106f2:	3204      	adds	r2, #4
 80106f4:	f1ba 0f00 	cmp.w	sl, #0
 80106f8:	d020      	beq.n	801073c <__multiply+0x11c>
 80106fa:	682b      	ldr	r3, [r5, #0]
 80106fc:	4689      	mov	r9, r1
 80106fe:	46a8      	mov	r8, r5
 8010700:	f04f 0b00 	mov.w	fp, #0
 8010704:	f8b9 c000 	ldrh.w	ip, [r9]
 8010708:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801070c:	fb0a 440c 	mla	r4, sl, ip, r4
 8010710:	445c      	add	r4, fp
 8010712:	46c4      	mov	ip, r8
 8010714:	b29b      	uxth	r3, r3
 8010716:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801071a:	f84c 3b04 	str.w	r3, [ip], #4
 801071e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010722:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010726:	0c1b      	lsrs	r3, r3, #16
 8010728:	fb0a b303 	mla	r3, sl, r3, fp
 801072c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010730:	454f      	cmp	r7, r9
 8010732:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010736:	d805      	bhi.n	8010744 <__multiply+0x124>
 8010738:	f8c8 3004 	str.w	r3, [r8, #4]
 801073c:	3504      	adds	r5, #4
 801073e:	e79b      	b.n	8010678 <__multiply+0x58>
 8010740:	46d4      	mov	ip, sl
 8010742:	e7b3      	b.n	80106ac <__multiply+0x8c>
 8010744:	46e0      	mov	r8, ip
 8010746:	e7dd      	b.n	8010704 <__multiply+0xe4>
 8010748:	3e01      	subs	r6, #1
 801074a:	e799      	b.n	8010680 <__multiply+0x60>

0801074c <__pow5mult>:
 801074c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010750:	4615      	mov	r5, r2
 8010752:	f012 0203 	ands.w	r2, r2, #3
 8010756:	4606      	mov	r6, r0
 8010758:	460f      	mov	r7, r1
 801075a:	d007      	beq.n	801076c <__pow5mult+0x20>
 801075c:	3a01      	subs	r2, #1
 801075e:	4c21      	ldr	r4, [pc, #132]	; (80107e4 <__pow5mult+0x98>)
 8010760:	2300      	movs	r3, #0
 8010762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010766:	f7ff fec9 	bl	80104fc <__multadd>
 801076a:	4607      	mov	r7, r0
 801076c:	10ad      	asrs	r5, r5, #2
 801076e:	d035      	beq.n	80107dc <__pow5mult+0x90>
 8010770:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010772:	b93c      	cbnz	r4, 8010784 <__pow5mult+0x38>
 8010774:	2010      	movs	r0, #16
 8010776:	f7ff fe63 	bl	8010440 <malloc>
 801077a:	6270      	str	r0, [r6, #36]	; 0x24
 801077c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010780:	6004      	str	r4, [r0, #0]
 8010782:	60c4      	str	r4, [r0, #12]
 8010784:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801078c:	b94c      	cbnz	r4, 80107a2 <__pow5mult+0x56>
 801078e:	f240 2171 	movw	r1, #625	; 0x271
 8010792:	4630      	mov	r0, r6
 8010794:	f7ff ff3b 	bl	801060e <__i2b>
 8010798:	2300      	movs	r3, #0
 801079a:	f8c8 0008 	str.w	r0, [r8, #8]
 801079e:	4604      	mov	r4, r0
 80107a0:	6003      	str	r3, [r0, #0]
 80107a2:	f04f 0800 	mov.w	r8, #0
 80107a6:	07eb      	lsls	r3, r5, #31
 80107a8:	d50a      	bpl.n	80107c0 <__pow5mult+0x74>
 80107aa:	4639      	mov	r1, r7
 80107ac:	4622      	mov	r2, r4
 80107ae:	4630      	mov	r0, r6
 80107b0:	f7ff ff36 	bl	8010620 <__multiply>
 80107b4:	4639      	mov	r1, r7
 80107b6:	4681      	mov	r9, r0
 80107b8:	4630      	mov	r0, r6
 80107ba:	f7ff fe88 	bl	80104ce <_Bfree>
 80107be:	464f      	mov	r7, r9
 80107c0:	106d      	asrs	r5, r5, #1
 80107c2:	d00b      	beq.n	80107dc <__pow5mult+0x90>
 80107c4:	6820      	ldr	r0, [r4, #0]
 80107c6:	b938      	cbnz	r0, 80107d8 <__pow5mult+0x8c>
 80107c8:	4622      	mov	r2, r4
 80107ca:	4621      	mov	r1, r4
 80107cc:	4630      	mov	r0, r6
 80107ce:	f7ff ff27 	bl	8010620 <__multiply>
 80107d2:	6020      	str	r0, [r4, #0]
 80107d4:	f8c0 8000 	str.w	r8, [r0]
 80107d8:	4604      	mov	r4, r0
 80107da:	e7e4      	b.n	80107a6 <__pow5mult+0x5a>
 80107dc:	4638      	mov	r0, r7
 80107de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107e2:	bf00      	nop
 80107e4:	080138f0 	.word	0x080138f0

080107e8 <__lshift>:
 80107e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107ec:	460c      	mov	r4, r1
 80107ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80107f2:	6923      	ldr	r3, [r4, #16]
 80107f4:	6849      	ldr	r1, [r1, #4]
 80107f6:	eb0a 0903 	add.w	r9, sl, r3
 80107fa:	68a3      	ldr	r3, [r4, #8]
 80107fc:	4607      	mov	r7, r0
 80107fe:	4616      	mov	r6, r2
 8010800:	f109 0501 	add.w	r5, r9, #1
 8010804:	42ab      	cmp	r3, r5
 8010806:	db32      	blt.n	801086e <__lshift+0x86>
 8010808:	4638      	mov	r0, r7
 801080a:	f7ff fe2c 	bl	8010466 <_Balloc>
 801080e:	2300      	movs	r3, #0
 8010810:	4680      	mov	r8, r0
 8010812:	f100 0114 	add.w	r1, r0, #20
 8010816:	461a      	mov	r2, r3
 8010818:	4553      	cmp	r3, sl
 801081a:	db2b      	blt.n	8010874 <__lshift+0x8c>
 801081c:	6920      	ldr	r0, [r4, #16]
 801081e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010822:	f104 0314 	add.w	r3, r4, #20
 8010826:	f016 021f 	ands.w	r2, r6, #31
 801082a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801082e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010832:	d025      	beq.n	8010880 <__lshift+0x98>
 8010834:	f1c2 0e20 	rsb	lr, r2, #32
 8010838:	2000      	movs	r0, #0
 801083a:	681e      	ldr	r6, [r3, #0]
 801083c:	468a      	mov	sl, r1
 801083e:	4096      	lsls	r6, r2
 8010840:	4330      	orrs	r0, r6
 8010842:	f84a 0b04 	str.w	r0, [sl], #4
 8010846:	f853 0b04 	ldr.w	r0, [r3], #4
 801084a:	459c      	cmp	ip, r3
 801084c:	fa20 f00e 	lsr.w	r0, r0, lr
 8010850:	d814      	bhi.n	801087c <__lshift+0x94>
 8010852:	6048      	str	r0, [r1, #4]
 8010854:	b108      	cbz	r0, 801085a <__lshift+0x72>
 8010856:	f109 0502 	add.w	r5, r9, #2
 801085a:	3d01      	subs	r5, #1
 801085c:	4638      	mov	r0, r7
 801085e:	f8c8 5010 	str.w	r5, [r8, #16]
 8010862:	4621      	mov	r1, r4
 8010864:	f7ff fe33 	bl	80104ce <_Bfree>
 8010868:	4640      	mov	r0, r8
 801086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801086e:	3101      	adds	r1, #1
 8010870:	005b      	lsls	r3, r3, #1
 8010872:	e7c7      	b.n	8010804 <__lshift+0x1c>
 8010874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010878:	3301      	adds	r3, #1
 801087a:	e7cd      	b.n	8010818 <__lshift+0x30>
 801087c:	4651      	mov	r1, sl
 801087e:	e7dc      	b.n	801083a <__lshift+0x52>
 8010880:	3904      	subs	r1, #4
 8010882:	f853 2b04 	ldr.w	r2, [r3], #4
 8010886:	f841 2f04 	str.w	r2, [r1, #4]!
 801088a:	459c      	cmp	ip, r3
 801088c:	d8f9      	bhi.n	8010882 <__lshift+0x9a>
 801088e:	e7e4      	b.n	801085a <__lshift+0x72>

08010890 <__mcmp>:
 8010890:	6903      	ldr	r3, [r0, #16]
 8010892:	690a      	ldr	r2, [r1, #16]
 8010894:	1a9b      	subs	r3, r3, r2
 8010896:	b530      	push	{r4, r5, lr}
 8010898:	d10c      	bne.n	80108b4 <__mcmp+0x24>
 801089a:	0092      	lsls	r2, r2, #2
 801089c:	3014      	adds	r0, #20
 801089e:	3114      	adds	r1, #20
 80108a0:	1884      	adds	r4, r0, r2
 80108a2:	4411      	add	r1, r2
 80108a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80108a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80108ac:	4295      	cmp	r5, r2
 80108ae:	d003      	beq.n	80108b8 <__mcmp+0x28>
 80108b0:	d305      	bcc.n	80108be <__mcmp+0x2e>
 80108b2:	2301      	movs	r3, #1
 80108b4:	4618      	mov	r0, r3
 80108b6:	bd30      	pop	{r4, r5, pc}
 80108b8:	42a0      	cmp	r0, r4
 80108ba:	d3f3      	bcc.n	80108a4 <__mcmp+0x14>
 80108bc:	e7fa      	b.n	80108b4 <__mcmp+0x24>
 80108be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108c2:	e7f7      	b.n	80108b4 <__mcmp+0x24>

080108c4 <__mdiff>:
 80108c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108c8:	460d      	mov	r5, r1
 80108ca:	4607      	mov	r7, r0
 80108cc:	4611      	mov	r1, r2
 80108ce:	4628      	mov	r0, r5
 80108d0:	4614      	mov	r4, r2
 80108d2:	f7ff ffdd 	bl	8010890 <__mcmp>
 80108d6:	1e06      	subs	r6, r0, #0
 80108d8:	d108      	bne.n	80108ec <__mdiff+0x28>
 80108da:	4631      	mov	r1, r6
 80108dc:	4638      	mov	r0, r7
 80108de:	f7ff fdc2 	bl	8010466 <_Balloc>
 80108e2:	2301      	movs	r3, #1
 80108e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80108e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ec:	bfa4      	itt	ge
 80108ee:	4623      	movge	r3, r4
 80108f0:	462c      	movge	r4, r5
 80108f2:	4638      	mov	r0, r7
 80108f4:	6861      	ldr	r1, [r4, #4]
 80108f6:	bfa6      	itte	ge
 80108f8:	461d      	movge	r5, r3
 80108fa:	2600      	movge	r6, #0
 80108fc:	2601      	movlt	r6, #1
 80108fe:	f7ff fdb2 	bl	8010466 <_Balloc>
 8010902:	692b      	ldr	r3, [r5, #16]
 8010904:	60c6      	str	r6, [r0, #12]
 8010906:	6926      	ldr	r6, [r4, #16]
 8010908:	f105 0914 	add.w	r9, r5, #20
 801090c:	f104 0214 	add.w	r2, r4, #20
 8010910:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010914:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010918:	f100 0514 	add.w	r5, r0, #20
 801091c:	f04f 0e00 	mov.w	lr, #0
 8010920:	f852 ab04 	ldr.w	sl, [r2], #4
 8010924:	f859 4b04 	ldr.w	r4, [r9], #4
 8010928:	fa1e f18a 	uxtah	r1, lr, sl
 801092c:	b2a3      	uxth	r3, r4
 801092e:	1ac9      	subs	r1, r1, r3
 8010930:	0c23      	lsrs	r3, r4, #16
 8010932:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010936:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801093a:	b289      	uxth	r1, r1
 801093c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010940:	45c8      	cmp	r8, r9
 8010942:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010946:	4694      	mov	ip, r2
 8010948:	f845 3b04 	str.w	r3, [r5], #4
 801094c:	d8e8      	bhi.n	8010920 <__mdiff+0x5c>
 801094e:	45bc      	cmp	ip, r7
 8010950:	d304      	bcc.n	801095c <__mdiff+0x98>
 8010952:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010956:	b183      	cbz	r3, 801097a <__mdiff+0xb6>
 8010958:	6106      	str	r6, [r0, #16]
 801095a:	e7c5      	b.n	80108e8 <__mdiff+0x24>
 801095c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010960:	fa1e f381 	uxtah	r3, lr, r1
 8010964:	141a      	asrs	r2, r3, #16
 8010966:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801096a:	b29b      	uxth	r3, r3
 801096c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010970:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010974:	f845 3b04 	str.w	r3, [r5], #4
 8010978:	e7e9      	b.n	801094e <__mdiff+0x8a>
 801097a:	3e01      	subs	r6, #1
 801097c:	e7e9      	b.n	8010952 <__mdiff+0x8e>

0801097e <__d2b>:
 801097e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010982:	460e      	mov	r6, r1
 8010984:	2101      	movs	r1, #1
 8010986:	ec59 8b10 	vmov	r8, r9, d0
 801098a:	4615      	mov	r5, r2
 801098c:	f7ff fd6b 	bl	8010466 <_Balloc>
 8010990:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010994:	4607      	mov	r7, r0
 8010996:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801099a:	bb34      	cbnz	r4, 80109ea <__d2b+0x6c>
 801099c:	9301      	str	r3, [sp, #4]
 801099e:	f1b8 0300 	subs.w	r3, r8, #0
 80109a2:	d027      	beq.n	80109f4 <__d2b+0x76>
 80109a4:	a802      	add	r0, sp, #8
 80109a6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80109aa:	f7ff fe01 	bl	80105b0 <__lo0bits>
 80109ae:	9900      	ldr	r1, [sp, #0]
 80109b0:	b1f0      	cbz	r0, 80109f0 <__d2b+0x72>
 80109b2:	9a01      	ldr	r2, [sp, #4]
 80109b4:	f1c0 0320 	rsb	r3, r0, #32
 80109b8:	fa02 f303 	lsl.w	r3, r2, r3
 80109bc:	430b      	orrs	r3, r1
 80109be:	40c2      	lsrs	r2, r0
 80109c0:	617b      	str	r3, [r7, #20]
 80109c2:	9201      	str	r2, [sp, #4]
 80109c4:	9b01      	ldr	r3, [sp, #4]
 80109c6:	61bb      	str	r3, [r7, #24]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	bf14      	ite	ne
 80109cc:	2102      	movne	r1, #2
 80109ce:	2101      	moveq	r1, #1
 80109d0:	6139      	str	r1, [r7, #16]
 80109d2:	b1c4      	cbz	r4, 8010a06 <__d2b+0x88>
 80109d4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80109d8:	4404      	add	r4, r0
 80109da:	6034      	str	r4, [r6, #0]
 80109dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80109e0:	6028      	str	r0, [r5, #0]
 80109e2:	4638      	mov	r0, r7
 80109e4:	b003      	add	sp, #12
 80109e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109ee:	e7d5      	b.n	801099c <__d2b+0x1e>
 80109f0:	6179      	str	r1, [r7, #20]
 80109f2:	e7e7      	b.n	80109c4 <__d2b+0x46>
 80109f4:	a801      	add	r0, sp, #4
 80109f6:	f7ff fddb 	bl	80105b0 <__lo0bits>
 80109fa:	9b01      	ldr	r3, [sp, #4]
 80109fc:	617b      	str	r3, [r7, #20]
 80109fe:	2101      	movs	r1, #1
 8010a00:	6139      	str	r1, [r7, #16]
 8010a02:	3020      	adds	r0, #32
 8010a04:	e7e5      	b.n	80109d2 <__d2b+0x54>
 8010a06:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010a0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a0e:	6030      	str	r0, [r6, #0]
 8010a10:	6918      	ldr	r0, [r3, #16]
 8010a12:	f7ff fdae 	bl	8010572 <__hi0bits>
 8010a16:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010a1a:	e7e1      	b.n	80109e0 <__d2b+0x62>

08010a1c <_calloc_r>:
 8010a1c:	b538      	push	{r3, r4, r5, lr}
 8010a1e:	fb02 f401 	mul.w	r4, r2, r1
 8010a22:	4621      	mov	r1, r4
 8010a24:	f000 f856 	bl	8010ad4 <_malloc_r>
 8010a28:	4605      	mov	r5, r0
 8010a2a:	b118      	cbz	r0, 8010a34 <_calloc_r+0x18>
 8010a2c:	4622      	mov	r2, r4
 8010a2e:	2100      	movs	r1, #0
 8010a30:	f7fd ff08 	bl	800e844 <memset>
 8010a34:	4628      	mov	r0, r5
 8010a36:	bd38      	pop	{r3, r4, r5, pc}

08010a38 <_free_r>:
 8010a38:	b538      	push	{r3, r4, r5, lr}
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	2900      	cmp	r1, #0
 8010a3e:	d045      	beq.n	8010acc <_free_r+0x94>
 8010a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a44:	1f0c      	subs	r4, r1, #4
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	bfb8      	it	lt
 8010a4a:	18e4      	addlt	r4, r4, r3
 8010a4c:	f000 fac3 	bl	8010fd6 <__malloc_lock>
 8010a50:	4a1f      	ldr	r2, [pc, #124]	; (8010ad0 <_free_r+0x98>)
 8010a52:	6813      	ldr	r3, [r2, #0]
 8010a54:	4610      	mov	r0, r2
 8010a56:	b933      	cbnz	r3, 8010a66 <_free_r+0x2e>
 8010a58:	6063      	str	r3, [r4, #4]
 8010a5a:	6014      	str	r4, [r2, #0]
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a62:	f000 bab9 	b.w	8010fd8 <__malloc_unlock>
 8010a66:	42a3      	cmp	r3, r4
 8010a68:	d90c      	bls.n	8010a84 <_free_r+0x4c>
 8010a6a:	6821      	ldr	r1, [r4, #0]
 8010a6c:	1862      	adds	r2, r4, r1
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	bf04      	itt	eq
 8010a72:	681a      	ldreq	r2, [r3, #0]
 8010a74:	685b      	ldreq	r3, [r3, #4]
 8010a76:	6063      	str	r3, [r4, #4]
 8010a78:	bf04      	itt	eq
 8010a7a:	1852      	addeq	r2, r2, r1
 8010a7c:	6022      	streq	r2, [r4, #0]
 8010a7e:	6004      	str	r4, [r0, #0]
 8010a80:	e7ec      	b.n	8010a5c <_free_r+0x24>
 8010a82:	4613      	mov	r3, r2
 8010a84:	685a      	ldr	r2, [r3, #4]
 8010a86:	b10a      	cbz	r2, 8010a8c <_free_r+0x54>
 8010a88:	42a2      	cmp	r2, r4
 8010a8a:	d9fa      	bls.n	8010a82 <_free_r+0x4a>
 8010a8c:	6819      	ldr	r1, [r3, #0]
 8010a8e:	1858      	adds	r0, r3, r1
 8010a90:	42a0      	cmp	r0, r4
 8010a92:	d10b      	bne.n	8010aac <_free_r+0x74>
 8010a94:	6820      	ldr	r0, [r4, #0]
 8010a96:	4401      	add	r1, r0
 8010a98:	1858      	adds	r0, r3, r1
 8010a9a:	4282      	cmp	r2, r0
 8010a9c:	6019      	str	r1, [r3, #0]
 8010a9e:	d1dd      	bne.n	8010a5c <_free_r+0x24>
 8010aa0:	6810      	ldr	r0, [r2, #0]
 8010aa2:	6852      	ldr	r2, [r2, #4]
 8010aa4:	605a      	str	r2, [r3, #4]
 8010aa6:	4401      	add	r1, r0
 8010aa8:	6019      	str	r1, [r3, #0]
 8010aaa:	e7d7      	b.n	8010a5c <_free_r+0x24>
 8010aac:	d902      	bls.n	8010ab4 <_free_r+0x7c>
 8010aae:	230c      	movs	r3, #12
 8010ab0:	602b      	str	r3, [r5, #0]
 8010ab2:	e7d3      	b.n	8010a5c <_free_r+0x24>
 8010ab4:	6820      	ldr	r0, [r4, #0]
 8010ab6:	1821      	adds	r1, r4, r0
 8010ab8:	428a      	cmp	r2, r1
 8010aba:	bf04      	itt	eq
 8010abc:	6811      	ldreq	r1, [r2, #0]
 8010abe:	6852      	ldreq	r2, [r2, #4]
 8010ac0:	6062      	str	r2, [r4, #4]
 8010ac2:	bf04      	itt	eq
 8010ac4:	1809      	addeq	r1, r1, r0
 8010ac6:	6021      	streq	r1, [r4, #0]
 8010ac8:	605c      	str	r4, [r3, #4]
 8010aca:	e7c7      	b.n	8010a5c <_free_r+0x24>
 8010acc:	bd38      	pop	{r3, r4, r5, pc}
 8010ace:	bf00      	nop
 8010ad0:	20001f30 	.word	0x20001f30

08010ad4 <_malloc_r>:
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	1ccd      	adds	r5, r1, #3
 8010ad8:	f025 0503 	bic.w	r5, r5, #3
 8010adc:	3508      	adds	r5, #8
 8010ade:	2d0c      	cmp	r5, #12
 8010ae0:	bf38      	it	cc
 8010ae2:	250c      	movcc	r5, #12
 8010ae4:	2d00      	cmp	r5, #0
 8010ae6:	4606      	mov	r6, r0
 8010ae8:	db01      	blt.n	8010aee <_malloc_r+0x1a>
 8010aea:	42a9      	cmp	r1, r5
 8010aec:	d903      	bls.n	8010af6 <_malloc_r+0x22>
 8010aee:	230c      	movs	r3, #12
 8010af0:	6033      	str	r3, [r6, #0]
 8010af2:	2000      	movs	r0, #0
 8010af4:	bd70      	pop	{r4, r5, r6, pc}
 8010af6:	f000 fa6e 	bl	8010fd6 <__malloc_lock>
 8010afa:	4a21      	ldr	r2, [pc, #132]	; (8010b80 <_malloc_r+0xac>)
 8010afc:	6814      	ldr	r4, [r2, #0]
 8010afe:	4621      	mov	r1, r4
 8010b00:	b991      	cbnz	r1, 8010b28 <_malloc_r+0x54>
 8010b02:	4c20      	ldr	r4, [pc, #128]	; (8010b84 <_malloc_r+0xb0>)
 8010b04:	6823      	ldr	r3, [r4, #0]
 8010b06:	b91b      	cbnz	r3, 8010b10 <_malloc_r+0x3c>
 8010b08:	4630      	mov	r0, r6
 8010b0a:	f000 f98f 	bl	8010e2c <_sbrk_r>
 8010b0e:	6020      	str	r0, [r4, #0]
 8010b10:	4629      	mov	r1, r5
 8010b12:	4630      	mov	r0, r6
 8010b14:	f000 f98a 	bl	8010e2c <_sbrk_r>
 8010b18:	1c43      	adds	r3, r0, #1
 8010b1a:	d124      	bne.n	8010b66 <_malloc_r+0x92>
 8010b1c:	230c      	movs	r3, #12
 8010b1e:	6033      	str	r3, [r6, #0]
 8010b20:	4630      	mov	r0, r6
 8010b22:	f000 fa59 	bl	8010fd8 <__malloc_unlock>
 8010b26:	e7e4      	b.n	8010af2 <_malloc_r+0x1e>
 8010b28:	680b      	ldr	r3, [r1, #0]
 8010b2a:	1b5b      	subs	r3, r3, r5
 8010b2c:	d418      	bmi.n	8010b60 <_malloc_r+0x8c>
 8010b2e:	2b0b      	cmp	r3, #11
 8010b30:	d90f      	bls.n	8010b52 <_malloc_r+0x7e>
 8010b32:	600b      	str	r3, [r1, #0]
 8010b34:	50cd      	str	r5, [r1, r3]
 8010b36:	18cc      	adds	r4, r1, r3
 8010b38:	4630      	mov	r0, r6
 8010b3a:	f000 fa4d 	bl	8010fd8 <__malloc_unlock>
 8010b3e:	f104 000b 	add.w	r0, r4, #11
 8010b42:	1d23      	adds	r3, r4, #4
 8010b44:	f020 0007 	bic.w	r0, r0, #7
 8010b48:	1ac3      	subs	r3, r0, r3
 8010b4a:	d0d3      	beq.n	8010af4 <_malloc_r+0x20>
 8010b4c:	425a      	negs	r2, r3
 8010b4e:	50e2      	str	r2, [r4, r3]
 8010b50:	e7d0      	b.n	8010af4 <_malloc_r+0x20>
 8010b52:	428c      	cmp	r4, r1
 8010b54:	684b      	ldr	r3, [r1, #4]
 8010b56:	bf16      	itet	ne
 8010b58:	6063      	strne	r3, [r4, #4]
 8010b5a:	6013      	streq	r3, [r2, #0]
 8010b5c:	460c      	movne	r4, r1
 8010b5e:	e7eb      	b.n	8010b38 <_malloc_r+0x64>
 8010b60:	460c      	mov	r4, r1
 8010b62:	6849      	ldr	r1, [r1, #4]
 8010b64:	e7cc      	b.n	8010b00 <_malloc_r+0x2c>
 8010b66:	1cc4      	adds	r4, r0, #3
 8010b68:	f024 0403 	bic.w	r4, r4, #3
 8010b6c:	42a0      	cmp	r0, r4
 8010b6e:	d005      	beq.n	8010b7c <_malloc_r+0xa8>
 8010b70:	1a21      	subs	r1, r4, r0
 8010b72:	4630      	mov	r0, r6
 8010b74:	f000 f95a 	bl	8010e2c <_sbrk_r>
 8010b78:	3001      	adds	r0, #1
 8010b7a:	d0cf      	beq.n	8010b1c <_malloc_r+0x48>
 8010b7c:	6025      	str	r5, [r4, #0]
 8010b7e:	e7db      	b.n	8010b38 <_malloc_r+0x64>
 8010b80:	20001f30 	.word	0x20001f30
 8010b84:	20001f34 	.word	0x20001f34

08010b88 <__ssputs_r>:
 8010b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b8c:	688e      	ldr	r6, [r1, #8]
 8010b8e:	429e      	cmp	r6, r3
 8010b90:	4682      	mov	sl, r0
 8010b92:	460c      	mov	r4, r1
 8010b94:	4690      	mov	r8, r2
 8010b96:	4699      	mov	r9, r3
 8010b98:	d837      	bhi.n	8010c0a <__ssputs_r+0x82>
 8010b9a:	898a      	ldrh	r2, [r1, #12]
 8010b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ba0:	d031      	beq.n	8010c06 <__ssputs_r+0x7e>
 8010ba2:	6825      	ldr	r5, [r4, #0]
 8010ba4:	6909      	ldr	r1, [r1, #16]
 8010ba6:	1a6f      	subs	r7, r5, r1
 8010ba8:	6965      	ldr	r5, [r4, #20]
 8010baa:	2302      	movs	r3, #2
 8010bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8010bb4:	f109 0301 	add.w	r3, r9, #1
 8010bb8:	443b      	add	r3, r7
 8010bba:	429d      	cmp	r5, r3
 8010bbc:	bf38      	it	cc
 8010bbe:	461d      	movcc	r5, r3
 8010bc0:	0553      	lsls	r3, r2, #21
 8010bc2:	d530      	bpl.n	8010c26 <__ssputs_r+0x9e>
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	f7ff ff85 	bl	8010ad4 <_malloc_r>
 8010bca:	4606      	mov	r6, r0
 8010bcc:	b950      	cbnz	r0, 8010be4 <__ssputs_r+0x5c>
 8010bce:	230c      	movs	r3, #12
 8010bd0:	f8ca 3000 	str.w	r3, [sl]
 8010bd4:	89a3      	ldrh	r3, [r4, #12]
 8010bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bda:	81a3      	strh	r3, [r4, #12]
 8010bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be4:	463a      	mov	r2, r7
 8010be6:	6921      	ldr	r1, [r4, #16]
 8010be8:	f7ff fc32 	bl	8010450 <memcpy>
 8010bec:	89a3      	ldrh	r3, [r4, #12]
 8010bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bf6:	81a3      	strh	r3, [r4, #12]
 8010bf8:	6126      	str	r6, [r4, #16]
 8010bfa:	6165      	str	r5, [r4, #20]
 8010bfc:	443e      	add	r6, r7
 8010bfe:	1bed      	subs	r5, r5, r7
 8010c00:	6026      	str	r6, [r4, #0]
 8010c02:	60a5      	str	r5, [r4, #8]
 8010c04:	464e      	mov	r6, r9
 8010c06:	454e      	cmp	r6, r9
 8010c08:	d900      	bls.n	8010c0c <__ssputs_r+0x84>
 8010c0a:	464e      	mov	r6, r9
 8010c0c:	4632      	mov	r2, r6
 8010c0e:	4641      	mov	r1, r8
 8010c10:	6820      	ldr	r0, [r4, #0]
 8010c12:	f000 f9c7 	bl	8010fa4 <memmove>
 8010c16:	68a3      	ldr	r3, [r4, #8]
 8010c18:	1b9b      	subs	r3, r3, r6
 8010c1a:	60a3      	str	r3, [r4, #8]
 8010c1c:	6823      	ldr	r3, [r4, #0]
 8010c1e:	441e      	add	r6, r3
 8010c20:	6026      	str	r6, [r4, #0]
 8010c22:	2000      	movs	r0, #0
 8010c24:	e7dc      	b.n	8010be0 <__ssputs_r+0x58>
 8010c26:	462a      	mov	r2, r5
 8010c28:	f000 f9d7 	bl	8010fda <_realloc_r>
 8010c2c:	4606      	mov	r6, r0
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d1e2      	bne.n	8010bf8 <__ssputs_r+0x70>
 8010c32:	6921      	ldr	r1, [r4, #16]
 8010c34:	4650      	mov	r0, sl
 8010c36:	f7ff feff 	bl	8010a38 <_free_r>
 8010c3a:	e7c8      	b.n	8010bce <__ssputs_r+0x46>

08010c3c <_svfiprintf_r>:
 8010c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c40:	461d      	mov	r5, r3
 8010c42:	898b      	ldrh	r3, [r1, #12]
 8010c44:	061f      	lsls	r7, r3, #24
 8010c46:	b09d      	sub	sp, #116	; 0x74
 8010c48:	4680      	mov	r8, r0
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	4616      	mov	r6, r2
 8010c4e:	d50f      	bpl.n	8010c70 <_svfiprintf_r+0x34>
 8010c50:	690b      	ldr	r3, [r1, #16]
 8010c52:	b96b      	cbnz	r3, 8010c70 <_svfiprintf_r+0x34>
 8010c54:	2140      	movs	r1, #64	; 0x40
 8010c56:	f7ff ff3d 	bl	8010ad4 <_malloc_r>
 8010c5a:	6020      	str	r0, [r4, #0]
 8010c5c:	6120      	str	r0, [r4, #16]
 8010c5e:	b928      	cbnz	r0, 8010c6c <_svfiprintf_r+0x30>
 8010c60:	230c      	movs	r3, #12
 8010c62:	f8c8 3000 	str.w	r3, [r8]
 8010c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c6a:	e0c8      	b.n	8010dfe <_svfiprintf_r+0x1c2>
 8010c6c:	2340      	movs	r3, #64	; 0x40
 8010c6e:	6163      	str	r3, [r4, #20]
 8010c70:	2300      	movs	r3, #0
 8010c72:	9309      	str	r3, [sp, #36]	; 0x24
 8010c74:	2320      	movs	r3, #32
 8010c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c7a:	2330      	movs	r3, #48	; 0x30
 8010c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c80:	9503      	str	r5, [sp, #12]
 8010c82:	f04f 0b01 	mov.w	fp, #1
 8010c86:	4637      	mov	r7, r6
 8010c88:	463d      	mov	r5, r7
 8010c8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010c8e:	b10b      	cbz	r3, 8010c94 <_svfiprintf_r+0x58>
 8010c90:	2b25      	cmp	r3, #37	; 0x25
 8010c92:	d13e      	bne.n	8010d12 <_svfiprintf_r+0xd6>
 8010c94:	ebb7 0a06 	subs.w	sl, r7, r6
 8010c98:	d00b      	beq.n	8010cb2 <_svfiprintf_r+0x76>
 8010c9a:	4653      	mov	r3, sl
 8010c9c:	4632      	mov	r2, r6
 8010c9e:	4621      	mov	r1, r4
 8010ca0:	4640      	mov	r0, r8
 8010ca2:	f7ff ff71 	bl	8010b88 <__ssputs_r>
 8010ca6:	3001      	adds	r0, #1
 8010ca8:	f000 80a4 	beq.w	8010df4 <_svfiprintf_r+0x1b8>
 8010cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cae:	4453      	add	r3, sl
 8010cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8010cb2:	783b      	ldrb	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f000 809d 	beq.w	8010df4 <_svfiprintf_r+0x1b8>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cc4:	9304      	str	r3, [sp, #16]
 8010cc6:	9307      	str	r3, [sp, #28]
 8010cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8010cce:	462f      	mov	r7, r5
 8010cd0:	2205      	movs	r2, #5
 8010cd2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010cd6:	4850      	ldr	r0, [pc, #320]	; (8010e18 <_svfiprintf_r+0x1dc>)
 8010cd8:	f7ef faaa 	bl	8000230 <memchr>
 8010cdc:	9b04      	ldr	r3, [sp, #16]
 8010cde:	b9d0      	cbnz	r0, 8010d16 <_svfiprintf_r+0xda>
 8010ce0:	06d9      	lsls	r1, r3, #27
 8010ce2:	bf44      	itt	mi
 8010ce4:	2220      	movmi	r2, #32
 8010ce6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010cea:	071a      	lsls	r2, r3, #28
 8010cec:	bf44      	itt	mi
 8010cee:	222b      	movmi	r2, #43	; 0x2b
 8010cf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010cf4:	782a      	ldrb	r2, [r5, #0]
 8010cf6:	2a2a      	cmp	r2, #42	; 0x2a
 8010cf8:	d015      	beq.n	8010d26 <_svfiprintf_r+0xea>
 8010cfa:	9a07      	ldr	r2, [sp, #28]
 8010cfc:	462f      	mov	r7, r5
 8010cfe:	2000      	movs	r0, #0
 8010d00:	250a      	movs	r5, #10
 8010d02:	4639      	mov	r1, r7
 8010d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d08:	3b30      	subs	r3, #48	; 0x30
 8010d0a:	2b09      	cmp	r3, #9
 8010d0c:	d94d      	bls.n	8010daa <_svfiprintf_r+0x16e>
 8010d0e:	b1b8      	cbz	r0, 8010d40 <_svfiprintf_r+0x104>
 8010d10:	e00f      	b.n	8010d32 <_svfiprintf_r+0xf6>
 8010d12:	462f      	mov	r7, r5
 8010d14:	e7b8      	b.n	8010c88 <_svfiprintf_r+0x4c>
 8010d16:	4a40      	ldr	r2, [pc, #256]	; (8010e18 <_svfiprintf_r+0x1dc>)
 8010d18:	1a80      	subs	r0, r0, r2
 8010d1a:	fa0b f000 	lsl.w	r0, fp, r0
 8010d1e:	4318      	orrs	r0, r3
 8010d20:	9004      	str	r0, [sp, #16]
 8010d22:	463d      	mov	r5, r7
 8010d24:	e7d3      	b.n	8010cce <_svfiprintf_r+0x92>
 8010d26:	9a03      	ldr	r2, [sp, #12]
 8010d28:	1d11      	adds	r1, r2, #4
 8010d2a:	6812      	ldr	r2, [r2, #0]
 8010d2c:	9103      	str	r1, [sp, #12]
 8010d2e:	2a00      	cmp	r2, #0
 8010d30:	db01      	blt.n	8010d36 <_svfiprintf_r+0xfa>
 8010d32:	9207      	str	r2, [sp, #28]
 8010d34:	e004      	b.n	8010d40 <_svfiprintf_r+0x104>
 8010d36:	4252      	negs	r2, r2
 8010d38:	f043 0302 	orr.w	r3, r3, #2
 8010d3c:	9207      	str	r2, [sp, #28]
 8010d3e:	9304      	str	r3, [sp, #16]
 8010d40:	783b      	ldrb	r3, [r7, #0]
 8010d42:	2b2e      	cmp	r3, #46	; 0x2e
 8010d44:	d10c      	bne.n	8010d60 <_svfiprintf_r+0x124>
 8010d46:	787b      	ldrb	r3, [r7, #1]
 8010d48:	2b2a      	cmp	r3, #42	; 0x2a
 8010d4a:	d133      	bne.n	8010db4 <_svfiprintf_r+0x178>
 8010d4c:	9b03      	ldr	r3, [sp, #12]
 8010d4e:	1d1a      	adds	r2, r3, #4
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	9203      	str	r2, [sp, #12]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	bfb8      	it	lt
 8010d58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010d5c:	3702      	adds	r7, #2
 8010d5e:	9305      	str	r3, [sp, #20]
 8010d60:	4d2e      	ldr	r5, [pc, #184]	; (8010e1c <_svfiprintf_r+0x1e0>)
 8010d62:	7839      	ldrb	r1, [r7, #0]
 8010d64:	2203      	movs	r2, #3
 8010d66:	4628      	mov	r0, r5
 8010d68:	f7ef fa62 	bl	8000230 <memchr>
 8010d6c:	b138      	cbz	r0, 8010d7e <_svfiprintf_r+0x142>
 8010d6e:	2340      	movs	r3, #64	; 0x40
 8010d70:	1b40      	subs	r0, r0, r5
 8010d72:	fa03 f000 	lsl.w	r0, r3, r0
 8010d76:	9b04      	ldr	r3, [sp, #16]
 8010d78:	4303      	orrs	r3, r0
 8010d7a:	3701      	adds	r7, #1
 8010d7c:	9304      	str	r3, [sp, #16]
 8010d7e:	7839      	ldrb	r1, [r7, #0]
 8010d80:	4827      	ldr	r0, [pc, #156]	; (8010e20 <_svfiprintf_r+0x1e4>)
 8010d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d86:	2206      	movs	r2, #6
 8010d88:	1c7e      	adds	r6, r7, #1
 8010d8a:	f7ef fa51 	bl	8000230 <memchr>
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	d038      	beq.n	8010e04 <_svfiprintf_r+0x1c8>
 8010d92:	4b24      	ldr	r3, [pc, #144]	; (8010e24 <_svfiprintf_r+0x1e8>)
 8010d94:	bb13      	cbnz	r3, 8010ddc <_svfiprintf_r+0x1a0>
 8010d96:	9b03      	ldr	r3, [sp, #12]
 8010d98:	3307      	adds	r3, #7
 8010d9a:	f023 0307 	bic.w	r3, r3, #7
 8010d9e:	3308      	adds	r3, #8
 8010da0:	9303      	str	r3, [sp, #12]
 8010da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da4:	444b      	add	r3, r9
 8010da6:	9309      	str	r3, [sp, #36]	; 0x24
 8010da8:	e76d      	b.n	8010c86 <_svfiprintf_r+0x4a>
 8010daa:	fb05 3202 	mla	r2, r5, r2, r3
 8010dae:	2001      	movs	r0, #1
 8010db0:	460f      	mov	r7, r1
 8010db2:	e7a6      	b.n	8010d02 <_svfiprintf_r+0xc6>
 8010db4:	2300      	movs	r3, #0
 8010db6:	3701      	adds	r7, #1
 8010db8:	9305      	str	r3, [sp, #20]
 8010dba:	4619      	mov	r1, r3
 8010dbc:	250a      	movs	r5, #10
 8010dbe:	4638      	mov	r0, r7
 8010dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dc4:	3a30      	subs	r2, #48	; 0x30
 8010dc6:	2a09      	cmp	r2, #9
 8010dc8:	d903      	bls.n	8010dd2 <_svfiprintf_r+0x196>
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d0c8      	beq.n	8010d60 <_svfiprintf_r+0x124>
 8010dce:	9105      	str	r1, [sp, #20]
 8010dd0:	e7c6      	b.n	8010d60 <_svfiprintf_r+0x124>
 8010dd2:	fb05 2101 	mla	r1, r5, r1, r2
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	4607      	mov	r7, r0
 8010dda:	e7f0      	b.n	8010dbe <_svfiprintf_r+0x182>
 8010ddc:	ab03      	add	r3, sp, #12
 8010dde:	9300      	str	r3, [sp, #0]
 8010de0:	4622      	mov	r2, r4
 8010de2:	4b11      	ldr	r3, [pc, #68]	; (8010e28 <_svfiprintf_r+0x1ec>)
 8010de4:	a904      	add	r1, sp, #16
 8010de6:	4640      	mov	r0, r8
 8010de8:	f7fd fdc8 	bl	800e97c <_printf_float>
 8010dec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010df0:	4681      	mov	r9, r0
 8010df2:	d1d6      	bne.n	8010da2 <_svfiprintf_r+0x166>
 8010df4:	89a3      	ldrh	r3, [r4, #12]
 8010df6:	065b      	lsls	r3, r3, #25
 8010df8:	f53f af35 	bmi.w	8010c66 <_svfiprintf_r+0x2a>
 8010dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dfe:	b01d      	add	sp, #116	; 0x74
 8010e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e04:	ab03      	add	r3, sp, #12
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	4622      	mov	r2, r4
 8010e0a:	4b07      	ldr	r3, [pc, #28]	; (8010e28 <_svfiprintf_r+0x1ec>)
 8010e0c:	a904      	add	r1, sp, #16
 8010e0e:	4640      	mov	r0, r8
 8010e10:	f7fe f86a 	bl	800eee8 <_printf_i>
 8010e14:	e7ea      	b.n	8010dec <_svfiprintf_r+0x1b0>
 8010e16:	bf00      	nop
 8010e18:	080138fc 	.word	0x080138fc
 8010e1c:	08013902 	.word	0x08013902
 8010e20:	08013906 	.word	0x08013906
 8010e24:	0800e97d 	.word	0x0800e97d
 8010e28:	08010b89 	.word	0x08010b89

08010e2c <_sbrk_r>:
 8010e2c:	b538      	push	{r3, r4, r5, lr}
 8010e2e:	4c06      	ldr	r4, [pc, #24]	; (8010e48 <_sbrk_r+0x1c>)
 8010e30:	2300      	movs	r3, #0
 8010e32:	4605      	mov	r5, r0
 8010e34:	4608      	mov	r0, r1
 8010e36:	6023      	str	r3, [r4, #0]
 8010e38:	f7f7 f8ba 	bl	8007fb0 <_sbrk>
 8010e3c:	1c43      	adds	r3, r0, #1
 8010e3e:	d102      	bne.n	8010e46 <_sbrk_r+0x1a>
 8010e40:	6823      	ldr	r3, [r4, #0]
 8010e42:	b103      	cbz	r3, 8010e46 <_sbrk_r+0x1a>
 8010e44:	602b      	str	r3, [r5, #0]
 8010e46:	bd38      	pop	{r3, r4, r5, pc}
 8010e48:	20002968 	.word	0x20002968

08010e4c <__sread>:
 8010e4c:	b510      	push	{r4, lr}
 8010e4e:	460c      	mov	r4, r1
 8010e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e54:	f000 f8e8 	bl	8011028 <_read_r>
 8010e58:	2800      	cmp	r0, #0
 8010e5a:	bfab      	itete	ge
 8010e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8010e60:	181b      	addge	r3, r3, r0
 8010e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e66:	bfac      	ite	ge
 8010e68:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e6a:	81a3      	strhlt	r3, [r4, #12]
 8010e6c:	bd10      	pop	{r4, pc}

08010e6e <__swrite>:
 8010e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e72:	461f      	mov	r7, r3
 8010e74:	898b      	ldrh	r3, [r1, #12]
 8010e76:	05db      	lsls	r3, r3, #23
 8010e78:	4605      	mov	r5, r0
 8010e7a:	460c      	mov	r4, r1
 8010e7c:	4616      	mov	r6, r2
 8010e7e:	d505      	bpl.n	8010e8c <__swrite+0x1e>
 8010e80:	2302      	movs	r3, #2
 8010e82:	2200      	movs	r2, #0
 8010e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e88:	f000 f868 	bl	8010f5c <_lseek_r>
 8010e8c:	89a3      	ldrh	r3, [r4, #12]
 8010e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e96:	81a3      	strh	r3, [r4, #12]
 8010e98:	4632      	mov	r2, r6
 8010e9a:	463b      	mov	r3, r7
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea2:	f000 b817 	b.w	8010ed4 <_write_r>

08010ea6 <__sseek>:
 8010ea6:	b510      	push	{r4, lr}
 8010ea8:	460c      	mov	r4, r1
 8010eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eae:	f000 f855 	bl	8010f5c <_lseek_r>
 8010eb2:	1c43      	adds	r3, r0, #1
 8010eb4:	89a3      	ldrh	r3, [r4, #12]
 8010eb6:	bf15      	itete	ne
 8010eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ec2:	81a3      	strheq	r3, [r4, #12]
 8010ec4:	bf18      	it	ne
 8010ec6:	81a3      	strhne	r3, [r4, #12]
 8010ec8:	bd10      	pop	{r4, pc}

08010eca <__sclose>:
 8010eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ece:	f000 b813 	b.w	8010ef8 <_close_r>
	...

08010ed4 <_write_r>:
 8010ed4:	b538      	push	{r3, r4, r5, lr}
 8010ed6:	4c07      	ldr	r4, [pc, #28]	; (8010ef4 <_write_r+0x20>)
 8010ed8:	4605      	mov	r5, r0
 8010eda:	4608      	mov	r0, r1
 8010edc:	4611      	mov	r1, r2
 8010ede:	2200      	movs	r2, #0
 8010ee0:	6022      	str	r2, [r4, #0]
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	f7f6 fd39 	bl	800795a <_write>
 8010ee8:	1c43      	adds	r3, r0, #1
 8010eea:	d102      	bne.n	8010ef2 <_write_r+0x1e>
 8010eec:	6823      	ldr	r3, [r4, #0]
 8010eee:	b103      	cbz	r3, 8010ef2 <_write_r+0x1e>
 8010ef0:	602b      	str	r3, [r5, #0]
 8010ef2:	bd38      	pop	{r3, r4, r5, pc}
 8010ef4:	20002968 	.word	0x20002968

08010ef8 <_close_r>:
 8010ef8:	b538      	push	{r3, r4, r5, lr}
 8010efa:	4c06      	ldr	r4, [pc, #24]	; (8010f14 <_close_r+0x1c>)
 8010efc:	2300      	movs	r3, #0
 8010efe:	4605      	mov	r5, r0
 8010f00:	4608      	mov	r0, r1
 8010f02:	6023      	str	r3, [r4, #0]
 8010f04:	f7f7 f81f 	bl	8007f46 <_close>
 8010f08:	1c43      	adds	r3, r0, #1
 8010f0a:	d102      	bne.n	8010f12 <_close_r+0x1a>
 8010f0c:	6823      	ldr	r3, [r4, #0]
 8010f0e:	b103      	cbz	r3, 8010f12 <_close_r+0x1a>
 8010f10:	602b      	str	r3, [r5, #0]
 8010f12:	bd38      	pop	{r3, r4, r5, pc}
 8010f14:	20002968 	.word	0x20002968

08010f18 <_fstat_r>:
 8010f18:	b538      	push	{r3, r4, r5, lr}
 8010f1a:	4c07      	ldr	r4, [pc, #28]	; (8010f38 <_fstat_r+0x20>)
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	4605      	mov	r5, r0
 8010f20:	4608      	mov	r0, r1
 8010f22:	4611      	mov	r1, r2
 8010f24:	6023      	str	r3, [r4, #0]
 8010f26:	f7f7 f81a 	bl	8007f5e <_fstat>
 8010f2a:	1c43      	adds	r3, r0, #1
 8010f2c:	d102      	bne.n	8010f34 <_fstat_r+0x1c>
 8010f2e:	6823      	ldr	r3, [r4, #0]
 8010f30:	b103      	cbz	r3, 8010f34 <_fstat_r+0x1c>
 8010f32:	602b      	str	r3, [r5, #0]
 8010f34:	bd38      	pop	{r3, r4, r5, pc}
 8010f36:	bf00      	nop
 8010f38:	20002968 	.word	0x20002968

08010f3c <_isatty_r>:
 8010f3c:	b538      	push	{r3, r4, r5, lr}
 8010f3e:	4c06      	ldr	r4, [pc, #24]	; (8010f58 <_isatty_r+0x1c>)
 8010f40:	2300      	movs	r3, #0
 8010f42:	4605      	mov	r5, r0
 8010f44:	4608      	mov	r0, r1
 8010f46:	6023      	str	r3, [r4, #0]
 8010f48:	f7f7 f819 	bl	8007f7e <_isatty>
 8010f4c:	1c43      	adds	r3, r0, #1
 8010f4e:	d102      	bne.n	8010f56 <_isatty_r+0x1a>
 8010f50:	6823      	ldr	r3, [r4, #0]
 8010f52:	b103      	cbz	r3, 8010f56 <_isatty_r+0x1a>
 8010f54:	602b      	str	r3, [r5, #0]
 8010f56:	bd38      	pop	{r3, r4, r5, pc}
 8010f58:	20002968 	.word	0x20002968

08010f5c <_lseek_r>:
 8010f5c:	b538      	push	{r3, r4, r5, lr}
 8010f5e:	4c07      	ldr	r4, [pc, #28]	; (8010f7c <_lseek_r+0x20>)
 8010f60:	4605      	mov	r5, r0
 8010f62:	4608      	mov	r0, r1
 8010f64:	4611      	mov	r1, r2
 8010f66:	2200      	movs	r2, #0
 8010f68:	6022      	str	r2, [r4, #0]
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	f7f7 f812 	bl	8007f94 <_lseek>
 8010f70:	1c43      	adds	r3, r0, #1
 8010f72:	d102      	bne.n	8010f7a <_lseek_r+0x1e>
 8010f74:	6823      	ldr	r3, [r4, #0]
 8010f76:	b103      	cbz	r3, 8010f7a <_lseek_r+0x1e>
 8010f78:	602b      	str	r3, [r5, #0]
 8010f7a:	bd38      	pop	{r3, r4, r5, pc}
 8010f7c:	20002968 	.word	0x20002968

08010f80 <__ascii_mbtowc>:
 8010f80:	b082      	sub	sp, #8
 8010f82:	b901      	cbnz	r1, 8010f86 <__ascii_mbtowc+0x6>
 8010f84:	a901      	add	r1, sp, #4
 8010f86:	b142      	cbz	r2, 8010f9a <__ascii_mbtowc+0x1a>
 8010f88:	b14b      	cbz	r3, 8010f9e <__ascii_mbtowc+0x1e>
 8010f8a:	7813      	ldrb	r3, [r2, #0]
 8010f8c:	600b      	str	r3, [r1, #0]
 8010f8e:	7812      	ldrb	r2, [r2, #0]
 8010f90:	1c10      	adds	r0, r2, #0
 8010f92:	bf18      	it	ne
 8010f94:	2001      	movne	r0, #1
 8010f96:	b002      	add	sp, #8
 8010f98:	4770      	bx	lr
 8010f9a:	4610      	mov	r0, r2
 8010f9c:	e7fb      	b.n	8010f96 <__ascii_mbtowc+0x16>
 8010f9e:	f06f 0001 	mvn.w	r0, #1
 8010fa2:	e7f8      	b.n	8010f96 <__ascii_mbtowc+0x16>

08010fa4 <memmove>:
 8010fa4:	4288      	cmp	r0, r1
 8010fa6:	b510      	push	{r4, lr}
 8010fa8:	eb01 0302 	add.w	r3, r1, r2
 8010fac:	d807      	bhi.n	8010fbe <memmove+0x1a>
 8010fae:	1e42      	subs	r2, r0, #1
 8010fb0:	4299      	cmp	r1, r3
 8010fb2:	d00a      	beq.n	8010fca <memmove+0x26>
 8010fb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fb8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010fbc:	e7f8      	b.n	8010fb0 <memmove+0xc>
 8010fbe:	4283      	cmp	r3, r0
 8010fc0:	d9f5      	bls.n	8010fae <memmove+0xa>
 8010fc2:	1881      	adds	r1, r0, r2
 8010fc4:	1ad2      	subs	r2, r2, r3
 8010fc6:	42d3      	cmn	r3, r2
 8010fc8:	d100      	bne.n	8010fcc <memmove+0x28>
 8010fca:	bd10      	pop	{r4, pc}
 8010fcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fd0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010fd4:	e7f7      	b.n	8010fc6 <memmove+0x22>

08010fd6 <__malloc_lock>:
 8010fd6:	4770      	bx	lr

08010fd8 <__malloc_unlock>:
 8010fd8:	4770      	bx	lr

08010fda <_realloc_r>:
 8010fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fdc:	4607      	mov	r7, r0
 8010fde:	4614      	mov	r4, r2
 8010fe0:	460e      	mov	r6, r1
 8010fe2:	b921      	cbnz	r1, 8010fee <_realloc_r+0x14>
 8010fe4:	4611      	mov	r1, r2
 8010fe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010fea:	f7ff bd73 	b.w	8010ad4 <_malloc_r>
 8010fee:	b922      	cbnz	r2, 8010ffa <_realloc_r+0x20>
 8010ff0:	f7ff fd22 	bl	8010a38 <_free_r>
 8010ff4:	4625      	mov	r5, r4
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ffa:	f000 f834 	bl	8011066 <_malloc_usable_size_r>
 8010ffe:	42a0      	cmp	r0, r4
 8011000:	d20f      	bcs.n	8011022 <_realloc_r+0x48>
 8011002:	4621      	mov	r1, r4
 8011004:	4638      	mov	r0, r7
 8011006:	f7ff fd65 	bl	8010ad4 <_malloc_r>
 801100a:	4605      	mov	r5, r0
 801100c:	2800      	cmp	r0, #0
 801100e:	d0f2      	beq.n	8010ff6 <_realloc_r+0x1c>
 8011010:	4631      	mov	r1, r6
 8011012:	4622      	mov	r2, r4
 8011014:	f7ff fa1c 	bl	8010450 <memcpy>
 8011018:	4631      	mov	r1, r6
 801101a:	4638      	mov	r0, r7
 801101c:	f7ff fd0c 	bl	8010a38 <_free_r>
 8011020:	e7e9      	b.n	8010ff6 <_realloc_r+0x1c>
 8011022:	4635      	mov	r5, r6
 8011024:	e7e7      	b.n	8010ff6 <_realloc_r+0x1c>
	...

08011028 <_read_r>:
 8011028:	b538      	push	{r3, r4, r5, lr}
 801102a:	4c07      	ldr	r4, [pc, #28]	; (8011048 <_read_r+0x20>)
 801102c:	4605      	mov	r5, r0
 801102e:	4608      	mov	r0, r1
 8011030:	4611      	mov	r1, r2
 8011032:	2200      	movs	r2, #0
 8011034:	6022      	str	r2, [r4, #0]
 8011036:	461a      	mov	r2, r3
 8011038:	f7f6 ff68 	bl	8007f0c <_read>
 801103c:	1c43      	adds	r3, r0, #1
 801103e:	d102      	bne.n	8011046 <_read_r+0x1e>
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	b103      	cbz	r3, 8011046 <_read_r+0x1e>
 8011044:	602b      	str	r3, [r5, #0]
 8011046:	bd38      	pop	{r3, r4, r5, pc}
 8011048:	20002968 	.word	0x20002968

0801104c <__ascii_wctomb>:
 801104c:	b149      	cbz	r1, 8011062 <__ascii_wctomb+0x16>
 801104e:	2aff      	cmp	r2, #255	; 0xff
 8011050:	bf85      	ittet	hi
 8011052:	238a      	movhi	r3, #138	; 0x8a
 8011054:	6003      	strhi	r3, [r0, #0]
 8011056:	700a      	strbls	r2, [r1, #0]
 8011058:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801105c:	bf98      	it	ls
 801105e:	2001      	movls	r0, #1
 8011060:	4770      	bx	lr
 8011062:	4608      	mov	r0, r1
 8011064:	4770      	bx	lr

08011066 <_malloc_usable_size_r>:
 8011066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801106a:	1f18      	subs	r0, r3, #4
 801106c:	2b00      	cmp	r3, #0
 801106e:	bfbc      	itt	lt
 8011070:	580b      	ldrlt	r3, [r1, r0]
 8011072:	18c0      	addlt	r0, r0, r3
 8011074:	4770      	bx	lr
	...

08011078 <pow>:
 8011078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801107c:	ed2d 8b04 	vpush	{d8-d9}
 8011080:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011354 <pow+0x2dc>
 8011084:	b08d      	sub	sp, #52	; 0x34
 8011086:	ec57 6b10 	vmov	r6, r7, d0
 801108a:	ec55 4b11 	vmov	r4, r5, d1
 801108e:	f000 f963 	bl	8011358 <__ieee754_pow>
 8011092:	f999 3000 	ldrsb.w	r3, [r9]
 8011096:	9300      	str	r3, [sp, #0]
 8011098:	3301      	adds	r3, #1
 801109a:	eeb0 8a40 	vmov.f32	s16, s0
 801109e:	eef0 8a60 	vmov.f32	s17, s1
 80110a2:	46c8      	mov	r8, r9
 80110a4:	d05f      	beq.n	8011166 <pow+0xee>
 80110a6:	4622      	mov	r2, r4
 80110a8:	462b      	mov	r3, r5
 80110aa:	4620      	mov	r0, r4
 80110ac:	4629      	mov	r1, r5
 80110ae:	f7ef fd65 	bl	8000b7c <__aeabi_dcmpun>
 80110b2:	4683      	mov	fp, r0
 80110b4:	2800      	cmp	r0, #0
 80110b6:	d156      	bne.n	8011166 <pow+0xee>
 80110b8:	4632      	mov	r2, r6
 80110ba:	463b      	mov	r3, r7
 80110bc:	4630      	mov	r0, r6
 80110be:	4639      	mov	r1, r7
 80110c0:	f7ef fd5c 	bl	8000b7c <__aeabi_dcmpun>
 80110c4:	9001      	str	r0, [sp, #4]
 80110c6:	b1e8      	cbz	r0, 8011104 <pow+0x8c>
 80110c8:	2200      	movs	r2, #0
 80110ca:	2300      	movs	r3, #0
 80110cc:	4620      	mov	r0, r4
 80110ce:	4629      	mov	r1, r5
 80110d0:	f7ef fd22 	bl	8000b18 <__aeabi_dcmpeq>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d046      	beq.n	8011166 <pow+0xee>
 80110d8:	2301      	movs	r3, #1
 80110da:	9302      	str	r3, [sp, #8]
 80110dc:	4b96      	ldr	r3, [pc, #600]	; (8011338 <pow+0x2c0>)
 80110de:	9303      	str	r3, [sp, #12]
 80110e0:	4b96      	ldr	r3, [pc, #600]	; (801133c <pow+0x2c4>)
 80110e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80110e6:	2200      	movs	r2, #0
 80110e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80110ec:	9b00      	ldr	r3, [sp, #0]
 80110ee:	2b02      	cmp	r3, #2
 80110f0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80110f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80110f8:	d033      	beq.n	8011162 <pow+0xea>
 80110fa:	a802      	add	r0, sp, #8
 80110fc:	f000 fefb 	bl	8011ef6 <matherr>
 8011100:	bb48      	cbnz	r0, 8011156 <pow+0xde>
 8011102:	e05d      	b.n	80111c0 <pow+0x148>
 8011104:	f04f 0a00 	mov.w	sl, #0
 8011108:	f04f 0b00 	mov.w	fp, #0
 801110c:	4652      	mov	r2, sl
 801110e:	465b      	mov	r3, fp
 8011110:	4630      	mov	r0, r6
 8011112:	4639      	mov	r1, r7
 8011114:	f7ef fd00 	bl	8000b18 <__aeabi_dcmpeq>
 8011118:	ec4b ab19 	vmov	d9, sl, fp
 801111c:	2800      	cmp	r0, #0
 801111e:	d054      	beq.n	80111ca <pow+0x152>
 8011120:	4652      	mov	r2, sl
 8011122:	465b      	mov	r3, fp
 8011124:	4620      	mov	r0, r4
 8011126:	4629      	mov	r1, r5
 8011128:	f7ef fcf6 	bl	8000b18 <__aeabi_dcmpeq>
 801112c:	4680      	mov	r8, r0
 801112e:	b318      	cbz	r0, 8011178 <pow+0x100>
 8011130:	2301      	movs	r3, #1
 8011132:	9302      	str	r3, [sp, #8]
 8011134:	4b80      	ldr	r3, [pc, #512]	; (8011338 <pow+0x2c0>)
 8011136:	9303      	str	r3, [sp, #12]
 8011138:	9b01      	ldr	r3, [sp, #4]
 801113a:	930a      	str	r3, [sp, #40]	; 0x28
 801113c:	9b00      	ldr	r3, [sp, #0]
 801113e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011142:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011146:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d0d5      	beq.n	80110fa <pow+0x82>
 801114e:	4b7b      	ldr	r3, [pc, #492]	; (801133c <pow+0x2c4>)
 8011150:	2200      	movs	r2, #0
 8011152:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011158:	b11b      	cbz	r3, 8011162 <pow+0xea>
 801115a:	f7fd fb49 	bl	800e7f0 <__errno>
 801115e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011160:	6003      	str	r3, [r0, #0]
 8011162:	ed9d 8b08 	vldr	d8, [sp, #32]
 8011166:	eeb0 0a48 	vmov.f32	s0, s16
 801116a:	eef0 0a68 	vmov.f32	s1, s17
 801116e:	b00d      	add	sp, #52	; 0x34
 8011170:	ecbd 8b04 	vpop	{d8-d9}
 8011174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011178:	ec45 4b10 	vmov	d0, r4, r5
 801117c:	f000 feb3 	bl	8011ee6 <finite>
 8011180:	2800      	cmp	r0, #0
 8011182:	d0f0      	beq.n	8011166 <pow+0xee>
 8011184:	4652      	mov	r2, sl
 8011186:	465b      	mov	r3, fp
 8011188:	4620      	mov	r0, r4
 801118a:	4629      	mov	r1, r5
 801118c:	f7ef fcce 	bl	8000b2c <__aeabi_dcmplt>
 8011190:	2800      	cmp	r0, #0
 8011192:	d0e8      	beq.n	8011166 <pow+0xee>
 8011194:	2301      	movs	r3, #1
 8011196:	9302      	str	r3, [sp, #8]
 8011198:	4b67      	ldr	r3, [pc, #412]	; (8011338 <pow+0x2c0>)
 801119a:	9303      	str	r3, [sp, #12]
 801119c:	f999 3000 	ldrsb.w	r3, [r9]
 80111a0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80111a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80111a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80111ac:	b913      	cbnz	r3, 80111b4 <pow+0x13c>
 80111ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80111b2:	e7a2      	b.n	80110fa <pow+0x82>
 80111b4:	4962      	ldr	r1, [pc, #392]	; (8011340 <pow+0x2c8>)
 80111b6:	2000      	movs	r0, #0
 80111b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80111bc:	2b02      	cmp	r3, #2
 80111be:	d19c      	bne.n	80110fa <pow+0x82>
 80111c0:	f7fd fb16 	bl	800e7f0 <__errno>
 80111c4:	2321      	movs	r3, #33	; 0x21
 80111c6:	6003      	str	r3, [r0, #0]
 80111c8:	e7c5      	b.n	8011156 <pow+0xde>
 80111ca:	eeb0 0a48 	vmov.f32	s0, s16
 80111ce:	eef0 0a68 	vmov.f32	s1, s17
 80111d2:	f000 fe88 	bl	8011ee6 <finite>
 80111d6:	9000      	str	r0, [sp, #0]
 80111d8:	2800      	cmp	r0, #0
 80111da:	f040 8081 	bne.w	80112e0 <pow+0x268>
 80111de:	ec47 6b10 	vmov	d0, r6, r7
 80111e2:	f000 fe80 	bl	8011ee6 <finite>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	d07a      	beq.n	80112e0 <pow+0x268>
 80111ea:	ec45 4b10 	vmov	d0, r4, r5
 80111ee:	f000 fe7a 	bl	8011ee6 <finite>
 80111f2:	2800      	cmp	r0, #0
 80111f4:	d074      	beq.n	80112e0 <pow+0x268>
 80111f6:	ec53 2b18 	vmov	r2, r3, d8
 80111fa:	ee18 0a10 	vmov	r0, s16
 80111fe:	4619      	mov	r1, r3
 8011200:	f7ef fcbc 	bl	8000b7c <__aeabi_dcmpun>
 8011204:	f999 9000 	ldrsb.w	r9, [r9]
 8011208:	4b4b      	ldr	r3, [pc, #300]	; (8011338 <pow+0x2c0>)
 801120a:	b1b0      	cbz	r0, 801123a <pow+0x1c2>
 801120c:	2201      	movs	r2, #1
 801120e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011212:	9b00      	ldr	r3, [sp, #0]
 8011214:	930a      	str	r3, [sp, #40]	; 0x28
 8011216:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801121a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801121e:	f1b9 0f00 	cmp.w	r9, #0
 8011222:	d0c4      	beq.n	80111ae <pow+0x136>
 8011224:	4652      	mov	r2, sl
 8011226:	465b      	mov	r3, fp
 8011228:	4650      	mov	r0, sl
 801122a:	4659      	mov	r1, fp
 801122c:	f7ef fb36 	bl	800089c <__aeabi_ddiv>
 8011230:	f1b9 0f02 	cmp.w	r9, #2
 8011234:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011238:	e7c1      	b.n	80111be <pow+0x146>
 801123a:	2203      	movs	r2, #3
 801123c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011240:	900a      	str	r0, [sp, #40]	; 0x28
 8011242:	4629      	mov	r1, r5
 8011244:	4620      	mov	r0, r4
 8011246:	2200      	movs	r2, #0
 8011248:	4b3e      	ldr	r3, [pc, #248]	; (8011344 <pow+0x2cc>)
 801124a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801124e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011252:	f7ef f9f9 	bl	8000648 <__aeabi_dmul>
 8011256:	4604      	mov	r4, r0
 8011258:	460d      	mov	r5, r1
 801125a:	f1b9 0f00 	cmp.w	r9, #0
 801125e:	d124      	bne.n	80112aa <pow+0x232>
 8011260:	4b39      	ldr	r3, [pc, #228]	; (8011348 <pow+0x2d0>)
 8011262:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011266:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801126a:	4630      	mov	r0, r6
 801126c:	4652      	mov	r2, sl
 801126e:	465b      	mov	r3, fp
 8011270:	4639      	mov	r1, r7
 8011272:	f7ef fc5b 	bl	8000b2c <__aeabi_dcmplt>
 8011276:	2800      	cmp	r0, #0
 8011278:	d056      	beq.n	8011328 <pow+0x2b0>
 801127a:	ec45 4b10 	vmov	d0, r4, r5
 801127e:	f000 fe47 	bl	8011f10 <rint>
 8011282:	4622      	mov	r2, r4
 8011284:	462b      	mov	r3, r5
 8011286:	ec51 0b10 	vmov	r0, r1, d0
 801128a:	f7ef fc45 	bl	8000b18 <__aeabi_dcmpeq>
 801128e:	b920      	cbnz	r0, 801129a <pow+0x222>
 8011290:	4b2e      	ldr	r3, [pc, #184]	; (801134c <pow+0x2d4>)
 8011292:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011296:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801129a:	f998 3000 	ldrsb.w	r3, [r8]
 801129e:	2b02      	cmp	r3, #2
 80112a0:	d142      	bne.n	8011328 <pow+0x2b0>
 80112a2:	f7fd faa5 	bl	800e7f0 <__errno>
 80112a6:	2322      	movs	r3, #34	; 0x22
 80112a8:	e78d      	b.n	80111c6 <pow+0x14e>
 80112aa:	4b29      	ldr	r3, [pc, #164]	; (8011350 <pow+0x2d8>)
 80112ac:	2200      	movs	r2, #0
 80112ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80112b2:	4630      	mov	r0, r6
 80112b4:	4652      	mov	r2, sl
 80112b6:	465b      	mov	r3, fp
 80112b8:	4639      	mov	r1, r7
 80112ba:	f7ef fc37 	bl	8000b2c <__aeabi_dcmplt>
 80112be:	2800      	cmp	r0, #0
 80112c0:	d0eb      	beq.n	801129a <pow+0x222>
 80112c2:	ec45 4b10 	vmov	d0, r4, r5
 80112c6:	f000 fe23 	bl	8011f10 <rint>
 80112ca:	4622      	mov	r2, r4
 80112cc:	462b      	mov	r3, r5
 80112ce:	ec51 0b10 	vmov	r0, r1, d0
 80112d2:	f7ef fc21 	bl	8000b18 <__aeabi_dcmpeq>
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d1df      	bne.n	801129a <pow+0x222>
 80112da:	2200      	movs	r2, #0
 80112dc:	4b18      	ldr	r3, [pc, #96]	; (8011340 <pow+0x2c8>)
 80112de:	e7da      	b.n	8011296 <pow+0x21e>
 80112e0:	2200      	movs	r2, #0
 80112e2:	2300      	movs	r3, #0
 80112e4:	ec51 0b18 	vmov	r0, r1, d8
 80112e8:	f7ef fc16 	bl	8000b18 <__aeabi_dcmpeq>
 80112ec:	2800      	cmp	r0, #0
 80112ee:	f43f af3a 	beq.w	8011166 <pow+0xee>
 80112f2:	ec47 6b10 	vmov	d0, r6, r7
 80112f6:	f000 fdf6 	bl	8011ee6 <finite>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	f43f af33 	beq.w	8011166 <pow+0xee>
 8011300:	ec45 4b10 	vmov	d0, r4, r5
 8011304:	f000 fdef 	bl	8011ee6 <finite>
 8011308:	2800      	cmp	r0, #0
 801130a:	f43f af2c 	beq.w	8011166 <pow+0xee>
 801130e:	2304      	movs	r3, #4
 8011310:	9302      	str	r3, [sp, #8]
 8011312:	4b09      	ldr	r3, [pc, #36]	; (8011338 <pow+0x2c0>)
 8011314:	9303      	str	r3, [sp, #12]
 8011316:	2300      	movs	r3, #0
 8011318:	930a      	str	r3, [sp, #40]	; 0x28
 801131a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801131e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011322:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011326:	e7b8      	b.n	801129a <pow+0x222>
 8011328:	a802      	add	r0, sp, #8
 801132a:	f000 fde4 	bl	8011ef6 <matherr>
 801132e:	2800      	cmp	r0, #0
 8011330:	f47f af11 	bne.w	8011156 <pow+0xde>
 8011334:	e7b5      	b.n	80112a2 <pow+0x22a>
 8011336:	bf00      	nop
 8011338:	08013a18 	.word	0x08013a18
 801133c:	3ff00000 	.word	0x3ff00000
 8011340:	fff00000 	.word	0xfff00000
 8011344:	3fe00000 	.word	0x3fe00000
 8011348:	47efffff 	.word	0x47efffff
 801134c:	c7efffff 	.word	0xc7efffff
 8011350:	7ff00000 	.word	0x7ff00000
 8011354:	20001ecc 	.word	0x20001ecc

08011358 <__ieee754_pow>:
 8011358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135c:	b091      	sub	sp, #68	; 0x44
 801135e:	ed8d 1b00 	vstr	d1, [sp]
 8011362:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011366:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801136a:	ea58 0302 	orrs.w	r3, r8, r2
 801136e:	ec57 6b10 	vmov	r6, r7, d0
 8011372:	f000 84be 	beq.w	8011cf2 <__ieee754_pow+0x99a>
 8011376:	4b7a      	ldr	r3, [pc, #488]	; (8011560 <__ieee754_pow+0x208>)
 8011378:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801137c:	429c      	cmp	r4, r3
 801137e:	463d      	mov	r5, r7
 8011380:	ee10 aa10 	vmov	sl, s0
 8011384:	dc09      	bgt.n	801139a <__ieee754_pow+0x42>
 8011386:	d103      	bne.n	8011390 <__ieee754_pow+0x38>
 8011388:	b93e      	cbnz	r6, 801139a <__ieee754_pow+0x42>
 801138a:	45a0      	cmp	r8, r4
 801138c:	dc0d      	bgt.n	80113aa <__ieee754_pow+0x52>
 801138e:	e001      	b.n	8011394 <__ieee754_pow+0x3c>
 8011390:	4598      	cmp	r8, r3
 8011392:	dc02      	bgt.n	801139a <__ieee754_pow+0x42>
 8011394:	4598      	cmp	r8, r3
 8011396:	d10e      	bne.n	80113b6 <__ieee754_pow+0x5e>
 8011398:	b16a      	cbz	r2, 80113b6 <__ieee754_pow+0x5e>
 801139a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801139e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80113a2:	ea54 030a 	orrs.w	r3, r4, sl
 80113a6:	f000 84a4 	beq.w	8011cf2 <__ieee754_pow+0x99a>
 80113aa:	486e      	ldr	r0, [pc, #440]	; (8011564 <__ieee754_pow+0x20c>)
 80113ac:	b011      	add	sp, #68	; 0x44
 80113ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b2:	f000 bda5 	b.w	8011f00 <nan>
 80113b6:	2d00      	cmp	r5, #0
 80113b8:	da53      	bge.n	8011462 <__ieee754_pow+0x10a>
 80113ba:	4b6b      	ldr	r3, [pc, #428]	; (8011568 <__ieee754_pow+0x210>)
 80113bc:	4598      	cmp	r8, r3
 80113be:	dc4d      	bgt.n	801145c <__ieee754_pow+0x104>
 80113c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80113c4:	4598      	cmp	r8, r3
 80113c6:	dd4c      	ble.n	8011462 <__ieee754_pow+0x10a>
 80113c8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80113cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80113d0:	2b14      	cmp	r3, #20
 80113d2:	dd26      	ble.n	8011422 <__ieee754_pow+0xca>
 80113d4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80113d8:	fa22 f103 	lsr.w	r1, r2, r3
 80113dc:	fa01 f303 	lsl.w	r3, r1, r3
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d13e      	bne.n	8011462 <__ieee754_pow+0x10a>
 80113e4:	f001 0101 	and.w	r1, r1, #1
 80113e8:	f1c1 0b02 	rsb	fp, r1, #2
 80113ec:	2a00      	cmp	r2, #0
 80113ee:	d15b      	bne.n	80114a8 <__ieee754_pow+0x150>
 80113f0:	4b5b      	ldr	r3, [pc, #364]	; (8011560 <__ieee754_pow+0x208>)
 80113f2:	4598      	cmp	r8, r3
 80113f4:	d124      	bne.n	8011440 <__ieee754_pow+0xe8>
 80113f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80113fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80113fe:	ea53 030a 	orrs.w	r3, r3, sl
 8011402:	f000 8476 	beq.w	8011cf2 <__ieee754_pow+0x99a>
 8011406:	4b59      	ldr	r3, [pc, #356]	; (801156c <__ieee754_pow+0x214>)
 8011408:	429c      	cmp	r4, r3
 801140a:	dd2d      	ble.n	8011468 <__ieee754_pow+0x110>
 801140c:	f1b9 0f00 	cmp.w	r9, #0
 8011410:	f280 8473 	bge.w	8011cfa <__ieee754_pow+0x9a2>
 8011414:	2000      	movs	r0, #0
 8011416:	2100      	movs	r1, #0
 8011418:	ec41 0b10 	vmov	d0, r0, r1
 801141c:	b011      	add	sp, #68	; 0x44
 801141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011422:	2a00      	cmp	r2, #0
 8011424:	d13e      	bne.n	80114a4 <__ieee754_pow+0x14c>
 8011426:	f1c3 0314 	rsb	r3, r3, #20
 801142a:	fa48 f103 	asr.w	r1, r8, r3
 801142e:	fa01 f303 	lsl.w	r3, r1, r3
 8011432:	4543      	cmp	r3, r8
 8011434:	f040 8469 	bne.w	8011d0a <__ieee754_pow+0x9b2>
 8011438:	f001 0101 	and.w	r1, r1, #1
 801143c:	f1c1 0b02 	rsb	fp, r1, #2
 8011440:	4b4b      	ldr	r3, [pc, #300]	; (8011570 <__ieee754_pow+0x218>)
 8011442:	4598      	cmp	r8, r3
 8011444:	d118      	bne.n	8011478 <__ieee754_pow+0x120>
 8011446:	f1b9 0f00 	cmp.w	r9, #0
 801144a:	f280 845a 	bge.w	8011d02 <__ieee754_pow+0x9aa>
 801144e:	4948      	ldr	r1, [pc, #288]	; (8011570 <__ieee754_pow+0x218>)
 8011450:	4632      	mov	r2, r6
 8011452:	463b      	mov	r3, r7
 8011454:	2000      	movs	r0, #0
 8011456:	f7ef fa21 	bl	800089c <__aeabi_ddiv>
 801145a:	e7dd      	b.n	8011418 <__ieee754_pow+0xc0>
 801145c:	f04f 0b02 	mov.w	fp, #2
 8011460:	e7c4      	b.n	80113ec <__ieee754_pow+0x94>
 8011462:	f04f 0b00 	mov.w	fp, #0
 8011466:	e7c1      	b.n	80113ec <__ieee754_pow+0x94>
 8011468:	f1b9 0f00 	cmp.w	r9, #0
 801146c:	dad2      	bge.n	8011414 <__ieee754_pow+0xbc>
 801146e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011472:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011476:	e7cf      	b.n	8011418 <__ieee754_pow+0xc0>
 8011478:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801147c:	d106      	bne.n	801148c <__ieee754_pow+0x134>
 801147e:	4632      	mov	r2, r6
 8011480:	463b      	mov	r3, r7
 8011482:	4610      	mov	r0, r2
 8011484:	4619      	mov	r1, r3
 8011486:	f7ef f8df 	bl	8000648 <__aeabi_dmul>
 801148a:	e7c5      	b.n	8011418 <__ieee754_pow+0xc0>
 801148c:	4b39      	ldr	r3, [pc, #228]	; (8011574 <__ieee754_pow+0x21c>)
 801148e:	4599      	cmp	r9, r3
 8011490:	d10a      	bne.n	80114a8 <__ieee754_pow+0x150>
 8011492:	2d00      	cmp	r5, #0
 8011494:	db08      	blt.n	80114a8 <__ieee754_pow+0x150>
 8011496:	ec47 6b10 	vmov	d0, r6, r7
 801149a:	b011      	add	sp, #68	; 0x44
 801149c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a0:	f000 bc68 	b.w	8011d74 <__ieee754_sqrt>
 80114a4:	f04f 0b00 	mov.w	fp, #0
 80114a8:	ec47 6b10 	vmov	d0, r6, r7
 80114ac:	f000 fd12 	bl	8011ed4 <fabs>
 80114b0:	ec51 0b10 	vmov	r0, r1, d0
 80114b4:	f1ba 0f00 	cmp.w	sl, #0
 80114b8:	d127      	bne.n	801150a <__ieee754_pow+0x1b2>
 80114ba:	b124      	cbz	r4, 80114c6 <__ieee754_pow+0x16e>
 80114bc:	4b2c      	ldr	r3, [pc, #176]	; (8011570 <__ieee754_pow+0x218>)
 80114be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d121      	bne.n	801150a <__ieee754_pow+0x1b2>
 80114c6:	f1b9 0f00 	cmp.w	r9, #0
 80114ca:	da05      	bge.n	80114d8 <__ieee754_pow+0x180>
 80114cc:	4602      	mov	r2, r0
 80114ce:	460b      	mov	r3, r1
 80114d0:	2000      	movs	r0, #0
 80114d2:	4927      	ldr	r1, [pc, #156]	; (8011570 <__ieee754_pow+0x218>)
 80114d4:	f7ef f9e2 	bl	800089c <__aeabi_ddiv>
 80114d8:	2d00      	cmp	r5, #0
 80114da:	da9d      	bge.n	8011418 <__ieee754_pow+0xc0>
 80114dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80114e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80114e4:	ea54 030b 	orrs.w	r3, r4, fp
 80114e8:	d108      	bne.n	80114fc <__ieee754_pow+0x1a4>
 80114ea:	4602      	mov	r2, r0
 80114ec:	460b      	mov	r3, r1
 80114ee:	4610      	mov	r0, r2
 80114f0:	4619      	mov	r1, r3
 80114f2:	f7ee fef1 	bl	80002d8 <__aeabi_dsub>
 80114f6:	4602      	mov	r2, r0
 80114f8:	460b      	mov	r3, r1
 80114fa:	e7ac      	b.n	8011456 <__ieee754_pow+0xfe>
 80114fc:	f1bb 0f01 	cmp.w	fp, #1
 8011500:	d18a      	bne.n	8011418 <__ieee754_pow+0xc0>
 8011502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011506:	4619      	mov	r1, r3
 8011508:	e786      	b.n	8011418 <__ieee754_pow+0xc0>
 801150a:	0fed      	lsrs	r5, r5, #31
 801150c:	1e6b      	subs	r3, r5, #1
 801150e:	930d      	str	r3, [sp, #52]	; 0x34
 8011510:	ea5b 0303 	orrs.w	r3, fp, r3
 8011514:	d102      	bne.n	801151c <__ieee754_pow+0x1c4>
 8011516:	4632      	mov	r2, r6
 8011518:	463b      	mov	r3, r7
 801151a:	e7e8      	b.n	80114ee <__ieee754_pow+0x196>
 801151c:	4b16      	ldr	r3, [pc, #88]	; (8011578 <__ieee754_pow+0x220>)
 801151e:	4598      	cmp	r8, r3
 8011520:	f340 80fe 	ble.w	8011720 <__ieee754_pow+0x3c8>
 8011524:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011528:	4598      	cmp	r8, r3
 801152a:	dd0a      	ble.n	8011542 <__ieee754_pow+0x1ea>
 801152c:	4b0f      	ldr	r3, [pc, #60]	; (801156c <__ieee754_pow+0x214>)
 801152e:	429c      	cmp	r4, r3
 8011530:	dc0d      	bgt.n	801154e <__ieee754_pow+0x1f6>
 8011532:	f1b9 0f00 	cmp.w	r9, #0
 8011536:	f6bf af6d 	bge.w	8011414 <__ieee754_pow+0xbc>
 801153a:	a307      	add	r3, pc, #28	; (adr r3, 8011558 <__ieee754_pow+0x200>)
 801153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011540:	e79f      	b.n	8011482 <__ieee754_pow+0x12a>
 8011542:	4b0e      	ldr	r3, [pc, #56]	; (801157c <__ieee754_pow+0x224>)
 8011544:	429c      	cmp	r4, r3
 8011546:	ddf4      	ble.n	8011532 <__ieee754_pow+0x1da>
 8011548:	4b09      	ldr	r3, [pc, #36]	; (8011570 <__ieee754_pow+0x218>)
 801154a:	429c      	cmp	r4, r3
 801154c:	dd18      	ble.n	8011580 <__ieee754_pow+0x228>
 801154e:	f1b9 0f00 	cmp.w	r9, #0
 8011552:	dcf2      	bgt.n	801153a <__ieee754_pow+0x1e2>
 8011554:	e75e      	b.n	8011414 <__ieee754_pow+0xbc>
 8011556:	bf00      	nop
 8011558:	8800759c 	.word	0x8800759c
 801155c:	7e37e43c 	.word	0x7e37e43c
 8011560:	7ff00000 	.word	0x7ff00000
 8011564:	08013901 	.word	0x08013901
 8011568:	433fffff 	.word	0x433fffff
 801156c:	3fefffff 	.word	0x3fefffff
 8011570:	3ff00000 	.word	0x3ff00000
 8011574:	3fe00000 	.word	0x3fe00000
 8011578:	41e00000 	.word	0x41e00000
 801157c:	3feffffe 	.word	0x3feffffe
 8011580:	2200      	movs	r2, #0
 8011582:	4b63      	ldr	r3, [pc, #396]	; (8011710 <__ieee754_pow+0x3b8>)
 8011584:	f7ee fea8 	bl	80002d8 <__aeabi_dsub>
 8011588:	a355      	add	r3, pc, #340	; (adr r3, 80116e0 <__ieee754_pow+0x388>)
 801158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158e:	4604      	mov	r4, r0
 8011590:	460d      	mov	r5, r1
 8011592:	f7ef f859 	bl	8000648 <__aeabi_dmul>
 8011596:	a354      	add	r3, pc, #336	; (adr r3, 80116e8 <__ieee754_pow+0x390>)
 8011598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159c:	4606      	mov	r6, r0
 801159e:	460f      	mov	r7, r1
 80115a0:	4620      	mov	r0, r4
 80115a2:	4629      	mov	r1, r5
 80115a4:	f7ef f850 	bl	8000648 <__aeabi_dmul>
 80115a8:	2200      	movs	r2, #0
 80115aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115ae:	4b59      	ldr	r3, [pc, #356]	; (8011714 <__ieee754_pow+0x3bc>)
 80115b0:	4620      	mov	r0, r4
 80115b2:	4629      	mov	r1, r5
 80115b4:	f7ef f848 	bl	8000648 <__aeabi_dmul>
 80115b8:	4602      	mov	r2, r0
 80115ba:	460b      	mov	r3, r1
 80115bc:	a14c      	add	r1, pc, #304	; (adr r1, 80116f0 <__ieee754_pow+0x398>)
 80115be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115c2:	f7ee fe89 	bl	80002d8 <__aeabi_dsub>
 80115c6:	4622      	mov	r2, r4
 80115c8:	462b      	mov	r3, r5
 80115ca:	f7ef f83d 	bl	8000648 <__aeabi_dmul>
 80115ce:	4602      	mov	r2, r0
 80115d0:	460b      	mov	r3, r1
 80115d2:	2000      	movs	r0, #0
 80115d4:	4950      	ldr	r1, [pc, #320]	; (8011718 <__ieee754_pow+0x3c0>)
 80115d6:	f7ee fe7f 	bl	80002d8 <__aeabi_dsub>
 80115da:	4622      	mov	r2, r4
 80115dc:	462b      	mov	r3, r5
 80115de:	4680      	mov	r8, r0
 80115e0:	4689      	mov	r9, r1
 80115e2:	4620      	mov	r0, r4
 80115e4:	4629      	mov	r1, r5
 80115e6:	f7ef f82f 	bl	8000648 <__aeabi_dmul>
 80115ea:	4602      	mov	r2, r0
 80115ec:	460b      	mov	r3, r1
 80115ee:	4640      	mov	r0, r8
 80115f0:	4649      	mov	r1, r9
 80115f2:	f7ef f829 	bl	8000648 <__aeabi_dmul>
 80115f6:	a340      	add	r3, pc, #256	; (adr r3, 80116f8 <__ieee754_pow+0x3a0>)
 80115f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115fc:	f7ef f824 	bl	8000648 <__aeabi_dmul>
 8011600:	4602      	mov	r2, r0
 8011602:	460b      	mov	r3, r1
 8011604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011608:	f7ee fe66 	bl	80002d8 <__aeabi_dsub>
 801160c:	4602      	mov	r2, r0
 801160e:	460b      	mov	r3, r1
 8011610:	4604      	mov	r4, r0
 8011612:	460d      	mov	r5, r1
 8011614:	4630      	mov	r0, r6
 8011616:	4639      	mov	r1, r7
 8011618:	f7ee fe60 	bl	80002dc <__adddf3>
 801161c:	2000      	movs	r0, #0
 801161e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011622:	4632      	mov	r2, r6
 8011624:	463b      	mov	r3, r7
 8011626:	f7ee fe57 	bl	80002d8 <__aeabi_dsub>
 801162a:	4602      	mov	r2, r0
 801162c:	460b      	mov	r3, r1
 801162e:	4620      	mov	r0, r4
 8011630:	4629      	mov	r1, r5
 8011632:	f7ee fe51 	bl	80002d8 <__aeabi_dsub>
 8011636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011638:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801163c:	4313      	orrs	r3, r2
 801163e:	4606      	mov	r6, r0
 8011640:	460f      	mov	r7, r1
 8011642:	f040 81eb 	bne.w	8011a1c <__ieee754_pow+0x6c4>
 8011646:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011700 <__ieee754_pow+0x3a8>
 801164a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801164e:	2400      	movs	r4, #0
 8011650:	4622      	mov	r2, r4
 8011652:	462b      	mov	r3, r5
 8011654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011658:	ed8d 7b02 	vstr	d7, [sp, #8]
 801165c:	f7ee fe3c 	bl	80002d8 <__aeabi_dsub>
 8011660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011664:	f7ee fff0 	bl	8000648 <__aeabi_dmul>
 8011668:	e9dd 2300 	ldrd	r2, r3, [sp]
 801166c:	4680      	mov	r8, r0
 801166e:	4689      	mov	r9, r1
 8011670:	4630      	mov	r0, r6
 8011672:	4639      	mov	r1, r7
 8011674:	f7ee ffe8 	bl	8000648 <__aeabi_dmul>
 8011678:	4602      	mov	r2, r0
 801167a:	460b      	mov	r3, r1
 801167c:	4640      	mov	r0, r8
 801167e:	4649      	mov	r1, r9
 8011680:	f7ee fe2c 	bl	80002dc <__adddf3>
 8011684:	4622      	mov	r2, r4
 8011686:	462b      	mov	r3, r5
 8011688:	4680      	mov	r8, r0
 801168a:	4689      	mov	r9, r1
 801168c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011690:	f7ee ffda 	bl	8000648 <__aeabi_dmul>
 8011694:	460b      	mov	r3, r1
 8011696:	4604      	mov	r4, r0
 8011698:	460d      	mov	r5, r1
 801169a:	4602      	mov	r2, r0
 801169c:	4649      	mov	r1, r9
 801169e:	4640      	mov	r0, r8
 80116a0:	e9cd 4500 	strd	r4, r5, [sp]
 80116a4:	f7ee fe1a 	bl	80002dc <__adddf3>
 80116a8:	4b1c      	ldr	r3, [pc, #112]	; (801171c <__ieee754_pow+0x3c4>)
 80116aa:	4299      	cmp	r1, r3
 80116ac:	4606      	mov	r6, r0
 80116ae:	460f      	mov	r7, r1
 80116b0:	468b      	mov	fp, r1
 80116b2:	f340 82f7 	ble.w	8011ca4 <__ieee754_pow+0x94c>
 80116b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80116ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80116be:	4303      	orrs	r3, r0
 80116c0:	f000 81ea 	beq.w	8011a98 <__ieee754_pow+0x740>
 80116c4:	a310      	add	r3, pc, #64	; (adr r3, 8011708 <__ieee754_pow+0x3b0>)
 80116c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116ce:	f7ee ffbb 	bl	8000648 <__aeabi_dmul>
 80116d2:	a30d      	add	r3, pc, #52	; (adr r3, 8011708 <__ieee754_pow+0x3b0>)
 80116d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d8:	e6d5      	b.n	8011486 <__ieee754_pow+0x12e>
 80116da:	bf00      	nop
 80116dc:	f3af 8000 	nop.w
 80116e0:	60000000 	.word	0x60000000
 80116e4:	3ff71547 	.word	0x3ff71547
 80116e8:	f85ddf44 	.word	0xf85ddf44
 80116ec:	3e54ae0b 	.word	0x3e54ae0b
 80116f0:	55555555 	.word	0x55555555
 80116f4:	3fd55555 	.word	0x3fd55555
 80116f8:	652b82fe 	.word	0x652b82fe
 80116fc:	3ff71547 	.word	0x3ff71547
 8011700:	00000000 	.word	0x00000000
 8011704:	bff00000 	.word	0xbff00000
 8011708:	8800759c 	.word	0x8800759c
 801170c:	7e37e43c 	.word	0x7e37e43c
 8011710:	3ff00000 	.word	0x3ff00000
 8011714:	3fd00000 	.word	0x3fd00000
 8011718:	3fe00000 	.word	0x3fe00000
 801171c:	408fffff 	.word	0x408fffff
 8011720:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011724:	f04f 0200 	mov.w	r2, #0
 8011728:	da05      	bge.n	8011736 <__ieee754_pow+0x3de>
 801172a:	4bd3      	ldr	r3, [pc, #844]	; (8011a78 <__ieee754_pow+0x720>)
 801172c:	f7ee ff8c 	bl	8000648 <__aeabi_dmul>
 8011730:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011734:	460c      	mov	r4, r1
 8011736:	1523      	asrs	r3, r4, #20
 8011738:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801173c:	4413      	add	r3, r2
 801173e:	9309      	str	r3, [sp, #36]	; 0x24
 8011740:	4bce      	ldr	r3, [pc, #824]	; (8011a7c <__ieee754_pow+0x724>)
 8011742:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011746:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801174a:	429c      	cmp	r4, r3
 801174c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011750:	dd08      	ble.n	8011764 <__ieee754_pow+0x40c>
 8011752:	4bcb      	ldr	r3, [pc, #812]	; (8011a80 <__ieee754_pow+0x728>)
 8011754:	429c      	cmp	r4, r3
 8011756:	f340 815e 	ble.w	8011a16 <__ieee754_pow+0x6be>
 801175a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801175c:	3301      	adds	r3, #1
 801175e:	9309      	str	r3, [sp, #36]	; 0x24
 8011760:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011764:	f04f 0a00 	mov.w	sl, #0
 8011768:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801176c:	930c      	str	r3, [sp, #48]	; 0x30
 801176e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011770:	4bc4      	ldr	r3, [pc, #784]	; (8011a84 <__ieee754_pow+0x72c>)
 8011772:	4413      	add	r3, r2
 8011774:	ed93 7b00 	vldr	d7, [r3]
 8011778:	4629      	mov	r1, r5
 801177a:	ec53 2b17 	vmov	r2, r3, d7
 801177e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011782:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011786:	f7ee fda7 	bl	80002d8 <__aeabi_dsub>
 801178a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801178e:	4606      	mov	r6, r0
 8011790:	460f      	mov	r7, r1
 8011792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011796:	f7ee fda1 	bl	80002dc <__adddf3>
 801179a:	4602      	mov	r2, r0
 801179c:	460b      	mov	r3, r1
 801179e:	2000      	movs	r0, #0
 80117a0:	49b9      	ldr	r1, [pc, #740]	; (8011a88 <__ieee754_pow+0x730>)
 80117a2:	f7ef f87b 	bl	800089c <__aeabi_ddiv>
 80117a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80117aa:	4602      	mov	r2, r0
 80117ac:	460b      	mov	r3, r1
 80117ae:	4630      	mov	r0, r6
 80117b0:	4639      	mov	r1, r7
 80117b2:	f7ee ff49 	bl	8000648 <__aeabi_dmul>
 80117b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80117be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80117c2:	2300      	movs	r3, #0
 80117c4:	9302      	str	r3, [sp, #8]
 80117c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80117ca:	106d      	asrs	r5, r5, #1
 80117cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80117d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80117d4:	2200      	movs	r2, #0
 80117d6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80117da:	4640      	mov	r0, r8
 80117dc:	4649      	mov	r1, r9
 80117de:	4614      	mov	r4, r2
 80117e0:	461d      	mov	r5, r3
 80117e2:	f7ee ff31 	bl	8000648 <__aeabi_dmul>
 80117e6:	4602      	mov	r2, r0
 80117e8:	460b      	mov	r3, r1
 80117ea:	4630      	mov	r0, r6
 80117ec:	4639      	mov	r1, r7
 80117ee:	f7ee fd73 	bl	80002d8 <__aeabi_dsub>
 80117f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80117f6:	4606      	mov	r6, r0
 80117f8:	460f      	mov	r7, r1
 80117fa:	4620      	mov	r0, r4
 80117fc:	4629      	mov	r1, r5
 80117fe:	f7ee fd6b 	bl	80002d8 <__aeabi_dsub>
 8011802:	4602      	mov	r2, r0
 8011804:	460b      	mov	r3, r1
 8011806:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801180a:	f7ee fd65 	bl	80002d8 <__aeabi_dsub>
 801180e:	4642      	mov	r2, r8
 8011810:	464b      	mov	r3, r9
 8011812:	f7ee ff19 	bl	8000648 <__aeabi_dmul>
 8011816:	4602      	mov	r2, r0
 8011818:	460b      	mov	r3, r1
 801181a:	4630      	mov	r0, r6
 801181c:	4639      	mov	r1, r7
 801181e:	f7ee fd5b 	bl	80002d8 <__aeabi_dsub>
 8011822:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011826:	f7ee ff0f 	bl	8000648 <__aeabi_dmul>
 801182a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801182e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011832:	4610      	mov	r0, r2
 8011834:	4619      	mov	r1, r3
 8011836:	f7ee ff07 	bl	8000648 <__aeabi_dmul>
 801183a:	a37b      	add	r3, pc, #492	; (adr r3, 8011a28 <__ieee754_pow+0x6d0>)
 801183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011840:	4604      	mov	r4, r0
 8011842:	460d      	mov	r5, r1
 8011844:	f7ee ff00 	bl	8000648 <__aeabi_dmul>
 8011848:	a379      	add	r3, pc, #484	; (adr r3, 8011a30 <__ieee754_pow+0x6d8>)
 801184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184e:	f7ee fd45 	bl	80002dc <__adddf3>
 8011852:	4622      	mov	r2, r4
 8011854:	462b      	mov	r3, r5
 8011856:	f7ee fef7 	bl	8000648 <__aeabi_dmul>
 801185a:	a377      	add	r3, pc, #476	; (adr r3, 8011a38 <__ieee754_pow+0x6e0>)
 801185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011860:	f7ee fd3c 	bl	80002dc <__adddf3>
 8011864:	4622      	mov	r2, r4
 8011866:	462b      	mov	r3, r5
 8011868:	f7ee feee 	bl	8000648 <__aeabi_dmul>
 801186c:	a374      	add	r3, pc, #464	; (adr r3, 8011a40 <__ieee754_pow+0x6e8>)
 801186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011872:	f7ee fd33 	bl	80002dc <__adddf3>
 8011876:	4622      	mov	r2, r4
 8011878:	462b      	mov	r3, r5
 801187a:	f7ee fee5 	bl	8000648 <__aeabi_dmul>
 801187e:	a372      	add	r3, pc, #456	; (adr r3, 8011a48 <__ieee754_pow+0x6f0>)
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	f7ee fd2a 	bl	80002dc <__adddf3>
 8011888:	4622      	mov	r2, r4
 801188a:	462b      	mov	r3, r5
 801188c:	f7ee fedc 	bl	8000648 <__aeabi_dmul>
 8011890:	a36f      	add	r3, pc, #444	; (adr r3, 8011a50 <__ieee754_pow+0x6f8>)
 8011892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011896:	f7ee fd21 	bl	80002dc <__adddf3>
 801189a:	4622      	mov	r2, r4
 801189c:	4606      	mov	r6, r0
 801189e:	460f      	mov	r7, r1
 80118a0:	462b      	mov	r3, r5
 80118a2:	4620      	mov	r0, r4
 80118a4:	4629      	mov	r1, r5
 80118a6:	f7ee fecf 	bl	8000648 <__aeabi_dmul>
 80118aa:	4602      	mov	r2, r0
 80118ac:	460b      	mov	r3, r1
 80118ae:	4630      	mov	r0, r6
 80118b0:	4639      	mov	r1, r7
 80118b2:	f7ee fec9 	bl	8000648 <__aeabi_dmul>
 80118b6:	4642      	mov	r2, r8
 80118b8:	4604      	mov	r4, r0
 80118ba:	460d      	mov	r5, r1
 80118bc:	464b      	mov	r3, r9
 80118be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80118c2:	f7ee fd0b 	bl	80002dc <__adddf3>
 80118c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80118ca:	f7ee febd 	bl	8000648 <__aeabi_dmul>
 80118ce:	4622      	mov	r2, r4
 80118d0:	462b      	mov	r3, r5
 80118d2:	f7ee fd03 	bl	80002dc <__adddf3>
 80118d6:	4642      	mov	r2, r8
 80118d8:	4606      	mov	r6, r0
 80118da:	460f      	mov	r7, r1
 80118dc:	464b      	mov	r3, r9
 80118de:	4640      	mov	r0, r8
 80118e0:	4649      	mov	r1, r9
 80118e2:	f7ee feb1 	bl	8000648 <__aeabi_dmul>
 80118e6:	2200      	movs	r2, #0
 80118e8:	4b68      	ldr	r3, [pc, #416]	; (8011a8c <__ieee754_pow+0x734>)
 80118ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80118ee:	f7ee fcf5 	bl	80002dc <__adddf3>
 80118f2:	4632      	mov	r2, r6
 80118f4:	463b      	mov	r3, r7
 80118f6:	f7ee fcf1 	bl	80002dc <__adddf3>
 80118fa:	9802      	ldr	r0, [sp, #8]
 80118fc:	460d      	mov	r5, r1
 80118fe:	4604      	mov	r4, r0
 8011900:	4602      	mov	r2, r0
 8011902:	460b      	mov	r3, r1
 8011904:	4640      	mov	r0, r8
 8011906:	4649      	mov	r1, r9
 8011908:	f7ee fe9e 	bl	8000648 <__aeabi_dmul>
 801190c:	2200      	movs	r2, #0
 801190e:	4680      	mov	r8, r0
 8011910:	4689      	mov	r9, r1
 8011912:	4b5e      	ldr	r3, [pc, #376]	; (8011a8c <__ieee754_pow+0x734>)
 8011914:	4620      	mov	r0, r4
 8011916:	4629      	mov	r1, r5
 8011918:	f7ee fcde 	bl	80002d8 <__aeabi_dsub>
 801191c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011920:	f7ee fcda 	bl	80002d8 <__aeabi_dsub>
 8011924:	4602      	mov	r2, r0
 8011926:	460b      	mov	r3, r1
 8011928:	4630      	mov	r0, r6
 801192a:	4639      	mov	r1, r7
 801192c:	f7ee fcd4 	bl	80002d8 <__aeabi_dsub>
 8011930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011934:	f7ee fe88 	bl	8000648 <__aeabi_dmul>
 8011938:	4622      	mov	r2, r4
 801193a:	4606      	mov	r6, r0
 801193c:	460f      	mov	r7, r1
 801193e:	462b      	mov	r3, r5
 8011940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011944:	f7ee fe80 	bl	8000648 <__aeabi_dmul>
 8011948:	4602      	mov	r2, r0
 801194a:	460b      	mov	r3, r1
 801194c:	4630      	mov	r0, r6
 801194e:	4639      	mov	r1, r7
 8011950:	f7ee fcc4 	bl	80002dc <__adddf3>
 8011954:	4606      	mov	r6, r0
 8011956:	460f      	mov	r7, r1
 8011958:	4602      	mov	r2, r0
 801195a:	460b      	mov	r3, r1
 801195c:	4640      	mov	r0, r8
 801195e:	4649      	mov	r1, r9
 8011960:	f7ee fcbc 	bl	80002dc <__adddf3>
 8011964:	9802      	ldr	r0, [sp, #8]
 8011966:	a33c      	add	r3, pc, #240	; (adr r3, 8011a58 <__ieee754_pow+0x700>)
 8011968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196c:	4604      	mov	r4, r0
 801196e:	460d      	mov	r5, r1
 8011970:	f7ee fe6a 	bl	8000648 <__aeabi_dmul>
 8011974:	4642      	mov	r2, r8
 8011976:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801197a:	464b      	mov	r3, r9
 801197c:	4620      	mov	r0, r4
 801197e:	4629      	mov	r1, r5
 8011980:	f7ee fcaa 	bl	80002d8 <__aeabi_dsub>
 8011984:	4602      	mov	r2, r0
 8011986:	460b      	mov	r3, r1
 8011988:	4630      	mov	r0, r6
 801198a:	4639      	mov	r1, r7
 801198c:	f7ee fca4 	bl	80002d8 <__aeabi_dsub>
 8011990:	a333      	add	r3, pc, #204	; (adr r3, 8011a60 <__ieee754_pow+0x708>)
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	f7ee fe57 	bl	8000648 <__aeabi_dmul>
 801199a:	a333      	add	r3, pc, #204	; (adr r3, 8011a68 <__ieee754_pow+0x710>)
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	4606      	mov	r6, r0
 80119a2:	460f      	mov	r7, r1
 80119a4:	4620      	mov	r0, r4
 80119a6:	4629      	mov	r1, r5
 80119a8:	f7ee fe4e 	bl	8000648 <__aeabi_dmul>
 80119ac:	4602      	mov	r2, r0
 80119ae:	460b      	mov	r3, r1
 80119b0:	4630      	mov	r0, r6
 80119b2:	4639      	mov	r1, r7
 80119b4:	f7ee fc92 	bl	80002dc <__adddf3>
 80119b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119ba:	4b35      	ldr	r3, [pc, #212]	; (8011a90 <__ieee754_pow+0x738>)
 80119bc:	4413      	add	r3, r2
 80119be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c2:	f7ee fc8b 	bl	80002dc <__adddf3>
 80119c6:	4604      	mov	r4, r0
 80119c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119ca:	460d      	mov	r5, r1
 80119cc:	f7ee fdd2 	bl	8000574 <__aeabi_i2d>
 80119d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119d2:	4b30      	ldr	r3, [pc, #192]	; (8011a94 <__ieee754_pow+0x73c>)
 80119d4:	4413      	add	r3, r2
 80119d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80119da:	4606      	mov	r6, r0
 80119dc:	460f      	mov	r7, r1
 80119de:	4622      	mov	r2, r4
 80119e0:	462b      	mov	r3, r5
 80119e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119e6:	f7ee fc79 	bl	80002dc <__adddf3>
 80119ea:	4642      	mov	r2, r8
 80119ec:	464b      	mov	r3, r9
 80119ee:	f7ee fc75 	bl	80002dc <__adddf3>
 80119f2:	4632      	mov	r2, r6
 80119f4:	463b      	mov	r3, r7
 80119f6:	f7ee fc71 	bl	80002dc <__adddf3>
 80119fa:	9802      	ldr	r0, [sp, #8]
 80119fc:	4632      	mov	r2, r6
 80119fe:	463b      	mov	r3, r7
 8011a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a04:	f7ee fc68 	bl	80002d8 <__aeabi_dsub>
 8011a08:	4642      	mov	r2, r8
 8011a0a:	464b      	mov	r3, r9
 8011a0c:	f7ee fc64 	bl	80002d8 <__aeabi_dsub>
 8011a10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a14:	e607      	b.n	8011626 <__ieee754_pow+0x2ce>
 8011a16:	f04f 0a01 	mov.w	sl, #1
 8011a1a:	e6a5      	b.n	8011768 <__ieee754_pow+0x410>
 8011a1c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011a70 <__ieee754_pow+0x718>
 8011a20:	e613      	b.n	801164a <__ieee754_pow+0x2f2>
 8011a22:	bf00      	nop
 8011a24:	f3af 8000 	nop.w
 8011a28:	4a454eef 	.word	0x4a454eef
 8011a2c:	3fca7e28 	.word	0x3fca7e28
 8011a30:	93c9db65 	.word	0x93c9db65
 8011a34:	3fcd864a 	.word	0x3fcd864a
 8011a38:	a91d4101 	.word	0xa91d4101
 8011a3c:	3fd17460 	.word	0x3fd17460
 8011a40:	518f264d 	.word	0x518f264d
 8011a44:	3fd55555 	.word	0x3fd55555
 8011a48:	db6fabff 	.word	0xdb6fabff
 8011a4c:	3fdb6db6 	.word	0x3fdb6db6
 8011a50:	33333303 	.word	0x33333303
 8011a54:	3fe33333 	.word	0x3fe33333
 8011a58:	e0000000 	.word	0xe0000000
 8011a5c:	3feec709 	.word	0x3feec709
 8011a60:	dc3a03fd 	.word	0xdc3a03fd
 8011a64:	3feec709 	.word	0x3feec709
 8011a68:	145b01f5 	.word	0x145b01f5
 8011a6c:	be3e2fe0 	.word	0xbe3e2fe0
 8011a70:	00000000 	.word	0x00000000
 8011a74:	3ff00000 	.word	0x3ff00000
 8011a78:	43400000 	.word	0x43400000
 8011a7c:	0003988e 	.word	0x0003988e
 8011a80:	000bb679 	.word	0x000bb679
 8011a84:	08013a20 	.word	0x08013a20
 8011a88:	3ff00000 	.word	0x3ff00000
 8011a8c:	40080000 	.word	0x40080000
 8011a90:	08013a40 	.word	0x08013a40
 8011a94:	08013a30 	.word	0x08013a30
 8011a98:	a3b4      	add	r3, pc, #720	; (adr r3, 8011d6c <__ieee754_pow+0xa14>)
 8011a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a9e:	4640      	mov	r0, r8
 8011aa0:	4649      	mov	r1, r9
 8011aa2:	f7ee fc1b 	bl	80002dc <__adddf3>
 8011aa6:	4622      	mov	r2, r4
 8011aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011aac:	462b      	mov	r3, r5
 8011aae:	4630      	mov	r0, r6
 8011ab0:	4639      	mov	r1, r7
 8011ab2:	f7ee fc11 	bl	80002d8 <__aeabi_dsub>
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	460b      	mov	r3, r1
 8011aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011abe:	f7ef f853 	bl	8000b68 <__aeabi_dcmpgt>
 8011ac2:	2800      	cmp	r0, #0
 8011ac4:	f47f adfe 	bne.w	80116c4 <__ieee754_pow+0x36c>
 8011ac8:	4aa3      	ldr	r2, [pc, #652]	; (8011d58 <__ieee754_pow+0xa00>)
 8011aca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	f340 810a 	ble.w	8011ce8 <__ieee754_pow+0x990>
 8011ad4:	151b      	asrs	r3, r3, #20
 8011ad6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011ada:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011ade:	fa4a f303 	asr.w	r3, sl, r3
 8011ae2:	445b      	add	r3, fp
 8011ae4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011ae8:	4e9c      	ldr	r6, [pc, #624]	; (8011d5c <__ieee754_pow+0xa04>)
 8011aea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011aee:	4116      	asrs	r6, r2
 8011af0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011af4:	2000      	movs	r0, #0
 8011af6:	ea23 0106 	bic.w	r1, r3, r6
 8011afa:	f1c2 0214 	rsb	r2, r2, #20
 8011afe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011b02:	fa4a fa02 	asr.w	sl, sl, r2
 8011b06:	f1bb 0f00 	cmp.w	fp, #0
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	460b      	mov	r3, r1
 8011b0e:	4620      	mov	r0, r4
 8011b10:	4629      	mov	r1, r5
 8011b12:	bfb8      	it	lt
 8011b14:	f1ca 0a00 	rsblt	sl, sl, #0
 8011b18:	f7ee fbde 	bl	80002d8 <__aeabi_dsub>
 8011b1c:	e9cd 0100 	strd	r0, r1, [sp]
 8011b20:	4642      	mov	r2, r8
 8011b22:	464b      	mov	r3, r9
 8011b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b28:	f7ee fbd8 	bl	80002dc <__adddf3>
 8011b2c:	2000      	movs	r0, #0
 8011b2e:	a378      	add	r3, pc, #480	; (adr r3, 8011d10 <__ieee754_pow+0x9b8>)
 8011b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b34:	4604      	mov	r4, r0
 8011b36:	460d      	mov	r5, r1
 8011b38:	f7ee fd86 	bl	8000648 <__aeabi_dmul>
 8011b3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b40:	4606      	mov	r6, r0
 8011b42:	460f      	mov	r7, r1
 8011b44:	4620      	mov	r0, r4
 8011b46:	4629      	mov	r1, r5
 8011b48:	f7ee fbc6 	bl	80002d8 <__aeabi_dsub>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	4640      	mov	r0, r8
 8011b52:	4649      	mov	r1, r9
 8011b54:	f7ee fbc0 	bl	80002d8 <__aeabi_dsub>
 8011b58:	a36f      	add	r3, pc, #444	; (adr r3, 8011d18 <__ieee754_pow+0x9c0>)
 8011b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5e:	f7ee fd73 	bl	8000648 <__aeabi_dmul>
 8011b62:	a36f      	add	r3, pc, #444	; (adr r3, 8011d20 <__ieee754_pow+0x9c8>)
 8011b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b68:	4680      	mov	r8, r0
 8011b6a:	4689      	mov	r9, r1
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	4629      	mov	r1, r5
 8011b70:	f7ee fd6a 	bl	8000648 <__aeabi_dmul>
 8011b74:	4602      	mov	r2, r0
 8011b76:	460b      	mov	r3, r1
 8011b78:	4640      	mov	r0, r8
 8011b7a:	4649      	mov	r1, r9
 8011b7c:	f7ee fbae 	bl	80002dc <__adddf3>
 8011b80:	4604      	mov	r4, r0
 8011b82:	460d      	mov	r5, r1
 8011b84:	4602      	mov	r2, r0
 8011b86:	460b      	mov	r3, r1
 8011b88:	4630      	mov	r0, r6
 8011b8a:	4639      	mov	r1, r7
 8011b8c:	f7ee fba6 	bl	80002dc <__adddf3>
 8011b90:	4632      	mov	r2, r6
 8011b92:	463b      	mov	r3, r7
 8011b94:	4680      	mov	r8, r0
 8011b96:	4689      	mov	r9, r1
 8011b98:	f7ee fb9e 	bl	80002d8 <__aeabi_dsub>
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	460b      	mov	r3, r1
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	4629      	mov	r1, r5
 8011ba4:	f7ee fb98 	bl	80002d8 <__aeabi_dsub>
 8011ba8:	4642      	mov	r2, r8
 8011baa:	4606      	mov	r6, r0
 8011bac:	460f      	mov	r7, r1
 8011bae:	464b      	mov	r3, r9
 8011bb0:	4640      	mov	r0, r8
 8011bb2:	4649      	mov	r1, r9
 8011bb4:	f7ee fd48 	bl	8000648 <__aeabi_dmul>
 8011bb8:	a35b      	add	r3, pc, #364	; (adr r3, 8011d28 <__ieee754_pow+0x9d0>)
 8011bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	460d      	mov	r5, r1
 8011bc2:	f7ee fd41 	bl	8000648 <__aeabi_dmul>
 8011bc6:	a35a      	add	r3, pc, #360	; (adr r3, 8011d30 <__ieee754_pow+0x9d8>)
 8011bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bcc:	f7ee fb84 	bl	80002d8 <__aeabi_dsub>
 8011bd0:	4622      	mov	r2, r4
 8011bd2:	462b      	mov	r3, r5
 8011bd4:	f7ee fd38 	bl	8000648 <__aeabi_dmul>
 8011bd8:	a357      	add	r3, pc, #348	; (adr r3, 8011d38 <__ieee754_pow+0x9e0>)
 8011bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bde:	f7ee fb7d 	bl	80002dc <__adddf3>
 8011be2:	4622      	mov	r2, r4
 8011be4:	462b      	mov	r3, r5
 8011be6:	f7ee fd2f 	bl	8000648 <__aeabi_dmul>
 8011bea:	a355      	add	r3, pc, #340	; (adr r3, 8011d40 <__ieee754_pow+0x9e8>)
 8011bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf0:	f7ee fb72 	bl	80002d8 <__aeabi_dsub>
 8011bf4:	4622      	mov	r2, r4
 8011bf6:	462b      	mov	r3, r5
 8011bf8:	f7ee fd26 	bl	8000648 <__aeabi_dmul>
 8011bfc:	a352      	add	r3, pc, #328	; (adr r3, 8011d48 <__ieee754_pow+0x9f0>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	f7ee fb6b 	bl	80002dc <__adddf3>
 8011c06:	4622      	mov	r2, r4
 8011c08:	462b      	mov	r3, r5
 8011c0a:	f7ee fd1d 	bl	8000648 <__aeabi_dmul>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	460b      	mov	r3, r1
 8011c12:	4640      	mov	r0, r8
 8011c14:	4649      	mov	r1, r9
 8011c16:	f7ee fb5f 	bl	80002d8 <__aeabi_dsub>
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	460d      	mov	r5, r1
 8011c1e:	4602      	mov	r2, r0
 8011c20:	460b      	mov	r3, r1
 8011c22:	4640      	mov	r0, r8
 8011c24:	4649      	mov	r1, r9
 8011c26:	f7ee fd0f 	bl	8000648 <__aeabi_dmul>
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	e9cd 0100 	strd	r0, r1, [sp]
 8011c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c34:	4620      	mov	r0, r4
 8011c36:	4629      	mov	r1, r5
 8011c38:	f7ee fb4e 	bl	80002d8 <__aeabi_dsub>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	460b      	mov	r3, r1
 8011c40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c44:	f7ee fe2a 	bl	800089c <__aeabi_ddiv>
 8011c48:	4632      	mov	r2, r6
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	460d      	mov	r5, r1
 8011c4e:	463b      	mov	r3, r7
 8011c50:	4640      	mov	r0, r8
 8011c52:	4649      	mov	r1, r9
 8011c54:	f7ee fcf8 	bl	8000648 <__aeabi_dmul>
 8011c58:	4632      	mov	r2, r6
 8011c5a:	463b      	mov	r3, r7
 8011c5c:	f7ee fb3e 	bl	80002dc <__adddf3>
 8011c60:	4602      	mov	r2, r0
 8011c62:	460b      	mov	r3, r1
 8011c64:	4620      	mov	r0, r4
 8011c66:	4629      	mov	r1, r5
 8011c68:	f7ee fb36 	bl	80002d8 <__aeabi_dsub>
 8011c6c:	4642      	mov	r2, r8
 8011c6e:	464b      	mov	r3, r9
 8011c70:	f7ee fb32 	bl	80002d8 <__aeabi_dsub>
 8011c74:	4602      	mov	r2, r0
 8011c76:	460b      	mov	r3, r1
 8011c78:	2000      	movs	r0, #0
 8011c7a:	4939      	ldr	r1, [pc, #228]	; (8011d60 <__ieee754_pow+0xa08>)
 8011c7c:	f7ee fb2c 	bl	80002d8 <__aeabi_dsub>
 8011c80:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011c84:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011c88:	4602      	mov	r2, r0
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	da2f      	bge.n	8011cee <__ieee754_pow+0x996>
 8011c8e:	4650      	mov	r0, sl
 8011c90:	ec43 2b10 	vmov	d0, r2, r3
 8011c94:	f000 f9c0 	bl	8012018 <scalbn>
 8011c98:	ec51 0b10 	vmov	r0, r1, d0
 8011c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ca0:	f7ff bbf1 	b.w	8011486 <__ieee754_pow+0x12e>
 8011ca4:	4b2f      	ldr	r3, [pc, #188]	; (8011d64 <__ieee754_pow+0xa0c>)
 8011ca6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011caa:	429e      	cmp	r6, r3
 8011cac:	f77f af0c 	ble.w	8011ac8 <__ieee754_pow+0x770>
 8011cb0:	4b2d      	ldr	r3, [pc, #180]	; (8011d68 <__ieee754_pow+0xa10>)
 8011cb2:	440b      	add	r3, r1
 8011cb4:	4303      	orrs	r3, r0
 8011cb6:	d00b      	beq.n	8011cd0 <__ieee754_pow+0x978>
 8011cb8:	a325      	add	r3, pc, #148	; (adr r3, 8011d50 <__ieee754_pow+0x9f8>)
 8011cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cc2:	f7ee fcc1 	bl	8000648 <__aeabi_dmul>
 8011cc6:	a322      	add	r3, pc, #136	; (adr r3, 8011d50 <__ieee754_pow+0x9f8>)
 8011cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ccc:	f7ff bbdb 	b.w	8011486 <__ieee754_pow+0x12e>
 8011cd0:	4622      	mov	r2, r4
 8011cd2:	462b      	mov	r3, r5
 8011cd4:	f7ee fb00 	bl	80002d8 <__aeabi_dsub>
 8011cd8:	4642      	mov	r2, r8
 8011cda:	464b      	mov	r3, r9
 8011cdc:	f7ee ff3a 	bl	8000b54 <__aeabi_dcmpge>
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	f43f aef1 	beq.w	8011ac8 <__ieee754_pow+0x770>
 8011ce6:	e7e7      	b.n	8011cb8 <__ieee754_pow+0x960>
 8011ce8:	f04f 0a00 	mov.w	sl, #0
 8011cec:	e718      	b.n	8011b20 <__ieee754_pow+0x7c8>
 8011cee:	4621      	mov	r1, r4
 8011cf0:	e7d4      	b.n	8011c9c <__ieee754_pow+0x944>
 8011cf2:	2000      	movs	r0, #0
 8011cf4:	491a      	ldr	r1, [pc, #104]	; (8011d60 <__ieee754_pow+0xa08>)
 8011cf6:	f7ff bb8f 	b.w	8011418 <__ieee754_pow+0xc0>
 8011cfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011cfe:	f7ff bb8b 	b.w	8011418 <__ieee754_pow+0xc0>
 8011d02:	4630      	mov	r0, r6
 8011d04:	4639      	mov	r1, r7
 8011d06:	f7ff bb87 	b.w	8011418 <__ieee754_pow+0xc0>
 8011d0a:	4693      	mov	fp, r2
 8011d0c:	f7ff bb98 	b.w	8011440 <__ieee754_pow+0xe8>
 8011d10:	00000000 	.word	0x00000000
 8011d14:	3fe62e43 	.word	0x3fe62e43
 8011d18:	fefa39ef 	.word	0xfefa39ef
 8011d1c:	3fe62e42 	.word	0x3fe62e42
 8011d20:	0ca86c39 	.word	0x0ca86c39
 8011d24:	be205c61 	.word	0xbe205c61
 8011d28:	72bea4d0 	.word	0x72bea4d0
 8011d2c:	3e663769 	.word	0x3e663769
 8011d30:	c5d26bf1 	.word	0xc5d26bf1
 8011d34:	3ebbbd41 	.word	0x3ebbbd41
 8011d38:	af25de2c 	.word	0xaf25de2c
 8011d3c:	3f11566a 	.word	0x3f11566a
 8011d40:	16bebd93 	.word	0x16bebd93
 8011d44:	3f66c16c 	.word	0x3f66c16c
 8011d48:	5555553e 	.word	0x5555553e
 8011d4c:	3fc55555 	.word	0x3fc55555
 8011d50:	c2f8f359 	.word	0xc2f8f359
 8011d54:	01a56e1f 	.word	0x01a56e1f
 8011d58:	3fe00000 	.word	0x3fe00000
 8011d5c:	000fffff 	.word	0x000fffff
 8011d60:	3ff00000 	.word	0x3ff00000
 8011d64:	4090cbff 	.word	0x4090cbff
 8011d68:	3f6f3400 	.word	0x3f6f3400
 8011d6c:	652b82fe 	.word	0x652b82fe
 8011d70:	3c971547 	.word	0x3c971547

08011d74 <__ieee754_sqrt>:
 8011d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d78:	4955      	ldr	r1, [pc, #340]	; (8011ed0 <__ieee754_sqrt+0x15c>)
 8011d7a:	ec55 4b10 	vmov	r4, r5, d0
 8011d7e:	43a9      	bics	r1, r5
 8011d80:	462b      	mov	r3, r5
 8011d82:	462a      	mov	r2, r5
 8011d84:	d112      	bne.n	8011dac <__ieee754_sqrt+0x38>
 8011d86:	ee10 2a10 	vmov	r2, s0
 8011d8a:	ee10 0a10 	vmov	r0, s0
 8011d8e:	4629      	mov	r1, r5
 8011d90:	f7ee fc5a 	bl	8000648 <__aeabi_dmul>
 8011d94:	4602      	mov	r2, r0
 8011d96:	460b      	mov	r3, r1
 8011d98:	4620      	mov	r0, r4
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	f7ee fa9e 	bl	80002dc <__adddf3>
 8011da0:	4604      	mov	r4, r0
 8011da2:	460d      	mov	r5, r1
 8011da4:	ec45 4b10 	vmov	d0, r4, r5
 8011da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dac:	2d00      	cmp	r5, #0
 8011dae:	ee10 0a10 	vmov	r0, s0
 8011db2:	4621      	mov	r1, r4
 8011db4:	dc0f      	bgt.n	8011dd6 <__ieee754_sqrt+0x62>
 8011db6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011dba:	4330      	orrs	r0, r6
 8011dbc:	d0f2      	beq.n	8011da4 <__ieee754_sqrt+0x30>
 8011dbe:	b155      	cbz	r5, 8011dd6 <__ieee754_sqrt+0x62>
 8011dc0:	ee10 2a10 	vmov	r2, s0
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	4629      	mov	r1, r5
 8011dc8:	f7ee fa86 	bl	80002d8 <__aeabi_dsub>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	460b      	mov	r3, r1
 8011dd0:	f7ee fd64 	bl	800089c <__aeabi_ddiv>
 8011dd4:	e7e4      	b.n	8011da0 <__ieee754_sqrt+0x2c>
 8011dd6:	151b      	asrs	r3, r3, #20
 8011dd8:	d073      	beq.n	8011ec2 <__ieee754_sqrt+0x14e>
 8011dda:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011dde:	07dd      	lsls	r5, r3, #31
 8011de0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011de4:	bf48      	it	mi
 8011de6:	0fc8      	lsrmi	r0, r1, #31
 8011de8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011dec:	bf44      	itt	mi
 8011dee:	0049      	lslmi	r1, r1, #1
 8011df0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011df4:	2500      	movs	r5, #0
 8011df6:	1058      	asrs	r0, r3, #1
 8011df8:	0fcb      	lsrs	r3, r1, #31
 8011dfa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011dfe:	0049      	lsls	r1, r1, #1
 8011e00:	2316      	movs	r3, #22
 8011e02:	462c      	mov	r4, r5
 8011e04:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011e08:	19a7      	adds	r7, r4, r6
 8011e0a:	4297      	cmp	r7, r2
 8011e0c:	bfde      	ittt	le
 8011e0e:	19bc      	addle	r4, r7, r6
 8011e10:	1bd2      	suble	r2, r2, r7
 8011e12:	19ad      	addle	r5, r5, r6
 8011e14:	0fcf      	lsrs	r7, r1, #31
 8011e16:	3b01      	subs	r3, #1
 8011e18:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011e1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011e20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011e24:	d1f0      	bne.n	8011e08 <__ieee754_sqrt+0x94>
 8011e26:	f04f 0c20 	mov.w	ip, #32
 8011e2a:	469e      	mov	lr, r3
 8011e2c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011e30:	42a2      	cmp	r2, r4
 8011e32:	eb06 070e 	add.w	r7, r6, lr
 8011e36:	dc02      	bgt.n	8011e3e <__ieee754_sqrt+0xca>
 8011e38:	d112      	bne.n	8011e60 <__ieee754_sqrt+0xec>
 8011e3a:	428f      	cmp	r7, r1
 8011e3c:	d810      	bhi.n	8011e60 <__ieee754_sqrt+0xec>
 8011e3e:	2f00      	cmp	r7, #0
 8011e40:	eb07 0e06 	add.w	lr, r7, r6
 8011e44:	da42      	bge.n	8011ecc <__ieee754_sqrt+0x158>
 8011e46:	f1be 0f00 	cmp.w	lr, #0
 8011e4a:	db3f      	blt.n	8011ecc <__ieee754_sqrt+0x158>
 8011e4c:	f104 0801 	add.w	r8, r4, #1
 8011e50:	1b12      	subs	r2, r2, r4
 8011e52:	428f      	cmp	r7, r1
 8011e54:	bf88      	it	hi
 8011e56:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8011e5a:	1bc9      	subs	r1, r1, r7
 8011e5c:	4433      	add	r3, r6
 8011e5e:	4644      	mov	r4, r8
 8011e60:	0052      	lsls	r2, r2, #1
 8011e62:	f1bc 0c01 	subs.w	ip, ip, #1
 8011e66:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011e6a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011e6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011e72:	d1dd      	bne.n	8011e30 <__ieee754_sqrt+0xbc>
 8011e74:	430a      	orrs	r2, r1
 8011e76:	d006      	beq.n	8011e86 <__ieee754_sqrt+0x112>
 8011e78:	1c5c      	adds	r4, r3, #1
 8011e7a:	bf13      	iteet	ne
 8011e7c:	3301      	addne	r3, #1
 8011e7e:	3501      	addeq	r5, #1
 8011e80:	4663      	moveq	r3, ip
 8011e82:	f023 0301 	bicne.w	r3, r3, #1
 8011e86:	106a      	asrs	r2, r5, #1
 8011e88:	085b      	lsrs	r3, r3, #1
 8011e8a:	07e9      	lsls	r1, r5, #31
 8011e8c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011e90:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011e94:	bf48      	it	mi
 8011e96:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011e9a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011e9e:	461c      	mov	r4, r3
 8011ea0:	e780      	b.n	8011da4 <__ieee754_sqrt+0x30>
 8011ea2:	0aca      	lsrs	r2, r1, #11
 8011ea4:	3815      	subs	r0, #21
 8011ea6:	0549      	lsls	r1, r1, #21
 8011ea8:	2a00      	cmp	r2, #0
 8011eaa:	d0fa      	beq.n	8011ea2 <__ieee754_sqrt+0x12e>
 8011eac:	02d6      	lsls	r6, r2, #11
 8011eae:	d50a      	bpl.n	8011ec6 <__ieee754_sqrt+0x152>
 8011eb0:	f1c3 0420 	rsb	r4, r3, #32
 8011eb4:	fa21 f404 	lsr.w	r4, r1, r4
 8011eb8:	1e5d      	subs	r5, r3, #1
 8011eba:	4099      	lsls	r1, r3
 8011ebc:	4322      	orrs	r2, r4
 8011ebe:	1b43      	subs	r3, r0, r5
 8011ec0:	e78b      	b.n	8011dda <__ieee754_sqrt+0x66>
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	e7f0      	b.n	8011ea8 <__ieee754_sqrt+0x134>
 8011ec6:	0052      	lsls	r2, r2, #1
 8011ec8:	3301      	adds	r3, #1
 8011eca:	e7ef      	b.n	8011eac <__ieee754_sqrt+0x138>
 8011ecc:	46a0      	mov	r8, r4
 8011ece:	e7bf      	b.n	8011e50 <__ieee754_sqrt+0xdc>
 8011ed0:	7ff00000 	.word	0x7ff00000

08011ed4 <fabs>:
 8011ed4:	ec51 0b10 	vmov	r0, r1, d0
 8011ed8:	ee10 2a10 	vmov	r2, s0
 8011edc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ee0:	ec43 2b10 	vmov	d0, r2, r3
 8011ee4:	4770      	bx	lr

08011ee6 <finite>:
 8011ee6:	ee10 3a90 	vmov	r3, s1
 8011eea:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8011eee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011ef2:	0fc0      	lsrs	r0, r0, #31
 8011ef4:	4770      	bx	lr

08011ef6 <matherr>:
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	4770      	bx	lr
 8011efa:	0000      	movs	r0, r0
 8011efc:	0000      	movs	r0, r0
	...

08011f00 <nan>:
 8011f00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f08 <nan+0x8>
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	00000000 	.word	0x00000000
 8011f0c:	7ff80000 	.word	0x7ff80000

08011f10 <rint>:
 8011f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f12:	ec51 0b10 	vmov	r0, r1, d0
 8011f16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011f1a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011f1e:	2e13      	cmp	r6, #19
 8011f20:	460b      	mov	r3, r1
 8011f22:	ee10 4a10 	vmov	r4, s0
 8011f26:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011f2a:	dc56      	bgt.n	8011fda <rint+0xca>
 8011f2c:	2e00      	cmp	r6, #0
 8011f2e:	da2b      	bge.n	8011f88 <rint+0x78>
 8011f30:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011f34:	4302      	orrs	r2, r0
 8011f36:	d023      	beq.n	8011f80 <rint+0x70>
 8011f38:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011f3c:	4302      	orrs	r2, r0
 8011f3e:	4254      	negs	r4, r2
 8011f40:	4314      	orrs	r4, r2
 8011f42:	0c4b      	lsrs	r3, r1, #17
 8011f44:	0b24      	lsrs	r4, r4, #12
 8011f46:	045b      	lsls	r3, r3, #17
 8011f48:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011f4c:	ea44 0103 	orr.w	r1, r4, r3
 8011f50:	460b      	mov	r3, r1
 8011f52:	492f      	ldr	r1, [pc, #188]	; (8012010 <rint+0x100>)
 8011f54:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011f58:	e9d1 6700 	ldrd	r6, r7, [r1]
 8011f5c:	4602      	mov	r2, r0
 8011f5e:	4639      	mov	r1, r7
 8011f60:	4630      	mov	r0, r6
 8011f62:	f7ee f9bb 	bl	80002dc <__adddf3>
 8011f66:	e9cd 0100 	strd	r0, r1, [sp]
 8011f6a:	463b      	mov	r3, r7
 8011f6c:	4632      	mov	r2, r6
 8011f6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f72:	f7ee f9b1 	bl	80002d8 <__aeabi_dsub>
 8011f76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f7a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8011f7e:	4639      	mov	r1, r7
 8011f80:	ec41 0b10 	vmov	d0, r0, r1
 8011f84:	b003      	add	sp, #12
 8011f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f88:	4a22      	ldr	r2, [pc, #136]	; (8012014 <rint+0x104>)
 8011f8a:	4132      	asrs	r2, r6
 8011f8c:	ea01 0702 	and.w	r7, r1, r2
 8011f90:	4307      	orrs	r7, r0
 8011f92:	d0f5      	beq.n	8011f80 <rint+0x70>
 8011f94:	0852      	lsrs	r2, r2, #1
 8011f96:	4011      	ands	r1, r2
 8011f98:	430c      	orrs	r4, r1
 8011f9a:	d00b      	beq.n	8011fb4 <rint+0xa4>
 8011f9c:	ea23 0202 	bic.w	r2, r3, r2
 8011fa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011fa4:	2e13      	cmp	r6, #19
 8011fa6:	fa43 f306 	asr.w	r3, r3, r6
 8011faa:	bf0c      	ite	eq
 8011fac:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011fb0:	2400      	movne	r4, #0
 8011fb2:	4313      	orrs	r3, r2
 8011fb4:	4916      	ldr	r1, [pc, #88]	; (8012010 <rint+0x100>)
 8011fb6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011fba:	4622      	mov	r2, r4
 8011fbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	4629      	mov	r1, r5
 8011fc4:	f7ee f98a 	bl	80002dc <__adddf3>
 8011fc8:	e9cd 0100 	strd	r0, r1, [sp]
 8011fcc:	4622      	mov	r2, r4
 8011fce:	462b      	mov	r3, r5
 8011fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fd4:	f7ee f980 	bl	80002d8 <__aeabi_dsub>
 8011fd8:	e7d2      	b.n	8011f80 <rint+0x70>
 8011fda:	2e33      	cmp	r6, #51	; 0x33
 8011fdc:	dd07      	ble.n	8011fee <rint+0xde>
 8011fde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011fe2:	d1cd      	bne.n	8011f80 <rint+0x70>
 8011fe4:	ee10 2a10 	vmov	r2, s0
 8011fe8:	f7ee f978 	bl	80002dc <__adddf3>
 8011fec:	e7c8      	b.n	8011f80 <rint+0x70>
 8011fee:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8011ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ff6:	40f2      	lsrs	r2, r6
 8011ff8:	4210      	tst	r0, r2
 8011ffa:	d0c1      	beq.n	8011f80 <rint+0x70>
 8011ffc:	0852      	lsrs	r2, r2, #1
 8011ffe:	4210      	tst	r0, r2
 8012000:	bf1f      	itttt	ne
 8012002:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012006:	ea20 0202 	bicne.w	r2, r0, r2
 801200a:	4134      	asrne	r4, r6
 801200c:	4314      	orrne	r4, r2
 801200e:	e7d1      	b.n	8011fb4 <rint+0xa4>
 8012010:	08013a50 	.word	0x08013a50
 8012014:	000fffff 	.word	0x000fffff

08012018 <scalbn>:
 8012018:	b570      	push	{r4, r5, r6, lr}
 801201a:	ec55 4b10 	vmov	r4, r5, d0
 801201e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012022:	4606      	mov	r6, r0
 8012024:	462b      	mov	r3, r5
 8012026:	b9aa      	cbnz	r2, 8012054 <scalbn+0x3c>
 8012028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801202c:	4323      	orrs	r3, r4
 801202e:	d03b      	beq.n	80120a8 <scalbn+0x90>
 8012030:	4b31      	ldr	r3, [pc, #196]	; (80120f8 <scalbn+0xe0>)
 8012032:	4629      	mov	r1, r5
 8012034:	2200      	movs	r2, #0
 8012036:	ee10 0a10 	vmov	r0, s0
 801203a:	f7ee fb05 	bl	8000648 <__aeabi_dmul>
 801203e:	4b2f      	ldr	r3, [pc, #188]	; (80120fc <scalbn+0xe4>)
 8012040:	429e      	cmp	r6, r3
 8012042:	4604      	mov	r4, r0
 8012044:	460d      	mov	r5, r1
 8012046:	da12      	bge.n	801206e <scalbn+0x56>
 8012048:	a327      	add	r3, pc, #156	; (adr r3, 80120e8 <scalbn+0xd0>)
 801204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204e:	f7ee fafb 	bl	8000648 <__aeabi_dmul>
 8012052:	e009      	b.n	8012068 <scalbn+0x50>
 8012054:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012058:	428a      	cmp	r2, r1
 801205a:	d10c      	bne.n	8012076 <scalbn+0x5e>
 801205c:	ee10 2a10 	vmov	r2, s0
 8012060:	4620      	mov	r0, r4
 8012062:	4629      	mov	r1, r5
 8012064:	f7ee f93a 	bl	80002dc <__adddf3>
 8012068:	4604      	mov	r4, r0
 801206a:	460d      	mov	r5, r1
 801206c:	e01c      	b.n	80120a8 <scalbn+0x90>
 801206e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012072:	460b      	mov	r3, r1
 8012074:	3a36      	subs	r2, #54	; 0x36
 8012076:	4432      	add	r2, r6
 8012078:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801207c:	428a      	cmp	r2, r1
 801207e:	dd0b      	ble.n	8012098 <scalbn+0x80>
 8012080:	ec45 4b11 	vmov	d1, r4, r5
 8012084:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80120f0 <scalbn+0xd8>
 8012088:	f000 f83c 	bl	8012104 <copysign>
 801208c:	a318      	add	r3, pc, #96	; (adr r3, 80120f0 <scalbn+0xd8>)
 801208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012092:	ec51 0b10 	vmov	r0, r1, d0
 8012096:	e7da      	b.n	801204e <scalbn+0x36>
 8012098:	2a00      	cmp	r2, #0
 801209a:	dd08      	ble.n	80120ae <scalbn+0x96>
 801209c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80120a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80120a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80120a8:	ec45 4b10 	vmov	d0, r4, r5
 80120ac:	bd70      	pop	{r4, r5, r6, pc}
 80120ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80120b2:	da0d      	bge.n	80120d0 <scalbn+0xb8>
 80120b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80120b8:	429e      	cmp	r6, r3
 80120ba:	ec45 4b11 	vmov	d1, r4, r5
 80120be:	dce1      	bgt.n	8012084 <scalbn+0x6c>
 80120c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80120e8 <scalbn+0xd0>
 80120c4:	f000 f81e 	bl	8012104 <copysign>
 80120c8:	a307      	add	r3, pc, #28	; (adr r3, 80120e8 <scalbn+0xd0>)
 80120ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ce:	e7e0      	b.n	8012092 <scalbn+0x7a>
 80120d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80120d4:	3236      	adds	r2, #54	; 0x36
 80120d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80120da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80120de:	4620      	mov	r0, r4
 80120e0:	4629      	mov	r1, r5
 80120e2:	2200      	movs	r2, #0
 80120e4:	4b06      	ldr	r3, [pc, #24]	; (8012100 <scalbn+0xe8>)
 80120e6:	e7b2      	b.n	801204e <scalbn+0x36>
 80120e8:	c2f8f359 	.word	0xc2f8f359
 80120ec:	01a56e1f 	.word	0x01a56e1f
 80120f0:	8800759c 	.word	0x8800759c
 80120f4:	7e37e43c 	.word	0x7e37e43c
 80120f8:	43500000 	.word	0x43500000
 80120fc:	ffff3cb0 	.word	0xffff3cb0
 8012100:	3c900000 	.word	0x3c900000

08012104 <copysign>:
 8012104:	ec51 0b10 	vmov	r0, r1, d0
 8012108:	ee11 0a90 	vmov	r0, s3
 801210c:	ee10 2a10 	vmov	r2, s0
 8012110:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012114:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012118:	ea41 0300 	orr.w	r3, r1, r0
 801211c:	ec43 2b10 	vmov	d0, r2, r3
 8012120:	4770      	bx	lr
	...

08012124 <_init>:
 8012124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012126:	bf00      	nop
 8012128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801212a:	bc08      	pop	{r3}
 801212c:	469e      	mov	lr, r3
 801212e:	4770      	bx	lr

08012130 <_fini>:
 8012130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012132:	bf00      	nop
 8012134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012136:	bc08      	pop	{r3}
 8012138:	469e      	mov	lr, r3
 801213a:	4770      	bx	lr
