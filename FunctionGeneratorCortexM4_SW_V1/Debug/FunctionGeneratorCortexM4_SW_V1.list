
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f1c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009474  08009474  00020444  2**0
                  CONTENTS
  4 .ARM          00000000  08009474  08009474  00020444  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009474  08009474  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009474  08009474  00019474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  0800947c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000444  080098c0  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  080098c0  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021f8e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004603  00000000  00000000  00042402  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae0  00000000  00000000  00046a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018a8  00000000  00000000  000484e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002eb44  00000000  00000000  00049d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a33e  00000000  00000000  000788d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123636  00000000  00000000  00092c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b6248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007700  00000000  00000000  001b62c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000444 	.word	0x20000444
 80001fc:	00000000 	.word	0x00000000
 8000200:	080090e4 	.word	0x080090e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000448 	.word	0x20000448
 800021c:	080090e4 	.word	0x080090e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <dm_update_display>:
//uint16_t button_x_positions[1] = { (BUTTON_WIDTH) };

uint8_t size_test = 1;

void dm_update_display()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af04      	add	r7, sp, #16

	ILI9341_Draw_Text("TEST", 10, 2, BLACK, 3, DARKCYAN);
 80002c6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	2303      	movs	r3, #3
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2300      	movs	r3, #0
 80002d2:	2202      	movs	r2, #2
 80002d4:	210a      	movs	r1, #10
 80002d6:	482d      	ldr	r0, [pc, #180]	; (800038c <dm_update_display+0xcc>)
 80002d8:	f007 fa76 	bl	80077c8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("TEST", 200, 200, BLACK, 3, DARKCYAN);
 80002dc:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2303      	movs	r3, #3
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	2300      	movs	r3, #0
 80002e8:	22c8      	movs	r2, #200	; 0xc8
 80002ea:	21c8      	movs	r1, #200	; 0xc8
 80002ec:	4827      	ldr	r0, [pc, #156]	; (800038c <dm_update_display+0xcc>)
 80002ee:	f007 fa6b 	bl	80077c8 <ILI9341_Draw_Text>



	//ILI9341_Draw_Filled_Circle(50, 50, 50, BLUE);
	ILI9341_Draw_Text("TEST", 10, 200, BLACK, 3, DARKCYAN);
 80002f2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	2303      	movs	r3, #3
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	2300      	movs	r3, #0
 80002fe:	22c8      	movs	r2, #200	; 0xc8
 8000300:	210a      	movs	r1, #10
 8000302:	4822      	ldr	r0, [pc, #136]	; (800038c <dm_update_display+0xcc>)
 8000304:	f007 fa60 	bl	80077c8 <ILI9341_Draw_Text>


	size_test++;
 8000308:	4b21      	ldr	r3, [pc, #132]	; (8000390 <dm_update_display+0xd0>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	b2da      	uxtb	r2, r3
 8000310:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <dm_update_display+0xd0>)
 8000312:	701a      	strb	r2, [r3, #0]
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	button_x_positions[0],
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <dm_update_display+0xd4>)
 8000316:	8818      	ldrh	r0, [r3, #0]
 8000318:	2300      	movs	r3, #0
 800031a:	9302      	str	r3, [sp, #8]
 800031c:	2303      	movs	r3, #3
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2332      	movs	r3, #50	; 0x32
 8000328:	2250      	movs	r2, #80	; 0x50
 800032a:	21be      	movs	r1, #190	; 0xbe
 800032c:	f007 f8e0 	bl	80074f0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													50,
													DARKCYAN,
													3,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	button_x_positions[1],
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <dm_update_display+0xd4>)
 8000332:	8858      	ldrh	r0, [r3, #2]
 8000334:	2300      	movs	r3, #0
 8000336:	9302      	str	r3, [sp, #8]
 8000338:	2303      	movs	r3, #3
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2332      	movs	r3, #50	; 0x32
 8000344:	2250      	movs	r2, #80	; 0x50
 8000346:	21be      	movs	r1, #190	; 0xbe
 8000348:	f007 f8d2 	bl	80074f0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													50,
													DARKGREEN,
													3,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	button_x_positions[2],
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <dm_update_display+0xd4>)
 800034e:	8898      	ldrh	r0, [r3, #4]
 8000350:	2300      	movs	r3, #0
 8000352:	9302      	str	r3, [sp, #8]
 8000354:	2303      	movs	r3, #3
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2332      	movs	r3, #50	; 0x32
 8000360:	2250      	movs	r2, #80	; 0x50
 8000362:	21be      	movs	r1, #190	; 0xbe
 8000364:	f007 f8c4 	bl	80074f0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													50,
													YELLOW,
													3,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	button_x_positions[3],
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <dm_update_display+0xd4>)
 800036a:	88d8      	ldrh	r0, [r3, #6]
 800036c:	2300      	movs	r3, #0
 800036e:	9302      	str	r3, [sp, #8]
 8000370:	2303      	movs	r3, #3
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2332      	movs	r3, #50	; 0x32
 800037c:	2250      	movs	r2, #80	; 0x50
 800037e:	21be      	movs	r1, #190	; 0xbe
 8000380:	f007 f8b6 	bl	80074f0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BLACK);



	//dm_test_screen();
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	080090fc 	.word	0x080090fc
 8000390:	20000008 	.word	0x20000008
 8000394:	20000000 	.word	0x20000000

08000398 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08c      	sub	sp, #48	; 0x30
 800039c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800039e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2220      	movs	r2, #32
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f007 ff47 	bl	8008244 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80003b6:	4b32      	ldr	r3, [pc, #200]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003be:	4b30      	ldr	r3, [pc, #192]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003c4:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ca:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80003d0:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003d6:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003d8:	2200      	movs	r2, #0
 80003da:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003dc:	4b28      	ldr	r3, [pc, #160]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003de:	2204      	movs	r2, #4
 80003e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003e8:	4b25      	ldr	r3, [pc, #148]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003ee:	4b24      	ldr	r3, [pc, #144]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003f4:	4b22      	ldr	r3, [pc, #136]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003fc:	4b20      	ldr	r3, [pc, #128]	; (8000480 <MX_ADC1_Init+0xe8>)
 80003fe:	2200      	movs	r2, #0
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000402:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <MX_ADC1_Init+0xe8>)
 8000404:	2200      	movs	r2, #0
 8000406:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <MX_ADC1_Init+0xe8>)
 800040a:	2201      	movs	r2, #1
 800040c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_ADC1_Init+0xe8>)
 8000412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000416:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <MX_ADC1_Init+0xe8>)
 800041a:	2200      	movs	r2, #0
 800041c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000420:	4817      	ldr	r0, [pc, #92]	; (8000480 <MX_ADC1_Init+0xe8>)
 8000422:	f001 ff8f 	bl	8002344 <HAL_ADC_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800042c:	f000 ff26 	bl	800127c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000430:	2300      	movs	r3, #0
 8000432:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000438:	4619      	mov	r1, r3
 800043a:	4811      	ldr	r0, [pc, #68]	; (8000480 <MX_ADC1_Init+0xe8>)
 800043c:	f002 fd18 	bl	8002e70 <HAL_ADCEx_MultiModeConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000446:	f000 ff19 	bl	800127c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_ADC1_Init+0xec>)
 800044c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800044e:	2306      	movs	r3, #6
 8000450:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000456:	237f      	movs	r3, #127	; 0x7f
 8000458:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800045a:	2304      	movs	r3, #4
 800045c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4619      	mov	r1, r3
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <MX_ADC1_Init+0xe8>)
 8000468:	f002 f92c 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000472:	f000 ff03 	bl	800127c <Error_Handler>
  }

}
 8000476:	bf00      	nop
 8000478:	3730      	adds	r7, #48	; 0x30
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000484 	.word	0x20000484
 8000484:	0c900008 	.word	0x0c900008

08000488 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004a8:	d14f      	bne.n	800054a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004aa:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <HAL_ADC_MspInit+0xcc>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a29      	ldr	r2, [pc, #164]	; (8000554 <HAL_ADC_MspInit+0xcc>)
 80004b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <HAL_ADC_MspInit+0xcc>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b24      	ldr	r3, [pc, #144]	; (8000554 <HAL_ADC_MspInit+0xcc>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a23      	ldr	r2, [pc, #140]	; (8000554 <HAL_ADC_MspInit+0xcc>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b21      	ldr	r3, [pc, #132]	; (8000554 <HAL_ADC_MspInit+0xcc>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004da:	2304      	movs	r3, #4
 80004dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004de:	2303      	movs	r3, #3
 80004e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4619      	mov	r1, r3
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f0:	f003 ffda 	bl	80044a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 80004f6:	4a19      	ldr	r2, [pc, #100]	; (800055c <HAL_ADC_MspInit+0xd4>)
 80004f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 80004fc:	2205      	movs	r2, #5
 80004fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 8000514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000518:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 800051c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000520:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 8000524:	2220      	movs	r2, #32
 8000526:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 800052a:	2200      	movs	r2, #0
 800052c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800052e:	480a      	ldr	r0, [pc, #40]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 8000530:	f003 fd48 	bl	8003fc4 <HAL_DMA_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800053a:	f000 fe9f 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 8000542:	655a      	str	r2, [r3, #84]	; 0x54
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_ADC_MspInit+0xd0>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800054a:	bf00      	nop
 800054c:	3728      	adds	r7, #40	; 0x28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	200004f0 	.word	0x200004f0
 800055c:	40020008 	.word	0x40020008

08000560 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_COMP1_Init+0x44>)
 8000566:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <MX_COMP1_Init+0x48>)
 8000568:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_COMP1_Init+0x44>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_COMP1_Init+0x44>)
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <MX_COMP1_Init+0x4c>)
 8000574:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_COMP1_Init+0x44>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_COMP1_Init+0x44>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_COMP1_Init+0x44>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_COMP1_Init+0x44>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_COMP1_Init+0x44>)
 8000590:	f002 fec2 	bl	8003318 <HAL_COMP_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800059a:	f000 fe6f 	bl	800127c <Error_Handler>
  }

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000550 	.word	0x20000550
 80005a8:	40010200 	.word	0x40010200
 80005ac:	00800030 	.word	0x00800030

080005b0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0f      	ldr	r2, [pc, #60]	; (800060c <HAL_COMP_MspInit+0x5c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d118      	bne.n	8000604 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_COMP_MspInit+0x60>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_COMP_MspInit+0x60>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_COMP_MspInit+0x60>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005ea:	2302      	movs	r3, #2
 80005ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ee:	2303      	movs	r3, #3
 80005f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f003 ff52 	bl	80044a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40010200 	.word	0x40010200
 8000610:	40021000 	.word	0x40021000

08000614 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	; 0x30
 8000618:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2230      	movs	r2, #48	; 0x30
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f007 fe0f 	bl	8008244 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_DAC1_Init+0x8c>)
 8000628:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <MX_DAC1_Init+0x90>)
 800062a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800062c:	481c      	ldr	r0, [pc, #112]	; (80006a0 <MX_DAC1_Init+0x8c>)
 800062e:	f003 f916 	bl	800385e <HAL_DAC_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000638:	f000 fe20 	bl	800127c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800063c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000640:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800064e:	2306      	movs	r3, #6
 8000650:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_DAC1_Init+0x8c>)
 800066a:	f003 fa75 	bl	8003b58 <HAL_DAC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8000674:	f000 fe02 	bl	800127c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	2210      	movs	r2, #16
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_DAC1_Init+0x8c>)
 8000688:	f003 fa66 	bl	8003b58 <HAL_DAC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8000692:	f000 fdf3 	bl	800127c <Error_Handler>
  }

}
 8000696:	bf00      	nop
 8000698:	3730      	adds	r7, #48	; 0x30
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000588 	.word	0x20000588
 80006a4:	50000800 	.word	0x50000800

080006a8 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2230      	movs	r2, #48	; 0x30
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f007 fdc5 	bl	8008244 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_DAC2_Init+0x6c>)
 80006bc:	4a16      	ldr	r2, [pc, #88]	; (8000718 <MX_DAC2_Init+0x70>)
 80006be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <MX_DAC2_Init+0x6c>)
 80006c2:	f003 f8cc 	bl	800385e <HAL_DAC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80006cc:	f000 fdd6 	bl	800127c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80006d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006e2:	2306      	movs	r3, #6
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_DAC2_Init+0x6c>)
 80006fe:	f003 fa2b 	bl	8003b58 <HAL_DAC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8000708:	f000 fdb8 	bl	800127c <Error_Handler>
  }

}
 800070c:	bf00      	nop
 800070e:	3730      	adds	r7, #48	; 0x30
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000574 	.word	0x20000574
 8000718:	50000c00 	.word	0x50000c00

0800071c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a56      	ldr	r2, [pc, #344]	; (8000894 <HAL_DAC_MspInit+0x178>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d150      	bne.n	80007e0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800073e:	4b56      	ldr	r3, [pc, #344]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a55      	ldr	r2, [pc, #340]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b53      	ldr	r3, [pc, #332]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b50      	ldr	r3, [pc, #320]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a4f      	ldr	r2, [pc, #316]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b4d      	ldr	r3, [pc, #308]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800076e:	2330      	movs	r3, #48	; 0x30
 8000770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000772:	2303      	movs	r3, #3
 8000774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f003 fe90 	bl	80044a8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000788:	4b44      	ldr	r3, [pc, #272]	; (800089c <HAL_DAC_MspInit+0x180>)
 800078a:	4a45      	ldr	r2, [pc, #276]	; (80008a0 <HAL_DAC_MspInit+0x184>)
 800078c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800078e:	4b43      	ldr	r3, [pc, #268]	; (800089c <HAL_DAC_MspInit+0x180>)
 8000790:	2206      	movs	r2, #6
 8000792:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000794:	4b41      	ldr	r3, [pc, #260]	; (800089c <HAL_DAC_MspInit+0x180>)
 8000796:	2210      	movs	r2, #16
 8000798:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800079a:	4b40      	ldr	r3, [pc, #256]	; (800089c <HAL_DAC_MspInit+0x180>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007a0:	4b3e      	ldr	r3, [pc, #248]	; (800089c <HAL_DAC_MspInit+0x180>)
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <HAL_DAC_MspInit+0x180>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007ae:	4b3b      	ldr	r3, [pc, #236]	; (800089c <HAL_DAC_MspInit+0x180>)
 80007b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007b4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80007b6:	4b39      	ldr	r3, [pc, #228]	; (800089c <HAL_DAC_MspInit+0x180>)
 80007b8:	2220      	movs	r2, #32
 80007ba:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <HAL_DAC_MspInit+0x180>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80007c2:	4836      	ldr	r0, [pc, #216]	; (800089c <HAL_DAC_MspInit+0x180>)
 80007c4:	f003 fbfe 	bl	8003fc4 <HAL_DMA_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80007ce:	f000 fd55 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a31      	ldr	r2, [pc, #196]	; (800089c <HAL_DAC_MspInit+0x180>)
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	4a30      	ldr	r2, [pc, #192]	; (800089c <HAL_DAC_MspInit+0x180>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80007de:	e054      	b.n	800088a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a2f      	ldr	r2, [pc, #188]	; (80008a4 <HAL_DAC_MspInit+0x188>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d14f      	bne.n	800088a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a24      	ldr	r2, [pc, #144]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <HAL_DAC_MspInit+0x17c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081e:	2303      	movs	r3, #3
 8000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f003 fe3a 	bl	80044a8 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 8000836:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <HAL_DAC_MspInit+0x190>)
 8000838:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 800083c:	2229      	movs	r2, #41	; 0x29
 800083e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 8000842:	2210      	movs	r2, #16
 8000844:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 800085c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000860:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 8000864:	2220      	movs	r2, #32
 8000866:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 8000870:	f003 fba8 	bl	8003fc4 <HAL_DMA_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800087a:	f000 fcff 	bl	800127c <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_DAC_MspInit+0x18c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6293      	str	r3, [r2, #40]	; 0x28
}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	50000800 	.word	0x50000800
 8000898:	40021000 	.word	0x40021000
 800089c:	2000059c 	.word	0x2000059c
 80008a0:	4002001c 	.word	0x4002001c
 80008a4:	50000c00 	.word	0x50000c00
 80008a8:	200005fc 	.word	0x200005fc
 80008ac:	40020030 	.word	0x40020030

080008b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_DMA_Init+0x70>)
 80008b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <MX_DMA_Init+0x70>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6493      	str	r3, [r2, #72]	; 0x48
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_DMA_Init+0x70>)
 80008c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_DMA_Init+0x70>)
 80008d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d2:	4a13      	ldr	r2, [pc, #76]	; (8000920 <MX_DMA_Init+0x70>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6493      	str	r3, [r2, #72]	; 0x48
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_DMA_Init+0x70>)
 80008dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2101      	movs	r1, #1
 80008ea:	200b      	movs	r0, #11
 80008ec:	f002 ff83 	bl	80037f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f0:	200b      	movs	r0, #11
 80008f2:	f002 ff9a 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	200c      	movs	r0, #12
 80008fc:	f002 ff7b 	bl	80037f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000900:	200c      	movs	r0, #12
 8000902:	f002 ff92 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	200d      	movs	r0, #13
 800090c:	f002 ff73 	bl	80037f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000910:	200d      	movs	r0, #13
 8000912:	f002 ff8a 	bl	800382a <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <update_dc_bias_sweep+0x88>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d006      	beq.n	800093e <update_dc_bias_sweep+0x1a>
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <update_dc_bias_sweep+0x8c>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <update_dc_bias_sweep+0x8c>)
 800093a:	801a      	strh	r2, [r3, #0]
 800093c:	e005      	b.n	800094a <update_dc_bias_sweep+0x26>
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <update_dc_bias_sweep+0x8c>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	3b01      	subs	r3, #1
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <update_dc_bias_sweep+0x8c>)
 8000948:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <update_dc_bias_sweep+0x8c>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10a      	bne.n	8000968 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <update_dc_bias_sweep+0x90>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <update_dc_bias_sweep+0x3e>
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <update_dc_bias_sweep+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	e002      	b.n	8000968 <update_dc_bias_sweep+0x44>
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <update_dc_bias_sweep+0x90>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <update_dc_bias_sweep+0x8c>)
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <update_dc_bias_sweep+0x52>
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <update_dc_bias_sweep+0x88>)
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <update_dc_bias_sweep+0x8c>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800097e:	d302      	bcc.n	8000986 <update_dc_bias_sweep+0x62>
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <update_dc_bias_sweep+0x88>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <update_dc_bias_sweep+0x90>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	2108      	movs	r1, #8
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f003 ff22 	bl	80047dc <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <update_dc_bias_sweep+0x8c>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <update_dc_bias_sweep+0x94>)
 80009a2:	f003 f893 	bl	8003acc <HAL_DAC_SetValue>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	20000460 	.word	0x20000460
 80009b4:	20000464 	.word	0x20000464
 80009b8:	20000588 	.word	0x20000588

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <__NVIC_EnableIRQ+0x38>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <LL_SYSCFG_SetEXTISource+0x5c>)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	0c1b      	lsrs	r3, r3, #16
 8000aec:	43db      	mvns	r3, r3
 8000aee:	ea02 0103 	and.w	r1, r2, r3
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	0c1b      	lsrs	r3, r3, #16
 8000af6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	fa93 f3a3 	rbit	r3, r3
 8000afe:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	fab3 f383 	clz	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f003 031f 	and.w	r3, r3, #31
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <LL_SYSCFG_SetEXTISource+0x5c>)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40010000 	.word	0x40010000

08000b30 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa93 f3a3 	rbit	r3, r3
 8000b4a:	613b      	str	r3, [r7, #16]
  return result;
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	fab3 f383 	clz	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2103      	movs	r1, #3
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	401a      	ands	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	fa93 f3a3 	rbit	r3, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
  return result;
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fab3 f383 	clz	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b089      	sub	sp, #36	; 0x24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	fa93 f3a3 	rbit	r3, r3
 8000ba8:	613b      	str	r3, [r7, #16]
  return result;
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	fab3 f383 	clz	r3, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa93 f3a3 	rbit	r3, r3
 8000bc8:	61bb      	str	r3, [r7, #24]
  return result;
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	fab3 f383 	clz	r3, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	60da      	str	r2, [r3, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3724      	adds	r7, #36	; 0x24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c14:	4907      	ldr	r1, [pc, #28]	; (8000c34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4013      	ands	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000

08000c38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c5a:	2004      	movs	r0, #4
 8000c5c:	f7ff ffd4 	bl	8000c08 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000c60:	2020      	movs	r0, #32
 8000c62:	f7ff ffd1 	bl	8000c08 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff ffce 	bl	8000c08 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff ffcb 	bl	8000c08 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8000c72:	2108      	movs	r1, #8
 8000c74:	48d3      	ldr	r0, [pc, #844]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000c76:	f7ff ffb9 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f7ff ffb4 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8000c84:	2110      	movs	r1, #16
 8000c86:	48cf      	ldr	r0, [pc, #828]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000c88:	f7ff ffb0 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	48cd      	ldr	r0, [pc, #820]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000c90:	f7ff ffac 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8000c94:	2101      	movs	r1, #1
 8000c96:	48cc      	ldr	r0, [pc, #816]	; (8000fc8 <MX_GPIO_Init+0x390>)
 8000c98:	f7ff ffa8 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8000c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca0:	48c8      	ldr	r0, [pc, #800]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000ca2:	f7ff ffa3 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8000ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000caa:	48c6      	ldr	r0, [pc, #792]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000cac:	f7ff ff9e 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	48c5      	ldr	r0, [pc, #788]	; (8000fc8 <MX_GPIO_Init+0x390>)
 8000cb4:	f7ff ff9a 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	48c3      	ldr	r0, [pc, #780]	; (8000fc8 <MX_GPIO_Init+0x390>)
 8000cbc:	f7ff ff96 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	48c0      	ldr	r0, [pc, #768]	; (8000fc8 <MX_GPIO_Init+0x390>)
 8000cc6:	f7ff ff91 	bl	8000bec <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8000cca:	49c0      	ldr	r1, [pc, #768]	; (8000fcc <MX_GPIO_Init+0x394>)
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff feff 	bl	8000ad0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8000cd2:	49bf      	ldr	r1, [pc, #764]	; (8000fd0 <MX_GPIO_Init+0x398>)
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff fefb 	bl	8000ad0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8000cda:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000cde:	2005      	movs	r0, #5
 8000ce0:	f7ff fef6 	bl	8000ad0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8000ce4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000ce8:	2005      	movs	r0, #5
 8000cea:	f7ff fef1 	bl	8000ad0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8000cee:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f7ff feec 	bl	8000ad0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000cf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cfc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4618      	mov	r0, r3
 8000d16:	f006 f989 	bl	800702c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d1e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4618      	mov	r0, r3
 8000d38:	f006 f978 	bl	800702c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4618      	mov	r0, r3
 8000d58:	f006 f968 	bl	800702c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d60:	2301      	movs	r3, #1
 8000d62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4618      	mov	r0, r3
 8000d78:	f006 f958 	bl	800702c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4618      	mov	r0, r3
 8000d98:	f006 f948 	bl	800702c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da2:	4888      	ldr	r0, [pc, #544]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000da4:	f7ff fef3 	bl	8000b8e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dae:	4885      	ldr	r0, [pc, #532]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000db0:	f7ff feed 	bl	8000b8e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2101      	movs	r1, #1
 8000db8:	4886      	ldr	r0, [pc, #536]	; (8000fd4 <MX_GPIO_Init+0x39c>)
 8000dba:	f7ff fee8 	bl	8000b8e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4884      	ldr	r0, [pc, #528]	; (8000fd4 <MX_GPIO_Init+0x39c>)
 8000dc4:	f7ff fee3 	bl	8000b8e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2104      	movs	r1, #4
 8000dcc:	487d      	ldr	r0, [pc, #500]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000dce:	f7ff fede 	bl	8000b8e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd8:	487a      	ldr	r0, [pc, #488]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000dda:	f7ff fea9 	bl	8000b30 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de4:	4877      	ldr	r0, [pc, #476]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000de6:	f7ff fea3 	bl	8000b30 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2101      	movs	r1, #1
 8000dee:	4879      	ldr	r0, [pc, #484]	; (8000fd4 <MX_GPIO_Init+0x39c>)
 8000df0:	f7ff fe9e 	bl	8000b30 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2102      	movs	r1, #2
 8000df8:	4876      	ldr	r0, [pc, #472]	; (8000fd4 <MX_GPIO_Init+0x39c>)
 8000dfa:	f7ff fe99 	bl	8000b30 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2104      	movs	r1, #4
 8000e02:	4870      	ldr	r0, [pc, #448]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000e04:	f7ff fe94 	bl	8000b30 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4868      	ldr	r0, [pc, #416]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000e22:	f006 faf6 	bl	8007412 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000e26:	2308      	movs	r3, #8
 8000e28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f006 fae6 	bl	8007412 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8000e46:	2310      	movs	r3, #16
 8000e48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4859      	ldr	r0, [pc, #356]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000e60:	f006 fad7 	bl	8007412 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8000e64:	2320      	movs	r3, #32
 8000e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4851      	ldr	r0, [pc, #324]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000e7e:	f006 fac8 	bl	8007412 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8000e82:	2301      	movs	r3, #1
 8000e84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e86:	2301      	movs	r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	484b      	ldr	r0, [pc, #300]	; (8000fc8 <MX_GPIO_Init+0x390>)
 8000e9c:	f006 fab9 	bl	8007412 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8000ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4842      	ldr	r0, [pc, #264]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000ebc:	f006 faa9 	bl	8007412 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8000ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	483a      	ldr	r0, [pc, #232]	; (8000fc4 <MX_GPIO_Init+0x38c>)
 8000edc:	f006 fa99 	bl	8007412 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8000ee0:	2340      	movs	r3, #64	; 0x40
 8000ee2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4833      	ldr	r0, [pc, #204]	; (8000fc8 <MX_GPIO_Init+0x390>)
 8000efa:	f006 fa8a 	bl	8007412 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f02:	2301      	movs	r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	482c      	ldr	r0, [pc, #176]	; (8000fc8 <MX_GPIO_Init+0x390>)
 8000f18:	f006 fa7b 	bl	8007412 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <MX_GPIO_Init+0x390>)
 8000f38:	f006 fa6b 	bl	8007412 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f3c:	f7ff fd3e 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fd8e 	bl	8000a68 <NVIC_EncodePriority>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2006      	movs	r0, #6
 8000f52:	f7ff fd5f 	bl	8000a14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000f56:	2006      	movs	r0, #6
 8000f58:	f7ff fd3e 	bl	80009d8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f5c:	f7ff fd2e 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fd7e 	bl	8000a68 <NVIC_EncodePriority>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2007      	movs	r0, #7
 8000f72:	f7ff fd4f 	bl	8000a14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8000f76:	2007      	movs	r0, #7
 8000f78:	f7ff fd2e 	bl	80009d8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f7c:	f7ff fd1e 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fd6e 	bl	8000a68 <NVIC_EncodePriority>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2008      	movs	r0, #8
 8000f92:	f7ff fd3f 	bl	8000a14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8000f96:	2008      	movs	r0, #8
 8000f98:	f7ff fd1e 	bl	80009d8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f9c:	f7ff fd0e 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fd5e 	bl	8000a68 <NVIC_EncodePriority>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2028      	movs	r0, #40	; 0x28
 8000fb2:	f7ff fd2f 	bl	8000a14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fb6:	2028      	movs	r0, #40	; 0x28
 8000fb8:	f7ff fd0e 	bl	80009d8 <__NVIC_EnableIRQ>

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	e009      	b.n	8000fd8 <MX_GPIO_Init+0x3a0>
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	0f000003 	.word	0x0f000003
 8000fd0:	f0000003 	.word	0xf0000003
 8000fd4:	48001400 	.word	0x48001400
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop

08000fdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fe4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fe8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ff4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ffc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001004:	e000      	b.n	8001008 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001006:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f9      	beq.n	8001006 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001012:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e009      	b.n	8001054 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ffc7 	bl	8000fdc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf1      	blt.n	8001040 <_write+0x16>
  return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106e:	f000 ff14 	bl	8001e9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001072:	f000 f895 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001076:	f7ff fddf 	bl	8000c38 <MX_GPIO_Init>
  MX_DMA_Init();
 800107a:	f7ff fc19 	bl	80008b0 <MX_DMA_Init>
  MX_DAC1_Init();
 800107e:	f7ff fac9 	bl	8000614 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001082:	f7ff fb11 	bl	80006a8 <MX_DAC2_Init>
  MX_ADC1_Init();
 8001086:	f7ff f987 	bl	8000398 <MX_ADC1_Init>
  MX_COMP1_Init();
 800108a:	f7ff fa69 	bl	8000560 <MX_COMP1_Init>
  MX_TIM2_Init();
 800108e:	f000 fc5f 	bl	8001950 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001092:	f000 fda7 	bl	8001be4 <MX_TIM17_Init>
  MX_SPI3_Init();
 8001096:	f000 f92f 	bl	80012f8 <MX_SPI3_Init>
  MX_RNG_Init();
 800109a:	f000 f91f 	bl	80012dc <MX_RNG_Init>
  MX_TIM1_Init();
 800109e:	f000 fbe7 	bl	8001870 <MX_TIM1_Init>
  MX_TIM8_Init();
 80010a2:	f000 fcbf 	bl	8001a24 <MX_TIM8_Init>
  MX_TIM16_Init();
 80010a6:	f000 fd77 	bl	8001b98 <MX_TIM16_Init>
  MX_TIM15_Init();
 80010aa:	f000 fd23 	bl	8001af4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010ae:	2300      	movs	r3, #0
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2378      	movs	r3, #120	; 0x78
 80010b4:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <main+0x10c>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	482f      	ldr	r0, [pc, #188]	; (8001178 <main+0x110>)
 80010ba:	f002 fc45 	bl	8003948 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80010be:	2110      	movs	r1, #16
 80010c0:	482d      	ldr	r0, [pc, #180]	; (8001178 <main+0x110>)
 80010c2:	f002 fbee 	bl	80038a2 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2378      	movs	r3, #120	; 0x78
 80010cc:	4a2b      	ldr	r2, [pc, #172]	; (800117c <main+0x114>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	482b      	ldr	r0, [pc, #172]	; (8001180 <main+0x118>)
 80010d2:	f002 fc39 	bl	8003948 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 80010d6:	482b      	ldr	r0, [pc, #172]	; (8001184 <main+0x11c>)
 80010d8:	f004 fefc 	bl	8005ed4 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2108      	movs	r1, #8
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f003 fb7a 	bl	80047dc <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2101      	movs	r1, #1
 80010ec:	4826      	ldr	r0, [pc, #152]	; (8001188 <main+0x120>)
 80010ee:	f003 fb75 	bl	80047dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2120      	movs	r1, #32
 80010f6:	4825      	ldr	r0, [pc, #148]	; (800118c <main+0x124>)
 80010f8:	f003 fb70 	bl	80047dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2110      	movs	r1, #16
 8001100:	4822      	ldr	r0, [pc, #136]	; (800118c <main+0x124>)
 8001102:	f003 fb6b 	bl	80047dc <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8001106:	4822      	ldr	r0, [pc, #136]	; (8001190 <main+0x128>)
 8001108:	f004 ff12 	bl	8005f30 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	481e      	ldr	r0, [pc, #120]	; (800118c <main+0x124>)
 8001114:	f003 fb62 	bl	80047dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111e:	481b      	ldr	r0, [pc, #108]	; (800118c <main+0x124>)
 8001120:	f003 fb5c 	bl	80047dc <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2108      	movs	r1, #8
 8001128:	4818      	ldr	r0, [pc, #96]	; (800118c <main+0x124>)
 800112a:	f003 fb57 	bl	80047dc <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 800112e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001138:	f023 0307 	bic.w	r3, r3, #7
 800113c:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 800113e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001148:	f043 0305 	orr.w	r3, r3, #5
 800114c:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <main+0x12c>)
 8001150:	f004 feee 	bl	8005f30 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <main+0x130>)
 8001156:	f004 febd 	bl	8005ed4 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim16);
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  ILI9341_Init();
 800115a:	f006 fc93 	bl	8007a84 <ILI9341_Init>
/*	ILI9341_Fill_Screen(WHITE);

	ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
	HAL_Delay(2000);
*/
	ILI9341_Fill_Screen(WHITE);
 800115e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001162:	f006 fe3b 	bl	8007ddc <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001166:	2003      	movs	r0, #3
 8001168:	f006 fc2e 	bl	80079c8 <ILI9341_Set_Rotation>
	HAL_TIM_Base_Start_IT(&htim15);
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <main+0x134>)
 800116e:	f004 fedf 	bl	8005f30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001172:	e7fe      	b.n	8001172 <main+0x10a>
 8001174:	20000010 	.word	0x20000010
 8001178:	20000588 	.word	0x20000588
 800117c:	200001f0 	.word	0x200001f0
 8001180:	20000574 	.word	0x20000574
 8001184:	200006c0 	.word	0x200006c0
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800
 8001190:	20000758 	.word	0x20000758
 8001194:	200007f0 	.word	0x200007f0
 8001198:	200007a4 	.word	0x200007a4
 800119c:	2000070c 	.word	0x2000070c

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0a8      	sub	sp, #160	; 0xa0
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011aa:	2238      	movs	r2, #56	; 0x38
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f007 f848 	bl	8008244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2254      	movs	r2, #84	; 0x54
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 f83a 	bl	8008244 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f003 fb1b 	bl	800480c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80011d6:	2322      	movs	r3, #34	; 0x22
 80011d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011e4:	2301      	movs	r3, #1
 80011e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80011fc:	232a      	movs	r3, #42	; 0x2a
 80011fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001208:	2304      	movs	r3, #4
 800120a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fb9b 	bl	8004954 <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001224:	f000 f82a 	bl	800127c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	2303      	movs	r3, #3
 800122e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800123c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001240:	2108      	movs	r1, #8
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fe9e 	bl	8004f84 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800124e:	f000 f815 	bl	800127c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8001252:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001256:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001258:	2300      	movs	r3, #0
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800125c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001260:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4618      	mov	r0, r3
 8001266:	f004 f87d 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001270:	f000 f804 	bl	800127c <Error_Handler>
  }
}
 8001274:	bf00      	nop
 8001276:	37a0      	adds	r7, #160	; 0xa0
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f043 0204 	orr.w	r2, r3, #4
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <LL_AHB2_GRP1_EnableClock>:
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4313      	orrs	r3, r2
 80012be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4013      	ands	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000

080012dc <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80012e0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80012e4:	f7ff ffe2 	bl	80012ac <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <MX_RNG_Init+0x18>)
 80012ea:	f7ff ffce 	bl	800128a <LL_RNG_Enable>

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	50060800 	.word	0x50060800

080012f8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_SPI3_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <MX_SPI3_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_SPI3_Init+0x74>)
 8001304:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001308:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_SPI3_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_SPI3_Init+0x74>)
 8001312:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001316:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_SPI3_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_SPI3_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_SPI3_Init+0x74>)
 8001326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_SPI3_Init+0x74>)
 800132e:	2210      	movs	r2, #16
 8001330:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_SPI3_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_SPI3_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_SPI3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_SPI3_Init+0x74>)
 8001346:	2207      	movs	r2, #7
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_SPI3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_SPI3_Init+0x74>)
 8001352:	2208      	movs	r2, #8
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_SPI3_Init+0x74>)
 8001358:	f004 fa50 	bl	80057fc <HAL_SPI_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001362:	f7ff ff8b 	bl	800127c <Error_Handler>
  }

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000065c 	.word	0x2000065c
 8001370:	40003c00 	.word	0x40003c00

08001374 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_SPI_MspInit+0x7c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d128      	bne.n	80013e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_SPI_MspInit+0x80>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <HAL_SPI_MspInit+0x80>)
 800139c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a0:	6593      	str	r3, [r2, #88]	; 0x58
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_SPI_MspInit+0x80>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_SPI_MspInit+0x80>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_SPI_MspInit+0x80>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_SPI_MspInit+0x80>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d8:	2306      	movs	r3, #6
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_SPI_MspInit+0x84>)
 80013e4:	f003 f860 	bl	80044a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40003c00 	.word	0x40003c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000800 	.word	0x48000800

080013fc <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	6093      	str	r3, [r2, #8]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40007000 	.word	0x40007000

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_MspInit+0x44>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_MspInit+0x44>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6613      	str	r3, [r2, #96]	; 0x60
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_MspInit+0x44>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_MspInit+0x44>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_MspInit+0x44>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	6593      	str	r3, [r2, #88]	; 0x58
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_MspInit+0x44>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001452:	f7ff ffd3 	bl	80013fc <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4013      	ands	r3, r2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	d101      	bne.n	800147e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40010400 	.word	0x40010400

08001490 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <LL_EXTI_ClearFlag_0_31+0x1c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6153      	str	r3, [r2, #20]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40010400 	.word	0x40010400

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 fd1c 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <EXTI0_IRQHandler+0x2c>)
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <EXTI0_IRQHandler+0x30>)
 8001514:	6810      	ldr	r0, [r2, #0]
 8001516:	6018      	str	r0, [r3, #0]
 8001518:	7912      	ldrb	r2, [r2, #4]
 800151a:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 800151c:	4808      	ldr	r0, [pc, #32]	; (8001540 <EXTI0_IRQHandler+0x34>)
 800151e:	f006 ff0d 	bl	800833c <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001522:	2001      	movs	r0, #1
 8001524:	f7ff ff9e 	bl	8001464 <LL_EXTI_IsActiveFlag_0_31>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <EXTI0_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff ffae 	bl	8001490 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000478 	.word	0x20000478
 800153c:	08009108 	.word	0x08009108
 8001540:	08009110 	.word	0x08009110

08001544 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <EXTI1_IRQHandler+0x2c>)
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <EXTI1_IRQHandler+0x30>)
 800154c:	6810      	ldr	r0, [r2, #0]
 800154e:	6018      	str	r0, [r3, #0]
 8001550:	7912      	ldrb	r2, [r2, #4]
 8001552:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 8001554:	4808      	ldr	r0, [pc, #32]	; (8001578 <EXTI1_IRQHandler+0x34>)
 8001556:	f006 fef1 	bl	800833c <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800155a:	2002      	movs	r0, #2
 800155c:	f7ff ff82 	bl	8001464 <LL_EXTI_IsActiveFlag_0_31>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <EXTI1_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff ff92 	bl	8001490 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000478 	.word	0x20000478
 8001574:	08009120 	.word	0x08009120
 8001578:	08009128 	.word	0x08009128

0800157c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <EXTI2_IRQHandler+0x2c>)
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <EXTI2_IRQHandler+0x30>)
 8001584:	cb03      	ldmia	r3!, {r0, r1}
 8001586:	6010      	str	r0, [r2, #0]
 8001588:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 800158a:	4809      	ldr	r0, [pc, #36]	; (80015b0 <EXTI2_IRQHandler+0x34>)
 800158c:	f006 fed6 	bl	800833c <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001590:	2004      	movs	r0, #4
 8001592:	f7ff ff67 	bl	8001464 <LL_EXTI_IsActiveFlag_0_31>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <EXTI2_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800159c:	2004      	movs	r0, #4
 800159e:	f7ff ff77 	bl	8001490 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000478 	.word	0x20000478
 80015ac:	08009138 	.word	0x08009138
 80015b0:	08009140 	.word	0x08009140

080015b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <DMA1_Channel1_IRQHandler+0x10>)
 80015ba:	f002 fe26 	bl	800420a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200004f0 	.word	0x200004f0

080015c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <DMA1_Channel2_IRQHandler+0x10>)
 80015ce:	f002 fe1c 	bl	800420a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000059c 	.word	0x2000059c

080015dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <DMA1_Channel3_IRQHandler+0x10>)
 80015e2:	f002 fe12 	bl	800420a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200005fc 	.word	0x200005fc

080015f0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	dm_update_display();
 80015f4:	f7fe fe64 	bl	80002c0 <dm_update_display>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80015fa:	f004 fd75 	bl	80060e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8001600:	f004 fd72 	bl	80060e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200007a4 	.word	0x200007a4
 800160c:	2000070c 	.word	0x2000070c

08001610 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800161e:	f004 fd63 	bl	80060e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001624:	f004 fd60 	bl	80060e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000478 	.word	0x20000478
 8001630:	08009150 	.word	0x08009150
 8001634:	200007a4 	.word	0x200007a4
 8001638:	2000083c 	.word	0x2000083c

0800163c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8001640:	f7ff f970 	bl	8000924 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800164a:	8812      	ldrh	r2, [r2, #0]
 800164c:	4293      	cmp	r3, r2
 800164e:	d305      	bcc.n	800165c <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 8001656:	8812      	ldrh	r2, [r2, #0]
 8001658:	4293      	cmp	r3, r2
 800165a:	d90a      	bls.n	8001672 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8001664:	f006 fdf6 	bl	8008254 <iprintf>
		new_enc_value = TIM1->CNT;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8001670:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800167a:	801a      	strh	r2, [r3, #0]


  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 800167e:	f004 fd33 	bl	80060e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 8001684:	f004 fd30 	bl	80060e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40012c00 	.word	0x40012c00
 8001690:	20000468 	.word	0x20000468
 8001694:	08009154 	.word	0x08009154
 8001698:	2000046a 	.word	0x2000046a
 800169c:	200007a4 	.word	0x200007a4
 80016a0:	20000758 	.word	0x20000758

080016a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIM2_IRQHandler+0x10>)
 80016aa:	f004 fd1d 	bl	80060e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200007f0 	.word	0x200007f0

080016b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 80016bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c0:	481b      	ldr	r0, [pc, #108]	; (8001730 <EXTI15_10_IRQHandler+0x78>)
 80016c2:	f003 f873 	bl	80047ac <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <EXTI15_10_IRQHandler+0x7c>)
 80016ce:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <EXTI15_10_IRQHandler+0x80>)
 80016d0:	6810      	ldr	r0, [r2, #0]
 80016d2:	6018      	str	r0, [r3, #0]
 80016d4:	7912      	ldrb	r2, [r2, #4]
 80016d6:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 80016d8:	4818      	ldr	r0, [pc, #96]	; (800173c <EXTI15_10_IRQHandler+0x84>)
 80016da:	f006 fe2f 	bl	800833c <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 80016de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e2:	4813      	ldr	r0, [pc, #76]	; (8001730 <EXTI15_10_IRQHandler+0x78>)
 80016e4:	f003 f862 	bl	80047ac <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <EXTI15_10_IRQHandler+0x7c>)
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <EXTI15_10_IRQHandler+0x88>)
 80016f2:	6810      	ldr	r0, [r2, #0]
 80016f4:	6018      	str	r0, [r3, #0]
 80016f6:	7912      	ldrb	r2, [r2, #4]
 80016f8:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 80016fa:	4812      	ldr	r0, [pc, #72]	; (8001744 <EXTI15_10_IRQHandler+0x8c>)
 80016fc:	f006 fe1e 	bl	800833c <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001700:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001704:	f7ff feae 	bl	8001464 <LL_EXTI_IsActiveFlag_0_31>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <EXTI15_10_IRQHandler+0x5e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800170e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001712:	f7ff febd 	bl	8001490 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001716:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800171a:	f7ff fea3 	bl	8001464 <LL_EXTI_IsActiveFlag_0_31>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <EXTI15_10_IRQHandler+0x74>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001724:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001728:	f7ff feb2 	bl	8001490 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	48000800 	.word	0x48000800
 8001734:	20000478 	.word	0x20000478
 8001738:	0800915c 	.word	0x0800915c
 800173c:	08009164 	.word	0x08009164
 8001740:	08009174 	.word	0x08009174
 8001744:	0800917c 	.word	0x0800917c

08001748 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e00a      	b.n	8001770 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800175a:	f3af 8000 	nop.w
 800175e:	4601      	mov	r1, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	60ba      	str	r2, [r7, #8]
 8001766:	b2ca      	uxtb	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf0      	blt.n	800175a <_read+0x12>
	}

return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017aa:	605a      	str	r2, [r3, #4]
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_isatty>:

int _isatty(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <_sbrk+0x50>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x16>
		heap_end = &end;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <_sbrk+0x50>)
 80017fe:	4a10      	ldr	r2, [pc, #64]	; (8001840 <_sbrk+0x54>)
 8001800:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <_sbrk+0x50>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <_sbrk+0x50>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	466a      	mov	r2, sp
 8001812:	4293      	cmp	r3, r2
 8001814:	d907      	bls.n	8001826 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001816:	f006 fceb 	bl	80081f0 <__errno>
 800181a:	4602      	mov	r2, r0
 800181c:	230c      	movs	r3, #12
 800181e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001824:	e006      	b.n	8001834 <_sbrk+0x48>
	}

	heap_end += incr;
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <_sbrk+0x50>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a03      	ldr	r2, [pc, #12]	; (800183c <_sbrk+0x50>)
 8001830:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000046c 	.word	0x2000046c
 8001840:	20000890 	.word	0x20000890

08001844 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <SystemInit+0x28>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <SystemInit+0x28>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <SystemInit+0x28>)
 800185a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800185e:	609a      	str	r2, [r3, #8]
#endif
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b09a      	sub	sp, #104	; 0x68
 8001874:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001876:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f006 fce0 	bl	8008244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2234      	movs	r2, #52	; 0x34
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f006 fcd4 	bl	8008244 <memset>

  htim1.Instance = TIM1;
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <MX_TIM1_Init+0xd8>)
 800189e:	4a2b      	ldr	r2, [pc, #172]	; (800194c <MX_TIM1_Init+0xdc>)
 80018a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <MX_TIM1_Init+0xd8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <MX_TIM1_Init+0xd8>)
 80018aa:	2240      	movs	r2, #64	; 0x40
 80018ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <MX_TIM1_Init+0xd8>)
 80018b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <MX_TIM1_Init+0xd8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <MX_TIM1_Init+0xd8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c2:	4b21      	ldr	r3, [pc, #132]	; (8001948 <MX_TIM1_Init+0xd8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018c8:	2303      	movs	r3, #3
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018cc:	2300      	movs	r3, #0
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018d0:	2301      	movs	r3, #1
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018dc:	2300      	movs	r3, #0
 80018de:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018e0:	2301      	movs	r3, #1
 80018e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018f0:	4619      	mov	r1, r3
 80018f2:	4815      	ldr	r0, [pc, #84]	; (8001948 <MX_TIM1_Init+0xd8>)
 80018f4:	f004 fb52 	bl	8005f9c <HAL_TIM_Encoder_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80018fe:	f7ff fcbd 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800190e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <MX_TIM1_Init+0xd8>)
 8001916:	f005 f8cb 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001920:	f7ff fcac 	bl	800127c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_TIM1_Init+0xd8>)
 8001932:	f005 f953 	bl	8006bdc <HAL_TIMEx_ConfigBreakDeadTime>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800193c:	f7ff fc9e 	bl	800127c <Error_Handler>
  }

}
 8001940:	bf00      	nop
 8001942:	3768      	adds	r7, #104	; 0x68
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200007a4 	.word	0x200007a4
 800194c:	40012c00 	.word	0x40012c00

08001950 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <MX_TIM2_Init+0xd0>)
 8001980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001984:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MX_TIM2_Init+0xd0>)
 8001988:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800198c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <MX_TIM2_Init+0xd0>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_TIM2_Init+0xd0>)
 8001996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800199a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <MX_TIM2_Init+0xd0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_TIM2_Init+0xd0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a8:	481d      	ldr	r0, [pc, #116]	; (8001a20 <MX_TIM2_Init+0xd0>)
 80019aa:	f004 fa3c 	bl	8005e26 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019b4:	f7ff fc62 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0320 	add.w	r3, r7, #32
 80019c2:	4619      	mov	r1, r3
 80019c4:	4816      	ldr	r0, [pc, #88]	; (8001a20 <MX_TIM2_Init+0xd0>)
 80019c6:	f004 fd0f 	bl	80063e8 <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019d0:	f7ff fc54 	bl	800127c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80019d4:	2305      	movs	r3, #5
 80019d6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80019d8:	2350      	movs	r3, #80	; 0x50
 80019da:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	4619      	mov	r1, r3
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_TIM2_Init+0xd0>)
 80019ec:	f004 fdec 	bl	80065c8 <HAL_TIM_SlaveConfigSynchro>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80019f6:	f7ff fc41 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a02:	463b      	mov	r3, r7
 8001a04:	4619      	mov	r1, r3
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <MX_TIM2_Init+0xd0>)
 8001a08:	f005 f852 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001a12:	f7ff fc33 	bl	800127c <Error_Handler>
  }

}
 8001a16:	bf00      	nop
 8001a18:	3730      	adds	r7, #48	; 0x30
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200007f0 	.word	0x200007f0

08001a24 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b094      	sub	sp, #80	; 0x50
 8001a28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a44:	463b      	mov	r3, r7
 8001a46:	2234      	movs	r2, #52	; 0x34
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f006 fbfa 	bl	8008244 <memset>

  htim8.Instance = TIM8;
 8001a50:	4b26      	ldr	r3, [pc, #152]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001a52:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <MX_TIM8_Init+0xcc>)
 8001a54:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a56:	4b25      	ldr	r3, [pc, #148]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a7a:	481c      	ldr	r0, [pc, #112]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001a7c:	f004 f9d3 	bl	8005e26 <HAL_TIM_Base_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001a86:	f7ff fbf9 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a94:	4619      	mov	r1, r3
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001a98:	f004 fca6 	bl	80063e8 <HAL_TIM_ConfigClockSource>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001aa2:	f7ff fbeb 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ab2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001aba:	f004 fff9 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001ac4:	f7ff fbda 	bl	800127c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_TIM8_Init+0xc8>)
 8001ad6:	f005 f881 	bl	8006bdc <HAL_TIMEx_ConfigBreakDeadTime>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001ae0:	f7ff fbcc 	bl	800127c <Error_Handler>
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3750      	adds	r7, #80	; 0x50
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200006c0 	.word	0x200006c0
 8001af0:	40013400 	.word	0x40013400

08001af4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <MX_TIM15_Init+0xa0>)
 8001b16:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b1e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b2c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001b40:	4813      	ldr	r0, [pc, #76]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b42:	f004 f970 	bl	8005e26 <HAL_TIM_Base_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001b4c:	f7ff fb96 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b5e:	f004 fc43 	bl	80063e8 <HAL_TIM_ConfigClockSource>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001b68:	f7ff fb88 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_TIM15_Init+0x9c>)
 8001b7a:	f004 ff99 	bl	8006ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001b84:	f7ff fb7a 	bl	800127c <Error_Handler>
  }

}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000070c 	.word	0x2000070c
 8001b94:	40014000 	.word	0x40014000

08001b98 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <MX_TIM16_Init+0x48>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bb0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bca:	f004 f92c 	bl	8005e26 <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001bd4:	f7ff fb52 	bl	800127c <Error_Handler>
  }

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000083c 	.word	0x2000083c
 8001be0:	40014400 	.word	0x40014400

08001be4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <MX_TIM17_Init+0x48>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001bf0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001bf4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001c16:	f004 f906 	bl	8005e26 <HAL_TIM_Base_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001c20:	f7ff fb2c 	bl	800127c <Error_Handler>
  }

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000758 	.word	0x20000758
 8001c2c:	40014800 	.word	0x40014800

08001c30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_TIM_Encoder_MspInit+0xac>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d13f      	bne.n	8001cd2 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c82:	2303      	movs	r3, #3
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c92:	2302      	movs	r3, #2
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4811      	ldr	r0, [pc, #68]	; (8001ce4 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001c9e:	f002 fc03 	bl	80044a8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	2018      	movs	r0, #24
 8001ca8:	f001 fda5 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001cac:	2018      	movs	r0, #24
 8001cae:	f001 fdbc 	bl	800382a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	2019      	movs	r0, #25
 8001cb8:	f001 fd9d 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cbc:	2019      	movs	r0, #25
 8001cbe:	f001 fdb4 	bl	800382a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	201a      	movs	r0, #26
 8001cc8:	f001 fd95 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001ccc:	201a      	movs	r0, #26
 8001cce:	f001 fdac 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40012c00 	.word	0x40012c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	48000800 	.word	0x48000800

08001ce8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	; 0x38
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d131      	bne.n	8001d6e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	4a49      	ldr	r2, [pc, #292]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6593      	str	r3, [r2, #88]	; 0x58
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	623b      	str	r3, [r7, #32]
 8001d20:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a43      	ldr	r2, [pc, #268]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d58:	f002 fba6 	bl	80044a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2101      	movs	r1, #1
 8001d60:	201c      	movs	r0, #28
 8001d62:	f001 fd48 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d66:	201c      	movs	r0, #28
 8001d68:	f001 fd5f 	bl	800382a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001d6c:	e05e      	b.n	8001e2c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM8)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a31      	ldr	r2, [pc, #196]	; (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d10c      	bne.n	8001d92 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d82:	6613      	str	r3, [r2, #96]	; 0x60
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
}
 8001d90:	e04c      	b.n	8001e2c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM15)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a29      	ldr	r2, [pc, #164]	; (8001e3c <HAL_TIM_Base_MspInit+0x154>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d114      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	4a24      	ldr	r2, [pc, #144]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da6:	6613      	str	r3, [r2, #96]	; 0x60
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2101      	movs	r1, #1
 8001db8:	2018      	movs	r0, #24
 8001dba:	f001 fd1c 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001dbe:	2018      	movs	r0, #24
 8001dc0:	f001 fd33 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 8001dc4:	e032      	b.n	8001e2c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM16)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_TIM_Base_MspInit+0x158>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d114      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd4:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dda:	6613      	str	r3, [r2, #96]	; 0x60
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2101      	movs	r1, #1
 8001dec:	2019      	movs	r0, #25
 8001dee:	f001 fd02 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001df2:	2019      	movs	r0, #25
 8001df4:	f001 fd19 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 8001df8:	e018      	b.n	8001e2c <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM17)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_TIM_Base_MspInit+0x15c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d113      	bne.n	8001e2c <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001e0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	201a      	movs	r0, #26
 8001e22:	f001 fce8 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e26:	201a      	movs	r0, #26
 8001e28:	f001 fcff 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 8001e2c:	bf00      	nop
 8001e2e:	3738      	adds	r7, #56	; 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40013400 	.word	0x40013400
 8001e3c:	40014000 	.word	0x40014000
 8001e40:	40014400 	.word	0x40014400
 8001e44:	40014800 	.word	0x40014800

08001e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e48:	480d      	ldr	r0, [pc, #52]	; (8001e80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <LoopForever+0xe>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e64:	4c0b      	ldr	r4, [pc, #44]	; (8001e94 <LoopForever+0x16>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e72:	f7ff fce7 	bl	8001844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f006 f9c1 	bl	80081fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e7a:	f7ff f8f5 	bl	8001068 <main>

08001e7e <LoopForever>:

LoopForever:
    b LoopForever
 8001e7e:	e7fe      	b.n	8001e7e <LoopForever>
  ldr   r0, =_estack
 8001e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8001e8c:	0800947c 	.word	0x0800947c
  ldr r2, =_sbss
 8001e90:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 8001e94:	20000890 	.word	0x20000890

08001e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC1_2_IRQHandler>

08001e9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f001 fc9b 	bl	80037e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f000 f80e 	bl	8001ecc <HAL_InitTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	71fb      	strb	r3, [r7, #7]
 8001eba:	e001      	b.n	8001ec0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ebc:	f7ff faae 	bl	800141c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_InitTick+0x68>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d022      	beq.n	8001f26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_InitTick+0x6c>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_InitTick+0x68>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 fca6 	bl	8003846 <HAL_SYSTICK_Config>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10f      	bne.n	8001f20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	d809      	bhi.n	8001f1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f06:	2200      	movs	r2, #0
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f0e:	f001 fc72 	bl	80037f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_InitTick+0x70>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	e007      	b.n	8001f2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e004      	b.n	8001f2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	e001      	b.n	8001f2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200003d8 	.word	0x200003d8
 8001f38:	200003d0 	.word	0x200003d0
 8001f3c:	200003d4 	.word	0x200003d4

08001f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_IncTick+0x1c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_IncTick+0x20>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <HAL_IncTick+0x1c>)
 8001f50:	6013      	str	r3, [r2, #0]
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	20000888 	.word	0x20000888
 8001f60:	200003d8 	.word	0x200003d8

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000888 	.word	0x20000888

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f94:	d004      	beq.n	8001fa0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_Delay+0x40>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa0:	bf00      	nop
 8001fa2:	f7ff ffdf 	bl	8001f64 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d8f7      	bhi.n	8001fa2 <HAL_Delay+0x26>
  {
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200003d8 	.word	0x200003d8

08001fc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002028:	b490      	push	{r4, r7}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3360      	adds	r3, #96	; 0x60
 800203a:	461a      	mov	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002044:	6822      	ldr	r2, [r4, #0]
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <LL_ADC_SetOffset+0x40>)
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	4313      	orrs	r3, r2
 8002056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800205a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bc90      	pop	{r4, r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	03fff000 	.word	0x03fff000

0800206c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800206c:	b490      	push	{r4, r7}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3360      	adds	r3, #96	; 0x60
 800207a:	461a      	mov	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bc90      	pop	{r4, r7}
 8002092:	4770      	bx	lr

08002094 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002094:	b490      	push	{r4, r7}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3360      	adds	r3, #96	; 0x60
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc90      	pop	{r4, r7}
 80020c2:	4770      	bx	lr

080020c4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020c4:	b490      	push	{r4, r7}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3360      	adds	r3, #96	; 0x60
 80020d4:	461a      	mov	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc90      	pop	{r4, r7}
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020f4:	b490      	push	{r4, r7}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3360      	adds	r3, #96	; 0x60
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4313      	orrs	r3, r2
 8002118:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bc90      	pop	{r4, r7}
 8002122:	4770      	bx	lr

08002124 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	615a      	str	r2, [r3, #20]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800214a:	b490      	push	{r4, r7}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3330      	adds	r3, #48	; 0x30
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	4413      	add	r3, r2
 8002168:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800216a:	6822      	ldr	r2, [r4, #0]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	211f      	movs	r1, #31
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	401a      	ands	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	0e9b      	lsrs	r3, r3, #26
 8002180:	f003 011f 	and.w	r1, r3, #31
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bc90      	pop	{r4, r7}
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800219c:	b490      	push	{r4, r7}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3314      	adds	r3, #20
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0e5b      	lsrs	r3, r3, #25
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021bc:	6822      	ldr	r2, [r4, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	0d1b      	lsrs	r3, r3, #20
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2107      	movs	r1, #7
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	0d1b      	lsrs	r3, r3, #20
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc90      	pop	{r4, r7}
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0318 	and.w	r3, r3, #24
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002210:	40d9      	lsrs	r1, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	400b      	ands	r3, r1
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	431a      	orrs	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	0007ffff 	.word	0x0007ffff

08002234 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6093      	str	r3, [r2, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800226c:	d101      	bne.n	8002272 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002290:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002294:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022bc:	d101      	bne.n	80022c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <LL_ADC_IsEnabled+0x18>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <LL_ADC_IsEnabled+0x1a>
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d101      	bne.n	800230e <LL_ADC_REG_IsConversionOngoing+0x18>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b08      	cmp	r3, #8
 800232e:	d101      	bne.n	8002334 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e1ad      	b.n	80026ba <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fe f88b 	bl	8000488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff67 	bl	8002258 <LL_ADC_IsDeepPowerDownEnabled>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff4d 	bl	8002234 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff82 	bl	80022a8 <LL_ADC_IsInternalRegulatorEnabled>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d113      	bne.n	80023d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff66 	bl	8002280 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80023b4:	4b9e      	ldr	r3, [pc, #632]	; (8002630 <HAL_ADC_Init+0x2ec>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	4a9e      	ldr	r2, [pc, #632]	; (8002634 <HAL_ADC_Init+0x2f0>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023c4:	e002      	b.n	80023cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f9      	bne.n	80023c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff66 	bl	80022a8 <LL_ADC_IsInternalRegulatorEnabled>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	f043 0210 	orr.w	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff77 	bl	80022f6 <LL_ADC_REG_IsConversionOngoing>
 8002408:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 8148 	bne.w	80026a8 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 8144 	bne.w	80026a8 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002428:	f043 0202 	orr.w	r2, r3, #2
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff4b 	bl	80022d0 <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d141      	bne.n	80024c4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002448:	d004      	beq.n	8002454 <HAL_ADC_Init+0x110>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7a      	ldr	r2, [pc, #488]	; (8002638 <HAL_ADC_Init+0x2f4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d10f      	bne.n	8002474 <HAL_ADC_Init+0x130>
 8002454:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002458:	f7ff ff3a 	bl	80022d0 <LL_ADC_IsEnabled>
 800245c:	4604      	mov	r4, r0
 800245e:	4876      	ldr	r0, [pc, #472]	; (8002638 <HAL_ADC_Init+0x2f4>)
 8002460:	f7ff ff36 	bl	80022d0 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	4323      	orrs	r3, r4
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e012      	b.n	800249a <HAL_ADC_Init+0x156>
 8002474:	4871      	ldr	r0, [pc, #452]	; (800263c <HAL_ADC_Init+0x2f8>)
 8002476:	f7ff ff2b 	bl	80022d0 <LL_ADC_IsEnabled>
 800247a:	4604      	mov	r4, r0
 800247c:	4870      	ldr	r0, [pc, #448]	; (8002640 <HAL_ADC_Init+0x2fc>)
 800247e:	f7ff ff27 	bl	80022d0 <LL_ADC_IsEnabled>
 8002482:	4603      	mov	r3, r0
 8002484:	431c      	orrs	r4, r3
 8002486:	486f      	ldr	r0, [pc, #444]	; (8002644 <HAL_ADC_Init+0x300>)
 8002488:	f7ff ff22 	bl	80022d0 <LL_ADC_IsEnabled>
 800248c:	4603      	mov	r3, r0
 800248e:	4323      	orrs	r3, r4
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d012      	beq.n	80024c4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a6:	d004      	beq.n	80024b2 <HAL_ADC_Init+0x16e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a62      	ldr	r2, [pc, #392]	; (8002638 <HAL_ADC_Init+0x2f4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_Init+0x172>
 80024b2:	4a65      	ldr	r2, [pc, #404]	; (8002648 <HAL_ADC_Init+0x304>)
 80024b4:	e000      	b.n	80024b8 <HAL_ADC_Init+0x174>
 80024b6:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_ADC_Init+0x308>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f7ff fd7e 	bl	8001fc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7f5b      	ldrb	r3, [r3, #29]
 80024c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80024da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d106      	bne.n	8002500 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	045b      	lsls	r3, r3, #17
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <HAL_ADC_Init+0x30c>)
 8002524:	4013      	ands	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	430b      	orrs	r3, r1
 800252e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fed3 	bl	80022f6 <LL_ADC_REG_IsConversionOngoing>
 8002550:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fee0 	bl	800231c <LL_ADC_INJ_IsConversionOngoing>
 800255c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d17f      	bne.n	8002664 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d17c      	bne.n	8002664 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800256e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002576:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002586:	f023 0302 	bic.w	r3, r3, #2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	69b9      	ldr	r1, [r7, #24]
 8002590:	430b      	orrs	r3, r1
 8002592:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d017      	beq.n	80025cc <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6911      	ldr	r1, [r2, #16]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80025ca:	e013      	b.n	80025f4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d12a      	bne.n	8002654 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002620:	430a      	orrs	r2, r1
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	611a      	str	r2, [r3, #16]
 800262e:	e019      	b.n	8002664 <HAL_ADC_Init+0x320>
 8002630:	200003d0 	.word	0x200003d0
 8002634:	053e2d63 	.word	0x053e2d63
 8002638:	50000100 	.word	0x50000100
 800263c:	50000400 	.word	0x50000400
 8002640:	50000500 	.word	0x50000500
 8002644:	50000600 	.word	0x50000600
 8002648:	50000300 	.word	0x50000300
 800264c:	50000700 	.word	0x50000700
 8002650:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10c      	bne.n	8002686 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f023 010f 	bic.w	r1, r3, #15
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	1e5a      	subs	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
 8002684:	e007      	b.n	8002696 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 020f 	bic.w	r2, r2, #15
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80026a6:	e007      	b.n	80026b8 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
 80026c2:	bf00      	nop

080026c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0a6      	sub	sp, #152	; 0x98
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x22>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e38e      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x740>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fdff 	bl	80022f6 <LL_ADC_REG_IsConversionOngoing>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 836f 	bne.w	8002dde <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	f7ff fd1c 	bl	800214a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fded 	bl	80022f6 <LL_ADC_REG_IsConversionOngoing>
 800271c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fdf9 	bl	800231c <LL_ADC_INJ_IsConversionOngoing>
 800272a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800272e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 817b 	bne.w	8002a2e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 8176 	bne.w	8002a2e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800274a:	d10f      	bne.n	800276c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2200      	movs	r2, #0
 8002756:	4619      	mov	r1, r3
 8002758:	f7ff fd20 	bl	800219c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fcdd 	bl	8002124 <LL_ADC_SetSamplingTimeCommonConfig>
 800276a:	e00e      	b.n	800278a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	461a      	mov	r2, r3
 800277a:	f7ff fd0f 	bl	800219c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fccd 	bl	8002124 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	08db      	lsrs	r3, r3, #3
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d022      	beq.n	80027f2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6919      	ldr	r1, [r3, #16]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027bc:	f7ff fc34 	bl	8002028 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6919      	ldr	r1, [r3, #16]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f7ff fc79 	bl	80020c4 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7f1b      	ldrb	r3, [r3, #28]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x124>
 80027e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e6:	e000      	b.n	80027ea <HAL_ADC_ConfigChannel+0x126>
 80027e8:	2300      	movs	r3, #0
 80027ea:	461a      	mov	r2, r3
 80027ec:	f7ff fc82 	bl	80020f4 <LL_ADC_SetOffsetSaturation>
 80027f0:	e11d      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fc37 	bl	800206c <LL_ADC_GetOffsetChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <HAL_ADC_ConfigChannel+0x15a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fc2c 	bl	800206c <LL_ADC_GetOffsetChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	0e9b      	lsrs	r3, r3, #26
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	e012      	b.n	8002844 <HAL_ADC_ConfigChannel+0x180>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fc21 	bl	800206c <LL_ADC_GetOffsetChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800283a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_ADC_ConfigChannel+0x198>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	e00a      	b.n	8002872 <HAL_ADC_ConfigChannel+0x1ae>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800286a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	429a      	cmp	r2, r3
 8002874:	d106      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fc08 	bl	8002094 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fbee 	bl	800206c <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1ec>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fbe3 	bl	800206c <LL_ADC_GetOffsetChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	f003 021f 	and.w	r2, r3, #31
 80028ae:	e010      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x20e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2101      	movs	r1, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fbd8 	bl	800206c <LL_ADC_GetOffsetChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x226>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	e00a      	b.n	8002900 <HAL_ADC_ConfigChannel+0x23c>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	429a      	cmp	r2, r3
 8002902:	d106      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	2101      	movs	r1, #1
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fbc1 	bl	8002094 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2102      	movs	r1, #2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fba7 	bl	800206c <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <HAL_ADC_ConfigChannel+0x27a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2102      	movs	r1, #2
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fb9c 	bl	800206c <LL_ADC_GetOffsetChannel>
 8002934:	4603      	mov	r3, r0
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	e010      	b.n	8002960 <HAL_ADC_ConfigChannel+0x29c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2102      	movs	r1, #2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fb91 	bl	800206c <LL_ADC_GetOffsetChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x2b4>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	e00a      	b.n	800298e <HAL_ADC_ConfigChannel+0x2ca>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	429a      	cmp	r2, r3
 8002990:	d106      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	2102      	movs	r1, #2
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fb7a 	bl	8002094 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2103      	movs	r1, #3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fb60 	bl	800206c <LL_ADC_GetOffsetChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x308>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2103      	movs	r1, #3
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fb55 	bl	800206c <LL_ADC_GetOffsetChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	f003 021f 	and.w	r2, r3, #31
 80029ca:	e010      	b.n	80029ee <HAL_ADC_ConfigChannel+0x32a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2103      	movs	r1, #3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fb4a 	bl	800206c <LL_ADC_GetOffsetChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x342>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	e00a      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x358>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d106      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2200      	movs	r2, #0
 8002a26:	2103      	movs	r1, #3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fb33 	bl	8002094 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fc4c 	bl	80022d0 <LL_ADC_IsEnabled>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 810c 	bne.w	8002c58 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f7ff fbcd 	bl	80021ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	4aaf      	ldr	r2, [pc, #700]	; (8002d14 <HAL_ADC_ConfigChannel+0x650>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	f040 80fd 	bne.w	8002c58 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10b      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x3c2>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	3301      	adds	r3, #1
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2b09      	cmp	r3, #9
 8002a7c:	bf94      	ite	ls
 8002a7e:	2301      	movls	r3, #1
 8002a80:	2300      	movhi	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	e012      	b.n	8002aac <HAL_ADC_ConfigChannel+0x3e8>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	bf94      	ite	ls
 8002aa6:	2301      	movls	r3, #1
 8002aa8:	2300      	movhi	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d064      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x408>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	069b      	lsls	r3, r3, #26
 8002ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aca:	e00e      	b.n	8002aea <HAL_ADC_ConfigChannel+0x426>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	069b      	lsls	r3, r3, #26
 8002ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x446>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	e010      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x468>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	ea42 0103 	orr.w	r1, r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x48e>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	051b      	lsls	r3, r3, #20
 8002b50:	e011      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x4b2>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 021f 	and.w	r2, r3, #31
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b76:	430b      	orrs	r3, r1
 8002b78:	e069      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x4d2>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0e9b      	lsrs	r3, r3, #26
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	069b      	lsls	r3, r3, #26
 8002b90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b94:	e00e      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x4f0>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x510>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	e010      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x532>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	617b      	str	r3, [r7, #20]
  return result;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	ea42 0103 	orr.w	r1, r2, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x55e>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f003 021f 	and.w	r2, r3, #31
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	3b1e      	subs	r3, #30
 8002c1a:	051b      	lsls	r3, r3, #20
 8002c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c20:	e014      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x588>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	60fb      	str	r3, [r7, #12]
  return result;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f003 021f 	and.w	r2, r3, #31
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	3b1e      	subs	r3, #30
 8002c46:	051b      	lsls	r3, r3, #20
 8002c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	6892      	ldr	r2, [r2, #8]
 8002c52:	4619      	mov	r1, r3
 8002c54:	f7ff faa2 	bl	800219c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <HAL_ADC_ConfigChannel+0x654>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80c9 	beq.w	8002df8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c6e:	d004      	beq.n	8002c7a <HAL_ADC_ConfigChannel+0x5b6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a29      	ldr	r2, [pc, #164]	; (8002d1c <HAL_ADC_ConfigChannel+0x658>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x5ba>
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_ADC_ConfigChannel+0x65c>)
 8002c7c:	e000      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x5bc>
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_ADC_ConfigChannel+0x660>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff f9c3 	bl	800200c <LL_ADC_GetCommonPathInternalCh>
 8002c86:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <HAL_ADC_ConfigChannel+0x664>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_ADC_ConfigChannel+0x5da>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <HAL_ADC_ConfigChannel+0x668>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d14e      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d148      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb2:	d005      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x5fc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <HAL_ADC_ConfigChannel+0x66c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	f040 8099 	bne.w	8002df2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADC_ConfigChannel+0x610>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <HAL_ADC_ConfigChannel+0x658>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x614>
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_ADC_ConfigChannel+0x65c>)
 8002cd6:	e000      	b.n	8002cda <HAL_ADC_ConfigChannel+0x616>
 8002cd8:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <HAL_ADC_ConfigChannel+0x660>)
 8002cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7ff f97e 	bl	8001fe6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_ADC_ConfigChannel+0x670>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <HAL_ADC_ConfigChannel+0x674>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	099a      	lsrs	r2, r3, #6
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d02:	e002      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f9      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d10:	e06f      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x72e>
 8002d12:	bf00      	nop
 8002d14:	407f0000 	.word	0x407f0000
 8002d18:	80080000 	.word	0x80080000
 8002d1c:	50000100 	.word	0x50000100
 8002d20:	50000300 	.word	0x50000300
 8002d24:	50000700 	.word	0x50000700
 8002d28:	c3210000 	.word	0xc3210000
 8002d2c:	90c00010 	.word	0x90c00010
 8002d30:	50000600 	.word	0x50000600
 8002d34:	200003d0 	.word	0x200003d0
 8002d38:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a32      	ldr	r2, [pc, #200]	; (8002e0c <HAL_ADC_ConfigChannel+0x748>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d125      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x6ce>
 8002d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11f      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <HAL_ADC_ConfigChannel+0x74c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d104      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x6a2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2c      	ldr	r2, [pc, #176]	; (8002e14 <HAL_ADC_ConfigChannel+0x750>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d047      	beq.n	8002df6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6e:	d004      	beq.n	8002d7a <HAL_ADC_ConfigChannel+0x6b6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <HAL_ADC_ConfigChannel+0x74c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x6ba>
 8002d7a:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <HAL_ADC_ConfigChannel+0x754>)
 8002d7c:	e000      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x6bc>
 8002d7e:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <HAL_ADC_ConfigChannel+0x758>)
 8002d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f7ff f92b 	bl	8001fe6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d90:	e031      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <HAL_ADC_ConfigChannel+0x75c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d12d      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d127      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_ADC_ConfigChannel+0x74c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d022      	beq.n	8002df8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_ConfigChannel+0x702>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <HAL_ADC_ConfigChannel+0x74c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x706>
 8002dc6:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <HAL_ADC_ConfigChannel+0x754>)
 8002dc8:	e000      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x708>
 8002dca:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <HAL_ADC_ConfigChannel+0x758>)
 8002dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f7ff f905 	bl	8001fe6 <LL_ADC_SetCommonPathInternalCh>
 8002ddc:	e00c      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	f043 0220 	orr.w	r2, r3, #32
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002df0:	e002      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e00:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3798      	adds	r7, #152	; 0x98
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	c7520000 	.word	0xc7520000
 8002e10:	50000100 	.word	0x50000100
 8002e14:	50000500 	.word	0x50000500
 8002e18:	50000300 	.word	0x50000300
 8002e1c:	50000700 	.word	0x50000700
 8002e20:	cb840000 	.word	0xcb840000

08002e24 <LL_ADC_IsEnabled>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <LL_ADC_IsEnabled+0x18>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <LL_ADC_IsEnabled+0x1a>
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d101      	bne.n	8002e62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b0a1      	sub	sp, #132	; 0x84
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e0e3      	b.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9e:	d102      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	e009      	b.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6e      	ldr	r2, [pc, #440]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d102      	bne.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002eb0:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	e001      	b.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0be      	b.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ffb5 	bl	8002e4a <LL_ADC_REG_IsConversionOngoing>
 8002ee0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ffaf 	bl	8002e4a <LL_ADC_REG_IsConversionOngoing>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 80a0 	bne.w	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 809c 	bne.w	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f04:	d004      	beq.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a55      	ldr	r2, [pc, #340]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002f10:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f12:	e000      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002f14:	4b56      	ldr	r3, [pc, #344]	; (8003070 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f16:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d04b      	beq.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f32:	035b      	lsls	r3, r3, #13
 8002f34:	430b      	orrs	r3, r1
 8002f36:	431a      	orrs	r2, r3
 8002f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f44:	d004      	beq.n	8002f50 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a45      	ldr	r2, [pc, #276]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10f      	bne.n	8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002f50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f54:	f7ff ff66 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f58:	4604      	mov	r4, r0
 8002f5a:	4841      	ldr	r0, [pc, #260]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f5c:	f7ff ff62 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4323      	orrs	r3, r4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e012      	b.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002f70:	483c      	ldr	r0, [pc, #240]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002f72:	f7ff ff57 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f76:	4604      	mov	r4, r0
 8002f78:	483b      	ldr	r0, [pc, #236]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f7a:	f7ff ff53 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	431c      	orrs	r4, r3
 8002f82:	483c      	ldr	r0, [pc, #240]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f84:	f7ff ff4e 	bl	8002e24 <LL_ADC_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4323      	orrs	r3, r4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d056      	beq.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fa2:	f023 030f 	bic.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	6811      	ldr	r1, [r2, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	6892      	ldr	r2, [r2, #8]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb6:	e047      	b.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a23      	ldr	r2, [pc, #140]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002fd8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fdc:	f7ff ff22 	bl	8002e24 <LL_ADC_IsEnabled>
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	481f      	ldr	r0, [pc, #124]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002fe4:	f7ff ff1e 	bl	8002e24 <LL_ADC_IsEnabled>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4323      	orrs	r3, r4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e012      	b.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002ff8:	481a      	ldr	r0, [pc, #104]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002ffa:	f7ff ff13 	bl	8002e24 <LL_ADC_IsEnabled>
 8002ffe:	4604      	mov	r4, r0
 8003000:	4819      	ldr	r0, [pc, #100]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003002:	f7ff ff0f 	bl	8002e24 <LL_ADC_IsEnabled>
 8003006:	4603      	mov	r3, r0
 8003008:	431c      	orrs	r4, r3
 800300a:	481a      	ldr	r0, [pc, #104]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800300c:	f7ff ff0a 	bl	8002e24 <LL_ADC_IsEnabled>
 8003010:	4603      	mov	r3, r0
 8003012:	4323      	orrs	r3, r4
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d012      	beq.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800302a:	f023 030f 	bic.w	r3, r3, #15
 800302e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003030:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003032:	e009      	b.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003046:	e000      	b.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003048:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003052:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003056:	4618      	mov	r0, r3
 8003058:	3784      	adds	r7, #132	; 0x84
 800305a:	46bd      	mov	sp, r7
 800305c:	bd90      	pop	{r4, r7, pc}
 800305e:	bf00      	nop
 8003060:	50000100 	.word	0x50000100
 8003064:	50000400 	.word	0x50000400
 8003068:	50000500 	.word	0x50000500
 800306c:	50000300 	.word	0x50000300
 8003070:	50000700 	.word	0x50000700
 8003074:	50000600 	.word	0x50000600

08003078 <LL_EXTI_EnableIT_0_31>:
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <LL_EXTI_EnableIT_0_31+0x20>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4904      	ldr	r1, [pc, #16]	; (8003098 <LL_EXTI_EnableIT_0_31+0x20>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40010400 	.word	0x40010400

0800309c <LL_EXTI_EnableIT_32_63>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <LL_EXTI_EnableIT_32_63+0x20>)
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <LL_EXTI_EnableIT_32_63+0x20>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	620b      	str	r3, [r1, #32]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40010400 	.word	0x40010400

080030c0 <LL_EXTI_DisableIT_0_31>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	4904      	ldr	r1, [pc, #16]	; (80030e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010400 	.word	0x40010400

080030e8 <LL_EXTI_DisableIT_32_63>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <LL_EXTI_DisableIT_32_63+0x24>)
 80030f2:	6a1a      	ldr	r2, [r3, #32]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	4904      	ldr	r1, [pc, #16]	; (800310c <LL_EXTI_DisableIT_32_63+0x24>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	620b      	str	r3, [r1, #32]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40010400 	.word	0x40010400

08003110 <LL_EXTI_EnableEvent_0_31>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <LL_EXTI_EnableEvent_0_31+0x20>)
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4904      	ldr	r1, [pc, #16]	; (8003130 <LL_EXTI_EnableEvent_0_31+0x20>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40010400 	.word	0x40010400

08003134 <LL_EXTI_EnableEvent_32_63>:
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <LL_EXTI_EnableEvent_32_63+0x20>)
 800313e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003140:	4904      	ldr	r1, [pc, #16]	; (8003154 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4313      	orrs	r3, r2
 8003146:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40010400 	.word	0x40010400

08003158 <LL_EXTI_DisableEvent_0_31>:
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	43db      	mvns	r3, r3
 8003168:	4904      	ldr	r1, [pc, #16]	; (800317c <LL_EXTI_DisableEvent_0_31+0x24>)
 800316a:	4013      	ands	r3, r2
 800316c:	604b      	str	r3, [r1, #4]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010400 	.word	0x40010400

08003180 <LL_EXTI_DisableEvent_32_63>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800318a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	43db      	mvns	r3, r3
 8003190:	4904      	ldr	r1, [pc, #16]	; (80031a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003192:	4013      	ands	r3, r2
 8003194:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010400 	.word	0x40010400

080031a8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	4904      	ldr	r1, [pc, #16]	; (80031c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40010400 	.word	0x40010400

080031cc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80031d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d8:	4904      	ldr	r1, [pc, #16]	; (80031ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4313      	orrs	r3, r2
 80031de:	628b      	str	r3, [r1, #40]	; 0x28
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40010400 	.word	0x40010400

080031f0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	43db      	mvns	r3, r3
 8003200:	4904      	ldr	r1, [pc, #16]	; (8003214 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003202:	4013      	ands	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40010400 	.word	0x40010400

08003218 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	43db      	mvns	r3, r3
 8003228:	4904      	ldr	r1, [pc, #16]	; (800323c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800322a:	4013      	ands	r3, r2
 800322c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40010400 	.word	0x40010400

08003240 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	4904      	ldr	r1, [pc, #16]	; (8003260 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4313      	orrs	r3, r2
 8003252:	60cb      	str	r3, [r1, #12]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40010400 	.word	0x40010400

08003264 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	4904      	ldr	r1, [pc, #16]	; (8003284 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4313      	orrs	r3, r2
 8003276:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40010400 	.word	0x40010400

08003288 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	43db      	mvns	r3, r3
 8003298:	4904      	ldr	r1, [pc, #16]	; (80032ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800329a:	4013      	ands	r3, r2
 800329c:	60cb      	str	r3, [r1, #12]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40010400 	.word	0x40010400

080032b0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	43db      	mvns	r3, r3
 80032c0:	4904      	ldr	r1, [pc, #16]	; (80032d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40010400 	.word	0x40010400

080032d8 <LL_EXTI_ClearFlag_0_31>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6153      	str	r3, [r2, #20]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010400 	.word	0x40010400

080032f8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40010400 	.word	0x40010400

08003318 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e180      	b.n	8003636 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800333e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003342:	d102      	bne.n	800334a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e175      	b.n	8003636 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7f5b      	ldrb	r3, [r3, #29]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d108      	bne.n	8003366 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fd f925 	bl	80005b0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003370:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b98      	ldr	r3, [pc, #608]	; (80035f8 <HAL_COMP_Init+0x2e0>)
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d015      	beq.n	80033de <HAL_COMP_Init+0xc6>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d112      	bne.n	80033de <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80033b8:	4b90      	ldr	r3, [pc, #576]	; (80035fc <HAL_COMP_Init+0x2e4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	4a90      	ldr	r2, [pc, #576]	; (8003600 <HAL_COMP_Init+0x2e8>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	099a      	lsrs	r2, r3, #6
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80033d0:	e002      	b.n	80033d8 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f9      	bne.n	80033d2 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a88      	ldr	r2, [pc, #544]	; (8003604 <HAL_COMP_Init+0x2ec>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d028      	beq.n	800343a <HAL_COMP_Init+0x122>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a86      	ldr	r2, [pc, #536]	; (8003608 <HAL_COMP_Init+0x2f0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d020      	beq.n	8003434 <HAL_COMP_Init+0x11c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a85      	ldr	r2, [pc, #532]	; (800360c <HAL_COMP_Init+0x2f4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d018      	beq.n	800342e <HAL_COMP_Init+0x116>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a83      	ldr	r2, [pc, #524]	; (8003610 <HAL_COMP_Init+0x2f8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d010      	beq.n	8003428 <HAL_COMP_Init+0x110>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a82      	ldr	r2, [pc, #520]	; (8003614 <HAL_COMP_Init+0x2fc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d008      	beq.n	8003422 <HAL_COMP_Init+0x10a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a80      	ldr	r2, [pc, #512]	; (8003618 <HAL_COMP_Init+0x300>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_COMP_Init+0x106>
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <HAL_COMP_Init+0x126>
 800341e:	2302      	movs	r3, #2
 8003420:	e00d      	b.n	800343e <HAL_COMP_Init+0x126>
 8003422:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003426:	e00a      	b.n	800343e <HAL_COMP_Init+0x126>
 8003428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800342c:	e007      	b.n	800343e <HAL_COMP_Init+0x126>
 800342e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003432:	e004      	b.n	800343e <HAL_COMP_Init+0x126>
 8003434:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003438:	e001      	b.n	800343e <HAL_COMP_Init+0x126>
 800343a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800343e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80b6 	beq.w	80035ba <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d011      	beq.n	800347e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6e      	ldr	r2, [pc, #440]	; (8003618 <HAL_COMP_Init+0x300>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_COMP_Init+0x156>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a6c      	ldr	r2, [pc, #432]	; (800361c <HAL_COMP_Init+0x304>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d103      	bne.n	8003476 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800346e:	6938      	ldr	r0, [r7, #16]
 8003470:	f7ff feac 	bl	80031cc <LL_EXTI_EnableRisingTrig_32_63>
 8003474:	e014      	b.n	80034a0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003476:	6938      	ldr	r0, [r7, #16]
 8003478:	f7ff fe96 	bl	80031a8 <LL_EXTI_EnableRisingTrig_0_31>
 800347c:	e010      	b.n	80034a0 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a65      	ldr	r2, [pc, #404]	; (8003618 <HAL_COMP_Init+0x300>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_COMP_Init+0x17a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a63      	ldr	r2, [pc, #396]	; (800361c <HAL_COMP_Init+0x304>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d103      	bne.n	800349a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003492:	6938      	ldr	r0, [r7, #16]
 8003494:	f7ff fec0 	bl	8003218 <LL_EXTI_DisableRisingTrig_32_63>
 8003498:	e002      	b.n	80034a0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800349a:	6938      	ldr	r0, [r7, #16]
 800349c:	f7ff fea8 	bl	80031f0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d011      	beq.n	80034d0 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a59      	ldr	r2, [pc, #356]	; (8003618 <HAL_COMP_Init+0x300>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_COMP_Init+0x1a8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_COMP_Init+0x304>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d103      	bne.n	80034c8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80034c0:	6938      	ldr	r0, [r7, #16]
 80034c2:	f7ff fecf 	bl	8003264 <LL_EXTI_EnableFallingTrig_32_63>
 80034c6:	e014      	b.n	80034f2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80034c8:	6938      	ldr	r0, [r7, #16]
 80034ca:	f7ff feb9 	bl	8003240 <LL_EXTI_EnableFallingTrig_0_31>
 80034ce:	e010      	b.n	80034f2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a50      	ldr	r2, [pc, #320]	; (8003618 <HAL_COMP_Init+0x300>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_COMP_Init+0x1cc>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4f      	ldr	r2, [pc, #316]	; (800361c <HAL_COMP_Init+0x304>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80034e4:	6938      	ldr	r0, [r7, #16]
 80034e6:	f7ff fee3 	bl	80032b0 <LL_EXTI_DisableFallingTrig_32_63>
 80034ea:	e002      	b.n	80034f2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80034ec:	6938      	ldr	r0, [r7, #16]
 80034ee:	f7ff fecb 	bl	8003288 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_COMP_Init+0x300>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_COMP_Init+0x1ee>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a46      	ldr	r2, [pc, #280]	; (800361c <HAL_COMP_Init+0x304>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d103      	bne.n	800350e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8003506:	6938      	ldr	r0, [r7, #16]
 8003508:	f7ff fef6 	bl	80032f8 <LL_EXTI_ClearFlag_32_63>
 800350c:	e002      	b.n	8003514 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800350e:	6938      	ldr	r0, [r7, #16]
 8003510:	f7ff fee2 	bl	80032d8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d011      	beq.n	8003544 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a3c      	ldr	r2, [pc, #240]	; (8003618 <HAL_COMP_Init+0x300>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_COMP_Init+0x21c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a3b      	ldr	r2, [pc, #236]	; (800361c <HAL_COMP_Init+0x304>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8003534:	6938      	ldr	r0, [r7, #16]
 8003536:	f7ff fdfd 	bl	8003134 <LL_EXTI_EnableEvent_32_63>
 800353a:	e014      	b.n	8003566 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800353c:	6938      	ldr	r0, [r7, #16]
 800353e:	f7ff fde7 	bl	8003110 <LL_EXTI_EnableEvent_0_31>
 8003542:	e010      	b.n	8003566 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a33      	ldr	r2, [pc, #204]	; (8003618 <HAL_COMP_Init+0x300>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_COMP_Init+0x240>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a32      	ldr	r2, [pc, #200]	; (800361c <HAL_COMP_Init+0x304>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d103      	bne.n	8003560 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003558:	6938      	ldr	r0, [r7, #16]
 800355a:	f7ff fe11 	bl	8003180 <LL_EXTI_DisableEvent_32_63>
 800355e:	e002      	b.n	8003566 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003560:	6938      	ldr	r0, [r7, #16]
 8003562:	f7ff fdf9 	bl	8003158 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d011      	beq.n	8003596 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a28      	ldr	r2, [pc, #160]	; (8003618 <HAL_COMP_Init+0x300>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_COMP_Init+0x26e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <HAL_COMP_Init+0x304>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d103      	bne.n	800358e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003586:	6938      	ldr	r0, [r7, #16]
 8003588:	f7ff fd88 	bl	800309c <LL_EXTI_EnableIT_32_63>
 800358c:	e04b      	b.n	8003626 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800358e:	6938      	ldr	r0, [r7, #16]
 8003590:	f7ff fd72 	bl	8003078 <LL_EXTI_EnableIT_0_31>
 8003594:	e047      	b.n	8003626 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <HAL_COMP_Init+0x300>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_COMP_Init+0x292>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_COMP_Init+0x304>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d103      	bne.n	80035b2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80035aa:	6938      	ldr	r0, [r7, #16]
 80035ac:	f7ff fd9c 	bl	80030e8 <LL_EXTI_DisableIT_32_63>
 80035b0:	e039      	b.n	8003626 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80035b2:	6938      	ldr	r0, [r7, #16]
 80035b4:	f7ff fd84 	bl	80030c0 <LL_EXTI_DisableIT_0_31>
 80035b8:	e035      	b.n	8003626 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_COMP_Init+0x300>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_COMP_Init+0x2b6>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_COMP_Init+0x304>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d103      	bne.n	80035d6 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80035ce:	6938      	ldr	r0, [r7, #16]
 80035d0:	f7ff fdd6 	bl	8003180 <LL_EXTI_DisableEvent_32_63>
 80035d4:	e002      	b.n	80035dc <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80035d6:	6938      	ldr	r0, [r7, #16]
 80035d8:	f7ff fdbe 	bl	8003158 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <HAL_COMP_Init+0x300>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_COMP_Init+0x2d8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <HAL_COMP_Init+0x304>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d117      	bne.n	8003620 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80035f0:	6938      	ldr	r0, [r7, #16]
 80035f2:	f7ff fd79 	bl	80030e8 <LL_EXTI_DisableIT_32_63>
 80035f6:	e016      	b.n	8003626 <HAL_COMP_Init+0x30e>
 80035f8:	ff007e0f 	.word	0xff007e0f
 80035fc:	200003d0 	.word	0x200003d0
 8003600:	053e2d63 	.word	0x053e2d63
 8003604:	40010200 	.word	0x40010200
 8003608:	40010204 	.word	0x40010204
 800360c:	40010208 	.word	0x40010208
 8003610:	4001020c 	.word	0x4001020c
 8003614:	40010210 	.word	0x40010210
 8003618:	40010214 	.word	0x40010214
 800361c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003620:	6938      	ldr	r0, [r7, #16]
 8003622:	f7ff fd4d 	bl	80030c0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7f5b      	ldrb	r3, [r3, #29]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003636:	7ffb      	ldrb	r3, [r7, #31]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <__NVIC_SetPriorityGrouping>:
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800365c:	4013      	ands	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800366c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	60d3      	str	r3, [r2, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <__NVIC_GetPriorityGrouping>:
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <__NVIC_GetPriorityGrouping+0x18>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	f003 0307 	and.w	r3, r3, #7
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <__NVIC_EnableIRQ>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	db0b      	blt.n	80036ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4907      	ldr	r1, [pc, #28]	; (80036dc <__NVIC_EnableIRQ+0x38>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2001      	movs	r0, #1
 80036c6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e100 	.word	0xe000e100

080036e0 <__NVIC_SetPriority>:
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	6039      	str	r1, [r7, #0]
 80036ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	db0a      	blt.n	800370a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	490c      	ldr	r1, [pc, #48]	; (800372c <__NVIC_SetPriority+0x4c>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	0112      	lsls	r2, r2, #4
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	440b      	add	r3, r1
 8003704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003708:	e00a      	b.n	8003720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4908      	ldr	r1, [pc, #32]	; (8003730 <__NVIC_SetPriority+0x50>)
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	3b04      	subs	r3, #4
 8003718:	0112      	lsls	r2, r2, #4
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	440b      	add	r3, r1
 800371e:	761a      	strb	r2, [r3, #24]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000e100 	.word	0xe000e100
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <NVIC_EncodePriority>:
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f1c3 0307 	rsb	r3, r3, #7
 800374e:	2b04      	cmp	r3, #4
 8003750:	bf28      	it	cs
 8003752:	2304      	movcs	r3, #4
 8003754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3304      	adds	r3, #4
 800375a:	2b06      	cmp	r3, #6
 800375c:	d902      	bls.n	8003764 <NVIC_EncodePriority+0x30>
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3b03      	subs	r3, #3
 8003762:	e000      	b.n	8003766 <NVIC_EncodePriority+0x32>
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43da      	mvns	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	401a      	ands	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800377c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	43d9      	mvns	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	4313      	orrs	r3, r2
}
 800378e:	4618      	mov	r0, r3
 8003790:	3724      	adds	r7, #36	; 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <SysTick_Config>:
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ac:	d301      	bcc.n	80037b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00f      	b.n	80037d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b2:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <SysTick_Config+0x40>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ba:	210f      	movs	r1, #15
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037c0:	f7ff ff8e 	bl	80036e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <SysTick_Config+0x40>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ca:	4b04      	ldr	r3, [pc, #16]	; (80037dc <SysTick_Config+0x40>)
 80037cc:	2207      	movs	r2, #7
 80037ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	e000e010 	.word	0xe000e010

080037e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff29 	bl	8003640 <__NVIC_SetPriorityGrouping>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	4603      	mov	r3, r0
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003804:	f7ff ff40 	bl	8003688 <__NVIC_GetPriorityGrouping>
 8003808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7ff ff90 	bl	8003734 <NVIC_EncodePriority>
 8003814:	4602      	mov	r2, r0
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff5f 	bl	80036e0 <__NVIC_SetPriority>
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff33 	bl	80036a4 <__NVIC_EnableIRQ>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ffa4 	bl	800379c <SysTick_Config>
 8003854:	4603      	mov	r3, r0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e014      	b.n	800389a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	791b      	ldrb	r3, [r3, #4]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fc ff4b 	bl	800071c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	795b      	ldrb	r3, [r3, #5]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_DAC_Start+0x16>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e043      	b.n	8003940 <HAL_DAC_Start+0x9e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6819      	ldr	r1, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80038dc:	2001      	movs	r0, #1
 80038de:	f7fe fb4d 	bl	8001f7c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10f      	bne.n	8003908 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d11d      	bne.n	8003932 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	e014      	b.n	8003932 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2102      	movs	r1, #2
 800391a:	fa01 f303 	lsl.w	r3, r1, r3
 800391e:	429a      	cmp	r2, r3
 8003920:	d107      	bne.n	8003932 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0202 	orr.w	r2, r2, #2
 8003930:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	795b      	ldrb	r3, [r3, #5]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_DAC_Start_DMA+0x1e>
 8003962:	2302      	movs	r3, #2
 8003964:	e0a1      	b.n	8003aaa <HAL_DAC_Start_DMA+0x162>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2202      	movs	r2, #2
 8003970:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d12a      	bne.n	80039ce <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a4d      	ldr	r2, [pc, #308]	; (8003ab4 <HAL_DAC_Start_DMA+0x16c>)
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a4c      	ldr	r2, [pc, #304]	; (8003ab8 <HAL_DAC_Start_DMA+0x170>)
 8003986:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a4b      	ldr	r2, [pc, #300]	; (8003abc <HAL_DAC_Start_DMA+0x174>)
 800398e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800399e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d009      	beq.n	80039ba <HAL_DAC_Start_DMA+0x72>
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d00c      	beq.n	80039c4 <HAL_DAC_Start_DMA+0x7c>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d000      	beq.n	80039b0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80039ae:	e039      	b.n	8003a24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	613b      	str	r3, [r7, #16]
        break;
 80039b8:	e034      	b.n	8003a24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	613b      	str	r3, [r7, #16]
        break;
 80039c2:	e02f      	b.n	8003a24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3310      	adds	r3, #16
 80039ca:	613b      	str	r3, [r7, #16]
        break;
 80039cc:	e02a      	b.n	8003a24 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4a3b      	ldr	r2, [pc, #236]	; (8003ac0 <HAL_DAC_Start_DMA+0x178>)
 80039d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <HAL_DAC_Start_DMA+0x17c>)
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4a39      	ldr	r2, [pc, #228]	; (8003ac8 <HAL_DAC_Start_DMA+0x180>)
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039f4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d009      	beq.n	8003a10 <HAL_DAC_Start_DMA+0xc8>
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d00c      	beq.n	8003a1a <HAL_DAC_Start_DMA+0xd2>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d000      	beq.n	8003a06 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003a04:	e00e      	b.n	8003a24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	613b      	str	r3, [r7, #16]
        break;
 8003a0e:	e009      	b.n	8003a24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3318      	adds	r3, #24
 8003a16:	613b      	str	r3, [r7, #16]
        break;
 8003a18:	e004      	b.n	8003a24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	331c      	adds	r3, #28
 8003a20:	613b      	str	r3, [r7, #16]
        break;
 8003a22:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d111      	bne.n	8003a4e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a38:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6898      	ldr	r0, [r3, #8]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	f000 fb66 	bl	8004114 <HAL_DMA_Start_IT>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75fb      	strb	r3, [r7, #23]
 8003a4c:	e010      	b.n	8003a70 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a5c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68d8      	ldr	r0, [r3, #12]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	f000 fb54 	bl	8004114 <HAL_DMA_Start_IT>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6819      	ldr	r1, [r3, #0]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2201      	movs	r2, #1
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003a94:	2001      	movs	r0, #1
 8003a96:	f7fe fa71 	bl	8001f7c <HAL_Delay>
 8003a9a:	e005      	b.n	8003aa8 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f043 0204 	orr.w	r2, r3, #4
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	08003eb1 	.word	0x08003eb1
 8003ab8:	08003ed3 	.word	0x08003ed3
 8003abc:	08003eef 	.word	0x08003eef
 8003ac0:	08003f59 	.word	0x08003f59
 8003ac4:	08003f7b 	.word	0x08003f7b
 8003ac8:	08003f97 	.word	0x08003f97

08003acc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	3308      	adds	r3, #8
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e004      	b.n	8003b06 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	3314      	adds	r3, #20
 8003b04:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	795b      	ldrb	r3, [r3, #5]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_DAC_ConfigChannel+0x1c>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e194      	b.n	8003e9e <HAL_DAC_ConfigChannel+0x346>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d174      	bne.n	8003c72 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d137      	bne.n	8003bfe <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003b8e:	f7fe f9e9 	bl	8001f64 <HAL_GetTick>
 8003b92:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b94:	e011      	b.n	8003bba <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b96:	f7fe f9e5 	bl	8001f64 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d90a      	bls.n	8003bba <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f043 0208 	orr.w	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e171      	b.n	8003e9e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e6      	bne.n	8003b96 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f7fe f9d7 	bl	8001f7c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
 8003bd8:	e01e      	b.n	8003c18 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bda:	f7fe f9c3 	bl	8001f64 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d90a      	bls.n	8003bfe <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f043 0208 	orr.w	r2, r3, #8
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e14f      	b.n	8003e9e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	dbe8      	blt.n	8003bda <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7fe f9b7 	bl	8001f7c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	ea02 0103 	and.w	r1, r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	21ff      	movs	r1, #255	; 0xff
 8003c54:	fa01 f303 	lsl.w	r3, r1, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	ea02 0103 	and.w	r1, r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d11d      	bne.n	8003cb6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	221f      	movs	r2, #31
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c92:	4013      	ands	r3, r2
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	4313      	orrs	r3, r2
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	4013      	ands	r3, r2
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	623b      	str	r3, [r7, #32]
 8003ce2:	e011      	b.n	8003d08 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	623b      	str	r3, [r7, #32]
 8003cf4:	e008      	b.n	8003d08 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	623b      	str	r3, [r7, #32]
 8003d02:	e001      	b.n	8003d08 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	791b      	ldrb	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d102      	bne.n	8003d3c <HAL_DAC_ConfigChannel+0x1e4>
 8003d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d3a:	e000      	b.n	8003d3e <HAL_DAC_ConfigChannel+0x1e6>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d56:	4013      	ands	r3, r2
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	795b      	ldrb	r3, [r3, #5]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d102      	bne.n	8003d68 <HAL_DAC_ConfigChannel+0x210>
 8003d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d66:	e000      	b.n	8003d6a <HAL_DAC_ConfigChannel+0x212>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d114      	bne.n	8003daa <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d80:	f001 fa9e 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8003d84:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4a47      	ldr	r2, [pc, #284]	; (8003ea8 <HAL_DAC_ConfigChannel+0x350>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d904      	bls.n	8003d98 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	e00d      	b.n	8003db4 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	4a44      	ldr	r2, [pc, #272]	; (8003eac <HAL_DAC_ConfigChannel+0x354>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d909      	bls.n	8003db4 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	e004      	b.n	8003db4 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	4313      	orrs	r3, r2
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43da      	mvns	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	400a      	ands	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	4013      	ands	r3, r2
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	22c0      	movs	r2, #192	; 0xc0
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43da      	mvns	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	400a      	ands	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	ea02 0103 	and.w	r1, r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	409a      	lsls	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3728      	adds	r7, #40	; 0x28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	09896800 	.word	0x09896800
 8003eac:	04c4b400 	.word	0x04c4b400

08003eb0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff fe2c 	bl	8003b1c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	711a      	strb	r2, [r3, #4]
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff fe25 	bl	8003b30 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f043 0204 	orr.w	r2, r3, #4
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fe1b 	bl	8003b44 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	711a      	strb	r2, [r3, #4]
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff ffd8 	bl	8003f1c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	711a      	strb	r2, [r3, #4]
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff ffd1 	bl	8003f30 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff ffc7 	bl	8003f44 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	711a      	strb	r2, [r3, #4]
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e08d      	b.n	80040f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_DMA_Init+0x138>)
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d80f      	bhi.n	8004002 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b45      	ldr	r3, [pc, #276]	; (8004100 <HAL_DMA_Init+0x13c>)
 8003fea:	4413      	add	r3, r2
 8003fec:	4a45      	ldr	r2, [pc, #276]	; (8004104 <HAL_DMA_Init+0x140>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	009a      	lsls	r2, r3, #2
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a42      	ldr	r2, [pc, #264]	; (8004108 <HAL_DMA_Init+0x144>)
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
 8004000:	e00e      	b.n	8004020 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	4b40      	ldr	r3, [pc, #256]	; (800410c <HAL_DMA_Init+0x148>)
 800400a:	4413      	add	r3, r2
 800400c:	4a3d      	ldr	r2, [pc, #244]	; (8004104 <HAL_DMA_Init+0x140>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	091b      	lsrs	r3, r3, #4
 8004014:	009a      	lsls	r2, r3, #2
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <HAL_DMA_Init+0x14c>)
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9b6 	bl	80043e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004080:	d102      	bne.n	8004088 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800409c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d010      	beq.n	80040c8 <HAL_DMA_Init+0x104>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d80c      	bhi.n	80040c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f9d6 	bl	8004460 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	e008      	b.n	80040da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40020407 	.word	0x40020407
 8004100:	bffdfff8 	.word	0xbffdfff8
 8004104:	cccccccd 	.word	0xcccccccd
 8004108:	40020000 	.word	0x40020000
 800410c:	bffdfbf8 	.word	0xbffdfbf8
 8004110:	40020400 	.word	0x40020400

08004114 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_DMA_Start_IT+0x20>
 8004130:	2302      	movs	r3, #2
 8004132:	e066      	b.n	8004202 <HAL_DMA_Start_IT+0xee>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d155      	bne.n	80041f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f8fb 	bl	8004368 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 020e 	orr.w	r2, r2, #14
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e00f      	b.n	80041ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0204 	bic.w	r2, r2, #4
 800419a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 020a 	orr.w	r2, r2, #10
 80041aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e005      	b.n	8004200 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
 80041fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004200:	7dfb      	ldrb	r3, [r7, #23]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2204      	movs	r2, #4
 800422c:	409a      	lsls	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d026      	beq.n	8004284 <HAL_DMA_IRQHandler+0x7a>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d021      	beq.n	8004284 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d107      	bne.n	800425e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0204 	bic.w	r2, r2, #4
 800425c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f003 021f 	and.w	r2, r3, #31
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	2104      	movs	r1, #4
 800426c:	fa01 f202 	lsl.w	r2, r1, r2
 8004270:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	2b00      	cmp	r3, #0
 8004278:	d071      	beq.n	800435e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004282:	e06c      	b.n	800435e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2202      	movs	r2, #2
 800428e:	409a      	lsls	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d02e      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d029      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 020a 	bic.w	r2, r2, #10
 80042be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	f003 021f 	and.w	r2, r3, #31
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	2102      	movs	r1, #2
 80042d6:	fa01 f202 	lsl.w	r2, r1, r2
 80042da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d038      	beq.n	800435e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042f4:	e033      	b.n	800435e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2208      	movs	r2, #8
 8004300:	409a      	lsls	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d02a      	beq.n	8004360 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d025      	beq.n	8004360 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 020e 	bic.w	r2, r2, #14
 8004322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f202 	lsl.w	r2, r1, r2
 8004336:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	2b00      	cmp	r3, #0
 8004354:	d004      	beq.n	8004360 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800435e:	bf00      	nop
 8004360:	bf00      	nop
}
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800437e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004390:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	f003 021f 	and.w	r2, r3, #31
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	2101      	movs	r1, #1
 80043a0:	fa01 f202 	lsl.w	r2, r1, r2
 80043a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d108      	bne.n	80043c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043c6:	e007      	b.n	80043d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	60da      	str	r2, [r3, #12]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d802      	bhi.n	80043fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043f8:	4b15      	ldr	r3, [pc, #84]	; (8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e001      	b.n	8004402 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004400:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3b08      	subs	r3, #8
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	009a      	lsls	r2, r3, #2
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	461a      	mov	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0b      	ldr	r2, [pc, #44]	; (800445c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800442e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	2201      	movs	r2, #1
 8004438:	409a      	lsls	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40020407 	.word	0x40020407
 8004450:	40020800 	.word	0x40020800
 8004454:	40020820 	.word	0x40020820
 8004458:	cccccccd 	.word	0xcccccccd
 800445c:	40020880 	.word	0x40020880

08004460 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	461a      	mov	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a08      	ldr	r2, [pc, #32]	; (80044a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004482:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3b01      	subs	r3, #1
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	2201      	movs	r2, #1
 800448e:	409a      	lsls	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	1000823f 	.word	0x1000823f
 80044a4:	40020940 	.word	0x40020940

080044a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044b6:	e15a      	b.n	800476e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2101      	movs	r1, #1
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	fa01 f303 	lsl.w	r3, r1, r3
 80044c4:	4013      	ands	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 814c 	beq.w	8004768 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d00b      	beq.n	80044f0 <HAL_GPIO_Init+0x48>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d007      	beq.n	80044f0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044e4:	2b11      	cmp	r3, #17
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b12      	cmp	r3, #18
 80044ee:	d130      	bne.n	8004552 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	2203      	movs	r2, #3
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4013      	ands	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004526:	2201      	movs	r2, #1
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 0201 	and.w	r2, r3, #1
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	2203      	movs	r2, #3
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0xea>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b12      	cmp	r3, #18
 8004590:	d123      	bne.n	80045da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	08da      	lsrs	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3208      	adds	r2, #8
 800459a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800459e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	220f      	movs	r2, #15
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	08da      	lsrs	r2, r3, #3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3208      	adds	r2, #8
 80045d4:	6939      	ldr	r1, [r7, #16]
 80045d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	2203      	movs	r2, #3
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0203 	and.w	r2, r3, #3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80a6 	beq.w	8004768 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461c:	4b5b      	ldr	r3, [pc, #364]	; (800478c <HAL_GPIO_Init+0x2e4>)
 800461e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004620:	4a5a      	ldr	r2, [pc, #360]	; (800478c <HAL_GPIO_Init+0x2e4>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6613      	str	r3, [r2, #96]	; 0x60
 8004628:	4b58      	ldr	r3, [pc, #352]	; (800478c <HAL_GPIO_Init+0x2e4>)
 800462a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004634:	4a56      	ldr	r2, [pc, #344]	; (8004790 <HAL_GPIO_Init+0x2e8>)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	3302      	adds	r3, #2
 800463c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004640:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	220f      	movs	r2, #15
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800465e:	d01f      	beq.n	80046a0 <HAL_GPIO_Init+0x1f8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a4c      	ldr	r2, [pc, #304]	; (8004794 <HAL_GPIO_Init+0x2ec>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d019      	beq.n	800469c <HAL_GPIO_Init+0x1f4>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a4b      	ldr	r2, [pc, #300]	; (8004798 <HAL_GPIO_Init+0x2f0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <HAL_GPIO_Init+0x1f0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a4a      	ldr	r2, [pc, #296]	; (800479c <HAL_GPIO_Init+0x2f4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00d      	beq.n	8004694 <HAL_GPIO_Init+0x1ec>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a49      	ldr	r2, [pc, #292]	; (80047a0 <HAL_GPIO_Init+0x2f8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <HAL_GPIO_Init+0x1e8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a48      	ldr	r2, [pc, #288]	; (80047a4 <HAL_GPIO_Init+0x2fc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_GPIO_Init+0x1e4>
 8004688:	2305      	movs	r3, #5
 800468a:	e00a      	b.n	80046a2 <HAL_GPIO_Init+0x1fa>
 800468c:	2306      	movs	r3, #6
 800468e:	e008      	b.n	80046a2 <HAL_GPIO_Init+0x1fa>
 8004690:	2304      	movs	r3, #4
 8004692:	e006      	b.n	80046a2 <HAL_GPIO_Init+0x1fa>
 8004694:	2303      	movs	r3, #3
 8004696:	e004      	b.n	80046a2 <HAL_GPIO_Init+0x1fa>
 8004698:	2302      	movs	r3, #2
 800469a:	e002      	b.n	80046a2 <HAL_GPIO_Init+0x1fa>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <HAL_GPIO_Init+0x1fa>
 80046a0:	2300      	movs	r3, #0
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	f002 0203 	and.w	r2, r2, #3
 80046a8:	0092      	lsls	r2, r2, #2
 80046aa:	4093      	lsls	r3, r2
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046b2:	4937      	ldr	r1, [pc, #220]	; (8004790 <HAL_GPIO_Init+0x2e8>)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	3302      	adds	r3, #2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046c0:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <HAL_GPIO_Init+0x300>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	43db      	mvns	r3, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046e4:	4a30      	ldr	r2, [pc, #192]	; (80047a8 <HAL_GPIO_Init+0x300>)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80046ea:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <HAL_GPIO_Init+0x300>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800470e:	4a26      	ldr	r2, [pc, #152]	; (80047a8 <HAL_GPIO_Init+0x300>)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <HAL_GPIO_Init+0x300>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	43db      	mvns	r3, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004738:	4a1b      	ldr	r2, [pc, #108]	; (80047a8 <HAL_GPIO_Init+0x300>)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800473e:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <HAL_GPIO_Init+0x300>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	43db      	mvns	r3, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004762:	4a11      	ldr	r2, [pc, #68]	; (80047a8 <HAL_GPIO_Init+0x300>)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3301      	adds	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	f47f ae9d 	bne.w	80044b8 <HAL_GPIO_Init+0x10>
  }
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
 8004790:	40010000 	.word	0x40010000
 8004794:	48000400 	.word	0x48000400
 8004798:	48000800 	.word	0x48000800
 800479c:	48000c00 	.word	0x48000c00
 80047a0:	48001000 	.word	0x48001000
 80047a4:	48001400 	.word	0x48001400
 80047a8:	40010400 	.word	0x40010400

080047ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e001      	b.n	80047ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
 80047e8:	4613      	mov	r3, r2
 80047ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047ec:	787b      	ldrb	r3, [r7, #1]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047f8:	e002      	b.n	8004800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d141      	bne.n	800489e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800481a:	4b4b      	ldr	r3, [pc, #300]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004826:	d131      	bne.n	800488c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004828:	4b47      	ldr	r3, [pc, #284]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800482e:	4a46      	ldr	r2, [pc, #280]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004838:	4b43      	ldr	r3, [pc, #268]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004840:	4a41      	ldr	r2, [pc, #260]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004848:	4b40      	ldr	r3, [pc, #256]	; (800494c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2232      	movs	r2, #50	; 0x32
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	4a3f      	ldr	r2, [pc, #252]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	0c9b      	lsrs	r3, r3, #18
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800485e:	e002      	b.n	8004866 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3b01      	subs	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004866:	4b38      	ldr	r3, [pc, #224]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004872:	d102      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f2      	bne.n	8004860 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800487a:	4b33      	ldr	r3, [pc, #204]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004886:	d158      	bne.n	800493a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e057      	b.n	800493c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800488c:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004892:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800489c:	e04d      	b.n	800493a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a4:	d141      	bne.n	800492a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048a6:	4b28      	ldr	r3, [pc, #160]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d131      	bne.n	8004918 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b4:	4b24      	ldr	r3, [pc, #144]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ba:	4a23      	ldr	r2, [pc, #140]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048c4:	4b20      	ldr	r3, [pc, #128]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048cc:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048d4:	4b1d      	ldr	r3, [pc, #116]	; (800494c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2232      	movs	r2, #50	; 0x32
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	0c9b      	lsrs	r3, r3, #18
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ea:	e002      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fe:	d102      	bne.n	8004906 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f2      	bne.n	80048ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004912:	d112      	bne.n	800493a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e011      	b.n	800493c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004928:	e007      	b.n	800493a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800492a:	4b07      	ldr	r3, [pc, #28]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004932:	4a05      	ldr	r2, [pc, #20]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004938:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40007000 	.word	0x40007000
 800494c:	200003d0 	.word	0x200003d0
 8004950:	431bde83 	.word	0x431bde83

08004954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e308      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d075      	beq.n	8004a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004972:	4ba3      	ldr	r3, [pc, #652]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800497c:	4ba0      	ldr	r3, [pc, #640]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d102      	bne.n	8004992 <HAL_RCC_OscConfig+0x3e>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d002      	beq.n	8004998 <HAL_RCC_OscConfig+0x44>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d10b      	bne.n	80049b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	4b99      	ldr	r3, [pc, #612]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05b      	beq.n	8004a5c <HAL_RCC_OscConfig+0x108>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d157      	bne.n	8004a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e2e3      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCC_OscConfig+0x74>
 80049ba:	4b91      	ldr	r3, [pc, #580]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a90      	ldr	r2, [pc, #576]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e01d      	b.n	8004a04 <HAL_RCC_OscConfig+0xb0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0x98>
 80049d2:	4b8b      	ldr	r3, [pc, #556]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a8a      	ldr	r2, [pc, #552]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b88      	ldr	r3, [pc, #544]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a87      	ldr	r2, [pc, #540]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e00b      	b.n	8004a04 <HAL_RCC_OscConfig+0xb0>
 80049ec:	4b84      	ldr	r3, [pc, #528]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a83      	ldr	r2, [pc, #524]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	4b81      	ldr	r3, [pc, #516]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a80      	ldr	r2, [pc, #512]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d013      	beq.n	8004a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd faaa 	bl	8001f64 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd faa6 	bl	8001f64 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e2a8      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a26:	4b76      	ldr	r3, [pc, #472]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0xc0>
 8004a32:	e014      	b.n	8004a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd fa96 	bl	8001f64 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a3c:	f7fd fa92 	bl	8001f64 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b64      	cmp	r3, #100	; 0x64
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e294      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4e:	4b6c      	ldr	r3, [pc, #432]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0xe8>
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d075      	beq.n	8004b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a6a:	4b65      	ldr	r3, [pc, #404]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a74:	4b62      	ldr	r3, [pc, #392]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d102      	bne.n	8004a8a <HAL_RCC_OscConfig+0x136>
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d002      	beq.n	8004a90 <HAL_RCC_OscConfig+0x13c>
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d11f      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a90:	4b5b      	ldr	r3, [pc, #364]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x154>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e267      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b55      	ldr	r3, [pc, #340]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	4952      	ldr	r1, [pc, #328]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004abc:	4b51      	ldr	r3, [pc, #324]	; (8004c04 <HAL_RCC_OscConfig+0x2b0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fa03 	bl	8001ecc <HAL_InitTick>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d043      	beq.n	8004b54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e253      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d023      	beq.n	8004b20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad8:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a48      	ldr	r2, [pc, #288]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fa3e 	bl	8001f64 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aec:	f7fd fa3a 	bl	8001f64 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e23c      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afe:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	4b3d      	ldr	r3, [pc, #244]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	4939      	ldr	r1, [pc, #228]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]
 8004b1e:	e01a      	b.n	8004b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b20:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a36      	ldr	r2, [pc, #216]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fa1a 	bl	8001f64 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fd fa16 	bl	8001f64 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e218      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b46:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x1e0>
 8004b52:	e000      	b.n	8004b56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d03c      	beq.n	8004bdc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01c      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b6a:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b70:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7a:	f7fd f9f3 	bl	8001f64 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b82:	f7fd f9ef 	bl	8001f64 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e1f1      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ef      	beq.n	8004b82 <HAL_RCC_OscConfig+0x22e>
 8004ba2:	e01b      	b.n	8004bdc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba4:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004baa:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fd f9d6 	bl	8001f64 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bbc:	f7fd f9d2 	bl	8001f64 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e1d4      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bce:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1ef      	bne.n	8004bbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80ab 	beq.w	8004d40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bee:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <HAL_RCC_OscConfig+0x2ac>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCC_OscConfig+0x2b4>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e005      	b.n	8004c0a <HAL_RCC_OscConfig+0x2b6>
 8004bfe:	bf00      	nop
 8004c00:	40021000 	.word	0x40021000
 8004c04:	200003d4 	.word	0x200003d4
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	4baf      	ldr	r3, [pc, #700]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	4aae      	ldr	r2, [pc, #696]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6593      	str	r3, [r2, #88]	; 0x58
 8004c1a:	4bac      	ldr	r3, [pc, #688]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c26:	2301      	movs	r3, #1
 8004c28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2a:	4ba9      	ldr	r3, [pc, #676]	; (8004ed0 <HAL_RCC_OscConfig+0x57c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d118      	bne.n	8004c68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c36:	4ba6      	ldr	r3, [pc, #664]	; (8004ed0 <HAL_RCC_OscConfig+0x57c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4aa5      	ldr	r2, [pc, #660]	; (8004ed0 <HAL_RCC_OscConfig+0x57c>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c42:	f7fd f98f 	bl	8001f64 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4a:	f7fd f98b 	bl	8001f64 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e18d      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5c:	4b9c      	ldr	r3, [pc, #624]	; (8004ed0 <HAL_RCC_OscConfig+0x57c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d108      	bne.n	8004c82 <HAL_RCC_OscConfig+0x32e>
 8004c70:	4b96      	ldr	r3, [pc, #600]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	4a95      	ldr	r2, [pc, #596]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c80:	e024      	b.n	8004ccc <HAL_RCC_OscConfig+0x378>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d110      	bne.n	8004cac <HAL_RCC_OscConfig+0x358>
 8004c8a:	4b90      	ldr	r3, [pc, #576]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	4a8e      	ldr	r2, [pc, #568]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004c92:	f043 0304 	orr.w	r3, r3, #4
 8004c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c9a:	4b8c      	ldr	r3, [pc, #560]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	4a8a      	ldr	r2, [pc, #552]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004caa:	e00f      	b.n	8004ccc <HAL_RCC_OscConfig+0x378>
 8004cac:	4b87      	ldr	r3, [pc, #540]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	4a86      	ldr	r2, [pc, #536]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cbc:	4b83      	ldr	r3, [pc, #524]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	4a82      	ldr	r2, [pc, #520]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d016      	beq.n	8004d02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fd f946 	bl	8001f64 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fd f942 	bl	8001f64 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e142      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf2:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ed      	beq.n	8004cdc <HAL_RCC_OscConfig+0x388>
 8004d00:	e015      	b.n	8004d2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fd f92f 	bl	8001f64 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fd f92b 	bl	8001f64 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e12b      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d20:	4b6a      	ldr	r3, [pc, #424]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1ed      	bne.n	8004d0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d2e:	7ffb      	ldrb	r3, [r7, #31]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d34:	4b65      	ldr	r3, [pc, #404]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	4a64      	ldr	r2, [pc, #400]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d03c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01c      	beq.n	8004d8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d54:	4b5d      	ldr	r3, [pc, #372]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d5a:	4a5c      	ldr	r2, [pc, #368]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fd f8fe 	bl	8001f64 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d6c:	f7fd f8fa 	bl	8001f64 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e0fc      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d7e:	4b53      	ldr	r3, [pc, #332]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ef      	beq.n	8004d6c <HAL_RCC_OscConfig+0x418>
 8004d8c:	e01b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d8e:	4b4f      	ldr	r3, [pc, #316]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d94:	4a4d      	ldr	r2, [pc, #308]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fd f8e1 	bl	8001f64 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da6:	f7fd f8dd 	bl	8001f64 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e0df      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004db8:	4b44      	ldr	r3, [pc, #272]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ef      	bne.n	8004da6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 80d3 	beq.w	8004f76 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 030c 	and.w	r3, r3, #12
 8004dd8:	2b0c      	cmp	r3, #12
 8004dda:	f000 808d 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d15a      	bne.n	8004e9c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a38      	ldr	r2, [pc, #224]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df2:	f7fd f8b7 	bl	8001f64 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fd f8b3 	bl	8001f64 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e0b5      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e0c:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e18:	4b2c      	ldr	r3, [pc, #176]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ed4 <HAL_RCC_OscConfig+0x580>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6a11      	ldr	r1, [r2, #32]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e28:	3a01      	subs	r2, #1
 8004e2a:	0112      	lsls	r2, r2, #4
 8004e2c:	4311      	orrs	r1, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e32:	0212      	lsls	r2, r2, #8
 8004e34:	4311      	orrs	r1, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e3a:	0852      	lsrs	r2, r2, #1
 8004e3c:	3a01      	subs	r2, #1
 8004e3e:	0552      	lsls	r2, r2, #21
 8004e40:	4311      	orrs	r1, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e46:	0852      	lsrs	r2, r2, #1
 8004e48:	3a01      	subs	r2, #1
 8004e4a:	0652      	lsls	r2, r2, #25
 8004e4c:	4311      	orrs	r1, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e52:	06d2      	lsls	r2, r2, #27
 8004e54:	430a      	orrs	r2, r1
 8004e56:	491d      	ldr	r1, [pc, #116]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e68:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fd f876 	bl	8001f64 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fd f872 	bl	8001f64 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e074      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x528>
 8004e9a:	e06c      	b.n	8004f76 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ea8:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <HAL_RCC_OscConfig+0x578>)
 8004eba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fd f84e 	bl	8001f64 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eca:	e00e      	b.n	8004eea <HAL_RCC_OscConfig+0x596>
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fd f844 	bl	8001f64 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e046      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eea:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_RCC_OscConfig+0x62c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x584>
 8004ef6:	e03e      	b.n	8004f76 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e039      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f04:	4b1e      	ldr	r3, [pc, #120]	; (8004f80 <HAL_RCC_OscConfig+0x62c>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0203 	and.w	r2, r3, #3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d12c      	bne.n	8004f72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	3b01      	subs	r3, #1
 8004f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d123      	bne.n	8004f72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d11b      	bne.n	8004f72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d113      	bne.n	8004f72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	3b01      	subs	r3, #1
 8004f58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d109      	bne.n	8004f72 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d001      	beq.n	8004f76 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3720      	adds	r7, #32
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40021000 	.word	0x40021000

08004f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e11e      	b.n	80051da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b91      	ldr	r3, [pc, #580]	; (80051e4 <HAL_RCC_ClockConfig+0x260>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d910      	bls.n	8004fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b8e      	ldr	r3, [pc, #568]	; (80051e4 <HAL_RCC_ClockConfig+0x260>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 020f 	bic.w	r2, r3, #15
 8004fb2:	498c      	ldr	r1, [pc, #560]	; (80051e4 <HAL_RCC_ClockConfig+0x260>)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fba:	4b8a      	ldr	r3, [pc, #552]	; (80051e4 <HAL_RCC_ClockConfig+0x260>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e106      	b.n	80051da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d073      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d129      	bne.n	8005034 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe0:	4b81      	ldr	r3, [pc, #516]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0f4      	b.n	80051da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ff0:	f000 f972 	bl	80052d8 <RCC_GetSysClockFreqFromPLLSource>
 8004ff4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4a7c      	ldr	r2, [pc, #496]	; (80051ec <HAL_RCC_ClockConfig+0x268>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d93f      	bls.n	800507e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ffe:	4b7a      	ldr	r3, [pc, #488]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005012:	2b00      	cmp	r3, #0
 8005014:	d033      	beq.n	800507e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800501a:	2b00      	cmp	r3, #0
 800501c:	d12f      	bne.n	800507e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800501e:	4b72      	ldr	r3, [pc, #456]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005026:	4a70      	ldr	r2, [pc, #448]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 8005028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e024      	b.n	800507e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d107      	bne.n	800504c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503c:	4b6a      	ldr	r3, [pc, #424]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0c6      	b.n	80051da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800504c:	4b66      	ldr	r3, [pc, #408]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0be      	b.n	80051da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800505c:	f000 f8ce 	bl	80051fc <HAL_RCC_GetSysClockFreq>
 8005060:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4a61      	ldr	r2, [pc, #388]	; (80051ec <HAL_RCC_ClockConfig+0x268>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d909      	bls.n	800507e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800506a:	4b5f      	ldr	r3, [pc, #380]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005072:	4a5d      	ldr	r2, [pc, #372]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 8005074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005078:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800507e:	4b5a      	ldr	r3, [pc, #360]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 0203 	bic.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4957      	ldr	r1, [pc, #348]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005090:	f7fc ff68 	bl	8001f64 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	e00a      	b.n	80050ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005098:	f7fc ff64 	bl	8001f64 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e095      	b.n	80051da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	4b4e      	ldr	r3, [pc, #312]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 020c 	and.w	r2, r3, #12
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1eb      	bne.n	8005098 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d023      	beq.n	8005114 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d8:	4b43      	ldr	r3, [pc, #268]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a42      	ldr	r2, [pc, #264]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 80050de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050f0:	4b3d      	ldr	r3, [pc, #244]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050f8:	4a3b      	ldr	r2, [pc, #236]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 80050fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005100:	4b39      	ldr	r3, [pc, #228]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4936      	ldr	r1, [pc, #216]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
 8005112:	e008      	b.n	8005126 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b80      	cmp	r3, #128	; 0x80
 8005118:	d105      	bne.n	8005126 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800511a:	4b33      	ldr	r3, [pc, #204]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	4a32      	ldr	r2, [pc, #200]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 8005120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005124:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005126:	4b2f      	ldr	r3, [pc, #188]	; (80051e4 <HAL_RCC_ClockConfig+0x260>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d21d      	bcs.n	8005170 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005134:	4b2b      	ldr	r3, [pc, #172]	; (80051e4 <HAL_RCC_ClockConfig+0x260>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f023 020f 	bic.w	r2, r3, #15
 800513c:	4929      	ldr	r1, [pc, #164]	; (80051e4 <HAL_RCC_ClockConfig+0x260>)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005144:	f7fc ff0e 	bl	8001f64 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	e00a      	b.n	8005162 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514c:	f7fc ff0a 	bl	8001f64 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f241 3288 	movw	r2, #5000	; 0x1388
 800515a:	4293      	cmp	r3, r2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e03b      	b.n	80051da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <HAL_RCC_ClockConfig+0x260>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d1ed      	bne.n	800514c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800517c:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4917      	ldr	r1, [pc, #92]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800519a:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	490f      	ldr	r1, [pc, #60]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051ae:	f000 f825 	bl	80051fc <HAL_RCC_GetSysClockFreq>
 80051b2:	4601      	mov	r1, r0
 80051b4:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <HAL_RCC_ClockConfig+0x264>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <HAL_RCC_ClockConfig+0x26c>)
 80051c0:	5cd3      	ldrb	r3, [r2, r3]
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	fa21 f303 	lsr.w	r3, r1, r3
 80051ca:	4a0a      	ldr	r2, [pc, #40]	; (80051f4 <HAL_RCC_ClockConfig+0x270>)
 80051cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <HAL_RCC_ClockConfig+0x274>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fc fe7a 	bl	8001ecc <HAL_InitTick>
 80051d8:	4603      	mov	r3, r0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40021000 	.word	0x40021000
 80051ec:	04c4b400 	.word	0x04c4b400
 80051f0:	0800918c 	.word	0x0800918c
 80051f4:	200003d0 	.word	0x200003d0
 80051f8:	200003d4 	.word	0x200003d4

080051fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005202:	4b2c      	ldr	r3, [pc, #176]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b04      	cmp	r3, #4
 800520c:	d102      	bne.n	8005214 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	e047      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005214:	4b27      	ldr	r3, [pc, #156]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 030c 	and.w	r3, r3, #12
 800521c:	2b08      	cmp	r3, #8
 800521e:	d102      	bne.n	8005226 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005220:	4b26      	ldr	r3, [pc, #152]	; (80052bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	e03e      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005226:	4b23      	ldr	r3, [pc, #140]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b0c      	cmp	r3, #12
 8005230:	d136      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005232:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800523c:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	3301      	adds	r3, #1
 8005248:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d10c      	bne.n	800526a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005250:	4a1a      	ldr	r2, [pc, #104]	; (80052bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800525a:	68d2      	ldr	r2, [r2, #12]
 800525c:	0a12      	lsrs	r2, r2, #8
 800525e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005262:	fb02 f303 	mul.w	r3, r2, r3
 8005266:	617b      	str	r3, [r7, #20]
      break;
 8005268:	e00c      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800526a:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005274:	68d2      	ldr	r2, [r2, #12]
 8005276:	0a12      	lsrs	r2, r2, #8
 8005278:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
      break;
 8005282:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	0e5b      	lsrs	r3, r3, #25
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	3301      	adds	r3, #1
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e001      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052a4:	693b      	ldr	r3, [r7, #16]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000
 80052b8:	00f42400 	.word	0x00f42400
 80052bc:	007a1200 	.word	0x007a1200

080052c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	200003d0 	.word	0x200003d0

080052d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052de:	4b1e      	ldr	r3, [pc, #120]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052e8:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d10c      	bne.n	8005316 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052fc:	4a17      	ldr	r2, [pc, #92]	; (800535c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005306:	68d2      	ldr	r2, [r2, #12]
 8005308:	0a12      	lsrs	r2, r2, #8
 800530a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	617b      	str	r3, [r7, #20]
    break;
 8005314:	e00c      	b.n	8005330 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005316:	4a12      	ldr	r2, [pc, #72]	; (8005360 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005320:	68d2      	ldr	r2, [r2, #12]
 8005322:	0a12      	lsrs	r2, r2, #8
 8005324:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	617b      	str	r3, [r7, #20]
    break;
 800532e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	0e5b      	lsrs	r3, r3, #25
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	3301      	adds	r3, #1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800534a:	687b      	ldr	r3, [r7, #4]
}
 800534c:	4618      	mov	r0, r3
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40021000 	.word	0x40021000
 800535c:	007a1200 	.word	0x007a1200
 8005360:	00f42400 	.word	0x00f42400

08005364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800536c:	2300      	movs	r3, #0
 800536e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005370:	2300      	movs	r3, #0
 8005372:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8098 	beq.w	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005382:	2300      	movs	r3, #0
 8005384:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005386:	4b43      	ldr	r3, [pc, #268]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	4b40      	ldr	r3, [pc, #256]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	4a3f      	ldr	r2, [pc, #252]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539c:	6593      	str	r3, [r2, #88]	; 0x58
 800539e:	4b3d      	ldr	r3, [pc, #244]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053aa:	2301      	movs	r3, #1
 80053ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ae:	4b3a      	ldr	r3, [pc, #232]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a39      	ldr	r2, [pc, #228]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ba:	f7fc fdd3 	bl	8001f64 <HAL_GetTick>
 80053be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053c0:	e009      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c2:	f7fc fdcf 	bl	8001f64 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d902      	bls.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	74fb      	strb	r3, [r7, #19]
        break;
 80053d4:	e005      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053d6:	4b30      	ldr	r3, [pc, #192]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ef      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053e2:	7cfb      	ldrb	r3, [r7, #19]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d159      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053e8:	4b2a      	ldr	r3, [pc, #168]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01e      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	429a      	cmp	r2, r3
 8005402:	d019      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005404:	4b23      	ldr	r3, [pc, #140]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005410:	4b20      	ldr	r3, [pc, #128]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	4a1f      	ldr	r2, [pc, #124]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005420:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005430:	4a18      	ldr	r2, [pc, #96]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d016      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fc fd8f 	bl	8001f64 <HAL_GetTick>
 8005446:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005448:	e00b      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fc fd8b 	bl	8001f64 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d902      	bls.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	74fb      	strb	r3, [r7, #19]
            break;
 8005460:	e006      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0ec      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005470:	7cfb      	ldrb	r3, [r7, #19]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005476:	4b07      	ldr	r3, [pc, #28]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005484:	4903      	ldr	r1, [pc, #12]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800548c:	e008      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	74bb      	strb	r3, [r7, #18]
 8005492:	e005      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005494:	40021000 	.word	0x40021000
 8005498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a0:	7c7b      	ldrb	r3, [r7, #17]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d105      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a6:	4baf      	ldr	r3, [pc, #700]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054aa:	4aae      	ldr	r2, [pc, #696]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054be:	4ba9      	ldr	r3, [pc, #676]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	f023 0203 	bic.w	r2, r3, #3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	49a5      	ldr	r1, [pc, #660]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054e0:	4ba0      	ldr	r3, [pc, #640]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	f023 020c 	bic.w	r2, r3, #12
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	499d      	ldr	r1, [pc, #628]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005502:	4b98      	ldr	r3, [pc, #608]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005508:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4994      	ldr	r1, [pc, #592]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005524:	4b8f      	ldr	r3, [pc, #572]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	498c      	ldr	r1, [pc, #560]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005546:	4b87      	ldr	r3, [pc, #540]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	4983      	ldr	r1, [pc, #524]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005568:	4b7e      	ldr	r3, [pc, #504]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	497b      	ldr	r1, [pc, #492]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800558a:	4b76      	ldr	r3, [pc, #472]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	4972      	ldr	r1, [pc, #456]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055ac:	4b6d      	ldr	r3, [pc, #436]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	496a      	ldr	r1, [pc, #424]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ce:	4b65      	ldr	r3, [pc, #404]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	4961      	ldr	r1, [pc, #388]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055f0:	4b5c      	ldr	r3, [pc, #368]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055f6:	f023 0203 	bic.w	r2, r3, #3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	4959      	ldr	r1, [pc, #356]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005612:	4b54      	ldr	r3, [pc, #336]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	4950      	ldr	r1, [pc, #320]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005630:	2b00      	cmp	r3, #0
 8005632:	d015      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005634:	4b4b      	ldr	r3, [pc, #300]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	4948      	ldr	r1, [pc, #288]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005652:	d105      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005654:	4b43      	ldr	r3, [pc, #268]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4a42      	ldr	r2, [pc, #264]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800565a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800565e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	2b00      	cmp	r3, #0
 800566a:	d015      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800566c:	4b3d      	ldr	r3, [pc, #244]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	493a      	ldr	r1, [pc, #232]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568a:	d105      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800568c:	4b35      	ldr	r3, [pc, #212]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4a34      	ldr	r2, [pc, #208]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005696:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d015      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056a4:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	492c      	ldr	r1, [pc, #176]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056c2:	d105      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c4:	4b27      	ldr	r3, [pc, #156]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4a26      	ldr	r2, [pc, #152]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d015      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056dc:	4b21      	ldr	r3, [pc, #132]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	491e      	ldr	r1, [pc, #120]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056fa:	d105      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056fc:	4b19      	ldr	r3, [pc, #100]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4a18      	ldr	r2, [pc, #96]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005706:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d015      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005714:	4b13      	ldr	r3, [pc, #76]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	4910      	ldr	r1, [pc, #64]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005732:	d105      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800573e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d018      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	4902      	ldr	r1, [pc, #8]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005762:	e001      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005764:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005770:	d105      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005772:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d015      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800578a:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005798:	4917      	ldr	r1, [pc, #92]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a8:	d105      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057aa:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d015      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057c2:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d0:	4909      	ldr	r1, [pc, #36]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057e0:	d105      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ec:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40021000 	.word	0x40021000

080057fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e084      	b.n	8005918 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fb fda3 	bl	8001374 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005844:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800584e:	d902      	bls.n	8005856 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e002      	b.n	800585c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800585a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005864:	d007      	beq.n	8005876 <HAL_SPI_Init+0x7a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800586e:	d002      	beq.n	8005876 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005886:	d903      	bls.n	8005890 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
 800588e:	e002      	b.n	8005896 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	ea42 0103 	orr.w	r1, r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	f003 0204 	and.w	r2, r3, #4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	ea42 0103 	orr.w	r1, r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005906:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_SPI_Transmit+0x22>
 800593e:	2302      	movs	r3, #2
 8005940:	e150      	b.n	8005be4 <HAL_SPI_Transmit+0x2c4>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800594a:	f7fc fb0b 	bl	8001f64 <HAL_GetTick>
 800594e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d002      	beq.n	8005966 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005960:	2302      	movs	r3, #2
 8005962:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005964:	e135      	b.n	8005bd2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_SPI_Transmit+0x52>
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005976:	e12c      	b.n	8005bd2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2203      	movs	r2, #3
 800597c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c2:	d107      	bne.n	80059d4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d007      	beq.n	80059f2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059fa:	d94b      	bls.n	8005a94 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_SPI_Transmit+0xea>
 8005a04:	8afb      	ldrh	r3, [r7, #22]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d13e      	bne.n	8005a88 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	881a      	ldrh	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	1c9a      	adds	r2, r3, #2
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a2e:	e02b      	b.n	8005a88 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d112      	bne.n	8005a64 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	881a      	ldrh	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	1c9a      	adds	r2, r3, #2
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a62:	e011      	b.n	8005a88 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a64:	f7fc fa7e 	bl	8001f64 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d803      	bhi.n	8005a7c <HAL_SPI_Transmit+0x15c>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7a:	d102      	bne.n	8005a82 <HAL_SPI_Transmit+0x162>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a86:	e0a4      	b.n	8005bd2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1ce      	bne.n	8005a30 <HAL_SPI_Transmit+0x110>
 8005a92:	e07c      	b.n	8005b8e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_SPI_Transmit+0x182>
 8005a9c:	8afb      	ldrh	r3, [r7, #22]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d170      	bne.n	8005b84 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d912      	bls.n	8005ad2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	1c9a      	adds	r2, r3, #2
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b02      	subs	r3, #2
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ad0:	e058      	b.n	8005b84 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005af8:	e044      	b.n	8005b84 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d12b      	bne.n	8005b60 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d912      	bls.n	8005b38 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	881a      	ldrh	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	1c9a      	adds	r2, r3, #2
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b02      	subs	r3, #2
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b36:	e025      	b.n	8005b84 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	7812      	ldrb	r2, [r2, #0]
 8005b44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b5e:	e011      	b.n	8005b84 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b60:	f7fc fa00 	bl	8001f64 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d803      	bhi.n	8005b78 <HAL_SPI_Transmit+0x258>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b76:	d102      	bne.n	8005b7e <HAL_SPI_Transmit+0x25e>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b82:	e026      	b.n	8005bd2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1b5      	bne.n	8005afa <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f901 	bl	8005d9a <SPI_EndRxTxTransaction>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	77fb      	strb	r3, [r7, #31]
 8005bce:	e000      	b.n	8005bd2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005bd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bfc:	e04c      	b.n	8005c98 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c04:	d048      	beq.n	8005c98 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c06:	f7fc f9ad 	bl	8001f64 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d902      	bls.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d13d      	bne.n	8005c98 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c34:	d111      	bne.n	8005c5a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3e:	d004      	beq.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c48:	d107      	bne.n	8005c5a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	d10f      	bne.n	8005c84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e00f      	b.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	bf0c      	ite	eq
 8005ca8:	2301      	moveq	r3, #1
 8005caa:	2300      	movne	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d1a3      	bne.n	8005bfe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cce:	e057      	b.n	8005d80 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005cd6:	d106      	bne.n	8005ce6 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d103      	bne.n	8005ce6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cec:	d048      	beq.n	8005d80 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005cee:	f7fc f939 	bl	8001f64 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d902      	bls.n	8005d04 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d13d      	bne.n	8005d80 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d1c:	d111      	bne.n	8005d42 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d26:	d004      	beq.n	8005d32 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d30:	d107      	bne.n	8005d42 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4a:	d10f      	bne.n	8005d6c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e008      	b.n	8005d92 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d19f      	bne.n	8005cd0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b086      	sub	sp, #24
 8005d9e:	af02      	add	r7, sp, #8
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff ff84 	bl	8005cc0 <SPI_WaitFifoStateUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e027      	b.n	8005e1e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff ff07 	bl	8005bec <SPI_WaitFlagStateUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de8:	f043 0220 	orr.w	r2, r3, #32
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e014      	b.n	8005e1e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff ff5d 	bl	8005cc0 <SPI_WaitFifoStateUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d007      	beq.n	8005e1c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e000      	b.n	8005e1e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e049      	b.n	8005ecc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fb ff4b 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4619      	mov	r1, r3
 8005e64:	4610      	mov	r0, r2
 8005e66:	f000 fc23 	bl	80066b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d001      	beq.n	8005eec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e019      	b.n	8005f20 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <HAL_TIM_Base_Start+0x58>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b06      	cmp	r3, #6
 8005f04:	d00b      	beq.n	8005f1e <HAL_TIM_Base_Start+0x4a>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0c:	d007      	beq.n	8005f1e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0201 	orr.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	00010007 	.word	0x00010007

08005f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d001      	beq.n	8005f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e021      	b.n	8005f8c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <HAL_TIM_Base_Start_IT+0x68>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d00b      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0x5a>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d007      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	00010007 	.word	0x00010007

08005f9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e097      	b.n	80060e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fb fe33 	bl	8001c30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005fe0:	f023 0307 	bic.w	r3, r3, #7
 8005fe4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f000 fb5d 	bl	80066b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800601e:	f023 0303 	bic.w	r3, r3, #3
 8006022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	4313      	orrs	r3, r2
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800603c:	f023 030c 	bic.w	r3, r3, #12
 8006040:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	4313      	orrs	r3, r2
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	011a      	lsls	r2, r3, #4
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	031b      	lsls	r3, r3, #12
 800606c:	4313      	orrs	r3, r2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800607a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	4313      	orrs	r3, r2
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d122      	bne.n	8006144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b02      	cmp	r3, #2
 800610a:	d11b      	bne.n	8006144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0202 	mvn.w	r2, #2
 8006114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 faa2 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 8006130:	e005      	b.n	800613e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa94 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 faa5 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b04      	cmp	r3, #4
 8006150:	d122      	bne.n	8006198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b04      	cmp	r3, #4
 800615e:	d11b      	bne.n	8006198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0204 	mvn.w	r2, #4
 8006168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa78 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 8006184:	e005      	b.n	8006192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fa6a 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fa7b 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d122      	bne.n	80061ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d11b      	bne.n	80061ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0208 	mvn.w	r2, #8
 80061bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2204      	movs	r2, #4
 80061c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa4e 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 80061d8:	e005      	b.n	80061e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa40 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fa51 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d122      	bne.n	8006240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b10      	cmp	r3, #16
 8006206:	d11b      	bne.n	8006240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0210 	mvn.w	r2, #16
 8006210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2208      	movs	r2, #8
 8006216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa24 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 800622c:	e005      	b.n	800623a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa16 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fa27 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b01      	cmp	r3, #1
 800624c:	d10e      	bne.n	800626c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d107      	bne.n	800626c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0201 	mvn.w	r2, #1
 8006264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9f0 	bl	800664c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d10e      	bne.n	8006298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d107      	bne.n	8006298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fd5e 	bl	8006d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a6:	d10e      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b2:	2b80      	cmp	r3, #128	; 0x80
 80062b4:	d107      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fd51 	bl	8006d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d10e      	bne.n	80062f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d107      	bne.n	80062f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f9d5 	bl	800669c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d10e      	bne.n	800631e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d107      	bne.n	800631e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f06f 0220 	mvn.w	r2, #32
 8006316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fd11 	bl	8006d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800632c:	d10f      	bne.n	800634e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800633c:	d107      	bne.n	800634e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fd17 	bl	8006d7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800635c:	d10f      	bne.n	800637e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800636c:	d107      	bne.n	800637e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fd09 	bl	8006d90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800638c:	d10f      	bne.n	80063ae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800639c:	d107      	bne.n	80063ae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80063a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fcfb 	bl	8006da4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063bc:	d10f      	bne.n	80063de <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063cc:	d107      	bne.n	80063de <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80063d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fced 	bl	8006db8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_TIM_ConfigClockSource+0x18>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e0d2      	b.n	80065a6 <HAL_TIM_ConfigClockSource+0x1be>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800641e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643c:	f000 80a9 	beq.w	8006592 <HAL_TIM_ConfigClockSource+0x1aa>
 8006440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006444:	d81a      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x94>
 8006446:	2b30      	cmp	r3, #48	; 0x30
 8006448:	f000 809a 	beq.w	8006580 <HAL_TIM_ConfigClockSource+0x198>
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	d809      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0x7c>
 8006450:	2b10      	cmp	r3, #16
 8006452:	f000 8095 	beq.w	8006580 <HAL_TIM_ConfigClockSource+0x198>
 8006456:	2b20      	cmp	r3, #32
 8006458:	f000 8092 	beq.w	8006580 <HAL_TIM_ConfigClockSource+0x198>
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 808f 	beq.w	8006580 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006462:	e097      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006464:	2b50      	cmp	r3, #80	; 0x50
 8006466:	d05b      	beq.n	8006520 <HAL_TIM_ConfigClockSource+0x138>
 8006468:	2b50      	cmp	r3, #80	; 0x50
 800646a:	d802      	bhi.n	8006472 <HAL_TIM_ConfigClockSource+0x8a>
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	d077      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006470:	e090      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006472:	2b60      	cmp	r3, #96	; 0x60
 8006474:	d064      	beq.n	8006540 <HAL_TIM_ConfigClockSource+0x158>
 8006476:	2b70      	cmp	r3, #112	; 0x70
 8006478:	d028      	beq.n	80064cc <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800647a:	e08b      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800647c:	4a4c      	ldr	r2, [pc, #304]	; (80065b0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d07e      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0x198>
 8006482:	4a4b      	ldr	r2, [pc, #300]	; (80065b0 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d810      	bhi.n	80064aa <HAL_TIM_ConfigClockSource+0xc2>
 8006488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648c:	d078      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0x198>
 800648e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006492:	d803      	bhi.n	800649c <HAL_TIM_ConfigClockSource+0xb4>
 8006494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006498:	d02f      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0x112>
      break;
 800649a:	e07b      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800649c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80064a0:	d06e      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0x198>
 80064a2:	4a44      	ldr	r2, [pc, #272]	; (80065b4 <HAL_TIM_ConfigClockSource+0x1cc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d06b      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80064a8:	e074      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80064aa:	4a43      	ldr	r2, [pc, #268]	; (80065b8 <HAL_TIM_ConfigClockSource+0x1d0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d067      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0x198>
 80064b0:	4a41      	ldr	r2, [pc, #260]	; (80065b8 <HAL_TIM_ConfigClockSource+0x1d0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d803      	bhi.n	80064be <HAL_TIM_ConfigClockSource+0xd6>
 80064b6:	4a41      	ldr	r2, [pc, #260]	; (80065bc <HAL_TIM_ConfigClockSource+0x1d4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d061      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80064bc:	e06a      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80064be:	4a40      	ldr	r2, [pc, #256]	; (80065c0 <HAL_TIM_ConfigClockSource+0x1d8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d05d      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0x198>
 80064c4:	4a3f      	ldr	r2, [pc, #252]	; (80065c4 <HAL_TIM_ConfigClockSource+0x1dc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d05a      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80064ca:	e063      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	6899      	ldr	r1, [r3, #8]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f000 fac8 	bl	8006a70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	609a      	str	r2, [r3, #8]
      break;
 80064f8:	e04c      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f000 fab1 	bl	8006a70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800651c:	609a      	str	r2, [r3, #8]
      break;
 800651e:	e039      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	6859      	ldr	r1, [r3, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	461a      	mov	r2, r3
 800652e:	f000 fa23 	bl	8006978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2150      	movs	r1, #80	; 0x50
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fa7c 	bl	8006a36 <TIM_ITRx_SetConfig>
      break;
 800653e:	e029      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	6859      	ldr	r1, [r3, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	461a      	mov	r2, r3
 800654e:	f000 fa42 	bl	80069d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2160      	movs	r1, #96	; 0x60
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fa6c 	bl	8006a36 <TIM_ITRx_SetConfig>
      break;
 800655e:	e019      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6859      	ldr	r1, [r3, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	461a      	mov	r2, r3
 800656e:	f000 fa03 	bl	8006978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2140      	movs	r1, #64	; 0x40
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fa5c 	bl	8006a36 <TIM_ITRx_SetConfig>
      break;
 800657e:	e009      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f000 fa53 	bl	8006a36 <TIM_ITRx_SetConfig>
      break;
 8006590:	e000      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8006592:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	00100030 	.word	0x00100030
 80065b4:	00100020 	.word	0x00100020
 80065b8:	00100050 	.word	0x00100050
 80065bc:	00100040 	.word	0x00100040
 80065c0:	00100060 	.word	0x00100060
 80065c4:	00100070 	.word	0x00100070

080065c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80065dc:	2302      	movs	r3, #2
 80065de:	e031      	b.n	8006644 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f904 	bl	8006800 <TIM_SlaveTimer_SetConfig>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e018      	b.n	8006644 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006620:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006630:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a46      	ldr	r2, [pc, #280]	; (80067dc <TIM_Base_SetConfig+0x12c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d017      	beq.n	80066f8 <TIM_Base_SetConfig+0x48>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ce:	d013      	beq.n	80066f8 <TIM_Base_SetConfig+0x48>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a43      	ldr	r2, [pc, #268]	; (80067e0 <TIM_Base_SetConfig+0x130>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00f      	beq.n	80066f8 <TIM_Base_SetConfig+0x48>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a42      	ldr	r2, [pc, #264]	; (80067e4 <TIM_Base_SetConfig+0x134>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00b      	beq.n	80066f8 <TIM_Base_SetConfig+0x48>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a41      	ldr	r2, [pc, #260]	; (80067e8 <TIM_Base_SetConfig+0x138>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d007      	beq.n	80066f8 <TIM_Base_SetConfig+0x48>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a40      	ldr	r2, [pc, #256]	; (80067ec <TIM_Base_SetConfig+0x13c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d003      	beq.n	80066f8 <TIM_Base_SetConfig+0x48>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a3f      	ldr	r2, [pc, #252]	; (80067f0 <TIM_Base_SetConfig+0x140>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d108      	bne.n	800670a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a33      	ldr	r2, [pc, #204]	; (80067dc <TIM_Base_SetConfig+0x12c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d023      	beq.n	800675a <TIM_Base_SetConfig+0xaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006718:	d01f      	beq.n	800675a <TIM_Base_SetConfig+0xaa>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a30      	ldr	r2, [pc, #192]	; (80067e0 <TIM_Base_SetConfig+0x130>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d01b      	beq.n	800675a <TIM_Base_SetConfig+0xaa>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2f      	ldr	r2, [pc, #188]	; (80067e4 <TIM_Base_SetConfig+0x134>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d017      	beq.n	800675a <TIM_Base_SetConfig+0xaa>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a2e      	ldr	r2, [pc, #184]	; (80067e8 <TIM_Base_SetConfig+0x138>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d013      	beq.n	800675a <TIM_Base_SetConfig+0xaa>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2d      	ldr	r2, [pc, #180]	; (80067ec <TIM_Base_SetConfig+0x13c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00f      	beq.n	800675a <TIM_Base_SetConfig+0xaa>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2d      	ldr	r2, [pc, #180]	; (80067f4 <TIM_Base_SetConfig+0x144>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00b      	beq.n	800675a <TIM_Base_SetConfig+0xaa>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2c      	ldr	r2, [pc, #176]	; (80067f8 <TIM_Base_SetConfig+0x148>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d007      	beq.n	800675a <TIM_Base_SetConfig+0xaa>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2b      	ldr	r2, [pc, #172]	; (80067fc <TIM_Base_SetConfig+0x14c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <TIM_Base_SetConfig+0xaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a26      	ldr	r2, [pc, #152]	; (80067f0 <TIM_Base_SetConfig+0x140>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d108      	bne.n	800676c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a12      	ldr	r2, [pc, #72]	; (80067dc <TIM_Base_SetConfig+0x12c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d013      	beq.n	80067c0 <TIM_Base_SetConfig+0x110>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a14      	ldr	r2, [pc, #80]	; (80067ec <TIM_Base_SetConfig+0x13c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00f      	beq.n	80067c0 <TIM_Base_SetConfig+0x110>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a14      	ldr	r2, [pc, #80]	; (80067f4 <TIM_Base_SetConfig+0x144>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00b      	beq.n	80067c0 <TIM_Base_SetConfig+0x110>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a13      	ldr	r2, [pc, #76]	; (80067f8 <TIM_Base_SetConfig+0x148>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d007      	beq.n	80067c0 <TIM_Base_SetConfig+0x110>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a12      	ldr	r2, [pc, #72]	; (80067fc <TIM_Base_SetConfig+0x14c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_Base_SetConfig+0x110>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0d      	ldr	r2, [pc, #52]	; (80067f0 <TIM_Base_SetConfig+0x140>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d103      	bne.n	80067c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	615a      	str	r2, [r3, #20]
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40012c00 	.word	0x40012c00
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40013400 	.word	0x40013400
 80067f0:	40015000 	.word	0x40015000
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40014400 	.word	0x40014400
 80067fc:	40014800 	.word	0x40014800

08006800 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682e:	f023 0307 	bic.w	r3, r3, #7
 8006832:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b70      	cmp	r3, #112	; 0x70
 800684c:	d034      	beq.n	80068b8 <TIM_SlaveTimer_SetConfig+0xb8>
 800684e:	2b70      	cmp	r3, #112	; 0x70
 8006850:	d811      	bhi.n	8006876 <TIM_SlaveTimer_SetConfig+0x76>
 8006852:	2b30      	cmp	r3, #48	; 0x30
 8006854:	d07d      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
 8006856:	2b30      	cmp	r3, #48	; 0x30
 8006858:	d806      	bhi.n	8006868 <TIM_SlaveTimer_SetConfig+0x68>
 800685a:	2b10      	cmp	r3, #16
 800685c:	d079      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
 800685e:	2b20      	cmp	r3, #32
 8006860:	d077      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d075      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8006866:	e075      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006868:	2b50      	cmp	r3, #80	; 0x50
 800686a:	d05e      	beq.n	800692a <TIM_SlaveTimer_SetConfig+0x12a>
 800686c:	2b60      	cmp	r3, #96	; 0x60
 800686e:	d066      	beq.n	800693e <TIM_SlaveTimer_SetConfig+0x13e>
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	d02c      	beq.n	80068ce <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8006874:	e06e      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006876:	4a3a      	ldr	r2, [pc, #232]	; (8006960 <TIM_SlaveTimer_SetConfig+0x160>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d06a      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
 800687c:	4a38      	ldr	r2, [pc, #224]	; (8006960 <TIM_SlaveTimer_SetConfig+0x160>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d809      	bhi.n	8006896 <TIM_SlaveTimer_SetConfig+0x96>
 8006882:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006886:	d064      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
 8006888:	4a36      	ldr	r2, [pc, #216]	; (8006964 <TIM_SlaveTimer_SetConfig+0x164>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d061      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
 800688e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006892:	d05e      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006894:	e05e      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006896:	4a34      	ldr	r2, [pc, #208]	; (8006968 <TIM_SlaveTimer_SetConfig+0x168>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d05a      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
 800689c:	4a32      	ldr	r2, [pc, #200]	; (8006968 <TIM_SlaveTimer_SetConfig+0x168>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d803      	bhi.n	80068aa <TIM_SlaveTimer_SetConfig+0xaa>
 80068a2:	4a32      	ldr	r2, [pc, #200]	; (800696c <TIM_SlaveTimer_SetConfig+0x16c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d054      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80068a8:	e054      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80068aa:	4a31      	ldr	r2, [pc, #196]	; (8006970 <TIM_SlaveTimer_SetConfig+0x170>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d050      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
 80068b0:	4a30      	ldr	r2, [pc, #192]	; (8006974 <TIM_SlaveTimer_SetConfig+0x174>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d04d      	beq.n	8006952 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80068b6:	e04d      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68d9      	ldr	r1, [r3, #12]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f000 f8d2 	bl	8006a70 <TIM_ETR_SetConfig>
      break;
 80068cc:	e042      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	d004      	beq.n	80068e0 <TIM_SlaveTimer_SetConfig+0xe0>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80068de:	d101      	bne.n	80068e4 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e038      	b.n	8006956 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6a1a      	ldr	r2, [r3, #32]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0201 	bic.w	r2, r2, #1
 80068fa:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	621a      	str	r2, [r3, #32]
      break;
 8006928:	e014      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6899      	ldr	r1, [r3, #8]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	461a      	mov	r2, r3
 8006938:	f000 f81e 	bl	8006978 <TIM_TI1_ConfigInputStage>
      break;
 800693c:	e00a      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6899      	ldr	r1, [r3, #8]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	461a      	mov	r2, r3
 800694c:	f000 f843 	bl	80069d6 <TIM_TI2_ConfigInputStage>
      break;
 8006950:	e000      	b.n	8006954 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8006952:	bf00      	nop
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	00100030 	.word	0x00100030
 8006964:	00100020 	.word	0x00100020
 8006968:	00100050 	.word	0x00100050
 800696c:	00100040 	.word	0x00100040
 8006970:	00100060 	.word	0x00100060
 8006974:	00100070 	.word	0x00100070

08006978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	f023 0201 	bic.w	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f023 030a 	bic.w	r3, r3, #10
 80069b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b087      	sub	sp, #28
 80069da:	af00      	add	r7, sp, #0
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f023 0210 	bic.w	r2, r3, #16
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	031b      	lsls	r3, r3, #12
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	621a      	str	r2, [r3, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f043 0307 	orr.w	r3, r3, #7
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	609a      	str	r2, [r3, #8]
}
 8006a64:	bf00      	nop
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	021a      	lsls	r2, r3, #8
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	609a      	str	r2, [r3, #8]
}
 8006aa4:	bf00      	nop
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e074      	b.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a34      	ldr	r2, [pc, #208]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d009      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a33      	ldr	r2, [pc, #204]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d004      	beq.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a31      	ldr	r2, [pc, #196]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d108      	bne.n	8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d022      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b48:	d01d      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a1f      	ldr	r2, [pc, #124]	; (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d018      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1d      	ldr	r2, [pc, #116]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d013      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1c      	ldr	r2, [pc, #112]	; (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00e      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d009      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a11      	ldr	r2, [pc, #68]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d10c      	bne.n	8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40015000 	.word	0x40015000
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	40014000 	.word	0x40014000

08006bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e096      	b.n	8006d26 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	041b      	lsls	r3, r3, #16
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2f      	ldr	r2, [pc, #188]	; (8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a2d      	ldr	r2, [pc, #180]	; (8006d38 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a2c      	ldr	r2, [pc, #176]	; (8006d3c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d106      	bne.n	8006c9e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a24      	ldr	r2, [pc, #144]	; (8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d009      	beq.n	8006cbc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a22      	ldr	r2, [pc, #136]	; (8006d38 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a21      	ldr	r2, [pc, #132]	; (8006d3c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d12b      	bne.n	8006d14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	051b      	lsls	r3, r3, #20
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a10      	ldr	r2, [pc, #64]	; (8006d38 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a0e      	ldr	r2, [pc, #56]	; (8006d3c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d106      	bne.n	8006d14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40012c00 	.word	0x40012c00
 8006d38:	40013400 	.word	0x40013400
 8006d3c:	40015000 	.word	0x40015000

08006d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <LL_EXTI_EnableIT_0_31>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <LL_EXTI_EnableIT_0_31+0x20>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	4904      	ldr	r1, [pc, #16]	; (8006dec <LL_EXTI_EnableIT_0_31+0x20>)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	600b      	str	r3, [r1, #0]
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	40010400 	.word	0x40010400

08006df0 <LL_EXTI_EnableIT_32_63>:
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <LL_EXTI_EnableIT_32_63+0x20>)
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	4904      	ldr	r1, [pc, #16]	; (8006e10 <LL_EXTI_EnableIT_32_63+0x20>)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	620b      	str	r3, [r1, #32]
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40010400 	.word	0x40010400

08006e14 <LL_EXTI_DisableIT_0_31>:
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006e1c:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <LL_EXTI_DisableIT_0_31+0x24>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	43db      	mvns	r3, r3
 8006e24:	4904      	ldr	r1, [pc, #16]	; (8006e38 <LL_EXTI_DisableIT_0_31+0x24>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	600b      	str	r3, [r1, #0]
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40010400 	.word	0x40010400

08006e3c <LL_EXTI_DisableIT_32_63>:
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006e44:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <LL_EXTI_DisableIT_32_63+0x24>)
 8006e46:	6a1a      	ldr	r2, [r3, #32]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	4904      	ldr	r1, [pc, #16]	; (8006e60 <LL_EXTI_DisableIT_32_63+0x24>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	620b      	str	r3, [r1, #32]
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40010400 	.word	0x40010400

08006e64 <LL_EXTI_EnableEvent_0_31>:
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006e6c:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	4904      	ldr	r1, [pc, #16]	; (8006e84 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	604b      	str	r3, [r1, #4]
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	40010400 	.word	0x40010400

08006e88 <LL_EXTI_EnableEvent_32_63>:
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e94:	4904      	ldr	r1, [pc, #16]	; (8006ea8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40010400 	.word	0x40010400

08006eac <LL_EXTI_DisableEvent_0_31>:
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	4904      	ldr	r1, [pc, #16]	; (8006ed0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	604b      	str	r3, [r1, #4]
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40010400 	.word	0x40010400

08006ed4 <LL_EXTI_DisableEvent_32_63>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	4904      	ldr	r1, [pc, #16]	; (8006ef8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40010400 	.word	0x40010400

08006efc <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	4904      	ldr	r1, [pc, #16]	; (8006f1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	608b      	str	r3, [r1, #8]
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	40010400 	.word	0x40010400

08006f20 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f2c:	4904      	ldr	r1, [pc, #16]	; (8006f40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	40010400 	.word	0x40010400

08006f44 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	43db      	mvns	r3, r3
 8006f54:	4904      	ldr	r1, [pc, #16]	; (8006f68 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	608b      	str	r3, [r1, #8]
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40010400 	.word	0x40010400

08006f6c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	4904      	ldr	r1, [pc, #16]	; (8006f90 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40010400 	.word	0x40010400

08006f94 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006f9c:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	4904      	ldr	r1, [pc, #16]	; (8006fb4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60cb      	str	r3, [r1, #12]
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc4:	4904      	ldr	r1, [pc, #16]	; (8006fd8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	40010400 	.word	0x40010400

08006fdc <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006fe4:	4b06      	ldr	r3, [pc, #24]	; (8007000 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	43db      	mvns	r3, r3
 8006fec:	4904      	ldr	r1, [pc, #16]	; (8007000 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	60cb      	str	r3, [r1, #12]
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010400 	.word	0x40010400

08007004 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	43db      	mvns	r3, r3
 8007014:	4904      	ldr	r1, [pc, #16]	; (8007028 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007016:	4013      	ands	r3, r2
 8007018:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40010400 	.word	0x40010400

0800702c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	7a1b      	ldrb	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 80c8 	beq.w	80071d2 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d05d      	beq.n	8007106 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	7a5b      	ldrb	r3, [r3, #9]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d00e      	beq.n	8007070 <LL_EXTI_Init+0x44>
 8007052:	2b02      	cmp	r3, #2
 8007054:	d017      	beq.n	8007086 <LL_EXTI_Init+0x5a>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d120      	bne.n	800709c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff ff24 	bl	8006eac <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff feaf 	bl	8006dcc <LL_EXTI_EnableIT_0_31>
          break;
 800706e:	e018      	b.n	80070a2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff fecd 	bl	8006e14 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fef0 	bl	8006e64 <LL_EXTI_EnableEvent_0_31>
          break;
 8007084:	e00d      	b.n	80070a2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff fe9e 	bl	8006dcc <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff fee5 	bl	8006e64 <LL_EXTI_EnableEvent_0_31>
          break;
 800709a:	e002      	b.n	80070a2 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800709c:	2301      	movs	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
          break;
 80070a0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7a9b      	ldrb	r3, [r3, #10]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d02d      	beq.n	8007106 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7a9b      	ldrb	r3, [r3, #10]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d00e      	beq.n	80070d0 <LL_EXTI_Init+0xa4>
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d017      	beq.n	80070e6 <LL_EXTI_Init+0xba>
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d120      	bne.n	80070fc <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff ff8c 	bl	8006fdc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ff17 	bl	8006efc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80070ce:	e01b      	b.n	8007108 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff ff35 	bl	8006f44 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ff58 	bl	8006f94 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80070e4:	e010      	b.n	8007108 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff ff06 	bl	8006efc <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff ff4d 	bl	8006f94 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80070fa:	e005      	b.n	8007108 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f043 0302 	orr.w	r3, r3, #2
 8007102:	60fb      	str	r3, [r7, #12]
            break;
 8007104:	e000      	b.n	8007108 <LL_EXTI_Init+0xdc>
        }
      }
 8007106:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d075      	beq.n	80071fc <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	7a5b      	ldrb	r3, [r3, #9]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d00e      	beq.n	8007136 <LL_EXTI_Init+0x10a>
 8007118:	2b02      	cmp	r3, #2
 800711a:	d017      	beq.n	800714c <LL_EXTI_Init+0x120>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d120      	bne.n	8007162 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fed5 	bl	8006ed4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff fe5e 	bl	8006df0 <LL_EXTI_EnableIT_32_63>
          break;
 8007134:	e01a      	b.n	800716c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff fe7e 	bl	8006e3c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fe9f 	bl	8006e88 <LL_EXTI_EnableEvent_32_63>
          break;
 800714a:	e00f      	b.n	800716c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff fe4d 	bl	8006df0 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fe94 	bl	8006e88 <LL_EXTI_EnableEvent_32_63>
          break;
 8007160:	e004      	b.n	800716c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f043 0304 	orr.w	r3, r3, #4
 8007168:	60fb      	str	r3, [r7, #12]
          break;
 800716a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7a9b      	ldrb	r3, [r3, #10]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d043      	beq.n	80071fc <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	7a9b      	ldrb	r3, [r3, #10]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d00e      	beq.n	800719a <LL_EXTI_Init+0x16e>
 800717c:	2b03      	cmp	r3, #3
 800717e:	d017      	beq.n	80071b0 <LL_EXTI_Init+0x184>
 8007180:	2b01      	cmp	r3, #1
 8007182:	d120      	bne.n	80071c6 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff ff3b 	bl	8007004 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff fec4 	bl	8006f20 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007198:	e031      	b.n	80071fe <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fee4 	bl	8006f6c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff ff05 	bl	8006fb8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80071ae:	e026      	b.n	80071fe <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff feb3 	bl	8006f20 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fefa 	bl	8006fb8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80071c4:	e01b      	b.n	80071fe <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f043 0305 	orr.w	r3, r3, #5
 80071cc:	60fb      	str	r3, [r7, #12]
            break;
 80071ce:	bf00      	nop
 80071d0:	e015      	b.n	80071fe <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fe1c 	bl	8006e14 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff fe63 	bl	8006eac <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fe26 	bl	8006e3c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fe6d 	bl	8006ed4 <LL_EXTI_DisableEvent_32_63>
 80071fa:	e000      	b.n	80071fe <LL_EXTI_Init+0x1d2>
      }
 80071fc:	bf00      	nop
  }

  return status;
 80071fe:	68fb      	ldr	r3, [r7, #12]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <LL_GPIO_SetPinMode>:
{
 8007208:	b480      	push	{r7}
 800720a:	b089      	sub	sp, #36	; 0x24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	fa93 f3a3 	rbit	r3, r3
 8007222:	613b      	str	r3, [r7, #16]
  return result;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	fab3 f383 	clz	r3, r3
 800722a:	b2db      	uxtb	r3, r3
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	2103      	movs	r1, #3
 8007230:	fa01 f303 	lsl.w	r3, r1, r3
 8007234:	43db      	mvns	r3, r3
 8007236:	401a      	ands	r2, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	fa93 f3a3 	rbit	r3, r3
 8007242:	61bb      	str	r3, [r7, #24]
  return result;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	fab3 f383 	clz	r3, r3
 800724a:	b2db      	uxtb	r3, r3
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	fa01 f303 	lsl.w	r3, r1, r3
 8007254:	431a      	orrs	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	601a      	str	r2, [r3, #0]
}
 800725a:	bf00      	nop
 800725c:	3724      	adds	r7, #36	; 0x24
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <LL_GPIO_SetPinOutputType>:
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	43db      	mvns	r3, r3
 800727a:	401a      	ands	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	431a      	orrs	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	605a      	str	r2, [r3, #4]
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <LL_GPIO_SetPinSpeed>:
{
 8007296:	b480      	push	{r7}
 8007298:	b089      	sub	sp, #36	; 0x24
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	fa93 f3a3 	rbit	r3, r3
 80072b0:	613b      	str	r3, [r7, #16]
  return result;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	fab3 f383 	clz	r3, r3
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	2103      	movs	r1, #3
 80072be:	fa01 f303 	lsl.w	r3, r1, r3
 80072c2:	43db      	mvns	r3, r3
 80072c4:	401a      	ands	r2, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	fa93 f3a3 	rbit	r3, r3
 80072d0:	61bb      	str	r3, [r7, #24]
  return result;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	fab3 f383 	clz	r3, r3
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	fa01 f303 	lsl.w	r3, r1, r3
 80072e2:	431a      	orrs	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	bf00      	nop
 80072ea:	3724      	adds	r7, #36	; 0x24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <LL_GPIO_SetPinPull>:
{
 80072f4:	b480      	push	{r7}
 80072f6:	b089      	sub	sp, #36	; 0x24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	fa93 f3a3 	rbit	r3, r3
 800730e:	613b      	str	r3, [r7, #16]
  return result;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	fab3 f383 	clz	r3, r3
 8007316:	b2db      	uxtb	r3, r3
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	2103      	movs	r1, #3
 800731c:	fa01 f303 	lsl.w	r3, r1, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	401a      	ands	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	fa93 f3a3 	rbit	r3, r3
 800732e:	61bb      	str	r3, [r7, #24]
  return result;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	fab3 f383 	clz	r3, r3
 8007336:	b2db      	uxtb	r3, r3
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	fa01 f303 	lsl.w	r3, r1, r3
 8007340:	431a      	orrs	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	60da      	str	r2, [r3, #12]
}
 8007346:	bf00      	nop
 8007348:	3724      	adds	r7, #36	; 0x24
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <LL_GPIO_SetAFPin_0_7>:
{
 8007352:	b480      	push	{r7}
 8007354:	b089      	sub	sp, #36	; 0x24
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a1a      	ldr	r2, [r3, #32]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	fa93 f3a3 	rbit	r3, r3
 800736c:	613b      	str	r3, [r7, #16]
  return result;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	fab3 f383 	clz	r3, r3
 8007374:	b2db      	uxtb	r3, r3
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	210f      	movs	r1, #15
 800737a:	fa01 f303 	lsl.w	r3, r1, r3
 800737e:	43db      	mvns	r3, r3
 8007380:	401a      	ands	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	fa93 f3a3 	rbit	r3, r3
 800738c:	61bb      	str	r3, [r7, #24]
  return result;
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	fab3 f383 	clz	r3, r3
 8007394:	b2db      	uxtb	r3, r3
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	fa01 f303 	lsl.w	r3, r1, r3
 800739e:	431a      	orrs	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	621a      	str	r2, [r3, #32]
}
 80073a4:	bf00      	nop
 80073a6:	3724      	adds	r7, #36	; 0x24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <LL_GPIO_SetAFPin_8_15>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	b089      	sub	sp, #36	; 0x24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	fa93 f3a3 	rbit	r3, r3
 80073cc:	613b      	str	r3, [r7, #16]
  return result;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	fab3 f383 	clz	r3, r3
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	210f      	movs	r1, #15
 80073da:	fa01 f303 	lsl.w	r3, r1, r3
 80073de:	43db      	mvns	r3, r3
 80073e0:	401a      	ands	r2, r3
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	0a1b      	lsrs	r3, r3, #8
 80073e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	fa93 f3a3 	rbit	r3, r3
 80073ee:	61bb      	str	r3, [r7, #24]
  return result;
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	fab3 f383 	clz	r3, r3
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007400:	431a      	orrs	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007406:	bf00      	nop
 8007408:	3724      	adds	r7, #36	; 0x24
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b086      	sub	sp, #24
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	fa93 f3a3 	rbit	r3, r3
 8007428:	60bb      	str	r3, [r7, #8]
  return result;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	fab3 f383 	clz	r3, r3
 8007430:	b2db      	uxtb	r3, r3
 8007432:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007434:	e040      	b.n	80074b8 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	2101      	movs	r1, #1
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	fa01 f303 	lsl.w	r3, r1, r3
 8007442:	4013      	ands	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d032      	beq.n	80074b2 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	461a      	mov	r2, r3
 8007452:	6939      	ldr	r1, [r7, #16]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fed7 	bl	8007208 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d003      	beq.n	800746a <LL_GPIO_Init+0x58>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d106      	bne.n	8007478 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	461a      	mov	r2, r3
 8007470:	6939      	ldr	r1, [r7, #16]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff ff0f 	bl	8007296 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	461a      	mov	r2, r3
 800747e:	6939      	ldr	r1, [r7, #16]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff ff37 	bl	80072f4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d111      	bne.n	80074b2 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2bff      	cmp	r3, #255	; 0xff
 8007492:	d807      	bhi.n	80074a4 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	461a      	mov	r2, r3
 800749a:	6939      	ldr	r1, [r7, #16]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff ff58 	bl	8007352 <LL_GPIO_SetAFPin_0_7>
 80074a2:	e006      	b.n	80074b2 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6939      	ldr	r1, [r7, #16]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff ff7f 	bl	80073b0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	3301      	adds	r3, #1
 80074b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	fa22 f303 	lsr.w	r3, r2, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1b7      	bne.n	8007436 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d003      	beq.n	80074d6 <LL_GPIO_Init+0xc4>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d107      	bne.n	80074e6 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	461a      	mov	r2, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff fec0 	bl	8007266 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	461a      	mov	r2, r3
 80074fe:	4623      	mov	r3, r4
 8007500:	80fb      	strh	r3, [r7, #6]
 8007502:	4603      	mov	r3, r0
 8007504:	80bb      	strh	r3, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	807b      	strh	r3, [r7, #2]
 800750a:	4613      	mov	r3, r2
 800750c:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8007512:	7bfa      	ldrb	r2, [r7, #15]
 8007514:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007518:	429a      	cmp	r2, r3
 800751a:	d938      	bls.n	800758e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x9e>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800751c:	88ba      	ldrh	r2, [r7, #4]
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	441a      	add	r2, r3
 8007522:	88b9      	ldrh	r1, [r7, #4]
 8007524:	883b      	ldrh	r3, [r7, #0]
 8007526:	4419      	add	r1, r3
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	1acb      	subs	r3, r1, r3
 800752c:	429a      	cmp	r2, r3
 800752e:	f000 808e 	beq.w	800764e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x15e>
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	441a      	add	r2, r3
 8007538:	88f9      	ldrh	r1, [r7, #6]
 800753a:	887b      	ldrh	r3, [r7, #2]
 800753c:	4419      	add	r1, r3
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	1acb      	subs	r3, r1, r3
 8007542:	429a      	cmp	r2, r3
 8007544:	f000 8083 	beq.w	800764e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x15e>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour);
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	b29a      	uxth	r2, r3
 800754c:	88fb      	ldrh	r3, [r7, #6]
 800754e:	4413      	add	r3, r2
 8007550:	b298      	uxth	r0, r3
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	b29a      	uxth	r2, r3
 8007556:	88bb      	ldrh	r3, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	b299      	uxth	r1, r3
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	b29b      	uxth	r3, r3
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	b29b      	uxth	r3, r3
 8007564:	887a      	ldrh	r2, [r7, #2]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	b29b      	uxth	r3, r3
 800756a:	3301      	adds	r3, #1
 800756c:	b29c      	uxth	r4, r3
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	b29b      	uxth	r3, r3
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	b29b      	uxth	r3, r3
 8007576:	883a      	ldrh	r2, [r7, #0]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	b29b      	uxth	r3, r3
 800757c:	3301      	adds	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	8c3b      	ldrh	r3, [r7, #32]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	4613      	mov	r3, r2
 8007586:	4622      	mov	r2, r4
 8007588:	f000 fd28 	bl	8007fdc <ILI9341_Draw_Rectangle>
				goto finish;
 800758c:	e060      	b.n	8007650 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x160>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	b29a      	uxth	r2, r3
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	4413      	add	r3, r2
 8007596:	b298      	uxth	r0, r3
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	b29a      	uxth	r2, r3
 800759c:	88bb      	ldrh	r3, [r7, #4]
 800759e:	4413      	add	r3, r2
 80075a0:	b299      	uxth	r1, r3
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	887a      	ldrh	r2, [r7, #2]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f000 fd93 	bl	80080e0 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	b29a      	uxth	r2, r3
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	4413      	add	r3, r2
 80075c2:	b298      	uxth	r0, r3
										(y + h) - b,
 80075c4:	88ba      	ldrh	r2, [r7, #4]
 80075c6:	883b      	ldrh	r3, [r7, #0]
 80075c8:	4413      	add	r3, r2
 80075ca:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	b299      	uxth	r1, r3
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	887a      	ldrh	r2, [r7, #2]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f000 fd7c 	bl	80080e0 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	4413      	add	r3, r2
 80075f0:	b298      	uxth	r0, r3
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	88bb      	ldrh	r3, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	b299      	uxth	r1, r3
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	b29b      	uxth	r3, r3
 8007604:	883a      	ldrh	r2, [r7, #0]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	b29a      	uxth	r2, r3
 800760a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800760e:	b29b      	uxth	r3, r3
 8007610:	f000 fdaa 	bl	8008168 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 8007614:	88fa      	ldrh	r2, [r7, #6]
 8007616:	887b      	ldrh	r3, [r7, #2]
 8007618:	4413      	add	r3, r2
 800761a:	b29a      	uxth	r2, r3
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	b29b      	uxth	r3, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	b298      	uxth	r0, r3
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	b29a      	uxth	r2, r3
 8007628:	88bb      	ldrh	r3, [r7, #4]
 800762a:	4413      	add	r3, r2
 800762c:	b299      	uxth	r1, r3
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	b29b      	uxth	r3, r3
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	b29b      	uxth	r3, r3
 8007636:	883a      	ldrh	r2, [r7, #0]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	b29a      	uxth	r2, r3
 800763c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007640:	b29b      	uxth	r3, r3
 8007642:	f000 fd91 	bl	8008168 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	3301      	adds	r3, #1
 800764a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800764c:	e761      	b.n	8007512 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800764e:	bf00      	nop
	// done
	return;
 8007650:	bf00      	nop
}
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	bd90      	pop	{r4, r7, pc}

08007658 <ILI9341_Draw_Char>:


/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint8_t x, uint8_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007658:	b590      	push	{r4, r7, lr}
 800765a:	b089      	sub	sp, #36	; 0x24
 800765c:	af02      	add	r7, sp, #8
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	4611      	mov	r1, r2
 8007664:	461a      	mov	r2, r3
 8007666:	4623      	mov	r3, r4
 8007668:	71fb      	strb	r3, [r7, #7]
 800766a:	4603      	mov	r3, r0
 800766c:	71bb      	strb	r3, [r7, #6]
 800766e:	460b      	mov	r3, r1
 8007670:	717b      	strb	r3, [r7, #5]
 8007672:	4613      	mov	r3, r2
 8007674:	807b      	strh	r3, [r7, #2]
    uint8_t 	i,j;
		



	function_char = character;
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	2b1f      	cmp	r3, #31
 800767e:	d802      	bhi.n	8007686 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	71fb      	strb	r3, [r7, #7]
 8007684:	e002      	b.n	800768c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	3b20      	subs	r3, #32
 800768a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800768c:	2300      	movs	r3, #0
 800768e:	753b      	strb	r3, [r7, #20]
 8007690:	e012      	b.n	80076b8 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8007692:	7dfa      	ldrb	r2, [r7, #23]
 8007694:	7d38      	ldrb	r0, [r7, #20]
 8007696:	7d39      	ldrb	r1, [r7, #20]
 8007698:	4c4a      	ldr	r4, [pc, #296]	; (80077c4 <ILI9341_Draw_Char+0x16c>)
 800769a:	4613      	mov	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	4413      	add	r3, r2
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	4423      	add	r3, r4
 80076a4:	4403      	add	r3, r0
 80076a6:	781a      	ldrb	r2, [r3, #0]
 80076a8:	f107 0318 	add.w	r3, r7, #24
 80076ac:	440b      	add	r3, r1
 80076ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80076b2:	7d3b      	ldrb	r3, [r7, #20]
 80076b4:	3301      	adds	r3, #1
 80076b6:	753b      	strb	r3, [r7, #20]
 80076b8:	7d3b      	ldrb	r3, [r7, #20]
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d9e9      	bls.n	8007692 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80076be:	2300      	movs	r3, #0
 80076c0:	757b      	strb	r3, [r7, #21]
 80076c2:	e078      	b.n	80077b6 <ILI9341_Draw_Char+0x15e>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80076c4:	2300      	movs	r3, #0
 80076c6:	75bb      	strb	r3, [r7, #22]
 80076c8:	e06f      	b.n	80077aa <ILI9341_Draw_Char+0x152>
        {
            if (temp[j] & (1<<i))
 80076ca:	7d7b      	ldrb	r3, [r7, #21]
 80076cc:	f107 0218 	add.w	r2, r7, #24
 80076d0:	4413      	add	r3, r2
 80076d2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80076d6:	461a      	mov	r2, r3
 80076d8:	7dbb      	ldrb	r3, [r7, #22]
 80076da:	fa42 f303 	asr.w	r3, r2, r3
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d02f      	beq.n	8007746 <ILI9341_Draw_Char+0xee>
            {
            	if(size == 1)
 80076e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d110      	bne.n	800770e <ILI9341_Draw_Char+0xb6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 80076ec:	79bb      	ldrb	r3, [r7, #6]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	7d7b      	ldrb	r3, [r7, #21]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	b298      	uxth	r0, r3
 80076f8:	797b      	ldrb	r3, [r7, #5]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	7dbb      	ldrb	r3, [r7, #22]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4413      	add	r3, r2
 8007702:	b29b      	uxth	r3, r3
 8007704:	887a      	ldrh	r2, [r7, #2]
 8007706:	4619      	mov	r1, r3
 8007708:	f000 fb8e 	bl	8007e28 <ILI9341_Draw_Pixel>
 800770c:	e04a      	b.n	80077a4 <ILI9341_Draw_Char+0x14c>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour);
 800770e:	79bb      	ldrb	r3, [r7, #6]
 8007710:	b29a      	uxth	r2, r3
 8007712:	7d7b      	ldrb	r3, [r7, #21]
 8007714:	b29b      	uxth	r3, r3
 8007716:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007718:	fb11 f303 	smulbb	r3, r1, r3
 800771c:	b29b      	uxth	r3, r3
 800771e:	4413      	add	r3, r2
 8007720:	b298      	uxth	r0, r3
 8007722:	797b      	ldrb	r3, [r7, #5]
 8007724:	b29a      	uxth	r2, r3
 8007726:	7dbb      	ldrb	r3, [r7, #22]
 8007728:	b29b      	uxth	r3, r3
 800772a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800772c:	fb11 f303 	smulbb	r3, r1, r3
 8007730:	b29b      	uxth	r3, r3
 8007732:	4413      	add	r3, r2
 8007734:	b299      	uxth	r1, r3
 8007736:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007738:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800773a:	887b      	ldrh	r3, [r7, #2]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	4623      	mov	r3, r4
 8007740:	f000 fc4c 	bl	8007fdc <ILI9341_Draw_Rectangle>
 8007744:	e02e      	b.n	80077a4 <ILI9341_Draw_Char+0x14c>
				}
            }
            else
            {
               	if(size == 1)
 8007746:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007748:	2b01      	cmp	r3, #1
 800774a:	d110      	bne.n	800776e <ILI9341_Draw_Char+0x116>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800774c:	79bb      	ldrb	r3, [r7, #6]
 800774e:	b29a      	uxth	r2, r3
 8007750:	7d7b      	ldrb	r3, [r7, #21]
 8007752:	b29b      	uxth	r3, r3
 8007754:	4413      	add	r3, r2
 8007756:	b298      	uxth	r0, r3
 8007758:	797b      	ldrb	r3, [r7, #5]
 800775a:	b29a      	uxth	r2, r3
 800775c:	7dbb      	ldrb	r3, [r7, #22]
 800775e:	b29b      	uxth	r3, r3
 8007760:	4413      	add	r3, r2
 8007762:	b29b      	uxth	r3, r3
 8007764:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007766:	4619      	mov	r1, r3
 8007768:	f000 fb5e 	bl	8007e28 <ILI9341_Draw_Pixel>
 800776c:	e01a      	b.n	80077a4 <ILI9341_Draw_Char+0x14c>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour);
 800776e:	79bb      	ldrb	r3, [r7, #6]
 8007770:	b29a      	uxth	r2, r3
 8007772:	7d7b      	ldrb	r3, [r7, #21]
 8007774:	b29b      	uxth	r3, r3
 8007776:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007778:	fb11 f303 	smulbb	r3, r1, r3
 800777c:	b29b      	uxth	r3, r3
 800777e:	4413      	add	r3, r2
 8007780:	b298      	uxth	r0, r3
 8007782:	797b      	ldrb	r3, [r7, #5]
 8007784:	b29a      	uxth	r2, r3
 8007786:	7dbb      	ldrb	r3, [r7, #22]
 8007788:	b29b      	uxth	r3, r3
 800778a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800778c:	fb11 f303 	smulbb	r3, r1, r3
 8007790:	b29b      	uxth	r3, r3
 8007792:	4413      	add	r3, r2
 8007794:	b299      	uxth	r1, r3
 8007796:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007798:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800779a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	4623      	mov	r3, r4
 80077a0:	f000 fc1c 	bl	8007fdc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80077a4:	7dbb      	ldrb	r3, [r7, #22]
 80077a6:	3301      	adds	r3, #1
 80077a8:	75bb      	strb	r3, [r7, #22]
 80077aa:	7dbb      	ldrb	r3, [r7, #22]
 80077ac:	2b07      	cmp	r3, #7
 80077ae:	d98c      	bls.n	80076ca <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 80077b0:	7d7b      	ldrb	r3, [r7, #21]
 80077b2:	3301      	adds	r3, #1
 80077b4:	757b      	strb	r3, [r7, #21]
 80077b6:	7d7b      	ldrb	r3, [r7, #21]
 80077b8:	2b05      	cmp	r3, #5
 80077ba:	d983      	bls.n	80076c4 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd90      	pop	{r4, r7, pc}
 80077c4:	0800919c 	.word	0x0800919c

080077c8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t x, uint8_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80077c8:	b590      	push	{r4, r7, lr}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	4608      	mov	r0, r1
 80077d2:	4611      	mov	r1, r2
 80077d4:	461a      	mov	r2, r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	70fb      	strb	r3, [r7, #3]
 80077da:	460b      	mov	r3, r1
 80077dc:	70bb      	strb	r3, [r7, #2]
 80077de:	4613      	mov	r3, r2
 80077e0:	803b      	strh	r3, [r7, #0]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 80077e2:	e017      	b.n	8007814 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	7818      	ldrb	r0, [r3, #0]
 80077ec:	883c      	ldrh	r4, [r7, #0]
 80077ee:	78ba      	ldrb	r2, [r7, #2]
 80077f0:	78f9      	ldrb	r1, [r7, #3]
 80077f2:	8bbb      	ldrh	r3, [r7, #28]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	8b3b      	ldrh	r3, [r7, #24]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4623      	mov	r3, r4
 80077fc:	f7ff ff2c 	bl	8007658 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8007800:	8b3b      	ldrh	r3, [r7, #24]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	461a      	mov	r2, r3
 8007806:	0052      	lsls	r2, r2, #1
 8007808:	4413      	add	r3, r2
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	b2da      	uxtb	r2, r3
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	4413      	add	r3, r2
 8007812:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e3      	bne.n	80077e4 <ILI9341_Draw_Text+0x1c>
    }
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	bd90      	pop	{r4, r7, pc}

08007824 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <ILI9341_SPI_Init+0x1c>)
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	4a04      	ldr	r2, [pc, #16]	; (8007840 <ILI9341_SPI_Init+0x1c>)
 800782e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007832:	6153      	str	r3, [r2, #20]
}
 8007834:	bf00      	nop
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	48000400 	.word	0x48000400

08007844 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 800784e:	1df9      	adds	r1, r7, #7
 8007850:	2301      	movs	r3, #1
 8007852:	2201      	movs	r2, #1
 8007854:	4804      	ldr	r0, [pc, #16]	; (8007868 <ILI9341_SPI_Send+0x24>)
 8007856:	f7fe f863 	bl	8005920 <HAL_SPI_Transmit>
 800785a:	4603      	mov	r3, r0
 800785c:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	2000065c 	.word	0x2000065c

0800786c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007876:	4b0d      	ldr	r3, [pc, #52]	; (80078ac <ILI9341_Write_Command+0x40>)
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	4a0c      	ldr	r2, [pc, #48]	; (80078ac <ILI9341_Write_Command+0x40>)
 800787c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007880:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007882:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <ILI9341_Write_Command+0x40>)
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	4a09      	ldr	r2, [pc, #36]	; (80078ac <ILI9341_Write_Command+0x40>)
 8007888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff ffd7 	bl	8007844 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <ILI9341_Write_Command+0x40>)
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	4a04      	ldr	r2, [pc, #16]	; (80078ac <ILI9341_Write_Command+0x40>)
 800789c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a0:	6153      	str	r3, [r2, #20]
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	48000400 	.word	0x48000400

080078b0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80078ba:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <ILI9341_Write_Data+0x40>)
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	4a0c      	ldr	r2, [pc, #48]	; (80078f0 <ILI9341_Write_Data+0x40>)
 80078c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80078c6:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <ILI9341_Write_Data+0x40>)
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <ILI9341_Write_Data+0x40>)
 80078cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d0:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff ffb5 	bl	8007844 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80078da:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <ILI9341_Write_Data+0x40>)
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <ILI9341_Write_Data+0x40>)
 80078e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078e4:	6153      	str	r3, [r2, #20]
}
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	48000400 	.word	0x48000400

080078f4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80078f4:	b590      	push	{r4, r7, lr}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	4611      	mov	r1, r2
 8007900:	461a      	mov	r2, r3
 8007902:	4623      	mov	r3, r4
 8007904:	80fb      	strh	r3, [r7, #6]
 8007906:	4603      	mov	r3, r0
 8007908:	80bb      	strh	r3, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	807b      	strh	r3, [r7, #2]
 800790e:	4613      	mov	r3, r2
 8007910:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8007912:	202a      	movs	r0, #42	; 0x2a
 8007914:	f7ff ffaa 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	0a1b      	lsrs	r3, r3, #8
 800791c:	b29b      	uxth	r3, r3
 800791e:	b2db      	uxtb	r3, r3
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff ffc5 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff ffc0 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8007930:	887b      	ldrh	r3, [r7, #2]
 8007932:	0a1b      	lsrs	r3, r3, #8
 8007934:	b29b      	uxth	r3, r3
 8007936:	b2db      	uxtb	r3, r3
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff ffb9 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 800793e:	887b      	ldrh	r3, [r7, #2]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff ffb4 	bl	80078b0 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8007948:	202b      	movs	r0, #43	; 0x2b
 800794a:	f7ff ff8f 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 800794e:	88bb      	ldrh	r3, [r7, #4]
 8007950:	0a1b      	lsrs	r3, r3, #8
 8007952:	b29b      	uxth	r3, r3
 8007954:	b2db      	uxtb	r3, r3
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff ffaa 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 800795c:	88bb      	ldrh	r3, [r7, #4]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff ffa5 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8007966:	883b      	ldrh	r3, [r7, #0]
 8007968:	0a1b      	lsrs	r3, r3, #8
 800796a:	b29b      	uxth	r3, r3
 800796c:	b2db      	uxtb	r3, r3
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff ff9e 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8007974:	883b      	ldrh	r3, [r7, #0]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff ff99 	bl	80078b0 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 800797e:	202c      	movs	r0, #44	; 0x2c
 8007980:	f7ff ff74 	bl	800786c <ILI9341_Write_Command>
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	bd90      	pop	{r4, r7, pc}

0800798c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8007990:	4b0c      	ldr	r3, [pc, #48]	; (80079c4 <ILI9341_Reset+0x38>)
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	4a0b      	ldr	r2, [pc, #44]	; (80079c4 <ILI9341_Reset+0x38>)
 8007996:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800799a:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800799c:	20c8      	movs	r0, #200	; 0xc8
 800799e:	f7fa faed 	bl	8001f7c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80079a2:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <ILI9341_Reset+0x38>)
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <ILI9341_Reset+0x38>)
 80079a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ac:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80079ae:	20c8      	movs	r0, #200	; 0xc8
 80079b0:	f7fa fae4 	bl	8001f7c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80079b4:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <ILI9341_Reset+0x38>)
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	4a02      	ldr	r2, [pc, #8]	; (80079c4 <ILI9341_Reset+0x38>)
 80079ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079be:	6153      	str	r3, [r2, #20]
}
 80079c0:	bf00      	nop
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	48000400 	.word	0x48000400

080079c8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 80079d6:	2036      	movs	r0, #54	; 0x36
 80079d8:	f7ff ff48 	bl	800786c <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d836      	bhi.n	8007a50 <ILI9341_Set_Rotation+0x88>
 80079e2:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <ILI9341_Set_Rotation+0x20>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	080079f9 	.word	0x080079f9
 80079ec:	08007a0f 	.word	0x08007a0f
 80079f0:	08007a25 	.word	0x08007a25
 80079f4:	08007a3b 	.word	0x08007a3b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80079f8:	2048      	movs	r0, #72	; 0x48
 80079fa:	f7ff ff59 	bl	80078b0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80079fe:	4b17      	ldr	r3, [pc, #92]	; (8007a5c <ILI9341_Set_Rotation+0x94>)
 8007a00:	22f0      	movs	r2, #240	; 0xf0
 8007a02:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007a04:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <ILI9341_Set_Rotation+0x98>)
 8007a06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007a0a:	801a      	strh	r2, [r3, #0]
			break;
 8007a0c:	e021      	b.n	8007a52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007a0e:	2028      	movs	r0, #40	; 0x28
 8007a10:	f7ff ff4e 	bl	80078b0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <ILI9341_Set_Rotation+0x94>)
 8007a16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007a1a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007a1c:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <ILI9341_Set_Rotation+0x98>)
 8007a1e:	22f0      	movs	r2, #240	; 0xf0
 8007a20:	801a      	strh	r2, [r3, #0]
			break;
 8007a22:	e016      	b.n	8007a52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8007a24:	2088      	movs	r0, #136	; 0x88
 8007a26:	f7ff ff43 	bl	80078b0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <ILI9341_Set_Rotation+0x94>)
 8007a2c:	22f0      	movs	r2, #240	; 0xf0
 8007a2e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <ILI9341_Set_Rotation+0x98>)
 8007a32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007a36:	801a      	strh	r2, [r3, #0]
			break;
 8007a38:	e00b      	b.n	8007a52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8007a3a:	20e8      	movs	r0, #232	; 0xe8
 8007a3c:	f7ff ff38 	bl	80078b0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007a40:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <ILI9341_Set_Rotation+0x94>)
 8007a42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007a46:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <ILI9341_Set_Rotation+0x98>)
 8007a4a:	22f0      	movs	r2, #240	; 0xf0
 8007a4c:	801a      	strh	r2, [r3, #0]
			break;
 8007a4e:	e000      	b.n	8007a52 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8007a50:	bf00      	nop
	}
}
 8007a52:	bf00      	nop
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200003de 	.word	0x200003de
 8007a60:	200003dc 	.word	0x200003dc

08007a64 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <ILI9341_Enable+0x1c>)
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	4a04      	ldr	r2, [pc, #16]	; (8007a80 <ILI9341_Enable+0x1c>)
 8007a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a72:	6153      	str	r3, [r2, #20]
}
 8007a74:	bf00      	nop
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	48000400 	.word	0x48000400

08007a84 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8007a88:	f7ff ffec 	bl	8007a64 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8007a8c:	f7ff feca 	bl	8007824 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8007a90:	f7ff ff7c 	bl	800798c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8007a94:	2001      	movs	r0, #1
 8007a96:	f7ff fee9 	bl	800786c <ILI9341_Write_Command>
	HAL_Delay(2000);
 8007a9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007a9e:	f7fa fa6d 	bl	8001f7c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8007aa2:	20cb      	movs	r0, #203	; 0xcb
 8007aa4:	f7ff fee2 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8007aa8:	2039      	movs	r0, #57	; 0x39
 8007aaa:	f7ff ff01 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8007aae:	202c      	movs	r0, #44	; 0x2c
 8007ab0:	f7ff fefe 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	f7ff fefb 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8007aba:	2034      	movs	r0, #52	; 0x34
 8007abc:	f7ff fef8 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8007ac0:	2002      	movs	r0, #2
 8007ac2:	f7ff fef5 	bl	80078b0 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8007ac6:	20cf      	movs	r0, #207	; 0xcf
 8007ac8:	f7ff fed0 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007acc:	2000      	movs	r0, #0
 8007ace:	f7ff feef 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007ad2:	20c1      	movs	r0, #193	; 0xc1
 8007ad4:	f7ff feec 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8007ad8:	2030      	movs	r0, #48	; 0x30
 8007ada:	f7ff fee9 	bl	80078b0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8007ade:	20e8      	movs	r0, #232	; 0xe8
 8007ae0:	f7ff fec4 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8007ae4:	2085      	movs	r0, #133	; 0x85
 8007ae6:	f7ff fee3 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007aea:	2000      	movs	r0, #0
 8007aec:	f7ff fee0 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8007af0:	2078      	movs	r0, #120	; 0x78
 8007af2:	f7ff fedd 	bl	80078b0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8007af6:	20ea      	movs	r0, #234	; 0xea
 8007af8:	f7ff feb8 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007afc:	2000      	movs	r0, #0
 8007afe:	f7ff fed7 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007b02:	2000      	movs	r0, #0
 8007b04:	f7ff fed4 	bl	80078b0 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8007b08:	20ed      	movs	r0, #237	; 0xed
 8007b0a:	f7ff feaf 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8007b0e:	2064      	movs	r0, #100	; 0x64
 8007b10:	f7ff fece 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007b14:	2003      	movs	r0, #3
 8007b16:	f7ff fecb 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8007b1a:	2012      	movs	r0, #18
 8007b1c:	f7ff fec8 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8007b20:	2081      	movs	r0, #129	; 0x81
 8007b22:	f7ff fec5 	bl	80078b0 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8007b26:	20f7      	movs	r0, #247	; 0xf7
 8007b28:	f7ff fea0 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8007b2c:	2020      	movs	r0, #32
 8007b2e:	f7ff febf 	bl	80078b0 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8007b32:	20c0      	movs	r0, #192	; 0xc0
 8007b34:	f7ff fe9a 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8007b38:	2023      	movs	r0, #35	; 0x23
 8007b3a:	f7ff feb9 	bl	80078b0 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8007b3e:	20c1      	movs	r0, #193	; 0xc1
 8007b40:	f7ff fe94 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8007b44:	2010      	movs	r0, #16
 8007b46:	f7ff feb3 	bl	80078b0 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8007b4a:	20c5      	movs	r0, #197	; 0xc5
 8007b4c:	f7ff fe8e 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8007b50:	203e      	movs	r0, #62	; 0x3e
 8007b52:	f7ff fead 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8007b56:	2028      	movs	r0, #40	; 0x28
 8007b58:	f7ff feaa 	bl	80078b0 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8007b5c:	20c7      	movs	r0, #199	; 0xc7
 8007b5e:	f7ff fe85 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8007b62:	2086      	movs	r0, #134	; 0x86
 8007b64:	f7ff fea4 	bl	80078b0 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8007b68:	2036      	movs	r0, #54	; 0x36
 8007b6a:	f7ff fe7f 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8007b6e:	2048      	movs	r0, #72	; 0x48
 8007b70:	f7ff fe9e 	bl	80078b0 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8007b74:	203a      	movs	r0, #58	; 0x3a
 8007b76:	f7ff fe79 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8007b7a:	2055      	movs	r0, #85	; 0x55
 8007b7c:	f7ff fe98 	bl	80078b0 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8007b80:	20b1      	movs	r0, #177	; 0xb1
 8007b82:	f7ff fe73 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007b86:	2000      	movs	r0, #0
 8007b88:	f7ff fe92 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8007b8c:	2018      	movs	r0, #24
 8007b8e:	f7ff fe8f 	bl	80078b0 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8007b92:	20b6      	movs	r0, #182	; 0xb6
 8007b94:	f7ff fe6a 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8007b98:	2008      	movs	r0, #8
 8007b9a:	f7ff fe89 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8007b9e:	2082      	movs	r0, #130	; 0x82
 8007ba0:	f7ff fe86 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8007ba4:	2027      	movs	r0, #39	; 0x27
 8007ba6:	f7ff fe83 	bl	80078b0 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8007baa:	20f2      	movs	r0, #242	; 0xf2
 8007bac:	f7ff fe5e 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f7ff fe7d 	bl	80078b0 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8007bb6:	2026      	movs	r0, #38	; 0x26
 8007bb8:	f7ff fe58 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8007bbc:	2001      	movs	r0, #1
 8007bbe:	f7ff fe77 	bl	80078b0 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8007bc2:	20e0      	movs	r0, #224	; 0xe0
 8007bc4:	f7ff fe52 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8007bc8:	200f      	movs	r0, #15
 8007bca:	f7ff fe71 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007bce:	2031      	movs	r0, #49	; 0x31
 8007bd0:	f7ff fe6e 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8007bd4:	202b      	movs	r0, #43	; 0x2b
 8007bd6:	f7ff fe6b 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007bda:	200c      	movs	r0, #12
 8007bdc:	f7ff fe68 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007be0:	200e      	movs	r0, #14
 8007be2:	f7ff fe65 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007be6:	2008      	movs	r0, #8
 8007be8:	f7ff fe62 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8007bec:	204e      	movs	r0, #78	; 0x4e
 8007bee:	f7ff fe5f 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8007bf2:	20f1      	movs	r0, #241	; 0xf1
 8007bf4:	f7ff fe5c 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8007bf8:	2037      	movs	r0, #55	; 0x37
 8007bfa:	f7ff fe59 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007bfe:	2007      	movs	r0, #7
 8007c00:	f7ff fe56 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8007c04:	2010      	movs	r0, #16
 8007c06:	f7ff fe53 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007c0a:	2003      	movs	r0, #3
 8007c0c:	f7ff fe50 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007c10:	200e      	movs	r0, #14
 8007c12:	f7ff fe4d 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8007c16:	2009      	movs	r0, #9
 8007c18:	f7ff fe4a 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f7ff fe47 	bl	80078b0 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8007c22:	20e1      	movs	r0, #225	; 0xe1
 8007c24:	f7ff fe22 	bl	800786c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007c28:	2000      	movs	r0, #0
 8007c2a:	f7ff fe41 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007c2e:	200e      	movs	r0, #14
 8007c30:	f7ff fe3e 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8007c34:	2014      	movs	r0, #20
 8007c36:	f7ff fe3b 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007c3a:	2003      	movs	r0, #3
 8007c3c:	f7ff fe38 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8007c40:	2011      	movs	r0, #17
 8007c42:	f7ff fe35 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007c46:	2007      	movs	r0, #7
 8007c48:	f7ff fe32 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007c4c:	2031      	movs	r0, #49	; 0x31
 8007c4e:	f7ff fe2f 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007c52:	20c1      	movs	r0, #193	; 0xc1
 8007c54:	f7ff fe2c 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8007c58:	2048      	movs	r0, #72	; 0x48
 8007c5a:	f7ff fe29 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007c5e:	2008      	movs	r0, #8
 8007c60:	f7ff fe26 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007c64:	200f      	movs	r0, #15
 8007c66:	f7ff fe23 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007c6a:	200c      	movs	r0, #12
 8007c6c:	f7ff fe20 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007c70:	2031      	movs	r0, #49	; 0x31
 8007c72:	f7ff fe1d 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8007c76:	2036      	movs	r0, #54	; 0x36
 8007c78:	f7ff fe1a 	bl	80078b0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007c7c:	200f      	movs	r0, #15
 8007c7e:	f7ff fe17 	bl	80078b0 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8007c82:	2011      	movs	r0, #17
 8007c84:	f7ff fdf2 	bl	800786c <ILI9341_Write_Command>
	HAL_Delay(240);
 8007c88:	20f0      	movs	r0, #240	; 0xf0
 8007c8a:	f7fa f977 	bl	8001f7c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8007c8e:	2029      	movs	r0, #41	; 0x29
 8007c90:	f7ff fdec 	bl	800786c <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8007c94:	2000      	movs	r0, #0
 8007c96:	f7ff fe97 	bl	80079c8 <ILI9341_Set_Rotation>
}
 8007c9a:	bf00      	nop
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t colour, uint32_t size)
{
 8007ca0:	b5b0      	push	{r4, r5, r7, lr}
 8007ca2:	b08c      	sub	sp, #48	; 0x30
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	6039      	str	r1, [r7, #0]
 8007caa:	80fb      	strh	r3, [r7, #6]
 8007cac:	466b      	mov	r3, sp
 8007cae:	461d      	mov	r5, r3

	//SENDS COLOUR

	uint32_t buffer_size = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
	if((size*2) < BURST_MAX_SIZE)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007cbc:	d202      	bcs.n	8007cc4 <ILI9341_Draw_colour_Burst+0x24>
	{
		buffer_size = size;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007cc2:	e002      	b.n	8007cca <ILI9341_Draw_colour_Burst+0x2a>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8007cc4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
	}

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007cca:	4b42      	ldr	r3, [pc, #264]	; (8007dd4 <ILI9341_Draw_colour_Burst+0x134>)
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	4a41      	ldr	r2, [pc, #260]	; (8007dd4 <ILI9341_Draw_colour_Burst+0x134>)
 8007cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007cd6:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <ILI9341_Draw_colour_Burst+0x134>)
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	4a3e      	ldr	r2, [pc, #248]	; (8007dd4 <ILI9341_Draw_colour_Burst+0x134>)
 8007cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ce0:	6153      	str	r3, [r2, #20]

	unsigned char chifted = 	colour>>8;;
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	0a1b      	lsrs	r3, r3, #8
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	76fb      	strb	r3, [r7, #27]
	unsigned char burst_buffer[buffer_size];
 8007cea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cec:	4603      	mov	r3, r0
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	f04f 0400 	mov.w	r4, #0
 8007d00:	00d4      	lsls	r4, r2, #3
 8007d02:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007d06:	00cb      	lsls	r3, r1, #3
 8007d08:	4601      	mov	r1, r0
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	f04f 0400 	mov.w	r4, #0
 8007d16:	00d4      	lsls	r4, r2, #3
 8007d18:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007d1c:	00cb      	lsls	r3, r1, #3
 8007d1e:	1dc3      	adds	r3, r0, #7
 8007d20:	08db      	lsrs	r3, r3, #3
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	ebad 0d03 	sub.w	sp, sp, r3
 8007d28:	466b      	mov	r3, sp
 8007d2a:	3300      	adds	r3, #0
 8007d2c:	613b      	str	r3, [r7, #16]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d32:	e00d      	b.n	8007d50 <ILI9341_Draw_colour_Burst+0xb0>
	{
			burst_buffer[j] = 	chifted;
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	4413      	add	r3, r2
 8007d3a:	7efa      	ldrb	r2, [r7, #27]
 8007d3c:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	3301      	adds	r3, #1
 8007d42:	88fa      	ldrh	r2, [r7, #6]
 8007d44:	b2d1      	uxtb	r1, r2
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	3302      	adds	r3, #2
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d3ed      	bcc.n	8007d34 <ILI9341_Draw_colour_Burst+0x94>
	}
	
	uint32_t Sending_size = size*2;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Remainder_from_block = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	623b      	str	r3, [r7, #32]
	if(size > 0)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00d      	beq.n	8007d88 <ILI9341_Draw_colour_Burst+0xe8>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d74:	62fb      	str	r3, [r7, #44]	; 0x2c
			Remainder_from_block 	= Sending_size%buffer_size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d80:	fb01 f202 	mul.w	r2, r1, r2
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	623b      	str	r3, [r7, #32]
	}


	if(Sending_in_Block != 0)
 8007d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d010      	beq.n	8007db0 <ILI9341_Draw_colour_Burst+0x110>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
 8007d92:	e009      	b.n	8007da8 <ILI9341_Draw_colour_Burst+0x108>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 10);
 8007d94:	6939      	ldr	r1, [r7, #16]
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	230a      	movs	r3, #10
 8007d9c:	480e      	ldr	r0, [pc, #56]	; (8007dd8 <ILI9341_Draw_colour_Burst+0x138>)
 8007d9e:	f7fd fdbf 	bl	8005920 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	3301      	adds	r3, #1
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d3f1      	bcc.n	8007d94 <ILI9341_Draw_colour_Burst+0xf4>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 8007db0:	6939      	ldr	r1, [r7, #16]
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	230a      	movs	r3, #10
 8007db8:	4807      	ldr	r0, [pc, #28]	; (8007dd8 <ILI9341_Draw_colour_Burst+0x138>)
 8007dba:	f7fd fdb1 	bl	8005920 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007dbe:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <ILI9341_Draw_colour_Burst+0x134>)
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	4a04      	ldr	r2, [pc, #16]	; (8007dd4 <ILI9341_Draw_colour_Burst+0x134>)
 8007dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc8:	6153      	str	r3, [r2, #20]
 8007dca:	46ad      	mov	sp, r5


}
 8007dcc:	bf00      	nop
 8007dce:	3730      	adds	r7, #48	; 0x30
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8007dd4:	48000400 	.word	0x48000400
 8007dd8:	2000065c 	.word	0x2000065c

08007ddc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8007de6:	4b0e      	ldr	r3, [pc, #56]	; (8007e20 <ILI9341_Fill_Screen+0x44>)
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <ILI9341_Fill_Screen+0x48>)
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2100      	movs	r1, #0
 8007df4:	2000      	movs	r0, #0
 8007df6:	f7ff fd7d 	bl	80078f4 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(colour, LCD_WIDTH*LCD_HEIGHT);
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <ILI9341_Fill_Screen+0x44>)
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <ILI9341_Fill_Screen+0x48>)
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	fb03 f302 	mul.w	r3, r3, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff ff44 	bl	8007ca0 <ILI9341_Draw_colour_Burst>
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	200003de 	.word	0x200003de
 8007e24:	200003dc 	.word	0x200003dc

08007e28 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	80fb      	strh	r3, [r7, #6]
 8007e32:	460b      	mov	r3, r1
 8007e34:	80bb      	strh	r3, [r7, #4]
 8007e36:	4613      	mov	r3, r2
 8007e38:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8007e3a:	4b64      	ldr	r3, [pc, #400]	; (8007fcc <ILI9341_Draw_Pixel+0x1a4>)
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	88fa      	ldrh	r2, [r7, #6]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	f080 80be 	bcs.w	8007fc4 <ILI9341_Draw_Pixel+0x19c>
 8007e48:	4b61      	ldr	r3, [pc, #388]	; (8007fd0 <ILI9341_Draw_Pixel+0x1a8>)
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	88ba      	ldrh	r2, [r7, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	f080 80b7 	bcs.w	8007fc4 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007e56:	4b5f      	ldr	r3, [pc, #380]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	4a5e      	ldr	r2, [pc, #376]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e60:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007e62:	4b5c      	ldr	r3, [pc, #368]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	4a5b      	ldr	r2, [pc, #364]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e6c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8007e6e:	202a      	movs	r0, #42	; 0x2a
 8007e70:	f7ff fce8 	bl	8007844 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007e74:	4b57      	ldr	r3, [pc, #348]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	4a56      	ldr	r2, [pc, #344]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e7e:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007e80:	4b54      	ldr	r3, [pc, #336]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	4a53      	ldr	r2, [pc, #332]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8a:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007e8c:	4b51      	ldr	r3, [pc, #324]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	4a50      	ldr	r2, [pc, #320]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e96:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	753b      	strb	r3, [r7, #20]
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	757b      	strb	r3, [r7, #21]
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	121b      	asrs	r3, r3, #8
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	75bb      	strb	r3, [r7, #22]
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8007ebc:	f107 0114 	add.w	r1, r7, #20
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	2204      	movs	r2, #4
 8007ec4:	4844      	ldr	r0, [pc, #272]	; (8007fd8 <ILI9341_Draw_Pixel+0x1b0>)
 8007ec6:	f7fd fd2b 	bl	8005920 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007eca:	4b42      	ldr	r3, [pc, #264]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	4a41      	ldr	r2, [pc, #260]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007ed6:	4b3f      	ldr	r3, [pc, #252]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4a3e      	ldr	r2, [pc, #248]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007ee2:	4b3c      	ldr	r3, [pc, #240]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	4a3b      	ldr	r2, [pc, #236]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eec:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 8007eee:	202b      	movs	r0, #43	; 0x2b
 8007ef0:	f7ff fca8 	bl	8007844 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007ef4:	4b37      	ldr	r3, [pc, #220]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	4a36      	ldr	r2, [pc, #216]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007efe:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007f00:	4b34      	ldr	r3, [pc, #208]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	4a33      	ldr	r2, [pc, #204]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0a:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007f0c:	4b31      	ldr	r3, [pc, #196]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	4a30      	ldr	r2, [pc, #192]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f16:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8007f18:	88bb      	ldrh	r3, [r7, #4]
 8007f1a:	0a1b      	lsrs	r3, r3, #8
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	743b      	strb	r3, [r7, #16]
 8007f22:	88bb      	ldrh	r3, [r7, #4]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	747b      	strb	r3, [r7, #17]
 8007f28:	88bb      	ldrh	r3, [r7, #4]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	121b      	asrs	r3, r3, #8
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	74bb      	strb	r3, [r7, #18]
 8007f32:	88bb      	ldrh	r3, [r7, #4]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	3301      	adds	r3, #1
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8007f3c:	f107 0110 	add.w	r1, r7, #16
 8007f40:	2301      	movs	r3, #1
 8007f42:	2204      	movs	r2, #4
 8007f44:	4824      	ldr	r0, [pc, #144]	; (8007fd8 <ILI9341_Draw_Pixel+0x1b0>)
 8007f46:	f7fd fceb 	bl	8005920 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007f4a:	4b22      	ldr	r3, [pc, #136]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	4a21      	ldr	r2, [pc, #132]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f54:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007f56:	4b1f      	ldr	r3, [pc, #124]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	4a1e      	ldr	r2, [pc, #120]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f60:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	4a1b      	ldr	r2, [pc, #108]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f6c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8007f6e:	202c      	movs	r0, #44	; 0x2c
 8007f70:	f7ff fc68 	bl	8007844 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007f74:	4b17      	ldr	r3, [pc, #92]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	4a16      	ldr	r2, [pc, #88]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f7e:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007f80:	4b14      	ldr	r3, [pc, #80]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	4a13      	ldr	r2, [pc, #76]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8a:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007f8c:	4b11      	ldr	r3, [pc, #68]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	4a10      	ldr	r2, [pc, #64]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f96:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8007f98:	887b      	ldrh	r3, [r7, #2]
 8007f9a:	0a1b      	lsrs	r3, r3, #8
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	733b      	strb	r3, [r7, #12]
 8007fa2:	887b      	ldrh	r3, [r7, #2]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8007fa8:	f107 010c 	add.w	r1, r7, #12
 8007fac:	2301      	movs	r3, #1
 8007fae:	2202      	movs	r2, #2
 8007fb0:	4809      	ldr	r0, [pc, #36]	; (8007fd8 <ILI9341_Draw_Pixel+0x1b0>)
 8007fb2:	f7fd fcb5 	bl	8005920 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007fb6:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	4a06      	ldr	r2, [pc, #24]	; (8007fd4 <ILI9341_Draw_Pixel+0x1ac>)
 8007fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc0:	6153      	str	r3, [r2, #20]
 8007fc2:	e000      	b.n	8007fc6 <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8007fc4:	bf00      	nop

	
}
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	200003de 	.word	0x200003de
 8007fd0:	200003dc 	.word	0x200003dc
 8007fd4:	48000400 	.word	0x48000400
 8007fd8:	2000065c 	.word	0x2000065c

08007fdc <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t width, uint16_t height, uint16_t colour)
{
 8007fdc:	b590      	push	{r4, r7, lr}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4623      	mov	r3, r4
 8007fec:	80fb      	strh	r3, [r7, #6]
 8007fee:	4603      	mov	r3, r0
 8007ff0:	80bb      	strh	r3, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	807b      	strh	r3, [r7, #2]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007ffa:	4b37      	ldr	r3, [pc, #220]	; (80080d8 <ILI9341_Draw_Rectangle+0xfc>)
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	429a      	cmp	r2, r3
 8008004:	d264      	bcs.n	80080d0 <ILI9341_Draw_Rectangle+0xf4>
 8008006:	4b35      	ldr	r3, [pc, #212]	; (80080dc <ILI9341_Draw_Rectangle+0x100>)
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	88ba      	ldrh	r2, [r7, #4]
 800800e:	429a      	cmp	r2, r3
 8008010:	d25e      	bcs.n	80080d0 <ILI9341_Draw_Rectangle+0xf4>
	if((X+width-1)>=LCD_WIDTH)
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	887b      	ldrh	r3, [r7, #2]
 8008016:	4413      	add	r3, r2
 8008018:	3b01      	subs	r3, #1
 800801a:	4a2f      	ldr	r2, [pc, #188]	; (80080d8 <ILI9341_Draw_Rectangle+0xfc>)
 800801c:	8812      	ldrh	r2, [r2, #0]
 800801e:	b292      	uxth	r2, r2
 8008020:	4293      	cmp	r3, r2
 8008022:	db05      	blt.n	8008030 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-X;
 8008024:	4b2c      	ldr	r3, [pc, #176]	; (80080d8 <ILI9341_Draw_Rectangle+0xfc>)
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b29a      	uxth	r2, r3
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	807b      	strh	r3, [r7, #2]
		}
	if((Y+height-1)>=LCD_HEIGHT)
 8008030:	88ba      	ldrh	r2, [r7, #4]
 8008032:	883b      	ldrh	r3, [r7, #0]
 8008034:	4413      	add	r3, r2
 8008036:	3b01      	subs	r3, #1
 8008038:	4a28      	ldr	r2, [pc, #160]	; (80080dc <ILI9341_Draw_Rectangle+0x100>)
 800803a:	8812      	ldrh	r2, [r2, #0]
 800803c:	b292      	uxth	r2, r2
 800803e:	4293      	cmp	r3, r2
 8008040:	db05      	blt.n	800804e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-Y;
 8008042:	4b26      	ldr	r3, [pc, #152]	; (80080dc <ILI9341_Draw_Rectangle+0x100>)
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29a      	uxth	r2, r3
 8008048:	88bb      	ldrh	r3, [r7, #4]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(X, Y, X+width-1, Y+height-1);
 800804e:	88fa      	ldrh	r2, [r7, #6]
 8008050:	887b      	ldrh	r3, [r7, #2]
 8008052:	4413      	add	r3, r2
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	b29c      	uxth	r4, r3
 800805a:	88ba      	ldrh	r2, [r7, #4]
 800805c:	883b      	ldrh	r3, [r7, #0]
 800805e:	4413      	add	r3, r2
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29b      	uxth	r3, r3
 8008066:	88b9      	ldrh	r1, [r7, #4]
 8008068:	88f8      	ldrh	r0, [r7, #6]
 800806a:	4622      	mov	r2, r4
 800806c:	f7ff fc42 	bl	80078f4 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8008070:	883a      	ldrh	r2, [r7, #0]
 8008072:	887b      	ldrh	r3, [r7, #2]
 8008074:	fb12 f303 	smulbb	r3, r2, r3
 8008078:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800807e:	89fb      	ldrh	r3, [r7, #14]
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b00      	cmp	r3, #0
 8008086:	d009      	beq.n	800809c <ILI9341_Draw_Rectangle+0xc0>
 8008088:	89fb      	ldrh	r3, [r7, #14]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d906      	bls.n	800809c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800808e:	2301      	movs	r3, #1
 8008090:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8008092:	89fb      	ldrh	r3, [r7, #14]
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	b29b      	uxth	r3, r3
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(colour, size);
 800809c:	89fa      	ldrh	r2, [r7, #14]
 800809e:	8c3b      	ldrh	r3, [r7, #32]
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fdfc 	bl	8007ca0 <ILI9341_Draw_colour_Burst>

	// add the truncated pixel now
	if(truncated)
 80080a8:	7b7b      	ldrb	r3, [r7, #13]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d011      	beq.n	80080d2 <ILI9341_Draw_Rectangle+0xf6>
		ILI9341_Draw_Pixel(X+width-1, Y+height-1, colour);
 80080ae:	88fa      	ldrh	r2, [r7, #6]
 80080b0:	887b      	ldrh	r3, [r7, #2]
 80080b2:	4413      	add	r3, r2
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b298      	uxth	r0, r3
 80080ba:	88ba      	ldrh	r2, [r7, #4]
 80080bc:	883b      	ldrh	r3, [r7, #0]
 80080be:	4413      	add	r3, r2
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	8c3a      	ldrh	r2, [r7, #32]
 80080c8:	4619      	mov	r1, r3
 80080ca:	f7ff fead 	bl	8007e28 <ILI9341_Draw_Pixel>
 80080ce:	e000      	b.n	80080d2 <ILI9341_Draw_Rectangle+0xf6>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80080d0:	bf00      	nop

}
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd90      	pop	{r4, r7, pc}
 80080d8:	200003de 	.word	0x200003de
 80080dc:	200003dc 	.word	0x200003dc

080080e0 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t width, uint16_t colour)
{
 80080e0:	b590      	push	{r4, r7, lr}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4604      	mov	r4, r0
 80080e8:	4608      	mov	r0, r1
 80080ea:	4611      	mov	r1, r2
 80080ec:	461a      	mov	r2, r3
 80080ee:	4623      	mov	r3, r4
 80080f0:	80fb      	strh	r3, [r7, #6]
 80080f2:	4603      	mov	r3, r0
 80080f4:	80bb      	strh	r3, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	807b      	strh	r3, [r7, #2]
 80080fa:	4613      	mov	r3, r2
 80080fc:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80080fe:	4b18      	ldr	r3, [pc, #96]	; (8008160 <ILI9341_Draw_Horizontal_Line+0x80>)
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	88fa      	ldrh	r2, [r7, #6]
 8008106:	429a      	cmp	r2, r3
 8008108:	d226      	bcs.n	8008158 <ILI9341_Draw_Horizontal_Line+0x78>
 800810a:	4b16      	ldr	r3, [pc, #88]	; (8008164 <ILI9341_Draw_Horizontal_Line+0x84>)
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	88ba      	ldrh	r2, [r7, #4]
 8008112:	429a      	cmp	r2, r3
 8008114:	d220      	bcs.n	8008158 <ILI9341_Draw_Horizontal_Line+0x78>
	if((X+width-1)>=LCD_WIDTH)
 8008116:	88fa      	ldrh	r2, [r7, #6]
 8008118:	887b      	ldrh	r3, [r7, #2]
 800811a:	4413      	add	r3, r2
 800811c:	3b01      	subs	r3, #1
 800811e:	4a10      	ldr	r2, [pc, #64]	; (8008160 <ILI9341_Draw_Horizontal_Line+0x80>)
 8008120:	8812      	ldrh	r2, [r2, #0]
 8008122:	b292      	uxth	r2, r2
 8008124:	4293      	cmp	r3, r2
 8008126:	db05      	blt.n	8008134 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width=LCD_WIDTH-X;
 8008128:	4b0d      	ldr	r3, [pc, #52]	; (8008160 <ILI9341_Draw_Horizontal_Line+0x80>)
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29a      	uxth	r2, r3
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(X, Y, X+width-1, Y);
 8008134:	88fa      	ldrh	r2, [r7, #6]
 8008136:	887b      	ldrh	r3, [r7, #2]
 8008138:	4413      	add	r3, r2
 800813a:	b29b      	uxth	r3, r3
 800813c:	3b01      	subs	r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	88bb      	ldrh	r3, [r7, #4]
 8008142:	88b9      	ldrh	r1, [r7, #4]
 8008144:	88f8      	ldrh	r0, [r7, #6]
 8008146:	f7ff fbd5 	bl	80078f4 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(colour, width);
 800814a:	887a      	ldrh	r2, [r7, #2]
 800814c:	883b      	ldrh	r3, [r7, #0]
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff fda5 	bl	8007ca0 <ILI9341_Draw_colour_Burst>
 8008156:	e000      	b.n	800815a <ILI9341_Draw_Horizontal_Line+0x7a>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8008158:	bf00      	nop
}
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	bd90      	pop	{r4, r7, pc}
 8008160:	200003de 	.word	0x200003de
 8008164:	200003dc 	.word	0x200003dc

08008168 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t height, uint16_t colour)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	4611      	mov	r1, r2
 8008174:	461a      	mov	r2, r3
 8008176:	4623      	mov	r3, r4
 8008178:	80fb      	strh	r3, [r7, #6]
 800817a:	4603      	mov	r3, r0
 800817c:	80bb      	strh	r3, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	807b      	strh	r3, [r7, #2]
 8008182:	4613      	mov	r3, r2
 8008184:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8008186:	4b18      	ldr	r3, [pc, #96]	; (80081e8 <ILI9341_Draw_Vertical_Line+0x80>)
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	429a      	cmp	r2, r3
 8008190:	d226      	bcs.n	80081e0 <ILI9341_Draw_Vertical_Line+0x78>
 8008192:	4b16      	ldr	r3, [pc, #88]	; (80081ec <ILI9341_Draw_Vertical_Line+0x84>)
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	88ba      	ldrh	r2, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d220      	bcs.n	80081e0 <ILI9341_Draw_Vertical_Line+0x78>
	if((Y+height-1)>=LCD_HEIGHT)
 800819e:	88ba      	ldrh	r2, [r7, #4]
 80081a0:	887b      	ldrh	r3, [r7, #2]
 80081a2:	4413      	add	r3, r2
 80081a4:	3b01      	subs	r3, #1
 80081a6:	4a11      	ldr	r2, [pc, #68]	; (80081ec <ILI9341_Draw_Vertical_Line+0x84>)
 80081a8:	8812      	ldrh	r2, [r2, #0]
 80081aa:	b292      	uxth	r2, r2
 80081ac:	4293      	cmp	r3, r2
 80081ae:	db05      	blt.n	80081bc <ILI9341_Draw_Vertical_Line+0x54>
		{
			height=LCD_HEIGHT-Y;
 80081b0:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <ILI9341_Draw_Vertical_Line+0x84>)
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	88bb      	ldrh	r3, [r7, #4]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(X, Y, X, Y+height-1);
 80081bc:	88ba      	ldrh	r2, [r7, #4]
 80081be:	887b      	ldrh	r3, [r7, #2]
 80081c0:	4413      	add	r3, r2
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	88fa      	ldrh	r2, [r7, #6]
 80081ca:	88b9      	ldrh	r1, [r7, #4]
 80081cc:	88f8      	ldrh	r0, [r7, #6]
 80081ce:	f7ff fb91 	bl	80078f4 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(colour, height);
 80081d2:	887a      	ldrh	r2, [r7, #2]
 80081d4:	883b      	ldrh	r3, [r7, #0]
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fd61 	bl	8007ca0 <ILI9341_Draw_colour_Burst>
 80081de:	e000      	b.n	80081e2 <ILI9341_Draw_Vertical_Line+0x7a>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80081e0:	bf00      	nop
}
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd90      	pop	{r4, r7, pc}
 80081e8:	200003de 	.word	0x200003de
 80081ec:	200003dc 	.word	0x200003dc

080081f0 <__errno>:
 80081f0:	4b01      	ldr	r3, [pc, #4]	; (80081f8 <__errno+0x8>)
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	200003e0 	.word	0x200003e0

080081fc <__libc_init_array>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	4e0d      	ldr	r6, [pc, #52]	; (8008234 <__libc_init_array+0x38>)
 8008200:	4c0d      	ldr	r4, [pc, #52]	; (8008238 <__libc_init_array+0x3c>)
 8008202:	1ba4      	subs	r4, r4, r6
 8008204:	10a4      	asrs	r4, r4, #2
 8008206:	2500      	movs	r5, #0
 8008208:	42a5      	cmp	r5, r4
 800820a:	d109      	bne.n	8008220 <__libc_init_array+0x24>
 800820c:	4e0b      	ldr	r6, [pc, #44]	; (800823c <__libc_init_array+0x40>)
 800820e:	4c0c      	ldr	r4, [pc, #48]	; (8008240 <__libc_init_array+0x44>)
 8008210:	f000 ff68 	bl	80090e4 <_init>
 8008214:	1ba4      	subs	r4, r4, r6
 8008216:	10a4      	asrs	r4, r4, #2
 8008218:	2500      	movs	r5, #0
 800821a:	42a5      	cmp	r5, r4
 800821c:	d105      	bne.n	800822a <__libc_init_array+0x2e>
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008224:	4798      	blx	r3
 8008226:	3501      	adds	r5, #1
 8008228:	e7ee      	b.n	8008208 <__libc_init_array+0xc>
 800822a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800822e:	4798      	blx	r3
 8008230:	3501      	adds	r5, #1
 8008232:	e7f2      	b.n	800821a <__libc_init_array+0x1e>
 8008234:	08009474 	.word	0x08009474
 8008238:	08009474 	.word	0x08009474
 800823c:	08009474 	.word	0x08009474
 8008240:	08009478 	.word	0x08009478

08008244 <memset>:
 8008244:	4402      	add	r2, r0
 8008246:	4603      	mov	r3, r0
 8008248:	4293      	cmp	r3, r2
 800824a:	d100      	bne.n	800824e <memset+0xa>
 800824c:	4770      	bx	lr
 800824e:	f803 1b01 	strb.w	r1, [r3], #1
 8008252:	e7f9      	b.n	8008248 <memset+0x4>

08008254 <iprintf>:
 8008254:	b40f      	push	{r0, r1, r2, r3}
 8008256:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <iprintf+0x2c>)
 8008258:	b513      	push	{r0, r1, r4, lr}
 800825a:	681c      	ldr	r4, [r3, #0]
 800825c:	b124      	cbz	r4, 8008268 <iprintf+0x14>
 800825e:	69a3      	ldr	r3, [r4, #24]
 8008260:	b913      	cbnz	r3, 8008268 <iprintf+0x14>
 8008262:	4620      	mov	r0, r4
 8008264:	f000 fa22 	bl	80086ac <__sinit>
 8008268:	ab05      	add	r3, sp, #20
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	68a1      	ldr	r1, [r4, #8]
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fbdb 	bl	8008a2c <_vfiprintf_r>
 8008276:	b002      	add	sp, #8
 8008278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800827c:	b004      	add	sp, #16
 800827e:	4770      	bx	lr
 8008280:	200003e0 	.word	0x200003e0

08008284 <_puts_r>:
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	460e      	mov	r6, r1
 8008288:	4605      	mov	r5, r0
 800828a:	b118      	cbz	r0, 8008294 <_puts_r+0x10>
 800828c:	6983      	ldr	r3, [r0, #24]
 800828e:	b90b      	cbnz	r3, 8008294 <_puts_r+0x10>
 8008290:	f000 fa0c 	bl	80086ac <__sinit>
 8008294:	69ab      	ldr	r3, [r5, #24]
 8008296:	68ac      	ldr	r4, [r5, #8]
 8008298:	b913      	cbnz	r3, 80082a0 <_puts_r+0x1c>
 800829a:	4628      	mov	r0, r5
 800829c:	f000 fa06 	bl	80086ac <__sinit>
 80082a0:	4b23      	ldr	r3, [pc, #140]	; (8008330 <_puts_r+0xac>)
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d117      	bne.n	80082d6 <_puts_r+0x52>
 80082a6:	686c      	ldr	r4, [r5, #4]
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	071b      	lsls	r3, r3, #28
 80082ac:	d51d      	bpl.n	80082ea <_puts_r+0x66>
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	b1db      	cbz	r3, 80082ea <_puts_r+0x66>
 80082b2:	3e01      	subs	r6, #1
 80082b4:	68a3      	ldr	r3, [r4, #8]
 80082b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082ba:	3b01      	subs	r3, #1
 80082bc:	60a3      	str	r3, [r4, #8]
 80082be:	b9e9      	cbnz	r1, 80082fc <_puts_r+0x78>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	da2e      	bge.n	8008322 <_puts_r+0x9e>
 80082c4:	4622      	mov	r2, r4
 80082c6:	210a      	movs	r1, #10
 80082c8:	4628      	mov	r0, r5
 80082ca:	f000 f83f 	bl	800834c <__swbuf_r>
 80082ce:	3001      	adds	r0, #1
 80082d0:	d011      	beq.n	80082f6 <_puts_r+0x72>
 80082d2:	200a      	movs	r0, #10
 80082d4:	e011      	b.n	80082fa <_puts_r+0x76>
 80082d6:	4b17      	ldr	r3, [pc, #92]	; (8008334 <_puts_r+0xb0>)
 80082d8:	429c      	cmp	r4, r3
 80082da:	d101      	bne.n	80082e0 <_puts_r+0x5c>
 80082dc:	68ac      	ldr	r4, [r5, #8]
 80082de:	e7e3      	b.n	80082a8 <_puts_r+0x24>
 80082e0:	4b15      	ldr	r3, [pc, #84]	; (8008338 <_puts_r+0xb4>)
 80082e2:	429c      	cmp	r4, r3
 80082e4:	bf08      	it	eq
 80082e6:	68ec      	ldreq	r4, [r5, #12]
 80082e8:	e7de      	b.n	80082a8 <_puts_r+0x24>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4628      	mov	r0, r5
 80082ee:	f000 f87f 	bl	80083f0 <__swsetup_r>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d0dd      	beq.n	80082b2 <_puts_r+0x2e>
 80082f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	da04      	bge.n	800830a <_puts_r+0x86>
 8008300:	69a2      	ldr	r2, [r4, #24]
 8008302:	429a      	cmp	r2, r3
 8008304:	dc06      	bgt.n	8008314 <_puts_r+0x90>
 8008306:	290a      	cmp	r1, #10
 8008308:	d004      	beq.n	8008314 <_puts_r+0x90>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	6022      	str	r2, [r4, #0]
 8008310:	7019      	strb	r1, [r3, #0]
 8008312:	e7cf      	b.n	80082b4 <_puts_r+0x30>
 8008314:	4622      	mov	r2, r4
 8008316:	4628      	mov	r0, r5
 8008318:	f000 f818 	bl	800834c <__swbuf_r>
 800831c:	3001      	adds	r0, #1
 800831e:	d1c9      	bne.n	80082b4 <_puts_r+0x30>
 8008320:	e7e9      	b.n	80082f6 <_puts_r+0x72>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	200a      	movs	r0, #10
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	6022      	str	r2, [r4, #0]
 800832a:	7018      	strb	r0, [r3, #0]
 800832c:	e7e5      	b.n	80082fa <_puts_r+0x76>
 800832e:	bf00      	nop
 8008330:	08009400 	.word	0x08009400
 8008334:	08009420 	.word	0x08009420
 8008338:	080093e0 	.word	0x080093e0

0800833c <puts>:
 800833c:	4b02      	ldr	r3, [pc, #8]	; (8008348 <puts+0xc>)
 800833e:	4601      	mov	r1, r0
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	f7ff bf9f 	b.w	8008284 <_puts_r>
 8008346:	bf00      	nop
 8008348:	200003e0 	.word	0x200003e0

0800834c <__swbuf_r>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	460e      	mov	r6, r1
 8008350:	4614      	mov	r4, r2
 8008352:	4605      	mov	r5, r0
 8008354:	b118      	cbz	r0, 800835e <__swbuf_r+0x12>
 8008356:	6983      	ldr	r3, [r0, #24]
 8008358:	b90b      	cbnz	r3, 800835e <__swbuf_r+0x12>
 800835a:	f000 f9a7 	bl	80086ac <__sinit>
 800835e:	4b21      	ldr	r3, [pc, #132]	; (80083e4 <__swbuf_r+0x98>)
 8008360:	429c      	cmp	r4, r3
 8008362:	d12a      	bne.n	80083ba <__swbuf_r+0x6e>
 8008364:	686c      	ldr	r4, [r5, #4]
 8008366:	69a3      	ldr	r3, [r4, #24]
 8008368:	60a3      	str	r3, [r4, #8]
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	071a      	lsls	r2, r3, #28
 800836e:	d52e      	bpl.n	80083ce <__swbuf_r+0x82>
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	b363      	cbz	r3, 80083ce <__swbuf_r+0x82>
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	6820      	ldr	r0, [r4, #0]
 8008378:	1ac0      	subs	r0, r0, r3
 800837a:	6963      	ldr	r3, [r4, #20]
 800837c:	b2f6      	uxtb	r6, r6
 800837e:	4283      	cmp	r3, r0
 8008380:	4637      	mov	r7, r6
 8008382:	dc04      	bgt.n	800838e <__swbuf_r+0x42>
 8008384:	4621      	mov	r1, r4
 8008386:	4628      	mov	r0, r5
 8008388:	f000 f926 	bl	80085d8 <_fflush_r>
 800838c:	bb28      	cbnz	r0, 80083da <__swbuf_r+0x8e>
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	3b01      	subs	r3, #1
 8008392:	60a3      	str	r3, [r4, #8]
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	6022      	str	r2, [r4, #0]
 800839a:	701e      	strb	r6, [r3, #0]
 800839c:	6963      	ldr	r3, [r4, #20]
 800839e:	3001      	adds	r0, #1
 80083a0:	4283      	cmp	r3, r0
 80083a2:	d004      	beq.n	80083ae <__swbuf_r+0x62>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	07db      	lsls	r3, r3, #31
 80083a8:	d519      	bpl.n	80083de <__swbuf_r+0x92>
 80083aa:	2e0a      	cmp	r6, #10
 80083ac:	d117      	bne.n	80083de <__swbuf_r+0x92>
 80083ae:	4621      	mov	r1, r4
 80083b0:	4628      	mov	r0, r5
 80083b2:	f000 f911 	bl	80085d8 <_fflush_r>
 80083b6:	b190      	cbz	r0, 80083de <__swbuf_r+0x92>
 80083b8:	e00f      	b.n	80083da <__swbuf_r+0x8e>
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <__swbuf_r+0x9c>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	d101      	bne.n	80083c4 <__swbuf_r+0x78>
 80083c0:	68ac      	ldr	r4, [r5, #8]
 80083c2:	e7d0      	b.n	8008366 <__swbuf_r+0x1a>
 80083c4:	4b09      	ldr	r3, [pc, #36]	; (80083ec <__swbuf_r+0xa0>)
 80083c6:	429c      	cmp	r4, r3
 80083c8:	bf08      	it	eq
 80083ca:	68ec      	ldreq	r4, [r5, #12]
 80083cc:	e7cb      	b.n	8008366 <__swbuf_r+0x1a>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 f80d 	bl	80083f0 <__swsetup_r>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d0cc      	beq.n	8008374 <__swbuf_r+0x28>
 80083da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80083de:	4638      	mov	r0, r7
 80083e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e2:	bf00      	nop
 80083e4:	08009400 	.word	0x08009400
 80083e8:	08009420 	.word	0x08009420
 80083ec:	080093e0 	.word	0x080093e0

080083f0 <__swsetup_r>:
 80083f0:	4b32      	ldr	r3, [pc, #200]	; (80084bc <__swsetup_r+0xcc>)
 80083f2:	b570      	push	{r4, r5, r6, lr}
 80083f4:	681d      	ldr	r5, [r3, #0]
 80083f6:	4606      	mov	r6, r0
 80083f8:	460c      	mov	r4, r1
 80083fa:	b125      	cbz	r5, 8008406 <__swsetup_r+0x16>
 80083fc:	69ab      	ldr	r3, [r5, #24]
 80083fe:	b913      	cbnz	r3, 8008406 <__swsetup_r+0x16>
 8008400:	4628      	mov	r0, r5
 8008402:	f000 f953 	bl	80086ac <__sinit>
 8008406:	4b2e      	ldr	r3, [pc, #184]	; (80084c0 <__swsetup_r+0xd0>)
 8008408:	429c      	cmp	r4, r3
 800840a:	d10f      	bne.n	800842c <__swsetup_r+0x3c>
 800840c:	686c      	ldr	r4, [r5, #4]
 800840e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008412:	b29a      	uxth	r2, r3
 8008414:	0715      	lsls	r5, r2, #28
 8008416:	d42c      	bmi.n	8008472 <__swsetup_r+0x82>
 8008418:	06d0      	lsls	r0, r2, #27
 800841a:	d411      	bmi.n	8008440 <__swsetup_r+0x50>
 800841c:	2209      	movs	r2, #9
 800841e:	6032      	str	r2, [r6, #0]
 8008420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800842a:	e03e      	b.n	80084aa <__swsetup_r+0xba>
 800842c:	4b25      	ldr	r3, [pc, #148]	; (80084c4 <__swsetup_r+0xd4>)
 800842e:	429c      	cmp	r4, r3
 8008430:	d101      	bne.n	8008436 <__swsetup_r+0x46>
 8008432:	68ac      	ldr	r4, [r5, #8]
 8008434:	e7eb      	b.n	800840e <__swsetup_r+0x1e>
 8008436:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <__swsetup_r+0xd8>)
 8008438:	429c      	cmp	r4, r3
 800843a:	bf08      	it	eq
 800843c:	68ec      	ldreq	r4, [r5, #12]
 800843e:	e7e6      	b.n	800840e <__swsetup_r+0x1e>
 8008440:	0751      	lsls	r1, r2, #29
 8008442:	d512      	bpl.n	800846a <__swsetup_r+0x7a>
 8008444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008446:	b141      	cbz	r1, 800845a <__swsetup_r+0x6a>
 8008448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800844c:	4299      	cmp	r1, r3
 800844e:	d002      	beq.n	8008456 <__swsetup_r+0x66>
 8008450:	4630      	mov	r0, r6
 8008452:	f000 fa19 	bl	8008888 <_free_r>
 8008456:	2300      	movs	r3, #0
 8008458:	6363      	str	r3, [r4, #52]	; 0x34
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	2300      	movs	r3, #0
 8008464:	6063      	str	r3, [r4, #4]
 8008466:	6923      	ldr	r3, [r4, #16]
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	f043 0308 	orr.w	r3, r3, #8
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	b94b      	cbnz	r3, 800848a <__swsetup_r+0x9a>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800847c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008480:	d003      	beq.n	800848a <__swsetup_r+0x9a>
 8008482:	4621      	mov	r1, r4
 8008484:	4630      	mov	r0, r6
 8008486:	f000 f9bf 	bl	8008808 <__smakebuf_r>
 800848a:	89a2      	ldrh	r2, [r4, #12]
 800848c:	f012 0301 	ands.w	r3, r2, #1
 8008490:	d00c      	beq.n	80084ac <__swsetup_r+0xbc>
 8008492:	2300      	movs	r3, #0
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	6963      	ldr	r3, [r4, #20]
 8008498:	425b      	negs	r3, r3
 800849a:	61a3      	str	r3, [r4, #24]
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	b953      	cbnz	r3, 80084b6 <__swsetup_r+0xc6>
 80084a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80084a8:	d1ba      	bne.n	8008420 <__swsetup_r+0x30>
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	0792      	lsls	r2, r2, #30
 80084ae:	bf58      	it	pl
 80084b0:	6963      	ldrpl	r3, [r4, #20]
 80084b2:	60a3      	str	r3, [r4, #8]
 80084b4:	e7f2      	b.n	800849c <__swsetup_r+0xac>
 80084b6:	2000      	movs	r0, #0
 80084b8:	e7f7      	b.n	80084aa <__swsetup_r+0xba>
 80084ba:	bf00      	nop
 80084bc:	200003e0 	.word	0x200003e0
 80084c0:	08009400 	.word	0x08009400
 80084c4:	08009420 	.word	0x08009420
 80084c8:	080093e0 	.word	0x080093e0

080084cc <__sflush_r>:
 80084cc:	898a      	ldrh	r2, [r1, #12]
 80084ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d2:	4605      	mov	r5, r0
 80084d4:	0710      	lsls	r0, r2, #28
 80084d6:	460c      	mov	r4, r1
 80084d8:	d458      	bmi.n	800858c <__sflush_r+0xc0>
 80084da:	684b      	ldr	r3, [r1, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dc05      	bgt.n	80084ec <__sflush_r+0x20>
 80084e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	dc02      	bgt.n	80084ec <__sflush_r+0x20>
 80084e6:	2000      	movs	r0, #0
 80084e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ee:	2e00      	cmp	r6, #0
 80084f0:	d0f9      	beq.n	80084e6 <__sflush_r+0x1a>
 80084f2:	2300      	movs	r3, #0
 80084f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084f8:	682f      	ldr	r7, [r5, #0]
 80084fa:	6a21      	ldr	r1, [r4, #32]
 80084fc:	602b      	str	r3, [r5, #0]
 80084fe:	d032      	beq.n	8008566 <__sflush_r+0x9a>
 8008500:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	075a      	lsls	r2, r3, #29
 8008506:	d505      	bpl.n	8008514 <__sflush_r+0x48>
 8008508:	6863      	ldr	r3, [r4, #4]
 800850a:	1ac0      	subs	r0, r0, r3
 800850c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800850e:	b10b      	cbz	r3, 8008514 <__sflush_r+0x48>
 8008510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008512:	1ac0      	subs	r0, r0, r3
 8008514:	2300      	movs	r3, #0
 8008516:	4602      	mov	r2, r0
 8008518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800851a:	6a21      	ldr	r1, [r4, #32]
 800851c:	4628      	mov	r0, r5
 800851e:	47b0      	blx	r6
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	d106      	bne.n	8008534 <__sflush_r+0x68>
 8008526:	6829      	ldr	r1, [r5, #0]
 8008528:	291d      	cmp	r1, #29
 800852a:	d848      	bhi.n	80085be <__sflush_r+0xf2>
 800852c:	4a29      	ldr	r2, [pc, #164]	; (80085d4 <__sflush_r+0x108>)
 800852e:	40ca      	lsrs	r2, r1
 8008530:	07d6      	lsls	r6, r2, #31
 8008532:	d544      	bpl.n	80085be <__sflush_r+0xf2>
 8008534:	2200      	movs	r2, #0
 8008536:	6062      	str	r2, [r4, #4]
 8008538:	04d9      	lsls	r1, r3, #19
 800853a:	6922      	ldr	r2, [r4, #16]
 800853c:	6022      	str	r2, [r4, #0]
 800853e:	d504      	bpl.n	800854a <__sflush_r+0x7e>
 8008540:	1c42      	adds	r2, r0, #1
 8008542:	d101      	bne.n	8008548 <__sflush_r+0x7c>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b903      	cbnz	r3, 800854a <__sflush_r+0x7e>
 8008548:	6560      	str	r0, [r4, #84]	; 0x54
 800854a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800854c:	602f      	str	r7, [r5, #0]
 800854e:	2900      	cmp	r1, #0
 8008550:	d0c9      	beq.n	80084e6 <__sflush_r+0x1a>
 8008552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008556:	4299      	cmp	r1, r3
 8008558:	d002      	beq.n	8008560 <__sflush_r+0x94>
 800855a:	4628      	mov	r0, r5
 800855c:	f000 f994 	bl	8008888 <_free_r>
 8008560:	2000      	movs	r0, #0
 8008562:	6360      	str	r0, [r4, #52]	; 0x34
 8008564:	e7c0      	b.n	80084e8 <__sflush_r+0x1c>
 8008566:	2301      	movs	r3, #1
 8008568:	4628      	mov	r0, r5
 800856a:	47b0      	blx	r6
 800856c:	1c41      	adds	r1, r0, #1
 800856e:	d1c8      	bne.n	8008502 <__sflush_r+0x36>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0c5      	beq.n	8008502 <__sflush_r+0x36>
 8008576:	2b1d      	cmp	r3, #29
 8008578:	d001      	beq.n	800857e <__sflush_r+0xb2>
 800857a:	2b16      	cmp	r3, #22
 800857c:	d101      	bne.n	8008582 <__sflush_r+0xb6>
 800857e:	602f      	str	r7, [r5, #0]
 8008580:	e7b1      	b.n	80084e6 <__sflush_r+0x1a>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008588:	81a3      	strh	r3, [r4, #12]
 800858a:	e7ad      	b.n	80084e8 <__sflush_r+0x1c>
 800858c:	690f      	ldr	r7, [r1, #16]
 800858e:	2f00      	cmp	r7, #0
 8008590:	d0a9      	beq.n	80084e6 <__sflush_r+0x1a>
 8008592:	0793      	lsls	r3, r2, #30
 8008594:	680e      	ldr	r6, [r1, #0]
 8008596:	bf08      	it	eq
 8008598:	694b      	ldreq	r3, [r1, #20]
 800859a:	600f      	str	r7, [r1, #0]
 800859c:	bf18      	it	ne
 800859e:	2300      	movne	r3, #0
 80085a0:	eba6 0807 	sub.w	r8, r6, r7
 80085a4:	608b      	str	r3, [r1, #8]
 80085a6:	f1b8 0f00 	cmp.w	r8, #0
 80085aa:	dd9c      	ble.n	80084e6 <__sflush_r+0x1a>
 80085ac:	4643      	mov	r3, r8
 80085ae:	463a      	mov	r2, r7
 80085b0:	6a21      	ldr	r1, [r4, #32]
 80085b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b0      	blx	r6
 80085b8:	2800      	cmp	r0, #0
 80085ba:	dc06      	bgt.n	80085ca <__sflush_r+0xfe>
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085c2:	81a3      	strh	r3, [r4, #12]
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085c8:	e78e      	b.n	80084e8 <__sflush_r+0x1c>
 80085ca:	4407      	add	r7, r0
 80085cc:	eba8 0800 	sub.w	r8, r8, r0
 80085d0:	e7e9      	b.n	80085a6 <__sflush_r+0xda>
 80085d2:	bf00      	nop
 80085d4:	20400001 	.word	0x20400001

080085d8 <_fflush_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	690b      	ldr	r3, [r1, #16]
 80085dc:	4605      	mov	r5, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	b1db      	cbz	r3, 800861a <_fflush_r+0x42>
 80085e2:	b118      	cbz	r0, 80085ec <_fflush_r+0x14>
 80085e4:	6983      	ldr	r3, [r0, #24]
 80085e6:	b90b      	cbnz	r3, 80085ec <_fflush_r+0x14>
 80085e8:	f000 f860 	bl	80086ac <__sinit>
 80085ec:	4b0c      	ldr	r3, [pc, #48]	; (8008620 <_fflush_r+0x48>)
 80085ee:	429c      	cmp	r4, r3
 80085f0:	d109      	bne.n	8008606 <_fflush_r+0x2e>
 80085f2:	686c      	ldr	r4, [r5, #4]
 80085f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f8:	b17b      	cbz	r3, 800861a <_fflush_r+0x42>
 80085fa:	4621      	mov	r1, r4
 80085fc:	4628      	mov	r0, r5
 80085fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008602:	f7ff bf63 	b.w	80084cc <__sflush_r>
 8008606:	4b07      	ldr	r3, [pc, #28]	; (8008624 <_fflush_r+0x4c>)
 8008608:	429c      	cmp	r4, r3
 800860a:	d101      	bne.n	8008610 <_fflush_r+0x38>
 800860c:	68ac      	ldr	r4, [r5, #8]
 800860e:	e7f1      	b.n	80085f4 <_fflush_r+0x1c>
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <_fflush_r+0x50>)
 8008612:	429c      	cmp	r4, r3
 8008614:	bf08      	it	eq
 8008616:	68ec      	ldreq	r4, [r5, #12]
 8008618:	e7ec      	b.n	80085f4 <_fflush_r+0x1c>
 800861a:	2000      	movs	r0, #0
 800861c:	bd38      	pop	{r3, r4, r5, pc}
 800861e:	bf00      	nop
 8008620:	08009400 	.word	0x08009400
 8008624:	08009420 	.word	0x08009420
 8008628:	080093e0 	.word	0x080093e0

0800862c <std>:
 800862c:	2300      	movs	r3, #0
 800862e:	b510      	push	{r4, lr}
 8008630:	4604      	mov	r4, r0
 8008632:	e9c0 3300 	strd	r3, r3, [r0]
 8008636:	6083      	str	r3, [r0, #8]
 8008638:	8181      	strh	r1, [r0, #12]
 800863a:	6643      	str	r3, [r0, #100]	; 0x64
 800863c:	81c2      	strh	r2, [r0, #14]
 800863e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008642:	6183      	str	r3, [r0, #24]
 8008644:	4619      	mov	r1, r3
 8008646:	2208      	movs	r2, #8
 8008648:	305c      	adds	r0, #92	; 0x5c
 800864a:	f7ff fdfb 	bl	8008244 <memset>
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <std+0x38>)
 8008650:	6263      	str	r3, [r4, #36]	; 0x24
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <std+0x3c>)
 8008654:	62a3      	str	r3, [r4, #40]	; 0x28
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <std+0x40>)
 8008658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800865a:	4b05      	ldr	r3, [pc, #20]	; (8008670 <std+0x44>)
 800865c:	6224      	str	r4, [r4, #32]
 800865e:	6323      	str	r3, [r4, #48]	; 0x30
 8008660:	bd10      	pop	{r4, pc}
 8008662:	bf00      	nop
 8008664:	08008f89 	.word	0x08008f89
 8008668:	08008fab 	.word	0x08008fab
 800866c:	08008fe3 	.word	0x08008fe3
 8008670:	08009007 	.word	0x08009007

08008674 <_cleanup_r>:
 8008674:	4901      	ldr	r1, [pc, #4]	; (800867c <_cleanup_r+0x8>)
 8008676:	f000 b885 	b.w	8008784 <_fwalk_reent>
 800867a:	bf00      	nop
 800867c:	080085d9 	.word	0x080085d9

08008680 <__sfmoreglue>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	1e4a      	subs	r2, r1, #1
 8008684:	2568      	movs	r5, #104	; 0x68
 8008686:	4355      	muls	r5, r2
 8008688:	460e      	mov	r6, r1
 800868a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800868e:	f000 f949 	bl	8008924 <_malloc_r>
 8008692:	4604      	mov	r4, r0
 8008694:	b140      	cbz	r0, 80086a8 <__sfmoreglue+0x28>
 8008696:	2100      	movs	r1, #0
 8008698:	e9c0 1600 	strd	r1, r6, [r0]
 800869c:	300c      	adds	r0, #12
 800869e:	60a0      	str	r0, [r4, #8]
 80086a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086a4:	f7ff fdce 	bl	8008244 <memset>
 80086a8:	4620      	mov	r0, r4
 80086aa:	bd70      	pop	{r4, r5, r6, pc}

080086ac <__sinit>:
 80086ac:	6983      	ldr	r3, [r0, #24]
 80086ae:	b510      	push	{r4, lr}
 80086b0:	4604      	mov	r4, r0
 80086b2:	bb33      	cbnz	r3, 8008702 <__sinit+0x56>
 80086b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80086b8:	6503      	str	r3, [r0, #80]	; 0x50
 80086ba:	4b12      	ldr	r3, [pc, #72]	; (8008704 <__sinit+0x58>)
 80086bc:	4a12      	ldr	r2, [pc, #72]	; (8008708 <__sinit+0x5c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6282      	str	r2, [r0, #40]	; 0x28
 80086c2:	4298      	cmp	r0, r3
 80086c4:	bf04      	itt	eq
 80086c6:	2301      	moveq	r3, #1
 80086c8:	6183      	streq	r3, [r0, #24]
 80086ca:	f000 f81f 	bl	800870c <__sfp>
 80086ce:	6060      	str	r0, [r4, #4]
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 f81b 	bl	800870c <__sfp>
 80086d6:	60a0      	str	r0, [r4, #8]
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 f817 	bl	800870c <__sfp>
 80086de:	2200      	movs	r2, #0
 80086e0:	60e0      	str	r0, [r4, #12]
 80086e2:	2104      	movs	r1, #4
 80086e4:	6860      	ldr	r0, [r4, #4]
 80086e6:	f7ff ffa1 	bl	800862c <std>
 80086ea:	2201      	movs	r2, #1
 80086ec:	2109      	movs	r1, #9
 80086ee:	68a0      	ldr	r0, [r4, #8]
 80086f0:	f7ff ff9c 	bl	800862c <std>
 80086f4:	2202      	movs	r2, #2
 80086f6:	2112      	movs	r1, #18
 80086f8:	68e0      	ldr	r0, [r4, #12]
 80086fa:	f7ff ff97 	bl	800862c <std>
 80086fe:	2301      	movs	r3, #1
 8008700:	61a3      	str	r3, [r4, #24]
 8008702:	bd10      	pop	{r4, pc}
 8008704:	080093dc 	.word	0x080093dc
 8008708:	08008675 	.word	0x08008675

0800870c <__sfp>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	4b1b      	ldr	r3, [pc, #108]	; (800877c <__sfp+0x70>)
 8008710:	681e      	ldr	r6, [r3, #0]
 8008712:	69b3      	ldr	r3, [r6, #24]
 8008714:	4607      	mov	r7, r0
 8008716:	b913      	cbnz	r3, 800871e <__sfp+0x12>
 8008718:	4630      	mov	r0, r6
 800871a:	f7ff ffc7 	bl	80086ac <__sinit>
 800871e:	3648      	adds	r6, #72	; 0x48
 8008720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008724:	3b01      	subs	r3, #1
 8008726:	d503      	bpl.n	8008730 <__sfp+0x24>
 8008728:	6833      	ldr	r3, [r6, #0]
 800872a:	b133      	cbz	r3, 800873a <__sfp+0x2e>
 800872c:	6836      	ldr	r6, [r6, #0]
 800872e:	e7f7      	b.n	8008720 <__sfp+0x14>
 8008730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008734:	b16d      	cbz	r5, 8008752 <__sfp+0x46>
 8008736:	3468      	adds	r4, #104	; 0x68
 8008738:	e7f4      	b.n	8008724 <__sfp+0x18>
 800873a:	2104      	movs	r1, #4
 800873c:	4638      	mov	r0, r7
 800873e:	f7ff ff9f 	bl	8008680 <__sfmoreglue>
 8008742:	6030      	str	r0, [r6, #0]
 8008744:	2800      	cmp	r0, #0
 8008746:	d1f1      	bne.n	800872c <__sfp+0x20>
 8008748:	230c      	movs	r3, #12
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	4604      	mov	r4, r0
 800874e:	4620      	mov	r0, r4
 8008750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008752:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <__sfp+0x74>)
 8008754:	6665      	str	r5, [r4, #100]	; 0x64
 8008756:	e9c4 5500 	strd	r5, r5, [r4]
 800875a:	60a5      	str	r5, [r4, #8]
 800875c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008760:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008764:	2208      	movs	r2, #8
 8008766:	4629      	mov	r1, r5
 8008768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800876c:	f7ff fd6a 	bl	8008244 <memset>
 8008770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008778:	e7e9      	b.n	800874e <__sfp+0x42>
 800877a:	bf00      	nop
 800877c:	080093dc 	.word	0x080093dc
 8008780:	ffff0001 	.word	0xffff0001

08008784 <_fwalk_reent>:
 8008784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008788:	4680      	mov	r8, r0
 800878a:	4689      	mov	r9, r1
 800878c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008790:	2600      	movs	r6, #0
 8008792:	b914      	cbnz	r4, 800879a <_fwalk_reent+0x16>
 8008794:	4630      	mov	r0, r6
 8008796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800879e:	3f01      	subs	r7, #1
 80087a0:	d501      	bpl.n	80087a6 <_fwalk_reent+0x22>
 80087a2:	6824      	ldr	r4, [r4, #0]
 80087a4:	e7f5      	b.n	8008792 <_fwalk_reent+0xe>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d907      	bls.n	80087bc <_fwalk_reent+0x38>
 80087ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087b0:	3301      	adds	r3, #1
 80087b2:	d003      	beq.n	80087bc <_fwalk_reent+0x38>
 80087b4:	4629      	mov	r1, r5
 80087b6:	4640      	mov	r0, r8
 80087b8:	47c8      	blx	r9
 80087ba:	4306      	orrs	r6, r0
 80087bc:	3568      	adds	r5, #104	; 0x68
 80087be:	e7ee      	b.n	800879e <_fwalk_reent+0x1a>

080087c0 <__swhatbuf_r>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	460e      	mov	r6, r1
 80087c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c8:	2900      	cmp	r1, #0
 80087ca:	b096      	sub	sp, #88	; 0x58
 80087cc:	4614      	mov	r4, r2
 80087ce:	461d      	mov	r5, r3
 80087d0:	da07      	bge.n	80087e2 <__swhatbuf_r+0x22>
 80087d2:	2300      	movs	r3, #0
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	89b3      	ldrh	r3, [r6, #12]
 80087d8:	061a      	lsls	r2, r3, #24
 80087da:	d410      	bmi.n	80087fe <__swhatbuf_r+0x3e>
 80087dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e0:	e00e      	b.n	8008800 <__swhatbuf_r+0x40>
 80087e2:	466a      	mov	r2, sp
 80087e4:	f000 fc36 	bl	8009054 <_fstat_r>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	dbf2      	blt.n	80087d2 <__swhatbuf_r+0x12>
 80087ec:	9a01      	ldr	r2, [sp, #4]
 80087ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087f6:	425a      	negs	r2, r3
 80087f8:	415a      	adcs	r2, r3
 80087fa:	602a      	str	r2, [r5, #0]
 80087fc:	e7ee      	b.n	80087dc <__swhatbuf_r+0x1c>
 80087fe:	2340      	movs	r3, #64	; 0x40
 8008800:	2000      	movs	r0, #0
 8008802:	6023      	str	r3, [r4, #0]
 8008804:	b016      	add	sp, #88	; 0x58
 8008806:	bd70      	pop	{r4, r5, r6, pc}

08008808 <__smakebuf_r>:
 8008808:	898b      	ldrh	r3, [r1, #12]
 800880a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800880c:	079d      	lsls	r5, r3, #30
 800880e:	4606      	mov	r6, r0
 8008810:	460c      	mov	r4, r1
 8008812:	d507      	bpl.n	8008824 <__smakebuf_r+0x1c>
 8008814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	6123      	str	r3, [r4, #16]
 800881c:	2301      	movs	r3, #1
 800881e:	6163      	str	r3, [r4, #20]
 8008820:	b002      	add	sp, #8
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	ab01      	add	r3, sp, #4
 8008826:	466a      	mov	r2, sp
 8008828:	f7ff ffca 	bl	80087c0 <__swhatbuf_r>
 800882c:	9900      	ldr	r1, [sp, #0]
 800882e:	4605      	mov	r5, r0
 8008830:	4630      	mov	r0, r6
 8008832:	f000 f877 	bl	8008924 <_malloc_r>
 8008836:	b948      	cbnz	r0, 800884c <__smakebuf_r+0x44>
 8008838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800883c:	059a      	lsls	r2, r3, #22
 800883e:	d4ef      	bmi.n	8008820 <__smakebuf_r+0x18>
 8008840:	f023 0303 	bic.w	r3, r3, #3
 8008844:	f043 0302 	orr.w	r3, r3, #2
 8008848:	81a3      	strh	r3, [r4, #12]
 800884a:	e7e3      	b.n	8008814 <__smakebuf_r+0xc>
 800884c:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <__smakebuf_r+0x7c>)
 800884e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	6020      	str	r0, [r4, #0]
 8008854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	9b00      	ldr	r3, [sp, #0]
 800885c:	6163      	str	r3, [r4, #20]
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	6120      	str	r0, [r4, #16]
 8008862:	b15b      	cbz	r3, 800887c <__smakebuf_r+0x74>
 8008864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008868:	4630      	mov	r0, r6
 800886a:	f000 fc05 	bl	8009078 <_isatty_r>
 800886e:	b128      	cbz	r0, 800887c <__smakebuf_r+0x74>
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	f023 0303 	bic.w	r3, r3, #3
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	81a3      	strh	r3, [r4, #12]
 800887c:	89a3      	ldrh	r3, [r4, #12]
 800887e:	431d      	orrs	r5, r3
 8008880:	81a5      	strh	r5, [r4, #12]
 8008882:	e7cd      	b.n	8008820 <__smakebuf_r+0x18>
 8008884:	08008675 	.word	0x08008675

08008888 <_free_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4605      	mov	r5, r0
 800888c:	2900      	cmp	r1, #0
 800888e:	d045      	beq.n	800891c <_free_r+0x94>
 8008890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008894:	1f0c      	subs	r4, r1, #4
 8008896:	2b00      	cmp	r3, #0
 8008898:	bfb8      	it	lt
 800889a:	18e4      	addlt	r4, r4, r3
 800889c:	f000 fc0e 	bl	80090bc <__malloc_lock>
 80088a0:	4a1f      	ldr	r2, [pc, #124]	; (8008920 <_free_r+0x98>)
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	4610      	mov	r0, r2
 80088a6:	b933      	cbnz	r3, 80088b6 <_free_r+0x2e>
 80088a8:	6063      	str	r3, [r4, #4]
 80088aa:	6014      	str	r4, [r2, #0]
 80088ac:	4628      	mov	r0, r5
 80088ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b2:	f000 bc04 	b.w	80090be <__malloc_unlock>
 80088b6:	42a3      	cmp	r3, r4
 80088b8:	d90c      	bls.n	80088d4 <_free_r+0x4c>
 80088ba:	6821      	ldr	r1, [r4, #0]
 80088bc:	1862      	adds	r2, r4, r1
 80088be:	4293      	cmp	r3, r2
 80088c0:	bf04      	itt	eq
 80088c2:	681a      	ldreq	r2, [r3, #0]
 80088c4:	685b      	ldreq	r3, [r3, #4]
 80088c6:	6063      	str	r3, [r4, #4]
 80088c8:	bf04      	itt	eq
 80088ca:	1852      	addeq	r2, r2, r1
 80088cc:	6022      	streq	r2, [r4, #0]
 80088ce:	6004      	str	r4, [r0, #0]
 80088d0:	e7ec      	b.n	80088ac <_free_r+0x24>
 80088d2:	4613      	mov	r3, r2
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	b10a      	cbz	r2, 80088dc <_free_r+0x54>
 80088d8:	42a2      	cmp	r2, r4
 80088da:	d9fa      	bls.n	80088d2 <_free_r+0x4a>
 80088dc:	6819      	ldr	r1, [r3, #0]
 80088de:	1858      	adds	r0, r3, r1
 80088e0:	42a0      	cmp	r0, r4
 80088e2:	d10b      	bne.n	80088fc <_free_r+0x74>
 80088e4:	6820      	ldr	r0, [r4, #0]
 80088e6:	4401      	add	r1, r0
 80088e8:	1858      	adds	r0, r3, r1
 80088ea:	4282      	cmp	r2, r0
 80088ec:	6019      	str	r1, [r3, #0]
 80088ee:	d1dd      	bne.n	80088ac <_free_r+0x24>
 80088f0:	6810      	ldr	r0, [r2, #0]
 80088f2:	6852      	ldr	r2, [r2, #4]
 80088f4:	605a      	str	r2, [r3, #4]
 80088f6:	4401      	add	r1, r0
 80088f8:	6019      	str	r1, [r3, #0]
 80088fa:	e7d7      	b.n	80088ac <_free_r+0x24>
 80088fc:	d902      	bls.n	8008904 <_free_r+0x7c>
 80088fe:	230c      	movs	r3, #12
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	e7d3      	b.n	80088ac <_free_r+0x24>
 8008904:	6820      	ldr	r0, [r4, #0]
 8008906:	1821      	adds	r1, r4, r0
 8008908:	428a      	cmp	r2, r1
 800890a:	bf04      	itt	eq
 800890c:	6811      	ldreq	r1, [r2, #0]
 800890e:	6852      	ldreq	r2, [r2, #4]
 8008910:	6062      	str	r2, [r4, #4]
 8008912:	bf04      	itt	eq
 8008914:	1809      	addeq	r1, r1, r0
 8008916:	6021      	streq	r1, [r4, #0]
 8008918:	605c      	str	r4, [r3, #4]
 800891a:	e7c7      	b.n	80088ac <_free_r+0x24>
 800891c:	bd38      	pop	{r3, r4, r5, pc}
 800891e:	bf00      	nop
 8008920:	20000470 	.word	0x20000470

08008924 <_malloc_r>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	1ccd      	adds	r5, r1, #3
 8008928:	f025 0503 	bic.w	r5, r5, #3
 800892c:	3508      	adds	r5, #8
 800892e:	2d0c      	cmp	r5, #12
 8008930:	bf38      	it	cc
 8008932:	250c      	movcc	r5, #12
 8008934:	2d00      	cmp	r5, #0
 8008936:	4606      	mov	r6, r0
 8008938:	db01      	blt.n	800893e <_malloc_r+0x1a>
 800893a:	42a9      	cmp	r1, r5
 800893c:	d903      	bls.n	8008946 <_malloc_r+0x22>
 800893e:	230c      	movs	r3, #12
 8008940:	6033      	str	r3, [r6, #0]
 8008942:	2000      	movs	r0, #0
 8008944:	bd70      	pop	{r4, r5, r6, pc}
 8008946:	f000 fbb9 	bl	80090bc <__malloc_lock>
 800894a:	4a21      	ldr	r2, [pc, #132]	; (80089d0 <_malloc_r+0xac>)
 800894c:	6814      	ldr	r4, [r2, #0]
 800894e:	4621      	mov	r1, r4
 8008950:	b991      	cbnz	r1, 8008978 <_malloc_r+0x54>
 8008952:	4c20      	ldr	r4, [pc, #128]	; (80089d4 <_malloc_r+0xb0>)
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	b91b      	cbnz	r3, 8008960 <_malloc_r+0x3c>
 8008958:	4630      	mov	r0, r6
 800895a:	f000 fb05 	bl	8008f68 <_sbrk_r>
 800895e:	6020      	str	r0, [r4, #0]
 8008960:	4629      	mov	r1, r5
 8008962:	4630      	mov	r0, r6
 8008964:	f000 fb00 	bl	8008f68 <_sbrk_r>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d124      	bne.n	80089b6 <_malloc_r+0x92>
 800896c:	230c      	movs	r3, #12
 800896e:	6033      	str	r3, [r6, #0]
 8008970:	4630      	mov	r0, r6
 8008972:	f000 fba4 	bl	80090be <__malloc_unlock>
 8008976:	e7e4      	b.n	8008942 <_malloc_r+0x1e>
 8008978:	680b      	ldr	r3, [r1, #0]
 800897a:	1b5b      	subs	r3, r3, r5
 800897c:	d418      	bmi.n	80089b0 <_malloc_r+0x8c>
 800897e:	2b0b      	cmp	r3, #11
 8008980:	d90f      	bls.n	80089a2 <_malloc_r+0x7e>
 8008982:	600b      	str	r3, [r1, #0]
 8008984:	50cd      	str	r5, [r1, r3]
 8008986:	18cc      	adds	r4, r1, r3
 8008988:	4630      	mov	r0, r6
 800898a:	f000 fb98 	bl	80090be <__malloc_unlock>
 800898e:	f104 000b 	add.w	r0, r4, #11
 8008992:	1d23      	adds	r3, r4, #4
 8008994:	f020 0007 	bic.w	r0, r0, #7
 8008998:	1ac3      	subs	r3, r0, r3
 800899a:	d0d3      	beq.n	8008944 <_malloc_r+0x20>
 800899c:	425a      	negs	r2, r3
 800899e:	50e2      	str	r2, [r4, r3]
 80089a0:	e7d0      	b.n	8008944 <_malloc_r+0x20>
 80089a2:	428c      	cmp	r4, r1
 80089a4:	684b      	ldr	r3, [r1, #4]
 80089a6:	bf16      	itet	ne
 80089a8:	6063      	strne	r3, [r4, #4]
 80089aa:	6013      	streq	r3, [r2, #0]
 80089ac:	460c      	movne	r4, r1
 80089ae:	e7eb      	b.n	8008988 <_malloc_r+0x64>
 80089b0:	460c      	mov	r4, r1
 80089b2:	6849      	ldr	r1, [r1, #4]
 80089b4:	e7cc      	b.n	8008950 <_malloc_r+0x2c>
 80089b6:	1cc4      	adds	r4, r0, #3
 80089b8:	f024 0403 	bic.w	r4, r4, #3
 80089bc:	42a0      	cmp	r0, r4
 80089be:	d005      	beq.n	80089cc <_malloc_r+0xa8>
 80089c0:	1a21      	subs	r1, r4, r0
 80089c2:	4630      	mov	r0, r6
 80089c4:	f000 fad0 	bl	8008f68 <_sbrk_r>
 80089c8:	3001      	adds	r0, #1
 80089ca:	d0cf      	beq.n	800896c <_malloc_r+0x48>
 80089cc:	6025      	str	r5, [r4, #0]
 80089ce:	e7db      	b.n	8008988 <_malloc_r+0x64>
 80089d0:	20000470 	.word	0x20000470
 80089d4:	20000474 	.word	0x20000474

080089d8 <__sfputc_r>:
 80089d8:	6893      	ldr	r3, [r2, #8]
 80089da:	3b01      	subs	r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	b410      	push	{r4}
 80089e0:	6093      	str	r3, [r2, #8]
 80089e2:	da08      	bge.n	80089f6 <__sfputc_r+0x1e>
 80089e4:	6994      	ldr	r4, [r2, #24]
 80089e6:	42a3      	cmp	r3, r4
 80089e8:	db01      	blt.n	80089ee <__sfputc_r+0x16>
 80089ea:	290a      	cmp	r1, #10
 80089ec:	d103      	bne.n	80089f6 <__sfputc_r+0x1e>
 80089ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f2:	f7ff bcab 	b.w	800834c <__swbuf_r>
 80089f6:	6813      	ldr	r3, [r2, #0]
 80089f8:	1c58      	adds	r0, r3, #1
 80089fa:	6010      	str	r0, [r2, #0]
 80089fc:	7019      	strb	r1, [r3, #0]
 80089fe:	4608      	mov	r0, r1
 8008a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <__sfputs_r>:
 8008a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a08:	4606      	mov	r6, r0
 8008a0a:	460f      	mov	r7, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	18d5      	adds	r5, r2, r3
 8008a10:	42ac      	cmp	r4, r5
 8008a12:	d101      	bne.n	8008a18 <__sfputs_r+0x12>
 8008a14:	2000      	movs	r0, #0
 8008a16:	e007      	b.n	8008a28 <__sfputs_r+0x22>
 8008a18:	463a      	mov	r2, r7
 8008a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff ffda 	bl	80089d8 <__sfputc_r>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d1f3      	bne.n	8008a10 <__sfputs_r+0xa>
 8008a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a2c <_vfiprintf_r>:
 8008a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	460c      	mov	r4, r1
 8008a32:	b09d      	sub	sp, #116	; 0x74
 8008a34:	4617      	mov	r7, r2
 8008a36:	461d      	mov	r5, r3
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b118      	cbz	r0, 8008a44 <_vfiprintf_r+0x18>
 8008a3c:	6983      	ldr	r3, [r0, #24]
 8008a3e:	b90b      	cbnz	r3, 8008a44 <_vfiprintf_r+0x18>
 8008a40:	f7ff fe34 	bl	80086ac <__sinit>
 8008a44:	4b7c      	ldr	r3, [pc, #496]	; (8008c38 <_vfiprintf_r+0x20c>)
 8008a46:	429c      	cmp	r4, r3
 8008a48:	d158      	bne.n	8008afc <_vfiprintf_r+0xd0>
 8008a4a:	6874      	ldr	r4, [r6, #4]
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	0718      	lsls	r0, r3, #28
 8008a50:	d55e      	bpl.n	8008b10 <_vfiprintf_r+0xe4>
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d05b      	beq.n	8008b10 <_vfiprintf_r+0xe4>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a5c:	2320      	movs	r3, #32
 8008a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a62:	2330      	movs	r3, #48	; 0x30
 8008a64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a68:	9503      	str	r5, [sp, #12]
 8008a6a:	f04f 0b01 	mov.w	fp, #1
 8008a6e:	46b8      	mov	r8, r7
 8008a70:	4645      	mov	r5, r8
 8008a72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a76:	b10b      	cbz	r3, 8008a7c <_vfiprintf_r+0x50>
 8008a78:	2b25      	cmp	r3, #37	; 0x25
 8008a7a:	d154      	bne.n	8008b26 <_vfiprintf_r+0xfa>
 8008a7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008a80:	d00b      	beq.n	8008a9a <_vfiprintf_r+0x6e>
 8008a82:	4653      	mov	r3, sl
 8008a84:	463a      	mov	r2, r7
 8008a86:	4621      	mov	r1, r4
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7ff ffbc 	bl	8008a06 <__sfputs_r>
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f000 80c2 	beq.w	8008c18 <_vfiprintf_r+0x1ec>
 8008a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a96:	4453      	add	r3, sl
 8008a98:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9a:	f898 3000 	ldrb.w	r3, [r8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 80ba 	beq.w	8008c18 <_vfiprintf_r+0x1ec>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aae:	9304      	str	r3, [sp, #16]
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ab8:	46a8      	mov	r8, r5
 8008aba:	2205      	movs	r2, #5
 8008abc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008ac0:	485e      	ldr	r0, [pc, #376]	; (8008c3c <_vfiprintf_r+0x210>)
 8008ac2:	f7f7 fbad 	bl	8000220 <memchr>
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	bb78      	cbnz	r0, 8008b2a <_vfiprintf_r+0xfe>
 8008aca:	06d9      	lsls	r1, r3, #27
 8008acc:	bf44      	itt	mi
 8008ace:	2220      	movmi	r2, #32
 8008ad0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ad4:	071a      	lsls	r2, r3, #28
 8008ad6:	bf44      	itt	mi
 8008ad8:	222b      	movmi	r2, #43	; 0x2b
 8008ada:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ade:	782a      	ldrb	r2, [r5, #0]
 8008ae0:	2a2a      	cmp	r2, #42	; 0x2a
 8008ae2:	d02a      	beq.n	8008b3a <_vfiprintf_r+0x10e>
 8008ae4:	9a07      	ldr	r2, [sp, #28]
 8008ae6:	46a8      	mov	r8, r5
 8008ae8:	2000      	movs	r0, #0
 8008aea:	250a      	movs	r5, #10
 8008aec:	4641      	mov	r1, r8
 8008aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008af2:	3b30      	subs	r3, #48	; 0x30
 8008af4:	2b09      	cmp	r3, #9
 8008af6:	d969      	bls.n	8008bcc <_vfiprintf_r+0x1a0>
 8008af8:	b360      	cbz	r0, 8008b54 <_vfiprintf_r+0x128>
 8008afa:	e024      	b.n	8008b46 <_vfiprintf_r+0x11a>
 8008afc:	4b50      	ldr	r3, [pc, #320]	; (8008c40 <_vfiprintf_r+0x214>)
 8008afe:	429c      	cmp	r4, r3
 8008b00:	d101      	bne.n	8008b06 <_vfiprintf_r+0xda>
 8008b02:	68b4      	ldr	r4, [r6, #8]
 8008b04:	e7a2      	b.n	8008a4c <_vfiprintf_r+0x20>
 8008b06:	4b4f      	ldr	r3, [pc, #316]	; (8008c44 <_vfiprintf_r+0x218>)
 8008b08:	429c      	cmp	r4, r3
 8008b0a:	bf08      	it	eq
 8008b0c:	68f4      	ldreq	r4, [r6, #12]
 8008b0e:	e79d      	b.n	8008a4c <_vfiprintf_r+0x20>
 8008b10:	4621      	mov	r1, r4
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7ff fc6c 	bl	80083f0 <__swsetup_r>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d09d      	beq.n	8008a58 <_vfiprintf_r+0x2c>
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b20:	b01d      	add	sp, #116	; 0x74
 8008b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b26:	46a8      	mov	r8, r5
 8008b28:	e7a2      	b.n	8008a70 <_vfiprintf_r+0x44>
 8008b2a:	4a44      	ldr	r2, [pc, #272]	; (8008c3c <_vfiprintf_r+0x210>)
 8008b2c:	1a80      	subs	r0, r0, r2
 8008b2e:	fa0b f000 	lsl.w	r0, fp, r0
 8008b32:	4318      	orrs	r0, r3
 8008b34:	9004      	str	r0, [sp, #16]
 8008b36:	4645      	mov	r5, r8
 8008b38:	e7be      	b.n	8008ab8 <_vfiprintf_r+0x8c>
 8008b3a:	9a03      	ldr	r2, [sp, #12]
 8008b3c:	1d11      	adds	r1, r2, #4
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	9103      	str	r1, [sp, #12]
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	db01      	blt.n	8008b4a <_vfiprintf_r+0x11e>
 8008b46:	9207      	str	r2, [sp, #28]
 8008b48:	e004      	b.n	8008b54 <_vfiprintf_r+0x128>
 8008b4a:	4252      	negs	r2, r2
 8008b4c:	f043 0302 	orr.w	r3, r3, #2
 8008b50:	9207      	str	r2, [sp, #28]
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	f898 3000 	ldrb.w	r3, [r8]
 8008b58:	2b2e      	cmp	r3, #46	; 0x2e
 8008b5a:	d10e      	bne.n	8008b7a <_vfiprintf_r+0x14e>
 8008b5c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008b60:	2b2a      	cmp	r3, #42	; 0x2a
 8008b62:	d138      	bne.n	8008bd6 <_vfiprintf_r+0x1aa>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	9203      	str	r2, [sp, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfb8      	it	lt
 8008b70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b74:	f108 0802 	add.w	r8, r8, #2
 8008b78:	9305      	str	r3, [sp, #20]
 8008b7a:	4d33      	ldr	r5, [pc, #204]	; (8008c48 <_vfiprintf_r+0x21c>)
 8008b7c:	f898 1000 	ldrb.w	r1, [r8]
 8008b80:	2203      	movs	r2, #3
 8008b82:	4628      	mov	r0, r5
 8008b84:	f7f7 fb4c 	bl	8000220 <memchr>
 8008b88:	b140      	cbz	r0, 8008b9c <_vfiprintf_r+0x170>
 8008b8a:	2340      	movs	r3, #64	; 0x40
 8008b8c:	1b40      	subs	r0, r0, r5
 8008b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	4303      	orrs	r3, r0
 8008b96:	f108 0801 	add.w	r8, r8, #1
 8008b9a:	9304      	str	r3, [sp, #16]
 8008b9c:	f898 1000 	ldrb.w	r1, [r8]
 8008ba0:	482a      	ldr	r0, [pc, #168]	; (8008c4c <_vfiprintf_r+0x220>)
 8008ba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ba6:	2206      	movs	r2, #6
 8008ba8:	f108 0701 	add.w	r7, r8, #1
 8008bac:	f7f7 fb38 	bl	8000220 <memchr>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d037      	beq.n	8008c24 <_vfiprintf_r+0x1f8>
 8008bb4:	4b26      	ldr	r3, [pc, #152]	; (8008c50 <_vfiprintf_r+0x224>)
 8008bb6:	bb1b      	cbnz	r3, 8008c00 <_vfiprintf_r+0x1d4>
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	3307      	adds	r3, #7
 8008bbc:	f023 0307 	bic.w	r3, r3, #7
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	9303      	str	r3, [sp, #12]
 8008bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc6:	444b      	add	r3, r9
 8008bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bca:	e750      	b.n	8008a6e <_vfiprintf_r+0x42>
 8008bcc:	fb05 3202 	mla	r2, r5, r2, r3
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	4688      	mov	r8, r1
 8008bd4:	e78a      	b.n	8008aec <_vfiprintf_r+0xc0>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f108 0801 	add.w	r8, r8, #1
 8008bdc:	9305      	str	r3, [sp, #20]
 8008bde:	4619      	mov	r1, r3
 8008be0:	250a      	movs	r5, #10
 8008be2:	4640      	mov	r0, r8
 8008be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be8:	3a30      	subs	r2, #48	; 0x30
 8008bea:	2a09      	cmp	r2, #9
 8008bec:	d903      	bls.n	8008bf6 <_vfiprintf_r+0x1ca>
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0c3      	beq.n	8008b7a <_vfiprintf_r+0x14e>
 8008bf2:	9105      	str	r1, [sp, #20]
 8008bf4:	e7c1      	b.n	8008b7a <_vfiprintf_r+0x14e>
 8008bf6:	fb05 2101 	mla	r1, r5, r1, r2
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	e7f0      	b.n	8008be2 <_vfiprintf_r+0x1b6>
 8008c00:	ab03      	add	r3, sp, #12
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	4622      	mov	r2, r4
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <_vfiprintf_r+0x228>)
 8008c08:	a904      	add	r1, sp, #16
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f3af 8000 	nop.w
 8008c10:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008c14:	4681      	mov	r9, r0
 8008c16:	d1d5      	bne.n	8008bc4 <_vfiprintf_r+0x198>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	065b      	lsls	r3, r3, #25
 8008c1c:	f53f af7e 	bmi.w	8008b1c <_vfiprintf_r+0xf0>
 8008c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c22:	e77d      	b.n	8008b20 <_vfiprintf_r+0xf4>
 8008c24:	ab03      	add	r3, sp, #12
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	4622      	mov	r2, r4
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <_vfiprintf_r+0x228>)
 8008c2c:	a904      	add	r1, sp, #16
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f000 f888 	bl	8008d44 <_printf_i>
 8008c34:	e7ec      	b.n	8008c10 <_vfiprintf_r+0x1e4>
 8008c36:	bf00      	nop
 8008c38:	08009400 	.word	0x08009400
 8008c3c:	08009440 	.word	0x08009440
 8008c40:	08009420 	.word	0x08009420
 8008c44:	080093e0 	.word	0x080093e0
 8008c48:	08009446 	.word	0x08009446
 8008c4c:	0800944a 	.word	0x0800944a
 8008c50:	00000000 	.word	0x00000000
 8008c54:	08008a07 	.word	0x08008a07

08008c58 <_printf_common>:
 8008c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c5c:	4691      	mov	r9, r2
 8008c5e:	461f      	mov	r7, r3
 8008c60:	688a      	ldr	r2, [r1, #8]
 8008c62:	690b      	ldr	r3, [r1, #16]
 8008c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	bfb8      	it	lt
 8008c6c:	4613      	movlt	r3, r2
 8008c6e:	f8c9 3000 	str.w	r3, [r9]
 8008c72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c76:	4606      	mov	r6, r0
 8008c78:	460c      	mov	r4, r1
 8008c7a:	b112      	cbz	r2, 8008c82 <_printf_common+0x2a>
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	f8c9 3000 	str.w	r3, [r9]
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	0699      	lsls	r1, r3, #26
 8008c86:	bf42      	ittt	mi
 8008c88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c8c:	3302      	addmi	r3, #2
 8008c8e:	f8c9 3000 	strmi.w	r3, [r9]
 8008c92:	6825      	ldr	r5, [r4, #0]
 8008c94:	f015 0506 	ands.w	r5, r5, #6
 8008c98:	d107      	bne.n	8008caa <_printf_common+0x52>
 8008c9a:	f104 0a19 	add.w	sl, r4, #25
 8008c9e:	68e3      	ldr	r3, [r4, #12]
 8008ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	42ab      	cmp	r3, r5
 8008ca8:	dc28      	bgt.n	8008cfc <_printf_common+0xa4>
 8008caa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008cae:	6822      	ldr	r2, [r4, #0]
 8008cb0:	3300      	adds	r3, #0
 8008cb2:	bf18      	it	ne
 8008cb4:	2301      	movne	r3, #1
 8008cb6:	0692      	lsls	r2, r2, #26
 8008cb8:	d42d      	bmi.n	8008d16 <_printf_common+0xbe>
 8008cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	47c0      	blx	r8
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	d020      	beq.n	8008d0a <_printf_common+0xb2>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	68e5      	ldr	r5, [r4, #12]
 8008ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8008cd0:	f003 0306 	and.w	r3, r3, #6
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	bf08      	it	eq
 8008cd8:	1aad      	subeq	r5, r5, r2
 8008cda:	68a3      	ldr	r3, [r4, #8]
 8008cdc:	6922      	ldr	r2, [r4, #16]
 8008cde:	bf0c      	ite	eq
 8008ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ce4:	2500      	movne	r5, #0
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	bfc4      	itt	gt
 8008cea:	1a9b      	subgt	r3, r3, r2
 8008cec:	18ed      	addgt	r5, r5, r3
 8008cee:	f04f 0900 	mov.w	r9, #0
 8008cf2:	341a      	adds	r4, #26
 8008cf4:	454d      	cmp	r5, r9
 8008cf6:	d11a      	bne.n	8008d2e <_printf_common+0xd6>
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e008      	b.n	8008d0e <_printf_common+0xb6>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	4652      	mov	r2, sl
 8008d00:	4639      	mov	r1, r7
 8008d02:	4630      	mov	r0, r6
 8008d04:	47c0      	blx	r8
 8008d06:	3001      	adds	r0, #1
 8008d08:	d103      	bne.n	8008d12 <_printf_common+0xba>
 8008d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d12:	3501      	adds	r5, #1
 8008d14:	e7c3      	b.n	8008c9e <_printf_common+0x46>
 8008d16:	18e1      	adds	r1, r4, r3
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	2030      	movs	r0, #48	; 0x30
 8008d1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d20:	4422      	add	r2, r4
 8008d22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d2a:	3302      	adds	r3, #2
 8008d2c:	e7c5      	b.n	8008cba <_printf_common+0x62>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	4622      	mov	r2, r4
 8008d32:	4639      	mov	r1, r7
 8008d34:	4630      	mov	r0, r6
 8008d36:	47c0      	blx	r8
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d0e6      	beq.n	8008d0a <_printf_common+0xb2>
 8008d3c:	f109 0901 	add.w	r9, r9, #1
 8008d40:	e7d8      	b.n	8008cf4 <_printf_common+0x9c>
	...

08008d44 <_printf_i>:
 8008d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	7e09      	ldrb	r1, [r1, #24]
 8008d50:	b085      	sub	sp, #20
 8008d52:	296e      	cmp	r1, #110	; 0x6e
 8008d54:	4617      	mov	r7, r2
 8008d56:	4606      	mov	r6, r0
 8008d58:	4698      	mov	r8, r3
 8008d5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d5c:	f000 80b3 	beq.w	8008ec6 <_printf_i+0x182>
 8008d60:	d822      	bhi.n	8008da8 <_printf_i+0x64>
 8008d62:	2963      	cmp	r1, #99	; 0x63
 8008d64:	d036      	beq.n	8008dd4 <_printf_i+0x90>
 8008d66:	d80a      	bhi.n	8008d7e <_printf_i+0x3a>
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	f000 80b9 	beq.w	8008ee0 <_printf_i+0x19c>
 8008d6e:	2958      	cmp	r1, #88	; 0x58
 8008d70:	f000 8083 	beq.w	8008e7a <_printf_i+0x136>
 8008d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d7c:	e032      	b.n	8008de4 <_printf_i+0xa0>
 8008d7e:	2964      	cmp	r1, #100	; 0x64
 8008d80:	d001      	beq.n	8008d86 <_printf_i+0x42>
 8008d82:	2969      	cmp	r1, #105	; 0x69
 8008d84:	d1f6      	bne.n	8008d74 <_printf_i+0x30>
 8008d86:	6820      	ldr	r0, [r4, #0]
 8008d88:	6813      	ldr	r3, [r2, #0]
 8008d8a:	0605      	lsls	r5, r0, #24
 8008d8c:	f103 0104 	add.w	r1, r3, #4
 8008d90:	d52a      	bpl.n	8008de8 <_printf_i+0xa4>
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	da03      	bge.n	8008da2 <_printf_i+0x5e>
 8008d9a:	222d      	movs	r2, #45	; 0x2d
 8008d9c:	425b      	negs	r3, r3
 8008d9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008da2:	486f      	ldr	r0, [pc, #444]	; (8008f60 <_printf_i+0x21c>)
 8008da4:	220a      	movs	r2, #10
 8008da6:	e039      	b.n	8008e1c <_printf_i+0xd8>
 8008da8:	2973      	cmp	r1, #115	; 0x73
 8008daa:	f000 809d 	beq.w	8008ee8 <_printf_i+0x1a4>
 8008dae:	d808      	bhi.n	8008dc2 <_printf_i+0x7e>
 8008db0:	296f      	cmp	r1, #111	; 0x6f
 8008db2:	d020      	beq.n	8008df6 <_printf_i+0xb2>
 8008db4:	2970      	cmp	r1, #112	; 0x70
 8008db6:	d1dd      	bne.n	8008d74 <_printf_i+0x30>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	f043 0320 	orr.w	r3, r3, #32
 8008dbe:	6023      	str	r3, [r4, #0]
 8008dc0:	e003      	b.n	8008dca <_printf_i+0x86>
 8008dc2:	2975      	cmp	r1, #117	; 0x75
 8008dc4:	d017      	beq.n	8008df6 <_printf_i+0xb2>
 8008dc6:	2978      	cmp	r1, #120	; 0x78
 8008dc8:	d1d4      	bne.n	8008d74 <_printf_i+0x30>
 8008dca:	2378      	movs	r3, #120	; 0x78
 8008dcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dd0:	4864      	ldr	r0, [pc, #400]	; (8008f64 <_printf_i+0x220>)
 8008dd2:	e055      	b.n	8008e80 <_printf_i+0x13c>
 8008dd4:	6813      	ldr	r3, [r2, #0]
 8008dd6:	1d19      	adds	r1, r3, #4
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6011      	str	r1, [r2, #0]
 8008ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008de4:	2301      	movs	r3, #1
 8008de6:	e08c      	b.n	8008f02 <_printf_i+0x1be>
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6011      	str	r1, [r2, #0]
 8008dec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008df0:	bf18      	it	ne
 8008df2:	b21b      	sxthne	r3, r3
 8008df4:	e7cf      	b.n	8008d96 <_printf_i+0x52>
 8008df6:	6813      	ldr	r3, [r2, #0]
 8008df8:	6825      	ldr	r5, [r4, #0]
 8008dfa:	1d18      	adds	r0, r3, #4
 8008dfc:	6010      	str	r0, [r2, #0]
 8008dfe:	0628      	lsls	r0, r5, #24
 8008e00:	d501      	bpl.n	8008e06 <_printf_i+0xc2>
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	e002      	b.n	8008e0c <_printf_i+0xc8>
 8008e06:	0668      	lsls	r0, r5, #25
 8008e08:	d5fb      	bpl.n	8008e02 <_printf_i+0xbe>
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	4854      	ldr	r0, [pc, #336]	; (8008f60 <_printf_i+0x21c>)
 8008e0e:	296f      	cmp	r1, #111	; 0x6f
 8008e10:	bf14      	ite	ne
 8008e12:	220a      	movne	r2, #10
 8008e14:	2208      	moveq	r2, #8
 8008e16:	2100      	movs	r1, #0
 8008e18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e1c:	6865      	ldr	r5, [r4, #4]
 8008e1e:	60a5      	str	r5, [r4, #8]
 8008e20:	2d00      	cmp	r5, #0
 8008e22:	f2c0 8095 	blt.w	8008f50 <_printf_i+0x20c>
 8008e26:	6821      	ldr	r1, [r4, #0]
 8008e28:	f021 0104 	bic.w	r1, r1, #4
 8008e2c:	6021      	str	r1, [r4, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d13d      	bne.n	8008eae <_printf_i+0x16a>
 8008e32:	2d00      	cmp	r5, #0
 8008e34:	f040 808e 	bne.w	8008f54 <_printf_i+0x210>
 8008e38:	4665      	mov	r5, ip
 8008e3a:	2a08      	cmp	r2, #8
 8008e3c:	d10b      	bne.n	8008e56 <_printf_i+0x112>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	07db      	lsls	r3, r3, #31
 8008e42:	d508      	bpl.n	8008e56 <_printf_i+0x112>
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	6862      	ldr	r2, [r4, #4]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	bfde      	ittt	le
 8008e4c:	2330      	movle	r3, #48	; 0x30
 8008e4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e52:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008e56:	ebac 0305 	sub.w	r3, ip, r5
 8008e5a:	6123      	str	r3, [r4, #16]
 8008e5c:	f8cd 8000 	str.w	r8, [sp]
 8008e60:	463b      	mov	r3, r7
 8008e62:	aa03      	add	r2, sp, #12
 8008e64:	4621      	mov	r1, r4
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7ff fef6 	bl	8008c58 <_printf_common>
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d14d      	bne.n	8008f0c <_printf_i+0x1c8>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e74:	b005      	add	sp, #20
 8008e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e7a:	4839      	ldr	r0, [pc, #228]	; (8008f60 <_printf_i+0x21c>)
 8008e7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e80:	6813      	ldr	r3, [r2, #0]
 8008e82:	6821      	ldr	r1, [r4, #0]
 8008e84:	1d1d      	adds	r5, r3, #4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6015      	str	r5, [r2, #0]
 8008e8a:	060a      	lsls	r2, r1, #24
 8008e8c:	d50b      	bpl.n	8008ea6 <_printf_i+0x162>
 8008e8e:	07ca      	lsls	r2, r1, #31
 8008e90:	bf44      	itt	mi
 8008e92:	f041 0120 	orrmi.w	r1, r1, #32
 8008e96:	6021      	strmi	r1, [r4, #0]
 8008e98:	b91b      	cbnz	r3, 8008ea2 <_printf_i+0x15e>
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	f022 0220 	bic.w	r2, r2, #32
 8008ea0:	6022      	str	r2, [r4, #0]
 8008ea2:	2210      	movs	r2, #16
 8008ea4:	e7b7      	b.n	8008e16 <_printf_i+0xd2>
 8008ea6:	064d      	lsls	r5, r1, #25
 8008ea8:	bf48      	it	mi
 8008eaa:	b29b      	uxthmi	r3, r3
 8008eac:	e7ef      	b.n	8008e8e <_printf_i+0x14a>
 8008eae:	4665      	mov	r5, ip
 8008eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eb4:	fb02 3311 	mls	r3, r2, r1, r3
 8008eb8:	5cc3      	ldrb	r3, [r0, r3]
 8008eba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	2900      	cmp	r1, #0
 8008ec2:	d1f5      	bne.n	8008eb0 <_printf_i+0x16c>
 8008ec4:	e7b9      	b.n	8008e3a <_printf_i+0xf6>
 8008ec6:	6813      	ldr	r3, [r2, #0]
 8008ec8:	6825      	ldr	r5, [r4, #0]
 8008eca:	6961      	ldr	r1, [r4, #20]
 8008ecc:	1d18      	adds	r0, r3, #4
 8008ece:	6010      	str	r0, [r2, #0]
 8008ed0:	0628      	lsls	r0, r5, #24
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	d501      	bpl.n	8008eda <_printf_i+0x196>
 8008ed6:	6019      	str	r1, [r3, #0]
 8008ed8:	e002      	b.n	8008ee0 <_printf_i+0x19c>
 8008eda:	066a      	lsls	r2, r5, #25
 8008edc:	d5fb      	bpl.n	8008ed6 <_printf_i+0x192>
 8008ede:	8019      	strh	r1, [r3, #0]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	6123      	str	r3, [r4, #16]
 8008ee4:	4665      	mov	r5, ip
 8008ee6:	e7b9      	b.n	8008e5c <_printf_i+0x118>
 8008ee8:	6813      	ldr	r3, [r2, #0]
 8008eea:	1d19      	adds	r1, r3, #4
 8008eec:	6011      	str	r1, [r2, #0]
 8008eee:	681d      	ldr	r5, [r3, #0]
 8008ef0:	6862      	ldr	r2, [r4, #4]
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	f7f7 f993 	bl	8000220 <memchr>
 8008efa:	b108      	cbz	r0, 8008f00 <_printf_i+0x1bc>
 8008efc:	1b40      	subs	r0, r0, r5
 8008efe:	6060      	str	r0, [r4, #4]
 8008f00:	6863      	ldr	r3, [r4, #4]
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	2300      	movs	r3, #0
 8008f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f0a:	e7a7      	b.n	8008e5c <_printf_i+0x118>
 8008f0c:	6923      	ldr	r3, [r4, #16]
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4639      	mov	r1, r7
 8008f12:	4630      	mov	r0, r6
 8008f14:	47c0      	blx	r8
 8008f16:	3001      	adds	r0, #1
 8008f18:	d0aa      	beq.n	8008e70 <_printf_i+0x12c>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	079b      	lsls	r3, r3, #30
 8008f1e:	d413      	bmi.n	8008f48 <_printf_i+0x204>
 8008f20:	68e0      	ldr	r0, [r4, #12]
 8008f22:	9b03      	ldr	r3, [sp, #12]
 8008f24:	4298      	cmp	r0, r3
 8008f26:	bfb8      	it	lt
 8008f28:	4618      	movlt	r0, r3
 8008f2a:	e7a3      	b.n	8008e74 <_printf_i+0x130>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	464a      	mov	r2, r9
 8008f30:	4639      	mov	r1, r7
 8008f32:	4630      	mov	r0, r6
 8008f34:	47c0      	blx	r8
 8008f36:	3001      	adds	r0, #1
 8008f38:	d09a      	beq.n	8008e70 <_printf_i+0x12c>
 8008f3a:	3501      	adds	r5, #1
 8008f3c:	68e3      	ldr	r3, [r4, #12]
 8008f3e:	9a03      	ldr	r2, [sp, #12]
 8008f40:	1a9b      	subs	r3, r3, r2
 8008f42:	42ab      	cmp	r3, r5
 8008f44:	dcf2      	bgt.n	8008f2c <_printf_i+0x1e8>
 8008f46:	e7eb      	b.n	8008f20 <_printf_i+0x1dc>
 8008f48:	2500      	movs	r5, #0
 8008f4a:	f104 0919 	add.w	r9, r4, #25
 8008f4e:	e7f5      	b.n	8008f3c <_printf_i+0x1f8>
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1ac      	bne.n	8008eae <_printf_i+0x16a>
 8008f54:	7803      	ldrb	r3, [r0, #0]
 8008f56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f5e:	e76c      	b.n	8008e3a <_printf_i+0xf6>
 8008f60:	08009451 	.word	0x08009451
 8008f64:	08009462 	.word	0x08009462

08008f68 <_sbrk_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4c06      	ldr	r4, [pc, #24]	; (8008f84 <_sbrk_r+0x1c>)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4605      	mov	r5, r0
 8008f70:	4608      	mov	r0, r1
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	f7f8 fc3a 	bl	80017ec <_sbrk>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_sbrk_r+0x1a>
 8008f7c:	6823      	ldr	r3, [r4, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_sbrk_r+0x1a>
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	2000088c 	.word	0x2000088c

08008f88 <__sread>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f90:	f000 f896 	bl	80090c0 <_read_r>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	bfab      	itete	ge
 8008f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f9c:	181b      	addge	r3, r3, r0
 8008f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fa2:	bfac      	ite	ge
 8008fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fa6:	81a3      	strhlt	r3, [r4, #12]
 8008fa8:	bd10      	pop	{r4, pc}

08008faa <__swrite>:
 8008faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fae:	461f      	mov	r7, r3
 8008fb0:	898b      	ldrh	r3, [r1, #12]
 8008fb2:	05db      	lsls	r3, r3, #23
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	4616      	mov	r6, r2
 8008fba:	d505      	bpl.n	8008fc8 <__swrite+0x1e>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc4:	f000 f868 	bl	8009098 <_lseek_r>
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	4632      	mov	r2, r6
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	4628      	mov	r0, r5
 8008fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fde:	f000 b817 	b.w	8009010 <_write_r>

08008fe2 <__sseek>:
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fea:	f000 f855 	bl	8009098 <_lseek_r>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	bf15      	itete	ne
 8008ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ffe:	81a3      	strheq	r3, [r4, #12]
 8009000:	bf18      	it	ne
 8009002:	81a3      	strhne	r3, [r4, #12]
 8009004:	bd10      	pop	{r4, pc}

08009006 <__sclose>:
 8009006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900a:	f000 b813 	b.w	8009034 <_close_r>
	...

08009010 <_write_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4c07      	ldr	r4, [pc, #28]	; (8009030 <_write_r+0x20>)
 8009014:	4605      	mov	r5, r0
 8009016:	4608      	mov	r0, r1
 8009018:	4611      	mov	r1, r2
 800901a:	2200      	movs	r2, #0
 800901c:	6022      	str	r2, [r4, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f7f8 f803 	bl	800102a <_write>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_write_r+0x1e>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	b103      	cbz	r3, 800902e <_write_r+0x1e>
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	2000088c 	.word	0x2000088c

08009034 <_close_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4c06      	ldr	r4, [pc, #24]	; (8009050 <_close_r+0x1c>)
 8009038:	2300      	movs	r3, #0
 800903a:	4605      	mov	r5, r0
 800903c:	4608      	mov	r0, r1
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	f7f8 fb9f 	bl	8001782 <_close>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_close_r+0x1a>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	b103      	cbz	r3, 800904e <_close_r+0x1a>
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	2000088c 	.word	0x2000088c

08009054 <_fstat_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4c07      	ldr	r4, [pc, #28]	; (8009074 <_fstat_r+0x20>)
 8009058:	2300      	movs	r3, #0
 800905a:	4605      	mov	r5, r0
 800905c:	4608      	mov	r0, r1
 800905e:	4611      	mov	r1, r2
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	f7f8 fb9a 	bl	800179a <_fstat>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d102      	bne.n	8009070 <_fstat_r+0x1c>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	b103      	cbz	r3, 8009070 <_fstat_r+0x1c>
 800906e:	602b      	str	r3, [r5, #0]
 8009070:	bd38      	pop	{r3, r4, r5, pc}
 8009072:	bf00      	nop
 8009074:	2000088c 	.word	0x2000088c

08009078 <_isatty_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4c06      	ldr	r4, [pc, #24]	; (8009094 <_isatty_r+0x1c>)
 800907c:	2300      	movs	r3, #0
 800907e:	4605      	mov	r5, r0
 8009080:	4608      	mov	r0, r1
 8009082:	6023      	str	r3, [r4, #0]
 8009084:	f7f8 fb99 	bl	80017ba <_isatty>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_isatty_r+0x1a>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	b103      	cbz	r3, 8009092 <_isatty_r+0x1a>
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	2000088c 	.word	0x2000088c

08009098 <_lseek_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4c07      	ldr	r4, [pc, #28]	; (80090b8 <_lseek_r+0x20>)
 800909c:	4605      	mov	r5, r0
 800909e:	4608      	mov	r0, r1
 80090a0:	4611      	mov	r1, r2
 80090a2:	2200      	movs	r2, #0
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f7f8 fb92 	bl	80017d0 <_lseek>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_lseek_r+0x1e>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_lseek_r+0x1e>
 80090b4:	602b      	str	r3, [r5, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	2000088c 	.word	0x2000088c

080090bc <__malloc_lock>:
 80090bc:	4770      	bx	lr

080090be <__malloc_unlock>:
 80090be:	4770      	bx	lr

080090c0 <_read_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4c07      	ldr	r4, [pc, #28]	; (80090e0 <_read_r+0x20>)
 80090c4:	4605      	mov	r5, r0
 80090c6:	4608      	mov	r0, r1
 80090c8:	4611      	mov	r1, r2
 80090ca:	2200      	movs	r2, #0
 80090cc:	6022      	str	r2, [r4, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f7f8 fb3a 	bl	8001748 <_read>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_read_r+0x1e>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	b103      	cbz	r3, 80090de <_read_r+0x1e>
 80090dc:	602b      	str	r3, [r5, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	2000088c 	.word	0x2000088c

080090e4 <_init>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	bf00      	nop
 80090e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ea:	bc08      	pop	{r3}
 80090ec:	469e      	mov	lr, r3
 80090ee:	4770      	bx	lr

080090f0 <_fini>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	bf00      	nop
 80090f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f6:	bc08      	pop	{r3}
 80090f8:	469e      	mov	lr, r3
 80090fa:	4770      	bx	lr
